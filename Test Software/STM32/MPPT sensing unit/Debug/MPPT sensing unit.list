
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000532c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  080054bc  080054bc  000154bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005594  08005594  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005594  08005594  00015594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800559c  0800559c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800559c  0800559c  0001559c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080055a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  2000005c  08005600  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000324  08005600  00020324  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fa57  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000230e  00000000  00000000  0002fb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d58  00000000  00000000  00031e38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a34  00000000  00000000  00032b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000218df  00000000  00000000  000335c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f695  00000000  00000000  00054ea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cfd8e  00000000  00000000  00064538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c44  00000000  00000000  001342c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00137f0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080054a4 	.word	0x080054a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080054a4 	.word	0x080054a4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200001d0 	.word	0x200001d0

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fc58 	bl	8000e56 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f909 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fa2b 	bl	8000a04 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 fa0b 	bl	80009c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 f9d9 	bl	8000968 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b6:	f000 f963 	bl	8000880 <MX_ADC1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80005ba:	2202      	movs	r2, #2
 80005bc:	496b      	ldr	r1, [pc, #428]	; (800076c <main+0x1d0>)
 80005be:	486c      	ldr	r0, [pc, #432]	; (8000770 <main+0x1d4>)
 80005c0:	f000 fffe 	bl	80015c0 <HAL_ADC_Start_DMA>
	  while(!convCompleted);
 80005c4:	bf00      	nop
 80005c6:	4b6b      	ldr	r3, [pc, #428]	; (8000774 <main+0x1d8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d0fb      	beq.n	80005c6 <main+0x2a>

	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005ce:	2300      	movs	r3, #0
 80005d0:	71fb      	strb	r3, [r7, #7]
 80005d2:	e00a      	b.n	80005ea <main+0x4e>
		  rawE = (uint16_t) rawValues[0];
 80005d4:	4b65      	ldr	r3, [pc, #404]	; (800076c <main+0x1d0>)
 80005d6:	881a      	ldrh	r2, [r3, #0]
 80005d8:	4b67      	ldr	r3, [pc, #412]	; (8000778 <main+0x1dc>)
 80005da:	801a      	strh	r2, [r3, #0]
		  rawF = (uint16_t) rawValues[1];
 80005dc:	4b63      	ldr	r3, [pc, #396]	; (800076c <main+0x1d0>)
 80005de:	885a      	ldrh	r2, [r3, #2]
 80005e0:	4b66      	ldr	r3, [pc, #408]	; (800077c <main+0x1e0>)
 80005e2:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005e4:	79fb      	ldrb	r3, [r7, #7]
 80005e6:	3301      	adds	r3, #1
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	79fa      	ldrb	r2, [r7, #7]
 80005ec:	4b60      	ldr	r3, [pc, #384]	; (8000770 <main+0x1d4>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	429a      	cmp	r2, r3
 80005f2:	d3ef      	bcc.n	80005d4 <main+0x38>
	  }

	  voltageE = unitValue * rawE;
 80005f4:	4b60      	ldr	r3, [pc, #384]	; (8000778 <main+0x1dc>)
 80005f6:	881b      	ldrh	r3, [r3, #0]
 80005f8:	ee07 3a90 	vmov	s15, r3
 80005fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000600:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000780 <main+0x1e4>
 8000604:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800060c:	ee17 3a90 	vmov	r3, s15
 8000610:	b29a      	uxth	r2, r3
 8000612:	4b5c      	ldr	r3, [pc, #368]	; (8000784 <main+0x1e8>)
 8000614:	801a      	strh	r2, [r3, #0]
	  voltageF = unitValue * rawF;
 8000616:	4b59      	ldr	r3, [pc, #356]	; (800077c <main+0x1e0>)
 8000618:	881b      	ldrh	r3, [r3, #0]
 800061a:	ee07 3a90 	vmov	s15, r3
 800061e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000622:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000780 <main+0x1e4>
 8000626:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800062e:	ee17 3a90 	vmov	r3, s15
 8000632:	b29a      	uxth	r2, r3
 8000634:	4b54      	ldr	r3, [pc, #336]	; (8000788 <main+0x1ec>)
 8000636:	801a      	strh	r2, [r3, #0]

	  currentE = (voltageE - offset) * sensitivity;
 8000638:	4b52      	ldr	r3, [pc, #328]	; (8000784 <main+0x1e8>)
 800063a:	881b      	ldrh	r3, [r3, #0]
 800063c:	ee07 3a90 	vmov	s15, r3
 8000640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000644:	ed9f 7a51 	vldr	s14, [pc, #324]	; 800078c <main+0x1f0>
 8000648:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800064c:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000790 <main+0x1f4>
 8000650:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000654:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000658:	ee17 3a90 	vmov	r3, s15
 800065c:	b29a      	uxth	r2, r3
 800065e:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <main+0x1f8>)
 8000660:	801a      	strh	r2, [r3, #0]
	  currentF = (voltageF - offset) * sensitivity;
 8000662:	4b49      	ldr	r3, [pc, #292]	; (8000788 <main+0x1ec>)
 8000664:	881b      	ldrh	r3, [r3, #0]
 8000666:	ee07 3a90 	vmov	s15, r3
 800066a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800066e:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800078c <main+0x1f0>
 8000672:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000676:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000790 <main+0x1f4>
 800067a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800067e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000682:	ee17 3a90 	vmov	r3, s15
 8000686:	b29a      	uxth	r2, r3
 8000688:	4b43      	ldr	r3, [pc, #268]	; (8000798 <main+0x1fc>)
 800068a:	801a      	strh	r2, [r3, #0]

	  sprintf(msg, "rawE: %hu ", rawE);
 800068c:	4b3a      	ldr	r3, [pc, #232]	; (8000778 <main+0x1dc>)
 800068e:	881b      	ldrh	r3, [r3, #0]
 8000690:	461a      	mov	r2, r3
 8000692:	4942      	ldr	r1, [pc, #264]	; (800079c <main+0x200>)
 8000694:	4842      	ldr	r0, [pc, #264]	; (80007a0 <main+0x204>)
 8000696:	f004 fa61 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800069a:	4841      	ldr	r0, [pc, #260]	; (80007a0 <main+0x204>)
 800069c:	f7ff fd98 	bl	80001d0 <strlen>
 80006a0:	4603      	mov	r3, r0
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	f04f 33ff 	mov.w	r3, #4294967295
 80006a8:	493d      	ldr	r1, [pc, #244]	; (80007a0 <main+0x204>)
 80006aa:	483e      	ldr	r0, [pc, #248]	; (80007a4 <main+0x208>)
 80006ac:	f003 fd8a 	bl	80041c4 <HAL_UART_Transmit>

	  sprintf(msg, "\trawF: %hu ", rawF);
 80006b0:	4b32      	ldr	r3, [pc, #200]	; (800077c <main+0x1e0>)
 80006b2:	881b      	ldrh	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	493c      	ldr	r1, [pc, #240]	; (80007a8 <main+0x20c>)
 80006b8:	4839      	ldr	r0, [pc, #228]	; (80007a0 <main+0x204>)
 80006ba:	f004 fa4f 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);\
 80006be:	4838      	ldr	r0, [pc, #224]	; (80007a0 <main+0x204>)
 80006c0:	f7ff fd86 	bl	80001d0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	b29a      	uxth	r2, r3
 80006c8:	f04f 33ff 	mov.w	r3, #4294967295
 80006cc:	4934      	ldr	r1, [pc, #208]	; (80007a0 <main+0x204>)
 80006ce:	4835      	ldr	r0, [pc, #212]	; (80007a4 <main+0x208>)
 80006d0:	f003 fd78 	bl	80041c4 <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageE: %hu ", voltageE);
 80006d4:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <main+0x1e8>)
 80006d6:	881b      	ldrh	r3, [r3, #0]
 80006d8:	461a      	mov	r2, r3
 80006da:	4934      	ldr	r1, [pc, #208]	; (80007ac <main+0x210>)
 80006dc:	4830      	ldr	r0, [pc, #192]	; (80007a0 <main+0x204>)
 80006de:	f004 fa3d 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80006e2:	482f      	ldr	r0, [pc, #188]	; (80007a0 <main+0x204>)
 80006e4:	f7ff fd74 	bl	80001d0 <strlen>
 80006e8:	4603      	mov	r3, r0
 80006ea:	b29a      	uxth	r2, r3
 80006ec:	f04f 33ff 	mov.w	r3, #4294967295
 80006f0:	492b      	ldr	r1, [pc, #172]	; (80007a0 <main+0x204>)
 80006f2:	482c      	ldr	r0, [pc, #176]	; (80007a4 <main+0x208>)
 80006f4:	f003 fd66 	bl	80041c4 <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageF: %hu ", voltageF);
 80006f8:	4b23      	ldr	r3, [pc, #140]	; (8000788 <main+0x1ec>)
 80006fa:	881b      	ldrh	r3, [r3, #0]
 80006fc:	461a      	mov	r2, r3
 80006fe:	492c      	ldr	r1, [pc, #176]	; (80007b0 <main+0x214>)
 8000700:	4827      	ldr	r0, [pc, #156]	; (80007a0 <main+0x204>)
 8000702:	f004 fa2b 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000706:	4826      	ldr	r0, [pc, #152]	; (80007a0 <main+0x204>)
 8000708:	f7ff fd62 	bl	80001d0 <strlen>
 800070c:	4603      	mov	r3, r0
 800070e:	b29a      	uxth	r2, r3
 8000710:	f04f 33ff 	mov.w	r3, #4294967295
 8000714:	4922      	ldr	r1, [pc, #136]	; (80007a0 <main+0x204>)
 8000716:	4823      	ldr	r0, [pc, #140]	; (80007a4 <main+0x208>)
 8000718:	f003 fd54 	bl	80041c4 <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentE: %hu ", currentE);
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <main+0x1f8>)
 800071e:	881b      	ldrh	r3, [r3, #0]
 8000720:	461a      	mov	r2, r3
 8000722:	4924      	ldr	r1, [pc, #144]	; (80007b4 <main+0x218>)
 8000724:	481e      	ldr	r0, [pc, #120]	; (80007a0 <main+0x204>)
 8000726:	f004 fa19 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800072a:	481d      	ldr	r0, [pc, #116]	; (80007a0 <main+0x204>)
 800072c:	f7ff fd50 	bl	80001d0 <strlen>
 8000730:	4603      	mov	r3, r0
 8000732:	b29a      	uxth	r2, r3
 8000734:	f04f 33ff 	mov.w	r3, #4294967295
 8000738:	4919      	ldr	r1, [pc, #100]	; (80007a0 <main+0x204>)
 800073a:	481a      	ldr	r0, [pc, #104]	; (80007a4 <main+0x208>)
 800073c:	f003 fd42 	bl	80041c4 <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentF: %hu \r\n", currentF);
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <main+0x1fc>)
 8000742:	881b      	ldrh	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	491c      	ldr	r1, [pc, #112]	; (80007b8 <main+0x21c>)
 8000748:	4815      	ldr	r0, [pc, #84]	; (80007a0 <main+0x204>)
 800074a:	f004 fa07 	bl	8004b5c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800074e:	4814      	ldr	r0, [pc, #80]	; (80007a0 <main+0x204>)
 8000750:	f7ff fd3e 	bl	80001d0 <strlen>
 8000754:	4603      	mov	r3, r0
 8000756:	b29a      	uxth	r2, r3
 8000758:	f04f 33ff 	mov.w	r3, #4294967295
 800075c:	4910      	ldr	r1, [pc, #64]	; (80007a0 <main+0x204>)
 800075e:	4811      	ldr	r0, [pc, #68]	; (80007a4 <main+0x208>)
 8000760:	f003 fd30 	bl	80041c4 <HAL_UART_Transmit>

	  HAL_Delay(250);
 8000764:	20fa      	movs	r0, #250	; 0xfa
 8000766:	f000 fbeb 	bl	8000f40 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800076a:	e726      	b.n	80005ba <main+0x1e>
 800076c:	200001b0 	.word	0x200001b0
 8000770:	20000078 	.word	0x20000078
 8000774:	200001d0 	.word	0x200001d0
 8000778:	200001b4 	.word	0x200001b4
 800077c:	200001b6 	.word	0x200001b6
 8000780:	3f4e4000 	.word	0x3f4e4000
 8000784:	200001b8 	.word	0x200001b8
 8000788:	200001ba 	.word	0x200001ba
 800078c:	43a10000 	.word	0x43a10000
 8000790:	40726c9b 	.word	0x40726c9b
 8000794:	200001ac 	.word	0x200001ac
 8000798:	200001ae 	.word	0x200001ae
 800079c:	080054bc 	.word	0x080054bc
 80007a0:	200001bc 	.word	0x200001bc
 80007a4:	20000124 	.word	0x20000124
 80007a8:	080054c8 	.word	0x080054c8
 80007ac:	080054d4 	.word	0x080054d4
 80007b0:	080054e4 	.word	0x080054e4
 80007b4:	080054f4 	.word	0x080054f4
 80007b8:	08005504 	.word	0x08005504

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b096      	sub	sp, #88	; 0x58
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	2244      	movs	r2, #68	; 0x44
 80007c8:	2100      	movs	r1, #0
 80007ca:	4618      	mov	r0, r3
 80007cc:	f004 f9e6 	bl	8004b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d0:	463b      	mov	r3, r7
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e2:	f002 fb1b 	bl	8002e1c <HAL_PWREx_ControlVoltageScaling>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007ec:	f000 f954 	bl	8000a98 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f0:	f002 faf6 	bl	8002de0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f4:	4b21      	ldr	r3, [pc, #132]	; (800087c <SystemClock_Config+0xc0>)
 80007f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007fa:	4a20      	ldr	r2, [pc, #128]	; (800087c <SystemClock_Config+0xc0>)
 80007fc:	f023 0318 	bic.w	r3, r3, #24
 8000800:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000804:	2314      	movs	r3, #20
 8000806:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000808:	2301      	movs	r3, #1
 800080a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000810:	2300      	movs	r3, #0
 8000812:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000814:	2360      	movs	r3, #96	; 0x60
 8000816:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000818:	2302      	movs	r3, #2
 800081a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800081c:	2301      	movs	r3, #1
 800081e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000820:	2301      	movs	r3, #1
 8000822:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000824:	2310      	movs	r3, #16
 8000826:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000828:	2307      	movs	r3, #7
 800082a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082c:	2302      	movs	r3, #2
 800082e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000834:	f107 0314 	add.w	r3, r7, #20
 8000838:	4618      	mov	r0, r3
 800083a:	f002 fb45 	bl	8002ec8 <HAL_RCC_OscConfig>
 800083e:	4603      	mov	r3, r0
 8000840:	2b00      	cmp	r3, #0
 8000842:	d001      	beq.n	8000848 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000844:	f000 f928 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000848:	230f      	movs	r3, #15
 800084a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084c:	2303      	movs	r3, #3
 800084e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000850:	2300      	movs	r3, #0
 8000852:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800085c:	463b      	mov	r3, r7
 800085e:	2101      	movs	r1, #1
 8000860:	4618      	mov	r0, r3
 8000862:	f002 ff45 	bl	80036f0 <HAL_RCC_ClockConfig>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800086c:	f000 f914 	bl	8000a98 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000870:	f003 fb58 	bl	8003f24 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000874:	bf00      	nop
 8000876:	3758      	adds	r7, #88	; 0x58
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}
 800087c:	40021000 	.word	0x40021000

08000880 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b086      	sub	sp, #24
 8000884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000886:	463b      	mov	r3, r7
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
 8000894:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000896:	4b30      	ldr	r3, [pc, #192]	; (8000958 <MX_ADC1_Init+0xd8>)
 8000898:	4a30      	ldr	r2, [pc, #192]	; (800095c <MX_ADC1_Init+0xdc>)
 800089a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800089c:	4b2e      	ldr	r3, [pc, #184]	; (8000958 <MX_ADC1_Init+0xd8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a2:	4b2d      	ldr	r3, [pc, #180]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008a8:	4b2b      	ldr	r3, [pc, #172]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ae:	4b2a      	ldr	r3, [pc, #168]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b4:	4b28      	ldr	r3, [pc, #160]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008b6:	2204      	movs	r2, #4
 80008b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ba:	4b27      	ldr	r3, [pc, #156]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008bc:	2200      	movs	r2, #0
 80008be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c0:	4b25      	ldr	r3, [pc, #148]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80008c6:	4b24      	ldr	r3, [pc, #144]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008c8:	2202      	movs	r2, #2
 80008ca:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008cc:	4b22      	ldr	r3, [pc, #136]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b20      	ldr	r3, [pc, #128]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008da:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008dc:	2200      	movs	r2, #0
 80008de:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008e8:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008ee:	4b1a      	ldr	r3, [pc, #104]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f6:	4818      	ldr	r0, [pc, #96]	; (8000958 <MX_ADC1_Init+0xd8>)
 80008f8:	f000 fd20 	bl	800133c <HAL_ADC_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000902:	f000 f8c9 	bl	8000a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <MX_ADC1_Init+0xe0>)
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090a:	2306      	movs	r3, #6
 800090c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800090e:	2307      	movs	r3, #7
 8000910:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000912:	237f      	movs	r3, #127	; 0x7f
 8000914:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000916:	2304      	movs	r3, #4
 8000918:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800091e:	463b      	mov	r3, r7
 8000920:	4619      	mov	r1, r3
 8000922:	480d      	ldr	r0, [pc, #52]	; (8000958 <MX_ADC1_Init+0xd8>)
 8000924:	f001 f8a2 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800092e:	f000 f8b3 	bl	8000a98 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000932:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_ADC1_Init+0xe4>)
 8000934:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000936:	230c      	movs	r3, #12
 8000938:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_ADC1_Init+0xd8>)
 8000940:	f001 f894 	bl	8001a6c <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800094a:	f000 f8a5 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3718      	adds	r7, #24
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000078 	.word	0x20000078
 800095c:	50040000 	.word	0x50040000
 8000960:	14f00020 	.word	0x14f00020
 8000964:	19200040 	.word	0x19200040

08000968 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800096e:	4a15      	ldr	r2, [pc, #84]	; (80009c4 <MX_USART2_UART_Init+0x5c>)
 8000970:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000974:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000978:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000986:	4b0e      	ldr	r3, [pc, #56]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800098e:	220c      	movs	r2, #12
 8000990:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 8000994:	2200      	movs	r2, #0
 8000996:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000998:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099e:	4b08      	ldr	r3, [pc, #32]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_USART2_UART_Init+0x58>)
 80009ac:	f003 fbbc 	bl	8004128 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80009b6:	f000 f86f 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000124 	.word	0x20000124
 80009c4:	40004400 	.word	0x40004400

080009c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <MX_DMA_Init+0x38>)
 80009d4:	f043 0301 	orr.w	r3, r3, #1
 80009d8:	6493      	str	r3, [r2, #72]	; 0x48
 80009da:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_DMA_Init+0x38>)
 80009dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80009de:	f003 0301 	and.w	r3, r3, #1
 80009e2:	607b      	str	r3, [r7, #4]
 80009e4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	200b      	movs	r0, #11
 80009ec:	f001 fe47 	bl	800267e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009f0:	200b      	movs	r0, #11
 80009f2:	f001 fe60 	bl	80026b6 <HAL_NVIC_EnableIRQ>

}
 80009f6:	bf00      	nop
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40021000 	.word	0x40021000

08000a04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b088      	sub	sp, #32
 8000a08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	2200      	movs	r2, #0
 8000a10:	601a      	str	r2, [r3, #0]
 8000a12:	605a      	str	r2, [r3, #4]
 8000a14:	609a      	str	r2, [r3, #8]
 8000a16:	60da      	str	r2, [r3, #12]
 8000a18:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a1c      	ldr	r2, [pc, #112]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a20:	f043 0304 	orr.w	r3, r3, #4
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0304 	and.w	r3, r3, #4
 8000a2e:	60bb      	str	r3, [r7, #8]
 8000a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a32:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a36:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a38:	f043 0301 	orr.w	r3, r3, #1
 8000a3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a3e:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a42:	f003 0301 	and.w	r3, r3, #1
 8000a46:	607b      	str	r3, [r7, #4]
 8000a48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4e:	4a10      	ldr	r2, [pc, #64]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a50:	f043 0302 	orr.w	r3, r3, #2
 8000a54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_GPIO_Init+0x8c>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	f003 0302 	and.w	r3, r3, #2
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	480b      	ldr	r0, [pc, #44]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a68:	f002 f9a2 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 030c 	add.w	r3, r7, #12
 8000a80:	4619      	mov	r1, r3
 8000a82:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_GPIO_Init+0x90>)
 8000a84:	f002 f82a 	bl	8002adc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a88:	bf00      	nop
 8000a8a:	3720      	adds	r7, #32
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40021000 	.word	0x40021000
 8000a94:	48000400 	.word	0x48000400

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ae8 <HAL_MspInit+0x44>)
 8000aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aae:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab0:	f043 0301 	orr.w	r3, r3, #1
 8000ab4:	6613      	str	r3, [r2, #96]	; 0x60
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ab8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aba:	f003 0301 	and.w	r3, r3, #1
 8000abe:	607b      	str	r3, [r7, #4]
 8000ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ac2:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000acc:	6593      	str	r3, [r2, #88]	; 0x58
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <HAL_MspInit+0x44>)
 8000ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ad6:	603b      	str	r3, [r7, #0]
 8000ad8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40021000 	.word	0x40021000

08000aec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b09e      	sub	sp, #120	; 0x78
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	605a      	str	r2, [r3, #4]
 8000afe:	609a      	str	r2, [r3, #8]
 8000b00:	60da      	str	r2, [r3, #12]
 8000b02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b04:	f107 0310 	add.w	r3, r7, #16
 8000b08:	2254      	movs	r2, #84	; 0x54
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f004 f845 	bl	8004b9c <memset>
  if(hadc->Instance==ADC1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a3f      	ldr	r2, [pc, #252]	; (8000c14 <HAL_ADC_MspInit+0x128>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d176      	bne.n	8000c0a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000b1c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b20:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000b22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000b26:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000b30:	2310      	movs	r3, #16
 8000b32:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000b34:	2307      	movs	r3, #7
 8000b36:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000b38:	2302      	movs	r3, #2
 8000b3a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000b40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b46:	f107 0310 	add.w	r3, r7, #16
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f002 fff4 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000b56:	f7ff ff9f 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000b5a:	4b2f      	ldr	r3, [pc, #188]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a2e      	ldr	r2, [pc, #184]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b2c      	ldr	r3, [pc, #176]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b29      	ldr	r3, [pc, #164]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b26      	ldr	r3, [pc, #152]	; (8000c18 <HAL_ADC_MspInit+0x12c>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60bb      	str	r3, [r7, #8]
 8000b88:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ba0:	f001 ff9c 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000ba6:	4a1e      	ldr	r2, [pc, #120]	; (8000c20 <HAL_ADC_MspInit+0x134>)
 8000ba8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000baa:	4b1c      	ldr	r3, [pc, #112]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000bb6:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bbe:	2280      	movs	r2, #128	; 0x80
 8000bc0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000bc2:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bc4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bc8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bca:	4b14      	ldr	r3, [pc, #80]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bcc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000bd0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bd4:	2220      	movs	r2, #32
 8000bd6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bd8:	4b10      	ldr	r3, [pc, #64]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bde:	480f      	ldr	r0, [pc, #60]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000be0:	f001 fd84 	bl	80026ec <HAL_DMA_Init>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000bea:	f7ff ff55 	bl	8000a98 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a0a      	ldr	r2, [pc, #40]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bf2:	64da      	str	r2, [r3, #76]	; 0x4c
 8000bf4:	4a09      	ldr	r2, [pc, #36]	; (8000c1c <HAL_ADC_MspInit+0x130>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	2012      	movs	r0, #18
 8000c00:	f001 fd3d 	bl	800267e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000c04:	2012      	movs	r0, #18
 8000c06:	f001 fd56 	bl	80026b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c0a:	bf00      	nop
 8000c0c:	3778      	adds	r7, #120	; 0x78
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	50040000 	.word	0x50040000
 8000c18:	40021000 	.word	0x40021000
 8000c1c:	200000dc 	.word	0x200000dc
 8000c20:	40020008 	.word	0x40020008

08000c24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09e      	sub	sp, #120	; 0x78
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c30:	2200      	movs	r2, #0
 8000c32:	601a      	str	r2, [r3, #0]
 8000c34:	605a      	str	r2, [r3, #4]
 8000c36:	609a      	str	r2, [r3, #8]
 8000c38:	60da      	str	r2, [r3, #12]
 8000c3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c3c:	f107 0310 	add.w	r3, r7, #16
 8000c40:	2254      	movs	r2, #84	; 0x54
 8000c42:	2100      	movs	r1, #0
 8000c44:	4618      	mov	r0, r3
 8000c46:	f003 ffa9 	bl	8004b9c <memset>
  if(huart->Instance==USART2)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4a28      	ldr	r2, [pc, #160]	; (8000cf0 <HAL_UART_MspInit+0xcc>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d148      	bne.n	8000ce6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c54:	2302      	movs	r3, #2
 8000c56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c5c:	f107 0310 	add.w	r3, r7, #16
 8000c60:	4618      	mov	r0, r3
 8000c62:	f002 ff69 	bl	8003b38 <HAL_RCCEx_PeriphCLKConfig>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c6c:	f7ff ff14 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c74:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000c7c:	4b1d      	ldr	r3, [pc, #116]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c84:	60fb      	str	r3, [r7, #12]
 8000c86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c88:	4b1a      	ldr	r3, [pc, #104]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c8c:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c8e:	f043 0301 	orr.w	r3, r3, #1
 8000c92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c94:	4b17      	ldr	r3, [pc, #92]	; (8000cf4 <HAL_UART_MspInit+0xd0>)
 8000c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c98:	f003 0301 	and.w	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ca0:	2304      	movs	r3, #4
 8000ca2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ca4:	2302      	movs	r3, #2
 8000ca6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cac:	2303      	movs	r3, #3
 8000cae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbe:	f001 ff0d 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cc6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc8:	2302      	movs	r3, #2
 8000cca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000cd4:	2303      	movs	r3, #3
 8000cd6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cdc:	4619      	mov	r1, r3
 8000cde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce2:	f001 fefb 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ce6:	bf00      	nop
 8000ce8:	3778      	adds	r7, #120	; 0x78
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40004400 	.word	0x40004400
 8000cf4:	40021000 	.word	0x40021000

08000cf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <NMI_Handler+0x4>

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d44:	f000 f8dc 	bl	8000f00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d50:	4802      	ldr	r0, [pc, #8]	; (8000d5c <DMA1_Channel1_IRQHandler+0x10>)
 8000d52:	f001 fde3 	bl	800291c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200000dc 	.word	0x200000dc

08000d60 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <ADC1_IRQHandler+0x10>)
 8000d66:	f000 fcaf 	bl	80016c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000078 	.word	0x20000078

08000d74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d7c:	4a14      	ldr	r2, [pc, #80]	; (8000dd0 <_sbrk+0x5c>)
 8000d7e:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <_sbrk+0x60>)
 8000d80:	1ad3      	subs	r3, r2, r3
 8000d82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d88:	4b13      	ldr	r3, [pc, #76]	; (8000dd8 <_sbrk+0x64>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d102      	bne.n	8000d96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d90:	4b11      	ldr	r3, [pc, #68]	; (8000dd8 <_sbrk+0x64>)
 8000d92:	4a12      	ldr	r2, [pc, #72]	; (8000ddc <_sbrk+0x68>)
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d96:	4b10      	ldr	r3, [pc, #64]	; (8000dd8 <_sbrk+0x64>)
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d207      	bcs.n	8000db4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da4:	f003 ff02 	bl	8004bac <__errno>
 8000da8:	4603      	mov	r3, r0
 8000daa:	220c      	movs	r2, #12
 8000dac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dae:	f04f 33ff 	mov.w	r3, #4294967295
 8000db2:	e009      	b.n	8000dc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db4:	4b08      	ldr	r3, [pc, #32]	; (8000dd8 <_sbrk+0x64>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <_sbrk+0x64>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a05      	ldr	r2, [pc, #20]	; (8000dd8 <_sbrk+0x64>)
 8000dc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	3718      	adds	r7, #24
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20010000 	.word	0x20010000
 8000dd4:	00000400 	.word	0x00000400
 8000dd8:	200001d4 	.word	0x200001d4
 8000ddc:	20000328 	.word	0x20000328

08000de0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <SystemInit+0x20>)
 8000de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dea:	4a05      	ldr	r2, [pc, #20]	; (8000e00 <SystemInit+0x20>)
 8000dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000e04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e08:	f7ff ffea 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480c      	ldr	r0, [pc, #48]	; (8000e40 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490d      	ldr	r1, [pc, #52]	; (8000e44 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0d      	ldr	r2, [pc, #52]	; (8000e48 <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0a      	ldr	r2, [pc, #40]	; (8000e4c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0a      	ldr	r4, [pc, #40]	; (8000e50 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e32:	f003 fec1 	bl	8004bb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e36:	f7ff fbb1 	bl	800059c <main>

08000e3a <LoopForever>:

LoopForever:
    b LoopForever
 8000e3a:	e7fe      	b.n	8000e3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e3c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e44:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000e48:	080055a4 	.word	0x080055a4
  ldr r2, =_sbss
 8000e4c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000e50:	20000324 	.word	0x20000324

08000e54 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e54:	e7fe      	b.n	8000e54 <CAN1_RX0_IRQHandler>

08000e56 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f001 fc01 	bl	8002668 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e66:	2000      	movs	r0, #0
 8000e68:	f000 f80e 	bl	8000e88 <HAL_InitTick>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d002      	beq.n	8000e78 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
 8000e74:	71fb      	strb	r3, [r7, #7]
 8000e76:	e001      	b.n	8000e7c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e78:	f7ff fe14 	bl	8000aa4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e7c:	79fb      	ldrb	r3, [r7, #7]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
	...

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e90:	2300      	movs	r3, #0
 8000e92:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e94:	4b17      	ldr	r3, [pc, #92]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d023      	beq.n	8000ee4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e9c:	4b16      	ldr	r3, [pc, #88]	; (8000ef8 <HAL_InitTick+0x70>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_InitTick+0x6c>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f001 fc0d 	bl	80026d2 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d10f      	bne.n	8000ede <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	2b0f      	cmp	r3, #15
 8000ec2:	d809      	bhi.n	8000ed8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	6879      	ldr	r1, [r7, #4]
 8000ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ecc:	f001 fbd7 	bl	800267e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed0:	4a0a      	ldr	r2, [pc, #40]	; (8000efc <HAL_InitTick+0x74>)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6013      	str	r3, [r2, #0]
 8000ed6:	e007      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e004      	b.n	8000ee8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	73fb      	strb	r3, [r7, #15]
 8000ee2:	e001      	b.n	8000ee8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3710      	adds	r7, #16
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	20000008 	.word	0x20000008
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000004 	.word	0x20000004

08000f00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f04:	4b06      	ldr	r3, [pc, #24]	; (8000f20 <HAL_IncTick+0x20>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	4b06      	ldr	r3, [pc, #24]	; (8000f24 <HAL_IncTick+0x24>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <HAL_IncTick+0x24>)
 8000f12:	6013      	str	r3, [r2, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000008 	.word	0x20000008
 8000f24:	200001d8 	.word	0x200001d8

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b03      	ldr	r3, [pc, #12]	; (8000f3c <HAL_GetTick+0x14>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	200001d8 	.word	0x200001d8

08000f40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b084      	sub	sp, #16
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f48:	f7ff ffee 	bl	8000f28 <HAL_GetTick>
 8000f4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f58:	d005      	beq.n	8000f66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <HAL_Delay+0x44>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
 8000f5e:	461a      	mov	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	4413      	add	r3, r2
 8000f64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f66:	bf00      	nop
 8000f68:	f7ff ffde 	bl	8000f28 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	68fa      	ldr	r2, [r7, #12]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d8f7      	bhi.n	8000f68 <HAL_Delay+0x28>
  {
  }
}
 8000f78:	bf00      	nop
 8000f7a:	bf00      	nop
 8000f7c:	3710      	adds	r7, #16
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000008 	.word	0x20000008

08000f88 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	689b      	ldr	r3, [r3, #8]
 8000f96:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	431a      	orrs	r2, r3
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
}
 8000fa2:	bf00      	nop
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr

08000fae <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000fae:	b480      	push	{r7}
 8000fb0:	b083      	sub	sp, #12
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	431a      	orrs	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr

08000fd4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b087      	sub	sp, #28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60f8      	str	r0, [r7, #12]
 8000ff8:	60b9      	str	r1, [r7, #8]
 8000ffa:	607a      	str	r2, [r7, #4]
 8000ffc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	3360      	adds	r3, #96	; 0x60
 8001002:	461a      	mov	r2, r3
 8001004:	68bb      	ldr	r3, [r7, #8]
 8001006:	009b      	lsls	r3, r3, #2
 8001008:	4413      	add	r3, r2
 800100a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	681a      	ldr	r2, [r3, #0]
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <LL_ADC_SetOffset+0x44>)
 8001012:	4013      	ands	r3, r2
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800101a:	683a      	ldr	r2, [r7, #0]
 800101c:	430a      	orrs	r2, r1
 800101e:	4313      	orrs	r3, r2
 8001020:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	03fff000 	.word	0x03fff000

08001038 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3360      	adds	r3, #96	; 0x60
 8001046:	461a      	mov	r2, r3
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4413      	add	r3, r2
 800104e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001058:	4618      	mov	r0, r3
 800105a:	3714      	adds	r7, #20
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr

08001064 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001064:	b480      	push	{r7}
 8001066:	b087      	sub	sp, #28
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3360      	adds	r3, #96	; 0x60
 8001074:	461a      	mov	r2, r3
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	4413      	add	r3, r2
 800107c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	431a      	orrs	r2, r3
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800108e:	bf00      	nop
 8001090:	371c      	adds	r7, #28
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800109a:	b480      	push	{r7}
 800109c:	b083      	sub	sp, #12
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80010ae:	2301      	movs	r3, #1
 80010b0:	e000      	b.n	80010b4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80010b2:	2300      	movs	r3, #0
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b087      	sub	sp, #28
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	3330      	adds	r3, #48	; 0x30
 80010d0:	461a      	mov	r2, r3
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	0a1b      	lsrs	r3, r3, #8
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	f003 030c 	and.w	r3, r3, #12
 80010dc:	4413      	add	r3, r2
 80010de:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	f003 031f 	and.w	r3, r3, #31
 80010ea:	211f      	movs	r1, #31
 80010ec:	fa01 f303 	lsl.w	r3, r1, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	401a      	ands	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0e9b      	lsrs	r3, r3, #26
 80010f8:	f003 011f 	and.w	r1, r3, #31
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	f003 031f 	and.w	r3, r3, #31
 8001102:	fa01 f303 	lsl.w	r3, r1, r3
 8001106:	431a      	orrs	r2, r3
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800110c:	bf00      	nop
 800110e:	371c      	adds	r7, #28
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr

08001118 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001124:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800112c:	2301      	movs	r3, #1
 800112e:	e000      	b.n	8001132 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001130:	2300      	movs	r3, #0
}
 8001132:	4618      	mov	r0, r3
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800113e:	b480      	push	{r7}
 8001140:	b087      	sub	sp, #28
 8001142:	af00      	add	r7, sp, #0
 8001144:	60f8      	str	r0, [r7, #12]
 8001146:	60b9      	str	r1, [r7, #8]
 8001148:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	3314      	adds	r3, #20
 800114e:	461a      	mov	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	0e5b      	lsrs	r3, r3, #25
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	4413      	add	r3, r2
 800115c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	68bb      	ldr	r3, [r7, #8]
 8001164:	0d1b      	lsrs	r3, r3, #20
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	2107      	movs	r1, #7
 800116c:	fa01 f303 	lsl.w	r3, r1, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	401a      	ands	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	0d1b      	lsrs	r3, r3, #20
 8001178:	f003 031f 	and.w	r3, r3, #31
 800117c:	6879      	ldr	r1, [r7, #4]
 800117e:	fa01 f303 	lsl.w	r3, r1, r3
 8001182:	431a      	orrs	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001188:	bf00      	nop
 800118a:	371c      	adds	r7, #28
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001194:	b480      	push	{r7}
 8001196:	b085      	sub	sp, #20
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011ac:	43db      	mvns	r3, r3
 80011ae:	401a      	ands	r2, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	f003 0318 	and.w	r3, r3, #24
 80011b6:	4908      	ldr	r1, [pc, #32]	; (80011d8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80011b8:	40d9      	lsrs	r1, r3
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	400b      	ands	r3, r1
 80011be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80011c2:	431a      	orrs	r2, r3
 80011c4:	68fb      	ldr	r3, [r7, #12]
 80011c6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	0007ffff 	.word	0x0007ffff

080011dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80011ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	6093      	str	r3, [r2, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001210:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001214:	d101      	bne.n	800121a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001238:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800123c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001260:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001264:	d101      	bne.n	800126a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800126a:	2300      	movs	r3, #0
}
 800126c:	4618      	mov	r0, r3
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001288:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800128c:	f043 0201 	orr.w	r2, r3, #1
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d101      	bne.n	80012b8 <LL_ADC_IsEnabled+0x18>
 80012b4:	2301      	movs	r3, #1
 80012b6:	e000      	b.n	80012ba <LL_ADC_IsEnabled+0x1a>
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80012d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80012da:	f043 0204 	orr.w	r2, r3, #4
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80012e2:	bf00      	nop
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 0304 	and.w	r3, r3, #4
 80012fe:	2b04      	cmp	r3, #4
 8001300:	d101      	bne.n	8001306 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001302:	2301      	movs	r3, #1
 8001304:	e000      	b.n	8001308 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001306:	2300      	movs	r3, #0
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b08      	cmp	r3, #8
 8001326:	d101      	bne.n	800132c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001328:	2301      	movs	r3, #1
 800132a:	e000      	b.n	800132e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	370c      	adds	r7, #12
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001348:	2300      	movs	r3, #0
 800134a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d101      	bne.n	8001356 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e126      	b.n	80015a4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	691b      	ldr	r3, [r3, #16]
 800135a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001360:	2b00      	cmp	r3, #0
 8001362:	d109      	bne.n	8001378 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001364:	6878      	ldr	r0, [r7, #4]
 8001366:	f7ff fbc1 	bl	8000aec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff ff3f 	bl	8001200 <LL_ADC_IsDeepPowerDownEnabled>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d004      	beq.n	8001392 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff25 	bl	80011dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff ff5a 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d115      	bne.n	80013ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff ff3e 	bl	8001228 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80013ac:	4b7f      	ldr	r3, [pc, #508]	; (80015ac <HAL_ADC_Init+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	099b      	lsrs	r3, r3, #6
 80013b2:	4a7f      	ldr	r2, [pc, #508]	; (80015b0 <HAL_ADC_Init+0x274>)
 80013b4:	fba2 2303 	umull	r2, r3, r2, r3
 80013b8:	099b      	lsrs	r3, r3, #6
 80013ba:	3301      	adds	r3, #1
 80013bc:	005b      	lsls	r3, r3, #1
 80013be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013c0:	e002      	b.n	80013c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1f9      	bne.n	80013c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff ff3c 	bl	8001250 <LL_ADC_IsInternalRegulatorEnabled>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d10d      	bne.n	80013fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013e2:	f043 0210 	orr.w	r2, r3, #16
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ee:	f043 0201 	orr.w	r2, r3, #1
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff ff75 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001404:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	f040 80bf 	bne.w	8001592 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	2b00      	cmp	r3, #0
 8001418:	f040 80bb 	bne.w	8001592 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001420:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001424:	f043 0202 	orr.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff35 	bl	80012a0 <LL_ADC_IsEnabled>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10b      	bne.n	8001454 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800143c:	485d      	ldr	r0, [pc, #372]	; (80015b4 <HAL_ADC_Init+0x278>)
 800143e:	f7ff ff2f 	bl	80012a0 <LL_ADC_IsEnabled>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d105      	bne.n	8001454 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	4619      	mov	r1, r3
 800144e:	485a      	ldr	r0, [pc, #360]	; (80015b8 <HAL_ADC_Init+0x27c>)
 8001450:	f7ff fd9a 	bl	8000f88 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	7e5b      	ldrb	r3, [r3, #25]
 8001458:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800145e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001464:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800146a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001472:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001474:	4313      	orrs	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d106      	bne.n	8001490 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001486:	3b01      	subs	r3, #1
 8001488:	045b      	lsls	r3, r3, #17
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	4313      	orrs	r3, r2
 800148e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001494:	2b00      	cmp	r3, #0
 8001496:	d009      	beq.n	80014ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	68da      	ldr	r2, [r3, #12]
 80014b2:	4b42      	ldr	r3, [pc, #264]	; (80015bc <HAL_ADC_Init+0x280>)
 80014b4:	4013      	ands	r3, r2
 80014b6:	687a      	ldr	r2, [r7, #4]
 80014b8:	6812      	ldr	r2, [r2, #0]
 80014ba:	69b9      	ldr	r1, [r7, #24]
 80014bc:	430b      	orrs	r3, r1
 80014be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ff25 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 80014ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d13d      	bne.n	800154e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d13a      	bne.n	800154e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014dc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014e4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80014e6:	4313      	orrs	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80014f4:	f023 0302 	bic.w	r3, r3, #2
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	69b9      	ldr	r1, [r7, #24]
 80014fe:	430b      	orrs	r3, r1
 8001500:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001508:	2b01      	cmp	r3, #1
 800150a:	d118      	bne.n	800153e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001516:	f023 0304 	bic.w	r3, r3, #4
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001522:	4311      	orrs	r1, r2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001528:	4311      	orrs	r1, r2
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800152e:	430a      	orrs	r2, r1
 8001530:	431a      	orrs	r2, r3
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	611a      	str	r2, [r3, #16]
 800153c:	e007      	b.n	800154e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	691a      	ldr	r2, [r3, #16]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f022 0201 	bic.w	r2, r2, #1
 800154c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10c      	bne.n	8001570 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155c:	f023 010f 	bic.w	r1, r3, #15
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	1e5a      	subs	r2, r3, #1
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	430a      	orrs	r2, r1
 800156c:	631a      	str	r2, [r3, #48]	; 0x30
 800156e:	e007      	b.n	8001580 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f022 020f 	bic.w	r2, r2, #15
 800157e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001584:	f023 0303 	bic.w	r3, r3, #3
 8001588:	f043 0201 	orr.w	r2, r3, #1
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	655a      	str	r2, [r3, #84]	; 0x54
 8001590:	e007      	b.n	80015a2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	f043 0210 	orr.w	r2, r3, #16
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80015a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20000000 	.word	0x20000000
 80015b0:	053e2d63 	.word	0x053e2d63
 80015b4:	50040000 	.word	0x50040000
 80015b8:	50040300 	.word	0x50040300
 80015bc:	fff0c007 	.word	0xfff0c007

080015c0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fe8c 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d167      	bne.n	80016ac <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	d101      	bne.n	80015ea <HAL_ADC_Start_DMA+0x2a>
 80015e6:	2302      	movs	r3, #2
 80015e8:	e063      	b.n	80016b2 <HAL_ADC_Start_DMA+0xf2>
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	2201      	movs	r2, #1
 80015ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80015f2:	68f8      	ldr	r0, [r7, #12]
 80015f4:	f000 fe1c 	bl	8002230 <ADC_Enable>
 80015f8:	4603      	mov	r3, r0
 80015fa:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80015fc:	7dfb      	ldrb	r3, [r7, #23]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d14f      	bne.n	80016a2 <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001606:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800160a:	f023 0301 	bic.w	r3, r3, #1
 800160e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d006      	beq.n	8001630 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	f023 0206 	bic.w	r2, r3, #6
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	659a      	str	r2, [r3, #88]	; 0x58
 800162e:	e002      	b.n	8001636 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2200      	movs	r2, #0
 8001634:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	4a20      	ldr	r2, [pc, #128]	; (80016bc <HAL_ADC_Start_DMA+0xfc>)
 800163c:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	4a1f      	ldr	r2, [pc, #124]	; (80016c0 <HAL_ADC_Start_DMA+0x100>)
 8001644:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800164a:	4a1e      	ldr	r2, [pc, #120]	; (80016c4 <HAL_ADC_Start_DMA+0x104>)
 800164c:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	221c      	movs	r2, #28
 8001654:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2200      	movs	r2, #0
 800165a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 0210 	orr.w	r2, r2, #16
 800166c:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	68da      	ldr	r2, [r3, #12]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0201 	orr.w	r2, r2, #1
 800167c:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	3340      	adds	r3, #64	; 0x40
 8001688:	4619      	mov	r1, r3
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f001 f8e5 	bl	800285c <HAL_DMA_Start_IT>
 8001692:	4603      	mov	r3, r0
 8001694:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff fe13 	bl	80012c6 <LL_ADC_REG_StartConversion>
 80016a0:	e006      	b.n	80016b0 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80016aa:	e001      	b.n	80016b0 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80016ac:	2302      	movs	r3, #2
 80016ae:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80016b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	0800233d 	.word	0x0800233d
 80016c0:	08002415 	.word	0x08002415
 80016c4:	08002431 	.word	0x08002431

080016c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80016d0:	2300      	movs	r3, #0
 80016d2:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	f003 0302 	and.w	r3, r3, #2
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d017      	beq.n	800171e <HAL_ADC_IRQHandler+0x56>
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f003 0302 	and.w	r3, r3, #2
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d012      	beq.n	800171e <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016fc:	f003 0310 	and.w	r3, r3, #16
 8001700:	2b00      	cmp	r3, #0
 8001702:	d105      	bne.n	8001710 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001708:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fecf 	bl	80024b4 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2202      	movs	r2, #2
 800171c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	f003 0304 	and.w	r3, r3, #4
 8001724:	2b00      	cmp	r3, #0
 8001726:	d004      	beq.n	8001732 <HAL_ADC_IRQHandler+0x6a>
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	f003 0304 	and.w	r3, r3, #4
 800172e:	2b00      	cmp	r3, #0
 8001730:	d109      	bne.n	8001746 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001732:	69bb      	ldr	r3, [r7, #24]
 8001734:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001738:	2b00      	cmp	r3, #0
 800173a:	d05e      	beq.n	80017fa <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	f003 0308 	and.w	r3, r3, #8
 8001742:	2b00      	cmp	r3, #0
 8001744:	d059      	beq.n	80017fa <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	2b00      	cmp	r3, #0
 8001750:	d105      	bne.n	800175e <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4618      	mov	r0, r3
 8001764:	f7ff fc99 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d03e      	beq.n	80017ec <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d135      	bne.n	80017ec <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0308 	and.w	r3, r3, #8
 800178a:	2b08      	cmp	r3, #8
 800178c:	d12e      	bne.n	80017ec <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff fdab 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d11a      	bne.n	80017d4 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 020c 	bic.w	r2, r2, #12
 80017ac:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d112      	bne.n	80017ec <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ca:	f043 0201 	orr.w	r2, r3, #1
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	655a      	str	r2, [r3, #84]	; 0x54
 80017d2:	e00b      	b.n	80017ec <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d8:	f043 0210 	orr.w	r2, r3, #16
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017e4:	f043 0201 	orr.w	r2, r3, #1
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f7fe fec5 	bl	800057c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	220c      	movs	r2, #12
 80017f8:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80017fa:	69bb      	ldr	r3, [r7, #24]
 80017fc:	f003 0320 	and.w	r3, r3, #32
 8001800:	2b00      	cmp	r3, #0
 8001802:	d004      	beq.n	800180e <HAL_ADC_IRQHandler+0x146>
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0320 	and.w	r3, r3, #32
 800180a:	2b00      	cmp	r3, #0
 800180c:	d109      	bne.n	8001822 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001814:	2b00      	cmp	r3, #0
 8001816:	d072      	beq.n	80018fe <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800181e:	2b00      	cmp	r3, #0
 8001820:	d06d      	beq.n	80018fe <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001826:	f003 0310 	and.w	r3, r3, #16
 800182a:	2b00      	cmp	r3, #0
 800182c:	d105      	bne.n	800183a <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001832:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fc6a 	bl	8001118 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001844:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4618      	mov	r0, r3
 800184c:	f7ff fc25 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 8001850:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d047      	beq.n	80018f0 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_ADC_IRQHandler+0x1b2>
 800186a:	68bb      	ldr	r3, [r7, #8]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d03f      	beq.n	80018f0 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001876:	2b00      	cmp	r3, #0
 8001878:	d13a      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001884:	2b40      	cmp	r3, #64	; 0x40
 8001886:	d133      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800188e:	2b00      	cmp	r3, #0
 8001890:	d12e      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fd3c 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d11a      	bne.n	80018d8 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80018b0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d112      	bne.n	80018f0 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ce:	f043 0201 	orr.w	r2, r3, #1
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	655a      	str	r2, [r3, #84]	; 0x54
 80018d6:	e00b      	b.n	80018f0 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018dc:	f043 0210 	orr.w	r2, r3, #16
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e8:	f043 0201 	orr.w	r2, r3, #1
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fdb7 	bl	8002464 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2260      	movs	r2, #96	; 0x60
 80018fc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001904:	2b00      	cmp	r3, #0
 8001906:	d011      	beq.n	800192c <HAL_ADC_IRQHandler+0x264>
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800190e:	2b00      	cmp	r3, #0
 8001910:	d00c      	beq.n	800192c <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001916:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f000 f890 	bl	8001a44 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2280      	movs	r2, #128	; 0x80
 800192a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001932:	2b00      	cmp	r3, #0
 8001934:	d012      	beq.n	800195c <HAL_ADC_IRQHandler+0x294>
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193c:	2b00      	cmp	r3, #0
 800193e:	d00d      	beq.n	800195c <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001944:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f000 fd9d 	bl	800248c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800195a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001962:	2b00      	cmp	r3, #0
 8001964:	d012      	beq.n	800198c <HAL_ADC_IRQHandler+0x2c4>
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800196c:	2b00      	cmp	r3, #0
 800196e:	d00d      	beq.n	800198c <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 fd8f 	bl	80024a0 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f44f 7200 	mov.w	r2, #512	; 0x200
 800198a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	f003 0310 	and.w	r3, r3, #16
 8001992:	2b00      	cmp	r3, #0
 8001994:	d02a      	beq.n	80019ec <HAL_ADC_IRQHandler+0x324>
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0310 	and.w	r3, r3, #16
 800199c:	2b00      	cmp	r3, #0
 800199e:	d025      	beq.n	80019ec <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80019a8:	2301      	movs	r3, #1
 80019aa:	61fb      	str	r3, [r7, #28]
 80019ac:	e008      	b.n	80019c0 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80019bc:	2301      	movs	r3, #1
 80019be:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d10e      	bne.n	80019e4 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ca:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f000 f83a 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	2210      	movs	r2, #16
 80019ea:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d018      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x360>
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d013      	beq.n	8001a28 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f043 0208 	orr.w	r2, r3, #8
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a20:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 fd28 	bl	8002478 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001a28:	bf00      	nop
 8001a2a:	3720      	adds	r7, #32
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}

08001a30 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b0b6      	sub	sp, #216	; 0xd8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a76:	2300      	movs	r3, #0
 8001a78:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d101      	bne.n	8001a8e <HAL_ADC_ConfigChannel+0x22>
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	e3bb      	b.n	8002206 <HAL_ADC_ConfigChannel+0x79a>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2201      	movs	r2, #1
 8001a92:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff fc27 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 83a0 	bne.w	80021e8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d824      	bhi.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	3b02      	subs	r3, #2
 8001abe:	2b03      	cmp	r3, #3
 8001ac0:	d81b      	bhi.n	8001afa <HAL_ADC_ConfigChannel+0x8e>
 8001ac2:	a201      	add	r2, pc, #4	; (adr r2, 8001ac8 <HAL_ADC_ConfigChannel+0x5c>)
 8001ac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ac8:	08001ad9 	.word	0x08001ad9
 8001acc:	08001ae1 	.word	0x08001ae1
 8001ad0:	08001ae9 	.word	0x08001ae9
 8001ad4:	08001af1 	.word	0x08001af1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001ad8:	230c      	movs	r3, #12
 8001ada:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ade:	e010      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ae0:	2312      	movs	r3, #18
 8001ae2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ae6:	e00c      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ae8:	2318      	movs	r3, #24
 8001aea:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001aee:	e008      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001af0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001af8:	e003      	b.n	8001b02 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001afa:	2306      	movs	r3, #6
 8001afc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b00:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6818      	ldr	r0, [r3, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001b10:	f7ff fad6 	bl	80010c0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fbe8 	bl	80012ee <LL_ADC_REG_IsConversionOngoing>
 8001b1e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7ff fbf4 	bl	8001314 <LL_ADC_INJ_IsConversionOngoing>
 8001b2c:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	f040 81a4 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b3a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	f040 819f 	bne.w	8001e82 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6818      	ldr	r0, [r3, #0]
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	6819      	ldr	r1, [r3, #0]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	461a      	mov	r2, r3
 8001b52:	f7ff faf4 	bl	800113e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001b56:	683b      	ldr	r3, [r7, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	08db      	lsrs	r3, r3, #3
 8001b62:	f003 0303 	and.w	r3, r3, #3
 8001b66:	005b      	lsls	r3, r3, #1
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d00a      	beq.n	8001b8e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6818      	ldr	r0, [r3, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	6919      	ldr	r1, [r3, #16]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681a      	ldr	r2, [r3, #0]
 8001b84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001b88:	f7ff fa32 	bl	8000ff0 <LL_ADC_SetOffset>
 8001b8c:	e179      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	2100      	movs	r1, #0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7ff fa4f 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_ADC_ConfigChannel+0x14e>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fa44 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	0e9b      	lsrs	r3, r3, #26
 8001bb4:	f003 021f 	and.w	r2, r3, #31
 8001bb8:	e01e      	b.n	8001bf8 <HAL_ADC_ConfigChannel+0x18c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fa39 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bcc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001bd0:	fa93 f3a3 	rbit	r3, r3
 8001bd4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001bd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001bdc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001be0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001be8:	2320      	movs	r3, #32
 8001bea:	e004      	b.n	8001bf6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001bec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001bf0:	fab3 f383 	clz	r3, r3
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <HAL_ADC_ConfigChannel+0x1a4>
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 031f 	and.w	r3, r3, #31
 8001c0e:	e018      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1d6>
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c18:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001c1c:	fa93 f3a3 	rbit	r3, r3
 8001c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001c24:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001c28:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001c2c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001c34:	2320      	movs	r3, #32
 8001c36:	e004      	b.n	8001c42 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001c38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001c3c:	fab3 f383 	clz	r3, r3
 8001c40:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d106      	bne.n	8001c54 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7ff fa08 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2101      	movs	r1, #1
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f9ec 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c60:	4603      	mov	r3, r0
 8001c62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d10a      	bne.n	8001c80 <HAL_ADC_ConfigChannel+0x214>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	2101      	movs	r1, #1
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff f9e1 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c76:	4603      	mov	r3, r0
 8001c78:	0e9b      	lsrs	r3, r3, #26
 8001c7a:	f003 021f 	and.w	r2, r3, #31
 8001c7e:	e01e      	b.n	8001cbe <HAL_ADC_ConfigChannel+0x252>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2101      	movs	r1, #1
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f9d6 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c92:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c96:	fa93 f3a3 	rbit	r3, r3
 8001c9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001c9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ca2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001ca6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001cae:	2320      	movs	r3, #32
 8001cb0:	e004      	b.n	8001cbc <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001cb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001cb6:	fab3 f383 	clz	r3, r3
 8001cba:	b2db      	uxtb	r3, r3
 8001cbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d105      	bne.n	8001cd6 <HAL_ADC_ConfigChannel+0x26a>
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	0e9b      	lsrs	r3, r3, #26
 8001cd0:	f003 031f 	and.w	r3, r3, #31
 8001cd4:	e018      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x29c>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cde:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001ce2:	fa93 f3a3 	rbit	r3, r3
 8001ce6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001cea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cee:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001cf2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001cfa:	2320      	movs	r3, #32
 8001cfc:	e004      	b.n	8001d08 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001cfe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d106      	bne.n	8001d1a <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2101      	movs	r1, #1
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff f9a5 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2102      	movs	r1, #2
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f989 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001d26:	4603      	mov	r3, r0
 8001d28:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10a      	bne.n	8001d46 <HAL_ADC_ConfigChannel+0x2da>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2102      	movs	r1, #2
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f97e 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	0e9b      	lsrs	r3, r3, #26
 8001d40:	f003 021f 	and.w	r2, r3, #31
 8001d44:	e01e      	b.n	8001d84 <HAL_ADC_ConfigChannel+0x318>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2102      	movs	r1, #2
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff f973 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001d64:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001d74:	2320      	movs	r3, #32
 8001d76:	e004      	b.n	8001d82 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001d78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d105      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0x330>
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0e9b      	lsrs	r3, r3, #26
 8001d96:	f003 031f 	and.w	r3, r3, #31
 8001d9a:	e014      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x35a>
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001da4:	fa93 f3a3 	rbit	r3, r3
 8001da8:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001daa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001dac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001db0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001db8:	2320      	movs	r3, #32
 8001dba:	e004      	b.n	8001dc6 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001dbc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001dc0:	fab3 f383 	clz	r3, r3
 8001dc4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d106      	bne.n	8001dd8 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2102      	movs	r1, #2
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff f946 	bl	8001064 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2103      	movs	r1, #3
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f92a 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001de4:	4603      	mov	r3, r0
 8001de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d10a      	bne.n	8001e04 <HAL_ADC_ConfigChannel+0x398>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2103      	movs	r1, #3
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff f91f 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	0e9b      	lsrs	r3, r3, #26
 8001dfe:	f003 021f 	and.w	r2, r3, #31
 8001e02:	e017      	b.n	8001e34 <HAL_ADC_ConfigChannel+0x3c8>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2103      	movs	r1, #3
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff f914 	bl	8001038 <LL_ADC_GetOffsetChannel>
 8001e10:	4603      	mov	r3, r0
 8001e12:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e16:	fa93 f3a3 	rbit	r3, r3
 8001e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e1e:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001e20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001e26:	2320      	movs	r3, #32
 8001e28:	e003      	b.n	8001e32 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001e2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e2c:	fab3 f383 	clz	r3, r3
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_ConfigChannel+0x3e0>
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	0e9b      	lsrs	r3, r3, #26
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	e011      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x404>
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e52:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001e5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e5c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001e5e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e003      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001e68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2103      	movs	r1, #3
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff f8f1 	bl	8001064 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7ff fa0a 	bl	80012a0 <LL_ADC_IsEnabled>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f040 8140 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	6819      	ldr	r1, [r3, #0]
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	f7ff f977 	bl	8001194 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	4a8f      	ldr	r2, [pc, #572]	; (80020e8 <HAL_ADC_ConfigChannel+0x67c>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	f040 8131 	bne.w	8002114 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d10b      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x46e>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	0e9b      	lsrs	r3, r3, #26
 8001ec8:	3301      	adds	r3, #1
 8001eca:	f003 031f 	and.w	r3, r3, #31
 8001ece:	2b09      	cmp	r3, #9
 8001ed0:	bf94      	ite	ls
 8001ed2:	2301      	movls	r3, #1
 8001ed4:	2300      	movhi	r3, #0
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	e019      	b.n	8001f0e <HAL_ADC_ConfigChannel+0x4a2>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ee2:	fa93 f3a3 	rbit	r3, r3
 8001ee6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001eea:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001eec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	e003      	b.n	8001efe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001ef6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ef8:	fab3 f383 	clz	r3, r3
 8001efc:	b2db      	uxtb	r3, r3
 8001efe:	3301      	adds	r3, #1
 8001f00:	f003 031f 	and.w	r3, r3, #31
 8001f04:	2b09      	cmp	r3, #9
 8001f06:	bf94      	ite	ls
 8001f08:	2301      	movls	r3, #1
 8001f0a:	2300      	movhi	r3, #0
 8001f0c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d079      	beq.n	8002006 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d107      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x4c2>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	0e9b      	lsrs	r3, r3, #26
 8001f24:	3301      	adds	r3, #1
 8001f26:	069b      	lsls	r3, r3, #26
 8001f28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f2c:	e015      	b.n	8001f5a <HAL_ADC_ConfigChannel+0x4ee>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8001f40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e003      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8001f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	3301      	adds	r3, #1
 8001f54:	069b      	lsls	r3, r3, #26
 8001f56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d109      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x50e>
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	0e9b      	lsrs	r3, r3, #26
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	e017      	b.n	8001faa <HAL_ADC_ConfigChannel+0x53e>
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f82:	fa93 f3a3 	rbit	r3, r3
 8001f86:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8001f88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f8a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8001f8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d101      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8001f92:	2320      	movs	r3, #32
 8001f94:	e003      	b.n	8001f9e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8001f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f98:	fab3 f383 	clz	r3, r3
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	f003 031f 	and.w	r3, r3, #31
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001faa:	ea42 0103 	orr.w	r1, r2, r3
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d10a      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x564>
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	0e9b      	lsrs	r3, r3, #26
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f003 021f 	and.w	r2, r3, #31
 8001fc6:	4613      	mov	r3, r2
 8001fc8:	005b      	lsls	r3, r3, #1
 8001fca:	4413      	add	r3, r2
 8001fcc:	051b      	lsls	r3, r3, #20
 8001fce:	e018      	b.n	8002002 <HAL_ADC_ConfigChannel+0x596>
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8001fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8001fe8:	2320      	movs	r3, #32
 8001fea:	e003      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8001fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fee:	fab3 f383 	clz	r3, r3
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	3301      	adds	r3, #1
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	4613      	mov	r3, r2
 8001ffc:	005b      	lsls	r3, r3, #1
 8001ffe:	4413      	add	r3, r2
 8002000:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002002:	430b      	orrs	r3, r1
 8002004:	e081      	b.n	800210a <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800200e:	2b00      	cmp	r3, #0
 8002010:	d107      	bne.n	8002022 <HAL_ADC_ConfigChannel+0x5b6>
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	0e9b      	lsrs	r3, r3, #26
 8002018:	3301      	adds	r3, #1
 800201a:	069b      	lsls	r3, r3, #26
 800201c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002020:	e015      	b.n	800204e <HAL_ADC_ConfigChannel+0x5e2>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800202a:	fa93 f3a3 	rbit	r3, r3
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002032:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002036:	2b00      	cmp	r3, #0
 8002038:	d101      	bne.n	800203e <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 800203a:	2320      	movs	r3, #32
 800203c:	e003      	b.n	8002046 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	fab3 f383 	clz	r3, r3
 8002044:	b2db      	uxtb	r3, r3
 8002046:	3301      	adds	r3, #1
 8002048:	069b      	lsls	r3, r3, #26
 800204a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002056:	2b00      	cmp	r3, #0
 8002058:	d109      	bne.n	800206e <HAL_ADC_ConfigChannel+0x602>
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0e9b      	lsrs	r3, r3, #26
 8002060:	3301      	adds	r3, #1
 8002062:	f003 031f 	and.w	r3, r3, #31
 8002066:	2101      	movs	r1, #1
 8002068:	fa01 f303 	lsl.w	r3, r1, r3
 800206c:	e017      	b.n	800209e <HAL_ADC_ConfigChannel+0x632>
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	fa93 f3a3 	rbit	r3, r3
 800207a:	61bb      	str	r3, [r7, #24]
  return result;
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002080:	6a3b      	ldr	r3, [r7, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002086:	2320      	movs	r3, #32
 8002088:	e003      	b.n	8002092 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800208a:	6a3b      	ldr	r3, [r7, #32]
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	b2db      	uxtb	r3, r3
 8002092:	3301      	adds	r3, #1
 8002094:	f003 031f 	and.w	r3, r3, #31
 8002098:	2101      	movs	r1, #1
 800209a:	fa01 f303 	lsl.w	r3, r1, r3
 800209e:	ea42 0103 	orr.w	r1, r2, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10d      	bne.n	80020ca <HAL_ADC_ConfigChannel+0x65e>
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	0e9b      	lsrs	r3, r3, #26
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	3b1e      	subs	r3, #30
 80020c2:	051b      	lsls	r3, r3, #20
 80020c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80020c8:	e01e      	b.n	8002108 <HAL_ADC_ConfigChannel+0x69c>
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	fa93 f3a3 	rbit	r3, r3
 80020d6:	60fb      	str	r3, [r7, #12]
  return result;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d104      	bne.n	80020ec <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80020e2:	2320      	movs	r3, #32
 80020e4:	e006      	b.n	80020f4 <HAL_ADC_ConfigChannel+0x688>
 80020e6:	bf00      	nop
 80020e8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3301      	adds	r3, #1
 80020f6:	f003 021f 	and.w	r2, r3, #31
 80020fa:	4613      	mov	r3, r2
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	4413      	add	r3, r2
 8002100:	3b1e      	subs	r3, #30
 8002102:	051b      	lsls	r3, r3, #20
 8002104:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002108:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800210a:	683a      	ldr	r2, [r7, #0]
 800210c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800210e:	4619      	mov	r1, r3
 8002110:	f7ff f815 	bl	800113e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	681a      	ldr	r2, [r3, #0]
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <HAL_ADC_ConfigChannel+0x7a4>)
 800211a:	4013      	ands	r3, r2
 800211c:	2b00      	cmp	r3, #0
 800211e:	d06c      	beq.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002120:	483c      	ldr	r0, [pc, #240]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 8002122:	f7fe ff57 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8002126:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a3a      	ldr	r2, [pc, #232]	; (8002218 <HAL_ADC_ConfigChannel+0x7ac>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d127      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002134:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002138:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800213c:	2b00      	cmp	r3, #0
 800213e:	d121      	bne.n	8002184 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a35      	ldr	r2, [pc, #212]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d157      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800214a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800214e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002152:	4619      	mov	r1, r3
 8002154:	482f      	ldr	r0, [pc, #188]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 8002156:	f7fe ff2a 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800215a:	4b31      	ldr	r3, [pc, #196]	; (8002220 <HAL_ADC_ConfigChannel+0x7b4>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	099b      	lsrs	r3, r3, #6
 8002160:	4a30      	ldr	r2, [pc, #192]	; (8002224 <HAL_ADC_ConfigChannel+0x7b8>)
 8002162:	fba2 2303 	umull	r2, r3, r2, r3
 8002166:	099b      	lsrs	r3, r3, #6
 8002168:	1c5a      	adds	r2, r3, #1
 800216a:	4613      	mov	r3, r2
 800216c:	005b      	lsls	r3, r3, #1
 800216e:	4413      	add	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002174:	e002      	b.n	800217c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	3b01      	subs	r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1f9      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002182:	e03a      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a27      	ldr	r2, [pc, #156]	; (8002228 <HAL_ADC_ConfigChannel+0x7bc>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d113      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800218e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002192:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d10d      	bne.n	80021b6 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a1f      	ldr	r2, [pc, #124]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d12a      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021a8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021ac:	4619      	mov	r1, r3
 80021ae:	4819      	ldr	r0, [pc, #100]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 80021b0:	f7fe fefd 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80021b4:	e021      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a1c      	ldr	r2, [pc, #112]	; (800222c <HAL_ADC_ConfigChannel+0x7c0>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d11c      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80021c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d116      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a12      	ldr	r2, [pc, #72]	; (800221c <HAL_ADC_ConfigChannel+0x7b0>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d111      	bne.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80021d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021de:	4619      	mov	r1, r3
 80021e0:	480c      	ldr	r0, [pc, #48]	; (8002214 <HAL_ADC_ConfigChannel+0x7a8>)
 80021e2:	f7fe fee4 	bl	8000fae <LL_ADC_SetCommonPathInternalCh>
 80021e6:	e008      	b.n	80021fa <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0220 	orr.w	r2, r3, #32
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002202:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002206:	4618      	mov	r0, r3
 8002208:	37d8      	adds	r7, #216	; 0xd8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	80080000 	.word	0x80080000
 8002214:	50040300 	.word	0x50040300
 8002218:	c7520000 	.word	0xc7520000
 800221c:	50040000 	.word	0x50040000
 8002220:	20000000 	.word	0x20000000
 8002224:	053e2d63 	.word	0x053e2d63
 8002228:	cb840000 	.word	0xcb840000
 800222c:	80000001 	.word	0x80000001

08002230 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002238:	2300      	movs	r3, #0
 800223a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff f82d 	bl	80012a0 <LL_ADC_IsEnabled>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d169      	bne.n	8002320 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	4b36      	ldr	r3, [pc, #216]	; (800232c <ADC_Enable+0xfc>)
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d00d      	beq.n	8002276 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f043 0210 	orr.w	r2, r3, #16
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800226a:	f043 0201 	orr.w	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e055      	b.n	8002322 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fffc 	bl	8001278 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002280:	482b      	ldr	r0, [pc, #172]	; (8002330 <ADC_Enable+0x100>)
 8002282:	f7fe fea7 	bl	8000fd4 <LL_ADC_GetCommonPathInternalCh>
 8002286:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002290:	4b28      	ldr	r3, [pc, #160]	; (8002334 <ADC_Enable+0x104>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	099b      	lsrs	r3, r3, #6
 8002296:	4a28      	ldr	r2, [pc, #160]	; (8002338 <ADC_Enable+0x108>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	1c5a      	adds	r2, r3, #1
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022aa:	e002      	b.n	80022b2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1f9      	bne.n	80022ac <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80022b8:	f7fe fe36 	bl	8000f28 <HAL_GetTick>
 80022bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022be:	e028      	b.n	8002312 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe ffeb 	bl	80012a0 <LL_ADC_IsEnabled>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d104      	bne.n	80022da <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe ffcf 	bl	8001278 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80022da:	f7fe fe25 	bl	8000f28 <HAL_GetTick>
 80022de:	4602      	mov	r2, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d914      	bls.n	8002312 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d00d      	beq.n	8002312 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fa:	f043 0210 	orr.w	r2, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002306:	f043 0201 	orr.w	r2, r3, #1
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e007      	b.n	8002322 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b01      	cmp	r3, #1
 800231e:	d1cf      	bne.n	80022c0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	3710      	adds	r7, #16
 8002326:	46bd      	mov	sp, r7
 8002328:	bd80      	pop	{r7, pc}
 800232a:	bf00      	nop
 800232c:	8000003f 	.word	0x8000003f
 8002330:	50040300 	.word	0x50040300
 8002334:	20000000 	.word	0x20000000
 8002338:	053e2d63 	.word	0x053e2d63

0800233c <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002348:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d14b      	bne.n	80023ee <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0308 	and.w	r3, r3, #8
 800236c:	2b00      	cmp	r3, #0
 800236e:	d021      	beq.n	80023b4 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7fe fe90 	bl	800109a <LL_ADC_REG_IsTriggerSourceSWStart>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d032      	beq.n	80023e6 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d12b      	bne.n	80023e6 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002392:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800239e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d11f      	bne.n	80023e6 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023aa:	f043 0201 	orr.w	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	655a      	str	r2, [r3, #84]	; 0x54
 80023b2:	e018      	b.n	80023e6 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d111      	bne.n	80023e6 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d105      	bne.n	80023e6 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023de:	f043 0201 	orr.w	r2, r3, #1
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f7fe f8c8 	bl	800057c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80023ec:	e00e      	b.n	800240c <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f2:	f003 0310 	and.w	r3, r3, #16
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff fb2c 	bl	8001a58 <HAL_ADC_ErrorCallback>
}
 8002400:	e004      	b.n	800240c <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	4798      	blx	r3
}
 800240c:	bf00      	nop
 800240e:	3710      	adds	r7, #16
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b084      	sub	sp, #16
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	f7ff fb04 	bl	8001a30 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002428:	bf00      	nop
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b084      	sub	sp, #16
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243c:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800244e:	f043 0204 	orr.w	r2, r3, #4
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002456:	68f8      	ldr	r0, [r7, #12]
 8002458:	f7ff fafe 	bl	8001a58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr

08002478 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800248c:	b480      	push	{r7}
 800248e:	b083      	sub	sp, #12
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002494:	bf00      	nop
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80024a8:	bf00      	nop
 80024aa:	370c      	adds	r7, #12
 80024ac:	46bd      	mov	sp, r7
 80024ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b2:	4770      	bx	lr

080024b4 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b085      	sub	sp, #20
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f003 0307 	and.w	r3, r3, #7
 80024d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80024d8:	4b0c      	ldr	r3, [pc, #48]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024e4:	4013      	ands	r3, r2
 80024e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024fa:	4a04      	ldr	r2, [pc, #16]	; (800250c <__NVIC_SetPriorityGrouping+0x44>)
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	60d3      	str	r3, [r2, #12]
}
 8002500:	bf00      	nop
 8002502:	3714      	adds	r7, #20
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr
 800250c:	e000ed00 	.word	0xe000ed00

08002510 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002514:	4b04      	ldr	r3, [pc, #16]	; (8002528 <__NVIC_GetPriorityGrouping+0x18>)
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	0a1b      	lsrs	r3, r3, #8
 800251a:	f003 0307 	and.w	r3, r3, #7
}
 800251e:	4618      	mov	r0, r3
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	e000ed00 	.word	0xe000ed00

0800252c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002536:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800253a:	2b00      	cmp	r3, #0
 800253c:	db0b      	blt.n	8002556 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	f003 021f 	and.w	r2, r3, #31
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <__NVIC_EnableIRQ+0x38>)
 8002546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800254a:	095b      	lsrs	r3, r3, #5
 800254c:	2001      	movs	r0, #1
 800254e:	fa00 f202 	lsl.w	r2, r0, r2
 8002552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002556:	bf00      	nop
 8002558:	370c      	adds	r7, #12
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000e100 	.word	0xe000e100

08002568 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	4603      	mov	r3, r0
 8002570:	6039      	str	r1, [r7, #0]
 8002572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002578:	2b00      	cmp	r3, #0
 800257a:	db0a      	blt.n	8002592 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	b2da      	uxtb	r2, r3
 8002580:	490c      	ldr	r1, [pc, #48]	; (80025b4 <__NVIC_SetPriority+0x4c>)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	0112      	lsls	r2, r2, #4
 8002588:	b2d2      	uxtb	r2, r2
 800258a:	440b      	add	r3, r1
 800258c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002590:	e00a      	b.n	80025a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	b2da      	uxtb	r2, r3
 8002596:	4908      	ldr	r1, [pc, #32]	; (80025b8 <__NVIC_SetPriority+0x50>)
 8002598:	79fb      	ldrb	r3, [r7, #7]
 800259a:	f003 030f 	and.w	r3, r3, #15
 800259e:	3b04      	subs	r3, #4
 80025a0:	0112      	lsls	r2, r2, #4
 80025a2:	b2d2      	uxtb	r2, r2
 80025a4:	440b      	add	r3, r1
 80025a6:	761a      	strb	r2, [r3, #24]
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000e100 	.word	0xe000e100
 80025b8:	e000ed00 	.word	0xe000ed00

080025bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025bc:	b480      	push	{r7}
 80025be:	b089      	sub	sp, #36	; 0x24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	f003 0307 	and.w	r3, r3, #7
 80025ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f1c3 0307 	rsb	r3, r3, #7
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	bf28      	it	cs
 80025da:	2304      	movcs	r3, #4
 80025dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2b06      	cmp	r3, #6
 80025e4:	d902      	bls.n	80025ec <NVIC_EncodePriority+0x30>
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	3b03      	subs	r3, #3
 80025ea:	e000      	b.n	80025ee <NVIC_EncodePriority+0x32>
 80025ec:	2300      	movs	r3, #0
 80025ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025f0:	f04f 32ff 	mov.w	r2, #4294967295
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	fa02 f303 	lsl.w	r3, r2, r3
 80025fa:	43da      	mvns	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	401a      	ands	r2, r3
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002604:	f04f 31ff 	mov.w	r1, #4294967295
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	fa01 f303 	lsl.w	r3, r1, r3
 800260e:	43d9      	mvns	r1, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002614:	4313      	orrs	r3, r2
         );
}
 8002616:	4618      	mov	r0, r3
 8002618:	3724      	adds	r7, #36	; 0x24
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	3b01      	subs	r3, #1
 8002630:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002634:	d301      	bcc.n	800263a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002636:	2301      	movs	r3, #1
 8002638:	e00f      	b.n	800265a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800263a:	4a0a      	ldr	r2, [pc, #40]	; (8002664 <SysTick_Config+0x40>)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	3b01      	subs	r3, #1
 8002640:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002642:	210f      	movs	r1, #15
 8002644:	f04f 30ff 	mov.w	r0, #4294967295
 8002648:	f7ff ff8e 	bl	8002568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800264c:	4b05      	ldr	r3, [pc, #20]	; (8002664 <SysTick_Config+0x40>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002652:	4b04      	ldr	r3, [pc, #16]	; (8002664 <SysTick_Config+0x40>)
 8002654:	2207      	movs	r2, #7
 8002656:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002658:	2300      	movs	r3, #0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
 8002662:	bf00      	nop
 8002664:	e000e010 	.word	0xe000e010

08002668 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff29 	bl	80024c8 <__NVIC_SetPriorityGrouping>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b086      	sub	sp, #24
 8002682:	af00      	add	r7, sp, #0
 8002684:	4603      	mov	r3, r0
 8002686:	60b9      	str	r1, [r7, #8]
 8002688:	607a      	str	r2, [r7, #4]
 800268a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800268c:	2300      	movs	r3, #0
 800268e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002690:	f7ff ff3e 	bl	8002510 <__NVIC_GetPriorityGrouping>
 8002694:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002696:	687a      	ldr	r2, [r7, #4]
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	6978      	ldr	r0, [r7, #20]
 800269c:	f7ff ff8e 	bl	80025bc <NVIC_EncodePriority>
 80026a0:	4602      	mov	r2, r0
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	4611      	mov	r1, r2
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7ff ff5d 	bl	8002568 <__NVIC_SetPriority>
}
 80026ae:	bf00      	nop
 80026b0:	3718      	adds	r7, #24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b082      	sub	sp, #8
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	4603      	mov	r3, r0
 80026be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7ff ff31 	bl	800252c <__NVIC_EnableIRQ>
}
 80026ca:	bf00      	nop
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}

080026d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80026d2:	b580      	push	{r7, lr}
 80026d4:	b082      	sub	sp, #8
 80026d6:	af00      	add	r7, sp, #0
 80026d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f7ff ffa2 	bl	8002624 <SysTick_Config>
 80026e0:	4603      	mov	r3, r0
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}
	...

080026ec <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b085      	sub	sp, #20
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e098      	b.n	8002830 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	4b4d      	ldr	r3, [pc, #308]	; (800283c <HAL_DMA_Init+0x150>)
 8002706:	429a      	cmp	r2, r3
 8002708:	d80f      	bhi.n	800272a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	461a      	mov	r2, r3
 8002710:	4b4b      	ldr	r3, [pc, #300]	; (8002840 <HAL_DMA_Init+0x154>)
 8002712:	4413      	add	r3, r2
 8002714:	4a4b      	ldr	r2, [pc, #300]	; (8002844 <HAL_DMA_Init+0x158>)
 8002716:	fba2 2303 	umull	r2, r3, r2, r3
 800271a:	091b      	lsrs	r3, r3, #4
 800271c:	009a      	lsls	r2, r3, #2
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a48      	ldr	r2, [pc, #288]	; (8002848 <HAL_DMA_Init+0x15c>)
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
 8002728:	e00e      	b.n	8002748 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	461a      	mov	r2, r3
 8002730:	4b46      	ldr	r3, [pc, #280]	; (800284c <HAL_DMA_Init+0x160>)
 8002732:	4413      	add	r3, r2
 8002734:	4a43      	ldr	r2, [pc, #268]	; (8002844 <HAL_DMA_Init+0x158>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	091b      	lsrs	r3, r3, #4
 800273c:	009a      	lsls	r2, r3, #2
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a42      	ldr	r2, [pc, #264]	; (8002850 <HAL_DMA_Init+0x164>)
 8002746:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2202      	movs	r2, #2
 800274c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800275e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002762:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800276c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	691b      	ldr	r3, [r3, #16]
 8002772:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002778:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002784:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	4313      	orrs	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80027a2:	d039      	beq.n	8002818 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a8:	4a27      	ldr	r2, [pc, #156]	; (8002848 <HAL_DMA_Init+0x15c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d11a      	bne.n	80027e4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027ae:	4b29      	ldr	r3, [pc, #164]	; (8002854 <HAL_DMA_Init+0x168>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b6:	f003 031c 	and.w	r3, r3, #28
 80027ba:	210f      	movs	r1, #15
 80027bc:	fa01 f303 	lsl.w	r3, r1, r3
 80027c0:	43db      	mvns	r3, r3
 80027c2:	4924      	ldr	r1, [pc, #144]	; (8002854 <HAL_DMA_Init+0x168>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027c8:	4b22      	ldr	r3, [pc, #136]	; (8002854 <HAL_DMA_Init+0x168>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6859      	ldr	r1, [r3, #4]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f003 031c 	and.w	r3, r3, #28
 80027d8:	fa01 f303 	lsl.w	r3, r1, r3
 80027dc:	491d      	ldr	r1, [pc, #116]	; (8002854 <HAL_DMA_Init+0x168>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	600b      	str	r3, [r1, #0]
 80027e2:	e019      	b.n	8002818 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80027e4:	4b1c      	ldr	r3, [pc, #112]	; (8002858 <HAL_DMA_Init+0x16c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ec:	f003 031c 	and.w	r3, r3, #28
 80027f0:	210f      	movs	r1, #15
 80027f2:	fa01 f303 	lsl.w	r3, r1, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	4917      	ldr	r1, [pc, #92]	; (8002858 <HAL_DMA_Init+0x16c>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80027fe:	4b16      	ldr	r3, [pc, #88]	; (8002858 <HAL_DMA_Init+0x16c>)
 8002800:	681a      	ldr	r2, [r3, #0]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6859      	ldr	r1, [r3, #4]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f003 031c 	and.w	r3, r3, #28
 800280e:	fa01 f303 	lsl.w	r3, r1, r3
 8002812:	4911      	ldr	r1, [pc, #68]	; (8002858 <HAL_DMA_Init+0x16c>)
 8002814:	4313      	orrs	r3, r2
 8002816:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2201      	movs	r2, #1
 8002822:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2200      	movs	r2, #0
 800282a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800282e:	2300      	movs	r3, #0
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	40020407 	.word	0x40020407
 8002840:	bffdfff8 	.word	0xbffdfff8
 8002844:	cccccccd 	.word	0xcccccccd
 8002848:	40020000 	.word	0x40020000
 800284c:	bffdfbf8 	.word	0xbffdfbf8
 8002850:	40020400 	.word	0x40020400
 8002854:	400200a8 	.word	0x400200a8
 8002858:	400204a8 	.word	0x400204a8

0800285c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
 8002868:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_DMA_Start_IT+0x20>
 8002878:	2302      	movs	r3, #2
 800287a:	e04b      	b.n	8002914 <HAL_DMA_Start_IT+0xb8>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800288a:	b2db      	uxtb	r3, r3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d13a      	bne.n	8002906 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f022 0201 	bic.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	68b9      	ldr	r1, [r7, #8]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 f8e0 	bl	8002a7a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d008      	beq.n	80028d4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f042 020e 	orr.w	r2, r2, #14
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	e00f      	b.n	80028f4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 0204 	bic.w	r2, r2, #4
 80028e2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f042 020a 	orr.w	r2, r2, #10
 80028f2:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f042 0201 	orr.w	r2, r2, #1
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	e005      	b.n	8002912 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	2200      	movs	r2, #0
 800290a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800290e:	2302      	movs	r3, #2
 8002910:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002912:	7dfb      	ldrb	r3, [r7, #23]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3718      	adds	r7, #24
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002938:	f003 031c 	and.w	r3, r3, #28
 800293c:	2204      	movs	r2, #4
 800293e:	409a      	lsls	r2, r3
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	4013      	ands	r3, r2
 8002944:	2b00      	cmp	r3, #0
 8002946:	d026      	beq.n	8002996 <HAL_DMA_IRQHandler+0x7a>
 8002948:	68bb      	ldr	r3, [r7, #8]
 800294a:	f003 0304 	and.w	r3, r3, #4
 800294e:	2b00      	cmp	r3, #0
 8002950:	d021      	beq.n	8002996 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d107      	bne.n	8002970 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f022 0204 	bic.w	r2, r2, #4
 800296e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002974:	f003 021c 	and.w	r2, r3, #28
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800297c:	2104      	movs	r1, #4
 800297e:	fa01 f202 	lsl.w	r2, r1, r2
 8002982:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	2b00      	cmp	r3, #0
 800298a:	d071      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002994:	e06c      	b.n	8002a70 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	f003 031c 	and.w	r3, r3, #28
 800299e:	2202      	movs	r2, #2
 80029a0:	409a      	lsls	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4013      	ands	r3, r2
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02e      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xec>
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	f003 0302 	and.w	r3, r3, #2
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d029      	beq.n	8002a08 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0320 	and.w	r3, r3, #32
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10b      	bne.n	80029da <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 020a 	bic.w	r2, r2, #10
 80029d0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f003 021c 	and.w	r2, r3, #28
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	2102      	movs	r1, #2
 80029e8:	fa01 f202 	lsl.w	r2, r1, r2
 80029ec:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d038      	beq.n	8002a70 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a02:	6878      	ldr	r0, [r7, #4]
 8002a04:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a06:	e033      	b.n	8002a70 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f003 031c 	and.w	r3, r3, #28
 8002a10:	2208      	movs	r2, #8
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d02a      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x156>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d025      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 020e 	bic.w	r2, r2, #14
 8002a34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	f003 021c 	and.w	r2, r3, #28
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	2101      	movs	r1, #1
 8002a44:	fa01 f202 	lsl.w	r2, r1, r2
 8002a48:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d004      	beq.n	8002a72 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002a70:	bf00      	nop
 8002a72:	bf00      	nop
}
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b085      	sub	sp, #20
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
 8002a86:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a8c:	f003 021c 	and.w	r2, r3, #28
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	2101      	movs	r1, #1
 8002a96:	fa01 f202 	lsl.w	r2, r1, r2
 8002a9a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	683a      	ldr	r2, [r7, #0]
 8002aa2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	2b10      	cmp	r3, #16
 8002aaa:	d108      	bne.n	8002abe <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002abc:	e007      	b.n	8002ace <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	68ba      	ldr	r2, [r7, #8]
 8002ac4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	60da      	str	r2, [r3, #12]
}
 8002ace:	bf00      	nop
 8002ad0:	3714      	adds	r7, #20
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
	...

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e148      	b.n	8002d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 813a 	beq.w	8002d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8094 	beq.w	8002d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b52      	ldr	r3, [pc, #328]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1d4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a43      	ldr	r2, [pc, #268]	; (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1d0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a42      	ldr	r2, [pc, #264]	; (8002da8 <HAL_GPIO_Init+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e004      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002ca8:	2307      	movs	r3, #7
 8002caa:	e002      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc2:	4937      	ldr	r1, [pc, #220]	; (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f aeaf 	bne.w	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	48000400 	.word	0x48000400
 8002da8:	48000800 	.word	0x48000800
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002de0:	b480      	push	{r7}
 8002de2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002de4:	4b05      	ldr	r3, [pc, #20]	; (8002dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a04      	ldr	r2, [pc, #16]	; (8002dfc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dee:	6013      	str	r3, [r2, #0]
}
 8002df0:	bf00      	nop
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40007000 	.word	0x40007000

08002e00 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_PWREx_GetVoltageRange+0x18>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	40007000 	.word	0x40007000

08002e1c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e2a:	d130      	bne.n	8002e8e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002e2c:	4b23      	ldr	r3, [pc, #140]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e38:	d038      	beq.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e3a:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e42:	4a1e      	ldr	r2, [pc, #120]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e44:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e48:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e4a:	4b1d      	ldr	r3, [pc, #116]	; (8002ec0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2232      	movs	r2, #50	; 0x32
 8002e50:	fb02 f303 	mul.w	r3, r2, r3
 8002e54:	4a1b      	ldr	r2, [pc, #108]	; (8002ec4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002e56:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5a:	0c9b      	lsrs	r3, r3, #18
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e60:	e002      	b.n	8002e68 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e68:	4b14      	ldr	r3, [pc, #80]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e74:	d102      	bne.n	8002e7c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d1f2      	bne.n	8002e62 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e7c:	4b0f      	ldr	r3, [pc, #60]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e7e:	695b      	ldr	r3, [r3, #20]
 8002e80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e84:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e88:	d110      	bne.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e00f      	b.n	8002eae <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e8e:	4b0b      	ldr	r3, [pc, #44]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9a:	d007      	beq.n	8002eac <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ea4:	4a05      	ldr	r2, [pc, #20]	; (8002ebc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002eaa:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002eac:	2300      	movs	r3, #0
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3714      	adds	r7, #20
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40007000 	.word	0x40007000
 8002ec0:	20000000 	.word	0x20000000
 8002ec4:	431bde83 	.word	0x431bde83

08002ec8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b088      	sub	sp, #32
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d102      	bne.n	8002edc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f000 bc02 	b.w	80036e0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002edc:	4b96      	ldr	r3, [pc, #600]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	f003 030c 	and.w	r3, r3, #12
 8002ee4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002ee6:	4b94      	ldr	r3, [pc, #592]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f003 0303 	and.w	r3, r3, #3
 8002eee:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0310 	and.w	r3, r3, #16
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	f000 80e4 	beq.w	80030c6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002efe:	69bb      	ldr	r3, [r7, #24]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d007      	beq.n	8002f14 <HAL_RCC_OscConfig+0x4c>
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	2b0c      	cmp	r3, #12
 8002f08:	f040 808b 	bne.w	8003022 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	f040 8087 	bne.w	8003022 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002f14:	4b88      	ldr	r3, [pc, #544]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_RCC_OscConfig+0x64>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d101      	bne.n	8002f2c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e3d9      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	4b81      	ldr	r3, [pc, #516]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d004      	beq.n	8002f46 <HAL_RCC_OscConfig+0x7e>
 8002f3c:	4b7e      	ldr	r3, [pc, #504]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f44:	e005      	b.n	8002f52 <HAL_RCC_OscConfig+0x8a>
 8002f46:	4b7c      	ldr	r3, [pc, #496]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f4c:	091b      	lsrs	r3, r3, #4
 8002f4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d223      	bcs.n	8002f9e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fd8c 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e3ba      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f6a:	4b73      	ldr	r3, [pc, #460]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a72      	ldr	r2, [pc, #456]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f70:	f043 0308 	orr.w	r3, r3, #8
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	4b70      	ldr	r3, [pc, #448]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	496d      	ldr	r1, [pc, #436]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002f88:	4b6b      	ldr	r3, [pc, #428]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	021b      	lsls	r3, r3, #8
 8002f96:	4968      	ldr	r1, [pc, #416]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	604b      	str	r3, [r1, #4]
 8002f9c:	e025      	b.n	8002fea <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002f9e:	4b66      	ldr	r3, [pc, #408]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a65      	ldr	r2, [pc, #404]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fa4:	f043 0308 	orr.w	r3, r3, #8
 8002fa8:	6013      	str	r3, [r2, #0]
 8002faa:	4b63      	ldr	r3, [pc, #396]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	4960      	ldr	r1, [pc, #384]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002fbc:	4b5e      	ldr	r3, [pc, #376]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
 8002fc8:	021b      	lsls	r3, r3, #8
 8002fca:	495b      	ldr	r1, [pc, #364]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d109      	bne.n	8002fea <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f000 fd4c 	bl	8003a78 <RCC_SetFlashLatencyFromMSIRange>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e37a      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fea:	f000 fc81 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	4b51      	ldr	r3, [pc, #324]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	091b      	lsrs	r3, r3, #4
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	4950      	ldr	r1, [pc, #320]	; (800313c <HAL_RCC_OscConfig+0x274>)
 8002ffc:	5ccb      	ldrb	r3, [r1, r3]
 8002ffe:	f003 031f 	and.w	r3, r3, #31
 8003002:	fa22 f303 	lsr.w	r3, r2, r3
 8003006:	4a4e      	ldr	r2, [pc, #312]	; (8003140 <HAL_RCC_OscConfig+0x278>)
 8003008:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800300a:	4b4e      	ldr	r3, [pc, #312]	; (8003144 <HAL_RCC_OscConfig+0x27c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7fd ff3a 	bl	8000e88 <HAL_InitTick>
 8003014:	4603      	mov	r3, r0
 8003016:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d052      	beq.n	80030c4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800301e:	7bfb      	ldrb	r3, [r7, #15]
 8003020:	e35e      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d032      	beq.n	8003090 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800302a:	4b43      	ldr	r3, [pc, #268]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a42      	ldr	r2, [pc, #264]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003036:	f7fd ff77 	bl	8000f28 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800303e:	f7fd ff73 	bl	8000f28 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e347      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003050:	4b39      	ldr	r3, [pc, #228]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d0f0      	beq.n	800303e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800305c:	4b36      	ldr	r3, [pc, #216]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a35      	ldr	r2, [pc, #212]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003062:	f043 0308 	orr.w	r3, r3, #8
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	4b33      	ldr	r3, [pc, #204]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	4930      	ldr	r1, [pc, #192]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003076:	4313      	orrs	r3, r2
 8003078:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800307a:	4b2f      	ldr	r3, [pc, #188]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	021b      	lsls	r3, r3, #8
 8003088:	492b      	ldr	r1, [pc, #172]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800308a:	4313      	orrs	r3, r2
 800308c:	604b      	str	r3, [r1, #4]
 800308e:	e01a      	b.n	80030c6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003090:	4b29      	ldr	r3, [pc, #164]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a28      	ldr	r2, [pc, #160]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800309c:	f7fd ff44 	bl	8000f28 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030a2:	e008      	b.n	80030b6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030a4:	f7fd ff40 	bl	8000f28 <HAL_GetTick>
 80030a8:	4602      	mov	r2, r0
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	1ad3      	subs	r3, r2, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d901      	bls.n	80030b6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80030b2:	2303      	movs	r3, #3
 80030b4:	e314      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80030b6:	4b20      	ldr	r3, [pc, #128]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d1f0      	bne.n	80030a4 <HAL_RCC_OscConfig+0x1dc>
 80030c2:	e000      	b.n	80030c6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80030c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d073      	beq.n	80031ba <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80030d2:	69bb      	ldr	r3, [r7, #24]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d005      	beq.n	80030e4 <HAL_RCC_OscConfig+0x21c>
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	2b0c      	cmp	r3, #12
 80030dc:	d10e      	bne.n	80030fc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b03      	cmp	r3, #3
 80030e2:	d10b      	bne.n	80030fc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d063      	beq.n	80031b8 <HAL_RCC_OscConfig+0x2f0>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d15f      	bne.n	80031b8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e2f1      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003104:	d106      	bne.n	8003114 <HAL_RCC_OscConfig+0x24c>
 8003106:	4b0c      	ldr	r3, [pc, #48]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a0b      	ldr	r2, [pc, #44]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800310c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	e025      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800311c:	d114      	bne.n	8003148 <HAL_RCC_OscConfig+0x280>
 800311e:	4b06      	ldr	r3, [pc, #24]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a05      	ldr	r2, [pc, #20]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003124:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003128:	6013      	str	r3, [r2, #0]
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a02      	ldr	r2, [pc, #8]	; (8003138 <HAL_RCC_OscConfig+0x270>)
 8003130:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003134:	6013      	str	r3, [r2, #0]
 8003136:	e013      	b.n	8003160 <HAL_RCC_OscConfig+0x298>
 8003138:	40021000 	.word	0x40021000
 800313c:	08005518 	.word	0x08005518
 8003140:	20000000 	.word	0x20000000
 8003144:	20000004 	.word	0x20000004
 8003148:	4ba0      	ldr	r3, [pc, #640]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a9f      	ldr	r2, [pc, #636]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800314e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	4b9d      	ldr	r3, [pc, #628]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a9c      	ldr	r2, [pc, #624]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800315a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800315e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003168:	f7fd fede 	bl	8000f28 <HAL_GetTick>
 800316c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800316e:	e008      	b.n	8003182 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003170:	f7fd feda 	bl	8000f28 <HAL_GetTick>
 8003174:	4602      	mov	r2, r0
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	1ad3      	subs	r3, r2, r3
 800317a:	2b64      	cmp	r3, #100	; 0x64
 800317c:	d901      	bls.n	8003182 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800317e:	2303      	movs	r3, #3
 8003180:	e2ae      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003182:	4b92      	ldr	r3, [pc, #584]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0f0      	beq.n	8003170 <HAL_RCC_OscConfig+0x2a8>
 800318e:	e014      	b.n	80031ba <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003190:	f7fd feca 	bl	8000f28 <HAL_GetTick>
 8003194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003196:	e008      	b.n	80031aa <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003198:	f7fd fec6 	bl	8000f28 <HAL_GetTick>
 800319c:	4602      	mov	r2, r0
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	1ad3      	subs	r3, r2, r3
 80031a2:	2b64      	cmp	r3, #100	; 0x64
 80031a4:	d901      	bls.n	80031aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e29a      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80031aa:	4b88      	ldr	r3, [pc, #544]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1f0      	bne.n	8003198 <HAL_RCC_OscConfig+0x2d0>
 80031b6:	e000      	b.n	80031ba <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f003 0302 	and.w	r3, r3, #2
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d060      	beq.n	8003288 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	2b04      	cmp	r3, #4
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_OscConfig+0x310>
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	2b0c      	cmp	r3, #12
 80031d0:	d119      	bne.n	8003206 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b02      	cmp	r3, #2
 80031d6:	d116      	bne.n	8003206 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80031d8:	4b7c      	ldr	r3, [pc, #496]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_OscConfig+0x328>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d101      	bne.n	80031f0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e277      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f0:	4b76      	ldr	r3, [pc, #472]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	061b      	lsls	r3, r3, #24
 80031fe:	4973      	ldr	r1, [pc, #460]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003200:	4313      	orrs	r3, r2
 8003202:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003204:	e040      	b.n	8003288 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d023      	beq.n	8003256 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800320e:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a6e      	ldr	r2, [pc, #440]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003214:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321a:	f7fd fe85 	bl	8000f28 <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003220:	e008      	b.n	8003234 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003222:	f7fd fe81 	bl	8000f28 <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	2b02      	cmp	r3, #2
 800322e:	d901      	bls.n	8003234 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003230:	2303      	movs	r3, #3
 8003232:	e255      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003234:	4b65      	ldr	r3, [pc, #404]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800323c:	2b00      	cmp	r3, #0
 800323e:	d0f0      	beq.n	8003222 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003240:	4b62      	ldr	r3, [pc, #392]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	691b      	ldr	r3, [r3, #16]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	495f      	ldr	r1, [pc, #380]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003250:	4313      	orrs	r3, r2
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	e018      	b.n	8003288 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003256:	4b5d      	ldr	r3, [pc, #372]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a5c      	ldr	r2, [pc, #368]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800325c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003262:	f7fd fe61 	bl	8000f28 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800326a:	f7fd fe5d 	bl	8000f28 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b02      	cmp	r3, #2
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e231      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800327c:	4b53      	ldr	r3, [pc, #332]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1f0      	bne.n	800326a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d03c      	beq.n	800330e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	695b      	ldr	r3, [r3, #20]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d01c      	beq.n	80032d6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800329c:	4b4b      	ldr	r3, [pc, #300]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800329e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032a2:	4a4a      	ldr	r2, [pc, #296]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80032a4:	f043 0301 	orr.w	r3, r3, #1
 80032a8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ac:	f7fd fe3c 	bl	8000f28 <HAL_GetTick>
 80032b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032b2:	e008      	b.n	80032c6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032b4:	f7fd fe38 	bl	8000f28 <HAL_GetTick>
 80032b8:	4602      	mov	r2, r0
 80032ba:	693b      	ldr	r3, [r7, #16]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d901      	bls.n	80032c6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80032c2:	2303      	movs	r3, #3
 80032c4:	e20c      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80032c6:	4b41      	ldr	r3, [pc, #260]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80032c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032cc:	f003 0302 	and.w	r3, r3, #2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d0ef      	beq.n	80032b4 <HAL_RCC_OscConfig+0x3ec>
 80032d4:	e01b      	b.n	800330e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80032d6:	4b3d      	ldr	r3, [pc, #244]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80032d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032dc:	4a3b      	ldr	r2, [pc, #236]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80032de:	f023 0301 	bic.w	r3, r3, #1
 80032e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032e6:	f7fd fe1f 	bl	8000f28 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80032ec:	e008      	b.n	8003300 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032ee:	f7fd fe1b 	bl	8000f28 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	2b02      	cmp	r3, #2
 80032fa:	d901      	bls.n	8003300 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80032fc:	2303      	movs	r3, #3
 80032fe:	e1ef      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003300:	4b32      	ldr	r3, [pc, #200]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1ef      	bne.n	80032ee <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0304 	and.w	r3, r3, #4
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 80a6 	beq.w	8003468 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800331c:	2300      	movs	r3, #0
 800331e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003320:	4b2a      	ldr	r3, [pc, #168]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10d      	bne.n	8003348 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800332c:	4b27      	ldr	r3, [pc, #156]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800332e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003330:	4a26      	ldr	r2, [pc, #152]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003336:	6593      	str	r3, [r2, #88]	; 0x58
 8003338:	4b24      	ldr	r3, [pc, #144]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 800333a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003340:	60bb      	str	r3, [r7, #8]
 8003342:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003344:	2301      	movs	r3, #1
 8003346:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <HAL_RCC_OscConfig+0x508>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003350:	2b00      	cmp	r3, #0
 8003352:	d118      	bne.n	8003386 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003354:	4b1e      	ldr	r3, [pc, #120]	; (80033d0 <HAL_RCC_OscConfig+0x508>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a1d      	ldr	r2, [pc, #116]	; (80033d0 <HAL_RCC_OscConfig+0x508>)
 800335a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800335e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003360:	f7fd fde2 	bl	8000f28 <HAL_GetTick>
 8003364:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003366:	e008      	b.n	800337a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003368:	f7fd fdde 	bl	8000f28 <HAL_GetTick>
 800336c:	4602      	mov	r2, r0
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	1ad3      	subs	r3, r2, r3
 8003372:	2b02      	cmp	r3, #2
 8003374:	d901      	bls.n	800337a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e1b2      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800337a:	4b15      	ldr	r3, [pc, #84]	; (80033d0 <HAL_RCC_OscConfig+0x508>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003382:	2b00      	cmp	r3, #0
 8003384:	d0f0      	beq.n	8003368 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	2b01      	cmp	r3, #1
 800338c:	d108      	bne.n	80033a0 <HAL_RCC_OscConfig+0x4d8>
 800338e:	4b0f      	ldr	r3, [pc, #60]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003394:	4a0d      	ldr	r2, [pc, #52]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 8003396:	f043 0301 	orr.w	r3, r3, #1
 800339a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800339e:	e029      	b.n	80033f4 <HAL_RCC_OscConfig+0x52c>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2b05      	cmp	r3, #5
 80033a6:	d115      	bne.n	80033d4 <HAL_RCC_OscConfig+0x50c>
 80033a8:	4b08      	ldr	r3, [pc, #32]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80033aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ae:	4a07      	ldr	r2, [pc, #28]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033b8:	4b04      	ldr	r3, [pc, #16]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80033ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033be:	4a03      	ldr	r2, [pc, #12]	; (80033cc <HAL_RCC_OscConfig+0x504>)
 80033c0:	f043 0301 	orr.w	r3, r3, #1
 80033c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033c8:	e014      	b.n	80033f4 <HAL_RCC_OscConfig+0x52c>
 80033ca:	bf00      	nop
 80033cc:	40021000 	.word	0x40021000
 80033d0:	40007000 	.word	0x40007000
 80033d4:	4b9a      	ldr	r3, [pc, #616]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80033d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033da:	4a99      	ldr	r2, [pc, #612]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80033dc:	f023 0301 	bic.w	r3, r3, #1
 80033e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80033e4:	4b96      	ldr	r3, [pc, #600]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80033e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80033ea:	4a95      	ldr	r2, [pc, #596]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80033ec:	f023 0304 	bic.w	r3, r3, #4
 80033f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d016      	beq.n	800342a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033fc:	f7fd fd94 	bl	8000f28 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003402:	e00a      	b.n	800341a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003404:	f7fd fd90 	bl	8000f28 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003412:	4293      	cmp	r3, r2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e162      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800341a:	4b89      	ldr	r3, [pc, #548]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800341c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ed      	beq.n	8003404 <HAL_RCC_OscConfig+0x53c>
 8003428:	e015      	b.n	8003456 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800342a:	f7fd fd7d 	bl	8000f28 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003430:	e00a      	b.n	8003448 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003432:	f7fd fd79 	bl	8000f28 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003440:	4293      	cmp	r3, r2
 8003442:	d901      	bls.n	8003448 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003444:	2303      	movs	r3, #3
 8003446:	e14b      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003448:	4b7d      	ldr	r3, [pc, #500]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800344e:	f003 0302 	and.w	r3, r3, #2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d1ed      	bne.n	8003432 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003456:	7ffb      	ldrb	r3, [r7, #31]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d105      	bne.n	8003468 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800345c:	4b78      	ldr	r3, [pc, #480]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800345e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003460:	4a77      	ldr	r2, [pc, #476]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003466:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b00      	cmp	r3, #0
 8003472:	d03c      	beq.n	80034ee <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003478:	2b00      	cmp	r3, #0
 800347a:	d01c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800347c:	4b70      	ldr	r3, [pc, #448]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800347e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003482:	4a6f      	ldr	r2, [pc, #444]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003484:	f043 0301 	orr.w	r3, r3, #1
 8003488:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800348c:	f7fd fd4c 	bl	8000f28 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003494:	f7fd fd48 	bl	8000f28 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e11c      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80034a6:	4b66      	ldr	r3, [pc, #408]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80034a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034ac:	f003 0302 	and.w	r3, r3, #2
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ef      	beq.n	8003494 <HAL_RCC_OscConfig+0x5cc>
 80034b4:	e01b      	b.n	80034ee <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80034b6:	4b62      	ldr	r3, [pc, #392]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80034b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034bc:	4a60      	ldr	r2, [pc, #384]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80034be:	f023 0301 	bic.w	r3, r3, #1
 80034c2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c6:	f7fd fd2f 	bl	8000f28 <HAL_GetTick>
 80034ca:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034cc:	e008      	b.n	80034e0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80034ce:	f7fd fd2b 	bl	8000f28 <HAL_GetTick>
 80034d2:	4602      	mov	r2, r0
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	1ad3      	subs	r3, r2, r3
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d901      	bls.n	80034e0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e0ff      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80034e0:	4b57      	ldr	r3, [pc, #348]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80034e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80034e6:	f003 0302 	and.w	r3, r3, #2
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d1ef      	bne.n	80034ce <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 80f3 	beq.w	80036de <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	f040 80c9 	bne.w	8003694 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003502:	4b4f      	ldr	r3, [pc, #316]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003508:	697b      	ldr	r3, [r7, #20]
 800350a:	f003 0203 	and.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003512:	429a      	cmp	r2, r3
 8003514:	d12c      	bne.n	8003570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	3b01      	subs	r3, #1
 8003522:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003524:	429a      	cmp	r2, r3
 8003526:	d123      	bne.n	8003570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003532:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003534:	429a      	cmp	r2, r3
 8003536:	d11b      	bne.n	8003570 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003542:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003544:	429a      	cmp	r2, r3
 8003546:	d113      	bne.n	8003570 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003552:	085b      	lsrs	r3, r3, #1
 8003554:	3b01      	subs	r3, #1
 8003556:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003558:	429a      	cmp	r2, r3
 800355a:	d109      	bne.n	8003570 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003566:	085b      	lsrs	r3, r3, #1
 8003568:	3b01      	subs	r3, #1
 800356a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800356c:	429a      	cmp	r2, r3
 800356e:	d06b      	beq.n	8003648 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003570:	69bb      	ldr	r3, [r7, #24]
 8003572:	2b0c      	cmp	r3, #12
 8003574:	d062      	beq.n	800363c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003576:	4b32      	ldr	r3, [pc, #200]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e0ac      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003586:	4b2e      	ldr	r3, [pc, #184]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a2d      	ldr	r2, [pc, #180]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800358c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003590:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003592:	f7fd fcc9 	bl	8000f28 <HAL_GetTick>
 8003596:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003598:	e008      	b.n	80035ac <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800359a:	f7fd fcc5 	bl	8000f28 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d901      	bls.n	80035ac <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80035a8:	2303      	movs	r3, #3
 80035aa:	e099      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80035ac:	4b24      	ldr	r3, [pc, #144]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1f0      	bne.n	800359a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035b8:	4b21      	ldr	r3, [pc, #132]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80035ba:	68da      	ldr	r2, [r3, #12]
 80035bc:	4b21      	ldr	r3, [pc, #132]	; (8003644 <HAL_RCC_OscConfig+0x77c>)
 80035be:	4013      	ands	r3, r2
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80035c8:	3a01      	subs	r2, #1
 80035ca:	0112      	lsls	r2, r2, #4
 80035cc:	4311      	orrs	r1, r2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80035d2:	0212      	lsls	r2, r2, #8
 80035d4:	4311      	orrs	r1, r2
 80035d6:	687a      	ldr	r2, [r7, #4]
 80035d8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80035da:	0852      	lsrs	r2, r2, #1
 80035dc:	3a01      	subs	r2, #1
 80035de:	0552      	lsls	r2, r2, #21
 80035e0:	4311      	orrs	r1, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80035e6:	0852      	lsrs	r2, r2, #1
 80035e8:	3a01      	subs	r2, #1
 80035ea:	0652      	lsls	r2, r2, #25
 80035ec:	4311      	orrs	r1, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80035f2:	06d2      	lsls	r2, r2, #27
 80035f4:	430a      	orrs	r2, r1
 80035f6:	4912      	ldr	r1, [pc, #72]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80035fc:	4b10      	ldr	r3, [pc, #64]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0f      	ldr	r2, [pc, #60]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003602:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003606:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003608:	4b0d      	ldr	r3, [pc, #52]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	4a0c      	ldr	r2, [pc, #48]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 800360e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003612:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003614:	f7fd fc88 	bl	8000f28 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361c:	f7fd fc84 	bl	8000f28 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e058      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800362e:	4b04      	ldr	r3, [pc, #16]	; (8003640 <HAL_RCC_OscConfig+0x778>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d0f0      	beq.n	800361c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800363a:	e050      	b.n	80036de <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e04f      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
 8003640:	40021000 	.word	0x40021000
 8003644:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003648:	4b27      	ldr	r3, [pc, #156]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003650:	2b00      	cmp	r3, #0
 8003652:	d144      	bne.n	80036de <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003654:	4b24      	ldr	r3, [pc, #144]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 800365a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800365e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003660:	4b21      	ldr	r3, [pc, #132]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 8003662:	68db      	ldr	r3, [r3, #12]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 8003666:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800366a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366c:	f7fd fc5c 	bl	8000f28 <HAL_GetTick>
 8003670:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003672:	e008      	b.n	8003686 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003674:	f7fd fc58 	bl	8000f28 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b02      	cmp	r3, #2
 8003680:	d901      	bls.n	8003686 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e02c      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003686:	4b18      	ldr	r3, [pc, #96]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800368e:	2b00      	cmp	r3, #0
 8003690:	d0f0      	beq.n	8003674 <HAL_RCC_OscConfig+0x7ac>
 8003692:	e024      	b.n	80036de <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	2b0c      	cmp	r3, #12
 8003698:	d01f      	beq.n	80036da <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b13      	ldr	r3, [pc, #76]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a12      	ldr	r2, [pc, #72]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 80036a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a6:	f7fd fc3f 	bl	8000f28 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ac:	e008      	b.n	80036c0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036ae:	f7fd fc3b 	bl	8000f28 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d901      	bls.n	80036c0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80036bc:	2303      	movs	r3, #3
 80036be:	e00f      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036c0:	4b09      	ldr	r3, [pc, #36]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d1f0      	bne.n	80036ae <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80036cc:	4b06      	ldr	r3, [pc, #24]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	4905      	ldr	r1, [pc, #20]	; (80036e8 <HAL_RCC_OscConfig+0x820>)
 80036d2:	4b06      	ldr	r3, [pc, #24]	; (80036ec <HAL_RCC_OscConfig+0x824>)
 80036d4:	4013      	ands	r3, r2
 80036d6:	60cb      	str	r3, [r1, #12]
 80036d8:	e001      	b.n	80036de <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e000      	b.n	80036e0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	40021000 	.word	0x40021000
 80036ec:	feeefffc 	.word	0xfeeefffc

080036f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d101      	bne.n	8003704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	e0e7      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003704:	4b75      	ldr	r3, [pc, #468]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0307 	and.w	r3, r3, #7
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d910      	bls.n	8003734 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003712:	4b72      	ldr	r3, [pc, #456]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f023 0207 	bic.w	r2, r3, #7
 800371a:	4970      	ldr	r1, [pc, #448]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003722:	4b6e      	ldr	r3, [pc, #440]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0307 	and.w	r3, r3, #7
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d001      	beq.n	8003734 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e0cf      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0302 	and.w	r3, r3, #2
 800373c:	2b00      	cmp	r3, #0
 800373e:	d010      	beq.n	8003762 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689a      	ldr	r2, [r3, #8]
 8003744:	4b66      	ldr	r3, [pc, #408]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800374c:	429a      	cmp	r2, r3
 800374e:	d908      	bls.n	8003762 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003750:	4b63      	ldr	r3, [pc, #396]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4960      	ldr	r1, [pc, #384]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d04c      	beq.n	8003808 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	2b03      	cmp	r3, #3
 8003774:	d107      	bne.n	8003786 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003776:	4b5a      	ldr	r3, [pc, #360]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d121      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e0a6      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d107      	bne.n	800379e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800378e:	4b54      	ldr	r3, [pc, #336]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d115      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e09a      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	685b      	ldr	r3, [r3, #4]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d107      	bne.n	80037b6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80037a6:	4b4e      	ldr	r3, [pc, #312]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e08e      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037b6:	4b4a      	ldr	r3, [pc, #296]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e086      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80037c6:	4b46      	ldr	r3, [pc, #280]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	f023 0203 	bic.w	r2, r3, #3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4943      	ldr	r1, [pc, #268]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037d8:	f7fd fba6 	bl	8000f28 <HAL_GetTick>
 80037dc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037de:	e00a      	b.n	80037f6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e0:	f7fd fba2 	bl	8000f28 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e06e      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037f6:	4b3a      	ldr	r3, [pc, #232]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 020c 	and.w	r2, r3, #12
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	429a      	cmp	r2, r3
 8003806:	d1eb      	bne.n	80037e0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d010      	beq.n	8003836 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689a      	ldr	r2, [r3, #8]
 8003818:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 800381a:	689b      	ldr	r3, [r3, #8]
 800381c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003820:	429a      	cmp	r2, r3
 8003822:	d208      	bcs.n	8003836 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003824:	4b2e      	ldr	r3, [pc, #184]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	492b      	ldr	r1, [pc, #172]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003832:	4313      	orrs	r3, r2
 8003834:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003836:	4b29      	ldr	r3, [pc, #164]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	683a      	ldr	r2, [r7, #0]
 8003840:	429a      	cmp	r2, r3
 8003842:	d210      	bcs.n	8003866 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003844:	4b25      	ldr	r3, [pc, #148]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 0207 	bic.w	r2, r3, #7
 800384c:	4923      	ldr	r1, [pc, #140]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003854:	4b21      	ldr	r3, [pc, #132]	; (80038dc <HAL_RCC_ClockConfig+0x1ec>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	683a      	ldr	r2, [r7, #0]
 800385e:	429a      	cmp	r2, r3
 8003860:	d001      	beq.n	8003866 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e036      	b.n	80038d4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0304 	and.w	r3, r3, #4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d008      	beq.n	8003884 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003872:	4b1b      	ldr	r3, [pc, #108]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	4918      	ldr	r1, [pc, #96]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d009      	beq.n	80038a4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003890:	4b13      	ldr	r3, [pc, #76]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4910      	ldr	r1, [pc, #64]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038a4:	f000 f824 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b0d      	ldr	r3, [pc, #52]	; (80038e0 <HAL_RCC_ClockConfig+0x1f0>)
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	091b      	lsrs	r3, r3, #4
 80038b0:	f003 030f 	and.w	r3, r3, #15
 80038b4:	490b      	ldr	r1, [pc, #44]	; (80038e4 <HAL_RCC_ClockConfig+0x1f4>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	f003 031f 	and.w	r3, r3, #31
 80038bc:	fa22 f303 	lsr.w	r3, r2, r3
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_RCC_ClockConfig+0x1f8>)
 80038c2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80038c4:	4b09      	ldr	r3, [pc, #36]	; (80038ec <HAL_RCC_ClockConfig+0x1fc>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f7fd fadd 	bl	8000e88 <HAL_InitTick>
 80038ce:	4603      	mov	r3, r0
 80038d0:	72fb      	strb	r3, [r7, #11]

  return status;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	40022000 	.word	0x40022000
 80038e0:	40021000 	.word	0x40021000
 80038e4:	08005518 	.word	0x08005518
 80038e8:	20000000 	.word	0x20000000
 80038ec:	20000004 	.word	0x20000004

080038f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b089      	sub	sp, #36	; 0x24
 80038f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80038f6:	2300      	movs	r3, #0
 80038f8:	61fb      	str	r3, [r7, #28]
 80038fa:	2300      	movs	r3, #0
 80038fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80038fe:	4b3e      	ldr	r3, [pc, #248]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	f003 030c 	and.w	r3, r3, #12
 8003906:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003908:	4b3b      	ldr	r3, [pc, #236]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	f003 0303 	and.w	r3, r3, #3
 8003910:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d005      	beq.n	8003924 <HAL_RCC_GetSysClockFreq+0x34>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	2b0c      	cmp	r3, #12
 800391c:	d121      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2b01      	cmp	r3, #1
 8003922:	d11e      	bne.n	8003962 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003924:	4b34      	ldr	r3, [pc, #208]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d107      	bne.n	8003940 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003930:	4b31      	ldr	r3, [pc, #196]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003936:	0a1b      	lsrs	r3, r3, #8
 8003938:	f003 030f 	and.w	r3, r3, #15
 800393c:	61fb      	str	r3, [r7, #28]
 800393e:	e005      	b.n	800394c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003940:	4b2d      	ldr	r3, [pc, #180]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	091b      	lsrs	r3, r3, #4
 8003946:	f003 030f 	and.w	r3, r3, #15
 800394a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800394c:	4a2b      	ldr	r2, [pc, #172]	; (80039fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003954:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10d      	bne.n	8003978 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800395c:	69fb      	ldr	r3, [r7, #28]
 800395e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003960:	e00a      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	2b04      	cmp	r3, #4
 8003966:	d102      	bne.n	800396e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003968:	4b25      	ldr	r3, [pc, #148]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x110>)
 800396a:	61bb      	str	r3, [r7, #24]
 800396c:	e004      	b.n	8003978 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b08      	cmp	r3, #8
 8003972:	d101      	bne.n	8003978 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003974:	4b23      	ldr	r3, [pc, #140]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x114>)
 8003976:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d134      	bne.n	80039e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800397e:	4b1e      	ldr	r3, [pc, #120]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003980:	68db      	ldr	r3, [r3, #12]
 8003982:	f003 0303 	and.w	r3, r3, #3
 8003986:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d003      	beq.n	8003996 <HAL_RCC_GetSysClockFreq+0xa6>
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	2b03      	cmp	r3, #3
 8003992:	d003      	beq.n	800399c <HAL_RCC_GetSysClockFreq+0xac>
 8003994:	e005      	b.n	80039a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003996:	4b1a      	ldr	r3, [pc, #104]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x110>)
 8003998:	617b      	str	r3, [r7, #20]
      break;
 800399a:	e005      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800399c:	4b19      	ldr	r3, [pc, #100]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x114>)
 800399e:	617b      	str	r3, [r7, #20]
      break;
 80039a0:	e002      	b.n	80039a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	617b      	str	r3, [r7, #20]
      break;
 80039a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039a8:	4b13      	ldr	r3, [pc, #76]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	091b      	lsrs	r3, r3, #4
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	3301      	adds	r3, #1
 80039b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80039b6:	4b10      	ldr	r3, [pc, #64]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039b8:	68db      	ldr	r3, [r3, #12]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	fb03 f202 	mul.w	r2, r3, r2
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80039cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80039ce:	4b0a      	ldr	r3, [pc, #40]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	0e5b      	lsrs	r3, r3, #25
 80039d4:	f003 0303 	and.w	r3, r3, #3
 80039d8:	3301      	adds	r3, #1
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80039de:	697a      	ldr	r2, [r7, #20]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80039e8:	69bb      	ldr	r3, [r7, #24]
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3724      	adds	r7, #36	; 0x24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f4:	4770      	bx	lr
 80039f6:	bf00      	nop
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08005530 	.word	0x08005530
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20000000 	.word	0x20000000

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a1b      	lsrs	r3, r3, #8
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4904      	ldr	r1, [pc, #16]	; (8003a48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	f003 031f 	and.w	r3, r3, #31
 8003a3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	bd80      	pop	{r7, pc}
 8003a44:	40021000 	.word	0x40021000
 8003a48:	08005528 	.word	0x08005528

08003a4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003a50:	f7ff ffda 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a54:	4602      	mov	r2, r0
 8003a56:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	0adb      	lsrs	r3, r3, #11
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	4904      	ldr	r1, [pc, #16]	; (8003a74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003a62:	5ccb      	ldrb	r3, [r1, r3]
 8003a64:	f003 031f 	and.w	r3, r3, #31
 8003a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	bd80      	pop	{r7, pc}
 8003a70:	40021000 	.word	0x40021000
 8003a74:	08005528 	.word	0x08005528

08003a78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003a84:	4b2a      	ldr	r3, [pc, #168]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d003      	beq.n	8003a98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003a90:	f7ff f9b6 	bl	8002e00 <HAL_PWREx_GetVoltageRange>
 8003a94:	6178      	str	r0, [r7, #20]
 8003a96:	e014      	b.n	8003ac2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a98:	4b25      	ldr	r3, [pc, #148]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aa2:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa4:	4b22      	ldr	r3, [pc, #136]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ab0:	f7ff f9a6 	bl	8002e00 <HAL_PWREx_GetVoltageRange>
 8003ab4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ab6:	4b1e      	ldr	r3, [pc, #120]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aba:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ac0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ac8:	d10b      	bne.n	8003ae2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b80      	cmp	r3, #128	; 0x80
 8003ace:	d919      	bls.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2ba0      	cmp	r3, #160	; 0xa0
 8003ad4:	d902      	bls.n	8003adc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003ad6:	2302      	movs	r3, #2
 8003ad8:	613b      	str	r3, [r7, #16]
 8003ada:	e013      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003adc:	2301      	movs	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	e010      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2b80      	cmp	r3, #128	; 0x80
 8003ae6:	d902      	bls.n	8003aee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003ae8:	2303      	movs	r3, #3
 8003aea:	613b      	str	r3, [r7, #16]
 8003aec:	e00a      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b80      	cmp	r3, #128	; 0x80
 8003af2:	d102      	bne.n	8003afa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003af4:	2302      	movs	r3, #2
 8003af6:	613b      	str	r3, [r7, #16]
 8003af8:	e004      	b.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b70      	cmp	r3, #112	; 0x70
 8003afe:	d101      	bne.n	8003b04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b00:	2301      	movs	r3, #1
 8003b02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f023 0207 	bic.w	r2, r3, #7
 8003b0c:	4909      	ldr	r1, [pc, #36]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b14:	4b07      	ldr	r3, [pc, #28]	; (8003b34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d001      	beq.n	8003b26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e000      	b.n	8003b28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b26:	2300      	movs	r3, #0
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3718      	adds	r7, #24
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	40021000 	.word	0x40021000
 8003b34:	40022000 	.word	0x40022000

08003b38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003b40:	2300      	movs	r3, #0
 8003b42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b44:	2300      	movs	r3, #0
 8003b46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d031      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b5c:	d01a      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003b5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003b62:	d814      	bhi.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d009      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003b68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003b6c:	d10f      	bne.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003b6e:	4b5d      	ldr	r3, [pc, #372]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	4a5c      	ldr	r2, [pc, #368]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b7a:	e00c      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	3304      	adds	r3, #4
 8003b80:	2100      	movs	r1, #0
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 f9de 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003b8c:	e003      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	74fb      	strb	r3, [r7, #19]
      break;
 8003b92:	e000      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003b94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003b96:	7cfb      	ldrb	r3, [r7, #19]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d10b      	bne.n	8003bb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003b9c:	4b51      	ldr	r3, [pc, #324]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ba2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	494e      	ldr	r1, [pc, #312]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003bb2:	e001      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bb4:	7cfb      	ldrb	r3, [r7, #19]
 8003bb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 809e 	beq.w	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003bca:	4b46      	ldr	r3, [pc, #280]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e000      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003bda:	2300      	movs	r3, #0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d00d      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003be0:	4b40      	ldr	r3, [pc, #256]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a3f      	ldr	r2, [pc, #252]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003be6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	4b3d      	ldr	r3, [pc, #244]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003bfc:	4b3a      	ldr	r3, [pc, #232]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a39      	ldr	r2, [pc, #228]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c08:	f7fd f98e 	bl	8000f28 <HAL_GetTick>
 8003c0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c0e:	e009      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c10:	f7fd f98a 	bl	8000f28 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	1ad3      	subs	r3, r2, r3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d902      	bls.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003c1e:	2303      	movs	r3, #3
 8003c20:	74fb      	strb	r3, [r7, #19]
        break;
 8003c22:	e005      	b.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003c24:	4b30      	ldr	r3, [pc, #192]	; (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d0ef      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d15a      	bne.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003c36:	4b2b      	ldr	r3, [pc, #172]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d01e      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	429a      	cmp	r2, r3
 8003c50:	d019      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c52:	4b24      	ldr	r3, [pc, #144]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c5e:	4b21      	ldr	r3, [pc, #132]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c64:	4a1f      	ldr	r2, [pc, #124]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c6e:	4b1d      	ldr	r3, [pc, #116]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c74:	4a1b      	ldr	r2, [pc, #108]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c7e:	4a19      	ldr	r2, [pc, #100]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	f003 0301 	and.w	r3, r3, #1
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d016      	beq.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c90:	f7fd f94a 	bl	8000f28 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c96:	e00b      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c98:	f7fd f946 	bl	8000f28 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d902      	bls.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	74fb      	strb	r3, [r7, #19]
            break;
 8003cae:	e006      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb6:	f003 0302 	and.w	r3, r3, #2
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ec      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8003cbe:	7cfb      	ldrb	r3, [r7, #19]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10b      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cd2:	4904      	ldr	r1, [pc, #16]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003cda:	e009      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003cdc:	7cfb      	ldrb	r3, [r7, #19]
 8003cde:	74bb      	strb	r3, [r7, #18]
 8003ce0:	e006      	b.n	8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8003ce2:	bf00      	nop
 8003ce4:	40021000 	.word	0x40021000
 8003ce8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cec:	7cfb      	ldrb	r3, [r7, #19]
 8003cee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003cf0:	7c7b      	ldrb	r3, [r7, #17]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d105      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cf6:	4b8a      	ldr	r3, [pc, #552]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	4a89      	ldr	r2, [pc, #548]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003cfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d00:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00a      	beq.n	8003d24 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d0e:	4b84      	ldr	r3, [pc, #528]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d14:	f023 0203 	bic.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4980      	ldr	r1, [pc, #512]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f003 0302 	and.w	r3, r3, #2
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d00a      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d30:	4b7b      	ldr	r3, [pc, #492]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d36:	f023 020c 	bic.w	r2, r3, #12
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3e:	4978      	ldr	r1, [pc, #480]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d40:	4313      	orrs	r3, r2
 8003d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f003 0320 	and.w	r3, r3, #32
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d00a      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d52:	4b73      	ldr	r3, [pc, #460]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d60:	496f      	ldr	r1, [pc, #444]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d62:	4313      	orrs	r3, r2
 8003d64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d74:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d82:	4967      	ldr	r1, [pc, #412]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00a      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d96:	4b62      	ldr	r3, [pc, #392]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da4:	495e      	ldr	r1, [pc, #376]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003da6:	4313      	orrs	r3, r2
 8003da8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d00a      	beq.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db8:	4b59      	ldr	r3, [pc, #356]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	4956      	ldr	r1, [pc, #344]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00a      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003dda:	4b51      	ldr	r3, [pc, #324]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003de0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de8:	494d      	ldr	r1, [pc, #308]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d028      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dfc:	4b48      	ldr	r3, [pc, #288]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0a:	4945      	ldr	r1, [pc, #276]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e1a:	d106      	bne.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e1c:	4b40      	ldr	r3, [pc, #256]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e1e:	68db      	ldr	r3, [r3, #12]
 8003e20:	4a3f      	ldr	r2, [pc, #252]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e26:	60d3      	str	r3, [r2, #12]
 8003e28:	e011      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	3304      	adds	r3, #4
 8003e38:	2101      	movs	r1, #1
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 f882 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e40:	4603      	mov	r3, r0
 8003e42:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003e44:	7cfb      	ldrb	r3, [r7, #19]
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003e4a:	7cfb      	ldrb	r3, [r7, #19]
 8003e4c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d028      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e5a:	4b31      	ldr	r3, [pc, #196]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e68:	492d      	ldr	r1, [pc, #180]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e78:	d106      	bne.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e7a:	4b29      	ldr	r3, [pc, #164]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	4a28      	ldr	r2, [pc, #160]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003e80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e84:	60d3      	str	r3, [r2, #12]
 8003e86:	e011      	b.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003e90:	d10c      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3304      	adds	r3, #4
 8003e96:	2101      	movs	r1, #1
 8003e98:	4618      	mov	r0, r3
 8003e9a:	f000 f853 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d001      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003ea8:	7cfb      	ldrb	r3, [r7, #19]
 8003eaa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d01c      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003eb8:	4b19      	ldr	r3, [pc, #100]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003eba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ebe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ec6:	4916      	ldr	r1, [pc, #88]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ed6:	d10c      	bne.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	3304      	adds	r3, #4
 8003edc:	2102      	movs	r1, #2
 8003ede:	4618      	mov	r0, r3
 8003ee0:	f000 f830 	bl	8003f44 <RCCEx_PLLSAI1_Config>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003ee8:	7cfb      	ldrb	r3, [r7, #19]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d001      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8003eee:	7cfb      	ldrb	r3, [r7, #19]
 8003ef0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d00a      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003efe:	4b08      	ldr	r3, [pc, #32]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f04:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f0c:	4904      	ldr	r1, [pc, #16]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003f14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003f16:	4618      	mov	r0, r3
 8003f18:	3718      	adds	r7, #24
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000

08003f24 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a04      	ldr	r2, [pc, #16]	; (8003f40 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003f2e:	f043 0304 	orr.w	r3, r3, #4
 8003f32:	6013      	str	r3, [r2, #0]
}
 8003f34:	bf00      	nop
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
 8003f3e:	bf00      	nop
 8003f40:	40021000 	.word	0x40021000

08003f44 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003f52:	4b74      	ldr	r3, [pc, #464]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	f003 0303 	and.w	r3, r3, #3
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d018      	beq.n	8003f90 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003f5e:	4b71      	ldr	r3, [pc, #452]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	f003 0203 	and.w	r2, r3, #3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d10d      	bne.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
       ||
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d009      	beq.n	8003f8a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003f76:	4b6b      	ldr	r3, [pc, #428]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f003 0307 	and.w	r3, r3, #7
 8003f80:	1c5a      	adds	r2, r3, #1
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
       ||
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d047      	beq.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	73fb      	strb	r3, [r7, #15]
 8003f8e:	e044      	b.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	2b03      	cmp	r3, #3
 8003f96:	d018      	beq.n	8003fca <RCCEx_PLLSAI1_Config+0x86>
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d825      	bhi.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d002      	beq.n	8003fa6 <RCCEx_PLLSAI1_Config+0x62>
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d009      	beq.n	8003fb8 <RCCEx_PLLSAI1_Config+0x74>
 8003fa4:	e020      	b.n	8003fe8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003fa6:	4b5f      	ldr	r3, [pc, #380]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f003 0302 	and.w	r3, r3, #2
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d11d      	bne.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fb6:	e01a      	b.n	8003fee <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003fb8:	4b5a      	ldr	r3, [pc, #360]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d116      	bne.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fc8:	e013      	b.n	8003ff2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003fca:	4b56      	ldr	r3, [pc, #344]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d10f      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003fd6:	4b53      	ldr	r3, [pc, #332]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d109      	bne.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003fe6:	e006      	b.n	8003ff6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	73fb      	strb	r3, [r7, #15]
      break;
 8003fec:	e004      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003fee:	bf00      	nop
 8003ff0:	e002      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003ff6:	bf00      	nop
    }

    if(status == HAL_OK)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10d      	bne.n	800401a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003ffe:	4b49      	ldr	r3, [pc, #292]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6819      	ldr	r1, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	3b01      	subs	r3, #1
 8004010:	011b      	lsls	r3, r3, #4
 8004012:	430b      	orrs	r3, r1
 8004014:	4943      	ldr	r1, [pc, #268]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004016:	4313      	orrs	r3, r2
 8004018:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800401a:	7bfb      	ldrb	r3, [r7, #15]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d17c      	bne.n	800411a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004020:	4b40      	ldr	r3, [pc, #256]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3f      	ldr	r2, [pc, #252]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004026:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800402a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800402c:	f7fc ff7c 	bl	8000f28 <HAL_GetTick>
 8004030:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004032:	e009      	b.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004034:	f7fc ff78 	bl	8000f28 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b02      	cmp	r3, #2
 8004040:	d902      	bls.n	8004048 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	73fb      	strb	r3, [r7, #15]
        break;
 8004046:	e005      	b.n	8004054 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004048:	4b36      	ldr	r3, [pc, #216]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004050:	2b00      	cmp	r3, #0
 8004052:	d1ef      	bne.n	8004034 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004054:	7bfb      	ldrb	r3, [r7, #15]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d15f      	bne.n	800411a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d110      	bne.n	8004082 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004060:	4b30      	ldr	r3, [pc, #192]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004062:	691b      	ldr	r3, [r3, #16]
 8004064:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004068:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
 8004070:	0211      	lsls	r1, r2, #8
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	68d2      	ldr	r2, [r2, #12]
 8004076:	06d2      	lsls	r2, r2, #27
 8004078:	430a      	orrs	r2, r1
 800407a:	492a      	ldr	r1, [pc, #168]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800407c:	4313      	orrs	r3, r2
 800407e:	610b      	str	r3, [r1, #16]
 8004080:	e027      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	2b01      	cmp	r3, #1
 8004086:	d112      	bne.n	80040ae <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004088:	4b26      	ldr	r3, [pc, #152]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800408a:	691b      	ldr	r3, [r3, #16]
 800408c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004090:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004094:	687a      	ldr	r2, [r7, #4]
 8004096:	6892      	ldr	r2, [r2, #8]
 8004098:	0211      	lsls	r1, r2, #8
 800409a:	687a      	ldr	r2, [r7, #4]
 800409c:	6912      	ldr	r2, [r2, #16]
 800409e:	0852      	lsrs	r2, r2, #1
 80040a0:	3a01      	subs	r2, #1
 80040a2:	0552      	lsls	r2, r2, #21
 80040a4:	430a      	orrs	r2, r1
 80040a6:	491f      	ldr	r1, [pc, #124]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	610b      	str	r3, [r1, #16]
 80040ac:	e011      	b.n	80040d2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80040ae:	4b1d      	ldr	r3, [pc, #116]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80040b6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	6892      	ldr	r2, [r2, #8]
 80040be:	0211      	lsls	r1, r2, #8
 80040c0:	687a      	ldr	r2, [r7, #4]
 80040c2:	6952      	ldr	r2, [r2, #20]
 80040c4:	0852      	lsrs	r2, r2, #1
 80040c6:	3a01      	subs	r2, #1
 80040c8:	0652      	lsls	r2, r2, #25
 80040ca:	430a      	orrs	r2, r1
 80040cc:	4915      	ldr	r1, [pc, #84]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040ce:	4313      	orrs	r3, r2
 80040d0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80040d2:	4b14      	ldr	r3, [pc, #80]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a13      	ldr	r2, [pc, #76]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80040dc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040de:	f7fc ff23 	bl	8000f28 <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040e4:	e009      	b.n	80040fa <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80040e6:	f7fc ff1f 	bl	8000f28 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d902      	bls.n	80040fa <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	73fb      	strb	r3, [r7, #15]
          break;
 80040f8:	e005      	b.n	8004106 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80040fa:	4b0a      	ldr	r3, [pc, #40]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ef      	beq.n	80040e6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d106      	bne.n	800411a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 800410e:	691a      	ldr	r2, [r3, #16]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	4903      	ldr	r1, [pc, #12]	; (8004124 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004116:	4313      	orrs	r3, r2
 8004118:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800411a:	7bfb      	ldrb	r3, [r7, #15]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3710      	adds	r7, #16
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40021000 	.word	0x40021000

08004128 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e040      	b.n	80041bc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800413e:	2b00      	cmp	r3, #0
 8004140:	d106      	bne.n	8004150 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f7fc fd6a 	bl	8000c24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2224      	movs	r2, #36	; 0x24
 8004154:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f022 0201 	bic.w	r2, r2, #1
 8004164:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416a:	2b00      	cmp	r3, #0
 800416c:	d002      	beq.n	8004174 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f000 fade 	bl	8004730 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 f8af 	bl	80042d8 <UART_SetConfig>
 800417a:	4603      	mov	r3, r0
 800417c:	2b01      	cmp	r3, #1
 800417e:	d101      	bne.n	8004184 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e01b      	b.n	80041bc <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	685a      	ldr	r2, [r3, #4]
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004192:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	689a      	ldr	r2, [r3, #8]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80041a2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681a      	ldr	r2, [r3, #0]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f042 0201 	orr.w	r2, r2, #1
 80041b2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 fb5d 	bl	8004874 <UART_CheckIdleState>
 80041ba:	4603      	mov	r3, r0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3708      	adds	r7, #8
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b08a      	sub	sp, #40	; 0x28
 80041c8:	af02      	add	r7, sp, #8
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	603b      	str	r3, [r7, #0]
 80041d0:	4613      	mov	r3, r2
 80041d2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041d8:	2b20      	cmp	r3, #32
 80041da:	d178      	bne.n	80042ce <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d002      	beq.n	80041e8 <HAL_UART_Transmit+0x24>
 80041e2:	88fb      	ldrh	r3, [r7, #6]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e071      	b.n	80042d0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2221      	movs	r2, #33	; 0x21
 80041f8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041fa:	f7fc fe95 	bl	8000f28 <HAL_GetTick>
 80041fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	88fa      	ldrh	r2, [r7, #6]
 8004204:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	88fa      	ldrh	r2, [r7, #6]
 800420c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004218:	d108      	bne.n	800422c <HAL_UART_Transmit+0x68>
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d104      	bne.n	800422c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	61bb      	str	r3, [r7, #24]
 800422a:	e003      	b.n	8004234 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004230:	2300      	movs	r3, #0
 8004232:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004234:	e030      	b.n	8004298 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	2180      	movs	r1, #128	; 0x80
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 fbbf 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d004      	beq.n	8004256 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2220      	movs	r2, #32
 8004250:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8004252:	2303      	movs	r3, #3
 8004254:	e03c      	b.n	80042d0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8004256:	69fb      	ldr	r3, [r7, #28]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	881a      	ldrh	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004268:	b292      	uxth	r2, r2
 800426a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	3302      	adds	r3, #2
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	e008      	b.n	8004286 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	781a      	ldrb	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	b292      	uxth	r2, r2
 800427e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	3301      	adds	r3, #1
 8004284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800428c:	b29b      	uxth	r3, r3
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1c8      	bne.n	8004236 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	9300      	str	r3, [sp, #0]
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	2200      	movs	r2, #0
 80042ac:	2140      	movs	r1, #64	; 0x40
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 fb88 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 80042b4:	4603      	mov	r3, r0
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d004      	beq.n	80042c4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2220      	movs	r2, #32
 80042be:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80042c0:	2303      	movs	r3, #3
 80042c2:	e005      	b.n	80042d0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2220      	movs	r2, #32
 80042c8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	e000      	b.n	80042d0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80042ce:	2302      	movs	r3, #2
  }
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3720      	adds	r7, #32
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042dc:	b08a      	sub	sp, #40	; 0x28
 80042de:	af00      	add	r7, sp, #0
 80042e0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042e2:	2300      	movs	r3, #0
 80042e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	691b      	ldr	r3, [r3, #16]
 80042f0:	431a      	orrs	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	431a      	orrs	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	4bb4      	ldr	r3, [pc, #720]	; (80045d8 <UART_SetConfig+0x300>)
 8004308:	4013      	ands	r3, r2
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	6812      	ldr	r2, [r2, #0]
 800430e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004310:	430b      	orrs	r3, r1
 8004312:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	68da      	ldr	r2, [r3, #12]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	430a      	orrs	r2, r1
 8004328:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4aa9      	ldr	r2, [pc, #676]	; (80045dc <UART_SetConfig+0x304>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d004      	beq.n	8004344 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004340:	4313      	orrs	r3, r2
 8004342:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004354:	430a      	orrs	r2, r1
 8004356:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4aa0      	ldr	r2, [pc, #640]	; (80045e0 <UART_SetConfig+0x308>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d126      	bne.n	80043b0 <UART_SetConfig+0xd8>
 8004362:	4ba0      	ldr	r3, [pc, #640]	; (80045e4 <UART_SetConfig+0x30c>)
 8004364:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004368:	f003 0303 	and.w	r3, r3, #3
 800436c:	2b03      	cmp	r3, #3
 800436e:	d81b      	bhi.n	80043a8 <UART_SetConfig+0xd0>
 8004370:	a201      	add	r2, pc, #4	; (adr r2, 8004378 <UART_SetConfig+0xa0>)
 8004372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004376:	bf00      	nop
 8004378:	08004389 	.word	0x08004389
 800437c:	08004399 	.word	0x08004399
 8004380:	08004391 	.word	0x08004391
 8004384:	080043a1 	.word	0x080043a1
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800438e:	e080      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004390:	2302      	movs	r3, #2
 8004392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004396:	e07c      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004398:	2304      	movs	r3, #4
 800439a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800439e:	e078      	b.n	8004492 <UART_SetConfig+0x1ba>
 80043a0:	2308      	movs	r3, #8
 80043a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a6:	e074      	b.n	8004492 <UART_SetConfig+0x1ba>
 80043a8:	2310      	movs	r3, #16
 80043aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ae:	e070      	b.n	8004492 <UART_SetConfig+0x1ba>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a8c      	ldr	r2, [pc, #560]	; (80045e8 <UART_SetConfig+0x310>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d138      	bne.n	800442c <UART_SetConfig+0x154>
 80043ba:	4b8a      	ldr	r3, [pc, #552]	; (80045e4 <UART_SetConfig+0x30c>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	f003 030c 	and.w	r3, r3, #12
 80043c4:	2b0c      	cmp	r3, #12
 80043c6:	d82d      	bhi.n	8004424 <UART_SetConfig+0x14c>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <UART_SetConfig+0xf8>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	08004405 	.word	0x08004405
 80043d4:	08004425 	.word	0x08004425
 80043d8:	08004425 	.word	0x08004425
 80043dc:	08004425 	.word	0x08004425
 80043e0:	08004415 	.word	0x08004415
 80043e4:	08004425 	.word	0x08004425
 80043e8:	08004425 	.word	0x08004425
 80043ec:	08004425 	.word	0x08004425
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004425 	.word	0x08004425
 80043f8:	08004425 	.word	0x08004425
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800441d 	.word	0x0800441d
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800440a:	e042      	b.n	8004492 <UART_SetConfig+0x1ba>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004412:	e03e      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800441a:	e03a      	b.n	8004492 <UART_SetConfig+0x1ba>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004422:	e036      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800442a:	e032      	b.n	8004492 <UART_SetConfig+0x1ba>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a6a      	ldr	r2, [pc, #424]	; (80045dc <UART_SetConfig+0x304>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d12a      	bne.n	800448c <UART_SetConfig+0x1b4>
 8004436:	4b6b      	ldr	r3, [pc, #428]	; (80045e4 <UART_SetConfig+0x30c>)
 8004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004440:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004444:	d01a      	beq.n	800447c <UART_SetConfig+0x1a4>
 8004446:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800444a:	d81b      	bhi.n	8004484 <UART_SetConfig+0x1ac>
 800444c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004450:	d00c      	beq.n	800446c <UART_SetConfig+0x194>
 8004452:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004456:	d815      	bhi.n	8004484 <UART_SetConfig+0x1ac>
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <UART_SetConfig+0x18c>
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d008      	beq.n	8004474 <UART_SetConfig+0x19c>
 8004462:	e00f      	b.n	8004484 <UART_SetConfig+0x1ac>
 8004464:	2300      	movs	r3, #0
 8004466:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446a:	e012      	b.n	8004492 <UART_SetConfig+0x1ba>
 800446c:	2302      	movs	r3, #2
 800446e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004472:	e00e      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004474:	2304      	movs	r3, #4
 8004476:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800447a:	e00a      	b.n	8004492 <UART_SetConfig+0x1ba>
 800447c:	2308      	movs	r3, #8
 800447e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004482:	e006      	b.n	8004492 <UART_SetConfig+0x1ba>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800448a:	e002      	b.n	8004492 <UART_SetConfig+0x1ba>
 800448c:	2310      	movs	r3, #16
 800448e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a51      	ldr	r2, [pc, #324]	; (80045dc <UART_SetConfig+0x304>)
 8004498:	4293      	cmp	r3, r2
 800449a:	d17a      	bne.n	8004592 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800449c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	d824      	bhi.n	80044ee <UART_SetConfig+0x216>
 80044a4:	a201      	add	r2, pc, #4	; (adr r2, 80044ac <UART_SetConfig+0x1d4>)
 80044a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044aa:	bf00      	nop
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044ef 	.word	0x080044ef
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044ef 	.word	0x080044ef
 80044bc:	080044df 	.word	0x080044df
 80044c0:	080044ef 	.word	0x080044ef
 80044c4:	080044ef 	.word	0x080044ef
 80044c8:	080044ef 	.word	0x080044ef
 80044cc:	080044e7 	.word	0x080044e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044d0:	f7ff faa6 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80044d4:	61f8      	str	r0, [r7, #28]
        break;
 80044d6:	e010      	b.n	80044fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d8:	4b44      	ldr	r3, [pc, #272]	; (80045ec <UART_SetConfig+0x314>)
 80044da:	61fb      	str	r3, [r7, #28]
        break;
 80044dc:	e00d      	b.n	80044fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044de:	f7ff fa07 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80044e2:	61f8      	str	r0, [r7, #28]
        break;
 80044e4:	e009      	b.n	80044fa <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044ea:	61fb      	str	r3, [r7, #28]
        break;
 80044ec:	e005      	b.n	80044fa <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80044ee:	2300      	movs	r3, #0
 80044f0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	f000 8107 	beq.w	8004710 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	685a      	ldr	r2, [r3, #4]
 8004506:	4613      	mov	r3, r2
 8004508:	005b      	lsls	r3, r3, #1
 800450a:	4413      	add	r3, r2
 800450c:	69fa      	ldr	r2, [r7, #28]
 800450e:	429a      	cmp	r2, r3
 8004510:	d305      	bcc.n	800451e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004518:	69fa      	ldr	r2, [r7, #28]
 800451a:	429a      	cmp	r2, r3
 800451c:	d903      	bls.n	8004526 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004524:	e0f4      	b.n	8004710 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	2200      	movs	r2, #0
 800452a:	461c      	mov	r4, r3
 800452c:	4615      	mov	r5, r2
 800452e:	f04f 0200 	mov.w	r2, #0
 8004532:	f04f 0300 	mov.w	r3, #0
 8004536:	022b      	lsls	r3, r5, #8
 8004538:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800453c:	0222      	lsls	r2, r4, #8
 800453e:	68f9      	ldr	r1, [r7, #12]
 8004540:	6849      	ldr	r1, [r1, #4]
 8004542:	0849      	lsrs	r1, r1, #1
 8004544:	2000      	movs	r0, #0
 8004546:	4688      	mov	r8, r1
 8004548:	4681      	mov	r9, r0
 800454a:	eb12 0a08 	adds.w	sl, r2, r8
 800454e:	eb43 0b09 	adc.w	fp, r3, r9
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	603b      	str	r3, [r7, #0]
 800455a:	607a      	str	r2, [r7, #4]
 800455c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004560:	4650      	mov	r0, sl
 8004562:	4659      	mov	r1, fp
 8004564:	f7fb fe8c 	bl	8000280 <__aeabi_uldivmod>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	4613      	mov	r3, r2
 800456e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004570:	69bb      	ldr	r3, [r7, #24]
 8004572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004576:	d308      	bcc.n	800458a <UART_SetConfig+0x2b2>
 8004578:	69bb      	ldr	r3, [r7, #24]
 800457a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800457e:	d204      	bcs.n	800458a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	69ba      	ldr	r2, [r7, #24]
 8004586:	60da      	str	r2, [r3, #12]
 8004588:	e0c2      	b.n	8004710 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004590:	e0be      	b.n	8004710 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	69db      	ldr	r3, [r3, #28]
 8004596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800459a:	d16a      	bne.n	8004672 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800459c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80045a0:	2b08      	cmp	r3, #8
 80045a2:	d834      	bhi.n	800460e <UART_SetConfig+0x336>
 80045a4:	a201      	add	r2, pc, #4	; (adr r2, 80045ac <UART_SetConfig+0x2d4>)
 80045a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045aa:	bf00      	nop
 80045ac:	080045d1 	.word	0x080045d1
 80045b0:	080045f1 	.word	0x080045f1
 80045b4:	080045f9 	.word	0x080045f9
 80045b8:	0800460f 	.word	0x0800460f
 80045bc:	080045ff 	.word	0x080045ff
 80045c0:	0800460f 	.word	0x0800460f
 80045c4:	0800460f 	.word	0x0800460f
 80045c8:	0800460f 	.word	0x0800460f
 80045cc:	08004607 	.word	0x08004607
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045d0:	f7ff fa26 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80045d4:	61f8      	str	r0, [r7, #28]
        break;
 80045d6:	e020      	b.n	800461a <UART_SetConfig+0x342>
 80045d8:	efff69f3 	.word	0xefff69f3
 80045dc:	40008000 	.word	0x40008000
 80045e0:	40013800 	.word	0x40013800
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40004400 	.word	0x40004400
 80045ec:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045f0:	f7ff fa2c 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80045f4:	61f8      	str	r0, [r7, #28]
        break;
 80045f6:	e010      	b.n	800461a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045f8:	4b4c      	ldr	r3, [pc, #304]	; (800472c <UART_SetConfig+0x454>)
 80045fa:	61fb      	str	r3, [r7, #28]
        break;
 80045fc:	e00d      	b.n	800461a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045fe:	f7ff f977 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 8004602:	61f8      	str	r0, [r7, #28]
        break;
 8004604:	e009      	b.n	800461a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004606:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800460a:	61fb      	str	r3, [r7, #28]
        break;
 800460c:	e005      	b.n	800461a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800460e:	2300      	movs	r3, #0
 8004610:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004612:	2301      	movs	r3, #1
 8004614:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004618:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d077      	beq.n	8004710 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	005a      	lsls	r2, r3, #1
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	085b      	lsrs	r3, r3, #1
 800462a:	441a      	add	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	fbb2 f3f3 	udiv	r3, r2, r3
 8004634:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	2b0f      	cmp	r3, #15
 800463a:	d916      	bls.n	800466a <UART_SetConfig+0x392>
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d212      	bcs.n	800466a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	b29b      	uxth	r3, r3
 8004648:	f023 030f 	bic.w	r3, r3, #15
 800464c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	085b      	lsrs	r3, r3, #1
 8004652:	b29b      	uxth	r3, r3
 8004654:	f003 0307 	and.w	r3, r3, #7
 8004658:	b29a      	uxth	r2, r3
 800465a:	8afb      	ldrh	r3, [r7, #22]
 800465c:	4313      	orrs	r3, r2
 800465e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	8afa      	ldrh	r2, [r7, #22]
 8004666:	60da      	str	r2, [r3, #12]
 8004668:	e052      	b.n	8004710 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004670:	e04e      	b.n	8004710 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004672:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004676:	2b08      	cmp	r3, #8
 8004678:	d827      	bhi.n	80046ca <UART_SetConfig+0x3f2>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x3a8>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	080046a5 	.word	0x080046a5
 8004684:	080046ad 	.word	0x080046ad
 8004688:	080046b5 	.word	0x080046b5
 800468c:	080046cb 	.word	0x080046cb
 8004690:	080046bb 	.word	0x080046bb
 8004694:	080046cb 	.word	0x080046cb
 8004698:	080046cb 	.word	0x080046cb
 800469c:	080046cb 	.word	0x080046cb
 80046a0:	080046c3 	.word	0x080046c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046a4:	f7ff f9bc 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80046a8:	61f8      	str	r0, [r7, #28]
        break;
 80046aa:	e014      	b.n	80046d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046ac:	f7ff f9ce 	bl	8003a4c <HAL_RCC_GetPCLK2Freq>
 80046b0:	61f8      	str	r0, [r7, #28]
        break;
 80046b2:	e010      	b.n	80046d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046b4:	4b1d      	ldr	r3, [pc, #116]	; (800472c <UART_SetConfig+0x454>)
 80046b6:	61fb      	str	r3, [r7, #28]
        break;
 80046b8:	e00d      	b.n	80046d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046ba:	f7ff f919 	bl	80038f0 <HAL_RCC_GetSysClockFreq>
 80046be:	61f8      	str	r0, [r7, #28]
        break;
 80046c0:	e009      	b.n	80046d6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046c6:	61fb      	str	r3, [r7, #28]
        break;
 80046c8:	e005      	b.n	80046d6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80046ca:	2300      	movs	r3, #0
 80046cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80046d4:	bf00      	nop
    }

    if (pclk != 0U)
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d019      	beq.n	8004710 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	085a      	lsrs	r2, r3, #1
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d909      	bls.n	800470a <UART_SetConfig+0x432>
 80046f6:	69bb      	ldr	r3, [r7, #24]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d205      	bcs.n	800470a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fe:	69bb      	ldr	r3, [r7, #24]
 8004700:	b29a      	uxth	r2, r3
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e002      	b.n	8004710 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2200      	movs	r2, #0
 8004714:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800471c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004720:	4618      	mov	r0, r3
 8004722:	3728      	adds	r7, #40	; 0x28
 8004724:	46bd      	mov	sp, r7
 8004726:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800472a:	bf00      	nop
 800472c:	00f42400 	.word	0x00f42400

08004730 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	f003 0308 	and.w	r3, r3, #8
 8004740:	2b00      	cmp	r3, #0
 8004742:	d00a      	beq.n	800475a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	430a      	orrs	r2, r1
 800477a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	430a      	orrs	r2, r1
 800479c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	430a      	orrs	r2, r1
 80047be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	430a      	orrs	r2, r1
 80047e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e6:	f003 0320 	and.w	r3, r3, #32
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01a      	beq.n	8004846 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	430a      	orrs	r2, r1
 8004824:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800482a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800482e:	d10a      	bne.n	8004846 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00a      	beq.n	8004868 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	430a      	orrs	r2, r1
 8004866:	605a      	str	r2, [r3, #4]
  }
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b098      	sub	sp, #96	; 0x60
 8004878:	af02      	add	r7, sp, #8
 800487a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004884:	f7fc fb50 	bl	8000f28 <HAL_GetTick>
 8004888:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 0308 	and.w	r3, r3, #8
 8004894:	2b08      	cmp	r3, #8
 8004896:	d12e      	bne.n	80048f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004898:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800489c:	9300      	str	r3, [sp, #0]
 800489e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048a0:	2200      	movs	r2, #0
 80048a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 f88c 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d021      	beq.n	80048f6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ba:	e853 3f00 	ldrex	r3, [r3]
 80048be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048c6:	653b      	str	r3, [r7, #80]	; 0x50
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	461a      	mov	r2, r3
 80048ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d0:	647b      	str	r3, [r7, #68]	; 0x44
 80048d2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048d8:	e841 2300 	strex	r3, r2, [r1]
 80048dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d1e6      	bne.n	80048b2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e062      	b.n	80049bc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 0304 	and.w	r3, r3, #4
 8004900:	2b04      	cmp	r3, #4
 8004902:	d149      	bne.n	8004998 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004904:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004908:	9300      	str	r3, [sp, #0]
 800490a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800490c:	2200      	movs	r2, #0
 800490e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004912:	6878      	ldr	r0, [r7, #4]
 8004914:	f000 f856 	bl	80049c4 <UART_WaitOnFlagUntilTimeout>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d03c      	beq.n	8004998 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	623b      	str	r3, [r7, #32]
   return(result);
 800492c:	6a3b      	ldr	r3, [r7, #32]
 800492e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	461a      	mov	r2, r3
 800493a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800493c:	633b      	str	r3, [r7, #48]	; 0x30
 800493e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004942:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004944:	e841 2300 	strex	r3, r2, [r1]
 8004948:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	2b00      	cmp	r3, #0
 800494e:	d1e6      	bne.n	800491e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	3308      	adds	r3, #8
 8004956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	e853 3f00 	ldrex	r3, [r3]
 800495e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f023 0301 	bic.w	r3, r3, #1
 8004966:	64bb      	str	r3, [r7, #72]	; 0x48
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	3308      	adds	r3, #8
 800496e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004970:	61fa      	str	r2, [r7, #28]
 8004972:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004974:	69b9      	ldr	r1, [r7, #24]
 8004976:	69fa      	ldr	r2, [r7, #28]
 8004978:	e841 2300 	strex	r3, r2, [r1]
 800497c:	617b      	str	r3, [r7, #20]
   return(result);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d1e5      	bne.n	8004950 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004994:	2303      	movs	r3, #3
 8004996:	e011      	b.n	80049bc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2220      	movs	r2, #32
 800499c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3758      	adds	r7, #88	; 0x58
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b084      	sub	sp, #16
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	603b      	str	r3, [r7, #0]
 80049d0:	4613      	mov	r3, r2
 80049d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049d4:	e049      	b.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d045      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049de:	f7fc faa3 	bl	8000f28 <HAL_GetTick>
 80049e2:	4602      	mov	r2, r0
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	1ad3      	subs	r3, r2, r3
 80049e8:	69ba      	ldr	r2, [r7, #24]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d302      	bcc.n	80049f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d101      	bne.n	80049f8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e048      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0304 	and.w	r3, r3, #4
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d031      	beq.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	f003 0308 	and.w	r3, r3, #8
 8004a10:	2b08      	cmp	r3, #8
 8004a12:	d110      	bne.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2208      	movs	r2, #8
 8004a1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a1c:	68f8      	ldr	r0, [r7, #12]
 8004a1e:	f000 f838 	bl	8004a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2208      	movs	r2, #8
 8004a26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e029      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69db      	ldr	r3, [r3, #28]
 8004a3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a44:	d111      	bne.n	8004a6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 f81e 	bl	8004a92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	2220      	movs	r2, #32
 8004a5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2200      	movs	r2, #0
 8004a62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004a66:	2303      	movs	r3, #3
 8004a68:	e00f      	b.n	8004a8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	69da      	ldr	r2, [r3, #28]
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	4013      	ands	r3, r2
 8004a74:	68ba      	ldr	r2, [r7, #8]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	bf0c      	ite	eq
 8004a7a:	2301      	moveq	r3, #1
 8004a7c:	2300      	movne	r3, #0
 8004a7e:	b2db      	uxtb	r3, r3
 8004a80:	461a      	mov	r2, r3
 8004a82:	79fb      	ldrb	r3, [r7, #7]
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d0a6      	beq.n	80049d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a92:	b480      	push	{r7}
 8004a94:	b095      	sub	sp, #84	; 0x54
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	e853 3f00 	ldrex	r3, [r3]
 8004aa6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004aae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ab8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004abc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004abe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ac0:	e841 2300 	strex	r3, r2, [r1]
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e6      	bne.n	8004a9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	3308      	adds	r3, #8
 8004ad2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	e853 3f00 	ldrex	r3, [r3]
 8004ada:	61fb      	str	r3, [r7, #28]
   return(result);
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	f023 0301 	bic.w	r3, r3, #1
 8004ae2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	3308      	adds	r3, #8
 8004aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004aec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004aee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004af0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004af2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004af4:	e841 2300 	strex	r3, r2, [r1]
 8004af8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d1e5      	bne.n	8004acc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d118      	bne.n	8004b3a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	60bb      	str	r3, [r7, #8]
   return(result);
 8004b16:	68bb      	ldr	r3, [r7, #8]
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	647b      	str	r3, [r7, #68]	; 0x44
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b26:	61bb      	str	r3, [r7, #24]
 8004b28:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	6979      	ldr	r1, [r7, #20]
 8004b2c:	69ba      	ldr	r2, [r7, #24]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	613b      	str	r3, [r7, #16]
   return(result);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004b4e:	bf00      	nop
 8004b50:	3754      	adds	r7, #84	; 0x54
 8004b52:	46bd      	mov	sp, r7
 8004b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b58:	4770      	bx	lr
	...

08004b5c <siprintf>:
 8004b5c:	b40e      	push	{r1, r2, r3}
 8004b5e:	b500      	push	{lr}
 8004b60:	b09c      	sub	sp, #112	; 0x70
 8004b62:	ab1d      	add	r3, sp, #116	; 0x74
 8004b64:	9002      	str	r0, [sp, #8]
 8004b66:	9006      	str	r0, [sp, #24]
 8004b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b6c:	4809      	ldr	r0, [pc, #36]	; (8004b94 <siprintf+0x38>)
 8004b6e:	9107      	str	r1, [sp, #28]
 8004b70:	9104      	str	r1, [sp, #16]
 8004b72:	4909      	ldr	r1, [pc, #36]	; (8004b98 <siprintf+0x3c>)
 8004b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b78:	9105      	str	r1, [sp, #20]
 8004b7a:	6800      	ldr	r0, [r0, #0]
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	a902      	add	r1, sp, #8
 8004b80:	f000 f992 	bl	8004ea8 <_svfiprintf_r>
 8004b84:	9b02      	ldr	r3, [sp, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	701a      	strb	r2, [r3, #0]
 8004b8a:	b01c      	add	sp, #112	; 0x70
 8004b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b90:	b003      	add	sp, #12
 8004b92:	4770      	bx	lr
 8004b94:	20000058 	.word	0x20000058
 8004b98:	ffff0208 	.word	0xffff0208

08004b9c <memset>:
 8004b9c:	4402      	add	r2, r0
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <memset+0xa>
 8004ba4:	4770      	bx	lr
 8004ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8004baa:	e7f9      	b.n	8004ba0 <memset+0x4>

08004bac <__errno>:
 8004bac:	4b01      	ldr	r3, [pc, #4]	; (8004bb4 <__errno+0x8>)
 8004bae:	6818      	ldr	r0, [r3, #0]
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	20000058 	.word	0x20000058

08004bb8 <__libc_init_array>:
 8004bb8:	b570      	push	{r4, r5, r6, lr}
 8004bba:	4d0d      	ldr	r5, [pc, #52]	; (8004bf0 <__libc_init_array+0x38>)
 8004bbc:	4c0d      	ldr	r4, [pc, #52]	; (8004bf4 <__libc_init_array+0x3c>)
 8004bbe:	1b64      	subs	r4, r4, r5
 8004bc0:	10a4      	asrs	r4, r4, #2
 8004bc2:	2600      	movs	r6, #0
 8004bc4:	42a6      	cmp	r6, r4
 8004bc6:	d109      	bne.n	8004bdc <__libc_init_array+0x24>
 8004bc8:	4d0b      	ldr	r5, [pc, #44]	; (8004bf8 <__libc_init_array+0x40>)
 8004bca:	4c0c      	ldr	r4, [pc, #48]	; (8004bfc <__libc_init_array+0x44>)
 8004bcc:	f000 fc6a 	bl	80054a4 <_init>
 8004bd0:	1b64      	subs	r4, r4, r5
 8004bd2:	10a4      	asrs	r4, r4, #2
 8004bd4:	2600      	movs	r6, #0
 8004bd6:	42a6      	cmp	r6, r4
 8004bd8:	d105      	bne.n	8004be6 <__libc_init_array+0x2e>
 8004bda:	bd70      	pop	{r4, r5, r6, pc}
 8004bdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004be0:	4798      	blx	r3
 8004be2:	3601      	adds	r6, #1
 8004be4:	e7ee      	b.n	8004bc4 <__libc_init_array+0xc>
 8004be6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bea:	4798      	blx	r3
 8004bec:	3601      	adds	r6, #1
 8004bee:	e7f2      	b.n	8004bd6 <__libc_init_array+0x1e>
 8004bf0:	0800559c 	.word	0x0800559c
 8004bf4:	0800559c 	.word	0x0800559c
 8004bf8:	0800559c 	.word	0x0800559c
 8004bfc:	080055a0 	.word	0x080055a0

08004c00 <__retarget_lock_acquire_recursive>:
 8004c00:	4770      	bx	lr

08004c02 <__retarget_lock_release_recursive>:
 8004c02:	4770      	bx	lr

08004c04 <_free_r>:
 8004c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004c06:	2900      	cmp	r1, #0
 8004c08:	d044      	beq.n	8004c94 <_free_r+0x90>
 8004c0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c0e:	9001      	str	r0, [sp, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f1a1 0404 	sub.w	r4, r1, #4
 8004c16:	bfb8      	it	lt
 8004c18:	18e4      	addlt	r4, r4, r3
 8004c1a:	f000 f8df 	bl	8004ddc <__malloc_lock>
 8004c1e:	4a1e      	ldr	r2, [pc, #120]	; (8004c98 <_free_r+0x94>)
 8004c20:	9801      	ldr	r0, [sp, #4]
 8004c22:	6813      	ldr	r3, [r2, #0]
 8004c24:	b933      	cbnz	r3, 8004c34 <_free_r+0x30>
 8004c26:	6063      	str	r3, [r4, #4]
 8004c28:	6014      	str	r4, [r2, #0]
 8004c2a:	b003      	add	sp, #12
 8004c2c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c30:	f000 b8da 	b.w	8004de8 <__malloc_unlock>
 8004c34:	42a3      	cmp	r3, r4
 8004c36:	d908      	bls.n	8004c4a <_free_r+0x46>
 8004c38:	6825      	ldr	r5, [r4, #0]
 8004c3a:	1961      	adds	r1, r4, r5
 8004c3c:	428b      	cmp	r3, r1
 8004c3e:	bf01      	itttt	eq
 8004c40:	6819      	ldreq	r1, [r3, #0]
 8004c42:	685b      	ldreq	r3, [r3, #4]
 8004c44:	1949      	addeq	r1, r1, r5
 8004c46:	6021      	streq	r1, [r4, #0]
 8004c48:	e7ed      	b.n	8004c26 <_free_r+0x22>
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	b10b      	cbz	r3, 8004c54 <_free_r+0x50>
 8004c50:	42a3      	cmp	r3, r4
 8004c52:	d9fa      	bls.n	8004c4a <_free_r+0x46>
 8004c54:	6811      	ldr	r1, [r2, #0]
 8004c56:	1855      	adds	r5, r2, r1
 8004c58:	42a5      	cmp	r5, r4
 8004c5a:	d10b      	bne.n	8004c74 <_free_r+0x70>
 8004c5c:	6824      	ldr	r4, [r4, #0]
 8004c5e:	4421      	add	r1, r4
 8004c60:	1854      	adds	r4, r2, r1
 8004c62:	42a3      	cmp	r3, r4
 8004c64:	6011      	str	r1, [r2, #0]
 8004c66:	d1e0      	bne.n	8004c2a <_free_r+0x26>
 8004c68:	681c      	ldr	r4, [r3, #0]
 8004c6a:	685b      	ldr	r3, [r3, #4]
 8004c6c:	6053      	str	r3, [r2, #4]
 8004c6e:	440c      	add	r4, r1
 8004c70:	6014      	str	r4, [r2, #0]
 8004c72:	e7da      	b.n	8004c2a <_free_r+0x26>
 8004c74:	d902      	bls.n	8004c7c <_free_r+0x78>
 8004c76:	230c      	movs	r3, #12
 8004c78:	6003      	str	r3, [r0, #0]
 8004c7a:	e7d6      	b.n	8004c2a <_free_r+0x26>
 8004c7c:	6825      	ldr	r5, [r4, #0]
 8004c7e:	1961      	adds	r1, r4, r5
 8004c80:	428b      	cmp	r3, r1
 8004c82:	bf04      	itt	eq
 8004c84:	6819      	ldreq	r1, [r3, #0]
 8004c86:	685b      	ldreq	r3, [r3, #4]
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	bf04      	itt	eq
 8004c8c:	1949      	addeq	r1, r1, r5
 8004c8e:	6021      	streq	r1, [r4, #0]
 8004c90:	6054      	str	r4, [r2, #4]
 8004c92:	e7ca      	b.n	8004c2a <_free_r+0x26>
 8004c94:	b003      	add	sp, #12
 8004c96:	bd30      	pop	{r4, r5, pc}
 8004c98:	2000031c 	.word	0x2000031c

08004c9c <sbrk_aligned>:
 8004c9c:	b570      	push	{r4, r5, r6, lr}
 8004c9e:	4e0e      	ldr	r6, [pc, #56]	; (8004cd8 <sbrk_aligned+0x3c>)
 8004ca0:	460c      	mov	r4, r1
 8004ca2:	6831      	ldr	r1, [r6, #0]
 8004ca4:	4605      	mov	r5, r0
 8004ca6:	b911      	cbnz	r1, 8004cae <sbrk_aligned+0x12>
 8004ca8:	f000 fba6 	bl	80053f8 <_sbrk_r>
 8004cac:	6030      	str	r0, [r6, #0]
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4628      	mov	r0, r5
 8004cb2:	f000 fba1 	bl	80053f8 <_sbrk_r>
 8004cb6:	1c43      	adds	r3, r0, #1
 8004cb8:	d00a      	beq.n	8004cd0 <sbrk_aligned+0x34>
 8004cba:	1cc4      	adds	r4, r0, #3
 8004cbc:	f024 0403 	bic.w	r4, r4, #3
 8004cc0:	42a0      	cmp	r0, r4
 8004cc2:	d007      	beq.n	8004cd4 <sbrk_aligned+0x38>
 8004cc4:	1a21      	subs	r1, r4, r0
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	f000 fb96 	bl	80053f8 <_sbrk_r>
 8004ccc:	3001      	adds	r0, #1
 8004cce:	d101      	bne.n	8004cd4 <sbrk_aligned+0x38>
 8004cd0:	f04f 34ff 	mov.w	r4, #4294967295
 8004cd4:	4620      	mov	r0, r4
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	20000320 	.word	0x20000320

08004cdc <_malloc_r>:
 8004cdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ce0:	1ccd      	adds	r5, r1, #3
 8004ce2:	f025 0503 	bic.w	r5, r5, #3
 8004ce6:	3508      	adds	r5, #8
 8004ce8:	2d0c      	cmp	r5, #12
 8004cea:	bf38      	it	cc
 8004cec:	250c      	movcc	r5, #12
 8004cee:	2d00      	cmp	r5, #0
 8004cf0:	4607      	mov	r7, r0
 8004cf2:	db01      	blt.n	8004cf8 <_malloc_r+0x1c>
 8004cf4:	42a9      	cmp	r1, r5
 8004cf6:	d905      	bls.n	8004d04 <_malloc_r+0x28>
 8004cf8:	230c      	movs	r3, #12
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	4630      	mov	r0, r6
 8004d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d04:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004dd8 <_malloc_r+0xfc>
 8004d08:	f000 f868 	bl	8004ddc <__malloc_lock>
 8004d0c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d10:	461c      	mov	r4, r3
 8004d12:	bb5c      	cbnz	r4, 8004d6c <_malloc_r+0x90>
 8004d14:	4629      	mov	r1, r5
 8004d16:	4638      	mov	r0, r7
 8004d18:	f7ff ffc0 	bl	8004c9c <sbrk_aligned>
 8004d1c:	1c43      	adds	r3, r0, #1
 8004d1e:	4604      	mov	r4, r0
 8004d20:	d155      	bne.n	8004dce <_malloc_r+0xf2>
 8004d22:	f8d8 4000 	ldr.w	r4, [r8]
 8004d26:	4626      	mov	r6, r4
 8004d28:	2e00      	cmp	r6, #0
 8004d2a:	d145      	bne.n	8004db8 <_malloc_r+0xdc>
 8004d2c:	2c00      	cmp	r4, #0
 8004d2e:	d048      	beq.n	8004dc2 <_malloc_r+0xe6>
 8004d30:	6823      	ldr	r3, [r4, #0]
 8004d32:	4631      	mov	r1, r6
 8004d34:	4638      	mov	r0, r7
 8004d36:	eb04 0903 	add.w	r9, r4, r3
 8004d3a:	f000 fb5d 	bl	80053f8 <_sbrk_r>
 8004d3e:	4581      	cmp	r9, r0
 8004d40:	d13f      	bne.n	8004dc2 <_malloc_r+0xe6>
 8004d42:	6821      	ldr	r1, [r4, #0]
 8004d44:	1a6d      	subs	r5, r5, r1
 8004d46:	4629      	mov	r1, r5
 8004d48:	4638      	mov	r0, r7
 8004d4a:	f7ff ffa7 	bl	8004c9c <sbrk_aligned>
 8004d4e:	3001      	adds	r0, #1
 8004d50:	d037      	beq.n	8004dc2 <_malloc_r+0xe6>
 8004d52:	6823      	ldr	r3, [r4, #0]
 8004d54:	442b      	add	r3, r5
 8004d56:	6023      	str	r3, [r4, #0]
 8004d58:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d038      	beq.n	8004dd2 <_malloc_r+0xf6>
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	42a2      	cmp	r2, r4
 8004d64:	d12b      	bne.n	8004dbe <_malloc_r+0xe2>
 8004d66:	2200      	movs	r2, #0
 8004d68:	605a      	str	r2, [r3, #4]
 8004d6a:	e00f      	b.n	8004d8c <_malloc_r+0xb0>
 8004d6c:	6822      	ldr	r2, [r4, #0]
 8004d6e:	1b52      	subs	r2, r2, r5
 8004d70:	d41f      	bmi.n	8004db2 <_malloc_r+0xd6>
 8004d72:	2a0b      	cmp	r2, #11
 8004d74:	d917      	bls.n	8004da6 <_malloc_r+0xca>
 8004d76:	1961      	adds	r1, r4, r5
 8004d78:	42a3      	cmp	r3, r4
 8004d7a:	6025      	str	r5, [r4, #0]
 8004d7c:	bf18      	it	ne
 8004d7e:	6059      	strne	r1, [r3, #4]
 8004d80:	6863      	ldr	r3, [r4, #4]
 8004d82:	bf08      	it	eq
 8004d84:	f8c8 1000 	streq.w	r1, [r8]
 8004d88:	5162      	str	r2, [r4, r5]
 8004d8a:	604b      	str	r3, [r1, #4]
 8004d8c:	4638      	mov	r0, r7
 8004d8e:	f104 060b 	add.w	r6, r4, #11
 8004d92:	f000 f829 	bl	8004de8 <__malloc_unlock>
 8004d96:	f026 0607 	bic.w	r6, r6, #7
 8004d9a:	1d23      	adds	r3, r4, #4
 8004d9c:	1af2      	subs	r2, r6, r3
 8004d9e:	d0ae      	beq.n	8004cfe <_malloc_r+0x22>
 8004da0:	1b9b      	subs	r3, r3, r6
 8004da2:	50a3      	str	r3, [r4, r2]
 8004da4:	e7ab      	b.n	8004cfe <_malloc_r+0x22>
 8004da6:	42a3      	cmp	r3, r4
 8004da8:	6862      	ldr	r2, [r4, #4]
 8004daa:	d1dd      	bne.n	8004d68 <_malloc_r+0x8c>
 8004dac:	f8c8 2000 	str.w	r2, [r8]
 8004db0:	e7ec      	b.n	8004d8c <_malloc_r+0xb0>
 8004db2:	4623      	mov	r3, r4
 8004db4:	6864      	ldr	r4, [r4, #4]
 8004db6:	e7ac      	b.n	8004d12 <_malloc_r+0x36>
 8004db8:	4634      	mov	r4, r6
 8004dba:	6876      	ldr	r6, [r6, #4]
 8004dbc:	e7b4      	b.n	8004d28 <_malloc_r+0x4c>
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	e7cc      	b.n	8004d5c <_malloc_r+0x80>
 8004dc2:	230c      	movs	r3, #12
 8004dc4:	603b      	str	r3, [r7, #0]
 8004dc6:	4638      	mov	r0, r7
 8004dc8:	f000 f80e 	bl	8004de8 <__malloc_unlock>
 8004dcc:	e797      	b.n	8004cfe <_malloc_r+0x22>
 8004dce:	6025      	str	r5, [r4, #0]
 8004dd0:	e7dc      	b.n	8004d8c <_malloc_r+0xb0>
 8004dd2:	605b      	str	r3, [r3, #4]
 8004dd4:	deff      	udf	#255	; 0xff
 8004dd6:	bf00      	nop
 8004dd8:	2000031c 	.word	0x2000031c

08004ddc <__malloc_lock>:
 8004ddc:	4801      	ldr	r0, [pc, #4]	; (8004de4 <__malloc_lock+0x8>)
 8004dde:	f7ff bf0f 	b.w	8004c00 <__retarget_lock_acquire_recursive>
 8004de2:	bf00      	nop
 8004de4:	20000318 	.word	0x20000318

08004de8 <__malloc_unlock>:
 8004de8:	4801      	ldr	r0, [pc, #4]	; (8004df0 <__malloc_unlock+0x8>)
 8004dea:	f7ff bf0a 	b.w	8004c02 <__retarget_lock_release_recursive>
 8004dee:	bf00      	nop
 8004df0:	20000318 	.word	0x20000318

08004df4 <__ssputs_r>:
 8004df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	688e      	ldr	r6, [r1, #8]
 8004dfa:	461f      	mov	r7, r3
 8004dfc:	42be      	cmp	r6, r7
 8004dfe:	680b      	ldr	r3, [r1, #0]
 8004e00:	4682      	mov	sl, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	4690      	mov	r8, r2
 8004e06:	d82c      	bhi.n	8004e62 <__ssputs_r+0x6e>
 8004e08:	898a      	ldrh	r2, [r1, #12]
 8004e0a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004e0e:	d026      	beq.n	8004e5e <__ssputs_r+0x6a>
 8004e10:	6965      	ldr	r5, [r4, #20]
 8004e12:	6909      	ldr	r1, [r1, #16]
 8004e14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004e18:	eba3 0901 	sub.w	r9, r3, r1
 8004e1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004e20:	1c7b      	adds	r3, r7, #1
 8004e22:	444b      	add	r3, r9
 8004e24:	106d      	asrs	r5, r5, #1
 8004e26:	429d      	cmp	r5, r3
 8004e28:	bf38      	it	cc
 8004e2a:	461d      	movcc	r5, r3
 8004e2c:	0553      	lsls	r3, r2, #21
 8004e2e:	d527      	bpl.n	8004e80 <__ssputs_r+0x8c>
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7ff ff53 	bl	8004cdc <_malloc_r>
 8004e36:	4606      	mov	r6, r0
 8004e38:	b360      	cbz	r0, 8004e94 <__ssputs_r+0xa0>
 8004e3a:	6921      	ldr	r1, [r4, #16]
 8004e3c:	464a      	mov	r2, r9
 8004e3e:	f000 faeb 	bl	8005418 <memcpy>
 8004e42:	89a3      	ldrh	r3, [r4, #12]
 8004e44:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004e48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e4c:	81a3      	strh	r3, [r4, #12]
 8004e4e:	6126      	str	r6, [r4, #16]
 8004e50:	6165      	str	r5, [r4, #20]
 8004e52:	444e      	add	r6, r9
 8004e54:	eba5 0509 	sub.w	r5, r5, r9
 8004e58:	6026      	str	r6, [r4, #0]
 8004e5a:	60a5      	str	r5, [r4, #8]
 8004e5c:	463e      	mov	r6, r7
 8004e5e:	42be      	cmp	r6, r7
 8004e60:	d900      	bls.n	8004e64 <__ssputs_r+0x70>
 8004e62:	463e      	mov	r6, r7
 8004e64:	6820      	ldr	r0, [r4, #0]
 8004e66:	4632      	mov	r2, r6
 8004e68:	4641      	mov	r1, r8
 8004e6a:	f000 faab 	bl	80053c4 <memmove>
 8004e6e:	68a3      	ldr	r3, [r4, #8]
 8004e70:	1b9b      	subs	r3, r3, r6
 8004e72:	60a3      	str	r3, [r4, #8]
 8004e74:	6823      	ldr	r3, [r4, #0]
 8004e76:	4433      	add	r3, r6
 8004e78:	6023      	str	r3, [r4, #0]
 8004e7a:	2000      	movs	r0, #0
 8004e7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e80:	462a      	mov	r2, r5
 8004e82:	f000 fad7 	bl	8005434 <_realloc_r>
 8004e86:	4606      	mov	r6, r0
 8004e88:	2800      	cmp	r0, #0
 8004e8a:	d1e0      	bne.n	8004e4e <__ssputs_r+0x5a>
 8004e8c:	6921      	ldr	r1, [r4, #16]
 8004e8e:	4650      	mov	r0, sl
 8004e90:	f7ff feb8 	bl	8004c04 <_free_r>
 8004e94:	230c      	movs	r3, #12
 8004e96:	f8ca 3000 	str.w	r3, [sl]
 8004e9a:	89a3      	ldrh	r3, [r4, #12]
 8004e9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	e7e9      	b.n	8004e7c <__ssputs_r+0x88>

08004ea8 <_svfiprintf_r>:
 8004ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004eac:	4698      	mov	r8, r3
 8004eae:	898b      	ldrh	r3, [r1, #12]
 8004eb0:	061b      	lsls	r3, r3, #24
 8004eb2:	b09d      	sub	sp, #116	; 0x74
 8004eb4:	4607      	mov	r7, r0
 8004eb6:	460d      	mov	r5, r1
 8004eb8:	4614      	mov	r4, r2
 8004eba:	d50e      	bpl.n	8004eda <_svfiprintf_r+0x32>
 8004ebc:	690b      	ldr	r3, [r1, #16]
 8004ebe:	b963      	cbnz	r3, 8004eda <_svfiprintf_r+0x32>
 8004ec0:	2140      	movs	r1, #64	; 0x40
 8004ec2:	f7ff ff0b 	bl	8004cdc <_malloc_r>
 8004ec6:	6028      	str	r0, [r5, #0]
 8004ec8:	6128      	str	r0, [r5, #16]
 8004eca:	b920      	cbnz	r0, 8004ed6 <_svfiprintf_r+0x2e>
 8004ecc:	230c      	movs	r3, #12
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ed4:	e0d0      	b.n	8005078 <_svfiprintf_r+0x1d0>
 8004ed6:	2340      	movs	r3, #64	; 0x40
 8004ed8:	616b      	str	r3, [r5, #20]
 8004eda:	2300      	movs	r3, #0
 8004edc:	9309      	str	r3, [sp, #36]	; 0x24
 8004ede:	2320      	movs	r3, #32
 8004ee0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004ee4:	f8cd 800c 	str.w	r8, [sp, #12]
 8004ee8:	2330      	movs	r3, #48	; 0x30
 8004eea:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005090 <_svfiprintf_r+0x1e8>
 8004eee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004ef2:	f04f 0901 	mov.w	r9, #1
 8004ef6:	4623      	mov	r3, r4
 8004ef8:	469a      	mov	sl, r3
 8004efa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004efe:	b10a      	cbz	r2, 8004f04 <_svfiprintf_r+0x5c>
 8004f00:	2a25      	cmp	r2, #37	; 0x25
 8004f02:	d1f9      	bne.n	8004ef8 <_svfiprintf_r+0x50>
 8004f04:	ebba 0b04 	subs.w	fp, sl, r4
 8004f08:	d00b      	beq.n	8004f22 <_svfiprintf_r+0x7a>
 8004f0a:	465b      	mov	r3, fp
 8004f0c:	4622      	mov	r2, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	4638      	mov	r0, r7
 8004f12:	f7ff ff6f 	bl	8004df4 <__ssputs_r>
 8004f16:	3001      	adds	r0, #1
 8004f18:	f000 80a9 	beq.w	800506e <_svfiprintf_r+0x1c6>
 8004f1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f1e:	445a      	add	r2, fp
 8004f20:	9209      	str	r2, [sp, #36]	; 0x24
 8004f22:	f89a 3000 	ldrb.w	r3, [sl]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 80a1 	beq.w	800506e <_svfiprintf_r+0x1c6>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f32:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004f36:	f10a 0a01 	add.w	sl, sl, #1
 8004f3a:	9304      	str	r3, [sp, #16]
 8004f3c:	9307      	str	r3, [sp, #28]
 8004f3e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004f42:	931a      	str	r3, [sp, #104]	; 0x68
 8004f44:	4654      	mov	r4, sl
 8004f46:	2205      	movs	r2, #5
 8004f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f4c:	4850      	ldr	r0, [pc, #320]	; (8005090 <_svfiprintf_r+0x1e8>)
 8004f4e:	f7fb f947 	bl	80001e0 <memchr>
 8004f52:	9a04      	ldr	r2, [sp, #16]
 8004f54:	b9d8      	cbnz	r0, 8004f8e <_svfiprintf_r+0xe6>
 8004f56:	06d0      	lsls	r0, r2, #27
 8004f58:	bf44      	itt	mi
 8004f5a:	2320      	movmi	r3, #32
 8004f5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f60:	0711      	lsls	r1, r2, #28
 8004f62:	bf44      	itt	mi
 8004f64:	232b      	movmi	r3, #43	; 0x2b
 8004f66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004f6a:	f89a 3000 	ldrb.w	r3, [sl]
 8004f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8004f70:	d015      	beq.n	8004f9e <_svfiprintf_r+0xf6>
 8004f72:	9a07      	ldr	r2, [sp, #28]
 8004f74:	4654      	mov	r4, sl
 8004f76:	2000      	movs	r0, #0
 8004f78:	f04f 0c0a 	mov.w	ip, #10
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f82:	3b30      	subs	r3, #48	; 0x30
 8004f84:	2b09      	cmp	r3, #9
 8004f86:	d94d      	bls.n	8005024 <_svfiprintf_r+0x17c>
 8004f88:	b1b0      	cbz	r0, 8004fb8 <_svfiprintf_r+0x110>
 8004f8a:	9207      	str	r2, [sp, #28]
 8004f8c:	e014      	b.n	8004fb8 <_svfiprintf_r+0x110>
 8004f8e:	eba0 0308 	sub.w	r3, r0, r8
 8004f92:	fa09 f303 	lsl.w	r3, r9, r3
 8004f96:	4313      	orrs	r3, r2
 8004f98:	9304      	str	r3, [sp, #16]
 8004f9a:	46a2      	mov	sl, r4
 8004f9c:	e7d2      	b.n	8004f44 <_svfiprintf_r+0x9c>
 8004f9e:	9b03      	ldr	r3, [sp, #12]
 8004fa0:	1d19      	adds	r1, r3, #4
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	9103      	str	r1, [sp, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	bfbb      	ittet	lt
 8004faa:	425b      	neglt	r3, r3
 8004fac:	f042 0202 	orrlt.w	r2, r2, #2
 8004fb0:	9307      	strge	r3, [sp, #28]
 8004fb2:	9307      	strlt	r3, [sp, #28]
 8004fb4:	bfb8      	it	lt
 8004fb6:	9204      	strlt	r2, [sp, #16]
 8004fb8:	7823      	ldrb	r3, [r4, #0]
 8004fba:	2b2e      	cmp	r3, #46	; 0x2e
 8004fbc:	d10c      	bne.n	8004fd8 <_svfiprintf_r+0x130>
 8004fbe:	7863      	ldrb	r3, [r4, #1]
 8004fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8004fc2:	d134      	bne.n	800502e <_svfiprintf_r+0x186>
 8004fc4:	9b03      	ldr	r3, [sp, #12]
 8004fc6:	1d1a      	adds	r2, r3, #4
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	9203      	str	r2, [sp, #12]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	bfb8      	it	lt
 8004fd0:	f04f 33ff 	movlt.w	r3, #4294967295
 8004fd4:	3402      	adds	r4, #2
 8004fd6:	9305      	str	r3, [sp, #20]
 8004fd8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80050a0 <_svfiprintf_r+0x1f8>
 8004fdc:	7821      	ldrb	r1, [r4, #0]
 8004fde:	2203      	movs	r2, #3
 8004fe0:	4650      	mov	r0, sl
 8004fe2:	f7fb f8fd 	bl	80001e0 <memchr>
 8004fe6:	b138      	cbz	r0, 8004ff8 <_svfiprintf_r+0x150>
 8004fe8:	9b04      	ldr	r3, [sp, #16]
 8004fea:	eba0 000a 	sub.w	r0, r0, sl
 8004fee:	2240      	movs	r2, #64	; 0x40
 8004ff0:	4082      	lsls	r2, r0
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	3401      	adds	r4, #1
 8004ff6:	9304      	str	r3, [sp, #16]
 8004ff8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ffc:	4825      	ldr	r0, [pc, #148]	; (8005094 <_svfiprintf_r+0x1ec>)
 8004ffe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005002:	2206      	movs	r2, #6
 8005004:	f7fb f8ec 	bl	80001e0 <memchr>
 8005008:	2800      	cmp	r0, #0
 800500a:	d038      	beq.n	800507e <_svfiprintf_r+0x1d6>
 800500c:	4b22      	ldr	r3, [pc, #136]	; (8005098 <_svfiprintf_r+0x1f0>)
 800500e:	bb1b      	cbnz	r3, 8005058 <_svfiprintf_r+0x1b0>
 8005010:	9b03      	ldr	r3, [sp, #12]
 8005012:	3307      	adds	r3, #7
 8005014:	f023 0307 	bic.w	r3, r3, #7
 8005018:	3308      	adds	r3, #8
 800501a:	9303      	str	r3, [sp, #12]
 800501c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501e:	4433      	add	r3, r6
 8005020:	9309      	str	r3, [sp, #36]	; 0x24
 8005022:	e768      	b.n	8004ef6 <_svfiprintf_r+0x4e>
 8005024:	fb0c 3202 	mla	r2, ip, r2, r3
 8005028:	460c      	mov	r4, r1
 800502a:	2001      	movs	r0, #1
 800502c:	e7a6      	b.n	8004f7c <_svfiprintf_r+0xd4>
 800502e:	2300      	movs	r3, #0
 8005030:	3401      	adds	r4, #1
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	4619      	mov	r1, r3
 8005036:	f04f 0c0a 	mov.w	ip, #10
 800503a:	4620      	mov	r0, r4
 800503c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005040:	3a30      	subs	r2, #48	; 0x30
 8005042:	2a09      	cmp	r2, #9
 8005044:	d903      	bls.n	800504e <_svfiprintf_r+0x1a6>
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0c6      	beq.n	8004fd8 <_svfiprintf_r+0x130>
 800504a:	9105      	str	r1, [sp, #20]
 800504c:	e7c4      	b.n	8004fd8 <_svfiprintf_r+0x130>
 800504e:	fb0c 2101 	mla	r1, ip, r1, r2
 8005052:	4604      	mov	r4, r0
 8005054:	2301      	movs	r3, #1
 8005056:	e7f0      	b.n	800503a <_svfiprintf_r+0x192>
 8005058:	ab03      	add	r3, sp, #12
 800505a:	9300      	str	r3, [sp, #0]
 800505c:	462a      	mov	r2, r5
 800505e:	4b0f      	ldr	r3, [pc, #60]	; (800509c <_svfiprintf_r+0x1f4>)
 8005060:	a904      	add	r1, sp, #16
 8005062:	4638      	mov	r0, r7
 8005064:	f3af 8000 	nop.w
 8005068:	1c42      	adds	r2, r0, #1
 800506a:	4606      	mov	r6, r0
 800506c:	d1d6      	bne.n	800501c <_svfiprintf_r+0x174>
 800506e:	89ab      	ldrh	r3, [r5, #12]
 8005070:	065b      	lsls	r3, r3, #25
 8005072:	f53f af2d 	bmi.w	8004ed0 <_svfiprintf_r+0x28>
 8005076:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005078:	b01d      	add	sp, #116	; 0x74
 800507a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800507e:	ab03      	add	r3, sp, #12
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	462a      	mov	r2, r5
 8005084:	4b05      	ldr	r3, [pc, #20]	; (800509c <_svfiprintf_r+0x1f4>)
 8005086:	a904      	add	r1, sp, #16
 8005088:	4638      	mov	r0, r7
 800508a:	f000 f879 	bl	8005180 <_printf_i>
 800508e:	e7eb      	b.n	8005068 <_svfiprintf_r+0x1c0>
 8005090:	08005560 	.word	0x08005560
 8005094:	0800556a 	.word	0x0800556a
 8005098:	00000000 	.word	0x00000000
 800509c:	08004df5 	.word	0x08004df5
 80050a0:	08005566 	.word	0x08005566

080050a4 <_printf_common>:
 80050a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050a8:	4616      	mov	r6, r2
 80050aa:	4699      	mov	r9, r3
 80050ac:	688a      	ldr	r2, [r1, #8]
 80050ae:	690b      	ldr	r3, [r1, #16]
 80050b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80050b4:	4293      	cmp	r3, r2
 80050b6:	bfb8      	it	lt
 80050b8:	4613      	movlt	r3, r2
 80050ba:	6033      	str	r3, [r6, #0]
 80050bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80050c0:	4607      	mov	r7, r0
 80050c2:	460c      	mov	r4, r1
 80050c4:	b10a      	cbz	r2, 80050ca <_printf_common+0x26>
 80050c6:	3301      	adds	r3, #1
 80050c8:	6033      	str	r3, [r6, #0]
 80050ca:	6823      	ldr	r3, [r4, #0]
 80050cc:	0699      	lsls	r1, r3, #26
 80050ce:	bf42      	ittt	mi
 80050d0:	6833      	ldrmi	r3, [r6, #0]
 80050d2:	3302      	addmi	r3, #2
 80050d4:	6033      	strmi	r3, [r6, #0]
 80050d6:	6825      	ldr	r5, [r4, #0]
 80050d8:	f015 0506 	ands.w	r5, r5, #6
 80050dc:	d106      	bne.n	80050ec <_printf_common+0x48>
 80050de:	f104 0a19 	add.w	sl, r4, #25
 80050e2:	68e3      	ldr	r3, [r4, #12]
 80050e4:	6832      	ldr	r2, [r6, #0]
 80050e6:	1a9b      	subs	r3, r3, r2
 80050e8:	42ab      	cmp	r3, r5
 80050ea:	dc26      	bgt.n	800513a <_printf_common+0x96>
 80050ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80050f0:	1e13      	subs	r3, r2, #0
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	bf18      	it	ne
 80050f6:	2301      	movne	r3, #1
 80050f8:	0692      	lsls	r2, r2, #26
 80050fa:	d42b      	bmi.n	8005154 <_printf_common+0xb0>
 80050fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005100:	4649      	mov	r1, r9
 8005102:	4638      	mov	r0, r7
 8005104:	47c0      	blx	r8
 8005106:	3001      	adds	r0, #1
 8005108:	d01e      	beq.n	8005148 <_printf_common+0xa4>
 800510a:	6823      	ldr	r3, [r4, #0]
 800510c:	6922      	ldr	r2, [r4, #16]
 800510e:	f003 0306 	and.w	r3, r3, #6
 8005112:	2b04      	cmp	r3, #4
 8005114:	bf02      	ittt	eq
 8005116:	68e5      	ldreq	r5, [r4, #12]
 8005118:	6833      	ldreq	r3, [r6, #0]
 800511a:	1aed      	subeq	r5, r5, r3
 800511c:	68a3      	ldr	r3, [r4, #8]
 800511e:	bf0c      	ite	eq
 8005120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005124:	2500      	movne	r5, #0
 8005126:	4293      	cmp	r3, r2
 8005128:	bfc4      	itt	gt
 800512a:	1a9b      	subgt	r3, r3, r2
 800512c:	18ed      	addgt	r5, r5, r3
 800512e:	2600      	movs	r6, #0
 8005130:	341a      	adds	r4, #26
 8005132:	42b5      	cmp	r5, r6
 8005134:	d11a      	bne.n	800516c <_printf_common+0xc8>
 8005136:	2000      	movs	r0, #0
 8005138:	e008      	b.n	800514c <_printf_common+0xa8>
 800513a:	2301      	movs	r3, #1
 800513c:	4652      	mov	r2, sl
 800513e:	4649      	mov	r1, r9
 8005140:	4638      	mov	r0, r7
 8005142:	47c0      	blx	r8
 8005144:	3001      	adds	r0, #1
 8005146:	d103      	bne.n	8005150 <_printf_common+0xac>
 8005148:	f04f 30ff 	mov.w	r0, #4294967295
 800514c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005150:	3501      	adds	r5, #1
 8005152:	e7c6      	b.n	80050e2 <_printf_common+0x3e>
 8005154:	18e1      	adds	r1, r4, r3
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	2030      	movs	r0, #48	; 0x30
 800515a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800515e:	4422      	add	r2, r4
 8005160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005168:	3302      	adds	r3, #2
 800516a:	e7c7      	b.n	80050fc <_printf_common+0x58>
 800516c:	2301      	movs	r3, #1
 800516e:	4622      	mov	r2, r4
 8005170:	4649      	mov	r1, r9
 8005172:	4638      	mov	r0, r7
 8005174:	47c0      	blx	r8
 8005176:	3001      	adds	r0, #1
 8005178:	d0e6      	beq.n	8005148 <_printf_common+0xa4>
 800517a:	3601      	adds	r6, #1
 800517c:	e7d9      	b.n	8005132 <_printf_common+0x8e>
	...

08005180 <_printf_i>:
 8005180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005184:	7e0f      	ldrb	r7, [r1, #24]
 8005186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005188:	2f78      	cmp	r7, #120	; 0x78
 800518a:	4691      	mov	r9, r2
 800518c:	4680      	mov	r8, r0
 800518e:	460c      	mov	r4, r1
 8005190:	469a      	mov	sl, r3
 8005192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005196:	d807      	bhi.n	80051a8 <_printf_i+0x28>
 8005198:	2f62      	cmp	r7, #98	; 0x62
 800519a:	d80a      	bhi.n	80051b2 <_printf_i+0x32>
 800519c:	2f00      	cmp	r7, #0
 800519e:	f000 80d4 	beq.w	800534a <_printf_i+0x1ca>
 80051a2:	2f58      	cmp	r7, #88	; 0x58
 80051a4:	f000 80c0 	beq.w	8005328 <_printf_i+0x1a8>
 80051a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80051ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80051b0:	e03a      	b.n	8005228 <_printf_i+0xa8>
 80051b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80051b6:	2b15      	cmp	r3, #21
 80051b8:	d8f6      	bhi.n	80051a8 <_printf_i+0x28>
 80051ba:	a101      	add	r1, pc, #4	; (adr r1, 80051c0 <_printf_i+0x40>)
 80051bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80051c0:	08005219 	.word	0x08005219
 80051c4:	0800522d 	.word	0x0800522d
 80051c8:	080051a9 	.word	0x080051a9
 80051cc:	080051a9 	.word	0x080051a9
 80051d0:	080051a9 	.word	0x080051a9
 80051d4:	080051a9 	.word	0x080051a9
 80051d8:	0800522d 	.word	0x0800522d
 80051dc:	080051a9 	.word	0x080051a9
 80051e0:	080051a9 	.word	0x080051a9
 80051e4:	080051a9 	.word	0x080051a9
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	08005331 	.word	0x08005331
 80051f0:	08005259 	.word	0x08005259
 80051f4:	080052eb 	.word	0x080052eb
 80051f8:	080051a9 	.word	0x080051a9
 80051fc:	080051a9 	.word	0x080051a9
 8005200:	08005353 	.word	0x08005353
 8005204:	080051a9 	.word	0x080051a9
 8005208:	08005259 	.word	0x08005259
 800520c:	080051a9 	.word	0x080051a9
 8005210:	080051a9 	.word	0x080051a9
 8005214:	080052f3 	.word	0x080052f3
 8005218:	682b      	ldr	r3, [r5, #0]
 800521a:	1d1a      	adds	r2, r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	602a      	str	r2, [r5, #0]
 8005220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005228:	2301      	movs	r3, #1
 800522a:	e09f      	b.n	800536c <_printf_i+0x1ec>
 800522c:	6820      	ldr	r0, [r4, #0]
 800522e:	682b      	ldr	r3, [r5, #0]
 8005230:	0607      	lsls	r7, r0, #24
 8005232:	f103 0104 	add.w	r1, r3, #4
 8005236:	6029      	str	r1, [r5, #0]
 8005238:	d501      	bpl.n	800523e <_printf_i+0xbe>
 800523a:	681e      	ldr	r6, [r3, #0]
 800523c:	e003      	b.n	8005246 <_printf_i+0xc6>
 800523e:	0646      	lsls	r6, r0, #25
 8005240:	d5fb      	bpl.n	800523a <_printf_i+0xba>
 8005242:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005246:	2e00      	cmp	r6, #0
 8005248:	da03      	bge.n	8005252 <_printf_i+0xd2>
 800524a:	232d      	movs	r3, #45	; 0x2d
 800524c:	4276      	negs	r6, r6
 800524e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005252:	485a      	ldr	r0, [pc, #360]	; (80053bc <_printf_i+0x23c>)
 8005254:	230a      	movs	r3, #10
 8005256:	e012      	b.n	800527e <_printf_i+0xfe>
 8005258:	682b      	ldr	r3, [r5, #0]
 800525a:	6820      	ldr	r0, [r4, #0]
 800525c:	1d19      	adds	r1, r3, #4
 800525e:	6029      	str	r1, [r5, #0]
 8005260:	0605      	lsls	r5, r0, #24
 8005262:	d501      	bpl.n	8005268 <_printf_i+0xe8>
 8005264:	681e      	ldr	r6, [r3, #0]
 8005266:	e002      	b.n	800526e <_printf_i+0xee>
 8005268:	0641      	lsls	r1, r0, #25
 800526a:	d5fb      	bpl.n	8005264 <_printf_i+0xe4>
 800526c:	881e      	ldrh	r6, [r3, #0]
 800526e:	4853      	ldr	r0, [pc, #332]	; (80053bc <_printf_i+0x23c>)
 8005270:	2f6f      	cmp	r7, #111	; 0x6f
 8005272:	bf0c      	ite	eq
 8005274:	2308      	moveq	r3, #8
 8005276:	230a      	movne	r3, #10
 8005278:	2100      	movs	r1, #0
 800527a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800527e:	6865      	ldr	r5, [r4, #4]
 8005280:	60a5      	str	r5, [r4, #8]
 8005282:	2d00      	cmp	r5, #0
 8005284:	bfa2      	ittt	ge
 8005286:	6821      	ldrge	r1, [r4, #0]
 8005288:	f021 0104 	bicge.w	r1, r1, #4
 800528c:	6021      	strge	r1, [r4, #0]
 800528e:	b90e      	cbnz	r6, 8005294 <_printf_i+0x114>
 8005290:	2d00      	cmp	r5, #0
 8005292:	d04b      	beq.n	800532c <_printf_i+0x1ac>
 8005294:	4615      	mov	r5, r2
 8005296:	fbb6 f1f3 	udiv	r1, r6, r3
 800529a:	fb03 6711 	mls	r7, r3, r1, r6
 800529e:	5dc7      	ldrb	r7, [r0, r7]
 80052a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80052a4:	4637      	mov	r7, r6
 80052a6:	42bb      	cmp	r3, r7
 80052a8:	460e      	mov	r6, r1
 80052aa:	d9f4      	bls.n	8005296 <_printf_i+0x116>
 80052ac:	2b08      	cmp	r3, #8
 80052ae:	d10b      	bne.n	80052c8 <_printf_i+0x148>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	07de      	lsls	r6, r3, #31
 80052b4:	d508      	bpl.n	80052c8 <_printf_i+0x148>
 80052b6:	6923      	ldr	r3, [r4, #16]
 80052b8:	6861      	ldr	r1, [r4, #4]
 80052ba:	4299      	cmp	r1, r3
 80052bc:	bfde      	ittt	le
 80052be:	2330      	movle	r3, #48	; 0x30
 80052c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80052c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80052c8:	1b52      	subs	r2, r2, r5
 80052ca:	6122      	str	r2, [r4, #16]
 80052cc:	f8cd a000 	str.w	sl, [sp]
 80052d0:	464b      	mov	r3, r9
 80052d2:	aa03      	add	r2, sp, #12
 80052d4:	4621      	mov	r1, r4
 80052d6:	4640      	mov	r0, r8
 80052d8:	f7ff fee4 	bl	80050a4 <_printf_common>
 80052dc:	3001      	adds	r0, #1
 80052de:	d14a      	bne.n	8005376 <_printf_i+0x1f6>
 80052e0:	f04f 30ff 	mov.w	r0, #4294967295
 80052e4:	b004      	add	sp, #16
 80052e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052ea:	6823      	ldr	r3, [r4, #0]
 80052ec:	f043 0320 	orr.w	r3, r3, #32
 80052f0:	6023      	str	r3, [r4, #0]
 80052f2:	4833      	ldr	r0, [pc, #204]	; (80053c0 <_printf_i+0x240>)
 80052f4:	2778      	movs	r7, #120	; 0x78
 80052f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80052fa:	6823      	ldr	r3, [r4, #0]
 80052fc:	6829      	ldr	r1, [r5, #0]
 80052fe:	061f      	lsls	r7, r3, #24
 8005300:	f851 6b04 	ldr.w	r6, [r1], #4
 8005304:	d402      	bmi.n	800530c <_printf_i+0x18c>
 8005306:	065f      	lsls	r7, r3, #25
 8005308:	bf48      	it	mi
 800530a:	b2b6      	uxthmi	r6, r6
 800530c:	07df      	lsls	r7, r3, #31
 800530e:	bf48      	it	mi
 8005310:	f043 0320 	orrmi.w	r3, r3, #32
 8005314:	6029      	str	r1, [r5, #0]
 8005316:	bf48      	it	mi
 8005318:	6023      	strmi	r3, [r4, #0]
 800531a:	b91e      	cbnz	r6, 8005324 <_printf_i+0x1a4>
 800531c:	6823      	ldr	r3, [r4, #0]
 800531e:	f023 0320 	bic.w	r3, r3, #32
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	2310      	movs	r3, #16
 8005326:	e7a7      	b.n	8005278 <_printf_i+0xf8>
 8005328:	4824      	ldr	r0, [pc, #144]	; (80053bc <_printf_i+0x23c>)
 800532a:	e7e4      	b.n	80052f6 <_printf_i+0x176>
 800532c:	4615      	mov	r5, r2
 800532e:	e7bd      	b.n	80052ac <_printf_i+0x12c>
 8005330:	682b      	ldr	r3, [r5, #0]
 8005332:	6826      	ldr	r6, [r4, #0]
 8005334:	6961      	ldr	r1, [r4, #20]
 8005336:	1d18      	adds	r0, r3, #4
 8005338:	6028      	str	r0, [r5, #0]
 800533a:	0635      	lsls	r5, r6, #24
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	d501      	bpl.n	8005344 <_printf_i+0x1c4>
 8005340:	6019      	str	r1, [r3, #0]
 8005342:	e002      	b.n	800534a <_printf_i+0x1ca>
 8005344:	0670      	lsls	r0, r6, #25
 8005346:	d5fb      	bpl.n	8005340 <_printf_i+0x1c0>
 8005348:	8019      	strh	r1, [r3, #0]
 800534a:	2300      	movs	r3, #0
 800534c:	6123      	str	r3, [r4, #16]
 800534e:	4615      	mov	r5, r2
 8005350:	e7bc      	b.n	80052cc <_printf_i+0x14c>
 8005352:	682b      	ldr	r3, [r5, #0]
 8005354:	1d1a      	adds	r2, r3, #4
 8005356:	602a      	str	r2, [r5, #0]
 8005358:	681d      	ldr	r5, [r3, #0]
 800535a:	6862      	ldr	r2, [r4, #4]
 800535c:	2100      	movs	r1, #0
 800535e:	4628      	mov	r0, r5
 8005360:	f7fa ff3e 	bl	80001e0 <memchr>
 8005364:	b108      	cbz	r0, 800536a <_printf_i+0x1ea>
 8005366:	1b40      	subs	r0, r0, r5
 8005368:	6060      	str	r0, [r4, #4]
 800536a:	6863      	ldr	r3, [r4, #4]
 800536c:	6123      	str	r3, [r4, #16]
 800536e:	2300      	movs	r3, #0
 8005370:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005374:	e7aa      	b.n	80052cc <_printf_i+0x14c>
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	462a      	mov	r2, r5
 800537a:	4649      	mov	r1, r9
 800537c:	4640      	mov	r0, r8
 800537e:	47d0      	blx	sl
 8005380:	3001      	adds	r0, #1
 8005382:	d0ad      	beq.n	80052e0 <_printf_i+0x160>
 8005384:	6823      	ldr	r3, [r4, #0]
 8005386:	079b      	lsls	r3, r3, #30
 8005388:	d413      	bmi.n	80053b2 <_printf_i+0x232>
 800538a:	68e0      	ldr	r0, [r4, #12]
 800538c:	9b03      	ldr	r3, [sp, #12]
 800538e:	4298      	cmp	r0, r3
 8005390:	bfb8      	it	lt
 8005392:	4618      	movlt	r0, r3
 8005394:	e7a6      	b.n	80052e4 <_printf_i+0x164>
 8005396:	2301      	movs	r3, #1
 8005398:	4632      	mov	r2, r6
 800539a:	4649      	mov	r1, r9
 800539c:	4640      	mov	r0, r8
 800539e:	47d0      	blx	sl
 80053a0:	3001      	adds	r0, #1
 80053a2:	d09d      	beq.n	80052e0 <_printf_i+0x160>
 80053a4:	3501      	adds	r5, #1
 80053a6:	68e3      	ldr	r3, [r4, #12]
 80053a8:	9903      	ldr	r1, [sp, #12]
 80053aa:	1a5b      	subs	r3, r3, r1
 80053ac:	42ab      	cmp	r3, r5
 80053ae:	dcf2      	bgt.n	8005396 <_printf_i+0x216>
 80053b0:	e7eb      	b.n	800538a <_printf_i+0x20a>
 80053b2:	2500      	movs	r5, #0
 80053b4:	f104 0619 	add.w	r6, r4, #25
 80053b8:	e7f5      	b.n	80053a6 <_printf_i+0x226>
 80053ba:	bf00      	nop
 80053bc:	08005571 	.word	0x08005571
 80053c0:	08005582 	.word	0x08005582

080053c4 <memmove>:
 80053c4:	4288      	cmp	r0, r1
 80053c6:	b510      	push	{r4, lr}
 80053c8:	eb01 0402 	add.w	r4, r1, r2
 80053cc:	d902      	bls.n	80053d4 <memmove+0x10>
 80053ce:	4284      	cmp	r4, r0
 80053d0:	4623      	mov	r3, r4
 80053d2:	d807      	bhi.n	80053e4 <memmove+0x20>
 80053d4:	1e43      	subs	r3, r0, #1
 80053d6:	42a1      	cmp	r1, r4
 80053d8:	d008      	beq.n	80053ec <memmove+0x28>
 80053da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80053de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80053e2:	e7f8      	b.n	80053d6 <memmove+0x12>
 80053e4:	4402      	add	r2, r0
 80053e6:	4601      	mov	r1, r0
 80053e8:	428a      	cmp	r2, r1
 80053ea:	d100      	bne.n	80053ee <memmove+0x2a>
 80053ec:	bd10      	pop	{r4, pc}
 80053ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053f6:	e7f7      	b.n	80053e8 <memmove+0x24>

080053f8 <_sbrk_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4d06      	ldr	r5, [pc, #24]	; (8005414 <_sbrk_r+0x1c>)
 80053fc:	2300      	movs	r3, #0
 80053fe:	4604      	mov	r4, r0
 8005400:	4608      	mov	r0, r1
 8005402:	602b      	str	r3, [r5, #0]
 8005404:	f7fb fcb6 	bl	8000d74 <_sbrk>
 8005408:	1c43      	adds	r3, r0, #1
 800540a:	d102      	bne.n	8005412 <_sbrk_r+0x1a>
 800540c:	682b      	ldr	r3, [r5, #0]
 800540e:	b103      	cbz	r3, 8005412 <_sbrk_r+0x1a>
 8005410:	6023      	str	r3, [r4, #0]
 8005412:	bd38      	pop	{r3, r4, r5, pc}
 8005414:	20000314 	.word	0x20000314

08005418 <memcpy>:
 8005418:	440a      	add	r2, r1
 800541a:	4291      	cmp	r1, r2
 800541c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005420:	d100      	bne.n	8005424 <memcpy+0xc>
 8005422:	4770      	bx	lr
 8005424:	b510      	push	{r4, lr}
 8005426:	f811 4b01 	ldrb.w	r4, [r1], #1
 800542a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800542e:	4291      	cmp	r1, r2
 8005430:	d1f9      	bne.n	8005426 <memcpy+0xe>
 8005432:	bd10      	pop	{r4, pc}

08005434 <_realloc_r>:
 8005434:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005438:	4680      	mov	r8, r0
 800543a:	4614      	mov	r4, r2
 800543c:	460e      	mov	r6, r1
 800543e:	b921      	cbnz	r1, 800544a <_realloc_r+0x16>
 8005440:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005444:	4611      	mov	r1, r2
 8005446:	f7ff bc49 	b.w	8004cdc <_malloc_r>
 800544a:	b92a      	cbnz	r2, 8005458 <_realloc_r+0x24>
 800544c:	f7ff fbda 	bl	8004c04 <_free_r>
 8005450:	4625      	mov	r5, r4
 8005452:	4628      	mov	r0, r5
 8005454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005458:	f000 f81b 	bl	8005492 <_malloc_usable_size_r>
 800545c:	4284      	cmp	r4, r0
 800545e:	4607      	mov	r7, r0
 8005460:	d802      	bhi.n	8005468 <_realloc_r+0x34>
 8005462:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005466:	d812      	bhi.n	800548e <_realloc_r+0x5a>
 8005468:	4621      	mov	r1, r4
 800546a:	4640      	mov	r0, r8
 800546c:	f7ff fc36 	bl	8004cdc <_malloc_r>
 8005470:	4605      	mov	r5, r0
 8005472:	2800      	cmp	r0, #0
 8005474:	d0ed      	beq.n	8005452 <_realloc_r+0x1e>
 8005476:	42bc      	cmp	r4, r7
 8005478:	4622      	mov	r2, r4
 800547a:	4631      	mov	r1, r6
 800547c:	bf28      	it	cs
 800547e:	463a      	movcs	r2, r7
 8005480:	f7ff ffca 	bl	8005418 <memcpy>
 8005484:	4631      	mov	r1, r6
 8005486:	4640      	mov	r0, r8
 8005488:	f7ff fbbc 	bl	8004c04 <_free_r>
 800548c:	e7e1      	b.n	8005452 <_realloc_r+0x1e>
 800548e:	4635      	mov	r5, r6
 8005490:	e7df      	b.n	8005452 <_realloc_r+0x1e>

08005492 <_malloc_usable_size_r>:
 8005492:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005496:	1f18      	subs	r0, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	bfbc      	itt	lt
 800549c:	580b      	ldrlt	r3, [r1, r0]
 800549e:	18c0      	addlt	r0, r0, r3
 80054a0:	4770      	bx	lr
	...

080054a4 <_init>:
 80054a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a6:	bf00      	nop
 80054a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054aa:	bc08      	pop	{r3}
 80054ac:	469e      	mov	lr, r3
 80054ae:	4770      	bx	lr

080054b0 <_fini>:
 80054b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054b2:	bf00      	nop
 80054b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b6:	bc08      	pop	{r3}
 80054b8:	469e      	mov	lr, r3
 80054ba:	4770      	bx	lr
