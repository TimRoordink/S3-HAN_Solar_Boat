
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  08007944  08007944  00017944  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a1c  08007a1c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a1c  08007a1c  00017a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a24  08007a24  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a24  08007a24  00017a24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08007a2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000005c  08007a88  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000047c  08007a88  0002047c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001966f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003000  00000000  00000000  0003973e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003c740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001250  00000000  00000000  0003dea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ab3  00000000  00000000  0003f0f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001af2b  00000000  00000000  00062bab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0048  00000000  00000000  0007dad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006a4c  00000000  00000000  0015db20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016456c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800792c 	.word	0x0800792c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	0800792c 	.word	0x0800792c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000328 	.word	0x20000328

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 ff0c 	bl	80013be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f90f 	bl	80007c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fb35 	bl	8000c18 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 fb05 	bl	8000bbc <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 fad3 	bl	8000b5c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b6:	f000 f969 	bl	800088c <MX_ADC1_Init>
  MX_I2C1_Init();
 80005ba:	f000 fa19 	bl	80009f0 <MX_I2C1_Init>
  MX_CAN1_Init();
 80005be:	f000 f9d9 	bl	8000974 <MX_CAN1_Init>
  MX_TIM2_Init();
 80005c2:	f000 fa55 	bl	8000a70 <MX_TIM2_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80005c6:	2202      	movs	r2, #2
 80005c8:	496b      	ldr	r1, [pc, #428]	; (8000778 <main+0x1dc>)
 80005ca:	486c      	ldr	r0, [pc, #432]	; (800077c <main+0x1e0>)
 80005cc:	f001 faac 	bl	8001b28 <HAL_ADC_Start_DMA>
	  while(!convCompleted);
 80005d0:	bf00      	nop
 80005d2:	4b6b      	ldr	r3, [pc, #428]	; (8000780 <main+0x1e4>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d0fb      	beq.n	80005d2 <main+0x36>

	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005da:	2300      	movs	r3, #0
 80005dc:	71fb      	strb	r3, [r7, #7]
 80005de:	e00a      	b.n	80005f6 <main+0x5a>
		  rawE = (uint16_t) rawValues[0];
 80005e0:	4b65      	ldr	r3, [pc, #404]	; (8000778 <main+0x1dc>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	4b67      	ldr	r3, [pc, #412]	; (8000784 <main+0x1e8>)
 80005e6:	801a      	strh	r2, [r3, #0]
		  rawF = (uint16_t) rawValues[1];
 80005e8:	4b63      	ldr	r3, [pc, #396]	; (8000778 <main+0x1dc>)
 80005ea:	885a      	ldrh	r2, [r3, #2]
 80005ec:	4b66      	ldr	r3, [pc, #408]	; (8000788 <main+0x1ec>)
 80005ee:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005f0:	79fb      	ldrb	r3, [r7, #7]
 80005f2:	3301      	adds	r3, #1
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	79fa      	ldrb	r2, [r7, #7]
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <main+0x1e0>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	429a      	cmp	r2, r3
 80005fe:	d3ef      	bcc.n	80005e0 <main+0x44>
	  }

	  voltageE = unitValue * rawE;
 8000600:	4b60      	ldr	r3, [pc, #384]	; (8000784 <main+0x1e8>)
 8000602:	881b      	ldrh	r3, [r3, #0]
 8000604:	ee07 3a90 	vmov	s15, r3
 8000608:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800060c:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 800078c <main+0x1f0>
 8000610:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000614:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000618:	ee17 3a90 	vmov	r3, s15
 800061c:	b29a      	uxth	r2, r3
 800061e:	4b5c      	ldr	r3, [pc, #368]	; (8000790 <main+0x1f4>)
 8000620:	801a      	strh	r2, [r3, #0]
	  voltageF = unitValue * rawF;
 8000622:	4b59      	ldr	r3, [pc, #356]	; (8000788 <main+0x1ec>)
 8000624:	881b      	ldrh	r3, [r3, #0]
 8000626:	ee07 3a90 	vmov	s15, r3
 800062a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800062e:	ed9f 7a57 	vldr	s14, [pc, #348]	; 800078c <main+0x1f0>
 8000632:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000636:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800063a:	ee17 3a90 	vmov	r3, s15
 800063e:	b29a      	uxth	r2, r3
 8000640:	4b54      	ldr	r3, [pc, #336]	; (8000794 <main+0x1f8>)
 8000642:	801a      	strh	r2, [r3, #0]

	  currentE = (voltageE - offset) * sensitivity;
 8000644:	4b52      	ldr	r3, [pc, #328]	; (8000790 <main+0x1f4>)
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	ee07 3a90 	vmov	s15, r3
 800064c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000650:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000798 <main+0x1fc>
 8000654:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000658:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800079c <main+0x200>
 800065c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000660:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000664:	ee17 3a90 	vmov	r3, s15
 8000668:	b29a      	uxth	r2, r3
 800066a:	4b4d      	ldr	r3, [pc, #308]	; (80007a0 <main+0x204>)
 800066c:	801a      	strh	r2, [r3, #0]
	  currentF = (voltageF - offset) * sensitivity;
 800066e:	4b49      	ldr	r3, [pc, #292]	; (8000794 <main+0x1f8>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	ee07 3a90 	vmov	s15, r3
 8000676:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800067a:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000798 <main+0x1fc>
 800067e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000682:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800079c <main+0x200>
 8000686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800068a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800068e:	ee17 3a90 	vmov	r3, s15
 8000692:	b29a      	uxth	r2, r3
 8000694:	4b43      	ldr	r3, [pc, #268]	; (80007a4 <main+0x208>)
 8000696:	801a      	strh	r2, [r3, #0]

	  sprintf(msg, "rawE: %hu ", rawE);
 8000698:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <main+0x1e8>)
 800069a:	881b      	ldrh	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	4942      	ldr	r1, [pc, #264]	; (80007a8 <main+0x20c>)
 80006a0:	4842      	ldr	r0, [pc, #264]	; (80007ac <main+0x210>)
 80006a2:	f006 fc9f 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80006a6:	4841      	ldr	r0, [pc, #260]	; (80007ac <main+0x210>)
 80006a8:	f7ff fd92 	bl	80001d0 <strlen>
 80006ac:	4603      	mov	r3, r0
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	493d      	ldr	r1, [pc, #244]	; (80007ac <main+0x210>)
 80006b6:	483e      	ldr	r0, [pc, #248]	; (80007b0 <main+0x214>)
 80006b8:	f005 ffc8 	bl	800664c <HAL_UART_Transmit>

	  sprintf(msg, "\trawF: %hu ", rawF);
 80006bc:	4b32      	ldr	r3, [pc, #200]	; (8000788 <main+0x1ec>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	493c      	ldr	r1, [pc, #240]	; (80007b4 <main+0x218>)
 80006c4:	4839      	ldr	r0, [pc, #228]	; (80007ac <main+0x210>)
 80006c6:	f006 fc8d 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);\
 80006ca:	4838      	ldr	r0, [pc, #224]	; (80007ac <main+0x210>)
 80006cc:	f7ff fd80 	bl	80001d0 <strlen>
 80006d0:	4603      	mov	r3, r0
 80006d2:	b29a      	uxth	r2, r3
 80006d4:	f04f 33ff 	mov.w	r3, #4294967295
 80006d8:	4934      	ldr	r1, [pc, #208]	; (80007ac <main+0x210>)
 80006da:	4835      	ldr	r0, [pc, #212]	; (80007b0 <main+0x214>)
 80006dc:	f005 ffb6 	bl	800664c <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageE: %hu ", voltageE);
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <main+0x1f4>)
 80006e2:	881b      	ldrh	r3, [r3, #0]
 80006e4:	461a      	mov	r2, r3
 80006e6:	4934      	ldr	r1, [pc, #208]	; (80007b8 <main+0x21c>)
 80006e8:	4830      	ldr	r0, [pc, #192]	; (80007ac <main+0x210>)
 80006ea:	f006 fc7b 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80006ee:	482f      	ldr	r0, [pc, #188]	; (80007ac <main+0x210>)
 80006f0:	f7ff fd6e 	bl	80001d0 <strlen>
 80006f4:	4603      	mov	r3, r0
 80006f6:	b29a      	uxth	r2, r3
 80006f8:	f04f 33ff 	mov.w	r3, #4294967295
 80006fc:	492b      	ldr	r1, [pc, #172]	; (80007ac <main+0x210>)
 80006fe:	482c      	ldr	r0, [pc, #176]	; (80007b0 <main+0x214>)
 8000700:	f005 ffa4 	bl	800664c <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageF: %hu ", voltageF);
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <main+0x1f8>)
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	492c      	ldr	r1, [pc, #176]	; (80007bc <main+0x220>)
 800070c:	4827      	ldr	r0, [pc, #156]	; (80007ac <main+0x210>)
 800070e:	f006 fc69 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000712:	4826      	ldr	r0, [pc, #152]	; (80007ac <main+0x210>)
 8000714:	f7ff fd5c 	bl	80001d0 <strlen>
 8000718:	4603      	mov	r3, r0
 800071a:	b29a      	uxth	r2, r3
 800071c:	f04f 33ff 	mov.w	r3, #4294967295
 8000720:	4922      	ldr	r1, [pc, #136]	; (80007ac <main+0x210>)
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <main+0x214>)
 8000724:	f005 ff92 	bl	800664c <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentE: %hu ", currentE);
 8000728:	4b1d      	ldr	r3, [pc, #116]	; (80007a0 <main+0x204>)
 800072a:	881b      	ldrh	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	4924      	ldr	r1, [pc, #144]	; (80007c0 <main+0x224>)
 8000730:	481e      	ldr	r0, [pc, #120]	; (80007ac <main+0x210>)
 8000732:	f006 fc57 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000736:	481d      	ldr	r0, [pc, #116]	; (80007ac <main+0x210>)
 8000738:	f7ff fd4a 	bl	80001d0 <strlen>
 800073c:	4603      	mov	r3, r0
 800073e:	b29a      	uxth	r2, r3
 8000740:	f04f 33ff 	mov.w	r3, #4294967295
 8000744:	4919      	ldr	r1, [pc, #100]	; (80007ac <main+0x210>)
 8000746:	481a      	ldr	r0, [pc, #104]	; (80007b0 <main+0x214>)
 8000748:	f005 ff80 	bl	800664c <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentF: %hu \r\n", currentF);
 800074c:	4b15      	ldr	r3, [pc, #84]	; (80007a4 <main+0x208>)
 800074e:	881b      	ldrh	r3, [r3, #0]
 8000750:	461a      	mov	r2, r3
 8000752:	491c      	ldr	r1, [pc, #112]	; (80007c4 <main+0x228>)
 8000754:	4815      	ldr	r0, [pc, #84]	; (80007ac <main+0x210>)
 8000756:	f006 fc45 	bl	8006fe4 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800075a:	4814      	ldr	r0, [pc, #80]	; (80007ac <main+0x210>)
 800075c:	f7ff fd38 	bl	80001d0 <strlen>
 8000760:	4603      	mov	r3, r0
 8000762:	b29a      	uxth	r2, r3
 8000764:	f04f 33ff 	mov.w	r3, #4294967295
 8000768:	4910      	ldr	r1, [pc, #64]	; (80007ac <main+0x210>)
 800076a:	4811      	ldr	r0, [pc, #68]	; (80007b0 <main+0x214>)
 800076c:	f005 ff6e 	bl	800664c <HAL_UART_Transmit>

	  HAL_Delay(250);
 8000770:	20fa      	movs	r0, #250	; 0xfa
 8000772:	f000 fe99 	bl	80014a8 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 8000776:	e726      	b.n	80005c6 <main+0x2a>
 8000778:	20000308 	.word	0x20000308
 800077c:	20000078 	.word	0x20000078
 8000780:	20000328 	.word	0x20000328
 8000784:	2000030c 	.word	0x2000030c
 8000788:	2000030e 	.word	0x2000030e
 800078c:	3f4e4000 	.word	0x3f4e4000
 8000790:	20000310 	.word	0x20000310
 8000794:	20000312 	.word	0x20000312
 8000798:	43a10000 	.word	0x43a10000
 800079c:	40726c9b 	.word	0x40726c9b
 80007a0:	20000304 	.word	0x20000304
 80007a4:	20000306 	.word	0x20000306
 80007a8:	08007944 	.word	0x08007944
 80007ac:	20000314 	.word	0x20000314
 80007b0:	2000027c 	.word	0x2000027c
 80007b4:	08007950 	.word	0x08007950
 80007b8:	0800795c 	.word	0x0800795c
 80007bc:	0800796c 	.word	0x0800796c
 80007c0:	0800797c 	.word	0x0800797c
 80007c4:	0800798c 	.word	0x0800798c

080007c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b096      	sub	sp, #88	; 0x58
 80007cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ce:	f107 0314 	add.w	r3, r7, #20
 80007d2:	2244      	movs	r2, #68	; 0x44
 80007d4:	2100      	movs	r1, #0
 80007d6:	4618      	mov	r0, r3
 80007d8:	f006 fc24 	bl	8007024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007dc:	463b      	mov	r3, r7
 80007de:	2200      	movs	r2, #0
 80007e0:	601a      	str	r2, [r3, #0]
 80007e2:	605a      	str	r2, [r3, #4]
 80007e4:	609a      	str	r2, [r3, #8]
 80007e6:	60da      	str	r2, [r3, #12]
 80007e8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007ee:	f003 fe33 	bl	8004458 <HAL_PWREx_ControlVoltageScaling>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f8:	f000 fa70 	bl	8000cdc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fc:	f003 fe0e 	bl	800441c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000800:	4b21      	ldr	r3, [pc, #132]	; (8000888 <SystemClock_Config+0xc0>)
 8000802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000806:	4a20      	ldr	r2, [pc, #128]	; (8000888 <SystemClock_Config+0xc0>)
 8000808:	f023 0318 	bic.w	r3, r3, #24
 800080c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000810:	2314      	movs	r3, #20
 8000812:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000814:	2301      	movs	r3, #1
 8000816:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000818:	2301      	movs	r3, #1
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000820:	2360      	movs	r3, #96	; 0x60
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000824:	2302      	movs	r3, #2
 8000826:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000828:	2301      	movs	r3, #1
 800082a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800082c:	2301      	movs	r3, #1
 800082e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000830:	2310      	movs	r3, #16
 8000832:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000834:	2307      	movs	r3, #7
 8000836:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000838:	2302      	movs	r3, #2
 800083a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4618      	mov	r0, r3
 8000846:	f003 fe5d 	bl	8004504 <HAL_RCC_OscConfig>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000850:	f000 fa44 	bl	8000cdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000854:	230f      	movs	r3, #15
 8000856:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000858:	2303      	movs	r3, #3
 800085a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000864:	2300      	movs	r3, #0
 8000866:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000868:	463b      	mov	r3, r7
 800086a:	2101      	movs	r1, #1
 800086c:	4618      	mov	r0, r3
 800086e:	f004 fa5d 	bl	8004d2c <HAL_RCC_ClockConfig>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000878:	f000 fa30 	bl	8000cdc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800087c:	f004 fe70 	bl	8005560 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000880:	bf00      	nop
 8000882:	3758      	adds	r7, #88	; 0x58
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40021000 	.word	0x40021000

0800088c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	463b      	mov	r3, r7
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
 80008a0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008a4:	4a30      	ldr	r2, [pc, #192]	; (8000968 <MX_ADC1_Init+0xdc>)
 80008a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a8:	4b2e      	ldr	r3, [pc, #184]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008ae:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b4:	4b2b      	ldr	r3, [pc, #172]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008bc:	2201      	movs	r2, #1
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c0:	4b28      	ldr	r3, [pc, #160]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008c6:	4b27      	ldr	r3, [pc, #156]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008cc:	4b25      	ldr	r3, [pc, #148]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80008d2:	4b24      	ldr	r3, [pc, #144]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008d4:	2202      	movs	r2, #2
 80008d6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f4:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008fa:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_ADC1_Init+0xd8>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000902:	4818      	ldr	r0, [pc, #96]	; (8000964 <MX_ADC1_Init+0xd8>)
 8000904:	f000 ffce 	bl	80018a4 <HAL_ADC_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800090e:	f000 f9e5 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000912:	4b16      	ldr	r3, [pc, #88]	; (800096c <MX_ADC1_Init+0xe0>)
 8000914:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000916:	2306      	movs	r3, #6
 8000918:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800091a:	2307      	movs	r3, #7
 800091c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800091e:	237f      	movs	r3, #127	; 0x7f
 8000920:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000922:	2304      	movs	r3, #4
 8000924:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092a:	463b      	mov	r3, r7
 800092c:	4619      	mov	r1, r3
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_ADC1_Init+0xd8>)
 8000930:	f001 fb50 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800093a:	f000 f9cf 	bl	8000cdc <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800093e:	4b0c      	ldr	r3, [pc, #48]	; (8000970 <MX_ADC1_Init+0xe4>)
 8000940:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000942:	230c      	movs	r3, #12
 8000944:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000946:	463b      	mov	r3, r7
 8000948:	4619      	mov	r1, r3
 800094a:	4806      	ldr	r0, [pc, #24]	; (8000964 <MX_ADC1_Init+0xd8>)
 800094c:	f001 fb42 	bl	8001fd4 <HAL_ADC_ConfigChannel>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000956:	f000 f9c1 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000078 	.word	0x20000078
 8000968:	50040000 	.word	0x50040000
 800096c:	14f00020 	.word	0x14f00020
 8000970:	19200040 	.word	0x19200040

08000974 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000978:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_CAN1_Init+0x74>)
 800097a:	4a1c      	ldr	r2, [pc, #112]	; (80009ec <MX_CAN1_Init+0x78>)
 800097c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800097e:	4b1a      	ldr	r3, [pc, #104]	; (80009e8 <MX_CAN1_Init+0x74>)
 8000980:	2208      	movs	r2, #8
 8000982:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000984:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_CAN1_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800098a:	4b17      	ldr	r3, [pc, #92]	; (80009e8 <MX_CAN1_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000990:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_CAN1_Init+0x74>)
 8000992:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000996:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000998:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_CAN1_Init+0x74>)
 800099a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800099e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80009ac:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80009b2:	4b0d      	ldr	r3, [pc, #52]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80009b8:	4b0b      	ldr	r3, [pc, #44]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80009c4:	4808      	ldr	r0, [pc, #32]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009c6:	f002 f833 	bl	8002a30 <HAL_CAN_Init>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d001      	beq.n	80009d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80009d0:	f000 f984 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80009d4:	4804      	ldr	r0, [pc, #16]	; (80009e8 <MX_CAN1_Init+0x74>)
 80009d6:	f002 f926 	bl	8002c26 <HAL_CAN_Start>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <MX_CAN1_Init+0x70>
	  Error_Handler();
 80009e0:	f000 f97c 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE END CAN1_Init 2 */

}
 80009e4:	bf00      	nop
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000124 	.word	0x20000124
 80009ec:	40006400 	.word	0x40006400

080009f0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f002 fe1a 	bl	8003664 <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f951 	bl	8000cdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f003 fc56 	bl	80042ee <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f948 	bl	8000cdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f003 fc98 	bl	8004384 <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f93f 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	2000014c 	.word	0x2000014c
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	00707cbb 	.word	0x00707cbb

08000a70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08e      	sub	sp, #56	; 0x38
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	f107 031c 	add.w	r3, r7, #28
 8000a88:	2200      	movs	r2, #0
 8000a8a:	601a      	str	r2, [r3, #0]
 8000a8c:	605a      	str	r2, [r3, #4]
 8000a8e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	2200      	movs	r2, #0
 8000a94:	601a      	str	r2, [r3, #0]
 8000a96:	605a      	str	r2, [r3, #4]
 8000a98:	609a      	str	r2, [r3, #8]
 8000a9a:	60da      	str	r2, [r3, #12]
 8000a9c:	611a      	str	r2, [r3, #16]
 8000a9e:	615a      	str	r2, [r3, #20]
 8000aa0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000aa2:	4b2d      	ldr	r3, [pc, #180]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000aaa:	4b2b      	ldr	r3, [pc, #172]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000aac:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000ab0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ab2:	4b29      	ldr	r3, [pc, #164]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000ab8:	4b27      	ldr	r3, [pc, #156]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000aba:	220a      	movs	r2, #10
 8000abc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000abe:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b24      	ldr	r3, [pc, #144]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000aca:	4823      	ldr	r0, [pc, #140]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000acc:	f004 fe4a 	bl	8005764 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ad6:	f000 f901 	bl	8000cdc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ada:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ade:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ae0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	481c      	ldr	r0, [pc, #112]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000ae8:	f005 f870 	bl	8005bcc <HAL_TIM_ConfigClockSource>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000af2:	f000 f8f3 	bl	8000cdc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000af6:	4818      	ldr	r0, [pc, #96]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000af8:	f004 fe8b 	bl	8005812 <HAL_TIM_OC_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000b02:	f000 f8eb 	bl	8000cdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 031c 	add.w	r3, r7, #28
 8000b12:	4619      	mov	r1, r3
 8000b14:	4810      	ldr	r0, [pc, #64]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000b16:	f005 fcc7 	bl	80064a8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b20:	f000 f8dc 	bl	8000cdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000b24:	2350      	movs	r3, #80	; 0x50
 8000b26:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b30:	2300      	movs	r3, #0
 8000b32:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b34:	463b      	mov	r3, r7
 8000b36:	2200      	movs	r2, #0
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4807      	ldr	r0, [pc, #28]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000b3c:	f004 ffcc 	bl	8005ad8 <HAL_TIM_OC_ConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b46:	f000 f8c9 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b4a:	4803      	ldr	r0, [pc, #12]	; (8000b58 <MX_TIM2_Init+0xe8>)
 8000b4c:	f000 fab8 	bl	80010c0 <HAL_TIM_MspPostInit>

}
 8000b50:	bf00      	nop
 8000b52:	3738      	adds	r7, #56	; 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	20000230 	.word	0x20000230

08000b5c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b60:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b62:	4a15      	ldr	r2, [pc, #84]	; (8000bb8 <MX_USART2_UART_Init+0x5c>)
 8000b64:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b66:	4b13      	ldr	r3, [pc, #76]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b6c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b6e:	4b11      	ldr	r3, [pc, #68]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b74:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b7a:	4b0e      	ldr	r3, [pc, #56]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b80:	4b0c      	ldr	r3, [pc, #48]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b82:	220c      	movs	r2, #12
 8000b84:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b8c:	4b09      	ldr	r3, [pc, #36]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b98:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_USART2_UART_Init+0x58>)
 8000ba0:	f005 fd06 	bl	80065b0 <HAL_UART_Init>
 8000ba4:	4603      	mov	r3, r0
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000baa:	f000 f897 	bl	8000cdc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	2000027c 	.word	0x2000027c
 8000bb8:	40004400 	.word	0x40004400

08000bbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b082      	sub	sp, #8
 8000bc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bc2:	4b14      	ldr	r3, [pc, #80]	; (8000c14 <MX_DMA_Init+0x58>)
 8000bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc6:	4a13      	ldr	r2, [pc, #76]	; (8000c14 <MX_DMA_Init+0x58>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6493      	str	r3, [r2, #72]	; 0x48
 8000bce:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <MX_DMA_Init+0x58>)
 8000bd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2100      	movs	r1, #0
 8000bde:	200b      	movs	r0, #11
 8000be0:	f002 f941 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000be4:	200b      	movs	r0, #11
 8000be6:	f002 f95a 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000bea:	2200      	movs	r2, #0
 8000bec:	2100      	movs	r1, #0
 8000bee:	2010      	movs	r0, #16
 8000bf0:	f002 f939 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000bf4:	2010      	movs	r0, #16
 8000bf6:	f002 f952 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	2100      	movs	r1, #0
 8000bfe:	2011      	movs	r0, #17
 8000c00:	f002 f931 	bl	8002e66 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000c04:	2011      	movs	r0, #17
 8000c06:	f002 f94a 	bl	8002e9e <HAL_NVIC_EnableIRQ>

}
 8000c0a:	bf00      	nop
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40021000 	.word	0x40021000

08000c18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b088      	sub	sp, #32
 8000c1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c1e:	f107 030c 	add.w	r3, r7, #12
 8000c22:	2200      	movs	r2, #0
 8000c24:	601a      	str	r2, [r3, #0]
 8000c26:	605a      	str	r2, [r3, #4]
 8000c28:	609a      	str	r2, [r3, #8]
 8000c2a:	60da      	str	r2, [r3, #12]
 8000c2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c2e:	4b24      	ldr	r3, [pc, #144]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c32:	4a23      	ldr	r2, [pc, #140]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c34:	f043 0304 	orr.w	r3, r3, #4
 8000c38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3a:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3e:	f003 0304 	and.w	r3, r3, #4
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c46:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4a:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c52:	4b1b      	ldr	r3, [pc, #108]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5e:	4b18      	ldr	r3, [pc, #96]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c62:	4a17      	ldr	r2, [pc, #92]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c64:	f043 0302 	orr.w	r3, r3, #2
 8000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <MX_GPIO_Init+0xa8>)
 8000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	2108      	movs	r1, #8
 8000c7a:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <MX_GPIO_Init+0xac>)
 8000c7c:	f002 fcda 	bl	8003634 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000c80:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000c84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	4619      	mov	r1, r3
 8000c94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c98:	f002 fb62 	bl	8003360 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000c9c:	2308      	movs	r3, #8
 8000c9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4804      	ldr	r0, [pc, #16]	; (8000cc4 <MX_GPIO_Init+0xac>)
 8000cb4:	f002 fb54 	bl	8003360 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb8:	bf00      	nop
 8000cba:	3720      	adds	r7, #32
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <HAL_TIM_PeriodElapsedCallback>:
	HAL_Delay(10);
	return RX_Buffer[1] | RX_Buffer[2];
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ce0:	b672      	cpsid	i
}
 8000ce2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <Error_Handler+0x8>
	...

08000ce8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	4a0e      	ldr	r2, [pc, #56]	; (8000d2c <HAL_MspInit+0x44>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <HAL_MspInit+0x44>)
 8000cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	4b09      	ldr	r3, [pc, #36]	; (8000d2c <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	4a08      	ldr	r2, [pc, #32]	; (8000d2c <HAL_MspInit+0x44>)
 8000d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d10:	6593      	str	r3, [r2, #88]	; 0x58
 8000d12:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_MspInit+0x44>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	603b      	str	r3, [r7, #0]
 8000d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	40021000 	.word	0x40021000

08000d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b09e      	sub	sp, #120	; 0x78
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d48:	f107 0310 	add.w	r3, r7, #16
 8000d4c:	2254      	movs	r2, #84	; 0x54
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f006 f967 	bl	8007024 <memset>
  if(hadc->Instance==ADC1)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a3f      	ldr	r2, [pc, #252]	; (8000e58 <HAL_ADC_MspInit+0x128>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d176      	bne.n	8000e4e <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d64:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000d66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d6a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000d74:	2310      	movs	r3, #16
 8000d76:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000d78:	2307      	movs	r3, #7
 8000d7a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000d84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d8a:	f107 0310 	add.w	r3, r7, #16
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f004 f9f0 	bl	8005174 <HAL_RCCEx_PeriphCLKConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d9a:	f7ff ff9f 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d9e:	4b2f      	ldr	r3, [pc, #188]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000da2:	4a2e      	ldr	r2, [pc, #184]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000da4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000da8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000daa:	4b2c      	ldr	r3, [pc, #176]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db6:	4b29      	ldr	r3, [pc, #164]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dba:	4a28      	ldr	r2, [pc, #160]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000dbc:	f043 0301 	orr.w	r3, r3, #1
 8000dc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dc2:	4b26      	ldr	r3, [pc, #152]	; (8000e5c <HAL_ADC_MspInit+0x12c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	f003 0301 	and.w	r3, r3, #1
 8000dca:	60bb      	str	r3, [r7, #8]
 8000dcc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000dd2:	230b      	movs	r3, #11
 8000dd4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dda:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dde:	4619      	mov	r1, r3
 8000de0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de4:	f002 fabc 	bl	8003360 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000de8:	4b1d      	ldr	r3, [pc, #116]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000dea:	4a1e      	ldr	r2, [pc, #120]	; (8000e64 <HAL_ADC_MspInit+0x134>)
 8000dec:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000dee:	4b1c      	ldr	r3, [pc, #112]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df4:	4b1a      	ldr	r3, [pc, #104]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dfa:	4b19      	ldr	r3, [pc, #100]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e00:	4b17      	ldr	r3, [pc, #92]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e02:	2280      	movs	r2, #128	; 0x80
 8000e04:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e06:	4b16      	ldr	r3, [pc, #88]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e08:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e0c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e0e:	4b14      	ldr	r3, [pc, #80]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e14:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e16:	4b12      	ldr	r3, [pc, #72]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e18:	2220      	movs	r2, #32
 8000e1a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e1c:	4b10      	ldr	r3, [pc, #64]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e22:	480f      	ldr	r0, [pc, #60]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e24:	f002 f856 	bl	8002ed4 <HAL_DMA_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000e2e:	f7ff ff55 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e36:	64da      	str	r2, [r3, #76]	; 0x4c
 8000e38:	4a09      	ldr	r2, [pc, #36]	; (8000e60 <HAL_ADC_MspInit+0x130>)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000e3e:	2200      	movs	r2, #0
 8000e40:	2101      	movs	r1, #1
 8000e42:	2012      	movs	r0, #18
 8000e44:	f002 f80f 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000e48:	2012      	movs	r0, #18
 8000e4a:	f002 f828 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e4e:	bf00      	nop
 8000e50:	3778      	adds	r7, #120	; 0x78
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	50040000 	.word	0x50040000
 8000e5c:	40021000 	.word	0x40021000
 8000e60:	200000dc 	.word	0x200000dc
 8000e64:	40020008 	.word	0x40020008

08000e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a18      	ldr	r2, [pc, #96]	; (8000ee8 <HAL_CAN_MspInit+0x80>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d129      	bne.n	8000ede <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e8a:	4b18      	ldr	r3, [pc, #96]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8e:	4a17      	ldr	r2, [pc, #92]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e94:	6593      	str	r3, [r2, #88]	; 0x58
 8000e96:	4b15      	ldr	r3, [pc, #84]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	4a11      	ldr	r2, [pc, #68]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000ea8:	f043 0301 	orr.w	r3, r3, #1
 8000eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eae:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <HAL_CAN_MspInit+0x84>)
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	f003 0301 	and.w	r3, r3, #1
 8000eb6:	60fb      	str	r3, [r7, #12]
 8000eb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000eba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec8:	2303      	movs	r3, #3
 8000eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000ecc:	2309      	movs	r3, #9
 8000ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eda:	f002 fa41 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000ede:	bf00      	nop
 8000ee0:	3728      	adds	r7, #40	; 0x28
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40006400 	.word	0x40006400
 8000eec:	40021000 	.word	0x40021000

08000ef0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b09e      	sub	sp, #120	; 0x78
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	2254      	movs	r2, #84	; 0x54
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 f887 	bl	8007024 <memset>
  if(hi2c->Instance==I2C1)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a50      	ldr	r2, [pc, #320]	; (800105c <HAL_I2C_MspInit+0x16c>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	f040 8098 	bne.w	8001052 <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f2a:	f107 0310 	add.w	r3, r7, #16
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f004 f920 	bl	8005174 <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000f3a:	f7ff fecf 	bl	8000cdc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3e:	4b48      	ldr	r3, [pc, #288]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f42:	4a47      	ldr	r2, [pc, #284]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f44:	f043 0302 	orr.w	r3, r3, #2
 8000f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f4a:	4b45      	ldr	r3, [pc, #276]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4e:	f003 0302 	and.w	r3, r3, #2
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000f56:	23c0      	movs	r3, #192	; 0xc0
 8000f58:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f5a:	2312      	movs	r3, #18
 8000f5c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f62:	2303      	movs	r3, #3
 8000f64:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f66:	2304      	movs	r3, #4
 8000f68:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f6e:	4619      	mov	r1, r3
 8000f70:	483c      	ldr	r0, [pc, #240]	; (8001064 <HAL_I2C_MspInit+0x174>)
 8000f72:	f002 f9f5 	bl	8003360 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f7a:	4a39      	ldr	r2, [pc, #228]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f7c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f80:	6593      	str	r3, [r2, #88]	; 0x58
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_I2C_MspInit+0x170>)
 8000f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8a:	60bb      	str	r3, [r7, #8]
 8000f8c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000f90:	4a36      	ldr	r2, [pc, #216]	; (800106c <HAL_I2C_MspInit+0x17c>)
 8000f92:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000f94:	4b34      	ldr	r3, [pc, #208]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fa0:	4b31      	ldr	r3, [pc, #196]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fa6:	4b30      	ldr	r3, [pc, #192]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fa8:	2280      	movs	r2, #128	; 0x80
 8000faa:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fac:	4b2e      	ldr	r3, [pc, #184]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fb2:	4b2d      	ldr	r3, [pc, #180]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000fb8:	4b2b      	ldr	r3, [pc, #172]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fbe:	4b2a      	ldr	r3, [pc, #168]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fc4:	4828      	ldr	r0, [pc, #160]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fc6:	f001 ff85 	bl	8002ed4 <HAL_DMA_Init>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8000fd0:	f7ff fe84 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fd8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fda:	4a23      	ldr	r2, [pc, #140]	; (8001068 <HAL_I2C_MspInit+0x178>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000fe0:	4b23      	ldr	r3, [pc, #140]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8000fe2:	4a24      	ldr	r2, [pc, #144]	; (8001074 <HAL_I2C_MspInit+0x184>)
 8000fe4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000fe6:	4b22      	ldr	r3, [pc, #136]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8000fe8:	2203      	movs	r2, #3
 8000fea:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fec:	4b20      	ldr	r3, [pc, #128]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8000fee:	2210      	movs	r2, #16
 8000ff0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8001000:	2200      	movs	r2, #0
 8001002:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8001006:	2200      	movs	r2, #0
 8001008:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <HAL_I2C_MspInit+0x180>)
 800100c:	2200      	movs	r2, #0
 800100e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001010:	4b17      	ldr	r3, [pc, #92]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8001012:	2200      	movs	r2, #0
 8001014:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001016:	4816      	ldr	r0, [pc, #88]	; (8001070 <HAL_I2C_MspInit+0x180>)
 8001018:	f001 ff5c 	bl	8002ed4 <HAL_DMA_Init>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001022:	f7ff fe5b 	bl	8000cdc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	4a11      	ldr	r2, [pc, #68]	; (8001070 <HAL_I2C_MspInit+0x180>)
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
 800102c:	4a10      	ldr	r2, [pc, #64]	; (8001070 <HAL_I2C_MspInit+0x180>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2100      	movs	r1, #0
 8001036:	201f      	movs	r0, #31
 8001038:	f001 ff15 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800103c:	201f      	movs	r0, #31
 800103e:	f001 ff2e 	bl	8002e9e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	2020      	movs	r0, #32
 8001048:	f001 ff0d 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800104c:	2020      	movs	r0, #32
 800104e:	f001 ff26 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001052:	bf00      	nop
 8001054:	3778      	adds	r7, #120	; 0x78
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40005400 	.word	0x40005400
 8001060:	40021000 	.word	0x40021000
 8001064:	48000400 	.word	0x48000400
 8001068:	200001a0 	.word	0x200001a0
 800106c:	40020080 	.word	0x40020080
 8001070:	200001e8 	.word	0x200001e8
 8001074:	4002006c 	.word	0x4002006c

08001078 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b084      	sub	sp, #16
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001088:	d113      	bne.n	80010b2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800108a:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	4a0b      	ldr	r2, [pc, #44]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001090:	f043 0301 	orr.w	r3, r3, #1
 8001094:	6593      	str	r3, [r2, #88]	; 0x58
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_TIM_Base_MspInit+0x44>)
 8001098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2100      	movs	r1, #0
 80010a6:	201c      	movs	r0, #28
 80010a8:	f001 fedd 	bl	8002e66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80010ac:	201c      	movs	r0, #28
 80010ae:	f001 fef6 	bl	8002e9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010b2:	bf00      	nop
 80010b4:	3710      	adds	r7, #16
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e0:	d11c      	bne.n	800111c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <HAL_TIM_MspPostInit+0x64>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	4a0f      	ldr	r2, [pc, #60]	; (8001124 <HAL_TIM_MspPostInit+0x64>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ee:	4b0d      	ldr	r3, [pc, #52]	; (8001124 <HAL_TIM_MspPostInit+0x64>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	60bb      	str	r3, [r7, #8]
 80010f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 80010fa:	2320      	movs	r3, #32
 80010fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fe:	2302      	movs	r3, #2
 8001100:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110a:	2301      	movs	r3, #1
 800110c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 800110e:	f107 030c 	add.w	r3, r7, #12
 8001112:	4619      	mov	r1, r3
 8001114:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001118:	f002 f922 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800111c:	bf00      	nop
 800111e:	3720      	adds	r7, #32
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09e      	sub	sp, #120	; 0x78
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	2254      	movs	r2, #84	; 0x54
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f005 ff6b 	bl	8007024 <memset>
  if(huart->Instance==USART2)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a28      	ldr	r2, [pc, #160]	; (80011f4 <HAL_UART_MspInit+0xcc>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d148      	bne.n	80011ea <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001158:	2302      	movs	r3, #2
 800115a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800115c:	2300      	movs	r3, #0
 800115e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001160:	f107 0310 	add.w	r3, r7, #16
 8001164:	4618      	mov	r0, r3
 8001166:	f004 f805 	bl	8005174 <HAL_RCCEx_PeriphCLKConfig>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001170:	f7ff fdb4 	bl	8000cdc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	4b20      	ldr	r3, [pc, #128]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 8001176:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001178:	4a1f      	ldr	r2, [pc, #124]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 800117a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800117e:	6593      	str	r3, [r2, #88]	; 0x58
 8001180:	4b1d      	ldr	r3, [pc, #116]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 8001182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	60fb      	str	r3, [r7, #12]
 800118a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b1a      	ldr	r3, [pc, #104]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_UART_MspInit+0xd0>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80011a4:	2304      	movs	r3, #4
 80011a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b4:	2307      	movs	r3, #7
 80011b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c2:	f002 f8cd 	bl	8003360 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80011c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011cc:	2302      	movs	r3, #2
 80011ce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d0:	2300      	movs	r3, #0
 80011d2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d4:	2303      	movs	r3, #3
 80011d6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80011d8:	2303      	movs	r3, #3
 80011da:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80011dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80011e0:	4619      	mov	r1, r3
 80011e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011e6:	f002 f8bb 	bl	8003360 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ea:	bf00      	nop
 80011ec:	3778      	adds	r7, #120	; 0x78
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	40004400 	.word	0x40004400
 80011f8:	40021000 	.word	0x40021000

080011fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001200:	e7fe      	b.n	8001200 <NMI_Handler+0x4>

08001202 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001202:	b480      	push	{r7}
 8001204:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001206:	e7fe      	b.n	8001206 <HardFault_Handler+0x4>

08001208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800120c:	e7fe      	b.n	800120c <MemManage_Handler+0x4>

0800120e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800120e:	b480      	push	{r7}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <BusFault_Handler+0x4>

08001214 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001218:	e7fe      	b.n	8001218 <UsageFault_Handler+0x4>

0800121a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121a:	b480      	push	{r7}
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr

08001236 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001236:	b480      	push	{r7}
 8001238:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr

08001244 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001248:	f000 f90e 	bl	8001468 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800124c:	bf00      	nop
 800124e:	bd80      	pop	{r7, pc}

08001250 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001254:	4802      	ldr	r0, [pc, #8]	; (8001260 <DMA1_Channel1_IRQHandler+0x10>)
 8001256:	f001 ff96 	bl	8003186 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	200000dc 	.word	0x200000dc

08001264 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA1_Channel6_IRQHandler+0x10>)
 800126a:	f001 ff8c 	bl	8003186 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	200001e8 	.word	0x200001e8

08001278 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <DMA1_Channel7_IRQHandler+0x10>)
 800127e:	f001 ff82 	bl	8003186 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	200001a0 	.word	0x200001a0

0800128c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <ADC1_IRQHandler+0x10>)
 8001292:	f000 fccd 	bl	8001c30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000078 	.word	0x20000078

080012a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM2_IRQHandler+0x10>)
 80012a6:	f004 fb15 	bl	80058d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000230 	.word	0x20000230

080012b4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C1_EV_IRQHandler+0x10>)
 80012ba:	f002 fa6e 	bl	800379a <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	2000014c 	.word	0x2000014c

080012c8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <I2C1_ER_IRQHandler+0x10>)
 80012ce:	f002 fa7e 	bl	80037ce <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	2000014c 	.word	0x2000014c

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f005 fe92 	bl	8007034 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20010000 	.word	0x20010000
 800133c:	00000400 	.word	0x00000400
 8001340:	2000032c 	.word	0x2000032c
 8001344:	20000480 	.word	0x20000480

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800136c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013a4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001370:	f7ff ffea 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001374:	480c      	ldr	r0, [pc, #48]	; (80013a8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001376:	490d      	ldr	r1, [pc, #52]	; (80013ac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001378:	4a0d      	ldr	r2, [pc, #52]	; (80013b0 <LoopForever+0xe>)
  movs r3, #0
 800137a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800137c:	e002      	b.n	8001384 <LoopCopyDataInit>

0800137e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800137e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001380:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001382:	3304      	adds	r3, #4

08001384 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001384:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001386:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001388:	d3f9      	bcc.n	800137e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800138c:	4c0a      	ldr	r4, [pc, #40]	; (80013b8 <LoopForever+0x16>)
  movs r3, #0
 800138e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001390:	e001      	b.n	8001396 <LoopFillZerobss>

08001392 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001392:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001394:	3204      	adds	r2, #4

08001396 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001396:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001398:	d3fb      	bcc.n	8001392 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800139a:	f005 fe51 	bl	8007040 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800139e:	f7ff f8fd 	bl	800059c <main>

080013a2 <LoopForever>:

LoopForever:
    b LoopForever
 80013a2:	e7fe      	b.n	80013a2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80013a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013ac:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80013b0:	08007a2c 	.word	0x08007a2c
  ldr r2, =_sbss
 80013b4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80013b8:	2000047c 	.word	0x2000047c

080013bc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013bc:	e7fe      	b.n	80013bc <CAN1_RX0_IRQHandler>

080013be <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f001 fd41 	bl	8002e50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ce:	2000      	movs	r0, #0
 80013d0:	f000 f80e 	bl	80013f0 <HAL_InitTick>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d002      	beq.n	80013e0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013da:	2301      	movs	r3, #1
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	e001      	b.n	80013e4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013e0:	f7ff fc82 	bl	8000ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013e4:	79fb      	ldrb	r3, [r7, #7]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3708      	adds	r7, #8
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}
	...

080013f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013fc:	4b17      	ldr	r3, [pc, #92]	; (800145c <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d023      	beq.n	800144c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_InitTick+0x70>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b14      	ldr	r3, [pc, #80]	; (800145c <HAL_InitTick+0x6c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f001 fd4d 	bl	8002eba <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10f      	bne.n	8001446 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	2b0f      	cmp	r3, #15
 800142a:	d809      	bhi.n	8001440 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800142c:	2200      	movs	r2, #0
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	f04f 30ff 	mov.w	r0, #4294967295
 8001434:	f001 fd17 	bl	8002e66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001438:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <HAL_InitTick+0x74>)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e007      	b.n	8001450 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e004      	b.n	8001450 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	e001      	b.n	8001450 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001450:	7bfb      	ldrb	r3, [r7, #15]
}
 8001452:	4618      	mov	r0, r3
 8001454:	3710      	adds	r7, #16
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000008 	.word	0x20000008
 8001460:	20000000 	.word	0x20000000
 8001464:	20000004 	.word	0x20000004

08001468 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800146c:	4b06      	ldr	r3, [pc, #24]	; (8001488 <HAL_IncTick+0x20>)
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	461a      	mov	r2, r3
 8001472:	4b06      	ldr	r3, [pc, #24]	; (800148c <HAL_IncTick+0x24>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4413      	add	r3, r2
 8001478:	4a04      	ldr	r2, [pc, #16]	; (800148c <HAL_IncTick+0x24>)
 800147a:	6013      	str	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
 8001486:	bf00      	nop
 8001488:	20000008 	.word	0x20000008
 800148c:	20000330 	.word	0x20000330

08001490 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  return uwTick;
 8001494:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_GetTick+0x14>)
 8001496:	681b      	ldr	r3, [r3, #0]
}
 8001498:	4618      	mov	r0, r3
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	20000330 	.word	0x20000330

080014a8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b084      	sub	sp, #16
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014b0:	f7ff ffee 	bl	8001490 <HAL_GetTick>
 80014b4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014c0:	d005      	beq.n	80014ce <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <HAL_Delay+0x44>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	461a      	mov	r2, r3
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	4413      	add	r3, r2
 80014cc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ce:	bf00      	nop
 80014d0:	f7ff ffde 	bl	8001490 <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	68fa      	ldr	r2, [r7, #12]
 80014dc:	429a      	cmp	r2, r3
 80014de:	d8f7      	bhi.n	80014d0 <HAL_Delay+0x28>
  {
  }
}
 80014e0:	bf00      	nop
 80014e2:	bf00      	nop
 80014e4:	3710      	adds	r7, #16
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000008 	.word	0x20000008

080014f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	609a      	str	r2, [r3, #8]
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr

08001516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001516:	b480      	push	{r7}
 8001518:	b083      	sub	sp, #12
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
 800151e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	431a      	orrs	r2, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	609a      	str	r2, [r3, #8]
}
 8001530:	bf00      	nop
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001558:	b480      	push	{r7}
 800155a:	b087      	sub	sp, #28
 800155c:	af00      	add	r7, sp, #0
 800155e:	60f8      	str	r0, [r7, #12]
 8001560:	60b9      	str	r1, [r7, #8]
 8001562:	607a      	str	r2, [r7, #4]
 8001564:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3360      	adds	r3, #96	; 0x60
 800156a:	461a      	mov	r2, r3
 800156c:	68bb      	ldr	r3, [r7, #8]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	4413      	add	r3, r2
 8001572:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b08      	ldr	r3, [pc, #32]	; (800159c <LL_ADC_SetOffset+0x44>)
 800157a:	4013      	ands	r3, r2
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	4313      	orrs	r3, r2
 8001588:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001590:	bf00      	nop
 8001592:	371c      	adds	r7, #28
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	03fff000 	.word	0x03fff000

080015a0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3360      	adds	r3, #96	; 0x60
 80015ae:	461a      	mov	r2, r3
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b087      	sub	sp, #28
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60f8      	str	r0, [r7, #12]
 80015d4:	60b9      	str	r1, [r7, #8]
 80015d6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	3360      	adds	r3, #96	; 0x60
 80015dc:	461a      	mov	r2, r3
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	4413      	add	r3, r2
 80015e4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80015f6:	bf00      	nop
 80015f8:	371c      	adds	r7, #28
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001602:	b480      	push	{r7}
 8001604:	b083      	sub	sp, #12
 8001606:	af00      	add	r7, sp, #0
 8001608:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001612:	2b00      	cmp	r3, #0
 8001614:	d101      	bne.n	800161a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001616:	2301      	movs	r3, #1
 8001618:	e000      	b.n	800161c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001628:	b480      	push	{r7}
 800162a:	b087      	sub	sp, #28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	3330      	adds	r3, #48	; 0x30
 8001638:	461a      	mov	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	0a1b      	lsrs	r3, r3, #8
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f003 030c 	and.w	r3, r3, #12
 8001644:	4413      	add	r3, r2
 8001646:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	68bb      	ldr	r3, [r7, #8]
 800164e:	f003 031f 	and.w	r3, r3, #31
 8001652:	211f      	movs	r1, #31
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	43db      	mvns	r3, r3
 800165a:	401a      	ands	r2, r3
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	0e9b      	lsrs	r3, r3, #26
 8001660:	f003 011f 	and.w	r1, r3, #31
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 031f 	and.w	r3, r3, #31
 800166a:	fa01 f303 	lsl.w	r3, r1, r3
 800166e:	431a      	orrs	r2, r3
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001674:	bf00      	nop
 8001676:	371c      	adds	r7, #28
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d101      	bne.n	8001698 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001694:	2301      	movs	r3, #1
 8001696:	e000      	b.n	800169a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr

080016a6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80016a6:	b480      	push	{r7}
 80016a8:	b087      	sub	sp, #28
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	3314      	adds	r3, #20
 80016b6:	461a      	mov	r2, r3
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	0e5b      	lsrs	r3, r3, #25
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	4413      	add	r3, r2
 80016c4:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	0d1b      	lsrs	r3, r3, #20
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	2107      	movs	r1, #7
 80016d4:	fa01 f303 	lsl.w	r3, r1, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	401a      	ands	r2, r3
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	0d1b      	lsrs	r3, r3, #20
 80016e0:	f003 031f 	and.w	r3, r3, #31
 80016e4:	6879      	ldr	r1, [r7, #4]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	431a      	orrs	r2, r3
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80016f0:	bf00      	nop
 80016f2:	371c      	adds	r7, #28
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001714:	43db      	mvns	r3, r3
 8001716:	401a      	ands	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f003 0318 	and.w	r3, r3, #24
 800171e:	4908      	ldr	r1, [pc, #32]	; (8001740 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001720:	40d9      	lsrs	r1, r3
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	400b      	ands	r3, r1
 8001726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800172a:	431a      	orrs	r2, r3
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001732:	bf00      	nop
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	0007ffff 	.word	0x0007ffff

08001744 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001754:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6093      	str	r3, [r2, #8]
}
 800175c:	bf00      	nop
 800175e:	370c      	adds	r7, #12
 8001760:	46bd      	mov	sp, r7
 8001762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001766:	4770      	bx	lr

08001768 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001778:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800177c:	d101      	bne.n	8001782 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001782:	2300      	movs	r3, #0
}
 8001784:	4618      	mov	r0, r3
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	689b      	ldr	r3, [r3, #8]
 800179c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80017a0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80017ac:	bf00      	nop
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80017cc:	d101      	bne.n	80017d2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80017ce:	2301      	movs	r3, #1
 80017d0:	e000      	b.n	80017d4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80017d2:	2300      	movs	r3, #0
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	689b      	ldr	r3, [r3, #8]
 80017ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80017f0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80017f4:	f043 0201 	orr.w	r2, r3, #1
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
 8001814:	f003 0301 	and.w	r3, r3, #1
 8001818:	2b01      	cmp	r3, #1
 800181a:	d101      	bne.n	8001820 <LL_ADC_IsEnabled+0x18>
 800181c:	2301      	movs	r3, #1
 800181e:	e000      	b.n	8001822 <LL_ADC_IsEnabled+0x1a>
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800182e:	b480      	push	{r7}
 8001830:	b083      	sub	sp, #12
 8001832:	af00      	add	r7, sp, #0
 8001834:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800183e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001842:	f043 0204 	orr.w	r2, r3, #4
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001856:	b480      	push	{r7}
 8001858:	b083      	sub	sp, #12
 800185a:	af00      	add	r7, sp, #0
 800185c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	689b      	ldr	r3, [r3, #8]
 8001862:	f003 0304 	and.w	r3, r3, #4
 8001866:	2b04      	cmp	r3, #4
 8001868:	d101      	bne.n	800186e <LL_ADC_REG_IsConversionOngoing+0x18>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800186e:	2300      	movs	r3, #0
}
 8001870:	4618      	mov	r0, r3
 8001872:	370c      	adds	r7, #12
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr

0800187c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	f003 0308 	and.w	r3, r3, #8
 800188c:	2b08      	cmp	r3, #8
 800188e:	d101      	bne.n	8001894 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001890:	2301      	movs	r3, #1
 8001892:	e000      	b.n	8001896 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001894:	2300      	movs	r3, #0
}
 8001896:	4618      	mov	r0, r3
 8001898:	370c      	adds	r7, #12
 800189a:	46bd      	mov	sp, r7
 800189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a0:	4770      	bx	lr
	...

080018a4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b088      	sub	sp, #32
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018ac:	2300      	movs	r3, #0
 80018ae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e126      	b.n	8001b0c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	691b      	ldr	r3, [r3, #16]
 80018c2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f7ff fa2f 	bl	8000d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	2200      	movs	r2, #0
 80018d6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff ff3f 	bl	8001768 <LL_ADC_IsDeepPowerDownEnabled>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d004      	beq.n	80018fa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff ff25 	bl	8001744 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7ff ff5a 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001904:	4603      	mov	r3, r0
 8001906:	2b00      	cmp	r3, #0
 8001908:	d115      	bne.n	8001936 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff3e 	bl	8001790 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001914:	4b7f      	ldr	r3, [pc, #508]	; (8001b14 <HAL_ADC_Init+0x270>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	099b      	lsrs	r3, r3, #6
 800191a:	4a7f      	ldr	r2, [pc, #508]	; (8001b18 <HAL_ADC_Init+0x274>)
 800191c:	fba2 2303 	umull	r2, r3, r2, r3
 8001920:	099b      	lsrs	r3, r3, #6
 8001922:	3301      	adds	r3, #1
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001928:	e002      	b.n	8001930 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	3b01      	subs	r3, #1
 800192e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f9      	bne.n	800192a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff ff3c 	bl	80017b8 <LL_ADC_IsInternalRegulatorEnabled>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d10d      	bne.n	8001962 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800194a:	f043 0210 	orr.w	r2, r3, #16
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	f043 0201 	orr.w	r2, r3, #1
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff ff75 	bl	8001856 <LL_ADC_REG_IsConversionOngoing>
 800196c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001972:	f003 0310 	and.w	r3, r3, #16
 8001976:	2b00      	cmp	r3, #0
 8001978:	f040 80bf 	bne.w	8001afa <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f040 80bb 	bne.w	8001afa <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800198c:	f043 0202 	orr.w	r2, r3, #2
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff ff35 	bl	8001808 <LL_ADC_IsEnabled>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d10b      	bne.n	80019bc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80019a4:	485d      	ldr	r0, [pc, #372]	; (8001b1c <HAL_ADC_Init+0x278>)
 80019a6:	f7ff ff2f 	bl	8001808 <LL_ADC_IsEnabled>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d105      	bne.n	80019bc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	4619      	mov	r1, r3
 80019b6:	485a      	ldr	r0, [pc, #360]	; (8001b20 <HAL_ADC_Init+0x27c>)
 80019b8:	f7ff fd9a 	bl	80014f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	7e5b      	ldrb	r3, [r3, #25]
 80019c0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019c6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80019cc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80019d2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019da:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80019dc:	4313      	orrs	r3, r2
 80019de:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d106      	bne.n	80019f8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	3b01      	subs	r3, #1
 80019f0:	045b      	lsls	r3, r3, #17
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d009      	beq.n	8001a14 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a04:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	68da      	ldr	r2, [r3, #12]
 8001a1a:	4b42      	ldr	r3, [pc, #264]	; (8001b24 <HAL_ADC_Init+0x280>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	687a      	ldr	r2, [r7, #4]
 8001a20:	6812      	ldr	r2, [r2, #0]
 8001a22:	69b9      	ldr	r1, [r7, #24]
 8001a24:	430b      	orrs	r3, r1
 8001a26:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff25 	bl	800187c <LL_ADC_INJ_IsConversionOngoing>
 8001a32:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d13d      	bne.n	8001ab6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d13a      	bne.n	8001ab6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a44:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a4c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a5c:	f023 0302 	bic.w	r3, r3, #2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6812      	ldr	r2, [r2, #0]
 8001a64:	69b9      	ldr	r1, [r7, #24]
 8001a66:	430b      	orrs	r3, r1
 8001a68:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d118      	bne.n	8001aa6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a8a:	4311      	orrs	r1, r2
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a90:	4311      	orrs	r1, r2
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a96:	430a      	orrs	r2, r1
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f042 0201 	orr.w	r2, r2, #1
 8001aa2:	611a      	str	r2, [r3, #16]
 8001aa4:	e007      	b.n	8001ab6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	691a      	ldr	r2, [r3, #16]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 0201 	bic.w	r2, r2, #1
 8001ab4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691b      	ldr	r3, [r3, #16]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10c      	bne.n	8001ad8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	f023 010f 	bic.w	r1, r3, #15
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	69db      	ldr	r3, [r3, #28]
 8001acc:	1e5a      	subs	r2, r3, #1
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	631a      	str	r2, [r3, #48]	; 0x30
 8001ad6:	e007      	b.n	8001ae8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 020f 	bic.w	r2, r2, #15
 8001ae6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aec:	f023 0303 	bic.w	r3, r3, #3
 8001af0:	f043 0201 	orr.w	r2, r3, #1
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	655a      	str	r2, [r3, #84]	; 0x54
 8001af8:	e007      	b.n	8001b0a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001afe:	f043 0210 	orr.w	r2, r3, #16
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001b0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3720      	adds	r7, #32
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	20000000 	.word	0x20000000
 8001b18:	053e2d63 	.word	0x053e2d63
 8001b1c:	50040000 	.word	0x50040000
 8001b20:	50040300 	.word	0x50040300
 8001b24:	fff0c007 	.word	0xfff0c007

08001b28 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fe8c 	bl	8001856 <LL_ADC_REG_IsConversionOngoing>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d167      	bne.n	8001c14 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d101      	bne.n	8001b52 <HAL_ADC_Start_DMA+0x2a>
 8001b4e:	2302      	movs	r3, #2
 8001b50:	e063      	b.n	8001c1a <HAL_ADC_Start_DMA+0xf2>
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 fe1c 	bl	8002798 <ADC_Enable>
 8001b60:	4603      	mov	r3, r0
 8001b62:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b64:	7dfb      	ldrb	r3, [r7, #23]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d14f      	bne.n	8001c0a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b6e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b72:	f023 0301 	bic.w	r3, r3, #1
 8001b76:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d006      	beq.n	8001b98 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	f023 0206 	bic.w	r2, r3, #6
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	659a      	str	r2, [r3, #88]	; 0x58
 8001b96:	e002      	b.n	8001b9e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ba2:	4a20      	ldr	r2, [pc, #128]	; (8001c24 <HAL_ADC_Start_DMA+0xfc>)
 8001ba4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001baa:	4a1f      	ldr	r2, [pc, #124]	; (8001c28 <HAL_ADC_Start_DMA+0x100>)
 8001bac:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bb2:	4a1e      	ldr	r2, [pc, #120]	; (8001c2c <HAL_ADC_Start_DMA+0x104>)
 8001bb4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	221c      	movs	r2, #28
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	685a      	ldr	r2, [r3, #4]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0210 	orr.w	r2, r2, #16
 8001bd4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f042 0201 	orr.w	r2, r2, #1
 8001be4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	3340      	adds	r3, #64	; 0x40
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	68ba      	ldr	r2, [r7, #8]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f001 fa25 	bl	8003044 <HAL_DMA_Start_IT>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff fe13 	bl	800182e <LL_ADC_REG_StartConversion>
 8001c08:	e006      	b.n	8001c18 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001c12:	e001      	b.n	8001c18 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c14:	2302      	movs	r3, #2
 8001c16:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c18:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	3718      	adds	r7, #24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	080028a5 	.word	0x080028a5
 8001c28:	0800297d 	.word	0x0800297d
 8001c2c:	08002999 	.word	0x08002999

08001c30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c38:	2300      	movs	r3, #0
 8001c3a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d017      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x56>
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f003 0302 	and.w	r3, r3, #2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d012      	beq.n	8001c86 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c64:	f003 0310 	and.w	r3, r3, #16
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d105      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c70:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 fecf 	bl	8002a1c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2202      	movs	r2, #2
 8001c84:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	f003 0304 	and.w	r3, r3, #4
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d004      	beq.n	8001c9a <HAL_ADC_IRQHandler+0x6a>
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	f003 0304 	and.w	r3, r3, #4
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d109      	bne.n	8001cae <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d05e      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d059      	beq.n	8001d62 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cb2:	f003 0310 	and.w	r3, r3, #16
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d105      	bne.n	8001cc6 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff fc99 	bl	8001602 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d03e      	beq.n	8001d54 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d135      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f003 0308 	and.w	r3, r3, #8
 8001cf2:	2b08      	cmp	r3, #8
 8001cf4:	d12e      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f7ff fdab 	bl	8001856 <LL_ADC_REG_IsConversionOngoing>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11a      	bne.n	8001d3c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 020c 	bic.w	r2, r2, #12
 8001d14:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d112      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	655a      	str	r2, [r3, #84]	; 0x54
 8001d3a:	e00b      	b.n	8001d54 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d40:	f043 0210 	orr.w	r2, r3, #16
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	f043 0201 	orr.w	r2, r3, #1
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001d54:	6878      	ldr	r0, [r7, #4]
 8001d56:	f7fe fc11 	bl	800057c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d004      	beq.n	8001d76 <HAL_ADC_IRQHandler+0x146>
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	f003 0320 	and.w	r3, r3, #32
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d109      	bne.n	8001d8a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d072      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d06d      	beq.n	8001e66 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8e:	f003 0310 	and.w	r3, r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d105      	bne.n	8001da2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d9a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff fc6a 	bl	8001680 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001dac:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4618      	mov	r0, r3
 8001db4:	f7ff fc25 	bl	8001602 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001db8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d047      	beq.n	8001e58 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d007      	beq.n	8001de2 <HAL_ADC_IRQHandler+0x1b2>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d03f      	beq.n	8001e58 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d13a      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dec:	2b40      	cmp	r3, #64	; 0x40
 8001dee:	d133      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d12e      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fd3c 	bl	800187c <LL_ADC_INJ_IsConversionOngoing>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d11a      	bne.n	8001e40 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	685a      	ldr	r2, [r3, #4]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001e18:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d112      	bne.n	8001e58 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e36:	f043 0201 	orr.w	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	655a      	str	r2, [r3, #84]	; 0x54
 8001e3e:	e00b      	b.n	8001e58 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e44:	f043 0210 	orr.w	r2, r3, #16
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	f043 0201 	orr.w	r2, r3, #1
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f000 fdb7 	bl	80029cc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	2260      	movs	r2, #96	; 0x60
 8001e64:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d011      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x264>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d00c      	beq.n	8001e94 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f890 	bl	8001fac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2280      	movs	r2, #128	; 0x80
 8001e92:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x294>
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f000 fd9d 	bl	80029f4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ec2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001ec4:	69bb      	ldr	r3, [r7, #24]
 8001ec6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d012      	beq.n	8001ef4 <HAL_ADC_IRQHandler+0x2c4>
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001edc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fd8f 	bl	8002a08 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001ef4:	69bb      	ldr	r3, [r7, #24]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02a      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x324>
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d025      	beq.n	8001f54 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d102      	bne.n	8001f16 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001f10:	2301      	movs	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	e008      	b.n	8001f28 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0301 	and.w	r3, r3, #1
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001f24:	2301      	movs	r3, #1
 8001f26:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d10e      	bne.n	8001f4c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f3e:	f043 0202 	orr.w	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f46:	6878      	ldr	r0, [r7, #4]
 8001f48:	f000 f83a 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2210      	movs	r2, #16
 8001f52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d018      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x360>
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d013      	beq.n	8001f90 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f6c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	f043 0208 	orr.w	r2, r3, #8
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f88:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 fd28 	bl	80029e0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001f90:	bf00      	nop
 8001f92:	3720      	adds	r7, #32
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001fa0:	bf00      	nop
 8001fa2:	370c      	adds	r7, #12
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001fb4:	bf00      	nop
 8001fb6:	370c      	adds	r7, #12
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b083      	sub	sp, #12
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fc8:	bf00      	nop
 8001fca:	370c      	adds	r7, #12
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b0b6      	sub	sp, #216	; 0xd8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_ADC_ConfigChannel+0x22>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e3bb      	b.n	800276e <HAL_ADC_ConfigChannel+0x79a>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fc27 	bl	8001856 <LL_ADC_REG_IsConversionOngoing>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	f040 83a0 	bne.w	8002750 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	2b05      	cmp	r3, #5
 800201e:	d824      	bhi.n	800206a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	3b02      	subs	r3, #2
 8002026:	2b03      	cmp	r3, #3
 8002028:	d81b      	bhi.n	8002062 <HAL_ADC_ConfigChannel+0x8e>
 800202a:	a201      	add	r2, pc, #4	; (adr r2, 8002030 <HAL_ADC_ConfigChannel+0x5c>)
 800202c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002030:	08002041 	.word	0x08002041
 8002034:	08002049 	.word	0x08002049
 8002038:	08002051 	.word	0x08002051
 800203c:	08002059 	.word	0x08002059
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002040:	230c      	movs	r3, #12
 8002042:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002046:	e010      	b.n	800206a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002048:	2312      	movs	r3, #18
 800204a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800204e:	e00c      	b.n	800206a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002050:	2318      	movs	r3, #24
 8002052:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002056:	e008      	b.n	800206a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002058:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002060:	e003      	b.n	800206a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002062:	2306      	movs	r3, #6
 8002064:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002068:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6818      	ldr	r0, [r3, #0]
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002078:	f7ff fad6 	bl	8001628 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4618      	mov	r0, r3
 8002082:	f7ff fbe8 	bl	8001856 <LL_ADC_REG_IsConversionOngoing>
 8002086:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fbf4 	bl	800187c <LL_ADC_INJ_IsConversionOngoing>
 8002094:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002098:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800209c:	2b00      	cmp	r3, #0
 800209e:	f040 81a4 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	f040 819f 	bne.w	80023ea <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6818      	ldr	r0, [r3, #0]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	6819      	ldr	r1, [r3, #0]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	461a      	mov	r2, r3
 80020ba:	f7ff faf4 	bl	80016a6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	695a      	ldr	r2, [r3, #20]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	08db      	lsrs	r3, r3, #3
 80020ca:	f003 0303 	and.w	r3, r3, #3
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	691b      	ldr	r3, [r3, #16]
 80020dc:	2b04      	cmp	r3, #4
 80020de:	d00a      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6818      	ldr	r0, [r3, #0]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	6919      	ldr	r1, [r3, #16]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80020f0:	f7ff fa32 	bl	8001558 <LL_ADC_SetOffset>
 80020f4:	e179      	b.n	80023ea <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2100      	movs	r1, #0
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fa4f 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 8002102:	4603      	mov	r3, r0
 8002104:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002108:	2b00      	cmp	r3, #0
 800210a:	d10a      	bne.n	8002122 <HAL_ADC_ConfigChannel+0x14e>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2100      	movs	r1, #0
 8002112:	4618      	mov	r0, r3
 8002114:	f7ff fa44 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 8002118:	4603      	mov	r3, r0
 800211a:	0e9b      	lsrs	r3, r3, #26
 800211c:	f003 021f 	and.w	r2, r3, #31
 8002120:	e01e      	b.n	8002160 <HAL_ADC_ConfigChannel+0x18c>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2100      	movs	r1, #0
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff fa39 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 800212e:	4603      	mov	r3, r0
 8002130:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002138:	fa93 f3a3 	rbit	r3, r3
 800213c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002140:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002144:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002148:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002150:	2320      	movs	r3, #32
 8002152:	e004      	b.n	800215e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002154:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002158:	fab3 f383 	clz	r3, r3
 800215c:	b2db      	uxtb	r3, r3
 800215e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d105      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x1a4>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 031f 	and.w	r3, r3, #31
 8002176:	e018      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1d6>
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002180:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002184:	fa93 f3a3 	rbit	r3, r3
 8002188:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 800218c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002190:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002194:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d101      	bne.n	80021a0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 800219c:	2320      	movs	r3, #32
 800219e:	e004      	b.n	80021aa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80021a0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80021a4:	fab3 f383 	clz	r3, r3
 80021a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d106      	bne.n	80021bc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fa08 	bl	80015cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2101      	movs	r1, #1
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7ff f9ec 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d10a      	bne.n	80021e8 <HAL_ADC_ConfigChannel+0x214>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	2101      	movs	r1, #1
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff f9e1 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 80021de:	4603      	mov	r3, r0
 80021e0:	0e9b      	lsrs	r3, r3, #26
 80021e2:	f003 021f 	and.w	r2, r3, #31
 80021e6:	e01e      	b.n	8002226 <HAL_ADC_ConfigChannel+0x252>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2101      	movs	r1, #1
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff f9d6 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 80021f4:	4603      	mov	r3, r0
 80021f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002206:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800220a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800220e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002216:	2320      	movs	r3, #32
 8002218:	e004      	b.n	8002224 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800221a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800221e:	fab3 f383 	clz	r3, r3
 8002222:	b2db      	uxtb	r3, r3
 8002224:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800222e:	2b00      	cmp	r3, #0
 8002230:	d105      	bne.n	800223e <HAL_ADC_ConfigChannel+0x26a>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	0e9b      	lsrs	r3, r3, #26
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	e018      	b.n	8002270 <HAL_ADC_ConfigChannel+0x29c>
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002246:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800224a:	fa93 f3a3 	rbit	r3, r3
 800224e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002252:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002256:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800225a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800225e:	2b00      	cmp	r3, #0
 8002260:	d101      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002262:	2320      	movs	r3, #32
 8002264:	e004      	b.n	8002270 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002266:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002270:	429a      	cmp	r2, r3
 8002272:	d106      	bne.n	8002282 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2200      	movs	r2, #0
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff f9a5 	bl	80015cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2102      	movs	r1, #2
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff f989 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 800228e:	4603      	mov	r3, r0
 8002290:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002294:	2b00      	cmp	r3, #0
 8002296:	d10a      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x2da>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff f97e 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 80022a4:	4603      	mov	r3, r0
 80022a6:	0e9b      	lsrs	r3, r3, #26
 80022a8:	f003 021f 	and.w	r2, r3, #31
 80022ac:	e01e      	b.n	80022ec <HAL_ADC_ConfigChannel+0x318>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2102      	movs	r1, #2
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff f973 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 80022ba:	4603      	mov	r3, r0
 80022bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80022c4:	fa93 f3a3 	rbit	r3, r3
 80022c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 80022cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 80022d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d101      	bne.n	80022e0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 80022dc:	2320      	movs	r3, #32
 80022de:	e004      	b.n	80022ea <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80022e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d105      	bne.n	8002304 <HAL_ADC_ConfigChannel+0x330>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	0e9b      	lsrs	r3, r3, #26
 80022fe:	f003 031f 	and.w	r3, r3, #31
 8002302:	e014      	b.n	800232e <HAL_ADC_ConfigChannel+0x35a>
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800230c:	fa93 f3a3 	rbit	r3, r3
 8002310:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002312:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002314:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002318:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800231c:	2b00      	cmp	r3, #0
 800231e:	d101      	bne.n	8002324 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002320:	2320      	movs	r3, #32
 8002322:	e004      	b.n	800232e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002328:	fab3 f383 	clz	r3, r3
 800232c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800232e:	429a      	cmp	r2, r3
 8002330:	d106      	bne.n	8002340 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	2200      	movs	r2, #0
 8002338:	2102      	movs	r1, #2
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff f946 	bl	80015cc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2103      	movs	r1, #3
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff f92a 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 800234c:	4603      	mov	r3, r0
 800234e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10a      	bne.n	800236c <HAL_ADC_ConfigChannel+0x398>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	2103      	movs	r1, #3
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff f91f 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 8002362:	4603      	mov	r3, r0
 8002364:	0e9b      	lsrs	r3, r3, #26
 8002366:	f003 021f 	and.w	r2, r3, #31
 800236a:	e017      	b.n	800239c <HAL_ADC_ConfigChannel+0x3c8>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2103      	movs	r1, #3
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff f914 	bl	80015a0 <LL_ADC_GetOffsetChannel>
 8002378:	4603      	mov	r3, r0
 800237a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002384:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002386:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800238e:	2320      	movs	r3, #32
 8002390:	e003      	b.n	800239a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002392:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002394:	fab3 f383 	clz	r3, r3
 8002398:	b2db      	uxtb	r3, r3
 800239a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d105      	bne.n	80023b4 <HAL_ADC_ConfigChannel+0x3e0>
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	0e9b      	lsrs	r3, r3, #26
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	e011      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x404>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80023c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80023c4:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80023c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80023cc:	2320      	movs	r3, #32
 80023ce:	e003      	b.n	80023d8 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80023d0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023d8:	429a      	cmp	r2, r3
 80023da:	d106      	bne.n	80023ea <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2200      	movs	r2, #0
 80023e2:	2103      	movs	r1, #3
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff f8f1 	bl	80015cc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7ff fa0a 	bl	8001808 <LL_ADC_IsEnabled>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	f040 8140 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6818      	ldr	r0, [r3, #0]
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	6819      	ldr	r1, [r3, #0]
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	461a      	mov	r2, r3
 800240a:	f7ff f977 	bl	80016fc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	4a8f      	ldr	r2, [pc, #572]	; (8002650 <HAL_ADC_ConfigChannel+0x67c>)
 8002414:	4293      	cmp	r3, r2
 8002416:	f040 8131 	bne.w	800267c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10b      	bne.n	8002442 <HAL_ADC_ConfigChannel+0x46e>
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	0e9b      	lsrs	r3, r3, #26
 8002430:	3301      	adds	r3, #1
 8002432:	f003 031f 	and.w	r3, r3, #31
 8002436:	2b09      	cmp	r3, #9
 8002438:	bf94      	ite	ls
 800243a:	2301      	movls	r3, #1
 800243c:	2300      	movhi	r3, #0
 800243e:	b2db      	uxtb	r3, r3
 8002440:	e019      	b.n	8002476 <HAL_ADC_ConfigChannel+0x4a2>
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002448:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800244a:	fa93 f3a3 	rbit	r3, r3
 800244e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002450:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002452:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002454:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800245a:	2320      	movs	r3, #32
 800245c:	e003      	b.n	8002466 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800245e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002460:	fab3 f383 	clz	r3, r3
 8002464:	b2db      	uxtb	r3, r3
 8002466:	3301      	adds	r3, #1
 8002468:	f003 031f 	and.w	r3, r3, #31
 800246c:	2b09      	cmp	r3, #9
 800246e:	bf94      	ite	ls
 8002470:	2301      	movls	r3, #1
 8002472:	2300      	movhi	r3, #0
 8002474:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002476:	2b00      	cmp	r3, #0
 8002478:	d079      	beq.n	800256e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d107      	bne.n	8002496 <HAL_ADC_ConfigChannel+0x4c2>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	3301      	adds	r3, #1
 800248e:	069b      	lsls	r3, r3, #26
 8002490:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002494:	e015      	b.n	80024c2 <HAL_ADC_ConfigChannel+0x4ee>
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80024a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80024a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80024ae:	2320      	movs	r3, #32
 80024b0:	e003      	b.n	80024ba <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80024b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
 80024ba:	3301      	adds	r3, #1
 80024bc:	069b      	lsls	r3, r3, #26
 80024be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_ADC_ConfigChannel+0x50e>
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	0e9b      	lsrs	r3, r3, #26
 80024d4:	3301      	adds	r3, #1
 80024d6:	f003 031f 	and.w	r3, r3, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f303 	lsl.w	r3, r1, r3
 80024e0:	e017      	b.n	8002512 <HAL_ADC_ConfigChannel+0x53e>
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80024ea:	fa93 f3a3 	rbit	r3, r3
 80024ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80024f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80024f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80024fa:	2320      	movs	r3, #32
 80024fc:	e003      	b.n	8002506 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80024fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002500:	fab3 f383 	clz	r3, r3
 8002504:	b2db      	uxtb	r3, r3
 8002506:	3301      	adds	r3, #1
 8002508:	f003 031f 	and.w	r3, r3, #31
 800250c:	2101      	movs	r1, #1
 800250e:	fa01 f303 	lsl.w	r3, r1, r3
 8002512:	ea42 0103 	orr.w	r1, r2, r3
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800251e:	2b00      	cmp	r3, #0
 8002520:	d10a      	bne.n	8002538 <HAL_ADC_ConfigChannel+0x564>
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	0e9b      	lsrs	r3, r3, #26
 8002528:	3301      	adds	r3, #1
 800252a:	f003 021f 	and.w	r2, r3, #31
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	051b      	lsls	r3, r3, #20
 8002536:	e018      	b.n	800256a <HAL_ADC_ConfigChannel+0x596>
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002548:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	2b00      	cmp	r3, #0
 800254e:	d101      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002550:	2320      	movs	r3, #32
 8002552:	e003      	b.n	800255c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002556:	fab3 f383 	clz	r3, r3
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3301      	adds	r3, #1
 800255e:	f003 021f 	and.w	r2, r3, #31
 8002562:	4613      	mov	r3, r2
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	4413      	add	r3, r2
 8002568:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800256a:	430b      	orrs	r3, r1
 800256c:	e081      	b.n	8002672 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002576:	2b00      	cmp	r3, #0
 8002578:	d107      	bne.n	800258a <HAL_ADC_ConfigChannel+0x5b6>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0e9b      	lsrs	r3, r3, #26
 8002580:	3301      	adds	r3, #1
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002588:	e015      	b.n	80025b6 <HAL_ADC_ConfigChannel+0x5e2>
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002592:	fa93 f3a3 	rbit	r3, r3
 8002596:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800259c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d101      	bne.n	80025a6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80025a2:	2320      	movs	r3, #32
 80025a4:	e003      	b.n	80025ae <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80025a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025a8:	fab3 f383 	clz	r3, r3
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	069b      	lsls	r3, r3, #26
 80025b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d109      	bne.n	80025d6 <HAL_ADC_ConfigChannel+0x602>
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	0e9b      	lsrs	r3, r3, #26
 80025c8:	3301      	adds	r3, #1
 80025ca:	f003 031f 	and.w	r3, r3, #31
 80025ce:	2101      	movs	r1, #1
 80025d0:	fa01 f303 	lsl.w	r3, r1, r3
 80025d4:	e017      	b.n	8002606 <HAL_ADC_ConfigChannel+0x632>
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	fa93 f3a3 	rbit	r3, r3
 80025e2:	61bb      	str	r3, [r7, #24]
  return result;
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d101      	bne.n	80025f2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80025ee:	2320      	movs	r3, #32
 80025f0:	e003      	b.n	80025fa <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80025f2:	6a3b      	ldr	r3, [r7, #32]
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f003 031f 	and.w	r3, r3, #31
 8002600:	2101      	movs	r1, #1
 8002602:	fa01 f303 	lsl.w	r3, r1, r3
 8002606:	ea42 0103 	orr.w	r1, r2, r3
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002612:	2b00      	cmp	r3, #0
 8002614:	d10d      	bne.n	8002632 <HAL_ADC_ConfigChannel+0x65e>
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	0e9b      	lsrs	r3, r3, #26
 800261c:	3301      	adds	r3, #1
 800261e:	f003 021f 	and.w	r2, r3, #31
 8002622:	4613      	mov	r3, r2
 8002624:	005b      	lsls	r3, r3, #1
 8002626:	4413      	add	r3, r2
 8002628:	3b1e      	subs	r3, #30
 800262a:	051b      	lsls	r3, r3, #20
 800262c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002630:	e01e      	b.n	8002670 <HAL_ADC_ConfigChannel+0x69c>
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	693b      	ldr	r3, [r7, #16]
 800263a:	fa93 f3a3 	rbit	r3, r3
 800263e:	60fb      	str	r3, [r7, #12]
  return result;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800264a:	2320      	movs	r3, #32
 800264c:	e006      	b.n	800265c <HAL_ADC_ConfigChannel+0x688>
 800264e:	bf00      	nop
 8002650:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	fab3 f383 	clz	r3, r3
 800265a:	b2db      	uxtb	r3, r3
 800265c:	3301      	adds	r3, #1
 800265e:	f003 021f 	and.w	r2, r3, #31
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	3b1e      	subs	r3, #30
 800266a:	051b      	lsls	r3, r3, #20
 800266c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002670:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002676:	4619      	mov	r1, r3
 8002678:	f7ff f815 	bl	80016a6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	4b3d      	ldr	r3, [pc, #244]	; (8002778 <HAL_ADC_ConfigChannel+0x7a4>)
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d06c      	beq.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002688:	483c      	ldr	r0, [pc, #240]	; (800277c <HAL_ADC_ConfigChannel+0x7a8>)
 800268a:	f7fe ff57 	bl	800153c <LL_ADC_GetCommonPathInternalCh>
 800268e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <HAL_ADC_ConfigChannel+0x7ac>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d127      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800269c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d121      	bne.n	80026ec <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a35      	ldr	r2, [pc, #212]	; (8002784 <HAL_ADC_ConfigChannel+0x7b0>)
 80026ae:	4293      	cmp	r3, r2
 80026b0:	d157      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80026b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80026ba:	4619      	mov	r1, r3
 80026bc:	482f      	ldr	r0, [pc, #188]	; (800277c <HAL_ADC_ConfigChannel+0x7a8>)
 80026be:	f7fe ff2a 	bl	8001516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026c2:	4b31      	ldr	r3, [pc, #196]	; (8002788 <HAL_ADC_ConfigChannel+0x7b4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	099b      	lsrs	r3, r3, #6
 80026c8:	4a30      	ldr	r2, [pc, #192]	; (800278c <HAL_ADC_ConfigChannel+0x7b8>)
 80026ca:	fba2 2303 	umull	r2, r3, r2, r3
 80026ce:	099b      	lsrs	r3, r3, #6
 80026d0:	1c5a      	adds	r2, r3, #1
 80026d2:	4613      	mov	r3, r2
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026dc:	e002      	b.n	80026e4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	3b01      	subs	r3, #1
 80026e2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d1f9      	bne.n	80026de <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80026ea:	e03a      	b.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a27      	ldr	r2, [pc, #156]	; (8002790 <HAL_ADC_ConfigChannel+0x7bc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d113      	bne.n	800271e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80026f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80026fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10d      	bne.n	800271e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a1f      	ldr	r2, [pc, #124]	; (8002784 <HAL_ADC_ConfigChannel+0x7b0>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d12a      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800270c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002714:	4619      	mov	r1, r3
 8002716:	4819      	ldr	r0, [pc, #100]	; (800277c <HAL_ADC_ConfigChannel+0x7a8>)
 8002718:	f7fe fefd 	bl	8001516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800271c:	e021      	b.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a1c      	ldr	r2, [pc, #112]	; (8002794 <HAL_ADC_ConfigChannel+0x7c0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d11c      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002728:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d116      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a12      	ldr	r2, [pc, #72]	; (8002784 <HAL_ADC_ConfigChannel+0x7b0>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d111      	bne.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800273e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002746:	4619      	mov	r1, r3
 8002748:	480c      	ldr	r0, [pc, #48]	; (800277c <HAL_ADC_ConfigChannel+0x7a8>)
 800274a:	f7fe fee4 	bl	8001516 <LL_ADC_SetCommonPathInternalCh>
 800274e:	e008      	b.n	8002762 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f043 0220 	orr.w	r2, r3, #32
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800276a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800276e:	4618      	mov	r0, r3
 8002770:	37d8      	adds	r7, #216	; 0xd8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	80080000 	.word	0x80080000
 800277c:	50040300 	.word	0x50040300
 8002780:	c7520000 	.word	0xc7520000
 8002784:	50040000 	.word	0x50040000
 8002788:	20000000 	.word	0x20000000
 800278c:	053e2d63 	.word	0x053e2d63
 8002790:	cb840000 	.word	0xcb840000
 8002794:	80000001 	.word	0x80000001

08002798 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7ff f82d 	bl	8001808 <LL_ADC_IsEnabled>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d169      	bne.n	8002888 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	4b36      	ldr	r3, [pc, #216]	; (8002894 <ADC_Enable+0xfc>)
 80027bc:	4013      	ands	r3, r2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00d      	beq.n	80027de <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c6:	f043 0210 	orr.w	r2, r3, #16
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d2:	f043 0201 	orr.w	r2, r3, #1
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e055      	b.n	800288a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7fe fffc 	bl	80017e0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027e8:	482b      	ldr	r0, [pc, #172]	; (8002898 <ADC_Enable+0x100>)
 80027ea:	f7fe fea7 	bl	800153c <LL_ADC_GetCommonPathInternalCh>
 80027ee:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80027f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d013      	beq.n	8002820 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027f8:	4b28      	ldr	r3, [pc, #160]	; (800289c <ADC_Enable+0x104>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	4a28      	ldr	r2, [pc, #160]	; (80028a0 <ADC_Enable+0x108>)
 8002800:	fba2 2303 	umull	r2, r3, r2, r3
 8002804:	099b      	lsrs	r3, r3, #6
 8002806:	1c5a      	adds	r2, r3, #1
 8002808:	4613      	mov	r3, r2
 800280a:	005b      	lsls	r3, r3, #1
 800280c:	4413      	add	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002812:	e002      	b.n	800281a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	3b01      	subs	r3, #1
 8002818:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f9      	bne.n	8002814 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002820:	f7fe fe36 	bl	8001490 <HAL_GetTick>
 8002824:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002826:	e028      	b.n	800287a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fe ffeb 	bl	8001808 <LL_ADC_IsEnabled>
 8002832:	4603      	mov	r3, r0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d104      	bne.n	8002842 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4618      	mov	r0, r3
 800283e:	f7fe ffcf 	bl	80017e0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002842:	f7fe fe25 	bl	8001490 <HAL_GetTick>
 8002846:	4602      	mov	r2, r0
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	2b02      	cmp	r3, #2
 800284e:	d914      	bls.n	800287a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b01      	cmp	r3, #1
 800285c:	d00d      	beq.n	800287a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002862:	f043 0210 	orr.w	r2, r3, #16
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800286e:	f043 0201 	orr.w	r2, r3, #1
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e007      	b.n	800288a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d1cf      	bne.n	8002828 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	8000003f 	.word	0x8000003f
 8002898:	50040300 	.word	0x50040300
 800289c:	20000000 	.word	0x20000000
 80028a0:	053e2d63 	.word	0x053e2d63

080028a4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d14b      	bne.n	8002956 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0308 	and.w	r3, r3, #8
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d021      	beq.n	800291c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fe fe90 	bl	8001602 <LL_ADC_REG_IsTriggerSourceSWStart>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d032      	beq.n	800294e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68db      	ldr	r3, [r3, #12]
 80028ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d12b      	bne.n	800294e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d11f      	bne.n	800294e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002912:	f043 0201 	orr.w	r2, r3, #1
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	655a      	str	r2, [r3, #84]	; 0x54
 800291a:	e018      	b.n	800294e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d111      	bne.n	800294e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800293a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d105      	bne.n	800294e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002946:	f043 0201 	orr.w	r2, r3, #1
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800294e:	68f8      	ldr	r0, [r7, #12]
 8002950:	f7fd fe14 	bl	800057c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002954:	e00e      	b.n	8002974 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800295a:	f003 0310 	and.w	r3, r3, #16
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fb2c 	bl	8001fc0 <HAL_ADC_ErrorCallback>
}
 8002968:	e004      	b.n	8002974 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800296e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	4798      	blx	r3
}
 8002974:	bf00      	nop
 8002976:	3710      	adds	r7, #16
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}

0800297c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f7ff fb04 	bl	8001f98 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002990:	bf00      	nop
 8002992:	3710      	adds	r7, #16
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}

08002998 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029aa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	f043 0204 	orr.w	r2, r3, #4
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff fafe 	bl	8001fc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80029c4:	bf00      	nop
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029e0:	b480      	push	{r7}
 80029e2:	b083      	sub	sp, #12
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029e8:	bf00      	nop
 80029ea:	370c      	adds	r7, #12
 80029ec:	46bd      	mov	sp, r7
 80029ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f2:	4770      	bx	lr

080029f4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e0ed      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fa0a 	bl	8000e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a64:	f7fe fd14 	bl	8001490 <HAL_GetTick>
 8002a68:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a6a:	e012      	b.n	8002a92 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a6c:	f7fe fd10 	bl	8001490 <HAL_GetTick>
 8002a70:	4602      	mov	r2, r0
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1ad3      	subs	r3, r2, r3
 8002a76:	2b0a      	cmp	r3, #10
 8002a78:	d90b      	bls.n	8002a92 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2205      	movs	r2, #5
 8002a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e0c5      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f003 0301 	and.w	r3, r3, #1
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d0e5      	beq.n	8002a6c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	681a      	ldr	r2, [r3, #0]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f022 0202 	bic.w	r2, r2, #2
 8002aae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab0:	f7fe fcee 	bl	8001490 <HAL_GetTick>
 8002ab4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ab6:	e012      	b.n	8002ade <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ab8:	f7fe fcea 	bl	8001490 <HAL_GetTick>
 8002abc:	4602      	mov	r2, r0
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	2b0a      	cmp	r3, #10
 8002ac4:	d90b      	bls.n	8002ade <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2205      	movs	r2, #5
 8002ad6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ada:	2301      	movs	r3, #1
 8002adc:	e09f      	b.n	8002c1e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0302 	and.w	r3, r3, #2
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1e5      	bne.n	8002ab8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	7e1b      	ldrb	r3, [r3, #24]
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d108      	bne.n	8002b06 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	e007      	b.n	8002b16 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	7e5b      	ldrb	r3, [r3, #25]
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d108      	bne.n	8002b30 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	e007      	b.n	8002b40 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	7e9b      	ldrb	r3, [r3, #26]
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d108      	bne.n	8002b5a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0220 	orr.w	r2, r2, #32
 8002b56:	601a      	str	r2, [r3, #0]
 8002b58:	e007      	b.n	8002b6a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0220 	bic.w	r2, r2, #32
 8002b68:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	7edb      	ldrb	r3, [r3, #27]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d108      	bne.n	8002b84 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e007      	b.n	8002b94 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	681a      	ldr	r2, [r3, #0]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f042 0210 	orr.w	r2, r2, #16
 8002b92:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7f1b      	ldrb	r3, [r3, #28]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d108      	bne.n	8002bae <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f042 0208 	orr.w	r2, r2, #8
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e007      	b.n	8002bbe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f022 0208 	bic.w	r2, r2, #8
 8002bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	7f5b      	ldrb	r3, [r3, #29]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d108      	bne.n	8002bd8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0204 	orr.w	r2, r2, #4
 8002bd4:	601a      	str	r2, [r3, #0]
 8002bd6:	e007      	b.n	8002be8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0204 	bic.w	r2, r2, #4
 8002be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	431a      	orrs	r2, r3
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	ea42 0103 	orr.w	r1, r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	1e5a      	subs	r2, r3, #1
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c34:	b2db      	uxtb	r3, r3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d12e      	bne.n	8002c98 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0201 	bic.w	r2, r2, #1
 8002c50:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002c52:	f7fe fc1d 	bl	8001490 <HAL_GetTick>
 8002c56:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c58:	e012      	b.n	8002c80 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002c5a:	f7fe fc19 	bl	8001490 <HAL_GetTick>
 8002c5e:	4602      	mov	r2, r0
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	1ad3      	subs	r3, r2, r3
 8002c64:	2b0a      	cmp	r3, #10
 8002c66:	d90b      	bls.n	8002c80 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2205      	movs	r2, #5
 8002c78:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e012      	b.n	8002ca6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0301 	and.w	r3, r3, #1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d1e5      	bne.n	8002c5a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002c94:	2300      	movs	r3, #0
 8002c96:	e006      	b.n	8002ca6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
  }
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3710      	adds	r7, #16
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b085      	sub	sp, #20
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f003 0307 	and.w	r3, r3, #7
 8002cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cc6:	68ba      	ldr	r2, [r7, #8]
 8002cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ccc:	4013      	ands	r3, r2
 8002cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce2:	4a04      	ldr	r2, [pc, #16]	; (8002cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	60d3      	str	r3, [r2, #12]
}
 8002ce8:	bf00      	nop
 8002cea:	3714      	adds	r7, #20
 8002cec:	46bd      	mov	sp, r7
 8002cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf2:	4770      	bx	lr
 8002cf4:	e000ed00 	.word	0xe000ed00

08002cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cfc:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <__NVIC_GetPriorityGrouping+0x18>)
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	0a1b      	lsrs	r3, r3, #8
 8002d02:	f003 0307 	and.w	r3, r3, #7
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0e:	4770      	bx	lr
 8002d10:	e000ed00 	.word	0xe000ed00

08002d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	db0b      	blt.n	8002d3e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d26:	79fb      	ldrb	r3, [r7, #7]
 8002d28:	f003 021f 	and.w	r2, r3, #31
 8002d2c:	4907      	ldr	r1, [pc, #28]	; (8002d4c <__NVIC_EnableIRQ+0x38>)
 8002d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d32:	095b      	lsrs	r3, r3, #5
 8002d34:	2001      	movs	r0, #1
 8002d36:	fa00 f202 	lsl.w	r2, r0, r2
 8002d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d3e:	bf00      	nop
 8002d40:	370c      	adds	r7, #12
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100

08002d50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	4603      	mov	r3, r0
 8002d58:	6039      	str	r1, [r7, #0]
 8002d5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	db0a      	blt.n	8002d7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2da      	uxtb	r2, r3
 8002d68:	490c      	ldr	r1, [pc, #48]	; (8002d9c <__NVIC_SetPriority+0x4c>)
 8002d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6e:	0112      	lsls	r2, r2, #4
 8002d70:	b2d2      	uxtb	r2, r2
 8002d72:	440b      	add	r3, r1
 8002d74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d78:	e00a      	b.n	8002d90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	b2da      	uxtb	r2, r3
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <__NVIC_SetPriority+0x50>)
 8002d80:	79fb      	ldrb	r3, [r7, #7]
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	3b04      	subs	r3, #4
 8002d88:	0112      	lsls	r2, r2, #4
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	440b      	add	r3, r1
 8002d8e:	761a      	strb	r2, [r3, #24]
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	e000e100 	.word	0xe000e100
 8002da0:	e000ed00 	.word	0xe000ed00

08002da4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	60f8      	str	r0, [r7, #12]
 8002dac:	60b9      	str	r1, [r7, #8]
 8002dae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f1c3 0307 	rsb	r3, r3, #7
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	bf28      	it	cs
 8002dc2:	2304      	movcs	r3, #4
 8002dc4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3304      	adds	r3, #4
 8002dca:	2b06      	cmp	r3, #6
 8002dcc:	d902      	bls.n	8002dd4 <NVIC_EncodePriority+0x30>
 8002dce:	69fb      	ldr	r3, [r7, #28]
 8002dd0:	3b03      	subs	r3, #3
 8002dd2:	e000      	b.n	8002dd6 <NVIC_EncodePriority+0x32>
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd8:	f04f 32ff 	mov.w	r2, #4294967295
 8002ddc:	69bb      	ldr	r3, [r7, #24]
 8002dde:	fa02 f303 	lsl.w	r3, r2, r3
 8002de2:	43da      	mvns	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	401a      	ands	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dec:	f04f 31ff 	mov.w	r1, #4294967295
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	fa01 f303 	lsl.w	r3, r1, r3
 8002df6:	43d9      	mvns	r1, r3
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dfc:	4313      	orrs	r3, r2
         );
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3724      	adds	r7, #36	; 0x24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
	...

08002e0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3b01      	subs	r3, #1
 8002e18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e1c:	d301      	bcc.n	8002e22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e00f      	b.n	8002e42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <SysTick_Config+0x40>)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	3b01      	subs	r3, #1
 8002e28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e2a:	210f      	movs	r1, #15
 8002e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e30:	f7ff ff8e 	bl	8002d50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e34:	4b05      	ldr	r3, [pc, #20]	; (8002e4c <SysTick_Config+0x40>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e3a:	4b04      	ldr	r3, [pc, #16]	; (8002e4c <SysTick_Config+0x40>)
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3708      	adds	r7, #8
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	e000e010 	.word	0xe000e010

08002e50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e58:	6878      	ldr	r0, [r7, #4]
 8002e5a:	f7ff ff29 	bl	8002cb0 <__NVIC_SetPriorityGrouping>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b086      	sub	sp, #24
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60b9      	str	r1, [r7, #8]
 8002e70:	607a      	str	r2, [r7, #4]
 8002e72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002e74:	2300      	movs	r3, #0
 8002e76:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e78:	f7ff ff3e 	bl	8002cf8 <__NVIC_GetPriorityGrouping>
 8002e7c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	68b9      	ldr	r1, [r7, #8]
 8002e82:	6978      	ldr	r0, [r7, #20]
 8002e84:	f7ff ff8e 	bl	8002da4 <NVIC_EncodePriority>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8e:	4611      	mov	r1, r2
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff ff5d 	bl	8002d50 <__NVIC_SetPriority>
}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}

08002e9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9e:	b580      	push	{r7, lr}
 8002ea0:	b082      	sub	sp, #8
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	4603      	mov	r3, r0
 8002ea6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eac:	4618      	mov	r0, r3
 8002eae:	f7ff ff31 	bl	8002d14 <__NVIC_EnableIRQ>
}
 8002eb2:	bf00      	nop
 8002eb4:	3708      	adds	r7, #8
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff ffa2 	bl	8002e0c <SysTick_Config>
 8002ec8:	4603      	mov	r3, r0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
	...

08002ed4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e098      	b.n	8003018 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	461a      	mov	r2, r3
 8002eec:	4b4d      	ldr	r3, [pc, #308]	; (8003024 <HAL_DMA_Init+0x150>)
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d80f      	bhi.n	8002f12 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	4b4b      	ldr	r3, [pc, #300]	; (8003028 <HAL_DMA_Init+0x154>)
 8002efa:	4413      	add	r3, r2
 8002efc:	4a4b      	ldr	r2, [pc, #300]	; (800302c <HAL_DMA_Init+0x158>)
 8002efe:	fba2 2303 	umull	r2, r3, r2, r3
 8002f02:	091b      	lsrs	r3, r3, #4
 8002f04:	009a      	lsls	r2, r3, #2
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	4a48      	ldr	r2, [pc, #288]	; (8003030 <HAL_DMA_Init+0x15c>)
 8002f0e:	641a      	str	r2, [r3, #64]	; 0x40
 8002f10:	e00e      	b.n	8002f30 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4b46      	ldr	r3, [pc, #280]	; (8003034 <HAL_DMA_Init+0x160>)
 8002f1a:	4413      	add	r3, r2
 8002f1c:	4a43      	ldr	r2, [pc, #268]	; (800302c <HAL_DMA_Init+0x158>)
 8002f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f22:	091b      	lsrs	r3, r3, #4
 8002f24:	009a      	lsls	r2, r3, #2
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a42      	ldr	r2, [pc, #264]	; (8003038 <HAL_DMA_Init+0x164>)
 8002f2e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2202      	movs	r2, #2
 8002f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002f46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f4a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002f54:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	691b      	ldr	r3, [r3, #16]
 8002f5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f60:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	699b      	ldr	r3, [r3, #24]
 8002f66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a1b      	ldr	r3, [r3, #32]
 8002f72:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f74:	68fa      	ldr	r2, [r7, #12]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68fa      	ldr	r2, [r7, #12]
 8002f80:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002f8a:	d039      	beq.n	8003000 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	4a27      	ldr	r2, [pc, #156]	; (8003030 <HAL_DMA_Init+0x15c>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d11a      	bne.n	8002fcc <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002f96:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_DMA_Init+0x168>)
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 031c 	and.w	r3, r3, #28
 8002fa2:	210f      	movs	r1, #15
 8002fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8002fa8:	43db      	mvns	r3, r3
 8002faa:	4924      	ldr	r1, [pc, #144]	; (800303c <HAL_DMA_Init+0x168>)
 8002fac:	4013      	ands	r3, r2
 8002fae:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <HAL_DMA_Init+0x168>)
 8002fb2:	681a      	ldr	r2, [r3, #0]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6859      	ldr	r1, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbc:	f003 031c 	and.w	r3, r3, #28
 8002fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002fc4:	491d      	ldr	r1, [pc, #116]	; (800303c <HAL_DMA_Init+0x168>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	600b      	str	r3, [r1, #0]
 8002fca:	e019      	b.n	8003000 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	; (8003040 <HAL_DMA_Init+0x16c>)
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd4:	f003 031c 	and.w	r3, r3, #28
 8002fd8:	210f      	movs	r1, #15
 8002fda:	fa01 f303 	lsl.w	r3, r1, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	4917      	ldr	r1, [pc, #92]	; (8003040 <HAL_DMA_Init+0x16c>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002fe6:	4b16      	ldr	r3, [pc, #88]	; (8003040 <HAL_DMA_Init+0x16c>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6859      	ldr	r1, [r3, #4]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ff2:	f003 031c 	and.w	r3, r3, #28
 8002ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8002ffa:	4911      	ldr	r1, [pc, #68]	; (8003040 <HAL_DMA_Init+0x16c>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3714      	adds	r7, #20
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr
 8003024:	40020407 	.word	0x40020407
 8003028:	bffdfff8 	.word	0xbffdfff8
 800302c:	cccccccd 	.word	0xcccccccd
 8003030:	40020000 	.word	0x40020000
 8003034:	bffdfbf8 	.word	0xbffdfbf8
 8003038:	40020400 	.word	0x40020400
 800303c:	400200a8 	.word	0x400200a8
 8003040:	400204a8 	.word	0x400204a8

08003044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_DMA_Start_IT+0x20>
 8003060:	2302      	movs	r3, #2
 8003062:	e04b      	b.n	80030fc <HAL_DMA_Start_IT+0xb8>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2201      	movs	r2, #1
 8003068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b01      	cmp	r3, #1
 8003076:	d13a      	bne.n	80030ee <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2200      	movs	r2, #0
 8003084:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	68b9      	ldr	r1, [r7, #8]
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 f92f 	bl	8003300 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 020e 	orr.w	r2, r2, #14
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e00f      	b.n	80030dc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f022 0204 	bic.w	r2, r2, #4
 80030ca:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 020a 	orr.w	r2, r2, #10
 80030da:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	681a      	ldr	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f042 0201 	orr.w	r2, r2, #1
 80030ea:	601a      	str	r2, [r3, #0]
 80030ec:	e005      	b.n	80030fa <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
 80030f8:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80030fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3718      	adds	r7, #24
 8003100:	46bd      	mov	sp, r7
 8003102:	bd80      	pop	{r7, pc}

08003104 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b084      	sub	sp, #16
 8003108:	af00      	add	r7, sp, #0
 800310a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b02      	cmp	r3, #2
 800311a:	d005      	beq.n	8003128 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2204      	movs	r2, #4
 8003120:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e029      	b.n	800317c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f022 020e 	bic.w	r2, r2, #14
 8003136:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0201 	bic.w	r2, r2, #1
 8003146:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	f003 021c 	and.w	r2, r3, #28
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003154:	2101      	movs	r1, #1
 8003156:	fa01 f202 	lsl.w	r2, r1, r2
 800315a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
    }
  }
  return status;
 800317c:	7bfb      	ldrb	r3, [r7, #15]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3710      	adds	r7, #16
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b084      	sub	sp, #16
 800318a:	af00      	add	r7, sp, #0
 800318c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031a2:	f003 031c 	and.w	r3, r3, #28
 80031a6:	2204      	movs	r2, #4
 80031a8:	409a      	lsls	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	4013      	ands	r3, r2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d026      	beq.n	8003200 <HAL_DMA_IRQHandler+0x7a>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	f003 0304 	and.w	r3, r3, #4
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d021      	beq.n	8003200 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0320 	and.w	r3, r3, #32
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d107      	bne.n	80031da <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 0204 	bic.w	r2, r2, #4
 80031d8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f003 021c 	and.w	r2, r3, #28
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	2104      	movs	r1, #4
 80031e8:	fa01 f202 	lsl.w	r2, r1, r2
 80031ec:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d071      	beq.n	80032da <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031fe:	e06c      	b.n	80032da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003204:	f003 031c 	and.w	r3, r3, #28
 8003208:	2202      	movs	r2, #2
 800320a:	409a      	lsls	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4013      	ands	r3, r2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d02e      	beq.n	8003272 <HAL_DMA_IRQHandler+0xec>
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d029      	beq.n	8003272 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0320 	and.w	r3, r3, #32
 8003228:	2b00      	cmp	r3, #0
 800322a:	d10b      	bne.n	8003244 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 020a 	bic.w	r2, r2, #10
 800323a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003248:	f003 021c 	and.w	r2, r3, #28
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003250:	2102      	movs	r1, #2
 8003252:	fa01 f202 	lsl.w	r2, r1, r2
 8003256:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003264:	2b00      	cmp	r3, #0
 8003266:	d038      	beq.n	80032da <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003270:	e033      	b.n	80032da <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003276:	f003 031c 	and.w	r3, r3, #28
 800327a:	2208      	movs	r2, #8
 800327c:	409a      	lsls	r2, r3
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	4013      	ands	r3, r2
 8003282:	2b00      	cmp	r3, #0
 8003284:	d02a      	beq.n	80032dc <HAL_DMA_IRQHandler+0x156>
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	f003 0308 	and.w	r3, r3, #8
 800328c:	2b00      	cmp	r3, #0
 800328e:	d025      	beq.n	80032dc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f022 020e 	bic.w	r2, r2, #14
 800329e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032a4:	f003 021c 	and.w	r2, r3, #28
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d004      	beq.n	80032dc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
}
 80032de:	3710      	adds	r7, #16
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80032f2:	b2db      	uxtb	r3, r3
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003300:	b480      	push	{r7}
 8003302:	b085      	sub	sp, #20
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003312:	f003 021c 	and.w	r2, r3, #28
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2101      	movs	r1, #1
 800331c:	fa01 f202 	lsl.w	r2, r1, r2
 8003320:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	2b10      	cmp	r3, #16
 8003330:	d108      	bne.n	8003344 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68ba      	ldr	r2, [r7, #8]
 8003340:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003342:	e007      	b.n	8003354 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	60da      	str	r2, [r3, #12]
}
 8003354:	bf00      	nop
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800336a:	2300      	movs	r3, #0
 800336c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800336e:	e148      	b.n	8003602 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	2101      	movs	r1, #1
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	fa01 f303 	lsl.w	r3, r1, r3
 800337c:	4013      	ands	r3, r2
 800337e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2b00      	cmp	r3, #0
 8003384:	f000 813a 	beq.w	80035fc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 0303 	and.w	r3, r3, #3
 8003390:	2b01      	cmp	r3, #1
 8003392:	d005      	beq.n	80033a0 <HAL_GPIO_Init+0x40>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0303 	and.w	r3, r3, #3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d130      	bne.n	8003402 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	005b      	lsls	r3, r3, #1
 80033aa:	2203      	movs	r2, #3
 80033ac:	fa02 f303 	lsl.w	r3, r2, r3
 80033b0:	43db      	mvns	r3, r3
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4013      	ands	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	005b      	lsls	r3, r3, #1
 80033c0:	fa02 f303 	lsl.w	r3, r2, r3
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	4313      	orrs	r3, r2
 80033c8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	693a      	ldr	r2, [r7, #16]
 80033ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80033d6:	2201      	movs	r2, #1
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	693a      	ldr	r2, [r7, #16]
 80033e2:	4013      	ands	r3, r2
 80033e4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0201 	and.w	r2, r3, #1
 80033f0:	697b      	ldr	r3, [r7, #20]
 80033f2:	fa02 f303 	lsl.w	r3, r2, r3
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	693a      	ldr	r2, [r7, #16]
 8003400:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f003 0303 	and.w	r3, r3, #3
 800340a:	2b03      	cmp	r3, #3
 800340c:	d017      	beq.n	800343e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	2203      	movs	r2, #3
 800341a:	fa02 f303 	lsl.w	r3, r2, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	693a      	ldr	r2, [r7, #16]
 8003422:	4013      	ands	r3, r2
 8003424:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4313      	orrs	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b02      	cmp	r3, #2
 8003448:	d123      	bne.n	8003492 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	08da      	lsrs	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3208      	adds	r2, #8
 8003452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	f003 0307 	and.w	r3, r3, #7
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4013      	ands	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	f003 0307 	and.w	r3, r3, #7
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	4313      	orrs	r3, r2
 8003482:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	08da      	lsrs	r2, r3, #3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	3208      	adds	r2, #8
 800348c:	6939      	ldr	r1, [r7, #16]
 800348e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	2203      	movs	r2, #3
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43db      	mvns	r3, r3
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	4013      	ands	r3, r2
 80034a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	f003 0203 	and.w	r2, r3, #3
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ba:	693a      	ldr	r2, [r7, #16]
 80034bc:	4313      	orrs	r3, r2
 80034be:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	693a      	ldr	r2, [r7, #16]
 80034c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f000 8094 	beq.w	80035fc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034d4:	4b52      	ldr	r3, [pc, #328]	; (8003620 <HAL_GPIO_Init+0x2c0>)
 80034d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d8:	4a51      	ldr	r2, [pc, #324]	; (8003620 <HAL_GPIO_Init+0x2c0>)
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	6613      	str	r3, [r2, #96]	; 0x60
 80034e0:	4b4f      	ldr	r3, [pc, #316]	; (8003620 <HAL_GPIO_Init+0x2c0>)
 80034e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e4:	f003 0301 	and.w	r3, r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80034ec:	4a4d      	ldr	r2, [pc, #308]	; (8003624 <HAL_GPIO_Init+0x2c4>)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	3302      	adds	r3, #2
 80034f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	f003 0303 	and.w	r3, r3, #3
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	220f      	movs	r2, #15
 8003504:	fa02 f303 	lsl.w	r3, r2, r3
 8003508:	43db      	mvns	r3, r3
 800350a:	693a      	ldr	r2, [r7, #16]
 800350c:	4013      	ands	r3, r2
 800350e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003516:	d00d      	beq.n	8003534 <HAL_GPIO_Init+0x1d4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a43      	ldr	r2, [pc, #268]	; (8003628 <HAL_GPIO_Init+0x2c8>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <HAL_GPIO_Init+0x1d0>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a42      	ldr	r2, [pc, #264]	; (800362c <HAL_GPIO_Init+0x2cc>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d101      	bne.n	800352c <HAL_GPIO_Init+0x1cc>
 8003528:	2302      	movs	r3, #2
 800352a:	e004      	b.n	8003536 <HAL_GPIO_Init+0x1d6>
 800352c:	2307      	movs	r3, #7
 800352e:	e002      	b.n	8003536 <HAL_GPIO_Init+0x1d6>
 8003530:	2301      	movs	r3, #1
 8003532:	e000      	b.n	8003536 <HAL_GPIO_Init+0x1d6>
 8003534:	2300      	movs	r3, #0
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	f002 0203 	and.w	r2, r2, #3
 800353c:	0092      	lsls	r2, r2, #2
 800353e:	4093      	lsls	r3, r2
 8003540:	693a      	ldr	r2, [r7, #16]
 8003542:	4313      	orrs	r3, r2
 8003544:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003546:	4937      	ldr	r1, [pc, #220]	; (8003624 <HAL_GPIO_Init+0x2c4>)
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	089b      	lsrs	r3, r3, #2
 800354c:	3302      	adds	r3, #2
 800354e:	693a      	ldr	r2, [r7, #16]
 8003550:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003554:	4b36      	ldr	r3, [pc, #216]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	43db      	mvns	r3, r3
 800355e:	693a      	ldr	r2, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d003      	beq.n	8003578 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	4313      	orrs	r3, r2
 8003576:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003578:	4a2d      	ldr	r2, [pc, #180]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800357e:	4b2c      	ldr	r3, [pc, #176]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	43db      	mvns	r3, r3
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	4013      	ands	r3, r2
 800358c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d003      	beq.n	80035a2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800359a:	693a      	ldr	r2, [r7, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80035a2:	4a23      	ldr	r2, [pc, #140]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80035a8:	4b21      	ldr	r3, [pc, #132]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	43db      	mvns	r3, r3
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	4013      	ands	r3, r2
 80035b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d003      	beq.n	80035cc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80035cc:	4a18      	ldr	r2, [pc, #96]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80035d2:	4b17      	ldr	r3, [pc, #92]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	43db      	mvns	r3, r3
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4013      	ands	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80035e2:	683b      	ldr	r3, [r7, #0]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d003      	beq.n	80035f6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80035ee:	693a      	ldr	r2, [r7, #16]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	4313      	orrs	r3, r2
 80035f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80035f6:	4a0e      	ldr	r2, [pc, #56]	; (8003630 <HAL_GPIO_Init+0x2d0>)
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3301      	adds	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	fa22 f303 	lsr.w	r3, r2, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f aeaf 	bne.w	8003370 <HAL_GPIO_Init+0x10>
  }
}
 8003612:	bf00      	nop
 8003614:	bf00      	nop
 8003616:	371c      	adds	r7, #28
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr
 8003620:	40021000 	.word	0x40021000
 8003624:	40010000 	.word	0x40010000
 8003628:	48000400 	.word	0x48000400
 800362c:	48000800 	.word	0x48000800
 8003630:	40010400 	.word	0x40010400

08003634 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	807b      	strh	r3, [r7, #2]
 8003640:	4613      	mov	r3, r2
 8003642:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003644:	787b      	ldrb	r3, [r7, #1]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d003      	beq.n	8003652 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800364a:	887a      	ldrh	r2, [r7, #2]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003650:	e002      	b.n	8003658 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003652:	887a      	ldrh	r2, [r7, #2]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr

08003664 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d101      	bne.n	8003676 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003672:	2301      	movs	r3, #1
 8003674:	e08d      	b.n	8003792 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800367c:	b2db      	uxtb	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	d106      	bne.n	8003690 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2200      	movs	r2, #0
 8003686:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f7fd fc30 	bl	8000ef0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2224      	movs	r2, #36	; 0x24
 8003694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0201 	bic.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685a      	ldr	r2, [r3, #4]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80036b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	689a      	ldr	r2, [r3, #8]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	689a      	ldr	r2, [r3, #8]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036da:	609a      	str	r2, [r3, #8]
 80036dc:	e006      	b.n	80036ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	689a      	ldr	r2, [r3, #8]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80036ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	68db      	ldr	r3, [r3, #12]
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d108      	bne.n	8003706 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	e007      	b.n	8003716 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003714:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003724:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003728:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	68da      	ldr	r2, [r3, #12]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003738:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691a      	ldr	r2, [r3, #16]
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	430a      	orrs	r2, r1
 8003752:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	69d9      	ldr	r1, [r3, #28]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1a      	ldr	r2, [r3, #32]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	430a      	orrs	r2, r1
 8003762:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f042 0201 	orr.w	r2, r2, #1
 8003772:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2200      	movs	r2, #0
 8003778:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2220      	movs	r2, #32
 800377e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}

0800379a <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800379a:	b580      	push	{r7, lr}
 800379c:	b084      	sub	sp, #16
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037be:	68ba      	ldr	r2, [r7, #8]
 80037c0:	68f9      	ldr	r1, [r7, #12]
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	4798      	blx	r3
  }
}
 80037c6:	bf00      	nop
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00f      	beq.n	8003810 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fe:	f043 0201 	orr.w	r2, r3, #1
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800380e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00f      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	f043 0208 	orr.w	r2, r3, #8
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003838:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00f      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800384a:	2b00      	cmp	r3, #0
 800384c:	d00a      	beq.n	8003864 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f043 0202 	orr.w	r2, r3, #2
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003862:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003868:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f003 030b 	and.w	r3, r3, #11
 8003870:	2b00      	cmp	r3, #0
 8003872:	d003      	beq.n	800387c <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003874:	68f9      	ldr	r1, [r7, #12]
 8003876:	6878      	ldr	r0, [r7, #4]
 8003878:	f000 fb82 	bl	8003f80 <I2C_ITError>
  }
}
 800387c:	bf00      	nop
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80038a0:	bf00      	nop
 80038a2:	370c      	adds	r7, #12
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
 80038b4:	460b      	mov	r3, r1
 80038b6:	70fb      	strb	r3, [r7, #3]
 80038b8:	4613      	mov	r3, r2
 80038ba:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80038bc:	bf00      	nop
 80038be:	370c      	adds	r7, #12
 80038c0:	46bd      	mov	sp, r7
 80038c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c6:	4770      	bx	lr

080038c8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80038d0:	bf00      	nop
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038da:	4770      	bx	lr

080038dc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b083      	sub	sp, #12
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80038f8:	bf00      	nop
 80038fa:	370c      	adds	r7, #12
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003920:	2b01      	cmp	r3, #1
 8003922:	d101      	bne.n	8003928 <I2C_Slave_ISR_IT+0x24>
 8003924:	2302      	movs	r3, #2
 8003926:	e0e1      	b.n	8003aec <I2C_Slave_ISR_IT+0x1e8>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	f003 0320 	and.w	r3, r3, #32
 8003936:	2b00      	cmp	r3, #0
 8003938:	d008      	beq.n	800394c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003944:	6939      	ldr	r1, [r7, #16]
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f000 f9b4 	bl	8003cb4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b00      	cmp	r3, #0
 8003954:	d04b      	beq.n	80039ee <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800395c:	2b00      	cmp	r3, #0
 800395e:	d046      	beq.n	80039ee <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003964:	b29b      	uxth	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d128      	bne.n	80039bc <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b28      	cmp	r3, #40	; 0x28
 8003974:	d108      	bne.n	8003988 <I2C_Slave_ISR_IT+0x84>
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800397c:	d104      	bne.n	8003988 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800397e:	6939      	ldr	r1, [r7, #16]
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 faa9 	bl	8003ed8 <I2C_ITListenCplt>
 8003986:	e031      	b.n	80039ec <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800398e:	b2db      	uxtb	r3, r3
 8003990:	2b29      	cmp	r3, #41	; 0x29
 8003992:	d10e      	bne.n	80039b2 <I2C_Slave_ISR_IT+0xae>
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800399a:	d00a      	beq.n	80039b2 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2210      	movs	r2, #16
 80039a2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 fc02 	bl	80041ae <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f000 f926 	bl	8003bfc <I2C_ITSlaveSeqCplt>
 80039b0:	e01c      	b.n	80039ec <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2210      	movs	r2, #16
 80039b8:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80039ba:	e08f      	b.n	8003adc <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2210      	movs	r2, #16
 80039c2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c8:	f043 0204 	orr.w	r2, r3, #4
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d003      	beq.n	80039de <I2C_Slave_ISR_IT+0xda>
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80039dc:	d17e      	bne.n	8003adc <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e2:	4619      	mov	r1, r3
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 facb 	bl	8003f80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80039ea:	e077      	b.n	8003adc <I2C_Slave_ISR_IT+0x1d8>
 80039ec:	e076      	b.n	8003adc <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0304 	and.w	r3, r3, #4
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d02f      	beq.n	8003a58 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d02a      	beq.n	8003a58 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d018      	beq.n	8003a3e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	1c5a      	adds	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	3b01      	subs	r3, #1
 8003a2a:	b29a      	uxth	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a34:	b29b      	uxth	r3, r3
 8003a36:	3b01      	subs	r3, #1
 8003a38:	b29a      	uxth	r2, r3
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d14b      	bne.n	8003ae0 <I2C_Slave_ISR_IT+0x1dc>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a4e:	d047      	beq.n	8003ae0 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f8d3 	bl	8003bfc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003a56:	e043      	b.n	8003ae0 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003a6c:	6939      	ldr	r1, [r7, #16]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 f840 	bl	8003af4 <I2C_ITAddrCplt>
 8003a74:	e035      	b.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f003 0302 	and.w	r3, r3, #2
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d030      	beq.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02b      	beq.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d018      	beq.n	8003ac6 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa4:	1c5a      	adds	r2, r3, #1
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aae:	b29b      	uxth	r3, r3
 8003ab0:	3b01      	subs	r3, #1
 8003ab2:	b29a      	uxth	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abc:	3b01      	subs	r3, #1
 8003abe:	b29a      	uxth	r2, r3
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	851a      	strh	r2, [r3, #40]	; 0x28
 8003ac4:	e00d      	b.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003acc:	d002      	beq.n	8003ad4 <I2C_Slave_ISR_IT+0x1d0>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d106      	bne.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 f891 	bl	8003bfc <I2C_ITSlaveSeqCplt>
 8003ada:	e002      	b.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003adc:	bf00      	nop
 8003ade:	e000      	b.n	8003ae2 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003ae0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3718      	adds	r7, #24
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bd80      	pop	{r7, pc}

08003af4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b084      	sub	sp, #16
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b0a:	2b28      	cmp	r3, #40	; 0x28
 8003b0c:	d16a      	bne.n	8003be4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	0c1b      	lsrs	r3, r3, #16
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	0c1b      	lsrs	r3, r3, #16
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b2c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003b3a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	68db      	ldr	r3, [r3, #12]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003b48:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68db      	ldr	r3, [r3, #12]
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d138      	bne.n	8003bc4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003b52:	897b      	ldrh	r3, [r7, #10]
 8003b54:	09db      	lsrs	r3, r3, #7
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	89bb      	ldrh	r3, [r7, #12]
 8003b5a:	4053      	eors	r3, r2
 8003b5c:	b29b      	uxth	r3, r3
 8003b5e:	f003 0306 	and.w	r3, r3, #6
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11c      	bne.n	8003ba0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003b66:	897b      	ldrh	r3, [r7, #10]
 8003b68:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d13b      	bne.n	8003bf4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	2208      	movs	r2, #8
 8003b88:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003b92:	89ba      	ldrh	r2, [r7, #12]
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
 8003b96:	4619      	mov	r1, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f7ff fe87 	bl	80038ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003b9e:	e029      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003ba0:	893b      	ldrh	r3, [r7, #8]
 8003ba2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ba4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 fb42 	bl	8004232 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bb6:	89ba      	ldrh	r2, [r7, #12]
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	4619      	mov	r1, r3
 8003bbc:	6878      	ldr	r0, [r7, #4]
 8003bbe:	f7ff fe75 	bl	80038ac <HAL_I2C_AddrCallback>
}
 8003bc2:	e017      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fb32 	bl	8004232 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003bd6:	89ba      	ldrh	r2, [r7, #12]
 8003bd8:	7bfb      	ldrb	r3, [r7, #15]
 8003bda:	4619      	mov	r1, r3
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fe65 	bl	80038ac <HAL_I2C_AddrCallback>
}
 8003be2:	e007      	b.n	8003bf4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2208      	movs	r2, #8
 8003bea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2200      	movs	r2, #0
 8003c10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	e00c      	b.n	8003c4a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d007      	beq.n	8003c4a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c48:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	2b29      	cmp	r3, #41	; 0x29
 8003c54:	d112      	bne.n	8003c7c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2228      	movs	r2, #40	; 0x28
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2221      	movs	r2, #33	; 0x21
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003c64:	2101      	movs	r1, #1
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 fae3 	bl	8004232 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2200      	movs	r2, #0
 8003c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003c74:	6878      	ldr	r0, [r7, #4]
 8003c76:	f7ff fe05 	bl	8003884 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003c7a:	e017      	b.n	8003cac <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b2a      	cmp	r3, #42	; 0x2a
 8003c86:	d111      	bne.n	8003cac <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2228      	movs	r2, #40	; 0x28
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2222      	movs	r2, #34	; 0x22
 8003c94:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003c96:	2102      	movs	r1, #2
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 faca 	bl	8004232 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fdf6 	bl	8003898 <HAL_I2C_SlaveRxCpltCallback>
}
 8003cac:	bf00      	nop
 8003cae:	3710      	adds	r7, #16
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cd0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003cda:	7bfb      	ldrb	r3, [r7, #15]
 8003cdc:	2b21      	cmp	r3, #33	; 0x21
 8003cde:	d002      	beq.n	8003ce6 <I2C_ITSlaveCplt+0x32>
 8003ce0:	7bfb      	ldrb	r3, [r7, #15]
 8003ce2:	2b29      	cmp	r3, #41	; 0x29
 8003ce4:	d108      	bne.n	8003cf8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003ce6:	f248 0101 	movw	r1, #32769	; 0x8001
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 faa1 	bl	8004232 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2221      	movs	r2, #33	; 0x21
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
 8003cf6:	e019      	b.n	8003d2c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003cf8:	7bfb      	ldrb	r3, [r7, #15]
 8003cfa:	2b22      	cmp	r3, #34	; 0x22
 8003cfc:	d002      	beq.n	8003d04 <I2C_ITSlaveCplt+0x50>
 8003cfe:	7bfb      	ldrb	r3, [r7, #15]
 8003d00:	2b2a      	cmp	r3, #42	; 0x2a
 8003d02:	d108      	bne.n	8003d16 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003d04:	f248 0102 	movw	r1, #32770	; 0x8002
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	f000 fa92 	bl	8004232 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2222      	movs	r2, #34	; 0x22
 8003d12:	631a      	str	r2, [r3, #48]	; 0x30
 8003d14:	e00a      	b.n	8003d2c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003d16:	7bfb      	ldrb	r3, [r7, #15]
 8003d18:	2b28      	cmp	r3, #40	; 0x28
 8003d1a:	d107      	bne.n	8003d2c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003d1c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f000 fa86 	bl	8004232 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	685a      	ldr	r2, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d3a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	6859      	ldr	r1, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	4b62      	ldr	r3, [pc, #392]	; (8003ed0 <I2C_ITSlaveCplt+0x21c>)
 8003d48:	400b      	ands	r3, r1
 8003d4a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 fa2e 	bl	80041ae <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d013      	beq.n	8003d84 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d6a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d01f      	beq.n	8003db4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d82:	e017      	b.n	8003db4 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d012      	beq.n	8003db4 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d9c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d006      	beq.n	8003db4 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f003 0304 	and.w	r3, r3, #4
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d020      	beq.n	8003e00 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	f023 0304 	bic.w	r3, r3, #4
 8003dc4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00c      	beq.n	8003e00 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	3b01      	subs	r3, #1
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e0e:	f043 0204 	orr.w	r2, r3, #4
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d010      	beq.n	8003e4e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8a4 	bl	8003f80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e3e:	b2db      	uxtb	r3, r3
 8003e40:	2b28      	cmp	r3, #40	; 0x28
 8003e42:	d141      	bne.n	8003ec8 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003e44:	6979      	ldr	r1, [r7, #20]
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f846 	bl	8003ed8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003e4c:	e03c      	b.n	8003ec8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e56:	d014      	beq.n	8003e82 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fecf 	bl	8003bfc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a1c      	ldr	r2, [pc, #112]	; (8003ed4 <I2C_ITSlaveCplt+0x220>)
 8003e62:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2220      	movs	r2, #32
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f7ff fd24 	bl	80038c8 <HAL_I2C_ListenCpltCallback>
}
 8003e80:	e022      	b.n	8003ec8 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	d10e      	bne.n	8003eac <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff fcf7 	bl	8003898 <HAL_I2C_SlaveRxCpltCallback>
}
 8003eaa:	e00d      	b.n	8003ec8 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fcde 	bl	8003884 <HAL_I2C_SlaveTxCpltCallback>
}
 8003ec8:	bf00      	nop
 8003eca:	3718      	adds	r7, #24
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	fe00e800 	.word	0xfe00e800
 8003ed4:	ffff0000 	.word	0xffff0000

08003ed8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b082      	sub	sp, #8
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a25      	ldr	r2, [pc, #148]	; (8003f7c <I2C_ITListenCplt+0xa4>)
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2200      	movs	r2, #0
 8003eec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2220      	movs	r2, #32
 8003ef2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2200      	movs	r2, #0
 8003efa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	f003 0304 	and.w	r3, r3, #4
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f18:	b2d2      	uxtb	r2, r2
 8003f1a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d012      	beq.n	8003f54 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4c:	f043 0204 	orr.w	r2, r3, #4
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003f54:	f248 0103 	movw	r1, #32771	; 0x8003
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f000 f96a 	bl	8004232 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	2210      	movs	r2, #16
 8003f64:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fcaa 	bl	80038c8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003f74:	bf00      	nop
 8003f76:	3708      	adds	r7, #8
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}
 8003f7c:	ffff0000 	.word	0xffff0000

08003f80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b084      	sub	sp, #16
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f90:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	4a6d      	ldr	r2, [pc, #436]	; (8004154 <I2C_ITError+0x1d4>)
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	431a      	orrs	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	2b28      	cmp	r3, #40	; 0x28
 8003fb6:	d005      	beq.n	8003fc4 <I2C_ITError+0x44>
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
 8003fba:	2b29      	cmp	r3, #41	; 0x29
 8003fbc:	d002      	beq.n	8003fc4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
 8003fc0:	2b2a      	cmp	r3, #42	; 0x2a
 8003fc2:	d10b      	bne.n	8003fdc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fc4:	2103      	movs	r1, #3
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f933 	bl	8004232 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2228      	movs	r2, #40	; 0x28
 8003fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a60      	ldr	r2, [pc, #384]	; (8004158 <I2C_ITError+0x1d8>)
 8003fd8:	635a      	str	r2, [r3, #52]	; 0x34
 8003fda:	e030      	b.n	800403e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003fdc:	f248 0103 	movw	r1, #32771	; 0x8003
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 f926 	bl	8004232 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8e1 	bl	80041ae <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	2b60      	cmp	r3, #96	; 0x60
 8003ff6:	d01f      	beq.n	8004038 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b20      	cmp	r3, #32
 800400c:	d114      	bne.n	8004038 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d109      	bne.n	8004030 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	2210      	movs	r2, #16
 8004022:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004028:	f043 0204 	orr.w	r2, r3, #4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2220      	movs	r2, #32
 8004036:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004042:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004048:	2b00      	cmp	r3, #0
 800404a:	d039      	beq.n	80040c0 <I2C_ITError+0x140>
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b11      	cmp	r3, #17
 8004050:	d002      	beq.n	8004058 <I2C_ITError+0xd8>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b21      	cmp	r3, #33	; 0x21
 8004056:	d133      	bne.n	80040c0 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004066:	d107      	bne.n	8004078 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004076:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800407c:	4618      	mov	r0, r3
 800407e:	f7ff f931 	bl	80032e4 <HAL_DMA_GetState>
 8004082:	4603      	mov	r3, r0
 8004084:	2b01      	cmp	r3, #1
 8004086:	d017      	beq.n	80040b8 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	4a33      	ldr	r2, [pc, #204]	; (800415c <I2C_ITError+0x1dc>)
 800408e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409c:	4618      	mov	r0, r3
 800409e:	f7ff f831 	bl	8003104 <HAL_DMA_Abort_IT>
 80040a2:	4603      	mov	r3, r0
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d04d      	beq.n	8004144 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80040b2:	4610      	mov	r0, r2
 80040b4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040b6:	e045      	b.n	8004144 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f851 	bl	8004160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80040be:	e041      	b.n	8004144 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d039      	beq.n	800413c <I2C_ITError+0x1bc>
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	2b12      	cmp	r3, #18
 80040cc:	d002      	beq.n	80040d4 <I2C_ITError+0x154>
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	2b22      	cmp	r3, #34	; 0x22
 80040d2:	d133      	bne.n	800413c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040e2:	d107      	bne.n	80040f4 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7ff f8f3 	bl	80032e4 <HAL_DMA_GetState>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b01      	cmp	r3, #1
 8004102:	d017      	beq.n	8004134 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004108:	4a14      	ldr	r2, [pc, #80]	; (800415c <I2C_ITError+0x1dc>)
 800410a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004118:	4618      	mov	r0, r3
 800411a:	f7fe fff3 	bl	8003104 <HAL_DMA_Abort_IT>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d011      	beq.n	8004148 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800412a:	687a      	ldr	r2, [r7, #4]
 800412c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800412e:	4610      	mov	r0, r2
 8004130:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004132:	e009      	b.n	8004148 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 f813 	bl	8004160 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800413a:	e005      	b.n	8004148 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f80f 	bl	8004160 <I2C_TreatErrorCallback>
  }
}
 8004142:	e002      	b.n	800414a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004144:	bf00      	nop
 8004146:	e000      	b.n	800414a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004148:	bf00      	nop
}
 800414a:	bf00      	nop
 800414c:	3710      	adds	r7, #16
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	ffff0000 	.word	0xffff0000
 8004158:	08003905 	.word	0x08003905
 800415c:	080041f7 	.word	0x080041f7

08004160 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b082      	sub	sp, #8
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800416e:	b2db      	uxtb	r3, r3
 8004170:	2b60      	cmp	r3, #96	; 0x60
 8004172:	d10e      	bne.n	8004192 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f7ff fbb0 	bl	80038f0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004190:	e009      	b.n	80041a6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff fb9b 	bl	80038dc <HAL_I2C_ErrorCallback>
}
 80041a6:	bf00      	nop
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	f003 0302 	and.w	r3, r3, #2
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d103      	bne.n	80041cc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2200      	movs	r2, #0
 80041ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f003 0301 	and.w	r3, r3, #1
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d007      	beq.n	80041ea <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	699a      	ldr	r2, [r3, #24]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0201 	orr.w	r2, r2, #1
 80041e8:	619a      	str	r2, [r3, #24]
  }
}
 80041ea:	bf00      	nop
 80041ec:	370c      	adds	r7, #12
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr

080041f6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b084      	sub	sp, #16
 80041fa:	af00      	add	r7, sp, #0
 80041fc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004210:	2200      	movs	r2, #0
 8004212:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004220:	2200      	movs	r2, #0
 8004222:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004224:	68f8      	ldr	r0, [r7, #12]
 8004226:	f7ff ff9b 	bl	8004160 <I2C_TreatErrorCallback>
}
 800422a:	bf00      	nop
 800422c:	3710      	adds	r7, #16
 800422e:	46bd      	mov	sp, r7
 8004230:	bd80      	pop	{r7, pc}

08004232 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
 800423a:	460b      	mov	r3, r1
 800423c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800423e:	2300      	movs	r3, #0
 8004240:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004242:	887b      	ldrh	r3, [r7, #2]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00f      	beq.n	800426c <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004252:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800425a:	b2db      	uxtb	r3, r3
 800425c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004260:	2b28      	cmp	r3, #40	; 0x28
 8004262:	d003      	beq.n	800426c <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800426a:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800426c:	887b      	ldrh	r3, [r7, #2]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	2b00      	cmp	r3, #0
 8004274:	d00f      	beq.n	8004296 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800427c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004284:	b2db      	uxtb	r3, r3
 8004286:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800428a:	2b28      	cmp	r3, #40	; 0x28
 800428c:	d003      	beq.n	8004296 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004294:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004296:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800429a:	2b00      	cmp	r3, #0
 800429c:	da03      	bge.n	80042a6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80042a4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80042a6:	887b      	ldrh	r3, [r7, #2]
 80042a8:	2b10      	cmp	r3, #16
 80042aa:	d103      	bne.n	80042b4 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80042b4:	887b      	ldrh	r3, [r7, #2]
 80042b6:	2b20      	cmp	r3, #32
 80042b8:	d103      	bne.n	80042c2 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f043 0320 	orr.w	r3, r3, #32
 80042c0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80042c2:	887b      	ldrh	r3, [r7, #2]
 80042c4:	2b40      	cmp	r3, #64	; 0x40
 80042c6:	d103      	bne.n	80042d0 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	6819      	ldr	r1, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	43da      	mvns	r2, r3
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	400a      	ands	r2, r1
 80042e0:	601a      	str	r2, [r3, #0]
}
 80042e2:	bf00      	nop
 80042e4:	3714      	adds	r7, #20
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr

080042ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ee:	b480      	push	{r7}
 80042f0:	b083      	sub	sp, #12
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d138      	bne.n	8004376 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800430a:	2b01      	cmp	r3, #1
 800430c:	d101      	bne.n	8004312 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800430e:	2302      	movs	r3, #2
 8004310:	e032      	b.n	8004378 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2201      	movs	r2, #1
 8004316:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2224      	movs	r2, #36	; 0x24
 800431e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	681a      	ldr	r2, [r3, #0]
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f022 0201 	bic.w	r2, r2, #1
 8004330:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004340:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	683a      	ldr	r2, [r7, #0]
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	681a      	ldr	r2, [r3, #0]
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f042 0201 	orr.w	r2, r2, #1
 8004360:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2220      	movs	r2, #32
 8004366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004372:	2300      	movs	r3, #0
 8004374:	e000      	b.n	8004378 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004376:	2302      	movs	r3, #2
  }
}
 8004378:	4618      	mov	r0, r3
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr

08004384 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b20      	cmp	r3, #32
 8004398:	d139      	bne.n	800440e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d101      	bne.n	80043a8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80043a4:	2302      	movs	r3, #2
 80043a6:	e033      	b.n	8004410 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2201      	movs	r2, #1
 80043ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2224      	movs	r2, #36	; 0x24
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f022 0201 	bic.w	r2, r2, #1
 80043c6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80043d6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	021b      	lsls	r3, r3, #8
 80043dc:	68fa      	ldr	r2, [r7, #12]
 80043de:	4313      	orrs	r3, r2
 80043e0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr

0800441c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800441c:	b480      	push	{r7}
 800441e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004420:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a04      	ldr	r2, [pc, #16]	; (8004438 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442a:	6013      	str	r3, [r2, #0]
}
 800442c:	bf00      	nop
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	40007000 	.word	0x40007000

0800443c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800443c:	b480      	push	{r7}
 800443e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004440:	4b04      	ldr	r3, [pc, #16]	; (8004454 <HAL_PWREx_GetVoltageRange+0x18>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004448:	4618      	mov	r0, r3
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
 8004452:	bf00      	nop
 8004454:	40007000 	.word	0x40007000

08004458 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004466:	d130      	bne.n	80044ca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004468:	4b23      	ldr	r3, [pc, #140]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004474:	d038      	beq.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004476:	4b20      	ldr	r3, [pc, #128]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800447e:	4a1e      	ldr	r2, [pc, #120]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004480:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004484:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004486:	4b1d      	ldr	r3, [pc, #116]	; (80044fc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2232      	movs	r2, #50	; 0x32
 800448c:	fb02 f303 	mul.w	r3, r2, r3
 8004490:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004492:	fba2 2303 	umull	r2, r3, r2, r3
 8004496:	0c9b      	lsrs	r3, r3, #18
 8004498:	3301      	adds	r3, #1
 800449a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800449c:	e002      	b.n	80044a4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	3b01      	subs	r3, #1
 80044a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80044a4:	4b14      	ldr	r3, [pc, #80]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044a6:	695b      	ldr	r3, [r3, #20]
 80044a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044b0:	d102      	bne.n	80044b8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1f2      	bne.n	800449e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044ba:	695b      	ldr	r3, [r3, #20]
 80044bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c4:	d110      	bne.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e00f      	b.n	80044ea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80044ca:	4b0b      	ldr	r3, [pc, #44]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80044d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d6:	d007      	beq.n	80044e8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80044d8:	4b07      	ldr	r3, [pc, #28]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80044e0:	4a05      	ldr	r2, [pc, #20]	; (80044f8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80044e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044e6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr
 80044f6:	bf00      	nop
 80044f8:	40007000 	.word	0x40007000
 80044fc:	20000000 	.word	0x20000000
 8004500:	431bde83 	.word	0x431bde83

08004504 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b088      	sub	sp, #32
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d102      	bne.n	8004518 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	f000 bc02 	b.w	8004d1c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004518:	4b96      	ldr	r3, [pc, #600]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	f003 030c 	and.w	r3, r3, #12
 8004520:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004522:	4b94      	ldr	r3, [pc, #592]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	f003 0303 	and.w	r3, r3, #3
 800452a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f003 0310 	and.w	r3, r3, #16
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 80e4 	beq.w	8004702 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d007      	beq.n	8004550 <HAL_RCC_OscConfig+0x4c>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	f040 808b 	bne.w	800465e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b01      	cmp	r3, #1
 800454c:	f040 8087 	bne.w	800465e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_RCC_OscConfig+0x64>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e3d9      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1a      	ldr	r2, [r3, #32]
 800456c:	4b81      	ldr	r3, [pc, #516]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <HAL_RCC_OscConfig+0x7e>
 8004578:	4b7e      	ldr	r3, [pc, #504]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004580:	e005      	b.n	800458e <HAL_RCC_OscConfig+0x8a>
 8004582:	4b7c      	ldr	r3, [pc, #496]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004588:	091b      	lsrs	r3, r3, #4
 800458a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800458e:	4293      	cmp	r3, r2
 8004590:	d223      	bcs.n	80045da <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a1b      	ldr	r3, [r3, #32]
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fd8c 	bl	80050b4 <RCC_SetFlashLatencyFromMSIRange>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e3ba      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045a6:	4b73      	ldr	r3, [pc, #460]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a72      	ldr	r2, [pc, #456]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045ac:	f043 0308 	orr.w	r3, r3, #8
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b70      	ldr	r3, [pc, #448]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	496d      	ldr	r1, [pc, #436]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045c4:	4b6b      	ldr	r3, [pc, #428]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	021b      	lsls	r3, r3, #8
 80045d2:	4968      	ldr	r1, [pc, #416]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	e025      	b.n	8004626 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80045da:	4b66      	ldr	r3, [pc, #408]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a65      	ldr	r2, [pc, #404]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045e0:	f043 0308 	orr.w	r3, r3, #8
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	4b63      	ldr	r3, [pc, #396]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a1b      	ldr	r3, [r3, #32]
 80045f2:	4960      	ldr	r1, [pc, #384]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045f4:	4313      	orrs	r3, r2
 80045f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80045f8:	4b5e      	ldr	r3, [pc, #376]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69db      	ldr	r3, [r3, #28]
 8004604:	021b      	lsls	r3, r3, #8
 8004606:	495b      	ldr	r1, [pc, #364]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004608:	4313      	orrs	r3, r2
 800460a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d109      	bne.n	8004626 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	4618      	mov	r0, r3
 8004618:	f000 fd4c 	bl	80050b4 <RCC_SetFlashLatencyFromMSIRange>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e37a      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004626:	f000 fc81 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800462a:	4602      	mov	r2, r0
 800462c:	4b51      	ldr	r3, [pc, #324]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	091b      	lsrs	r3, r3, #4
 8004632:	f003 030f 	and.w	r3, r3, #15
 8004636:	4950      	ldr	r1, [pc, #320]	; (8004778 <HAL_RCC_OscConfig+0x274>)
 8004638:	5ccb      	ldrb	r3, [r1, r3]
 800463a:	f003 031f 	and.w	r3, r3, #31
 800463e:	fa22 f303 	lsr.w	r3, r2, r3
 8004642:	4a4e      	ldr	r2, [pc, #312]	; (800477c <HAL_RCC_OscConfig+0x278>)
 8004644:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004646:	4b4e      	ldr	r3, [pc, #312]	; (8004780 <HAL_RCC_OscConfig+0x27c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4618      	mov	r0, r3
 800464c:	f7fc fed0 	bl	80013f0 <HAL_InitTick>
 8004650:	4603      	mov	r3, r0
 8004652:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004654:	7bfb      	ldrb	r3, [r7, #15]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d052      	beq.n	8004700 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800465a:	7bfb      	ldrb	r3, [r7, #15]
 800465c:	e35e      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d032      	beq.n	80046cc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004666:	4b43      	ldr	r3, [pc, #268]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a42      	ldr	r2, [pc, #264]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004672:	f7fc ff0d 	bl	8001490 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800467a:	f7fc ff09 	bl	8001490 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e347      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800468c:	4b39      	ldr	r3, [pc, #228]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0f0      	beq.n	800467a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004698:	4b36      	ldr	r3, [pc, #216]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a35      	ldr	r2, [pc, #212]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800469e:	f043 0308 	orr.w	r3, r3, #8
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b33      	ldr	r3, [pc, #204]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	4930      	ldr	r1, [pc, #192]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80046b6:	4b2f      	ldr	r3, [pc, #188]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	69db      	ldr	r3, [r3, #28]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	492b      	ldr	r1, [pc, #172]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046c6:	4313      	orrs	r3, r2
 80046c8:	604b      	str	r3, [r1, #4]
 80046ca:	e01a      	b.n	8004702 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80046cc:	4b29      	ldr	r3, [pc, #164]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80046d8:	f7fc feda 	bl	8001490 <HAL_GetTick>
 80046dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046de:	e008      	b.n	80046f2 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80046e0:	f7fc fed6 	bl	8001490 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e314      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80046f2:	4b20      	ldr	r3, [pc, #128]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d1f0      	bne.n	80046e0 <HAL_RCC_OscConfig+0x1dc>
 80046fe:	e000      	b.n	8004702 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004700:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	d073      	beq.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b08      	cmp	r3, #8
 8004712:	d005      	beq.n	8004720 <HAL_RCC_OscConfig+0x21c>
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b0c      	cmp	r3, #12
 8004718:	d10e      	bne.n	8004738 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	2b03      	cmp	r3, #3
 800471e:	d10b      	bne.n	8004738 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004720:	4b14      	ldr	r3, [pc, #80]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d063      	beq.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d15f      	bne.n	80047f4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e2f1      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004740:	d106      	bne.n	8004750 <HAL_RCC_OscConfig+0x24c>
 8004742:	4b0c      	ldr	r3, [pc, #48]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a0b      	ldr	r2, [pc, #44]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004748:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800474c:	6013      	str	r3, [r2, #0]
 800474e:	e025      	b.n	800479c <HAL_RCC_OscConfig+0x298>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004758:	d114      	bne.n	8004784 <HAL_RCC_OscConfig+0x280>
 800475a:	4b06      	ldr	r3, [pc, #24]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004764:	6013      	str	r3, [r2, #0]
 8004766:	4b03      	ldr	r3, [pc, #12]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a02      	ldr	r2, [pc, #8]	; (8004774 <HAL_RCC_OscConfig+0x270>)
 800476c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004770:	6013      	str	r3, [r2, #0]
 8004772:	e013      	b.n	800479c <HAL_RCC_OscConfig+0x298>
 8004774:	40021000 	.word	0x40021000
 8004778:	080079a0 	.word	0x080079a0
 800477c:	20000000 	.word	0x20000000
 8004780:	20000004 	.word	0x20000004
 8004784:	4ba0      	ldr	r3, [pc, #640]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a9f      	ldr	r2, [pc, #636]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800478a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800478e:	6013      	str	r3, [r2, #0]
 8004790:	4b9d      	ldr	r3, [pc, #628]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a9c      	ldr	r2, [pc, #624]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004796:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800479a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d013      	beq.n	80047cc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a4:	f7fc fe74 	bl	8001490 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047aa:	e008      	b.n	80047be <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047ac:	f7fc fe70 	bl	8001490 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	2b64      	cmp	r3, #100	; 0x64
 80047b8:	d901      	bls.n	80047be <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80047ba:	2303      	movs	r3, #3
 80047bc:	e2ae      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80047be:	4b92      	ldr	r3, [pc, #584]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d0f0      	beq.n	80047ac <HAL_RCC_OscConfig+0x2a8>
 80047ca:	e014      	b.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047cc:	f7fc fe60 	bl	8001490 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047d4:	f7fc fe5c 	bl	8001490 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b64      	cmp	r3, #100	; 0x64
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e29a      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80047e6:	4b88      	ldr	r3, [pc, #544]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1f0      	bne.n	80047d4 <HAL_RCC_OscConfig+0x2d0>
 80047f2:	e000      	b.n	80047f6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0302 	and.w	r3, r3, #2
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d060      	beq.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	2b04      	cmp	r3, #4
 8004806:	d005      	beq.n	8004814 <HAL_RCC_OscConfig+0x310>
 8004808:	69bb      	ldr	r3, [r7, #24]
 800480a:	2b0c      	cmp	r3, #12
 800480c:	d119      	bne.n	8004842 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b02      	cmp	r3, #2
 8004812:	d116      	bne.n	8004842 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004814:	4b7c      	ldr	r3, [pc, #496]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800481c:	2b00      	cmp	r3, #0
 800481e:	d005      	beq.n	800482c <HAL_RCC_OscConfig+0x328>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	68db      	ldr	r3, [r3, #12]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d101      	bne.n	800482c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e277      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800482c:	4b76      	ldr	r3, [pc, #472]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	061b      	lsls	r3, r3, #24
 800483a:	4973      	ldr	r1, [pc, #460]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004840:	e040      	b.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d023      	beq.n	8004892 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800484a:	4b6f      	ldr	r3, [pc, #444]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a6e      	ldr	r2, [pc, #440]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004850:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004856:	f7fc fe1b 	bl	8001490 <HAL_GetTick>
 800485a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800485c:	e008      	b.n	8004870 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800485e:	f7fc fe17 	bl	8001490 <HAL_GetTick>
 8004862:	4602      	mov	r2, r0
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	1ad3      	subs	r3, r2, r3
 8004868:	2b02      	cmp	r3, #2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e255      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004870:	4b65      	ldr	r3, [pc, #404]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0f0      	beq.n	800485e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800487c:	4b62      	ldr	r3, [pc, #392]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	061b      	lsls	r3, r3, #24
 800488a:	495f      	ldr	r1, [pc, #380]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800488c:	4313      	orrs	r3, r2
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	e018      	b.n	80048c4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004892:	4b5d      	ldr	r3, [pc, #372]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a5c      	ldr	r2, [pc, #368]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004898:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800489c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489e:	f7fc fdf7 	bl	8001490 <HAL_GetTick>
 80048a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048a4:	e008      	b.n	80048b8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048a6:	f7fc fdf3 	bl	8001490 <HAL_GetTick>
 80048aa:	4602      	mov	r2, r0
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d901      	bls.n	80048b8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80048b4:	2303      	movs	r3, #3
 80048b6:	e231      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80048b8:	4b53      	ldr	r3, [pc, #332]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d1f0      	bne.n	80048a6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d03c      	beq.n	800494a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d01c      	beq.n	8004912 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048d8:	4b4b      	ldr	r3, [pc, #300]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80048da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048de:	4a4a      	ldr	r2, [pc, #296]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80048e0:	f043 0301 	orr.w	r3, r3, #1
 80048e4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048e8:	f7fc fdd2 	bl	8001490 <HAL_GetTick>
 80048ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80048ee:	e008      	b.n	8004902 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048f0:	f7fc fdce 	bl	8001490 <HAL_GetTick>
 80048f4:	4602      	mov	r2, r0
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d901      	bls.n	8004902 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80048fe:	2303      	movs	r3, #3
 8004900:	e20c      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004902:	4b41      	ldr	r3, [pc, #260]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004908:	f003 0302 	and.w	r3, r3, #2
 800490c:	2b00      	cmp	r3, #0
 800490e:	d0ef      	beq.n	80048f0 <HAL_RCC_OscConfig+0x3ec>
 8004910:	e01b      	b.n	800494a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004912:	4b3d      	ldr	r3, [pc, #244]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004918:	4a3b      	ldr	r2, [pc, #236]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800491a:	f023 0301 	bic.w	r3, r3, #1
 800491e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004922:	f7fc fdb5 	bl	8001490 <HAL_GetTick>
 8004926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004928:	e008      	b.n	800493c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800492a:	f7fc fdb1 	bl	8001490 <HAL_GetTick>
 800492e:	4602      	mov	r2, r0
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	1ad3      	subs	r3, r2, r3
 8004934:	2b02      	cmp	r3, #2
 8004936:	d901      	bls.n	800493c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	e1ef      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800493c:	4b32      	ldr	r3, [pc, #200]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d1ef      	bne.n	800492a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0304 	and.w	r3, r3, #4
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80a6 	beq.w	8004aa4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004958:	2300      	movs	r3, #0
 800495a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800495c:	4b2a      	ldr	r3, [pc, #168]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800495e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10d      	bne.n	8004984 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004968:	4b27      	ldr	r3, [pc, #156]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800496a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800496c:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 800496e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004972:	6593      	str	r3, [r2, #88]	; 0x58
 8004974:	4b24      	ldr	r3, [pc, #144]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 8004976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004978:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800497c:	60bb      	str	r3, [r7, #8]
 800497e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004980:	2301      	movs	r3, #1
 8004982:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCC_OscConfig+0x508>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800498c:	2b00      	cmp	r3, #0
 800498e:	d118      	bne.n	80049c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004990:	4b1e      	ldr	r3, [pc, #120]	; (8004a0c <HAL_RCC_OscConfig+0x508>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a1d      	ldr	r2, [pc, #116]	; (8004a0c <HAL_RCC_OscConfig+0x508>)
 8004996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800499a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800499c:	f7fc fd78 	bl	8001490 <HAL_GetTick>
 80049a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049a2:	e008      	b.n	80049b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049a4:	f7fc fd74 	bl	8001490 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b02      	cmp	r3, #2
 80049b0:	d901      	bls.n	80049b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80049b2:	2303      	movs	r3, #3
 80049b4:	e1b2      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80049b6:	4b15      	ldr	r3, [pc, #84]	; (8004a0c <HAL_RCC_OscConfig+0x508>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d0f0      	beq.n	80049a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d108      	bne.n	80049dc <HAL_RCC_OscConfig+0x4d8>
 80049ca:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049d0:	4a0d      	ldr	r2, [pc, #52]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049d2:	f043 0301 	orr.w	r3, r3, #1
 80049d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049da:	e029      	b.n	8004a30 <HAL_RCC_OscConfig+0x52c>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b05      	cmp	r3, #5
 80049e2:	d115      	bne.n	8004a10 <HAL_RCC_OscConfig+0x50c>
 80049e4:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ea:	4a07      	ldr	r2, [pc, #28]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049ec:	f043 0304 	orr.w	r3, r3, #4
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80049f4:	4b04      	ldr	r3, [pc, #16]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fa:	4a03      	ldr	r2, [pc, #12]	; (8004a08 <HAL_RCC_OscConfig+0x504>)
 80049fc:	f043 0301 	orr.w	r3, r3, #1
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a04:	e014      	b.n	8004a30 <HAL_RCC_OscConfig+0x52c>
 8004a06:	bf00      	nop
 8004a08:	40021000 	.word	0x40021000
 8004a0c:	40007000 	.word	0x40007000
 8004a10:	4b9a      	ldr	r3, [pc, #616]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a16:	4a99      	ldr	r2, [pc, #612]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a18:	f023 0301 	bic.w	r3, r3, #1
 8004a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a20:	4b96      	ldr	r3, [pc, #600]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a26:	4a95      	ldr	r2, [pc, #596]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a28:	f023 0304 	bic.w	r3, r3, #4
 8004a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d016      	beq.n	8004a66 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a38:	f7fc fd2a 	bl	8001490 <HAL_GetTick>
 8004a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a3e:	e00a      	b.n	8004a56 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a40:	f7fc fd26 	bl	8001490 <HAL_GetTick>
 8004a44:	4602      	mov	r2, r0
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	1ad3      	subs	r3, r2, r3
 8004a4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d901      	bls.n	8004a56 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004a52:	2303      	movs	r3, #3
 8004a54:	e162      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a56:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0ed      	beq.n	8004a40 <HAL_RCC_OscConfig+0x53c>
 8004a64:	e015      	b.n	8004a92 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7fc fd13 	bl	8001490 <HAL_GetTick>
 8004a6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7fc fd0f 	bl	8001490 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	693b      	ldr	r3, [r7, #16]
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e14b      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004a84:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1ed      	bne.n	8004a6e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a92:	7ffb      	ldrb	r3, [r7, #31]
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a98:	4b78      	ldr	r3, [pc, #480]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a9c:	4a77      	ldr	r2, [pc, #476]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004a9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aa2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0320 	and.w	r3, r3, #32
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d03c      	beq.n	8004b2a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d01c      	beq.n	8004af2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ab8:	4b70      	ldr	r3, [pc, #448]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004aba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004abe:	4a6f      	ldr	r2, [pc, #444]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004ac0:	f043 0301 	orr.w	r3, r3, #1
 8004ac4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac8:	f7fc fce2 	bl	8001490 <HAL_GetTick>
 8004acc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ace:	e008      	b.n	8004ae2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ad0:	f7fc fcde 	bl	8001490 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	d901      	bls.n	8004ae2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004ade:	2303      	movs	r3, #3
 8004ae0:	e11c      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004ae2:	4b66      	ldr	r3, [pc, #408]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004ae4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004ae8:	f003 0302 	and.w	r3, r3, #2
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d0ef      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x5cc>
 8004af0:	e01b      	b.n	8004b2a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004af2:	4b62      	ldr	r3, [pc, #392]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004af4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004af8:	4a60      	ldr	r2, [pc, #384]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004afa:	f023 0301 	bic.w	r3, r3, #1
 8004afe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b02:	f7fc fcc5 	bl	8001490 <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b0a:	f7fc fcc1 	bl	8001490 <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b02      	cmp	r3, #2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e0ff      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004b1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ef      	bne.n	8004b0a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80f3 	beq.w	8004d1a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b38:	2b02      	cmp	r3, #2
 8004b3a:	f040 80c9 	bne.w	8004cd0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004b3e:	4b4f      	ldr	r3, [pc, #316]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	f003 0203 	and.w	r2, r3, #3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d12c      	bne.n	8004bac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	3b01      	subs	r3, #1
 8004b5e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d123      	bne.n	8004bac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b64:	697b      	ldr	r3, [r7, #20]
 8004b66:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b6e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d11b      	bne.n	8004bac <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b7e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d113      	bne.n	8004bac <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	3b01      	subs	r3, #1
 8004b92:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d109      	bne.n	8004bac <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	085b      	lsrs	r3, r3, #1
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d06b      	beq.n	8004c84 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	2b0c      	cmp	r3, #12
 8004bb0:	d062      	beq.n	8004c78 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004bb2:	4b32      	ldr	r3, [pc, #200]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d001      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e0ac      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004bc2:	4b2e      	ldr	r3, [pc, #184]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	4a2d      	ldr	r2, [pc, #180]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bc8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bcc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004bce:	f7fc fc5f 	bl	8001490 <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bd4:	e008      	b.n	8004be8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bd6:	f7fc fc5b 	bl	8001490 <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d901      	bls.n	8004be8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004be4:	2303      	movs	r3, #3
 8004be6:	e099      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004be8:	4b24      	ldr	r3, [pc, #144]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1f0      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004bf4:	4b21      	ldr	r3, [pc, #132]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004bf6:	68da      	ldr	r2, [r3, #12]
 8004bf8:	4b21      	ldr	r3, [pc, #132]	; (8004c80 <HAL_RCC_OscConfig+0x77c>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c04:	3a01      	subs	r2, #1
 8004c06:	0112      	lsls	r2, r2, #4
 8004c08:	4311      	orrs	r1, r2
 8004c0a:	687a      	ldr	r2, [r7, #4]
 8004c0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c0e:	0212      	lsls	r2, r2, #8
 8004c10:	4311      	orrs	r1, r2
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c16:	0852      	lsrs	r2, r2, #1
 8004c18:	3a01      	subs	r2, #1
 8004c1a:	0552      	lsls	r2, r2, #21
 8004c1c:	4311      	orrs	r1, r2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004c22:	0852      	lsrs	r2, r2, #1
 8004c24:	3a01      	subs	r2, #1
 8004c26:	0652      	lsls	r2, r2, #25
 8004c28:	4311      	orrs	r1, r2
 8004c2a:	687a      	ldr	r2, [r7, #4]
 8004c2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004c2e:	06d2      	lsls	r2, r2, #27
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4912      	ldr	r1, [pc, #72]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a0f      	ldr	r2, [pc, #60]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c44:	4b0d      	ldr	r3, [pc, #52]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4a0c      	ldr	r2, [pc, #48]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004c50:	f7fc fc1e 	bl	8001490 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c58:	f7fc fc1a 	bl	8001490 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e058      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c6a:	4b04      	ldr	r3, [pc, #16]	; (8004c7c <HAL_RCC_OscConfig+0x778>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004c76:	e050      	b.n	8004d1a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e04f      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
 8004c7c:	40021000 	.word	0x40021000
 8004c80:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c84:	4b27      	ldr	r3, [pc, #156]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d144      	bne.n	8004d1a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004c90:	4b24      	ldr	r3, [pc, #144]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a23      	ldr	r2, [pc, #140]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c9c:	4b21      	ldr	r3, [pc, #132]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	4a20      	ldr	r2, [pc, #128]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004ca8:	f7fc fbf2 	bl	8001490 <HAL_GetTick>
 8004cac:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cae:	e008      	b.n	8004cc2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cb0:	f7fc fbee 	bl	8001490 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	2b02      	cmp	r3, #2
 8004cbc:	d901      	bls.n	8004cc2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004cbe:	2303      	movs	r3, #3
 8004cc0:	e02c      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d0f0      	beq.n	8004cb0 <HAL_RCC_OscConfig+0x7ac>
 8004cce:	e024      	b.n	8004d1a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	2b0c      	cmp	r3, #12
 8004cd4:	d01f      	beq.n	8004d16 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cd6:	4b13      	ldr	r3, [pc, #76]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a12      	ldr	r2, [pc, #72]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004cdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ce0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ce2:	f7fc fbd5 	bl	8001490 <HAL_GetTick>
 8004ce6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce8:	e008      	b.n	8004cfc <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cea:	f7fc fbd1 	bl	8001490 <HAL_GetTick>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	1ad3      	subs	r3, r2, r3
 8004cf4:	2b02      	cmp	r3, #2
 8004cf6:	d901      	bls.n	8004cfc <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004cf8:	2303      	movs	r3, #3
 8004cfa:	e00f      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cfc:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1f0      	bne.n	8004cea <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004d0a:	68da      	ldr	r2, [r3, #12]
 8004d0c:	4905      	ldr	r1, [pc, #20]	; (8004d24 <HAL_RCC_OscConfig+0x820>)
 8004d0e:	4b06      	ldr	r3, [pc, #24]	; (8004d28 <HAL_RCC_OscConfig+0x824>)
 8004d10:	4013      	ands	r3, r2
 8004d12:	60cb      	str	r3, [r1, #12]
 8004d14:	e001      	b.n	8004d1a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e000      	b.n	8004d1c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004d1a:	2300      	movs	r3, #0
}
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	3720      	adds	r7, #32
 8004d20:	46bd      	mov	sp, r7
 8004d22:	bd80      	pop	{r7, pc}
 8004d24:	40021000 	.word	0x40021000
 8004d28:	feeefffc 	.word	0xfeeefffc

08004d2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b084      	sub	sp, #16
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d101      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e0e7      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d40:	4b75      	ldr	r3, [pc, #468]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0307 	and.w	r3, r3, #7
 8004d48:	683a      	ldr	r2, [r7, #0]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d910      	bls.n	8004d70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d4e:	4b72      	ldr	r3, [pc, #456]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f023 0207 	bic.w	r2, r3, #7
 8004d56:	4970      	ldr	r1, [pc, #448]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d5e:	4b6e      	ldr	r3, [pc, #440]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	429a      	cmp	r2, r3
 8004d6a:	d001      	beq.n	8004d70 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004d6c:	2301      	movs	r3, #1
 8004d6e:	e0cf      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d010      	beq.n	8004d9e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689a      	ldr	r2, [r3, #8]
 8004d80:	4b66      	ldr	r3, [pc, #408]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d908      	bls.n	8004d9e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d8c:	4b63      	ldr	r3, [pc, #396]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	4960      	ldr	r1, [pc, #384]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004d9a:	4313      	orrs	r3, r2
 8004d9c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d04c      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b03      	cmp	r3, #3
 8004db0:	d107      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004db2:	4b5a      	ldr	r3, [pc, #360]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d121      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e0a6      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d107      	bne.n	8004dda <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dca:	4b54      	ldr	r3, [pc, #336]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d115      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e09a      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d107      	bne.n	8004df2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004de2:	4b4e      	ldr	r3, [pc, #312]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	e08e      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df2:	4b4a      	ldr	r3, [pc, #296]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d101      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e086      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e02:	4b46      	ldr	r3, [pc, #280]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	f023 0203 	bic.w	r2, r3, #3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	4943      	ldr	r1, [pc, #268]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e14:	f7fc fb3c 	bl	8001490 <HAL_GetTick>
 8004e18:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e1a:	e00a      	b.n	8004e32 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e1c:	f7fc fb38 	bl	8001490 <HAL_GetTick>
 8004e20:	4602      	mov	r2, r0
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e06e      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e32:	4b3a      	ldr	r3, [pc, #232]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 020c 	and.w	r2, r3, #12
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d1eb      	bne.n	8004e1c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0302 	and.w	r3, r3, #2
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d010      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689a      	ldr	r2, [r3, #8]
 8004e54:	4b31      	ldr	r3, [pc, #196]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	d208      	bcs.n	8004e72 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e60:	4b2e      	ldr	r3, [pc, #184]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	492b      	ldr	r1, [pc, #172]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e72:	4b29      	ldr	r3, [pc, #164]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d210      	bcs.n	8004ea2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e80:	4b25      	ldr	r3, [pc, #148]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f023 0207 	bic.w	r2, r3, #7
 8004e88:	4923      	ldr	r1, [pc, #140]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e90:	4b21      	ldr	r3, [pc, #132]	; (8004f18 <HAL_RCC_ClockConfig+0x1ec>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0307 	and.w	r3, r3, #7
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d001      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e036      	b.n	8004f10 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0304 	and.w	r3, r3, #4
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d008      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004eae:	4b1b      	ldr	r3, [pc, #108]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	68db      	ldr	r3, [r3, #12]
 8004eba:	4918      	ldr	r1, [pc, #96]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0308 	and.w	r3, r3, #8
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d009      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ecc:	4b13      	ldr	r3, [pc, #76]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	00db      	lsls	r3, r3, #3
 8004eda:	4910      	ldr	r1, [pc, #64]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004ee0:	f000 f824 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	4b0d      	ldr	r3, [pc, #52]	; (8004f1c <HAL_RCC_ClockConfig+0x1f0>)
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	091b      	lsrs	r3, r3, #4
 8004eec:	f003 030f 	and.w	r3, r3, #15
 8004ef0:	490b      	ldr	r1, [pc, #44]	; (8004f20 <HAL_RCC_ClockConfig+0x1f4>)
 8004ef2:	5ccb      	ldrb	r3, [r1, r3]
 8004ef4:	f003 031f 	and.w	r3, r3, #31
 8004ef8:	fa22 f303 	lsr.w	r3, r2, r3
 8004efc:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_RCC_ClockConfig+0x1f8>)
 8004efe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004f00:	4b09      	ldr	r3, [pc, #36]	; (8004f28 <HAL_RCC_ClockConfig+0x1fc>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	4618      	mov	r0, r3
 8004f06:	f7fc fa73 	bl	80013f0 <HAL_InitTick>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004f0e:	7afb      	ldrb	r3, [r7, #11]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	40022000 	.word	0x40022000
 8004f1c:	40021000 	.word	0x40021000
 8004f20:	080079a0 	.word	0x080079a0
 8004f24:	20000000 	.word	0x20000000
 8004f28:	20000004 	.word	0x20000004

08004f2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b089      	sub	sp, #36	; 0x24
 8004f30:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004f32:	2300      	movs	r3, #0
 8004f34:	61fb      	str	r3, [r7, #28]
 8004f36:	2300      	movs	r3, #0
 8004f38:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f3a:	4b3e      	ldr	r3, [pc, #248]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 030c 	and.w	r3, r3, #12
 8004f42:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f44:	4b3b      	ldr	r3, [pc, #236]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	f003 0303 	and.w	r3, r3, #3
 8004f4c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d005      	beq.n	8004f60 <HAL_RCC_GetSysClockFreq+0x34>
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	2b0c      	cmp	r3, #12
 8004f58:	d121      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2b01      	cmp	r3, #1
 8004f5e:	d11e      	bne.n	8004f9e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f60:	4b34      	ldr	r3, [pc, #208]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f003 0308 	and.w	r3, r3, #8
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d107      	bne.n	8004f7c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f6c:	4b31      	ldr	r3, [pc, #196]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f6e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f72:	0a1b      	lsrs	r3, r3, #8
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	61fb      	str	r3, [r7, #28]
 8004f7a:	e005      	b.n	8004f88 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f7c:	4b2d      	ldr	r3, [pc, #180]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	091b      	lsrs	r3, r3, #4
 8004f82:	f003 030f 	and.w	r3, r3, #15
 8004f86:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004f88:	4a2b      	ldr	r2, [pc, #172]	; (8005038 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f90:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10d      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004f9c:	e00a      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d102      	bne.n	8004faa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004fa4:	4b25      	ldr	r3, [pc, #148]	; (800503c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	e004      	b.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	d101      	bne.n	8004fb4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004fb0:	4b23      	ldr	r3, [pc, #140]	; (8005040 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fb2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b0c      	cmp	r3, #12
 8004fb8:	d134      	bne.n	8005024 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004fba:	4b1e      	ldr	r3, [pc, #120]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fbc:	68db      	ldr	r3, [r3, #12]
 8004fbe:	f003 0303 	and.w	r3, r3, #3
 8004fc2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	2b03      	cmp	r3, #3
 8004fce:	d003      	beq.n	8004fd8 <HAL_RCC_GetSysClockFreq+0xac>
 8004fd0:	e005      	b.n	8004fde <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004fd2:	4b1a      	ldr	r3, [pc, #104]	; (800503c <HAL_RCC_GetSysClockFreq+0x110>)
 8004fd4:	617b      	str	r3, [r7, #20]
      break;
 8004fd6:	e005      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004fd8:	4b19      	ldr	r3, [pc, #100]	; (8005040 <HAL_RCC_GetSysClockFreq+0x114>)
 8004fda:	617b      	str	r3, [r7, #20]
      break;
 8004fdc:	e002      	b.n	8004fe4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	617b      	str	r3, [r7, #20]
      break;
 8004fe2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004fe4:	4b13      	ldr	r3, [pc, #76]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 0307 	and.w	r3, r3, #7
 8004fee:	3301      	adds	r3, #1
 8004ff0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	0a1b      	lsrs	r3, r3, #8
 8004ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	fb03 f202 	mul.w	r2, r3, r2
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800500a:	4b0a      	ldr	r3, [pc, #40]	; (8005034 <HAL_RCC_GetSysClockFreq+0x108>)
 800500c:	68db      	ldr	r3, [r3, #12]
 800500e:	0e5b      	lsrs	r3, r3, #25
 8005010:	f003 0303 	and.w	r3, r3, #3
 8005014:	3301      	adds	r3, #1
 8005016:	005b      	lsls	r3, r3, #1
 8005018:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800501a:	697a      	ldr	r2, [r7, #20]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005024:	69bb      	ldr	r3, [r7, #24]
}
 8005026:	4618      	mov	r0, r3
 8005028:	3724      	adds	r7, #36	; 0x24
 800502a:	46bd      	mov	sp, r7
 800502c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005030:	4770      	bx	lr
 8005032:	bf00      	nop
 8005034:	40021000 	.word	0x40021000
 8005038:	080079b8 	.word	0x080079b8
 800503c:	00f42400 	.word	0x00f42400
 8005040:	007a1200 	.word	0x007a1200

08005044 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005044:	b480      	push	{r7}
 8005046:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005048:	4b03      	ldr	r3, [pc, #12]	; (8005058 <HAL_RCC_GetHCLKFreq+0x14>)
 800504a:	681b      	ldr	r3, [r3, #0]
}
 800504c:	4618      	mov	r0, r3
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	20000000 	.word	0x20000000

0800505c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005060:	f7ff fff0 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005064:	4602      	mov	r2, r0
 8005066:	4b06      	ldr	r3, [pc, #24]	; (8005080 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	0a1b      	lsrs	r3, r3, #8
 800506c:	f003 0307 	and.w	r3, r3, #7
 8005070:	4904      	ldr	r1, [pc, #16]	; (8005084 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005072:	5ccb      	ldrb	r3, [r1, r3]
 8005074:	f003 031f 	and.w	r3, r3, #31
 8005078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800507c:	4618      	mov	r0, r3
 800507e:	bd80      	pop	{r7, pc}
 8005080:	40021000 	.word	0x40021000
 8005084:	080079b0 	.word	0x080079b0

08005088 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800508c:	f7ff ffda 	bl	8005044 <HAL_RCC_GetHCLKFreq>
 8005090:	4602      	mov	r2, r0
 8005092:	4b06      	ldr	r3, [pc, #24]	; (80050ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	0adb      	lsrs	r3, r3, #11
 8005098:	f003 0307 	and.w	r3, r3, #7
 800509c:	4904      	ldr	r1, [pc, #16]	; (80050b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800509e:	5ccb      	ldrb	r3, [r1, r3]
 80050a0:	f003 031f 	and.w	r3, r3, #31
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	bd80      	pop	{r7, pc}
 80050ac:	40021000 	.word	0x40021000
 80050b0:	080079b0 	.word	0x080079b0

080050b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80050bc:	2300      	movs	r3, #0
 80050be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80050c0:	4b2a      	ldr	r3, [pc, #168]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80050cc:	f7ff f9b6 	bl	800443c <HAL_PWREx_GetVoltageRange>
 80050d0:	6178      	str	r0, [r7, #20]
 80050d2:	e014      	b.n	80050fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050d8:	4a24      	ldr	r2, [pc, #144]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050de:	6593      	str	r3, [r2, #88]	; 0x58
 80050e0:	4b22      	ldr	r3, [pc, #136]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80050ec:	f7ff f9a6 	bl	800443c <HAL_PWREx_GetVoltageRange>
 80050f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80050f2:	4b1e      	ldr	r3, [pc, #120]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f6:	4a1d      	ldr	r2, [pc, #116]	; (800516c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80050f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005104:	d10b      	bne.n	800511e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b80      	cmp	r3, #128	; 0x80
 800510a:	d919      	bls.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2ba0      	cmp	r3, #160	; 0xa0
 8005110:	d902      	bls.n	8005118 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005112:	2302      	movs	r3, #2
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	e013      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005118:	2301      	movs	r3, #1
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	e010      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2b80      	cmp	r3, #128	; 0x80
 8005122:	d902      	bls.n	800512a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005124:	2303      	movs	r3, #3
 8005126:	613b      	str	r3, [r7, #16]
 8005128:	e00a      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b80      	cmp	r3, #128	; 0x80
 800512e:	d102      	bne.n	8005136 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005130:	2302      	movs	r3, #2
 8005132:	613b      	str	r3, [r7, #16]
 8005134:	e004      	b.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2b70      	cmp	r3, #112	; 0x70
 800513a:	d101      	bne.n	8005140 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800513c:	2301      	movs	r3, #1
 800513e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 0207 	bic.w	r2, r3, #7
 8005148:	4909      	ldr	r1, [pc, #36]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005150:	4b07      	ldr	r3, [pc, #28]	; (8005170 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f003 0307 	and.w	r3, r3, #7
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d001      	beq.n	8005162 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e000      	b.n	8005164 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005162:	2300      	movs	r3, #0
}
 8005164:	4618      	mov	r0, r3
 8005166:	3718      	adds	r7, #24
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	40021000 	.word	0x40021000
 8005170:	40022000 	.word	0x40022000

08005174 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800517c:	2300      	movs	r3, #0
 800517e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005180:	2300      	movs	r3, #0
 8005182:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800518c:	2b00      	cmp	r3, #0
 800518e:	d031      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005194:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005198:	d01a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800519a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800519e:	d814      	bhi.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x56>
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d009      	beq.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80051a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80051a8:	d10f      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80051aa:	4b5d      	ldr	r3, [pc, #372]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	4a5c      	ldr	r2, [pc, #368]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051b4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051b6:	e00c      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	3304      	adds	r3, #4
 80051bc:	2100      	movs	r1, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	f000 f9de 	bl	8005580 <RCCEx_PLLSAI1_Config>
 80051c4:	4603      	mov	r3, r0
 80051c6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80051c8:	e003      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	74fb      	strb	r3, [r7, #19]
      break;
 80051ce:	e000      	b.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80051d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80051d2:	7cfb      	ldrb	r3, [r7, #19]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d10b      	bne.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d8:	4b51      	ldr	r3, [pc, #324]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	494e      	ldr	r1, [pc, #312]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80051e8:	4313      	orrs	r3, r2
 80051ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80051ee:	e001      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051f0:	7cfb      	ldrb	r3, [r7, #19]
 80051f2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 809e 	beq.w	800533e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005202:	2300      	movs	r3, #0
 8005204:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800520a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005212:	2301      	movs	r3, #1
 8005214:	e000      	b.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005216:	2300      	movs	r3, #0
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00d      	beq.n	8005238 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521c:	4b40      	ldr	r3, [pc, #256]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800521e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005220:	4a3f      	ldr	r2, [pc, #252]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005222:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005226:	6593      	str	r3, [r2, #88]	; 0x58
 8005228:	4b3d      	ldr	r3, [pc, #244]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800522a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005230:	60bb      	str	r3, [r7, #8]
 8005232:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005234:	2301      	movs	r3, #1
 8005236:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005238:	4b3a      	ldr	r3, [pc, #232]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a39      	ldr	r2, [pc, #228]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800523e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005242:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005244:	f7fc f924 	bl	8001490 <HAL_GetTick>
 8005248:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800524a:	e009      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800524c:	f7fc f920 	bl	8001490 <HAL_GetTick>
 8005250:	4602      	mov	r2, r0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1ad3      	subs	r3, r2, r3
 8005256:	2b02      	cmp	r3, #2
 8005258:	d902      	bls.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800525a:	2303      	movs	r3, #3
 800525c:	74fb      	strb	r3, [r7, #19]
        break;
 800525e:	e005      	b.n	800526c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005260:	4b30      	ldr	r3, [pc, #192]	; (8005324 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005268:	2b00      	cmp	r3, #0
 800526a:	d0ef      	beq.n	800524c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800526c:	7cfb      	ldrb	r3, [r7, #19]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d15a      	bne.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005272:	4b2b      	ldr	r3, [pc, #172]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005274:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005278:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800527c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d01e      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	429a      	cmp	r2, r3
 800528c:	d019      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800528e:	4b24      	ldr	r3, [pc, #144]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005298:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800529a:	4b21      	ldr	r3, [pc, #132]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052aa:	4b1d      	ldr	r3, [pc, #116]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052b0:	4a1b      	ldr	r2, [pc, #108]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052ba:	4a19      	ldr	r2, [pc, #100]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	f003 0301 	and.w	r3, r3, #1
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d016      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052cc:	f7fc f8e0 	bl	8001490 <HAL_GetTick>
 80052d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052d2:	e00b      	b.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d4:	f7fc f8dc 	bl	8001490 <HAL_GetTick>
 80052d8:	4602      	mov	r2, r0
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	1ad3      	subs	r3, r2, r3
 80052de:	f241 3288 	movw	r2, #5000	; 0x1388
 80052e2:	4293      	cmp	r3, r2
 80052e4:	d902      	bls.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	74fb      	strb	r3, [r7, #19]
            break;
 80052ea:	e006      	b.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80052ec:	4b0c      	ldr	r3, [pc, #48]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80052ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0ec      	beq.n	80052d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80052fa:	7cfb      	ldrb	r3, [r7, #19]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d10b      	bne.n	8005318 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005300:	4b07      	ldr	r3, [pc, #28]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005306:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800530e:	4904      	ldr	r1, [pc, #16]	; (8005320 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005310:	4313      	orrs	r3, r2
 8005312:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005316:	e009      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005318:	7cfb      	ldrb	r3, [r7, #19]
 800531a:	74bb      	strb	r3, [r7, #18]
 800531c:	e006      	b.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800531e:	bf00      	nop
 8005320:	40021000 	.word	0x40021000
 8005324:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800532c:	7c7b      	ldrb	r3, [r7, #17]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d105      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005332:	4b8a      	ldr	r3, [pc, #552]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005336:	4a89      	ldr	r2, [pc, #548]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005338:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800533c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d00a      	beq.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800534a:	4b84      	ldr	r3, [pc, #528]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800534c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005350:	f023 0203 	bic.w	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a1b      	ldr	r3, [r3, #32]
 8005358:	4980      	ldr	r1, [pc, #512]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800535a:	4313      	orrs	r3, r2
 800535c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800536c:	4b7b      	ldr	r3, [pc, #492]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800536e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005372:	f023 020c 	bic.w	r2, r3, #12
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800537a:	4978      	ldr	r1, [pc, #480]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800537c:	4313      	orrs	r3, r2
 800537e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800538e:	4b73      	ldr	r3, [pc, #460]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005394:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	496f      	ldr	r1, [pc, #444]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053b0:	4b6a      	ldr	r3, [pc, #424]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053be:	4967      	ldr	r1, [pc, #412]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80053d2:	4b62      	ldr	r3, [pc, #392]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053e0:	495e      	ldr	r1, [pc, #376]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053f4:	4b59      	ldr	r3, [pc, #356]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80053f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005402:	4956      	ldr	r1, [pc, #344]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005416:	4b51      	ldr	r3, [pc, #324]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800541c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	494d      	ldr	r1, [pc, #308]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d028      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005438:	4b48      	ldr	r3, [pc, #288]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800543a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800543e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4945      	ldr	r1, [pc, #276]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005456:	d106      	bne.n	8005466 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005458:	4b40      	ldr	r3, [pc, #256]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	4a3f      	ldr	r2, [pc, #252]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800545e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005462:	60d3      	str	r3, [r2, #12]
 8005464:	e011      	b.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800546e:	d10c      	bne.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	3304      	adds	r3, #4
 8005474:	2101      	movs	r1, #1
 8005476:	4618      	mov	r0, r3
 8005478:	f000 f882 	bl	8005580 <RCCEx_PLLSAI1_Config>
 800547c:	4603      	mov	r3, r0
 800547e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005480:	7cfb      	ldrb	r3, [r7, #19]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d001      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005486:	7cfb      	ldrb	r3, [r7, #19]
 8005488:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d028      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005496:	4b31      	ldr	r3, [pc, #196]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800549c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054a4:	492d      	ldr	r1, [pc, #180]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80054b4:	d106      	bne.n	80054c4 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054b6:	4b29      	ldr	r3, [pc, #164]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	4a28      	ldr	r2, [pc, #160]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054c0:	60d3      	str	r3, [r2, #12]
 80054c2:	e011      	b.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054cc:	d10c      	bne.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2101      	movs	r1, #1
 80054d4:	4618      	mov	r0, r3
 80054d6:	f000 f853 	bl	8005580 <RCCEx_PLLSAI1_Config>
 80054da:	4603      	mov	r3, r0
 80054dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054de:	7cfb      	ldrb	r3, [r7, #19]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d001      	beq.n	80054e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80054e4:	7cfb      	ldrb	r3, [r7, #19]
 80054e6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01c      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054f4:	4b19      	ldr	r3, [pc, #100]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80054f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005502:	4916      	ldr	r1, [pc, #88]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800550e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005512:	d10c      	bne.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	3304      	adds	r3, #4
 8005518:	2102      	movs	r1, #2
 800551a:	4618      	mov	r0, r3
 800551c:	f000 f830 	bl	8005580 <RCCEx_PLLSAI1_Config>
 8005520:	4603      	mov	r3, r0
 8005522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005524:	7cfb      	ldrb	r3, [r7, #19]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800552a:	7cfb      	ldrb	r3, [r7, #19]
 800552c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00a      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800553a:	4b08      	ldr	r3, [pc, #32]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800553c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005540:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005548:	4904      	ldr	r1, [pc, #16]	; (800555c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800554a:	4313      	orrs	r3, r2
 800554c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005550:	7cbb      	ldrb	r3, [r7, #18]
}
 8005552:	4618      	mov	r0, r3
 8005554:	3718      	adds	r7, #24
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
 800555a:	bf00      	nop
 800555c:	40021000 	.word	0x40021000

08005560 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005564:	4b05      	ldr	r3, [pc, #20]	; (800557c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a04      	ldr	r2, [pc, #16]	; (800557c <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800556a:	f043 0304 	orr.w	r3, r3, #4
 800556e:	6013      	str	r3, [r2, #0]
}
 8005570:	bf00      	nop
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	40021000 	.word	0x40021000

08005580 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800558e:	4b74      	ldr	r3, [pc, #464]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0303 	and.w	r3, r3, #3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d018      	beq.n	80055cc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800559a:	4b71      	ldr	r3, [pc, #452]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	f003 0203 	and.w	r2, r3, #3
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d10d      	bne.n	80055c6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
       ||
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d009      	beq.n	80055c6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80055b2:	4b6b      	ldr	r3, [pc, #428]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	1c5a      	adds	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	685b      	ldr	r3, [r3, #4]
       ||
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d047      	beq.n	8005656 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	73fb      	strb	r3, [r7, #15]
 80055ca:	e044      	b.n	8005656 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d018      	beq.n	8005606 <RCCEx_PLLSAI1_Config+0x86>
 80055d4:	2b03      	cmp	r3, #3
 80055d6:	d825      	bhi.n	8005624 <RCCEx_PLLSAI1_Config+0xa4>
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d002      	beq.n	80055e2 <RCCEx_PLLSAI1_Config+0x62>
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d009      	beq.n	80055f4 <RCCEx_PLLSAI1_Config+0x74>
 80055e0:	e020      	b.n	8005624 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80055e2:	4b5f      	ldr	r3, [pc, #380]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0302 	and.w	r3, r3, #2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d11d      	bne.n	800562a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80055f2:	e01a      	b.n	800562a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80055f4:	4b5a      	ldr	r3, [pc, #360]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d116      	bne.n	800562e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005604:	e013      	b.n	800562e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005606:	4b56      	ldr	r3, [pc, #344]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d10f      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005612:	4b53      	ldr	r3, [pc, #332]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d109      	bne.n	8005632 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005622:	e006      	b.n	8005632 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005624:	2301      	movs	r3, #1
 8005626:	73fb      	strb	r3, [r7, #15]
      break;
 8005628:	e004      	b.n	8005634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800562a:	bf00      	nop
 800562c:	e002      	b.n	8005634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800562e:	bf00      	nop
 8005630:	e000      	b.n	8005634 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005632:	bf00      	nop
    }

    if(status == HAL_OK)
 8005634:	7bfb      	ldrb	r3, [r7, #15]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10d      	bne.n	8005656 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800563a:	4b49      	ldr	r3, [pc, #292]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	3b01      	subs	r3, #1
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	430b      	orrs	r3, r1
 8005650:	4943      	ldr	r1, [pc, #268]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005652:	4313      	orrs	r3, r2
 8005654:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005656:	7bfb      	ldrb	r3, [r7, #15]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d17c      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800565c:	4b40      	ldr	r3, [pc, #256]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a3f      	ldr	r2, [pc, #252]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005662:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005668:	f7fb ff12 	bl	8001490 <HAL_GetTick>
 800566c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800566e:	e009      	b.n	8005684 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005670:	f7fb ff0e 	bl	8001490 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d902      	bls.n	8005684 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	73fb      	strb	r3, [r7, #15]
        break;
 8005682:	e005      	b.n	8005690 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005684:	4b36      	ldr	r3, [pc, #216]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1ef      	bne.n	8005670 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005690:	7bfb      	ldrb	r3, [r7, #15]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d15f      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800569c:	4b30      	ldr	r3, [pc, #192]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80056a4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6892      	ldr	r2, [r2, #8]
 80056ac:	0211      	lsls	r1, r2, #8
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	68d2      	ldr	r2, [r2, #12]
 80056b2:	06d2      	lsls	r2, r2, #27
 80056b4:	430a      	orrs	r2, r1
 80056b6:	492a      	ldr	r1, [pc, #168]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056b8:	4313      	orrs	r3, r2
 80056ba:	610b      	str	r3, [r1, #16]
 80056bc:	e027      	b.n	800570e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d112      	bne.n	80056ea <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056c4:	4b26      	ldr	r3, [pc, #152]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056c6:	691b      	ldr	r3, [r3, #16]
 80056c8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80056cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6892      	ldr	r2, [r2, #8]
 80056d4:	0211      	lsls	r1, r2, #8
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	6912      	ldr	r2, [r2, #16]
 80056da:	0852      	lsrs	r2, r2, #1
 80056dc:	3a01      	subs	r2, #1
 80056de:	0552      	lsls	r2, r2, #21
 80056e0:	430a      	orrs	r2, r1
 80056e2:	491f      	ldr	r1, [pc, #124]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	610b      	str	r3, [r1, #16]
 80056e8:	e011      	b.n	800570e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80056ea:	4b1d      	ldr	r3, [pc, #116]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80056f2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	0211      	lsls	r1, r2, #8
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6952      	ldr	r2, [r2, #20]
 8005700:	0852      	lsrs	r2, r2, #1
 8005702:	3a01      	subs	r2, #1
 8005704:	0652      	lsls	r2, r2, #25
 8005706:	430a      	orrs	r2, r1
 8005708:	4915      	ldr	r1, [pc, #84]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800570a:	4313      	orrs	r3, r2
 800570c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800570e:	4b14      	ldr	r3, [pc, #80]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a13      	ldr	r2, [pc, #76]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005714:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005718:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571a:	f7fb feb9 	bl	8001490 <HAL_GetTick>
 800571e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005720:	e009      	b.n	8005736 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005722:	f7fb feb5 	bl	8001490 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	68bb      	ldr	r3, [r7, #8]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d902      	bls.n	8005736 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	73fb      	strb	r3, [r7, #15]
          break;
 8005734:	e005      	b.n	8005742 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005736:	4b0a      	ldr	r3, [pc, #40]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800573e:	2b00      	cmp	r3, #0
 8005740:	d0ef      	beq.n	8005722 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005742:	7bfb      	ldrb	r3, [r7, #15]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d106      	bne.n	8005756 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005748:	4b05      	ldr	r3, [pc, #20]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574a:	691a      	ldr	r2, [r3, #16]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	699b      	ldr	r3, [r3, #24]
 8005750:	4903      	ldr	r1, [pc, #12]	; (8005760 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005752:	4313      	orrs	r3, r2
 8005754:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005756:	7bfb      	ldrb	r3, [r7, #15]
}
 8005758:	4618      	mov	r0, r3
 800575a:	3710      	adds	r7, #16
 800575c:	46bd      	mov	sp, r7
 800575e:	bd80      	pop	{r7, pc}
 8005760:	40021000 	.word	0x40021000

08005764 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e049      	b.n	800580a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d106      	bne.n	8005790 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800578a:	6878      	ldr	r0, [r7, #4]
 800578c:	f7fb fc74 	bl	8001078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2202      	movs	r2, #2
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	3304      	adds	r3, #4
 80057a0:	4619      	mov	r1, r3
 80057a2:	4610      	mov	r0, r2
 80057a4:	f000 fb04 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2201      	movs	r2, #1
 80057dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2201      	movs	r2, #1
 80057ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2201      	movs	r2, #1
 80057fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e049      	b.n	80058b8 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582a:	b2db      	uxtb	r3, r3
 800582c:	2b00      	cmp	r3, #0
 800582e:	d106      	bne.n	800583e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f000 f841 	bl	80058c0 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2202      	movs	r2, #2
 8005842:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	3304      	adds	r3, #4
 800584e:	4619      	mov	r1, r3
 8005850:	4610      	mov	r0, r2
 8005852:	f000 faad 	bl	8005db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2201      	movs	r2, #1
 800585a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2201      	movs	r2, #1
 8005862:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2201      	movs	r2, #1
 800587a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2201      	movs	r2, #1
 800588a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2201      	movs	r2, #1
 8005892:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2201      	movs	r2, #1
 80058a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2201      	movs	r2, #1
 80058aa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2201      	movs	r2, #1
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3708      	adds	r7, #8
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}

080058c0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	691b      	ldr	r3, [r3, #16]
 80058ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	f003 0302 	and.w	r3, r3, #2
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d020      	beq.n	8005938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d01b      	beq.n	8005938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f06f 0202 	mvn.w	r2, #2
 8005908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	699b      	ldr	r3, [r3, #24]
 8005916:	f003 0303 	and.w	r3, r3, #3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d003      	beq.n	8005926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f000 fa27 	bl	8005d72 <HAL_TIM_IC_CaptureCallback>
 8005924:	e005      	b.n	8005932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fa19 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 fa2a 	bl	8005d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	2b00      	cmp	r3, #0
 8005940:	d020      	beq.n	8005984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f003 0304 	and.w	r3, r3, #4
 8005948:	2b00      	cmp	r3, #0
 800594a:	d01b      	beq.n	8005984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f06f 0204 	mvn.w	r2, #4
 8005954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2202      	movs	r2, #2
 800595a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699b      	ldr	r3, [r3, #24]
 8005962:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005966:	2b00      	cmp	r3, #0
 8005968:	d003      	beq.n	8005972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fa01 	bl	8005d72 <HAL_TIM_IC_CaptureCallback>
 8005970:	e005      	b.n	800597e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f9f3 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	f000 fa04 	bl	8005d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2200      	movs	r2, #0
 8005982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d020      	beq.n	80059d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d01b      	beq.n	80059d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0208 	mvn.w	r2, #8
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2204      	movs	r2, #4
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	f003 0303 	and.w	r3, r3, #3
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f9db 	bl	8005d72 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 f9cd 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 f9de 	bl	8005d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	f003 0310 	and.w	r3, r3, #16
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d020      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d01b      	beq.n	8005a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f06f 0210 	mvn.w	r2, #16
 80059ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2208      	movs	r2, #8
 80059f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d003      	beq.n	8005a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f9b5 	bl	8005d72 <HAL_TIM_IC_CaptureCallback>
 8005a08:	e005      	b.n	8005a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f9a7 	bl	8005d5e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f9b8 	bl	8005d86 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	f003 0301 	and.w	r3, r3, #1
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d00c      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f003 0301 	and.w	r3, r3, #1
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d007      	beq.n	8005a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f06f 0201 	mvn.w	r2, #1
 8005a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f7fb f944 	bl	8000cc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d00c      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fd92 	bl	8006588 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00c      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d007      	beq.n	8005a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd8a 	bl	800659c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005a88:	68bb      	ldr	r3, [r7, #8]
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d00c      	beq.n	8005aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d007      	beq.n	8005aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 f977 	bl	8005d9a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	f003 0320 	and.w	r3, r3, #32
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d00c      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f003 0320 	and.w	r3, r3, #32
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0220 	mvn.w	r2, #32
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fd52 	bl	8006574 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ad0:	bf00      	nop
 8005ad2:	3710      	adds	r7, #16
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}

08005ad8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d101      	bne.n	8005af6 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005af2:	2302      	movs	r3, #2
 8005af4:	e066      	b.n	8005bc4 <HAL_TIM_OC_ConfigChannel+0xec>
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2201      	movs	r2, #1
 8005afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b14      	cmp	r3, #20
 8005b02:	d857      	bhi.n	8005bb4 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005b04:	a201      	add	r2, pc, #4	; (adr r2, 8005b0c <HAL_TIM_OC_ConfigChannel+0x34>)
 8005b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b0a:	bf00      	nop
 8005b0c:	08005b61 	.word	0x08005b61
 8005b10:	08005bb5 	.word	0x08005bb5
 8005b14:	08005bb5 	.word	0x08005bb5
 8005b18:	08005bb5 	.word	0x08005bb5
 8005b1c:	08005b6f 	.word	0x08005b6f
 8005b20:	08005bb5 	.word	0x08005bb5
 8005b24:	08005bb5 	.word	0x08005bb5
 8005b28:	08005bb5 	.word	0x08005bb5
 8005b2c:	08005b7d 	.word	0x08005b7d
 8005b30:	08005bb5 	.word	0x08005bb5
 8005b34:	08005bb5 	.word	0x08005bb5
 8005b38:	08005bb5 	.word	0x08005bb5
 8005b3c:	08005b8b 	.word	0x08005b8b
 8005b40:	08005bb5 	.word	0x08005bb5
 8005b44:	08005bb5 	.word	0x08005bb5
 8005b48:	08005bb5 	.word	0x08005bb5
 8005b4c:	08005b99 	.word	0x08005b99
 8005b50:	08005bb5 	.word	0x08005bb5
 8005b54:	08005bb5 	.word	0x08005bb5
 8005b58:	08005bb5 	.word	0x08005bb5
 8005b5c:	08005ba7 	.word	0x08005ba7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	68b9      	ldr	r1, [r7, #8]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f000 f986 	bl	8005e78 <TIM_OC1_SetConfig>
      break;
 8005b6c:	e025      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	68b9      	ldr	r1, [r7, #8]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f000 f9fb 	bl	8005f70 <TIM_OC2_SetConfig>
      break;
 8005b7a:	e01e      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	68b9      	ldr	r1, [r7, #8]
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 fa6e 	bl	8006064 <TIM_OC3_SetConfig>
      break;
 8005b88:	e017      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68b9      	ldr	r1, [r7, #8]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f000 fadf 	bl	8006154 <TIM_OC4_SetConfig>
      break;
 8005b96:	e010      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	68b9      	ldr	r1, [r7, #8]
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f000 fb36 	bl	8006210 <TIM_OC5_SetConfig>
      break;
 8005ba4:	e009      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 fb87 	bl	80062c0 <TIM_OC6_SetConfig>
      break;
 8005bb2:	e002      	b.n	8005bba <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	75fb      	strb	r3, [r7, #23]
      break;
 8005bb8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005bc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d101      	bne.n	8005be8 <HAL_TIM_ConfigClockSource+0x1c>
 8005be4:	2302      	movs	r3, #2
 8005be6:	e0b6      	b.n	8005d56 <HAL_TIM_ConfigClockSource+0x18a>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c00:	68bb      	ldr	r3, [r7, #8]
 8005c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c0a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	68bb      	ldr	r3, [r7, #8]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c12:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68ba      	ldr	r2, [r7, #8]
 8005c1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c24:	d03e      	beq.n	8005ca4 <HAL_TIM_ConfigClockSource+0xd8>
 8005c26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c2a:	f200 8087 	bhi.w	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c32:	f000 8086 	beq.w	8005d42 <HAL_TIM_ConfigClockSource+0x176>
 8005c36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c3a:	d87f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c3c:	2b70      	cmp	r3, #112	; 0x70
 8005c3e:	d01a      	beq.n	8005c76 <HAL_TIM_ConfigClockSource+0xaa>
 8005c40:	2b70      	cmp	r3, #112	; 0x70
 8005c42:	d87b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c44:	2b60      	cmp	r3, #96	; 0x60
 8005c46:	d050      	beq.n	8005cea <HAL_TIM_ConfigClockSource+0x11e>
 8005c48:	2b60      	cmp	r3, #96	; 0x60
 8005c4a:	d877      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c4c:	2b50      	cmp	r3, #80	; 0x50
 8005c4e:	d03c      	beq.n	8005cca <HAL_TIM_ConfigClockSource+0xfe>
 8005c50:	2b50      	cmp	r3, #80	; 0x50
 8005c52:	d873      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c54:	2b40      	cmp	r3, #64	; 0x40
 8005c56:	d058      	beq.n	8005d0a <HAL_TIM_ConfigClockSource+0x13e>
 8005c58:	2b40      	cmp	r3, #64	; 0x40
 8005c5a:	d86f      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c5c:	2b30      	cmp	r3, #48	; 0x30
 8005c5e:	d064      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c60:	2b30      	cmp	r3, #48	; 0x30
 8005c62:	d86b      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	d060      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d867      	bhi.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d05c      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c70:	2b10      	cmp	r3, #16
 8005c72:	d05a      	beq.n	8005d2a <HAL_TIM_ConfigClockSource+0x15e>
 8005c74:	e062      	b.n	8005d3c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005c86:	f000 fbef 	bl	8006468 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c98:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	68ba      	ldr	r2, [r7, #8]
 8005ca0:	609a      	str	r2, [r3, #8]
      break;
 8005ca2:	e04f      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005cb4:	f000 fbd8 	bl	8006468 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	689a      	ldr	r2, [r3, #8]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005cc6:	609a      	str	r2, [r3, #8]
      break;
 8005cc8:	e03c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f000 fb4c 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	2150      	movs	r1, #80	; 0x50
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 fba5 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005ce8:	e02c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	f000 fb6b 	bl	80063d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	2160      	movs	r1, #96	; 0x60
 8005d02:	4618      	mov	r0, r3
 8005d04:	f000 fb95 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d08:	e01c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d16:	461a      	mov	r2, r3
 8005d18:	f000 fb2c 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	2140      	movs	r1, #64	; 0x40
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 fb85 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d28:	e00c      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4619      	mov	r1, r3
 8005d34:	4610      	mov	r0, r2
 8005d36:	f000 fb7c 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005d3a:	e003      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d40:	e000      	b.n	8005d44 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005d42:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3710      	adds	r7, #16
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	bd80      	pop	{r7, pc}

08005d5e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d5e:	b480      	push	{r7}
 8005d60:	b083      	sub	sp, #12
 8005d62:	af00      	add	r7, sp, #0
 8005d64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d66:	bf00      	nop
 8005d68:	370c      	adds	r7, #12
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr

08005d72 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d72:	b480      	push	{r7}
 8005d74:	b083      	sub	sp, #12
 8005d76:	af00      	add	r7, sp, #0
 8005d78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d7a:	bf00      	nop
 8005d7c:	370c      	adds	r7, #12
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b083      	sub	sp, #12
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d8e:	bf00      	nop
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b083      	sub	sp, #12
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005da2:	bf00      	nop
 8005da4:	370c      	adds	r7, #12
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
	...

08005db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a2a      	ldr	r2, [pc, #168]	; (8005e6c <TIM_Base_SetConfig+0xbc>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d003      	beq.n	8005dd0 <TIM_Base_SetConfig+0x20>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dce:	d108      	bne.n	8005de2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_Base_SetConfig+0xbc>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00b      	beq.n	8005e02 <TIM_Base_SetConfig+0x52>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005df0:	d007      	beq.n	8005e02 <TIM_Base_SetConfig+0x52>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1e      	ldr	r2, [pc, #120]	; (8005e70 <TIM_Base_SetConfig+0xc0>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d003      	beq.n	8005e02 <TIM_Base_SetConfig+0x52>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1d      	ldr	r2, [pc, #116]	; (8005e74 <TIM_Base_SetConfig+0xc4>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d108      	bne.n	8005e14 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	68db      	ldr	r3, [r3, #12]
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	4313      	orrs	r3, r2
 8005e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	68fa      	ldr	r2, [r7, #12]
 8005e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	681a      	ldr	r2, [r3, #0]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a0c      	ldr	r2, [pc, #48]	; (8005e6c <TIM_Base_SetConfig+0xbc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d007      	beq.n	8005e50 <TIM_Base_SetConfig+0xa0>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <TIM_Base_SetConfig+0xc0>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d003      	beq.n	8005e50 <TIM_Base_SetConfig+0xa0>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a0a      	ldr	r2, [pc, #40]	; (8005e74 <TIM_Base_SetConfig+0xc4>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d103      	bne.n	8005e58 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	691a      	ldr	r2, [r3, #16]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	615a      	str	r2, [r3, #20]
}
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	40012c00 	.word	0x40012c00
 8005e70:	40014000 	.word	0x40014000
 8005e74:	40014400 	.word	0x40014400

08005e78 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b087      	sub	sp, #28
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a1b      	ldr	r3, [r3, #32]
 8005e86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	6a1b      	ldr	r3, [r3, #32]
 8005e8c:	f023 0201 	bic.w	r2, r3, #1
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	685b      	ldr	r3, [r3, #4]
 8005e98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0303 	bic.w	r3, r3, #3
 8005eb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68fa      	ldr	r2, [r7, #12]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	f023 0302 	bic.w	r3, r3, #2
 8005ec4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	689b      	ldr	r3, [r3, #8]
 8005eca:	697a      	ldr	r2, [r7, #20]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a24      	ldr	r2, [pc, #144]	; (8005f64 <TIM_OC1_SetConfig+0xec>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d007      	beq.n	8005ee8 <TIM_OC1_SetConfig+0x70>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a23      	ldr	r2, [pc, #140]	; (8005f68 <TIM_OC1_SetConfig+0xf0>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d003      	beq.n	8005ee8 <TIM_OC1_SetConfig+0x70>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	4a22      	ldr	r2, [pc, #136]	; (8005f6c <TIM_OC1_SetConfig+0xf4>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d10c      	bne.n	8005f02 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	f023 0308 	bic.w	r3, r3, #8
 8005eee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	697a      	ldr	r2, [r7, #20]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f023 0304 	bic.w	r3, r3, #4
 8005f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a17      	ldr	r2, [pc, #92]	; (8005f64 <TIM_OC1_SetConfig+0xec>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d007      	beq.n	8005f1a <TIM_OC1_SetConfig+0xa2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a16      	ldr	r2, [pc, #88]	; (8005f68 <TIM_OC1_SetConfig+0xf0>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d003      	beq.n	8005f1a <TIM_OC1_SetConfig+0xa2>
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	4a15      	ldr	r2, [pc, #84]	; (8005f6c <TIM_OC1_SetConfig+0xf4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d111      	bne.n	8005f3e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f22:	693b      	ldr	r3, [r7, #16]
 8005f24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	693a      	ldr	r2, [r7, #16]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	699b      	ldr	r3, [r3, #24]
 8005f38:	693a      	ldr	r2, [r7, #16]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	685a      	ldr	r2, [r3, #4]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	697a      	ldr	r2, [r7, #20]
 8005f56:	621a      	str	r2, [r3, #32]
}
 8005f58:	bf00      	nop
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40014000 	.word	0x40014000
 8005f6c:	40014400 	.word	0x40014400

08005f70 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b087      	sub	sp, #28
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a1b      	ldr	r3, [r3, #32]
 8005f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	6a1b      	ldr	r3, [r3, #32]
 8005f84:	f023 0210 	bic.w	r2, r3, #16
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	699b      	ldr	r3, [r3, #24]
 8005f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005f9e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005faa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	021b      	lsls	r3, r3, #8
 8005fb2:	68fa      	ldr	r2, [r7, #12]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	f023 0320 	bic.w	r3, r3, #32
 8005fbe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a22      	ldr	r2, [pc, #136]	; (8006058 <TIM_OC2_SetConfig+0xe8>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d10d      	bne.n	8005ff0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fda:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	011b      	lsls	r3, r3, #4
 8005fe2:	697a      	ldr	r2, [r7, #20]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	4a19      	ldr	r2, [pc, #100]	; (8006058 <TIM_OC2_SetConfig+0xe8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d007      	beq.n	8006008 <TIM_OC2_SetConfig+0x98>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a18      	ldr	r2, [pc, #96]	; (800605c <TIM_OC2_SetConfig+0xec>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_OC2_SetConfig+0x98>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a17      	ldr	r2, [pc, #92]	; (8006060 <TIM_OC2_SetConfig+0xf0>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d113      	bne.n	8006030 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800600e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006010:	693b      	ldr	r3, [r7, #16]
 8006012:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006016:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	695b      	ldr	r3, [r3, #20]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	693a      	ldr	r2, [r7, #16]
 8006020:	4313      	orrs	r3, r2
 8006022:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	699b      	ldr	r3, [r3, #24]
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4313      	orrs	r3, r2
 800602e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	68fa      	ldr	r2, [r7, #12]
 800603a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	685a      	ldr	r2, [r3, #4]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	697a      	ldr	r2, [r7, #20]
 8006048:	621a      	str	r2, [r3, #32]
}
 800604a:	bf00      	nop
 800604c:	371c      	adds	r7, #28
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	40012c00 	.word	0x40012c00
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400

08006064 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0303 	bic.w	r3, r3, #3
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	021b      	lsls	r3, r3, #8
 80060b8:	697a      	ldr	r2, [r7, #20]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a21      	ldr	r2, [pc, #132]	; (8006148 <TIM_OC3_SetConfig+0xe4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d10d      	bne.n	80060e2 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	68db      	ldr	r3, [r3, #12]
 80060d2:	021b      	lsls	r3, r3, #8
 80060d4:	697a      	ldr	r2, [r7, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a18      	ldr	r2, [pc, #96]	; (8006148 <TIM_OC3_SetConfig+0xe4>)
 80060e6:	4293      	cmp	r3, r2
 80060e8:	d007      	beq.n	80060fa <TIM_OC3_SetConfig+0x96>
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4a17      	ldr	r2, [pc, #92]	; (800614c <TIM_OC3_SetConfig+0xe8>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d003      	beq.n	80060fa <TIM_OC3_SetConfig+0x96>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	4a16      	ldr	r2, [pc, #88]	; (8006150 <TIM_OC3_SetConfig+0xec>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d113      	bne.n	8006122 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006100:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006108:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	699b      	ldr	r3, [r3, #24]
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	693a      	ldr	r2, [r7, #16]
 800611e:	4313      	orrs	r3, r2
 8006120:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	68fa      	ldr	r2, [r7, #12]
 800612c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	685a      	ldr	r2, [r3, #4]
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	697a      	ldr	r2, [r7, #20]
 800613a:	621a      	str	r2, [r3, #32]
}
 800613c:	bf00      	nop
 800613e:	371c      	adds	r7, #28
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr
 8006148:	40012c00 	.word	0x40012c00
 800614c:	40014000 	.word	0x40014000
 8006150:	40014400 	.word	0x40014400

08006154 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006154:	b480      	push	{r7}
 8006156:	b087      	sub	sp, #28
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a1b      	ldr	r3, [r3, #32]
 8006162:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a1b      	ldr	r3, [r3, #32]
 8006168:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
 8006174:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006182:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	021b      	lsls	r3, r3, #8
 8006196:	68fa      	ldr	r2, [r7, #12]
 8006198:	4313      	orrs	r3, r2
 800619a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800619c:	693b      	ldr	r3, [r7, #16]
 800619e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	031b      	lsls	r3, r3, #12
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a14      	ldr	r2, [pc, #80]	; (8006204 <TIM_OC4_SetConfig+0xb0>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d007      	beq.n	80061c8 <TIM_OC4_SetConfig+0x74>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4a13      	ldr	r2, [pc, #76]	; (8006208 <TIM_OC4_SetConfig+0xb4>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d003      	beq.n	80061c8 <TIM_OC4_SetConfig+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	4a12      	ldr	r2, [pc, #72]	; (800620c <TIM_OC4_SetConfig+0xb8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d109      	bne.n	80061dc <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	019b      	lsls	r3, r3, #6
 80061d6:	697a      	ldr	r2, [r7, #20]
 80061d8:	4313      	orrs	r3, r2
 80061da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	697a      	ldr	r2, [r7, #20]
 80061e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	685a      	ldr	r2, [r3, #4]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	621a      	str	r2, [r3, #32]
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	40012c00 	.word	0x40012c00
 8006208:	40014000 	.word	0x40014000
 800620c:	40014400 	.word	0x40014400

08006210 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a1b      	ldr	r3, [r3, #32]
 800621e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006236:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800623e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	4313      	orrs	r3, r2
 800624c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006254:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	041b      	lsls	r3, r3, #16
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	4313      	orrs	r3, r2
 8006260:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a13      	ldr	r2, [pc, #76]	; (80062b4 <TIM_OC5_SetConfig+0xa4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d007      	beq.n	800627a <TIM_OC5_SetConfig+0x6a>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <TIM_OC5_SetConfig+0xa8>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d003      	beq.n	800627a <TIM_OC5_SetConfig+0x6a>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a11      	ldr	r2, [pc, #68]	; (80062bc <TIM_OC5_SetConfig+0xac>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d109      	bne.n	800628e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006280:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	697a      	ldr	r2, [r7, #20]
 800628a:	4313      	orrs	r3, r2
 800628c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	697a      	ldr	r2, [r7, #20]
 8006292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68fa      	ldr	r2, [r7, #12]
 8006298:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	621a      	str	r2, [r3, #32]
}
 80062a8:	bf00      	nop
 80062aa:	371c      	adds	r7, #28
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	40012c00 	.word	0x40012c00
 80062b8:	40014000 	.word	0x40014000
 80062bc:	40014400 	.word	0x40014400

080062c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b087      	sub	sp, #28
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	6a1b      	ldr	r3, [r3, #32]
 80062d4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	685b      	ldr	r3, [r3, #4]
 80062e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80062ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	021b      	lsls	r3, r3, #8
 80062fa:	68fa      	ldr	r2, [r7, #12]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006306:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	051b      	lsls	r3, r3, #20
 800630e:	693a      	ldr	r2, [r7, #16]
 8006310:	4313      	orrs	r3, r2
 8006312:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	4a14      	ldr	r2, [pc, #80]	; (8006368 <TIM_OC6_SetConfig+0xa8>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d007      	beq.n	800632c <TIM_OC6_SetConfig+0x6c>
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4a13      	ldr	r2, [pc, #76]	; (800636c <TIM_OC6_SetConfig+0xac>)
 8006320:	4293      	cmp	r3, r2
 8006322:	d003      	beq.n	800632c <TIM_OC6_SetConfig+0x6c>
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	4a12      	ldr	r2, [pc, #72]	; (8006370 <TIM_OC6_SetConfig+0xb0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d109      	bne.n	8006340 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006332:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	029b      	lsls	r3, r3, #10
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	4313      	orrs	r3, r2
 800633e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685a      	ldr	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	693a      	ldr	r2, [r7, #16]
 8006358:	621a      	str	r2, [r3, #32]
}
 800635a:	bf00      	nop
 800635c:	371c      	adds	r7, #28
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	40012c00 	.word	0x40012c00
 800636c:	40014000 	.word	0x40014000
 8006370:	40014400 	.word	0x40014400

08006374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 030a 	bic.w	r3, r3, #10
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	6a1b      	ldr	r3, [r3, #32]
 80063e8:	f023 0210 	bic.w	r2, r3, #16
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	699b      	ldr	r3, [r3, #24]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800640e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	697a      	ldr	r2, [r7, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	693a      	ldr	r2, [r7, #16]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	697a      	ldr	r2, [r7, #20]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	f043 0307 	orr.w	r3, r3, #7
 8006454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d101      	bne.n	80064c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064bc:	2302      	movs	r3, #2
 80064be:	e04f      	b.n	8006560 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	685b      	ldr	r3, [r3, #4]
 80064d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a21      	ldr	r2, [pc, #132]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d108      	bne.n	80064fc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80064f0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	68fa      	ldr	r2, [r7, #12]
 8006514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a14      	ldr	r2, [pc, #80]	; (800656c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d009      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006528:	d004      	beq.n	8006534 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a10      	ldr	r2, [pc, #64]	; (8006570 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d10c      	bne.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800653a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	68ba      	ldr	r2, [r7, #8]
 8006542:	4313      	orrs	r3, r2
 8006544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	68ba      	ldr	r2, [r7, #8]
 800654c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800655e:	2300      	movs	r3, #0
}
 8006560:	4618      	mov	r0, r3
 8006562:	3714      	adds	r7, #20
 8006564:	46bd      	mov	sp, r7
 8006566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656a:	4770      	bx	lr
 800656c:	40012c00 	.word	0x40012c00
 8006570:	40014000 	.word	0x40014000

08006574 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800657c:	bf00      	nop
 800657e:	370c      	adds	r7, #12
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr

0800659c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e040      	b.n	8006644 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f7fa fda8 	bl	8001128 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2224      	movs	r2, #36	; 0x24
 80065dc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f022 0201 	bic.w	r2, r2, #1
 80065ec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d002      	beq.n	80065fc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 fade 	bl	8006bb8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 f8af 	bl	8006760 <UART_SetConfig>
 8006602:	4603      	mov	r3, r0
 8006604:	2b01      	cmp	r3, #1
 8006606:	d101      	bne.n	800660c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e01b      	b.n	8006644 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	685a      	ldr	r2, [r3, #4]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800661a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689a      	ldr	r2, [r3, #8]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800662a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f042 0201 	orr.w	r2, r2, #1
 800663a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 fb5d 	bl	8006cfc <UART_CheckIdleState>
 8006642:	4603      	mov	r3, r0
}
 8006644:	4618      	mov	r0, r3
 8006646:	3708      	adds	r7, #8
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}

0800664c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b08a      	sub	sp, #40	; 0x28
 8006650:	af02      	add	r7, sp, #8
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	603b      	str	r3, [r7, #0]
 8006658:	4613      	mov	r3, r2
 800665a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006660:	2b20      	cmp	r3, #32
 8006662:	d178      	bne.n	8006756 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d002      	beq.n	8006670 <HAL_UART_Transmit+0x24>
 800666a:	88fb      	ldrh	r3, [r7, #6]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d101      	bne.n	8006674 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e071      	b.n	8006758 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2221      	movs	r2, #33	; 0x21
 8006680:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006682:	f7fa ff05 	bl	8001490 <HAL_GetTick>
 8006686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	88fa      	ldrh	r2, [r7, #6]
 800668c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	88fa      	ldrh	r2, [r7, #6]
 8006694:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066a0:	d108      	bne.n	80066b4 <HAL_UART_Transmit+0x68>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	61bb      	str	r3, [r7, #24]
 80066b2:	e003      	b.n	80066bc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066b8:	2300      	movs	r3, #0
 80066ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80066bc:	e030      	b.n	8006720 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	9300      	str	r3, [sp, #0]
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	2200      	movs	r2, #0
 80066c6:	2180      	movs	r1, #128	; 0x80
 80066c8:	68f8      	ldr	r0, [r7, #12]
 80066ca:	f000 fbbf 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d004      	beq.n	80066de <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2220      	movs	r2, #32
 80066d8:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e03c      	b.n	8006758 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80066de:	69fb      	ldr	r3, [r7, #28]
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d10b      	bne.n	80066fc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066e4:	69bb      	ldr	r3, [r7, #24]
 80066e6:	881a      	ldrh	r2, [r3, #0]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066f0:	b292      	uxth	r2, r2
 80066f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066f4:	69bb      	ldr	r3, [r7, #24]
 80066f6:	3302      	adds	r3, #2
 80066f8:	61bb      	str	r3, [r7, #24]
 80066fa:	e008      	b.n	800670e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066fc:	69fb      	ldr	r3, [r7, #28]
 80066fe:	781a      	ldrb	r2, [r3, #0]
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	b292      	uxth	r2, r2
 8006706:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006708:	69fb      	ldr	r3, [r7, #28]
 800670a:	3301      	adds	r3, #1
 800670c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006714:	b29b      	uxth	r3, r3
 8006716:	3b01      	subs	r3, #1
 8006718:	b29a      	uxth	r2, r3
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	d1c8      	bne.n	80066be <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	2200      	movs	r2, #0
 8006734:	2140      	movs	r1, #64	; 0x40
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fb88 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d004      	beq.n	800674c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006748:	2303      	movs	r3, #3
 800674a:	e005      	b.n	8006758 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006752:	2300      	movs	r3, #0
 8006754:	e000      	b.n	8006758 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006756:	2302      	movs	r3, #2
  }
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006764:	b08a      	sub	sp, #40	; 0x28
 8006766:	af00      	add	r7, sp, #0
 8006768:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800676a:	2300      	movs	r3, #0
 800676c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	689a      	ldr	r2, [r3, #8]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	431a      	orrs	r2, r3
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	431a      	orrs	r2, r3
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	69db      	ldr	r3, [r3, #28]
 8006784:	4313      	orrs	r3, r2
 8006786:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4bb4      	ldr	r3, [pc, #720]	; (8006a60 <UART_SetConfig+0x300>)
 8006790:	4013      	ands	r3, r2
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	6812      	ldr	r2, [r2, #0]
 8006796:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006798:	430b      	orrs	r3, r1
 800679a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4aa9      	ldr	r2, [pc, #676]	; (8006a64 <UART_SetConfig+0x304>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d004      	beq.n	80067cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067c8:	4313      	orrs	r3, r2
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067dc:	430a      	orrs	r2, r1
 80067de:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4aa0      	ldr	r2, [pc, #640]	; (8006a68 <UART_SetConfig+0x308>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d126      	bne.n	8006838 <UART_SetConfig+0xd8>
 80067ea:	4ba0      	ldr	r3, [pc, #640]	; (8006a6c <UART_SetConfig+0x30c>)
 80067ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f0:	f003 0303 	and.w	r3, r3, #3
 80067f4:	2b03      	cmp	r3, #3
 80067f6:	d81b      	bhi.n	8006830 <UART_SetConfig+0xd0>
 80067f8:	a201      	add	r2, pc, #4	; (adr r2, 8006800 <UART_SetConfig+0xa0>)
 80067fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fe:	bf00      	nop
 8006800:	08006811 	.word	0x08006811
 8006804:	08006821 	.word	0x08006821
 8006808:	08006819 	.word	0x08006819
 800680c:	08006829 	.word	0x08006829
 8006810:	2301      	movs	r3, #1
 8006812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006816:	e080      	b.n	800691a <UART_SetConfig+0x1ba>
 8006818:	2302      	movs	r3, #2
 800681a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681e:	e07c      	b.n	800691a <UART_SetConfig+0x1ba>
 8006820:	2304      	movs	r3, #4
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006826:	e078      	b.n	800691a <UART_SetConfig+0x1ba>
 8006828:	2308      	movs	r3, #8
 800682a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682e:	e074      	b.n	800691a <UART_SetConfig+0x1ba>
 8006830:	2310      	movs	r3, #16
 8006832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006836:	e070      	b.n	800691a <UART_SetConfig+0x1ba>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4a8c      	ldr	r2, [pc, #560]	; (8006a70 <UART_SetConfig+0x310>)
 800683e:	4293      	cmp	r3, r2
 8006840:	d138      	bne.n	80068b4 <UART_SetConfig+0x154>
 8006842:	4b8a      	ldr	r3, [pc, #552]	; (8006a6c <UART_SetConfig+0x30c>)
 8006844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006848:	f003 030c 	and.w	r3, r3, #12
 800684c:	2b0c      	cmp	r3, #12
 800684e:	d82d      	bhi.n	80068ac <UART_SetConfig+0x14c>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <UART_SetConfig+0xf8>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	0800688d 	.word	0x0800688d
 800685c:	080068ad 	.word	0x080068ad
 8006860:	080068ad 	.word	0x080068ad
 8006864:	080068ad 	.word	0x080068ad
 8006868:	0800689d 	.word	0x0800689d
 800686c:	080068ad 	.word	0x080068ad
 8006870:	080068ad 	.word	0x080068ad
 8006874:	080068ad 	.word	0x080068ad
 8006878:	08006895 	.word	0x08006895
 800687c:	080068ad 	.word	0x080068ad
 8006880:	080068ad 	.word	0x080068ad
 8006884:	080068ad 	.word	0x080068ad
 8006888:	080068a5 	.word	0x080068a5
 800688c:	2300      	movs	r3, #0
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006892:	e042      	b.n	800691a <UART_SetConfig+0x1ba>
 8006894:	2302      	movs	r3, #2
 8006896:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800689a:	e03e      	b.n	800691a <UART_SetConfig+0x1ba>
 800689c:	2304      	movs	r3, #4
 800689e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068a2:	e03a      	b.n	800691a <UART_SetConfig+0x1ba>
 80068a4:	2308      	movs	r3, #8
 80068a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068aa:	e036      	b.n	800691a <UART_SetConfig+0x1ba>
 80068ac:	2310      	movs	r3, #16
 80068ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068b2:	e032      	b.n	800691a <UART_SetConfig+0x1ba>
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a6a      	ldr	r2, [pc, #424]	; (8006a64 <UART_SetConfig+0x304>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d12a      	bne.n	8006914 <UART_SetConfig+0x1b4>
 80068be:	4b6b      	ldr	r3, [pc, #428]	; (8006a6c <UART_SetConfig+0x30c>)
 80068c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068c4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80068c8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068cc:	d01a      	beq.n	8006904 <UART_SetConfig+0x1a4>
 80068ce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80068d2:	d81b      	bhi.n	800690c <UART_SetConfig+0x1ac>
 80068d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068d8:	d00c      	beq.n	80068f4 <UART_SetConfig+0x194>
 80068da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068de:	d815      	bhi.n	800690c <UART_SetConfig+0x1ac>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d003      	beq.n	80068ec <UART_SetConfig+0x18c>
 80068e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068e8:	d008      	beq.n	80068fc <UART_SetConfig+0x19c>
 80068ea:	e00f      	b.n	800690c <UART_SetConfig+0x1ac>
 80068ec:	2300      	movs	r3, #0
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f2:	e012      	b.n	800691a <UART_SetConfig+0x1ba>
 80068f4:	2302      	movs	r3, #2
 80068f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068fa:	e00e      	b.n	800691a <UART_SetConfig+0x1ba>
 80068fc:	2304      	movs	r3, #4
 80068fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006902:	e00a      	b.n	800691a <UART_SetConfig+0x1ba>
 8006904:	2308      	movs	r3, #8
 8006906:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800690a:	e006      	b.n	800691a <UART_SetConfig+0x1ba>
 800690c:	2310      	movs	r3, #16
 800690e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006912:	e002      	b.n	800691a <UART_SetConfig+0x1ba>
 8006914:	2310      	movs	r3, #16
 8006916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a51      	ldr	r2, [pc, #324]	; (8006a64 <UART_SetConfig+0x304>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d17a      	bne.n	8006a1a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006928:	2b08      	cmp	r3, #8
 800692a:	d824      	bhi.n	8006976 <UART_SetConfig+0x216>
 800692c:	a201      	add	r2, pc, #4	; (adr r2, 8006934 <UART_SetConfig+0x1d4>)
 800692e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006932:	bf00      	nop
 8006934:	08006959 	.word	0x08006959
 8006938:	08006977 	.word	0x08006977
 800693c:	08006961 	.word	0x08006961
 8006940:	08006977 	.word	0x08006977
 8006944:	08006967 	.word	0x08006967
 8006948:	08006977 	.word	0x08006977
 800694c:	08006977 	.word	0x08006977
 8006950:	08006977 	.word	0x08006977
 8006954:	0800696f 	.word	0x0800696f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006958:	f7fe fb80 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 800695c:	61f8      	str	r0, [r7, #28]
        break;
 800695e:	e010      	b.n	8006982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006960:	4b44      	ldr	r3, [pc, #272]	; (8006a74 <UART_SetConfig+0x314>)
 8006962:	61fb      	str	r3, [r7, #28]
        break;
 8006964:	e00d      	b.n	8006982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006966:	f7fe fae1 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 800696a:	61f8      	str	r0, [r7, #28]
        break;
 800696c:	e009      	b.n	8006982 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800696e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006972:	61fb      	str	r3, [r7, #28]
        break;
 8006974:	e005      	b.n	8006982 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006976:	2300      	movs	r3, #0
 8006978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800697a:	2301      	movs	r3, #1
 800697c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8107 	beq.w	8006b98 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685a      	ldr	r2, [r3, #4]
 800698e:	4613      	mov	r3, r2
 8006990:	005b      	lsls	r3, r3, #1
 8006992:	4413      	add	r3, r2
 8006994:	69fa      	ldr	r2, [r7, #28]
 8006996:	429a      	cmp	r2, r3
 8006998:	d305      	bcc.n	80069a6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	685b      	ldr	r3, [r3, #4]
 800699e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	429a      	cmp	r2, r3
 80069a4:	d903      	bls.n	80069ae <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80069a6:	2301      	movs	r3, #1
 80069a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80069ac:	e0f4      	b.n	8006b98 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	2200      	movs	r2, #0
 80069b2:	461c      	mov	r4, r3
 80069b4:	4615      	mov	r5, r2
 80069b6:	f04f 0200 	mov.w	r2, #0
 80069ba:	f04f 0300 	mov.w	r3, #0
 80069be:	022b      	lsls	r3, r5, #8
 80069c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80069c4:	0222      	lsls	r2, r4, #8
 80069c6:	68f9      	ldr	r1, [r7, #12]
 80069c8:	6849      	ldr	r1, [r1, #4]
 80069ca:	0849      	lsrs	r1, r1, #1
 80069cc:	2000      	movs	r0, #0
 80069ce:	4688      	mov	r8, r1
 80069d0:	4681      	mov	r9, r0
 80069d2:	eb12 0a08 	adds.w	sl, r2, r8
 80069d6:	eb43 0b09 	adc.w	fp, r3, r9
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	2200      	movs	r2, #0
 80069e0:	603b      	str	r3, [r7, #0]
 80069e2:	607a      	str	r2, [r7, #4]
 80069e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80069e8:	4650      	mov	r0, sl
 80069ea:	4659      	mov	r1, fp
 80069ec:	f7f9 fc48 	bl	8000280 <__aeabi_uldivmod>
 80069f0:	4602      	mov	r2, r0
 80069f2:	460b      	mov	r3, r1
 80069f4:	4613      	mov	r3, r2
 80069f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80069fe:	d308      	bcc.n	8006a12 <UART_SetConfig+0x2b2>
 8006a00:	69bb      	ldr	r3, [r7, #24]
 8006a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a06:	d204      	bcs.n	8006a12 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	69ba      	ldr	r2, [r7, #24]
 8006a0e:	60da      	str	r2, [r3, #12]
 8006a10:	e0c2      	b.n	8006b98 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a18:	e0be      	b.n	8006b98 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a22:	d16a      	bne.n	8006afa <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8006a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a28:	2b08      	cmp	r3, #8
 8006a2a:	d834      	bhi.n	8006a96 <UART_SetConfig+0x336>
 8006a2c:	a201      	add	r2, pc, #4	; (adr r2, 8006a34 <UART_SetConfig+0x2d4>)
 8006a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a32:	bf00      	nop
 8006a34:	08006a59 	.word	0x08006a59
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a81 	.word	0x08006a81
 8006a40:	08006a97 	.word	0x08006a97
 8006a44:	08006a87 	.word	0x08006a87
 8006a48:	08006a97 	.word	0x08006a97
 8006a4c:	08006a97 	.word	0x08006a97
 8006a50:	08006a97 	.word	0x08006a97
 8006a54:	08006a8f 	.word	0x08006a8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a58:	f7fe fb00 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006a5c:	61f8      	str	r0, [r7, #28]
        break;
 8006a5e:	e020      	b.n	8006aa2 <UART_SetConfig+0x342>
 8006a60:	efff69f3 	.word	0xefff69f3
 8006a64:	40008000 	.word	0x40008000
 8006a68:	40013800 	.word	0x40013800
 8006a6c:	40021000 	.word	0x40021000
 8006a70:	40004400 	.word	0x40004400
 8006a74:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a78:	f7fe fb06 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8006a7c:	61f8      	str	r0, [r7, #28]
        break;
 8006a7e:	e010      	b.n	8006aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a80:	4b4c      	ldr	r3, [pc, #304]	; (8006bb4 <UART_SetConfig+0x454>)
 8006a82:	61fb      	str	r3, [r7, #28]
        break;
 8006a84:	e00d      	b.n	8006aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a86:	f7fe fa51 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8006a8a:	61f8      	str	r0, [r7, #28]
        break;
 8006a8c:	e009      	b.n	8006aa2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a92:	61fb      	str	r3, [r7, #28]
        break;
 8006a94:	e005      	b.n	8006aa2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aa0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d077      	beq.n	8006b98 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	005a      	lsls	r2, r3, #1
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	085b      	lsrs	r3, r3, #1
 8006ab2:	441a      	add	r2, r3
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006abe:	69bb      	ldr	r3, [r7, #24]
 8006ac0:	2b0f      	cmp	r3, #15
 8006ac2:	d916      	bls.n	8006af2 <UART_SetConfig+0x392>
 8006ac4:	69bb      	ldr	r3, [r7, #24]
 8006ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006aca:	d212      	bcs.n	8006af2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	f023 030f 	bic.w	r3, r3, #15
 8006ad4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	085b      	lsrs	r3, r3, #1
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	f003 0307 	and.w	r3, r3, #7
 8006ae0:	b29a      	uxth	r2, r3
 8006ae2:	8afb      	ldrh	r3, [r7, #22]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	8afa      	ldrh	r2, [r7, #22]
 8006aee:	60da      	str	r2, [r3, #12]
 8006af0:	e052      	b.n	8006b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006af8:	e04e      	b.n	8006b98 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006afa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006afe:	2b08      	cmp	r3, #8
 8006b00:	d827      	bhi.n	8006b52 <UART_SetConfig+0x3f2>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <UART_SetConfig+0x3a8>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b35 	.word	0x08006b35
 8006b10:	08006b3d 	.word	0x08006b3d
 8006b14:	08006b53 	.word	0x08006b53
 8006b18:	08006b43 	.word	0x08006b43
 8006b1c:	08006b53 	.word	0x08006b53
 8006b20:	08006b53 	.word	0x08006b53
 8006b24:	08006b53 	.word	0x08006b53
 8006b28:	08006b4b 	.word	0x08006b4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fe fa96 	bl	800505c <HAL_RCC_GetPCLK1Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e014      	b.n	8006b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b34:	f7fe faa8 	bl	8005088 <HAL_RCC_GetPCLK2Freq>
 8006b38:	61f8      	str	r0, [r7, #28]
        break;
 8006b3a:	e010      	b.n	8006b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b3c:	4b1d      	ldr	r3, [pc, #116]	; (8006bb4 <UART_SetConfig+0x454>)
 8006b3e:	61fb      	str	r3, [r7, #28]
        break;
 8006b40:	e00d      	b.n	8006b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b42:	f7fe f9f3 	bl	8004f2c <HAL_RCC_GetSysClockFreq>
 8006b46:	61f8      	str	r0, [r7, #28]
        break;
 8006b48:	e009      	b.n	8006b5e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b4e:	61fb      	str	r3, [r7, #28]
        break;
 8006b50:	e005      	b.n	8006b5e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8006b52:	2300      	movs	r3, #0
 8006b54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b5c:	bf00      	nop
    }

    if (pclk != 0U)
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d019      	beq.n	8006b98 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	085a      	lsrs	r2, r3, #1
 8006b6a:	69fb      	ldr	r3, [r7, #28]
 8006b6c:	441a      	add	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b76:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b0f      	cmp	r3, #15
 8006b7c:	d909      	bls.n	8006b92 <UART_SetConfig+0x432>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b84:	d205      	bcs.n	8006b92 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b86:	69bb      	ldr	r3, [r7, #24]
 8006b88:	b29a      	uxth	r2, r3
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	60da      	str	r2, [r3, #12]
 8006b90:	e002      	b.n	8006b98 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ba4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ba8:	4618      	mov	r0, r3
 8006baa:	3728      	adds	r7, #40	; 0x28
 8006bac:	46bd      	mov	sp, r7
 8006bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bb2:	bf00      	nop
 8006bb4:	00f42400 	.word	0x00f42400

08006bb8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0308 	and.w	r3, r3, #8
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d00a      	beq.n	8006be2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be6:	f003 0301 	and.w	r3, r3, #1
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d00a      	beq.n	8006c04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	430a      	orrs	r2, r1
 8006c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	f003 0302 	and.w	r3, r3, #2
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00a      	beq.n	8006c26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c2a:	f003 0304 	and.w	r3, r3, #4
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d00a      	beq.n	8006c48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	430a      	orrs	r2, r1
 8006c46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4c:	f003 0310 	and.w	r3, r3, #16
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d00a      	beq.n	8006c6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	430a      	orrs	r2, r1
 8006c68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c6e:	f003 0320 	and.w	r3, r3, #32
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d00a      	beq.n	8006c8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d01a      	beq.n	8006cce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	430a      	orrs	r2, r1
 8006cac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cb6:	d10a      	bne.n	8006cce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	685b      	ldr	r3, [r3, #4]
 8006cbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006cfc:	b580      	push	{r7, lr}
 8006cfe:	b098      	sub	sp, #96	; 0x60
 8006d00:	af02      	add	r7, sp, #8
 8006d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d0c:	f7fa fbc0 	bl	8001490 <HAL_GetTick>
 8006d10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b08      	cmp	r3, #8
 8006d1e:	d12e      	bne.n	8006d7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d24:	9300      	str	r3, [sp, #0]
 8006d26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 f88c 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d021      	beq.n	8006d7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d42:	e853 3f00 	ldrex	r3, [r3]
 8006d46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d4e:	653b      	str	r3, [r7, #80]	; 0x50
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	461a      	mov	r2, r3
 8006d56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006d58:	647b      	str	r3, [r7, #68]	; 0x44
 8006d5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006d60:	e841 2300 	strex	r3, r2, [r1]
 8006d64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006d66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d1e6      	bne.n	8006d3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e062      	b.n	8006e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f003 0304 	and.w	r3, r3, #4
 8006d88:	2b04      	cmp	r3, #4
 8006d8a:	d149      	bne.n	8006e20 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d90:	9300      	str	r3, [sp, #0]
 8006d92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d94:	2200      	movs	r2, #0
 8006d96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f856 	bl	8006e4c <UART_WaitOnFlagUntilTimeout>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d03c      	beq.n	8006e20 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	623b      	str	r3, [r7, #32]
   return(result);
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	461a      	mov	r2, r3
 8006dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc4:	633b      	str	r3, [r7, #48]	; 0x30
 8006dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006dca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e6      	bne.n	8006da6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	3308      	adds	r3, #8
 8006dde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	e853 3f00 	ldrex	r3, [r3]
 8006de6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f023 0301 	bic.w	r3, r3, #1
 8006dee:	64bb      	str	r3, [r7, #72]	; 0x48
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006df8:	61fa      	str	r2, [r7, #28]
 8006dfa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dfc:	69b9      	ldr	r1, [r7, #24]
 8006dfe:	69fa      	ldr	r2, [r7, #28]
 8006e00:	e841 2300 	strex	r3, r2, [r1]
 8006e04:	617b      	str	r3, [r7, #20]
   return(result);
 8006e06:	697b      	ldr	r3, [r7, #20]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d1e5      	bne.n	8006dd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e011      	b.n	8006e44 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2220      	movs	r2, #32
 8006e24:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2220      	movs	r2, #32
 8006e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	2200      	movs	r2, #0
 8006e32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3758      	adds	r7, #88	; 0x58
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e5c:	e049      	b.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e5e:	69bb      	ldr	r3, [r7, #24]
 8006e60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e64:	d045      	beq.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e66:	f7fa fb13 	bl	8001490 <HAL_GetTick>
 8006e6a:	4602      	mov	r2, r0
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	1ad3      	subs	r3, r2, r3
 8006e70:	69ba      	ldr	r2, [r7, #24]
 8006e72:	429a      	cmp	r2, r3
 8006e74:	d302      	bcc.n	8006e7c <UART_WaitOnFlagUntilTimeout+0x30>
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d101      	bne.n	8006e80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e7c:	2303      	movs	r3, #3
 8006e7e:	e048      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f003 0304 	and.w	r3, r3, #4
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d031      	beq.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0308 	and.w	r3, r3, #8
 8006e98:	2b08      	cmp	r3, #8
 8006e9a:	d110      	bne.n	8006ebe <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2208      	movs	r2, #8
 8006ea2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ea4:	68f8      	ldr	r0, [r7, #12]
 8006ea6:	f000 f838 	bl	8006f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	2208      	movs	r2, #8
 8006eae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	e029      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69db      	ldr	r3, [r3, #28]
 8006ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ec8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ecc:	d111      	bne.n	8006ef2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ed6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ed8:	68f8      	ldr	r0, [r7, #12]
 8006eda:	f000 f81e 	bl	8006f1a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2220      	movs	r2, #32
 8006ee2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e00f      	b.n	8006f12 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	69da      	ldr	r2, [r3, #28]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	4013      	ands	r3, r2
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	bf0c      	ite	eq
 8006f02:	2301      	moveq	r3, #1
 8006f04:	2300      	movne	r3, #0
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	429a      	cmp	r2, r3
 8006f0e:	d0a6      	beq.n	8006e5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f10:	2300      	movs	r3, #0
}
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}

08006f1a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f1a:	b480      	push	{r7}
 8006f1c:	b095      	sub	sp, #84	; 0x54
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f2a:	e853 3f00 	ldrex	r3, [r3]
 8006f2e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f40:	643b      	str	r3, [r7, #64]	; 0x40
 8006f42:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f44:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f46:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f48:	e841 2300 	strex	r3, r2, [r1]
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1e6      	bne.n	8006f22 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	3308      	adds	r3, #8
 8006f5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	e853 3f00 	ldrex	r3, [r3]
 8006f62:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f64:	69fb      	ldr	r3, [r7, #28]
 8006f66:	f023 0301 	bic.w	r3, r3, #1
 8006f6a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	3308      	adds	r3, #8
 8006f72:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f7c:	e841 2300 	strex	r3, r2, [r1]
 8006f80:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d1e5      	bne.n	8006f54 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d118      	bne.n	8006fc2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	e853 3f00 	ldrex	r3, [r3]
 8006f9c:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	f023 0310 	bic.w	r3, r3, #16
 8006fa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb2:	6979      	ldr	r1, [r7, #20]
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	e841 2300 	strex	r3, r2, [r1]
 8006fba:	613b      	str	r3, [r7, #16]
   return(result);
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d1e6      	bne.n	8006f90 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2220      	movs	r2, #32
 8006fc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006fd6:	bf00      	nop
 8006fd8:	3754      	adds	r7, #84	; 0x54
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
	...

08006fe4 <siprintf>:
 8006fe4:	b40e      	push	{r1, r2, r3}
 8006fe6:	b500      	push	{lr}
 8006fe8:	b09c      	sub	sp, #112	; 0x70
 8006fea:	ab1d      	add	r3, sp, #116	; 0x74
 8006fec:	9002      	str	r0, [sp, #8]
 8006fee:	9006      	str	r0, [sp, #24]
 8006ff0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ff4:	4809      	ldr	r0, [pc, #36]	; (800701c <siprintf+0x38>)
 8006ff6:	9107      	str	r1, [sp, #28]
 8006ff8:	9104      	str	r1, [sp, #16]
 8006ffa:	4909      	ldr	r1, [pc, #36]	; (8007020 <siprintf+0x3c>)
 8006ffc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007000:	9105      	str	r1, [sp, #20]
 8007002:	6800      	ldr	r0, [r0, #0]
 8007004:	9301      	str	r3, [sp, #4]
 8007006:	a902      	add	r1, sp, #8
 8007008:	f000 f992 	bl	8007330 <_svfiprintf_r>
 800700c:	9b02      	ldr	r3, [sp, #8]
 800700e:	2200      	movs	r2, #0
 8007010:	701a      	strb	r2, [r3, #0]
 8007012:	b01c      	add	sp, #112	; 0x70
 8007014:	f85d eb04 	ldr.w	lr, [sp], #4
 8007018:	b003      	add	sp, #12
 800701a:	4770      	bx	lr
 800701c:	20000058 	.word	0x20000058
 8007020:	ffff0208 	.word	0xffff0208

08007024 <memset>:
 8007024:	4402      	add	r2, r0
 8007026:	4603      	mov	r3, r0
 8007028:	4293      	cmp	r3, r2
 800702a:	d100      	bne.n	800702e <memset+0xa>
 800702c:	4770      	bx	lr
 800702e:	f803 1b01 	strb.w	r1, [r3], #1
 8007032:	e7f9      	b.n	8007028 <memset+0x4>

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	; (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000058 	.word	0x20000058

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4d0d      	ldr	r5, [pc, #52]	; (8007078 <__libc_init_array+0x38>)
 8007044:	4c0d      	ldr	r4, [pc, #52]	; (800707c <__libc_init_array+0x3c>)
 8007046:	1b64      	subs	r4, r4, r5
 8007048:	10a4      	asrs	r4, r4, #2
 800704a:	2600      	movs	r6, #0
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	4d0b      	ldr	r5, [pc, #44]	; (8007080 <__libc_init_array+0x40>)
 8007052:	4c0c      	ldr	r4, [pc, #48]	; (8007084 <__libc_init_array+0x44>)
 8007054:	f000 fc6a 	bl	800792c <_init>
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	2600      	movs	r6, #0
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	f855 3b04 	ldr.w	r3, [r5], #4
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	08007a24 	.word	0x08007a24
 800707c:	08007a24 	.word	0x08007a24
 8007080:	08007a24 	.word	0x08007a24
 8007084:	08007a28 	.word	0x08007a28

08007088 <__retarget_lock_acquire_recursive>:
 8007088:	4770      	bx	lr

0800708a <__retarget_lock_release_recursive>:
 800708a:	4770      	bx	lr

0800708c <_free_r>:
 800708c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800708e:	2900      	cmp	r1, #0
 8007090:	d044      	beq.n	800711c <_free_r+0x90>
 8007092:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007096:	9001      	str	r0, [sp, #4]
 8007098:	2b00      	cmp	r3, #0
 800709a:	f1a1 0404 	sub.w	r4, r1, #4
 800709e:	bfb8      	it	lt
 80070a0:	18e4      	addlt	r4, r4, r3
 80070a2:	f000 f8df 	bl	8007264 <__malloc_lock>
 80070a6:	4a1e      	ldr	r2, [pc, #120]	; (8007120 <_free_r+0x94>)
 80070a8:	9801      	ldr	r0, [sp, #4]
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	b933      	cbnz	r3, 80070bc <_free_r+0x30>
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	6014      	str	r4, [r2, #0]
 80070b2:	b003      	add	sp, #12
 80070b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80070b8:	f000 b8da 	b.w	8007270 <__malloc_unlock>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d908      	bls.n	80070d2 <_free_r+0x46>
 80070c0:	6825      	ldr	r5, [r4, #0]
 80070c2:	1961      	adds	r1, r4, r5
 80070c4:	428b      	cmp	r3, r1
 80070c6:	bf01      	itttt	eq
 80070c8:	6819      	ldreq	r1, [r3, #0]
 80070ca:	685b      	ldreq	r3, [r3, #4]
 80070cc:	1949      	addeq	r1, r1, r5
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	e7ed      	b.n	80070ae <_free_r+0x22>
 80070d2:	461a      	mov	r2, r3
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b10b      	cbz	r3, 80070dc <_free_r+0x50>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d9fa      	bls.n	80070d2 <_free_r+0x46>
 80070dc:	6811      	ldr	r1, [r2, #0]
 80070de:	1855      	adds	r5, r2, r1
 80070e0:	42a5      	cmp	r5, r4
 80070e2:	d10b      	bne.n	80070fc <_free_r+0x70>
 80070e4:	6824      	ldr	r4, [r4, #0]
 80070e6:	4421      	add	r1, r4
 80070e8:	1854      	adds	r4, r2, r1
 80070ea:	42a3      	cmp	r3, r4
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	d1e0      	bne.n	80070b2 <_free_r+0x26>
 80070f0:	681c      	ldr	r4, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	6053      	str	r3, [r2, #4]
 80070f6:	440c      	add	r4, r1
 80070f8:	6014      	str	r4, [r2, #0]
 80070fa:	e7da      	b.n	80070b2 <_free_r+0x26>
 80070fc:	d902      	bls.n	8007104 <_free_r+0x78>
 80070fe:	230c      	movs	r3, #12
 8007100:	6003      	str	r3, [r0, #0]
 8007102:	e7d6      	b.n	80070b2 <_free_r+0x26>
 8007104:	6825      	ldr	r5, [r4, #0]
 8007106:	1961      	adds	r1, r4, r5
 8007108:	428b      	cmp	r3, r1
 800710a:	bf04      	itt	eq
 800710c:	6819      	ldreq	r1, [r3, #0]
 800710e:	685b      	ldreq	r3, [r3, #4]
 8007110:	6063      	str	r3, [r4, #4]
 8007112:	bf04      	itt	eq
 8007114:	1949      	addeq	r1, r1, r5
 8007116:	6021      	streq	r1, [r4, #0]
 8007118:	6054      	str	r4, [r2, #4]
 800711a:	e7ca      	b.n	80070b2 <_free_r+0x26>
 800711c:	b003      	add	sp, #12
 800711e:	bd30      	pop	{r4, r5, pc}
 8007120:	20000474 	.word	0x20000474

08007124 <sbrk_aligned>:
 8007124:	b570      	push	{r4, r5, r6, lr}
 8007126:	4e0e      	ldr	r6, [pc, #56]	; (8007160 <sbrk_aligned+0x3c>)
 8007128:	460c      	mov	r4, r1
 800712a:	6831      	ldr	r1, [r6, #0]
 800712c:	4605      	mov	r5, r0
 800712e:	b911      	cbnz	r1, 8007136 <sbrk_aligned+0x12>
 8007130:	f000 fba6 	bl	8007880 <_sbrk_r>
 8007134:	6030      	str	r0, [r6, #0]
 8007136:	4621      	mov	r1, r4
 8007138:	4628      	mov	r0, r5
 800713a:	f000 fba1 	bl	8007880 <_sbrk_r>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	d00a      	beq.n	8007158 <sbrk_aligned+0x34>
 8007142:	1cc4      	adds	r4, r0, #3
 8007144:	f024 0403 	bic.w	r4, r4, #3
 8007148:	42a0      	cmp	r0, r4
 800714a:	d007      	beq.n	800715c <sbrk_aligned+0x38>
 800714c:	1a21      	subs	r1, r4, r0
 800714e:	4628      	mov	r0, r5
 8007150:	f000 fb96 	bl	8007880 <_sbrk_r>
 8007154:	3001      	adds	r0, #1
 8007156:	d101      	bne.n	800715c <sbrk_aligned+0x38>
 8007158:	f04f 34ff 	mov.w	r4, #4294967295
 800715c:	4620      	mov	r0, r4
 800715e:	bd70      	pop	{r4, r5, r6, pc}
 8007160:	20000478 	.word	0x20000478

08007164 <_malloc_r>:
 8007164:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007168:	1ccd      	adds	r5, r1, #3
 800716a:	f025 0503 	bic.w	r5, r5, #3
 800716e:	3508      	adds	r5, #8
 8007170:	2d0c      	cmp	r5, #12
 8007172:	bf38      	it	cc
 8007174:	250c      	movcc	r5, #12
 8007176:	2d00      	cmp	r5, #0
 8007178:	4607      	mov	r7, r0
 800717a:	db01      	blt.n	8007180 <_malloc_r+0x1c>
 800717c:	42a9      	cmp	r1, r5
 800717e:	d905      	bls.n	800718c <_malloc_r+0x28>
 8007180:	230c      	movs	r3, #12
 8007182:	603b      	str	r3, [r7, #0]
 8007184:	2600      	movs	r6, #0
 8007186:	4630      	mov	r0, r6
 8007188:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007260 <_malloc_r+0xfc>
 8007190:	f000 f868 	bl	8007264 <__malloc_lock>
 8007194:	f8d8 3000 	ldr.w	r3, [r8]
 8007198:	461c      	mov	r4, r3
 800719a:	bb5c      	cbnz	r4, 80071f4 <_malloc_r+0x90>
 800719c:	4629      	mov	r1, r5
 800719e:	4638      	mov	r0, r7
 80071a0:	f7ff ffc0 	bl	8007124 <sbrk_aligned>
 80071a4:	1c43      	adds	r3, r0, #1
 80071a6:	4604      	mov	r4, r0
 80071a8:	d155      	bne.n	8007256 <_malloc_r+0xf2>
 80071aa:	f8d8 4000 	ldr.w	r4, [r8]
 80071ae:	4626      	mov	r6, r4
 80071b0:	2e00      	cmp	r6, #0
 80071b2:	d145      	bne.n	8007240 <_malloc_r+0xdc>
 80071b4:	2c00      	cmp	r4, #0
 80071b6:	d048      	beq.n	800724a <_malloc_r+0xe6>
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	4631      	mov	r1, r6
 80071bc:	4638      	mov	r0, r7
 80071be:	eb04 0903 	add.w	r9, r4, r3
 80071c2:	f000 fb5d 	bl	8007880 <_sbrk_r>
 80071c6:	4581      	cmp	r9, r0
 80071c8:	d13f      	bne.n	800724a <_malloc_r+0xe6>
 80071ca:	6821      	ldr	r1, [r4, #0]
 80071cc:	1a6d      	subs	r5, r5, r1
 80071ce:	4629      	mov	r1, r5
 80071d0:	4638      	mov	r0, r7
 80071d2:	f7ff ffa7 	bl	8007124 <sbrk_aligned>
 80071d6:	3001      	adds	r0, #1
 80071d8:	d037      	beq.n	800724a <_malloc_r+0xe6>
 80071da:	6823      	ldr	r3, [r4, #0]
 80071dc:	442b      	add	r3, r5
 80071de:	6023      	str	r3, [r4, #0]
 80071e0:	f8d8 3000 	ldr.w	r3, [r8]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d038      	beq.n	800725a <_malloc_r+0xf6>
 80071e8:	685a      	ldr	r2, [r3, #4]
 80071ea:	42a2      	cmp	r2, r4
 80071ec:	d12b      	bne.n	8007246 <_malloc_r+0xe2>
 80071ee:	2200      	movs	r2, #0
 80071f0:	605a      	str	r2, [r3, #4]
 80071f2:	e00f      	b.n	8007214 <_malloc_r+0xb0>
 80071f4:	6822      	ldr	r2, [r4, #0]
 80071f6:	1b52      	subs	r2, r2, r5
 80071f8:	d41f      	bmi.n	800723a <_malloc_r+0xd6>
 80071fa:	2a0b      	cmp	r2, #11
 80071fc:	d917      	bls.n	800722e <_malloc_r+0xca>
 80071fe:	1961      	adds	r1, r4, r5
 8007200:	42a3      	cmp	r3, r4
 8007202:	6025      	str	r5, [r4, #0]
 8007204:	bf18      	it	ne
 8007206:	6059      	strne	r1, [r3, #4]
 8007208:	6863      	ldr	r3, [r4, #4]
 800720a:	bf08      	it	eq
 800720c:	f8c8 1000 	streq.w	r1, [r8]
 8007210:	5162      	str	r2, [r4, r5]
 8007212:	604b      	str	r3, [r1, #4]
 8007214:	4638      	mov	r0, r7
 8007216:	f104 060b 	add.w	r6, r4, #11
 800721a:	f000 f829 	bl	8007270 <__malloc_unlock>
 800721e:	f026 0607 	bic.w	r6, r6, #7
 8007222:	1d23      	adds	r3, r4, #4
 8007224:	1af2      	subs	r2, r6, r3
 8007226:	d0ae      	beq.n	8007186 <_malloc_r+0x22>
 8007228:	1b9b      	subs	r3, r3, r6
 800722a:	50a3      	str	r3, [r4, r2]
 800722c:	e7ab      	b.n	8007186 <_malloc_r+0x22>
 800722e:	42a3      	cmp	r3, r4
 8007230:	6862      	ldr	r2, [r4, #4]
 8007232:	d1dd      	bne.n	80071f0 <_malloc_r+0x8c>
 8007234:	f8c8 2000 	str.w	r2, [r8]
 8007238:	e7ec      	b.n	8007214 <_malloc_r+0xb0>
 800723a:	4623      	mov	r3, r4
 800723c:	6864      	ldr	r4, [r4, #4]
 800723e:	e7ac      	b.n	800719a <_malloc_r+0x36>
 8007240:	4634      	mov	r4, r6
 8007242:	6876      	ldr	r6, [r6, #4]
 8007244:	e7b4      	b.n	80071b0 <_malloc_r+0x4c>
 8007246:	4613      	mov	r3, r2
 8007248:	e7cc      	b.n	80071e4 <_malloc_r+0x80>
 800724a:	230c      	movs	r3, #12
 800724c:	603b      	str	r3, [r7, #0]
 800724e:	4638      	mov	r0, r7
 8007250:	f000 f80e 	bl	8007270 <__malloc_unlock>
 8007254:	e797      	b.n	8007186 <_malloc_r+0x22>
 8007256:	6025      	str	r5, [r4, #0]
 8007258:	e7dc      	b.n	8007214 <_malloc_r+0xb0>
 800725a:	605b      	str	r3, [r3, #4]
 800725c:	deff      	udf	#255	; 0xff
 800725e:	bf00      	nop
 8007260:	20000474 	.word	0x20000474

08007264 <__malloc_lock>:
 8007264:	4801      	ldr	r0, [pc, #4]	; (800726c <__malloc_lock+0x8>)
 8007266:	f7ff bf0f 	b.w	8007088 <__retarget_lock_acquire_recursive>
 800726a:	bf00      	nop
 800726c:	20000470 	.word	0x20000470

08007270 <__malloc_unlock>:
 8007270:	4801      	ldr	r0, [pc, #4]	; (8007278 <__malloc_unlock+0x8>)
 8007272:	f7ff bf0a 	b.w	800708a <__retarget_lock_release_recursive>
 8007276:	bf00      	nop
 8007278:	20000470 	.word	0x20000470

0800727c <__ssputs_r>:
 800727c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007280:	688e      	ldr	r6, [r1, #8]
 8007282:	461f      	mov	r7, r3
 8007284:	42be      	cmp	r6, r7
 8007286:	680b      	ldr	r3, [r1, #0]
 8007288:	4682      	mov	sl, r0
 800728a:	460c      	mov	r4, r1
 800728c:	4690      	mov	r8, r2
 800728e:	d82c      	bhi.n	80072ea <__ssputs_r+0x6e>
 8007290:	898a      	ldrh	r2, [r1, #12]
 8007292:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007296:	d026      	beq.n	80072e6 <__ssputs_r+0x6a>
 8007298:	6965      	ldr	r5, [r4, #20]
 800729a:	6909      	ldr	r1, [r1, #16]
 800729c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80072a0:	eba3 0901 	sub.w	r9, r3, r1
 80072a4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80072a8:	1c7b      	adds	r3, r7, #1
 80072aa:	444b      	add	r3, r9
 80072ac:	106d      	asrs	r5, r5, #1
 80072ae:	429d      	cmp	r5, r3
 80072b0:	bf38      	it	cc
 80072b2:	461d      	movcc	r5, r3
 80072b4:	0553      	lsls	r3, r2, #21
 80072b6:	d527      	bpl.n	8007308 <__ssputs_r+0x8c>
 80072b8:	4629      	mov	r1, r5
 80072ba:	f7ff ff53 	bl	8007164 <_malloc_r>
 80072be:	4606      	mov	r6, r0
 80072c0:	b360      	cbz	r0, 800731c <__ssputs_r+0xa0>
 80072c2:	6921      	ldr	r1, [r4, #16]
 80072c4:	464a      	mov	r2, r9
 80072c6:	f000 faeb 	bl	80078a0 <memcpy>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80072d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80072d4:	81a3      	strh	r3, [r4, #12]
 80072d6:	6126      	str	r6, [r4, #16]
 80072d8:	6165      	str	r5, [r4, #20]
 80072da:	444e      	add	r6, r9
 80072dc:	eba5 0509 	sub.w	r5, r5, r9
 80072e0:	6026      	str	r6, [r4, #0]
 80072e2:	60a5      	str	r5, [r4, #8]
 80072e4:	463e      	mov	r6, r7
 80072e6:	42be      	cmp	r6, r7
 80072e8:	d900      	bls.n	80072ec <__ssputs_r+0x70>
 80072ea:	463e      	mov	r6, r7
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	4632      	mov	r2, r6
 80072f0:	4641      	mov	r1, r8
 80072f2:	f000 faab 	bl	800784c <memmove>
 80072f6:	68a3      	ldr	r3, [r4, #8]
 80072f8:	1b9b      	subs	r3, r3, r6
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	6823      	ldr	r3, [r4, #0]
 80072fe:	4433      	add	r3, r6
 8007300:	6023      	str	r3, [r4, #0]
 8007302:	2000      	movs	r0, #0
 8007304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007308:	462a      	mov	r2, r5
 800730a:	f000 fad7 	bl	80078bc <_realloc_r>
 800730e:	4606      	mov	r6, r0
 8007310:	2800      	cmp	r0, #0
 8007312:	d1e0      	bne.n	80072d6 <__ssputs_r+0x5a>
 8007314:	6921      	ldr	r1, [r4, #16]
 8007316:	4650      	mov	r0, sl
 8007318:	f7ff feb8 	bl	800708c <_free_r>
 800731c:	230c      	movs	r3, #12
 800731e:	f8ca 3000 	str.w	r3, [sl]
 8007322:	89a3      	ldrh	r3, [r4, #12]
 8007324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	e7e9      	b.n	8007304 <__ssputs_r+0x88>

08007330 <_svfiprintf_r>:
 8007330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007334:	4698      	mov	r8, r3
 8007336:	898b      	ldrh	r3, [r1, #12]
 8007338:	061b      	lsls	r3, r3, #24
 800733a:	b09d      	sub	sp, #116	; 0x74
 800733c:	4607      	mov	r7, r0
 800733e:	460d      	mov	r5, r1
 8007340:	4614      	mov	r4, r2
 8007342:	d50e      	bpl.n	8007362 <_svfiprintf_r+0x32>
 8007344:	690b      	ldr	r3, [r1, #16]
 8007346:	b963      	cbnz	r3, 8007362 <_svfiprintf_r+0x32>
 8007348:	2140      	movs	r1, #64	; 0x40
 800734a:	f7ff ff0b 	bl	8007164 <_malloc_r>
 800734e:	6028      	str	r0, [r5, #0]
 8007350:	6128      	str	r0, [r5, #16]
 8007352:	b920      	cbnz	r0, 800735e <_svfiprintf_r+0x2e>
 8007354:	230c      	movs	r3, #12
 8007356:	603b      	str	r3, [r7, #0]
 8007358:	f04f 30ff 	mov.w	r0, #4294967295
 800735c:	e0d0      	b.n	8007500 <_svfiprintf_r+0x1d0>
 800735e:	2340      	movs	r3, #64	; 0x40
 8007360:	616b      	str	r3, [r5, #20]
 8007362:	2300      	movs	r3, #0
 8007364:	9309      	str	r3, [sp, #36]	; 0x24
 8007366:	2320      	movs	r3, #32
 8007368:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800736c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007370:	2330      	movs	r3, #48	; 0x30
 8007372:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007518 <_svfiprintf_r+0x1e8>
 8007376:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800737a:	f04f 0901 	mov.w	r9, #1
 800737e:	4623      	mov	r3, r4
 8007380:	469a      	mov	sl, r3
 8007382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007386:	b10a      	cbz	r2, 800738c <_svfiprintf_r+0x5c>
 8007388:	2a25      	cmp	r2, #37	; 0x25
 800738a:	d1f9      	bne.n	8007380 <_svfiprintf_r+0x50>
 800738c:	ebba 0b04 	subs.w	fp, sl, r4
 8007390:	d00b      	beq.n	80073aa <_svfiprintf_r+0x7a>
 8007392:	465b      	mov	r3, fp
 8007394:	4622      	mov	r2, r4
 8007396:	4629      	mov	r1, r5
 8007398:	4638      	mov	r0, r7
 800739a:	f7ff ff6f 	bl	800727c <__ssputs_r>
 800739e:	3001      	adds	r0, #1
 80073a0:	f000 80a9 	beq.w	80074f6 <_svfiprintf_r+0x1c6>
 80073a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073a6:	445a      	add	r2, fp
 80073a8:	9209      	str	r2, [sp, #36]	; 0x24
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	f000 80a1 	beq.w	80074f6 <_svfiprintf_r+0x1c6>
 80073b4:	2300      	movs	r3, #0
 80073b6:	f04f 32ff 	mov.w	r2, #4294967295
 80073ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073be:	f10a 0a01 	add.w	sl, sl, #1
 80073c2:	9304      	str	r3, [sp, #16]
 80073c4:	9307      	str	r3, [sp, #28]
 80073c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073ca:	931a      	str	r3, [sp, #104]	; 0x68
 80073cc:	4654      	mov	r4, sl
 80073ce:	2205      	movs	r2, #5
 80073d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d4:	4850      	ldr	r0, [pc, #320]	; (8007518 <_svfiprintf_r+0x1e8>)
 80073d6:	f7f8 ff03 	bl	80001e0 <memchr>
 80073da:	9a04      	ldr	r2, [sp, #16]
 80073dc:	b9d8      	cbnz	r0, 8007416 <_svfiprintf_r+0xe6>
 80073de:	06d0      	lsls	r0, r2, #27
 80073e0:	bf44      	itt	mi
 80073e2:	2320      	movmi	r3, #32
 80073e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073e8:	0711      	lsls	r1, r2, #28
 80073ea:	bf44      	itt	mi
 80073ec:	232b      	movmi	r3, #43	; 0x2b
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f2:	f89a 3000 	ldrb.w	r3, [sl]
 80073f6:	2b2a      	cmp	r3, #42	; 0x2a
 80073f8:	d015      	beq.n	8007426 <_svfiprintf_r+0xf6>
 80073fa:	9a07      	ldr	r2, [sp, #28]
 80073fc:	4654      	mov	r4, sl
 80073fe:	2000      	movs	r0, #0
 8007400:	f04f 0c0a 	mov.w	ip, #10
 8007404:	4621      	mov	r1, r4
 8007406:	f811 3b01 	ldrb.w	r3, [r1], #1
 800740a:	3b30      	subs	r3, #48	; 0x30
 800740c:	2b09      	cmp	r3, #9
 800740e:	d94d      	bls.n	80074ac <_svfiprintf_r+0x17c>
 8007410:	b1b0      	cbz	r0, 8007440 <_svfiprintf_r+0x110>
 8007412:	9207      	str	r2, [sp, #28]
 8007414:	e014      	b.n	8007440 <_svfiprintf_r+0x110>
 8007416:	eba0 0308 	sub.w	r3, r0, r8
 800741a:	fa09 f303 	lsl.w	r3, r9, r3
 800741e:	4313      	orrs	r3, r2
 8007420:	9304      	str	r3, [sp, #16]
 8007422:	46a2      	mov	sl, r4
 8007424:	e7d2      	b.n	80073cc <_svfiprintf_r+0x9c>
 8007426:	9b03      	ldr	r3, [sp, #12]
 8007428:	1d19      	adds	r1, r3, #4
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	9103      	str	r1, [sp, #12]
 800742e:	2b00      	cmp	r3, #0
 8007430:	bfbb      	ittet	lt
 8007432:	425b      	neglt	r3, r3
 8007434:	f042 0202 	orrlt.w	r2, r2, #2
 8007438:	9307      	strge	r3, [sp, #28]
 800743a:	9307      	strlt	r3, [sp, #28]
 800743c:	bfb8      	it	lt
 800743e:	9204      	strlt	r2, [sp, #16]
 8007440:	7823      	ldrb	r3, [r4, #0]
 8007442:	2b2e      	cmp	r3, #46	; 0x2e
 8007444:	d10c      	bne.n	8007460 <_svfiprintf_r+0x130>
 8007446:	7863      	ldrb	r3, [r4, #1]
 8007448:	2b2a      	cmp	r3, #42	; 0x2a
 800744a:	d134      	bne.n	80074b6 <_svfiprintf_r+0x186>
 800744c:	9b03      	ldr	r3, [sp, #12]
 800744e:	1d1a      	adds	r2, r3, #4
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	9203      	str	r2, [sp, #12]
 8007454:	2b00      	cmp	r3, #0
 8007456:	bfb8      	it	lt
 8007458:	f04f 33ff 	movlt.w	r3, #4294967295
 800745c:	3402      	adds	r4, #2
 800745e:	9305      	str	r3, [sp, #20]
 8007460:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007528 <_svfiprintf_r+0x1f8>
 8007464:	7821      	ldrb	r1, [r4, #0]
 8007466:	2203      	movs	r2, #3
 8007468:	4650      	mov	r0, sl
 800746a:	f7f8 feb9 	bl	80001e0 <memchr>
 800746e:	b138      	cbz	r0, 8007480 <_svfiprintf_r+0x150>
 8007470:	9b04      	ldr	r3, [sp, #16]
 8007472:	eba0 000a 	sub.w	r0, r0, sl
 8007476:	2240      	movs	r2, #64	; 0x40
 8007478:	4082      	lsls	r2, r0
 800747a:	4313      	orrs	r3, r2
 800747c:	3401      	adds	r4, #1
 800747e:	9304      	str	r3, [sp, #16]
 8007480:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007484:	4825      	ldr	r0, [pc, #148]	; (800751c <_svfiprintf_r+0x1ec>)
 8007486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800748a:	2206      	movs	r2, #6
 800748c:	f7f8 fea8 	bl	80001e0 <memchr>
 8007490:	2800      	cmp	r0, #0
 8007492:	d038      	beq.n	8007506 <_svfiprintf_r+0x1d6>
 8007494:	4b22      	ldr	r3, [pc, #136]	; (8007520 <_svfiprintf_r+0x1f0>)
 8007496:	bb1b      	cbnz	r3, 80074e0 <_svfiprintf_r+0x1b0>
 8007498:	9b03      	ldr	r3, [sp, #12]
 800749a:	3307      	adds	r3, #7
 800749c:	f023 0307 	bic.w	r3, r3, #7
 80074a0:	3308      	adds	r3, #8
 80074a2:	9303      	str	r3, [sp, #12]
 80074a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a6:	4433      	add	r3, r6
 80074a8:	9309      	str	r3, [sp, #36]	; 0x24
 80074aa:	e768      	b.n	800737e <_svfiprintf_r+0x4e>
 80074ac:	fb0c 3202 	mla	r2, ip, r2, r3
 80074b0:	460c      	mov	r4, r1
 80074b2:	2001      	movs	r0, #1
 80074b4:	e7a6      	b.n	8007404 <_svfiprintf_r+0xd4>
 80074b6:	2300      	movs	r3, #0
 80074b8:	3401      	adds	r4, #1
 80074ba:	9305      	str	r3, [sp, #20]
 80074bc:	4619      	mov	r1, r3
 80074be:	f04f 0c0a 	mov.w	ip, #10
 80074c2:	4620      	mov	r0, r4
 80074c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074c8:	3a30      	subs	r2, #48	; 0x30
 80074ca:	2a09      	cmp	r2, #9
 80074cc:	d903      	bls.n	80074d6 <_svfiprintf_r+0x1a6>
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d0c6      	beq.n	8007460 <_svfiprintf_r+0x130>
 80074d2:	9105      	str	r1, [sp, #20]
 80074d4:	e7c4      	b.n	8007460 <_svfiprintf_r+0x130>
 80074d6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074da:	4604      	mov	r4, r0
 80074dc:	2301      	movs	r3, #1
 80074de:	e7f0      	b.n	80074c2 <_svfiprintf_r+0x192>
 80074e0:	ab03      	add	r3, sp, #12
 80074e2:	9300      	str	r3, [sp, #0]
 80074e4:	462a      	mov	r2, r5
 80074e6:	4b0f      	ldr	r3, [pc, #60]	; (8007524 <_svfiprintf_r+0x1f4>)
 80074e8:	a904      	add	r1, sp, #16
 80074ea:	4638      	mov	r0, r7
 80074ec:	f3af 8000 	nop.w
 80074f0:	1c42      	adds	r2, r0, #1
 80074f2:	4606      	mov	r6, r0
 80074f4:	d1d6      	bne.n	80074a4 <_svfiprintf_r+0x174>
 80074f6:	89ab      	ldrh	r3, [r5, #12]
 80074f8:	065b      	lsls	r3, r3, #25
 80074fa:	f53f af2d 	bmi.w	8007358 <_svfiprintf_r+0x28>
 80074fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007500:	b01d      	add	sp, #116	; 0x74
 8007502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007506:	ab03      	add	r3, sp, #12
 8007508:	9300      	str	r3, [sp, #0]
 800750a:	462a      	mov	r2, r5
 800750c:	4b05      	ldr	r3, [pc, #20]	; (8007524 <_svfiprintf_r+0x1f4>)
 800750e:	a904      	add	r1, sp, #16
 8007510:	4638      	mov	r0, r7
 8007512:	f000 f879 	bl	8007608 <_printf_i>
 8007516:	e7eb      	b.n	80074f0 <_svfiprintf_r+0x1c0>
 8007518:	080079e8 	.word	0x080079e8
 800751c:	080079f2 	.word	0x080079f2
 8007520:	00000000 	.word	0x00000000
 8007524:	0800727d 	.word	0x0800727d
 8007528:	080079ee 	.word	0x080079ee

0800752c <_printf_common>:
 800752c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007530:	4616      	mov	r6, r2
 8007532:	4699      	mov	r9, r3
 8007534:	688a      	ldr	r2, [r1, #8]
 8007536:	690b      	ldr	r3, [r1, #16]
 8007538:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800753c:	4293      	cmp	r3, r2
 800753e:	bfb8      	it	lt
 8007540:	4613      	movlt	r3, r2
 8007542:	6033      	str	r3, [r6, #0]
 8007544:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007548:	4607      	mov	r7, r0
 800754a:	460c      	mov	r4, r1
 800754c:	b10a      	cbz	r2, 8007552 <_printf_common+0x26>
 800754e:	3301      	adds	r3, #1
 8007550:	6033      	str	r3, [r6, #0]
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	0699      	lsls	r1, r3, #26
 8007556:	bf42      	ittt	mi
 8007558:	6833      	ldrmi	r3, [r6, #0]
 800755a:	3302      	addmi	r3, #2
 800755c:	6033      	strmi	r3, [r6, #0]
 800755e:	6825      	ldr	r5, [r4, #0]
 8007560:	f015 0506 	ands.w	r5, r5, #6
 8007564:	d106      	bne.n	8007574 <_printf_common+0x48>
 8007566:	f104 0a19 	add.w	sl, r4, #25
 800756a:	68e3      	ldr	r3, [r4, #12]
 800756c:	6832      	ldr	r2, [r6, #0]
 800756e:	1a9b      	subs	r3, r3, r2
 8007570:	42ab      	cmp	r3, r5
 8007572:	dc26      	bgt.n	80075c2 <_printf_common+0x96>
 8007574:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007578:	1e13      	subs	r3, r2, #0
 800757a:	6822      	ldr	r2, [r4, #0]
 800757c:	bf18      	it	ne
 800757e:	2301      	movne	r3, #1
 8007580:	0692      	lsls	r2, r2, #26
 8007582:	d42b      	bmi.n	80075dc <_printf_common+0xb0>
 8007584:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007588:	4649      	mov	r1, r9
 800758a:	4638      	mov	r0, r7
 800758c:	47c0      	blx	r8
 800758e:	3001      	adds	r0, #1
 8007590:	d01e      	beq.n	80075d0 <_printf_common+0xa4>
 8007592:	6823      	ldr	r3, [r4, #0]
 8007594:	6922      	ldr	r2, [r4, #16]
 8007596:	f003 0306 	and.w	r3, r3, #6
 800759a:	2b04      	cmp	r3, #4
 800759c:	bf02      	ittt	eq
 800759e:	68e5      	ldreq	r5, [r4, #12]
 80075a0:	6833      	ldreq	r3, [r6, #0]
 80075a2:	1aed      	subeq	r5, r5, r3
 80075a4:	68a3      	ldr	r3, [r4, #8]
 80075a6:	bf0c      	ite	eq
 80075a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80075ac:	2500      	movne	r5, #0
 80075ae:	4293      	cmp	r3, r2
 80075b0:	bfc4      	itt	gt
 80075b2:	1a9b      	subgt	r3, r3, r2
 80075b4:	18ed      	addgt	r5, r5, r3
 80075b6:	2600      	movs	r6, #0
 80075b8:	341a      	adds	r4, #26
 80075ba:	42b5      	cmp	r5, r6
 80075bc:	d11a      	bne.n	80075f4 <_printf_common+0xc8>
 80075be:	2000      	movs	r0, #0
 80075c0:	e008      	b.n	80075d4 <_printf_common+0xa8>
 80075c2:	2301      	movs	r3, #1
 80075c4:	4652      	mov	r2, sl
 80075c6:	4649      	mov	r1, r9
 80075c8:	4638      	mov	r0, r7
 80075ca:	47c0      	blx	r8
 80075cc:	3001      	adds	r0, #1
 80075ce:	d103      	bne.n	80075d8 <_printf_common+0xac>
 80075d0:	f04f 30ff 	mov.w	r0, #4294967295
 80075d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075d8:	3501      	adds	r5, #1
 80075da:	e7c6      	b.n	800756a <_printf_common+0x3e>
 80075dc:	18e1      	adds	r1, r4, r3
 80075de:	1c5a      	adds	r2, r3, #1
 80075e0:	2030      	movs	r0, #48	; 0x30
 80075e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075e6:	4422      	add	r2, r4
 80075e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075f0:	3302      	adds	r3, #2
 80075f2:	e7c7      	b.n	8007584 <_printf_common+0x58>
 80075f4:	2301      	movs	r3, #1
 80075f6:	4622      	mov	r2, r4
 80075f8:	4649      	mov	r1, r9
 80075fa:	4638      	mov	r0, r7
 80075fc:	47c0      	blx	r8
 80075fe:	3001      	adds	r0, #1
 8007600:	d0e6      	beq.n	80075d0 <_printf_common+0xa4>
 8007602:	3601      	adds	r6, #1
 8007604:	e7d9      	b.n	80075ba <_printf_common+0x8e>
	...

08007608 <_printf_i>:
 8007608:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800760c:	7e0f      	ldrb	r7, [r1, #24]
 800760e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007610:	2f78      	cmp	r7, #120	; 0x78
 8007612:	4691      	mov	r9, r2
 8007614:	4680      	mov	r8, r0
 8007616:	460c      	mov	r4, r1
 8007618:	469a      	mov	sl, r3
 800761a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800761e:	d807      	bhi.n	8007630 <_printf_i+0x28>
 8007620:	2f62      	cmp	r7, #98	; 0x62
 8007622:	d80a      	bhi.n	800763a <_printf_i+0x32>
 8007624:	2f00      	cmp	r7, #0
 8007626:	f000 80d4 	beq.w	80077d2 <_printf_i+0x1ca>
 800762a:	2f58      	cmp	r7, #88	; 0x58
 800762c:	f000 80c0 	beq.w	80077b0 <_printf_i+0x1a8>
 8007630:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007634:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007638:	e03a      	b.n	80076b0 <_printf_i+0xa8>
 800763a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800763e:	2b15      	cmp	r3, #21
 8007640:	d8f6      	bhi.n	8007630 <_printf_i+0x28>
 8007642:	a101      	add	r1, pc, #4	; (adr r1, 8007648 <_printf_i+0x40>)
 8007644:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007648:	080076a1 	.word	0x080076a1
 800764c:	080076b5 	.word	0x080076b5
 8007650:	08007631 	.word	0x08007631
 8007654:	08007631 	.word	0x08007631
 8007658:	08007631 	.word	0x08007631
 800765c:	08007631 	.word	0x08007631
 8007660:	080076b5 	.word	0x080076b5
 8007664:	08007631 	.word	0x08007631
 8007668:	08007631 	.word	0x08007631
 800766c:	08007631 	.word	0x08007631
 8007670:	08007631 	.word	0x08007631
 8007674:	080077b9 	.word	0x080077b9
 8007678:	080076e1 	.word	0x080076e1
 800767c:	08007773 	.word	0x08007773
 8007680:	08007631 	.word	0x08007631
 8007684:	08007631 	.word	0x08007631
 8007688:	080077db 	.word	0x080077db
 800768c:	08007631 	.word	0x08007631
 8007690:	080076e1 	.word	0x080076e1
 8007694:	08007631 	.word	0x08007631
 8007698:	08007631 	.word	0x08007631
 800769c:	0800777b 	.word	0x0800777b
 80076a0:	682b      	ldr	r3, [r5, #0]
 80076a2:	1d1a      	adds	r2, r3, #4
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	602a      	str	r2, [r5, #0]
 80076a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80076b0:	2301      	movs	r3, #1
 80076b2:	e09f      	b.n	80077f4 <_printf_i+0x1ec>
 80076b4:	6820      	ldr	r0, [r4, #0]
 80076b6:	682b      	ldr	r3, [r5, #0]
 80076b8:	0607      	lsls	r7, r0, #24
 80076ba:	f103 0104 	add.w	r1, r3, #4
 80076be:	6029      	str	r1, [r5, #0]
 80076c0:	d501      	bpl.n	80076c6 <_printf_i+0xbe>
 80076c2:	681e      	ldr	r6, [r3, #0]
 80076c4:	e003      	b.n	80076ce <_printf_i+0xc6>
 80076c6:	0646      	lsls	r6, r0, #25
 80076c8:	d5fb      	bpl.n	80076c2 <_printf_i+0xba>
 80076ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80076ce:	2e00      	cmp	r6, #0
 80076d0:	da03      	bge.n	80076da <_printf_i+0xd2>
 80076d2:	232d      	movs	r3, #45	; 0x2d
 80076d4:	4276      	negs	r6, r6
 80076d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076da:	485a      	ldr	r0, [pc, #360]	; (8007844 <_printf_i+0x23c>)
 80076dc:	230a      	movs	r3, #10
 80076de:	e012      	b.n	8007706 <_printf_i+0xfe>
 80076e0:	682b      	ldr	r3, [r5, #0]
 80076e2:	6820      	ldr	r0, [r4, #0]
 80076e4:	1d19      	adds	r1, r3, #4
 80076e6:	6029      	str	r1, [r5, #0]
 80076e8:	0605      	lsls	r5, r0, #24
 80076ea:	d501      	bpl.n	80076f0 <_printf_i+0xe8>
 80076ec:	681e      	ldr	r6, [r3, #0]
 80076ee:	e002      	b.n	80076f6 <_printf_i+0xee>
 80076f0:	0641      	lsls	r1, r0, #25
 80076f2:	d5fb      	bpl.n	80076ec <_printf_i+0xe4>
 80076f4:	881e      	ldrh	r6, [r3, #0]
 80076f6:	4853      	ldr	r0, [pc, #332]	; (8007844 <_printf_i+0x23c>)
 80076f8:	2f6f      	cmp	r7, #111	; 0x6f
 80076fa:	bf0c      	ite	eq
 80076fc:	2308      	moveq	r3, #8
 80076fe:	230a      	movne	r3, #10
 8007700:	2100      	movs	r1, #0
 8007702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007706:	6865      	ldr	r5, [r4, #4]
 8007708:	60a5      	str	r5, [r4, #8]
 800770a:	2d00      	cmp	r5, #0
 800770c:	bfa2      	ittt	ge
 800770e:	6821      	ldrge	r1, [r4, #0]
 8007710:	f021 0104 	bicge.w	r1, r1, #4
 8007714:	6021      	strge	r1, [r4, #0]
 8007716:	b90e      	cbnz	r6, 800771c <_printf_i+0x114>
 8007718:	2d00      	cmp	r5, #0
 800771a:	d04b      	beq.n	80077b4 <_printf_i+0x1ac>
 800771c:	4615      	mov	r5, r2
 800771e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007722:	fb03 6711 	mls	r7, r3, r1, r6
 8007726:	5dc7      	ldrb	r7, [r0, r7]
 8007728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800772c:	4637      	mov	r7, r6
 800772e:	42bb      	cmp	r3, r7
 8007730:	460e      	mov	r6, r1
 8007732:	d9f4      	bls.n	800771e <_printf_i+0x116>
 8007734:	2b08      	cmp	r3, #8
 8007736:	d10b      	bne.n	8007750 <_printf_i+0x148>
 8007738:	6823      	ldr	r3, [r4, #0]
 800773a:	07de      	lsls	r6, r3, #31
 800773c:	d508      	bpl.n	8007750 <_printf_i+0x148>
 800773e:	6923      	ldr	r3, [r4, #16]
 8007740:	6861      	ldr	r1, [r4, #4]
 8007742:	4299      	cmp	r1, r3
 8007744:	bfde      	ittt	le
 8007746:	2330      	movle	r3, #48	; 0x30
 8007748:	f805 3c01 	strble.w	r3, [r5, #-1]
 800774c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007750:	1b52      	subs	r2, r2, r5
 8007752:	6122      	str	r2, [r4, #16]
 8007754:	f8cd a000 	str.w	sl, [sp]
 8007758:	464b      	mov	r3, r9
 800775a:	aa03      	add	r2, sp, #12
 800775c:	4621      	mov	r1, r4
 800775e:	4640      	mov	r0, r8
 8007760:	f7ff fee4 	bl	800752c <_printf_common>
 8007764:	3001      	adds	r0, #1
 8007766:	d14a      	bne.n	80077fe <_printf_i+0x1f6>
 8007768:	f04f 30ff 	mov.w	r0, #4294967295
 800776c:	b004      	add	sp, #16
 800776e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	f043 0320 	orr.w	r3, r3, #32
 8007778:	6023      	str	r3, [r4, #0]
 800777a:	4833      	ldr	r0, [pc, #204]	; (8007848 <_printf_i+0x240>)
 800777c:	2778      	movs	r7, #120	; 0x78
 800777e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007782:	6823      	ldr	r3, [r4, #0]
 8007784:	6829      	ldr	r1, [r5, #0]
 8007786:	061f      	lsls	r7, r3, #24
 8007788:	f851 6b04 	ldr.w	r6, [r1], #4
 800778c:	d402      	bmi.n	8007794 <_printf_i+0x18c>
 800778e:	065f      	lsls	r7, r3, #25
 8007790:	bf48      	it	mi
 8007792:	b2b6      	uxthmi	r6, r6
 8007794:	07df      	lsls	r7, r3, #31
 8007796:	bf48      	it	mi
 8007798:	f043 0320 	orrmi.w	r3, r3, #32
 800779c:	6029      	str	r1, [r5, #0]
 800779e:	bf48      	it	mi
 80077a0:	6023      	strmi	r3, [r4, #0]
 80077a2:	b91e      	cbnz	r6, 80077ac <_printf_i+0x1a4>
 80077a4:	6823      	ldr	r3, [r4, #0]
 80077a6:	f023 0320 	bic.w	r3, r3, #32
 80077aa:	6023      	str	r3, [r4, #0]
 80077ac:	2310      	movs	r3, #16
 80077ae:	e7a7      	b.n	8007700 <_printf_i+0xf8>
 80077b0:	4824      	ldr	r0, [pc, #144]	; (8007844 <_printf_i+0x23c>)
 80077b2:	e7e4      	b.n	800777e <_printf_i+0x176>
 80077b4:	4615      	mov	r5, r2
 80077b6:	e7bd      	b.n	8007734 <_printf_i+0x12c>
 80077b8:	682b      	ldr	r3, [r5, #0]
 80077ba:	6826      	ldr	r6, [r4, #0]
 80077bc:	6961      	ldr	r1, [r4, #20]
 80077be:	1d18      	adds	r0, r3, #4
 80077c0:	6028      	str	r0, [r5, #0]
 80077c2:	0635      	lsls	r5, r6, #24
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	d501      	bpl.n	80077cc <_printf_i+0x1c4>
 80077c8:	6019      	str	r1, [r3, #0]
 80077ca:	e002      	b.n	80077d2 <_printf_i+0x1ca>
 80077cc:	0670      	lsls	r0, r6, #25
 80077ce:	d5fb      	bpl.n	80077c8 <_printf_i+0x1c0>
 80077d0:	8019      	strh	r1, [r3, #0]
 80077d2:	2300      	movs	r3, #0
 80077d4:	6123      	str	r3, [r4, #16]
 80077d6:	4615      	mov	r5, r2
 80077d8:	e7bc      	b.n	8007754 <_printf_i+0x14c>
 80077da:	682b      	ldr	r3, [r5, #0]
 80077dc:	1d1a      	adds	r2, r3, #4
 80077de:	602a      	str	r2, [r5, #0]
 80077e0:	681d      	ldr	r5, [r3, #0]
 80077e2:	6862      	ldr	r2, [r4, #4]
 80077e4:	2100      	movs	r1, #0
 80077e6:	4628      	mov	r0, r5
 80077e8:	f7f8 fcfa 	bl	80001e0 <memchr>
 80077ec:	b108      	cbz	r0, 80077f2 <_printf_i+0x1ea>
 80077ee:	1b40      	subs	r0, r0, r5
 80077f0:	6060      	str	r0, [r4, #4]
 80077f2:	6863      	ldr	r3, [r4, #4]
 80077f4:	6123      	str	r3, [r4, #16]
 80077f6:	2300      	movs	r3, #0
 80077f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077fc:	e7aa      	b.n	8007754 <_printf_i+0x14c>
 80077fe:	6923      	ldr	r3, [r4, #16]
 8007800:	462a      	mov	r2, r5
 8007802:	4649      	mov	r1, r9
 8007804:	4640      	mov	r0, r8
 8007806:	47d0      	blx	sl
 8007808:	3001      	adds	r0, #1
 800780a:	d0ad      	beq.n	8007768 <_printf_i+0x160>
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	079b      	lsls	r3, r3, #30
 8007810:	d413      	bmi.n	800783a <_printf_i+0x232>
 8007812:	68e0      	ldr	r0, [r4, #12]
 8007814:	9b03      	ldr	r3, [sp, #12]
 8007816:	4298      	cmp	r0, r3
 8007818:	bfb8      	it	lt
 800781a:	4618      	movlt	r0, r3
 800781c:	e7a6      	b.n	800776c <_printf_i+0x164>
 800781e:	2301      	movs	r3, #1
 8007820:	4632      	mov	r2, r6
 8007822:	4649      	mov	r1, r9
 8007824:	4640      	mov	r0, r8
 8007826:	47d0      	blx	sl
 8007828:	3001      	adds	r0, #1
 800782a:	d09d      	beq.n	8007768 <_printf_i+0x160>
 800782c:	3501      	adds	r5, #1
 800782e:	68e3      	ldr	r3, [r4, #12]
 8007830:	9903      	ldr	r1, [sp, #12]
 8007832:	1a5b      	subs	r3, r3, r1
 8007834:	42ab      	cmp	r3, r5
 8007836:	dcf2      	bgt.n	800781e <_printf_i+0x216>
 8007838:	e7eb      	b.n	8007812 <_printf_i+0x20a>
 800783a:	2500      	movs	r5, #0
 800783c:	f104 0619 	add.w	r6, r4, #25
 8007840:	e7f5      	b.n	800782e <_printf_i+0x226>
 8007842:	bf00      	nop
 8007844:	080079f9 	.word	0x080079f9
 8007848:	08007a0a 	.word	0x08007a0a

0800784c <memmove>:
 800784c:	4288      	cmp	r0, r1
 800784e:	b510      	push	{r4, lr}
 8007850:	eb01 0402 	add.w	r4, r1, r2
 8007854:	d902      	bls.n	800785c <memmove+0x10>
 8007856:	4284      	cmp	r4, r0
 8007858:	4623      	mov	r3, r4
 800785a:	d807      	bhi.n	800786c <memmove+0x20>
 800785c:	1e43      	subs	r3, r0, #1
 800785e:	42a1      	cmp	r1, r4
 8007860:	d008      	beq.n	8007874 <memmove+0x28>
 8007862:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007866:	f803 2f01 	strb.w	r2, [r3, #1]!
 800786a:	e7f8      	b.n	800785e <memmove+0x12>
 800786c:	4402      	add	r2, r0
 800786e:	4601      	mov	r1, r0
 8007870:	428a      	cmp	r2, r1
 8007872:	d100      	bne.n	8007876 <memmove+0x2a>
 8007874:	bd10      	pop	{r4, pc}
 8007876:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800787a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800787e:	e7f7      	b.n	8007870 <memmove+0x24>

08007880 <_sbrk_r>:
 8007880:	b538      	push	{r3, r4, r5, lr}
 8007882:	4d06      	ldr	r5, [pc, #24]	; (800789c <_sbrk_r+0x1c>)
 8007884:	2300      	movs	r3, #0
 8007886:	4604      	mov	r4, r0
 8007888:	4608      	mov	r0, r1
 800788a:	602b      	str	r3, [r5, #0]
 800788c:	f7f9 fd26 	bl	80012dc <_sbrk>
 8007890:	1c43      	adds	r3, r0, #1
 8007892:	d102      	bne.n	800789a <_sbrk_r+0x1a>
 8007894:	682b      	ldr	r3, [r5, #0]
 8007896:	b103      	cbz	r3, 800789a <_sbrk_r+0x1a>
 8007898:	6023      	str	r3, [r4, #0]
 800789a:	bd38      	pop	{r3, r4, r5, pc}
 800789c:	2000046c 	.word	0x2000046c

080078a0 <memcpy>:
 80078a0:	440a      	add	r2, r1
 80078a2:	4291      	cmp	r1, r2
 80078a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80078a8:	d100      	bne.n	80078ac <memcpy+0xc>
 80078aa:	4770      	bx	lr
 80078ac:	b510      	push	{r4, lr}
 80078ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078b6:	4291      	cmp	r1, r2
 80078b8:	d1f9      	bne.n	80078ae <memcpy+0xe>
 80078ba:	bd10      	pop	{r4, pc}

080078bc <_realloc_r>:
 80078bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078c0:	4680      	mov	r8, r0
 80078c2:	4614      	mov	r4, r2
 80078c4:	460e      	mov	r6, r1
 80078c6:	b921      	cbnz	r1, 80078d2 <_realloc_r+0x16>
 80078c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078cc:	4611      	mov	r1, r2
 80078ce:	f7ff bc49 	b.w	8007164 <_malloc_r>
 80078d2:	b92a      	cbnz	r2, 80078e0 <_realloc_r+0x24>
 80078d4:	f7ff fbda 	bl	800708c <_free_r>
 80078d8:	4625      	mov	r5, r4
 80078da:	4628      	mov	r0, r5
 80078dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078e0:	f000 f81b 	bl	800791a <_malloc_usable_size_r>
 80078e4:	4284      	cmp	r4, r0
 80078e6:	4607      	mov	r7, r0
 80078e8:	d802      	bhi.n	80078f0 <_realloc_r+0x34>
 80078ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078ee:	d812      	bhi.n	8007916 <_realloc_r+0x5a>
 80078f0:	4621      	mov	r1, r4
 80078f2:	4640      	mov	r0, r8
 80078f4:	f7ff fc36 	bl	8007164 <_malloc_r>
 80078f8:	4605      	mov	r5, r0
 80078fa:	2800      	cmp	r0, #0
 80078fc:	d0ed      	beq.n	80078da <_realloc_r+0x1e>
 80078fe:	42bc      	cmp	r4, r7
 8007900:	4622      	mov	r2, r4
 8007902:	4631      	mov	r1, r6
 8007904:	bf28      	it	cs
 8007906:	463a      	movcs	r2, r7
 8007908:	f7ff ffca 	bl	80078a0 <memcpy>
 800790c:	4631      	mov	r1, r6
 800790e:	4640      	mov	r0, r8
 8007910:	f7ff fbbc 	bl	800708c <_free_r>
 8007914:	e7e1      	b.n	80078da <_realloc_r+0x1e>
 8007916:	4635      	mov	r5, r6
 8007918:	e7df      	b.n	80078da <_realloc_r+0x1e>

0800791a <_malloc_usable_size_r>:
 800791a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800791e:	1f18      	subs	r0, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	bfbc      	itt	lt
 8007924:	580b      	ldrlt	r3, [r1, r0]
 8007926:	18c0      	addlt	r0, r0, r3
 8007928:	4770      	bx	lr
	...

0800792c <_init>:
 800792c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800792e:	bf00      	nop
 8007930:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007932:	bc08      	pop	{r3}
 8007934:	469e      	mov	lr, r3
 8007936:	4770      	bx	lr

08007938 <_fini>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	bf00      	nop
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr
