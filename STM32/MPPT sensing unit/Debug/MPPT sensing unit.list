
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a9e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  0800ab70  0800ab70  0001ab70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af7c  0800af7c  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800af7c  0800af7c  0001af7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af84  0800af84  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af84  0800af84  0001af84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800af88  0800af88  0001af88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800af8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000041c  200001d8  0800b164  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  0800b164  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d0ee  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000041b9  00000000  00000000  0003d339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001940  00000000  00000000  000414f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000137c  00000000  00000000  00042e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026090  00000000  00000000  000441b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020cd3  00000000  00000000  0006a244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e1f45  00000000  00000000  0008af17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007b10  00000000  00000000  0016ce5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0017496c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ab58 	.word	0x0800ab58

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800ab58 	.word	0x0800ab58

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_ADC_ConvCpltCallback>:
const float unitValue = Vref / twelfBitADC * 1000;
const float sensitivity = 1000.0 / 264.0;// 1000mA per 265 mV
uint8_t convCompleted = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	701a      	strb	r2, [r3, #0]
}
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	200001f4 	.word	0x200001f4

08000ec4 <HSB_DebugPrint_Init>:

//Boolean for turn off debug print
//Make false to turn off
bool HSB_DebugPrintOn = true;

void HSB_DebugPrint_Init(bool input){
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	4603      	mov	r3, r0
 8000ecc:	71fb      	strb	r3, [r7, #7]
	HSB_DebugPrintOn = input;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <HSB_DebugPrint_Init+0x1c>)
 8000ed0:	79fb      	ldrb	r3, [r7, #7]
 8000ed2:	7013      	strb	r3, [r2, #0]
	}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	20000000 	.word	0x20000000

08000ee4 <HSB_DebugPrint>:

void HSB_DebugPrint(const char *x, ...){
 8000ee4:	b40f      	push	{r0, r1, r2, r3}
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	af00      	add	r7, sp, #0
	if(HSB_DebugPrintOn){
 8000eea:	4b0c      	ldr	r3, [pc, #48]	; (8000f1c <HSB_DebugPrint+0x38>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d00e      	beq.n	8000f10 <HSB_DebugPrint+0x2c>
		//UART variables
		sprintf(msg,x);
 8000ef2:	68b9      	ldr	r1, [r7, #8]
 8000ef4:	480a      	ldr	r0, [pc, #40]	; (8000f20 <HSB_DebugPrint+0x3c>)
 8000ef6:	f007 fcd1 	bl	800889c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000efa:	4809      	ldr	r0, [pc, #36]	; (8000f20 <HSB_DebugPrint+0x3c>)
 8000efc:	f7ff f9b8 	bl	8000270 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	f04f 33ff 	mov.w	r3, #4294967295
 8000f08:	4905      	ldr	r1, [pc, #20]	; (8000f20 <HSB_DebugPrint+0x3c>)
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <HSB_DebugPrint+0x40>)
 8000f0c:	f006 fad2 	bl	80074b4 <HAL_UART_Transmit>
	}
}
 8000f10:	bf00      	nop
 8000f12:	46bd      	mov	sp, r7
 8000f14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f18:	b004      	add	sp, #16
 8000f1a:	4770      	bx	lr
 8000f1c:	20000000 	.word	0x20000000
 8000f20:	200001f8 	.word	0x200001f8
 8000f24:	2000041c 	.word	0x2000041c

08000f28 <HSB_VoltageModule_Init>:
const float ADCFactor = ReferenceVoltage / ADCBits;
//conversion factor to acount for the voltage divider on the PCB
//58.7 is the total resistance of the devider and 2.7 the small resistor
const float converionFactor = 1 / 2.7 * 58.7;

void HSB_VoltageModule_Init(uint8_t adress){
 8000f28:	b480      	push	{r7}
 8000f2a:	b083      	sub	sp, #12
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	b2da      	uxtb	r2, r3
 8000f38:	4b03      	ldr	r3, [pc, #12]	; (8000f48 <HSB_VoltageModule_Init+0x20>)
 8000f3a:	701a      	strb	r2, [r3, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	20000001 	.word	0x20000001

08000f4c <HSB_ReadMCP3427>:

uint16_t HSB_ReadMCP3427(int channel){
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
 8000f52:	6078      	str	r0, [r7, #4]
	uint8_t RX_Buffer [] = "A"; // Receive buffer i2c
 8000f54:	2341      	movs	r3, #65	; 0x41
 8000f56:	81bb      	strh	r3, [r7, #12]
	uint8_t read = 0;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	72fb      	strb	r3, [r7, #11]
	if(channel == 0){
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d103      	bne.n	8000f6a <HSB_ReadMCP3427+0x1e>
		read = readCH1;
 8000f62:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <HSB_ReadMCP3427+0x84>)
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	72fb      	strb	r3, [r7, #11]
 8000f68:	e002      	b.n	8000f70 <HSB_ReadMCP3427+0x24>
	}else{
		read = readCH2;
 8000f6a:	4b1a      	ldr	r3, [pc, #104]	; (8000fd4 <HSB_ReadMCP3427+0x88>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Master_Transmit(&hi2c1,i2cAddress,&read,1,1000); //Sending in Blocking mode
 8000f70:	4b19      	ldr	r3, [pc, #100]	; (8000fd8 <HSB_ReadMCP3427+0x8c>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	b299      	uxth	r1, r3
 8000f76:	f107 020b 	add.w	r2, r7, #11
 8000f7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f7e:	9300      	str	r3, [sp, #0]
 8000f80:	2301      	movs	r3, #1
 8000f82:	4816      	ldr	r0, [pc, #88]	; (8000fdc <HSB_ReadMCP3427+0x90>)
 8000f84:	f002 fec0 	bl	8003d08 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000f88:	200a      	movs	r0, #10
 8000f8a:	f000 ffa3 	bl	8001ed4 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, i2cAddress, RX_Buffer, 3,1000);
 8000f8e:	4b12      	ldr	r3, [pc, #72]	; (8000fd8 <HSB_ReadMCP3427+0x8c>)
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	b299      	uxth	r1, r3
 8000f94:	f107 020c 	add.w	r2, r7, #12
 8000f98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f9c:	9300      	str	r3, [sp, #0]
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	480e      	ldr	r0, [pc, #56]	; (8000fdc <HSB_ReadMCP3427+0x90>)
 8000fa2:	f002 ffc9 	bl	8003f38 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8000fa6:	200a      	movs	r0, #10
 8000fa8:	f000 ff94 	bl	8001ed4 <HAL_Delay>
	HSB_DebugPrint("\n\r\n\rRAW ADC VALUE = %u\n\r\n\r", (RX_Buffer[0] | RX_Buffer[1]));
 8000fac:	7b3a      	ldrb	r2, [r7, #12]
 8000fae:	7b7b      	ldrb	r3, [r7, #13]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	480a      	ldr	r0, [pc, #40]	; (8000fe0 <HSB_ReadMCP3427+0x94>)
 8000fb8:	f7ff ff94 	bl	8000ee4 <HSB_DebugPrint>
	return RX_Buffer[0] | RX_Buffer[1];
 8000fbc:	7b3a      	ldrb	r2, [r7, #12]
 8000fbe:	7b7b      	ldrb	r3, [r7, #13]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	b2db      	uxtb	r3, r3
 8000fc4:	b29b      	uxth	r3, r3
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	20000002 	.word	0x20000002
 8000fd4:	20000003 	.word	0x20000003
 8000fd8:	20000001 	.word	0x20000001
 8000fdc:	200002e0 	.word	0x200002e0
 8000fe0:	0800ab70 	.word	0x0800ab70

08000fe4 <HSb_ConvertValue>:

float HSb_ConvertValue(int channel){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	uint16_t adcRaw = HSB_ReadMCP3427(channel);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffad 	bl	8000f4c <HSB_ReadMCP3427>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	82fb      	strh	r3, [r7, #22]
	float adcVoltage = adcRaw * ADCFactor;
 8000ff6:	8afb      	ldrh	r3, [r7, #22]
 8000ff8:	ee07 3a90 	vmov	s15, r3
 8000ffc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001000:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800103c <HSb_ConvertValue+0x58>
 8001004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001008:	edc7 7a04 	vstr	s15, [r7, #16]
	float result = adcVoltage * converionFactor;
 800100c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001040 <HSb_ConvertValue+0x5c>
 8001010:	edd7 7a04 	vldr	s15, [r7, #16]
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	edc7 7a03 	vstr	s15, [r7, #12]
	HSB_DebugPrint("Voltage Module\n\rValue %.2f\n\r", result);
 800101c:	68f8      	ldr	r0, [r7, #12]
 800101e:	f7ff fa93 	bl	8000548 <__aeabi_f2d>
 8001022:	4602      	mov	r2, r0
 8001024:	460b      	mov	r3, r1
 8001026:	4807      	ldr	r0, [pc, #28]	; (8001044 <HSb_ConvertValue+0x60>)
 8001028:	f7ff ff5c 	bl	8000ee4 <HSB_DebugPrint>
	return result;
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	ee07 3a90 	vmov	s15, r3
}
 8001032:	eeb0 0a67 	vmov.f32	s0, s15
 8001036:	3718      	adds	r7, #24
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	3a533333 	.word	0x3a533333
 8001040:	41aded09 	.word	0x41aded09
 8001044:	0800ab8c 	.word	0x0800ab8c

08001048 <HSB_VoltageModule>:

void HSB_VoltageModule(float* E, float* F){
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
	HSB_DebugPrint("\n\rstart voltage\n\r");
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <HSB_VoltageModule+0x38>)
 8001054:	f7ff ff46 	bl	8000ee4 <HSB_DebugPrint>
	*E = HSb_ConvertValue(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f7ff ffc3 	bl	8000fe4 <HSb_ConvertValue>
 800105e:	eef0 7a40 	vmov.f32	s15, s0
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	edc3 7a00 	vstr	s15, [r3]
	*F = HSb_ConvertValue(2);
 8001068:	2002      	movs	r0, #2
 800106a:	f7ff ffbb 	bl	8000fe4 <HSb_ConvertValue>
 800106e:	eef0 7a40 	vmov.f32	s15, s0
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	edc3 7a00 	vstr	s15, [r3]
}
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	0800abac 	.word	0x0800abac

08001084 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b086      	sub	sp, #24
 8001088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800108a:	463b      	mov	r3, r7
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]
 8001098:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800109a:	4b30      	ldr	r3, [pc, #192]	; (800115c <MX_ADC1_Init+0xd8>)
 800109c:	4a30      	ldr	r2, [pc, #192]	; (8001160 <MX_ADC1_Init+0xdc>)
 800109e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010a0:	4b2e      	ldr	r3, [pc, #184]	; (800115c <MX_ADC1_Init+0xd8>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010a6:	4b2d      	ldr	r3, [pc, #180]	; (800115c <MX_ADC1_Init+0xd8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ac:	4b2b      	ldr	r3, [pc, #172]	; (800115c <MX_ADC1_Init+0xd8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010b2:	4b2a      	ldr	r3, [pc, #168]	; (800115c <MX_ADC1_Init+0xd8>)
 80010b4:	2201      	movs	r2, #1
 80010b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010b8:	4b28      	ldr	r3, [pc, #160]	; (800115c <MX_ADC1_Init+0xd8>)
 80010ba:	2204      	movs	r2, #4
 80010bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010be:	4b27      	ldr	r3, [pc, #156]	; (800115c <MX_ADC1_Init+0xd8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010c4:	4b25      	ldr	r3, [pc, #148]	; (800115c <MX_ADC1_Init+0xd8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80010ca:	4b24      	ldr	r3, [pc, #144]	; (800115c <MX_ADC1_Init+0xd8>)
 80010cc:	2202      	movs	r2, #2
 80010ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010d0:	4b22      	ldr	r3, [pc, #136]	; (800115c <MX_ADC1_Init+0xd8>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b20      	ldr	r3, [pc, #128]	; (800115c <MX_ADC1_Init+0xd8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010de:	4b1f      	ldr	r3, [pc, #124]	; (800115c <MX_ADC1_Init+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010e4:	4b1d      	ldr	r3, [pc, #116]	; (800115c <MX_ADC1_Init+0xd8>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_ADC1_Init+0xd8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_ADC1_Init+0xd8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010fa:	4818      	ldr	r0, [pc, #96]	; (800115c <MX_ADC1_Init+0xd8>)
 80010fc:	f001 f8c0 	bl	8002280 <HAL_ADC_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001106:	f000 fb6d 	bl	80017e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800110a:	4b16      	ldr	r3, [pc, #88]	; (8001164 <MX_ADC1_Init+0xe0>)
 800110c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800110e:	2306      	movs	r3, #6
 8001110:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001112:	2307      	movs	r3, #7
 8001114:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001116:	237f      	movs	r3, #127	; 0x7f
 8001118:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800111a:	2304      	movs	r3, #4
 800111c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001122:	463b      	mov	r3, r7
 8001124:	4619      	mov	r1, r3
 8001126:	480d      	ldr	r0, [pc, #52]	; (800115c <MX_ADC1_Init+0xd8>)
 8001128:	f001 fbb4 	bl	8002894 <HAL_ADC_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8001132:	f000 fb57 	bl	80017e4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001136:	4b0c      	ldr	r3, [pc, #48]	; (8001168 <MX_ADC1_Init+0xe4>)
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800113a:	230c      	movs	r3, #12
 800113c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113e:	463b      	mov	r3, r7
 8001140:	4619      	mov	r1, r3
 8001142:	4806      	ldr	r0, [pc, #24]	; (800115c <MX_ADC1_Init+0xd8>)
 8001144:	f001 fba6 	bl	8002894 <HAL_ADC_ConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800114e:	f000 fb49 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001152:	bf00      	nop
 8001154:	3718      	adds	r7, #24
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	2000020c 	.word	0x2000020c
 8001160:	50040000 	.word	0x50040000
 8001164:	14f00020 	.word	0x14f00020
 8001168:	19200040 	.word	0x19200040

0800116c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b09e      	sub	sp, #120	; 0x78
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001174:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
 8001182:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001184:	f107 0310 	add.w	r3, r7, #16
 8001188:	2254      	movs	r2, #84	; 0x54
 800118a:	2100      	movs	r1, #0
 800118c:	4618      	mov	r0, r3
 800118e:	f007 fbe8 	bl	8008962 <memset>
  if(adcHandle->Instance==ADC1)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4a3f      	ldr	r2, [pc, #252]	; (8001294 <HAL_ADC_MspInit+0x128>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d176      	bne.n	800128a <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800119c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011a0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80011a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80011a6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80011a8:	2301      	movs	r3, #1
 80011aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80011ac:	2301      	movs	r3, #1
 80011ae:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80011b0:	2310      	movs	r3, #16
 80011b2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80011b4:	2307      	movs	r3, #7
 80011b6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80011b8:	2302      	movs	r3, #2
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80011bc:	2302      	movs	r3, #2
 80011be:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80011c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80011c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011c6:	f107 0310 	add.w	r3, r7, #16
 80011ca:	4618      	mov	r0, r3
 80011cc:	f004 ff06 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80011d6:	f000 fb05 	bl	80017e4 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80011da:	4b2f      	ldr	r3, [pc, #188]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a2e      	ldr	r2, [pc, #184]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 80011e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b2c      	ldr	r3, [pc, #176]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f2:	4b29      	ldr	r3, [pc, #164]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	4a28      	ldr	r2, [pc, #160]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 80011f8:	f043 0301 	orr.w	r3, r3, #1
 80011fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011fe:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_ADC_MspInit+0x12c>)
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f003 0301 	and.w	r3, r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 800120a:	2303      	movs	r3, #3
 800120c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800120e:	230b      	movs	r3, #11
 8001210:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001212:	2300      	movs	r3, #0
 8001214:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001220:	f002 fb54 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001226:	4a1e      	ldr	r2, [pc, #120]	; (80012a0 <HAL_ADC_MspInit+0x134>)
 8001228:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 800122a:	4b1c      	ldr	r3, [pc, #112]	; (800129c <HAL_ADC_MspInit+0x130>)
 800122c:	2200      	movs	r2, #0
 800122e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001236:	4b19      	ldr	r3, [pc, #100]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001238:	2200      	movs	r2, #0
 800123a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800123c:	4b17      	ldr	r3, [pc, #92]	; (800129c <HAL_ADC_MspInit+0x130>)
 800123e:	2280      	movs	r2, #128	; 0x80
 8001240:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001244:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001248:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800124a:	4b14      	ldr	r3, [pc, #80]	; (800129c <HAL_ADC_MspInit+0x130>)
 800124c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001250:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001254:	2220      	movs	r2, #32
 8001256:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001258:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_ADC_MspInit+0x130>)
 800125a:	2200      	movs	r2, #0
 800125c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800125e:	480f      	ldr	r0, [pc, #60]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001260:	f002 f97e 	bl	8003560 <HAL_DMA_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 800126a:	f000 fabb 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4a0a      	ldr	r2, [pc, #40]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001272:	64da      	str	r2, [r3, #76]	; 0x4c
 8001274:	4a09      	ldr	r2, [pc, #36]	; (800129c <HAL_ADC_MspInit+0x130>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 800127a:	2200      	movs	r2, #0
 800127c:	2101      	movs	r1, #1
 800127e:	2012      	movs	r0, #18
 8001280:	f002 f937 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001284:	2012      	movs	r0, #18
 8001286:	f002 f950 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800128a:	bf00      	nop
 800128c:	3778      	adds	r7, #120	; 0x78
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	50040000 	.word	0x50040000
 8001298:	40021000 	.word	0x40021000
 800129c:	20000270 	.word	0x20000270
 80012a0:	40020008 	.word	0x40020008

080012a4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80012a8:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <MX_CAN1_Init+0x74>)
 80012aa:	4a1c      	ldr	r2, [pc, #112]	; (800131c <MX_CAN1_Init+0x78>)
 80012ac:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80012ae:	4b1a      	ldr	r3, [pc, #104]	; (8001318 <MX_CAN1_Init+0x74>)
 80012b0:	2208      	movs	r2, #8
 80012b2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80012b4:	4b18      	ldr	r3, [pc, #96]	; (8001318 <MX_CAN1_Init+0x74>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80012ba:	4b17      	ldr	r3, [pc, #92]	; (8001318 <MX_CAN1_Init+0x74>)
 80012bc:	2200      	movs	r2, #0
 80012be:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80012c0:	4b15      	ldr	r3, [pc, #84]	; (8001318 <MX_CAN1_Init+0x74>)
 80012c2:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80012c6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80012c8:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_CAN1_Init+0x74>)
 80012ca:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80012ce:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_CAN1_Init+0x74>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_CAN1_Init+0x74>)
 80012d8:	2200      	movs	r2, #0
 80012da:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012dc:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_CAN1_Init+0x74>)
 80012de:	2200      	movs	r2, #0
 80012e0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012e2:	4b0d      	ldr	r3, [pc, #52]	; (8001318 <MX_CAN1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012e8:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_CAN1_Init+0x74>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012ee:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <MX_CAN1_Init+0x74>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012f4:	4808      	ldr	r0, [pc, #32]	; (8001318 <MX_CAN1_Init+0x74>)
 80012f6:	f001 fee1 	bl	80030bc <HAL_CAN_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001300:	f000 fa70 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001304:	4804      	ldr	r0, [pc, #16]	; (8001318 <MX_CAN1_Init+0x74>)
 8001306:	f001 ffd4 	bl	80032b2 <HAL_CAN_Start>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_CAN1_Init+0x70>
    	    Error_Handler();
 8001310:	f000 fa68 	bl	80017e4 <Error_Handler>
    	}
  /* USER CODE END CAN1_Init 2 */

}
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	200002b8 	.word	0x200002b8
 800131c:	40006400 	.word	0x40006400

08001320 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001328:	f107 0314 	add.w	r3, r7, #20
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a18      	ldr	r2, [pc, #96]	; (80013a0 <HAL_CAN_MspInit+0x80>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d129      	bne.n	8001396 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001342:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 8001348:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b15      	ldr	r3, [pc, #84]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	613b      	str	r3, [r7, #16]
 8001358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800135a:	4b12      	ldr	r3, [pc, #72]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 800135c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_CAN_MspInit+0x84>)
 8001368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8001372:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001376:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001384:	2309      	movs	r3, #9
 8001386:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	4619      	mov	r1, r3
 800138e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001392:	f002 fa9b 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8001396:	bf00      	nop
 8001398:	3728      	adds	r7, #40	; 0x28
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40006400 	.word	0x40006400
 80013a4:	40021000 	.word	0x40021000

080013a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013ae:	4b14      	ldr	r3, [pc, #80]	; (8001400 <MX_DMA_Init+0x58>)
 80013b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <MX_DMA_Init+0x58>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6493      	str	r3, [r2, #72]	; 0x48
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <MX_DMA_Init+0x58>)
 80013bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2100      	movs	r1, #0
 80013ca:	200b      	movs	r0, #11
 80013cc:	f002 f891 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80013d0:	200b      	movs	r0, #11
 80013d2:	f002 f8aa 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2100      	movs	r1, #0
 80013da:	2010      	movs	r0, #16
 80013dc:	f002 f889 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80013e0:	2010      	movs	r0, #16
 80013e2:	f002 f8a2 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2011      	movs	r0, #17
 80013ec:	f002 f881 	bl	80034f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80013f0:	2011      	movs	r0, #17
 80013f2:	f002 f89a 	bl	800352a <HAL_NVIC_EnableIRQ>

}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000

08001404 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_GPIO_Init+0xa8>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	4a23      	ldr	r2, [pc, #140]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	4a1d      	ldr	r2, [pc, #116]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143e:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_GPIO_Init+0xa8>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	4a17      	ldr	r2, [pc, #92]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001450:	f043 0302 	orr.w	r3, r3, #2
 8001454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_GPIO_Init+0xa8>)
 8001458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	603b      	str	r3, [r7, #0]
 8001460:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001462:	2200      	movs	r2, #0
 8001464:	2108      	movs	r1, #8
 8001466:	4812      	ldr	r0, [pc, #72]	; (80014b0 <MX_GPIO_Init+0xac>)
 8001468:	f002 fb9a 	bl	8003ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 800146c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800147a:	f107 030c 	add.w	r3, r7, #12
 800147e:	4619      	mov	r1, r3
 8001480:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001484:	f002 fa22 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001488:	2308      	movs	r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4804      	ldr	r0, [pc, #16]	; (80014b0 <MX_GPIO_Init+0xac>)
 80014a0:	f002 fa14 	bl	80038cc <HAL_GPIO_Init>

}
 80014a4:	bf00      	nop
 80014a6:	3720      	adds	r7, #32
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000400 	.word	0x48000400

080014b4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b8:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ba:	4a1c      	ldr	r2, [pc, #112]	; (800152c <MX_I2C1_Init+0x78>)
 80014bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80014be:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c0:	4a1b      	ldr	r2, [pc, #108]	; (8001530 <MX_I2C1_Init+0x7c>)
 80014c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014c4:	4b18      	ldr	r3, [pc, #96]	; (8001528 <MX_I2C1_Init+0x74>)
 80014c6:	2200      	movs	r2, #0
 80014c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ca:	4b17      	ldr	r3, [pc, #92]	; (8001528 <MX_I2C1_Init+0x74>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014d0:	4b15      	ldr	r3, [pc, #84]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d6:	4b14      	ldr	r3, [pc, #80]	; (8001528 <MX_I2C1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e8:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014ee:	480e      	ldr	r0, [pc, #56]	; (8001528 <MX_I2C1_Init+0x74>)
 80014f0:	f002 fb6e 	bl	8003bd0 <HAL_I2C_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80014fa:	f000 f973 	bl	80017e4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014fe:	2100      	movs	r1, #0
 8001500:	4809      	ldr	r0, [pc, #36]	; (8001528 <MX_I2C1_Init+0x74>)
 8001502:	f003 fe27 	bl	8005154 <HAL_I2CEx_ConfigAnalogFilter>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800150c:	f000 f96a 	bl	80017e4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001510:	2100      	movs	r1, #0
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_I2C1_Init+0x74>)
 8001514:	f003 fe69 	bl	80051ea <HAL_I2CEx_ConfigDigitalFilter>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800151e:	f000 f961 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	200002e0 	.word	0x200002e0
 800152c:	40005400 	.word	0x40005400
 8001530:	00707cbb 	.word	0x00707cbb

08001534 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b09e      	sub	sp, #120	; 0x78
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	2254      	movs	r2, #84	; 0x54
 8001552:	2100      	movs	r1, #0
 8001554:	4618      	mov	r0, r3
 8001556:	f007 fa04 	bl	8008962 <memset>
  if(i2cHandle->Instance==I2C1)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a50      	ldr	r2, [pc, #320]	; (80016a0 <HAL_I2C_MspInit+0x16c>)
 8001560:	4293      	cmp	r3, r2
 8001562:	f040 8098 	bne.w	8001696 <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001566:	2340      	movs	r3, #64	; 0x40
 8001568:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800156a:	2300      	movs	r3, #0
 800156c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800156e:	f107 0310 	add.w	r3, r7, #16
 8001572:	4618      	mov	r0, r3
 8001574:	f004 fd32 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 800157e:	f000 f931 	bl	80017e4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001582:	4b48      	ldr	r3, [pc, #288]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 8001584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001586:	4a47      	ldr	r2, [pc, #284]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 8001588:	f043 0302 	orr.w	r3, r3, #2
 800158c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800158e:	4b45      	ldr	r3, [pc, #276]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 8001590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 800159a:	23c0      	movs	r3, #192	; 0xc0
 800159c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800159e:	2312      	movs	r3, #18
 80015a0:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a6:	2303      	movs	r3, #3
 80015a8:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80015aa:	2304      	movs	r3, #4
 80015ac:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015ae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015b2:	4619      	mov	r1, r3
 80015b4:	483c      	ldr	r0, [pc, #240]	; (80016a8 <HAL_I2C_MspInit+0x174>)
 80015b6:	f002 f989 	bl	80038cc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a39      	ldr	r2, [pc, #228]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 80015c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_I2C_MspInit+0x170>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80015d2:	4b36      	ldr	r3, [pc, #216]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015d4:	4a36      	ldr	r2, [pc, #216]	; (80016b0 <HAL_I2C_MspInit+0x17c>)
 80015d6:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 80015d8:	4b34      	ldr	r3, [pc, #208]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015da:	2203      	movs	r2, #3
 80015dc:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015e4:	4b31      	ldr	r3, [pc, #196]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80015ea:	4b30      	ldr	r3, [pc, #192]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015ec:	2280      	movs	r2, #128	; 0x80
 80015ee:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015f0:	4b2e      	ldr	r3, [pc, #184]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015f6:	4b2d      	ldr	r3, [pc, #180]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80015fc:	4b2b      	ldr	r3, [pc, #172]	; (80016ac <HAL_I2C_MspInit+0x178>)
 80015fe:	2200      	movs	r2, #0
 8001600:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001602:	4b2a      	ldr	r3, [pc, #168]	; (80016ac <HAL_I2C_MspInit+0x178>)
 8001604:	2200      	movs	r2, #0
 8001606:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001608:	4828      	ldr	r0, [pc, #160]	; (80016ac <HAL_I2C_MspInit+0x178>)
 800160a:	f001 ffa9 	bl	8003560 <HAL_DMA_Init>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001614:	f000 f8e6 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_I2C_MspInit+0x178>)
 800161c:	63da      	str	r2, [r3, #60]	; 0x3c
 800161e:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_I2C_MspInit+0x178>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001624:	4b23      	ldr	r3, [pc, #140]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001626:	4a24      	ldr	r2, [pc, #144]	; (80016b8 <HAL_I2C_MspInit+0x184>)
 8001628:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 800162a:	4b22      	ldr	r3, [pc, #136]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 800162c:	2203      	movs	r2, #3
 800162e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001632:	2210      	movs	r2, #16
 8001634:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001636:	4b1f      	ldr	r3, [pc, #124]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001638:	2200      	movs	r2, #0
 800163a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 800163e:	2280      	movs	r2, #128	; 0x80
 8001640:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001650:	2200      	movs	r2, #0
 8001652:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001654:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001656:	2200      	movs	r2, #0
 8001658:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800165a:	4816      	ldr	r0, [pc, #88]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 800165c:	f001 ff80 	bl	8003560 <HAL_DMA_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001666:	f000 f8bd 	bl	80017e4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a11      	ldr	r2, [pc, #68]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 800166e:	639a      	str	r2, [r3, #56]	; 0x38
 8001670:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_I2C_MspInit+0x180>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2100      	movs	r1, #0
 800167a:	201f      	movs	r0, #31
 800167c:	f001 ff39 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001680:	201f      	movs	r0, #31
 8001682:	f001 ff52 	bl	800352a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2020      	movs	r0, #32
 800168c:	f001 ff31 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001690:	2020      	movs	r0, #32
 8001692:	f001 ff4a 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001696:	bf00      	nop
 8001698:	3778      	adds	r7, #120	; 0x78
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40005400 	.word	0x40005400
 80016a4:	40021000 	.word	0x40021000
 80016a8:	48000400 	.word	0x48000400
 80016ac:	20000334 	.word	0x20000334
 80016b0:	40020080 	.word	0x40020080
 80016b4:	2000037c 	.word	0x2000037c
 80016b8:	4002006c 	.word	0x4002006c

080016bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f000 fb93 	bl	8001dea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 f822 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f7ff fe9c 	bl	8001404 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f7ff fe6c 	bl	80013a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 fac8 	bl	8001c64 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80016d4:	f7ff fcd6 	bl	8001084 <MX_ADC1_Init>
  MX_I2C1_Init();
 80016d8:	f7ff feec 	bl	80014b4 <MX_I2C1_Init>
  MX_CAN1_Init();
 80016dc:	f7ff fde2 	bl	80012a4 <MX_CAN1_Init>
  MX_TIM2_Init();
 80016e0:	f000 f9f2 	bl	8001ac8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fbed 	bl	8000ec4 <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 80016ea:	2068      	movs	r0, #104	; 0x68
 80016ec:	f7ff fc1c 	bl	8000f28 <HSB_VoltageModule_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	  HSB_CurrentModule(&CurrentE, &CurrentF);
	  HSB_VoltageModule(&VoltageE, &VoltageF);
 80016f0:	4904      	ldr	r1, [pc, #16]	; (8001704 <main+0x48>)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <main+0x4c>)
 80016f4:	f7ff fca8 	bl	8001048 <HSB_VoltageModule>
	  HAL_Delay(1000);
 80016f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016fc:	f000 fbea 	bl	8001ed4 <HAL_Delay>
	  HSB_VoltageModule(&VoltageE, &VoltageF);
 8001700:	e7f6      	b.n	80016f0 <main+0x34>
 8001702:	bf00      	nop
 8001704:	200003c8 	.word	0x200003c8
 8001708:	200003c4 	.word	0x200003c4

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b096      	sub	sp, #88	; 0x58
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0314 	add.w	r3, r7, #20
 8001716:	2244      	movs	r2, #68	; 0x44
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f007 f921 	bl	8008962 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	463b      	mov	r3, r7
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]
 8001726:	605a      	str	r2, [r3, #4]
 8001728:	609a      	str	r2, [r3, #8]
 800172a:	60da      	str	r2, [r3, #12]
 800172c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800172e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001732:	f003 fdc5 	bl	80052c0 <HAL_PWREx_ControlVoltageScaling>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800173c:	f000 f852 	bl	80017e4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001740:	f003 fda0 	bl	8005284 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001744:	4b21      	ldr	r3, [pc, #132]	; (80017cc <SystemClock_Config+0xc0>)
 8001746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800174a:	4a20      	ldr	r2, [pc, #128]	; (80017cc <SystemClock_Config+0xc0>)
 800174c:	f023 0318 	bic.w	r3, r3, #24
 8001750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001754:	2314      	movs	r3, #20
 8001756:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001758:	2301      	movs	r3, #1
 800175a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800175c:	2301      	movs	r3, #1
 800175e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001760:	2300      	movs	r3, #0
 8001762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001764:	2360      	movs	r3, #96	; 0x60
 8001766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001768:	2302      	movs	r3, #2
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800176c:	2301      	movs	r3, #1
 800176e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001770:	2301      	movs	r3, #1
 8001772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001774:	2310      	movs	r3, #16
 8001776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001778:	2307      	movs	r3, #7
 800177a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800177c:	2302      	movs	r3, #2
 800177e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001780:	2302      	movs	r3, #2
 8001782:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4618      	mov	r0, r3
 800178a:	f003 fdef 	bl	800536c <HAL_RCC_OscConfig>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001794:	f000 f826 	bl	80017e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001798:	230f      	movs	r3, #15
 800179a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179c:	2303      	movs	r3, #3
 800179e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017a4:	2300      	movs	r3, #0
 80017a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017a8:	2300      	movs	r3, #0
 80017aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80017ac:	463b      	mov	r3, r7
 80017ae:	2101      	movs	r1, #1
 80017b0:	4618      	mov	r0, r3
 80017b2:	f004 f9ef 	bl	8005b94 <HAL_RCC_ClockConfig>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80017bc:	f000 f812 	bl	80017e4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80017c0:	f004 fe02 	bl	80063c8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80017c4:	bf00      	nop
 80017c6:	3758      	adds	r7, #88	; 0x58
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000

080017d0 <HAL_TIM_PeriodElapsedCallback>:
	  Error_Handler ();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	//function to run on interval interupt
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr

080017e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017e8:	b672      	cpsid	i
}
 80017ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017ec:	e7fe      	b.n	80017ec <Error_Handler+0x8>
	...

080017f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f6:	4b0f      	ldr	r3, [pc, #60]	; (8001834 <HAL_MspInit+0x44>)
 80017f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017fa:	4a0e      	ldr	r2, [pc, #56]	; (8001834 <HAL_MspInit+0x44>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6613      	str	r3, [r2, #96]	; 0x60
 8001802:	4b0c      	ldr	r3, [pc, #48]	; (8001834 <HAL_MspInit+0x44>)
 8001804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	607b      	str	r3, [r7, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800180e:	4b09      	ldr	r3, [pc, #36]	; (8001834 <HAL_MspInit+0x44>)
 8001810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001812:	4a08      	ldr	r2, [pc, #32]	; (8001834 <HAL_MspInit+0x44>)
 8001814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001818:	6593      	str	r3, [r2, #88]	; 0x58
 800181a:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_MspInit+0x44>)
 800181c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800181e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001822:	603b      	str	r3, [r7, #0]
 8001824:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	40021000 	.word	0x40021000

08001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800183c:	e7fe      	b.n	800183c <NMI_Handler+0x4>

0800183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001842:	e7fe      	b.n	8001842 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	e7fe      	b.n	8001848 <MemManage_Handler+0x4>

0800184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184a:	b480      	push	{r7}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800184e:	e7fe      	b.n	800184e <BusFault_Handler+0x4>

08001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001854:	e7fe      	b.n	8001854 <UsageFault_Handler+0x4>

08001856 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001884:	f000 fb06 	bl	8001e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001888:	bf00      	nop
 800188a:	bd80      	pop	{r7, pc}

0800188c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001890:	4802      	ldr	r0, [pc, #8]	; (800189c <DMA1_Channel1_IRQHandler+0x10>)
 8001892:	f001 ff5e 	bl	8003752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000270 	.word	0x20000270

080018a0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80018a4:	4802      	ldr	r0, [pc, #8]	; (80018b0 <DMA1_Channel6_IRQHandler+0x10>)
 80018a6:	f001 ff54 	bl	8003752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	2000037c 	.word	0x2000037c

080018b4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80018b8:	4802      	ldr	r0, [pc, #8]	; (80018c4 <DMA1_Channel7_IRQHandler+0x10>)
 80018ba:	f001 ff4a 	bl	8003752 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	20000334 	.word	0x20000334

080018c8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <ADC1_IRQHandler+0x10>)
 80018ce:	f000 fe19 	bl	8002504 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000020c 	.word	0x2000020c

080018dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <TIM2_IRQHandler+0x10>)
 80018e2:	f004 ff2b 	bl	800673c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	200003d0 	.word	0x200003d0

080018f0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80018f4:	4802      	ldr	r0, [pc, #8]	; (8001900 <I2C1_EV_IRQHandler+0x10>)
 80018f6:	f002 fc15 	bl	8004124 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	200002e0 	.word	0x200002e0

08001904 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001908:	4802      	ldr	r0, [pc, #8]	; (8001914 <I2C1_ER_IRQHandler+0x10>)
 800190a:	f002 fc25 	bl	8004158 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	200002e0 	.word	0x200002e0

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001932:	f007 f869 	bl	8008a08 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
  return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800195a:	e7fe      	b.n	800195a <_exit+0x12>

0800195c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b086      	sub	sp, #24
 8001960:	af00      	add	r7, sp, #0
 8001962:	60f8      	str	r0, [r7, #12]
 8001964:	60b9      	str	r1, [r7, #8]
 8001966:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	e00a      	b.n	8001984 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800196e:	f3af 8000 	nop.w
 8001972:	4601      	mov	r1, r0
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	1c5a      	adds	r2, r3, #1
 8001978:	60ba      	str	r2, [r7, #8]
 800197a:	b2ca      	uxtb	r2, r1
 800197c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	3301      	adds	r3, #1
 8001982:	617b      	str	r3, [r7, #20]
 8001984:	697a      	ldr	r2, [r7, #20]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	429a      	cmp	r2, r3
 800198a:	dbf0      	blt.n	800196e <_read+0x12>
  }

  return len;
 800198c:	687b      	ldr	r3, [r7, #4]
}
 800198e:	4618      	mov	r0, r3
 8001990:	3718      	adds	r7, #24
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	b086      	sub	sp, #24
 800199a:	af00      	add	r7, sp, #0
 800199c:	60f8      	str	r0, [r7, #12]
 800199e:	60b9      	str	r1, [r7, #8]
 80019a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]
 80019a6:	e009      	b.n	80019bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	1c5a      	adds	r2, r3, #1
 80019ac:	60ba      	str	r2, [r7, #8]
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	3301      	adds	r3, #1
 80019ba:	617b      	str	r3, [r7, #20]
 80019bc:	697a      	ldr	r2, [r7, #20]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbf1      	blt.n	80019a8 <_write+0x12>
  }
  return len;
 80019c4:	687b      	ldr	r3, [r7, #4]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3718      	adds	r7, #24
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <_close>:

int _close(int file)
{
 80019ce:	b480      	push	{r7}
 80019d0:	b083      	sub	sp, #12
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019da:	4618      	mov	r0, r3
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e6:	b480      	push	{r7}
 80019e8:	b083      	sub	sp, #12
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019f6:	605a      	str	r2, [r3, #4]
  return 0;
 80019f8:	2300      	movs	r3, #0
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <_isatty>:

int _isatty(int file)
{
 8001a06:	b480      	push	{r7}
 8001a08:	b083      	sub	sp, #12
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a0e:	2301      	movs	r3, #1
}
 8001a10:	4618      	mov	r0, r3
 8001a12:	370c      	adds	r7, #12
 8001a14:	46bd      	mov	sp, r7
 8001a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1a:	4770      	bx	lr

08001a1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b085      	sub	sp, #20
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a28:	2300      	movs	r3, #0
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
	...

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	; (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	; (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	; (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	; (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	; (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	; (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f006 ffce 	bl	8008a08 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20010000 	.word	0x20010000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	200003cc 	.word	0x200003cc
 8001aa0:	200005f8 	.word	0x200005f8

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	; (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08e      	sub	sp, #56	; 0x38
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	601a      	str	r2, [r3, #0]
 8001ad6:	605a      	str	r2, [r3, #4]
 8001ad8:	609a      	str	r2, [r3, #8]
 8001ada:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001adc:	f107 031c 	add.w	r3, r7, #28
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ae8:	463b      	mov	r3, r7
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
 8001aee:	605a      	str	r2, [r3, #4]
 8001af0:	609a      	str	r2, [r3, #8]
 8001af2:	60da      	str	r2, [r3, #12]
 8001af4:	611a      	str	r2, [r3, #16]
 8001af6:	615a      	str	r2, [r3, #20]
 8001af8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001afa:	4b2d      	ldr	r3, [pc, #180]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001afc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b04:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8001b08:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	4b29      	ldr	r3, [pc, #164]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001b10:	4b27      	ldr	r3, [pc, #156]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b12:	220a      	movs	r2, #10
 8001b14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b16:	4b26      	ldr	r3, [pc, #152]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b22:	4823      	ldr	r0, [pc, #140]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b24:	f004 fd52 	bl	80065cc <HAL_TIM_Base_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001b2e:	f7ff fe59 	bl	80017e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b36:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b38:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	481c      	ldr	r0, [pc, #112]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b40:	f004 ff78 	bl	8006a34 <HAL_TIM_ConfigClockSource>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001b4a:	f7ff fe4b 	bl	80017e4 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001b4e:	4818      	ldr	r0, [pc, #96]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b50:	f004 fd93 	bl	800667a <HAL_TIM_OC_Init>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001b5a:	f7ff fe43 	bl	80017e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b66:	f107 031c 	add.w	r3, r7, #28
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4810      	ldr	r0, [pc, #64]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b6e:	f005 fbcf 	bl	8007310 <HAL_TIMEx_MasterConfigSynchronization>
 8001b72:	4603      	mov	r3, r0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d001      	beq.n	8001b7c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001b78:	f7ff fe34 	bl	80017e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001b7c:	2350      	movs	r3, #80	; 0x50
 8001b7e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b84:	2300      	movs	r3, #0
 8001b86:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b8c:	463b      	mov	r3, r7
 8001b8e:	2200      	movs	r2, #0
 8001b90:	4619      	mov	r1, r3
 8001b92:	4807      	ldr	r0, [pc, #28]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001b94:	f004 fed4 	bl	8006940 <HAL_TIM_OC_ConfigChannel>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001b9e:	f7ff fe21 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001ba2:	4803      	ldr	r0, [pc, #12]	; (8001bb0 <MX_TIM2_Init+0xe8>)
 8001ba4:	f000 f82a 	bl	8001bfc <HAL_TIM_MspPostInit>

}
 8001ba8:	bf00      	nop
 8001baa:	3738      	adds	r7, #56	; 0x38
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200003d0 	.word	0x200003d0

08001bb4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bc4:	d113      	bne.n	8001bee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bc6:	4b0c      	ldr	r3, [pc, #48]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	4a0b      	ldr	r2, [pc, #44]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8001bd2:	4b09      	ldr	r3, [pc, #36]	; (8001bf8 <HAL_TIM_Base_MspInit+0x44>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001bde:	2200      	movs	r2, #0
 8001be0:	2100      	movs	r1, #0
 8001be2:	201c      	movs	r0, #28
 8001be4:	f001 fc85 	bl	80034f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001be8:	201c      	movs	r0, #28
 8001bea:	f001 fc9e 	bl	800352a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001bee:	bf00      	nop
 8001bf0:	3710      	adds	r7, #16
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40021000 	.word	0x40021000

08001bfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c04:	f107 030c 	add.w	r3, r7, #12
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
 8001c0c:	605a      	str	r2, [r3, #4]
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	60da      	str	r2, [r3, #12]
 8001c12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1c:	d11c      	bne.n	8001c58 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <HAL_TIM_MspPostInit+0x64>)
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	4a0f      	ldr	r2, [pc, #60]	; (8001c60 <HAL_TIM_MspPostInit+0x64>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001c2a:	4b0d      	ldr	r3, [pc, #52]	; (8001c60 <HAL_TIM_MspPostInit+0x64>)
 8001c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
 8001c34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 8001c36:	2320      	movs	r3, #32
 8001c38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c46:	2301      	movs	r3, #1
 8001c48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 030c 	add.w	r3, r7, #12
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c54:	f001 fe3a 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c58:	bf00      	nop
 8001c5a:	3720      	adds	r7, #32
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40021000 	.word	0x40021000

08001c64 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c6a:	4a15      	ldr	r2, [pc, #84]	; (8001cc0 <MX_USART2_UART_Init+0x5c>)
 8001c6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001c6e:	4b13      	ldr	r3, [pc, #76]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c76:	4b11      	ldr	r3, [pc, #68]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c88:	4b0c      	ldr	r3, [pc, #48]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c8a:	220c      	movs	r2, #12
 8001c8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c94:	4b09      	ldr	r3, [pc, #36]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c9a:	4b08      	ldr	r3, [pc, #32]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ca6:	4805      	ldr	r0, [pc, #20]	; (8001cbc <MX_USART2_UART_Init+0x58>)
 8001ca8:	f005 fbb6 	bl	8007418 <HAL_UART_Init>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001cb2:	f7ff fd97 	bl	80017e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	2000041c 	.word	0x2000041c
 8001cc0:	40004400 	.word	0x40004400

08001cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b09e      	sub	sp, #120	; 0x78
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001cdc:	f107 0310 	add.w	r3, r7, #16
 8001ce0:	2254      	movs	r2, #84	; 0x54
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f006 fe3c 	bl	8008962 <memset>
  if(uartHandle->Instance==USART2)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a28      	ldr	r2, [pc, #160]	; (8001d90 <HAL_UART_MspInit+0xcc>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d148      	bne.n	8001d86 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001cfc:	f107 0310 	add.w	r3, r7, #16
 8001d00:	4618      	mov	r0, r3
 8001d02:	f004 f96b 	bl	8005fdc <HAL_RCCEx_PeriphCLKConfig>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d001      	beq.n	8001d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001d0c:	f7ff fd6a 	bl	80017e4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d10:	4b20      	ldr	r3, [pc, #128]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	4a1f      	ldr	r2, [pc, #124]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8001d1c:	4b1d      	ldr	r3, [pc, #116]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d28:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d2e:	f043 0301 	orr.w	r3, r3, #1
 8001d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d34:	4b17      	ldr	r3, [pc, #92]	; (8001d94 <HAL_UART_MspInit+0xd0>)
 8001d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001d40:	2304      	movs	r3, #4
 8001d42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d44:	2302      	movs	r3, #2
 8001d46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d4c:	2303      	movs	r3, #3
 8001d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d50:	2307      	movs	r3, #7
 8001d52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d58:	4619      	mov	r1, r3
 8001d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d5e:	f001 fdb5 	bl	80038cc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d68:	2302      	movs	r3, #2
 8001d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d70:	2303      	movs	r3, #3
 8001d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001d74:	2303      	movs	r3, #3
 8001d76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d82:	f001 fda3 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001d86:	bf00      	nop
 8001d88:	3778      	adds	r7, #120	; 0x78
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40004400 	.word	0x40004400
 8001d94:	40021000 	.word	0x40021000

08001d98 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001dd0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001d9c:	f7ff fe82 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da0:	480c      	ldr	r0, [pc, #48]	; (8001dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001da2:	490d      	ldr	r1, [pc, #52]	; (8001dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <LoopForever+0xe>)
  movs r3, #0
 8001da6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da8:	e002      	b.n	8001db0 <LoopCopyDataInit>

08001daa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001daa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dae:	3304      	adds	r3, #4

08001db0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001db2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db4:	d3f9      	bcc.n	8001daa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001db8:	4c0a      	ldr	r4, [pc, #40]	; (8001de4 <LoopForever+0x16>)
  movs r3, #0
 8001dba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dbc:	e001      	b.n	8001dc2 <LoopFillZerobss>

08001dbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc0:	3204      	adds	r2, #4

08001dc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc4:	d3fb      	bcc.n	8001dbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dc6:	f006 fe25 	bl	8008a14 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dca:	f7ff fc77 	bl	80016bc <main>

08001dce <LoopForever>:

LoopForever:
    b LoopForever
 8001dce:	e7fe      	b.n	8001dce <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001dd0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001ddc:	0800af8c 	.word	0x0800af8c
  ldr r2, =_sbss
 8001de0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001de4:	200005f4 	.word	0x200005f4

08001de8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001de8:	e7fe      	b.n	8001de8 <CAN1_RX0_IRQHandler>

08001dea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001dea:	b580      	push	{r7, lr}
 8001dec:	b082      	sub	sp, #8
 8001dee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df0:	2300      	movs	r3, #0
 8001df2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001df4:	2003      	movs	r0, #3
 8001df6:	f001 fb71 	bl	80034dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	f000 f80e 	bl	8001e1c <HAL_InitTick>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	71fb      	strb	r3, [r7, #7]
 8001e0a:	e001      	b.n	8001e10 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e0c:	f7ff fcf0 	bl	80017f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e10:	79fb      	ldrb	r3, [r7, #7]
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b084      	sub	sp, #16
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <HAL_InitTick+0x6c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d023      	beq.n	8001e78 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001e30:	4b16      	ldr	r3, [pc, #88]	; (8001e8c <HAL_InitTick+0x70>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <HAL_InitTick+0x6c>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e46:	4618      	mov	r0, r3
 8001e48:	f001 fb7d 	bl	8003546 <HAL_SYSTICK_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10f      	bne.n	8001e72 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d809      	bhi.n	8001e6c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f001 fb47 	bl	80034f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001e64:	4a0a      	ldr	r2, [pc, #40]	; (8001e90 <HAL_InitTick+0x74>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e007      	b.n	8001e7c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	73fb      	strb	r3, [r7, #15]
 8001e70:	e004      	b.n	8001e7c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	73fb      	strb	r3, [r7, #15]
 8001e76:	e001      	b.n	8001e7c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000000c 	.word	0x2000000c
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	20000008 	.word	0x20000008

08001e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e94:	b480      	push	{r7}
 8001e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e98:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <HAL_IncTick+0x20>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	4b06      	ldr	r3, [pc, #24]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a04      	ldr	r2, [pc, #16]	; (8001eb8 <HAL_IncTick+0x24>)
 8001ea6:	6013      	str	r3, [r2, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr
 8001eb2:	bf00      	nop
 8001eb4:	2000000c 	.word	0x2000000c
 8001eb8:	200004a4 	.word	0x200004a4

08001ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec0:	4b03      	ldr	r3, [pc, #12]	; (8001ed0 <HAL_GetTick+0x14>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	200004a4 	.word	0x200004a4

08001ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b084      	sub	sp, #16
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001edc:	f7ff ffee 	bl	8001ebc <HAL_GetTick>
 8001ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eec:	d005      	beq.n	8001efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001eee:	4b0a      	ldr	r3, [pc, #40]	; (8001f18 <HAL_Delay+0x44>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001efa:	bf00      	nop
 8001efc:	f7ff ffde 	bl	8001ebc <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	68fa      	ldr	r2, [r7, #12]
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d8f7      	bhi.n	8001efc <HAL_Delay+0x28>
  {
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	bf00      	nop
 8001f10:	3710      	adds	r7, #16
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	2000000c 	.word	0x2000000c

08001f1c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	609a      	str	r2, [r3, #8]
}
 8001f36:	bf00      	nop
 8001f38:	370c      	adds	r7, #12
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr

08001f42 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f42:	b480      	push	{r7}
 8001f44:	b083      	sub	sp, #12
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	6078      	str	r0, [r7, #4]
 8001f4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	370c      	adds	r7, #12
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr

08001f84 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b087      	sub	sp, #28
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	3360      	adds	r3, #96	; 0x60
 8001f96:	461a      	mov	r2, r3
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <LL_ADC_SetOffset+0x44>)
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001fbc:	bf00      	nop
 8001fbe:	371c      	adds	r7, #28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	03fff000 	.word	0x03fff000

08001fcc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3360      	adds	r3, #96	; 0x60
 8001fda:	461a      	mov	r2, r3
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	4413      	add	r3, r2
 8001fe2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3714      	adds	r7, #20
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff6:	4770      	bx	lr

08001ff8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b087      	sub	sp, #28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	3360      	adds	r3, #96	; 0x60
 8002008:	461a      	mov	r2, r3
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002012:	697b      	ldr	r3, [r7, #20]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	431a      	orrs	r2, r3
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002022:	bf00      	nop
 8002024:	371c      	adds	r7, #28
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800202e:	b480      	push	{r7}
 8002030:	b083      	sub	sp, #12
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002054:	b480      	push	{r7}
 8002056:	b087      	sub	sp, #28
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	3330      	adds	r3, #48	; 0x30
 8002064:	461a      	mov	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	0a1b      	lsrs	r3, r3, #8
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	4413      	add	r3, r2
 8002072:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	f003 031f 	and.w	r3, r3, #31
 800207e:	211f      	movs	r1, #31
 8002080:	fa01 f303 	lsl.w	r3, r1, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	401a      	ands	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	0e9b      	lsrs	r3, r3, #26
 800208c:	f003 011f 	and.w	r1, r3, #31
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	f003 031f 	and.w	r3, r3, #31
 8002096:	fa01 f303 	lsl.w	r3, r1, r3
 800209a:	431a      	orrs	r2, r3
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80020a0:	bf00      	nop
 80020a2:	371c      	adds	r7, #28
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d101      	bne.n	80020c4 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80020c0:	2301      	movs	r3, #1
 80020c2:	e000      	b.n	80020c6 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	370c      	adds	r7, #12
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80020d2:	b480      	push	{r7}
 80020d4:	b087      	sub	sp, #28
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3314      	adds	r3, #20
 80020e2:	461a      	mov	r2, r3
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	0e5b      	lsrs	r3, r3, #25
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	4413      	add	r3, r2
 80020f0:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80020f2:	697b      	ldr	r3, [r7, #20]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	0d1b      	lsrs	r3, r3, #20
 80020fa:	f003 031f 	and.w	r3, r3, #31
 80020fe:	2107      	movs	r1, #7
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	43db      	mvns	r3, r3
 8002106:	401a      	ands	r2, r3
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	0d1b      	lsrs	r3, r3, #20
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	fa01 f303 	lsl.w	r3, r1, r3
 8002116:	431a      	orrs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800211c:	bf00      	nop
 800211e:	371c      	adds	r7, #28
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002140:	43db      	mvns	r3, r3
 8002142:	401a      	ands	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	f003 0318 	and.w	r3, r3, #24
 800214a:	4908      	ldr	r1, [pc, #32]	; (800216c <LL_ADC_SetChannelSingleDiff+0x44>)
 800214c:	40d9      	lsrs	r1, r3
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	400b      	ands	r3, r1
 8002152:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002156:	431a      	orrs	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	0007ffff 	.word	0x0007ffff

08002170 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002180:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6093      	str	r3, [r2, #8]
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a8:	d101      	bne.n	80021ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80021aa:	2301      	movs	r3, #1
 80021ac:	e000      	b.n	80021b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	370c      	adds	r7, #12
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80021cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021f8:	d101      	bne.n	80021fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80021fa:	2301      	movs	r3, #1
 80021fc:	e000      	b.n	8002200 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80021fe:	2300      	movs	r3, #0
}
 8002200:	4618      	mov	r0, r3
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220a:	4770      	bx	lr

0800220c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800220c:	b480      	push	{r7}
 800220e:	b083      	sub	sp, #12
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b01      	cmp	r3, #1
 800221e:	d101      	bne.n	8002224 <LL_ADC_IsEnabled+0x18>
 8002220:	2301      	movs	r3, #1
 8002222:	e000      	b.n	8002226 <LL_ADC_IsEnabled+0x1a>
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	370c      	adds	r7, #12
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002232:	b480      	push	{r7}
 8002234:	b083      	sub	sp, #12
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	2b04      	cmp	r3, #4
 8002244:	d101      	bne.n	800224a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr

08002258 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b08      	cmp	r3, #8
 800226a:	d101      	bne.n	8002270 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
	...

08002280 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b088      	sub	sp, #32
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 800228c:	2300      	movs	r3, #0
 800228e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	e126      	b.n	80024e8 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d109      	bne.n	80022bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7fe ff5f 	bl	800116c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4618      	mov	r0, r3
 80022c2:	f7ff ff67 	bl	8002194 <LL_ADC_IsDeepPowerDownEnabled>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d004      	beq.n	80022d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff4d 	bl	8002170 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f7ff ff82 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d115      	bne.n	8002312 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff ff66 	bl	80021bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022f0:	4b7f      	ldr	r3, [pc, #508]	; (80024f0 <HAL_ADC_Init+0x270>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	099b      	lsrs	r3, r3, #6
 80022f6:	4a7f      	ldr	r2, [pc, #508]	; (80024f4 <HAL_ADC_Init+0x274>)
 80022f8:	fba2 2303 	umull	r2, r3, r2, r3
 80022fc:	099b      	lsrs	r3, r3, #6
 80022fe:	3301      	adds	r3, #1
 8002300:	005b      	lsls	r3, r3, #1
 8002302:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002304:	e002      	b.n	800230c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	3b01      	subs	r3, #1
 800230a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1f9      	bne.n	8002306 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4618      	mov	r0, r3
 8002318:	f7ff ff64 	bl	80021e4 <LL_ADC_IsInternalRegulatorEnabled>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d10d      	bne.n	800233e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002326:	f043 0210 	orr.w	r2, r3, #16
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	f043 0201 	orr.w	r2, r3, #1
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff ff75 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002348:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800234e:	f003 0310 	and.w	r3, r3, #16
 8002352:	2b00      	cmp	r3, #0
 8002354:	f040 80bf 	bne.w	80024d6 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	f040 80bb 	bne.w	80024d6 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002364:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002368:	f043 0202 	orr.w	r2, r3, #2
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff ff49 	bl	800220c <LL_ADC_IsEnabled>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10b      	bne.n	8002398 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002380:	485d      	ldr	r0, [pc, #372]	; (80024f8 <HAL_ADC_Init+0x278>)
 8002382:	f7ff ff43 	bl	800220c <LL_ADC_IsEnabled>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4619      	mov	r1, r3
 8002392:	485a      	ldr	r0, [pc, #360]	; (80024fc <HAL_ADC_Init+0x27c>)
 8002394:	f7ff fdc2 	bl	8001f1c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	7e5b      	ldrb	r3, [r3, #25]
 800239c:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023a2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80023a8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80023ae:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d106      	bne.n	80023d4 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ca:	3b01      	subs	r3, #1
 80023cc:	045b      	lsls	r3, r3, #17
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4313      	orrs	r3, r2
 80023d2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d009      	beq.n	80023f0 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023e0:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68da      	ldr	r2, [r3, #12]
 80023f6:	4b42      	ldr	r3, [pc, #264]	; (8002500 <HAL_ADC_Init+0x280>)
 80023f8:	4013      	ands	r3, r2
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	69b9      	ldr	r1, [r7, #24]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff25 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 800240e:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d13d      	bne.n	8002492 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d13a      	bne.n	8002492 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002420:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002428:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	687a      	ldr	r2, [r7, #4]
 800243e:	6812      	ldr	r2, [r2, #0]
 8002440:	69b9      	ldr	r1, [r7, #24]
 8002442:	430b      	orrs	r3, r1
 8002444:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800244c:	2b01      	cmp	r3, #1
 800244e:	d118      	bne.n	8002482 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800245a:	f023 0304 	bic.w	r3, r3, #4
 800245e:	687a      	ldr	r2, [r7, #4]
 8002460:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002466:	4311      	orrs	r1, r2
 8002468:	687a      	ldr	r2, [r7, #4]
 800246a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800246c:	4311      	orrs	r1, r2
 800246e:	687a      	ldr	r2, [r7, #4]
 8002470:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002472:	430a      	orrs	r2, r1
 8002474:	431a      	orrs	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f042 0201 	orr.w	r2, r2, #1
 800247e:	611a      	str	r2, [r3, #16]
 8002480:	e007      	b.n	8002492 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	691a      	ldr	r2, [r3, #16]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d10c      	bne.n	80024b4 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a0:	f023 010f 	bic.w	r1, r3, #15
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69db      	ldr	r3, [r3, #28]
 80024a8:	1e5a      	subs	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
 80024b2:	e007      	b.n	80024c4 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f022 020f 	bic.w	r2, r2, #15
 80024c2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024c8:	f023 0303 	bic.w	r3, r3, #3
 80024cc:	f043 0201 	orr.w	r2, r3, #1
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
 80024d4:	e007      	b.n	80024e6 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3720      	adds	r7, #32
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000004 	.word	0x20000004
 80024f4:	053e2d63 	.word	0x053e2d63
 80024f8:	50040000 	.word	0x50040000
 80024fc:	50040300 	.word	0x50040300
 8002500:	fff0c007 	.word	0xfff0c007

08002504 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b088      	sub	sp, #32
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002520:	69bb      	ldr	r3, [r7, #24]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_ADC_IRQHandler+0x56>
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002544:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f000 fdab 	bl	80030a8 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_ADC_IRQHandler+0x6a>
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	d05e      	beq.n	8002636 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 0308 	and.w	r3, r3, #8
 800257e:	2b00      	cmp	r3, #0
 8002580:	d059      	beq.n	8002636 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	d105      	bne.n	800259a <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002592:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f7ff fd45 	bl	800202e <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a4:	4603      	mov	r3, r0
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d03e      	beq.n	8002628 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d135      	bne.n	8002628 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d12e      	bne.n	8002628 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7ff fe2f 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d11a      	bne.n	8002610 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 020c 	bic.w	r2, r2, #12
 80025e8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d112      	bne.n	8002628 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	f043 0201 	orr.w	r2, r3, #1
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	655a      	str	r2, [r3, #84]	; 0x54
 800260e:	e00b      	b.n	8002628 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002614:	f043 0210 	orr.w	r2, r3, #16
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7fe fc3b 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	220c      	movs	r2, #12
 8002634:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002636:	69bb      	ldr	r3, [r7, #24]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b00      	cmp	r3, #0
 800263e:	d004      	beq.n	800264a <HAL_ADC_IRQHandler+0x146>
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0320 	and.w	r3, r3, #32
 8002646:	2b00      	cmp	r3, #0
 8002648:	d109      	bne.n	800265e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002650:	2b00      	cmp	r3, #0
 8002652:	d072      	beq.n	800273a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265a:	2b00      	cmp	r3, #0
 800265c:	d06d      	beq.n	800273a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	2b00      	cmp	r3, #0
 8002668:	d105      	bne.n	8002676 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4618      	mov	r0, r3
 800267c:	f7ff fd16 	bl	80020ac <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002680:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fcd1 	bl	800202e <LL_ADC_REG_IsTriggerSourceSWStart>
 800268c:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d047      	beq.n	800272c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d007      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x1b2>
 80026a6:	68bb      	ldr	r3, [r7, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d03f      	beq.n	800272c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d13a      	bne.n	800272c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c0:	2b40      	cmp	r3, #64	; 0x40
 80026c2:	d133      	bne.n	800272c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d12e      	bne.n	800272c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7ff fdc0 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d11a      	bne.n	8002714 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	685a      	ldr	r2, [r3, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80026ec:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002702:	2b00      	cmp	r3, #0
 8002704:	d112      	bne.n	800272c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800270a:	f043 0201 	orr.w	r2, r3, #1
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	655a      	str	r2, [r3, #84]	; 0x54
 8002712:	e00b      	b.n	800272c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002718:	f043 0210 	orr.w	r2, r3, #16
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002724:	f043 0201 	orr.w	r2, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fc93 	bl	8003058 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2260      	movs	r2, #96	; 0x60
 8002738:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002740:	2b00      	cmp	r3, #0
 8002742:	d011      	beq.n	8002768 <HAL_ADC_IRQHandler+0x264>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b00      	cmp	r3, #0
 800274c:	d00c      	beq.n	8002768 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002752:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f886 	bl	800286c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <HAL_ADC_IRQHandler+0x294>
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002780:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002788:	6878      	ldr	r0, [r7, #4]
 800278a:	f000 fc79 	bl	8003080 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002796:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002798:	69bb      	ldr	r3, [r7, #24]
 800279a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d012      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x2c4>
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00d      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 fc6b 	bl	8003094 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80027c6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	f003 0310 	and.w	r3, r3, #16
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d02a      	beq.n	8002828 <HAL_ADC_IRQHandler+0x324>
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	f003 0310 	and.w	r3, r3, #16
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d025      	beq.n	8002828 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d102      	bne.n	80027ea <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 80027e4:	2301      	movs	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	e008      	b.n	80027fc <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	f003 0301 	and.w	r3, r3, #1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 80027f8:	2301      	movs	r3, #1
 80027fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d10e      	bne.n	8002820 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002806:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f000 f830 	bl	8002880 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2210      	movs	r2, #16
 8002826:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002828:	69bb      	ldr	r3, [r7, #24]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d018      	beq.n	8002864 <HAL_ADC_IRQHandler+0x360>
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002838:	2b00      	cmp	r3, #0
 800283a:	d013      	beq.n	8002864 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002840:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284c:	f043 0208 	orr.w	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800285c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 fc04 	bl	800306c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002864:	bf00      	nop
 8002866:	3720      	adds	r7, #32
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}

0800286c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002874:	bf00      	nop
 8002876:	370c      	adds	r7, #12
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002892:	4770      	bx	lr

08002894 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0b6      	sub	sp, #216	; 0xd8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d101      	bne.n	80028b6 <HAL_ADC_ConfigChannel+0x22>
 80028b2:	2302      	movs	r3, #2
 80028b4:	e3bb      	b.n	800302e <HAL_ADC_ConfigChannel+0x79a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4618      	mov	r0, r3
 80028c4:	f7ff fcb5 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	f040 83a0 	bne.w	8003010 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	2b05      	cmp	r3, #5
 80028de:	d824      	bhi.n	800292a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	3b02      	subs	r3, #2
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d81b      	bhi.n	8002922 <HAL_ADC_ConfigChannel+0x8e>
 80028ea:	a201      	add	r2, pc, #4	; (adr r2, 80028f0 <HAL_ADC_ConfigChannel+0x5c>)
 80028ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f0:	08002901 	.word	0x08002901
 80028f4:	08002909 	.word	0x08002909
 80028f8:	08002911 	.word	0x08002911
 80028fc:	08002919 	.word	0x08002919
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002900:	230c      	movs	r3, #12
 8002902:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002906:	e010      	b.n	800292a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002908:	2312      	movs	r3, #18
 800290a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800290e:	e00c      	b.n	800292a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002910:	2318      	movs	r3, #24
 8002912:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002916:	e008      	b.n	800292a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002918:	f44f 7380 	mov.w	r3, #256	; 0x100
 800291c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002920:	e003      	b.n	800292a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002922:	2306      	movs	r3, #6
 8002924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002928:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6818      	ldr	r0, [r3, #0]
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	461a      	mov	r2, r3
 8002934:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8002938:	f7ff fb8c 	bl	8002054 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff fc76 	bl	8002232 <LL_ADC_REG_IsConversionOngoing>
 8002946:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f7ff fc82 	bl	8002258 <LL_ADC_INJ_IsConversionOngoing>
 8002954:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002958:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800295c:	2b00      	cmp	r3, #0
 800295e:	f040 81a4 	bne.w	8002caa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002962:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002966:	2b00      	cmp	r3, #0
 8002968:	f040 819f 	bne.w	8002caa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6818      	ldr	r0, [r3, #0]
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6819      	ldr	r1, [r3, #0]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	461a      	mov	r2, r3
 800297a:	f7ff fbaa 	bl	80020d2 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	695a      	ldr	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	08db      	lsrs	r3, r3, #3
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	fa02 f303 	lsl.w	r3, r2, r3
 8002994:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	2b04      	cmp	r3, #4
 800299e:	d00a      	beq.n	80029b6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6818      	ldr	r0, [r3, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	6919      	ldr	r1, [r3, #16]
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b0:	f7ff fae8 	bl	8001f84 <LL_ADC_SetOffset>
 80029b4:	e179      	b.n	8002caa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	2100      	movs	r1, #0
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff fb05 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 80029c2:	4603      	mov	r3, r0
 80029c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d10a      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x14e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2100      	movs	r1, #0
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff fafa 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 80029d8:	4603      	mov	r3, r0
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	f003 021f 	and.w	r2, r3, #31
 80029e0:	e01e      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x18c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2100      	movs	r1, #0
 80029e8:	4618      	mov	r0, r3
 80029ea:	f7ff faef 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80029f8:	fa93 f3a3 	rbit	r3, r3
 80029fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002a00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002a04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002a08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d101      	bne.n	8002a14 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002a10:	2320      	movs	r3, #32
 8002a12:	e004      	b.n	8002a1e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002a14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a18:	fab3 f383 	clz	r3, r3
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d105      	bne.n	8002a38 <HAL_ADC_ConfigChannel+0x1a4>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	0e9b      	lsrs	r3, r3, #26
 8002a32:	f003 031f 	and.w	r3, r3, #31
 8002a36:	e018      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x1d6>
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002a44:	fa93 f3a3 	rbit	r3, r3
 8002a48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002a4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002a50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002a54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002a5c:	2320      	movs	r3, #32
 8002a5e:	e004      	b.n	8002a6a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002a60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002a64:	fab3 f383 	clz	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d106      	bne.n	8002a7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fabe 	bl	8001ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff faa2 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d10a      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x214>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2101      	movs	r1, #1
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff fa97 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	f003 021f 	and.w	r2, r3, #31
 8002aa6:	e01e      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x252>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	2101      	movs	r1, #1
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff fa8c 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002abe:	fa93 f3a3 	rbit	r3, r3
 8002ac2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002ac6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002aca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8002ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002ad6:	2320      	movs	r3, #32
 8002ad8:	e004      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8002ada:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ade:	fab3 f383 	clz	r3, r3
 8002ae2:	b2db      	uxtb	r3, r3
 8002ae4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d105      	bne.n	8002afe <HAL_ADC_ConfigChannel+0x26a>
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	0e9b      	lsrs	r3, r3, #26
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	e018      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x29c>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002b0a:	fa93 f3a3 	rbit	r3, r3
 8002b0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002b12:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002b16:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8002b1a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002b22:	2320      	movs	r3, #32
 8002b24:	e004      	b.n	8002b30 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002b26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d106      	bne.n	8002b42 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7ff fa5b 	bl	8001ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2102      	movs	r1, #2
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f7ff fa3f 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d10a      	bne.n	8002b6e <HAL_ADC_ConfigChannel+0x2da>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2102      	movs	r1, #2
 8002b5e:	4618      	mov	r0, r3
 8002b60:	f7ff fa34 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002b64:	4603      	mov	r3, r0
 8002b66:	0e9b      	lsrs	r3, r3, #26
 8002b68:	f003 021f 	and.w	r2, r3, #31
 8002b6c:	e01e      	b.n	8002bac <HAL_ADC_ConfigChannel+0x318>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2102      	movs	r1, #2
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7ff fa29 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002b8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b90:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002b94:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002b9c:	2320      	movs	r3, #32
 8002b9e:	e004      	b.n	8002baa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002ba0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba4:	fab3 f383 	clz	r3, r3
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d105      	bne.n	8002bc4 <HAL_ADC_ConfigChannel+0x330>
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	0e9b      	lsrs	r3, r3, #26
 8002bbe:	f003 031f 	and.w	r3, r3, #31
 8002bc2:	e014      	b.n	8002bee <HAL_ADC_ConfigChannel+0x35a>
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002bcc:	fa93 f3a3 	rbit	r3, r3
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002bd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e004      	b.n	8002bee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002be4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002be8:	fab3 f383 	clz	r3, r3
 8002bec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d106      	bne.n	8002c00 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	2102      	movs	r1, #2
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f7ff f9fc 	bl	8001ff8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2103      	movs	r1, #3
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7ff f9e0 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d10a      	bne.n	8002c2c <HAL_ADC_ConfigChannel+0x398>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f7ff f9d5 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002c22:	4603      	mov	r3, r0
 8002c24:	0e9b      	lsrs	r3, r3, #26
 8002c26:	f003 021f 	and.w	r2, r3, #31
 8002c2a:	e017      	b.n	8002c5c <HAL_ADC_ConfigChannel+0x3c8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2103      	movs	r1, #3
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff f9ca 	bl	8001fcc <LL_ADC_GetOffsetChannel>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002c46:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002c48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002c4e:	2320      	movs	r3, #32
 8002c50:	e003      	b.n	8002c5a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002c52:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c54:	fab3 f383 	clz	r3, r3
 8002c58:	b2db      	uxtb	r3, r3
 8002c5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d105      	bne.n	8002c74 <HAL_ADC_ConfigChannel+0x3e0>
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	0e9b      	lsrs	r3, r3, #26
 8002c6e:	f003 031f 	and.w	r3, r3, #31
 8002c72:	e011      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x404>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002c7c:	fa93 f3a3 	rbit	r3, r3
 8002c80:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002c82:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002c84:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002c86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002c8c:	2320      	movs	r3, #32
 8002c8e:	e003      	b.n	8002c98 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002c90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002c92:	fab3 f383 	clz	r3, r3
 8002c96:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d106      	bne.n	8002caa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	2103      	movs	r1, #3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff f9a7 	bl	8001ff8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff faac 	bl	800220c <LL_ADC_IsEnabled>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f040 8140 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6818      	ldr	r0, [r3, #0]
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	6819      	ldr	r1, [r3, #0]
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	461a      	mov	r2, r3
 8002cca:	f7ff fa2d 	bl	8002128 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	4a8f      	ldr	r2, [pc, #572]	; (8002f10 <HAL_ADC_ConfigChannel+0x67c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	f040 8131 	bne.w	8002f3c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d10b      	bne.n	8002d02 <HAL_ADC_ConfigChannel+0x46e>
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	0e9b      	lsrs	r3, r3, #26
 8002cf0:	3301      	adds	r3, #1
 8002cf2:	f003 031f 	and.w	r3, r3, #31
 8002cf6:	2b09      	cmp	r3, #9
 8002cf8:	bf94      	ite	ls
 8002cfa:	2301      	movls	r3, #1
 8002cfc:	2300      	movhi	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e019      	b.n	8002d36 <HAL_ADC_ConfigChannel+0x4a2>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d08:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d0a:	fa93 f3a3 	rbit	r3, r3
 8002d0e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002d14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e003      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002d1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d20:	fab3 f383 	clz	r3, r3
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	3301      	adds	r3, #1
 8002d28:	f003 031f 	and.w	r3, r3, #31
 8002d2c:	2b09      	cmp	r3, #9
 8002d2e:	bf94      	ite	ls
 8002d30:	2301      	movls	r3, #1
 8002d32:	2300      	movhi	r3, #0
 8002d34:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d079      	beq.n	8002e2e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d107      	bne.n	8002d56 <HAL_ADC_ConfigChannel+0x4c2>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	0e9b      	lsrs	r3, r3, #26
 8002d4c:	3301      	adds	r3, #1
 8002d4e:	069b      	lsls	r3, r3, #26
 8002d50:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d54:	e015      	b.n	8002d82 <HAL_ADC_ConfigChannel+0x4ee>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d5e:	fa93 f3a3 	rbit	r3, r3
 8002d62:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002d64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d66:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002d68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002d6e:	2320      	movs	r3, #32
 8002d70:	e003      	b.n	8002d7a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	069b      	lsls	r3, r3, #26
 8002d7e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d109      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x50e>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	0e9b      	lsrs	r3, r3, #26
 8002d94:	3301      	adds	r3, #1
 8002d96:	f003 031f 	and.w	r3, r3, #31
 8002d9a:	2101      	movs	r1, #1
 8002d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8002da0:	e017      	b.n	8002dd2 <HAL_ADC_ConfigChannel+0x53e>
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002da8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002daa:	fa93 f3a3 	rbit	r3, r3
 8002dae:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002dba:	2320      	movs	r3, #32
 8002dbc:	e003      	b.n	8002dc6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002dbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dc0:	fab3 f383 	clz	r3, r3
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	3301      	adds	r3, #1
 8002dc8:	f003 031f 	and.w	r3, r3, #31
 8002dcc:	2101      	movs	r1, #1
 8002dce:	fa01 f303 	lsl.w	r3, r1, r3
 8002dd2:	ea42 0103 	orr.w	r1, r2, r3
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d10a      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x564>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	0e9b      	lsrs	r3, r3, #26
 8002de8:	3301      	adds	r3, #1
 8002dea:	f003 021f 	and.w	r2, r3, #31
 8002dee:	4613      	mov	r3, r2
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	4413      	add	r3, r2
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	e018      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x596>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e00:	fa93 f3a3 	rbit	r3, r3
 8002e04:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e08:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002e0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d101      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002e10:	2320      	movs	r3, #32
 8002e12:	e003      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002e14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e16:	fab3 f383 	clz	r3, r3
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	3301      	adds	r3, #1
 8002e1e:	f003 021f 	and.w	r2, r3, #31
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e2a:	430b      	orrs	r3, r1
 8002e2c:	e081      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d107      	bne.n	8002e4a <HAL_ADC_ConfigChannel+0x5b6>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	0e9b      	lsrs	r3, r3, #26
 8002e40:	3301      	adds	r3, #1
 8002e42:	069b      	lsls	r3, r3, #26
 8002e44:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e48:	e015      	b.n	8002e76 <HAL_ADC_ConfigChannel+0x5e2>
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002e62:	2320      	movs	r3, #32
 8002e64:	e003      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e68:	fab3 f383 	clz	r3, r3
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	3301      	adds	r3, #1
 8002e70:	069b      	lsls	r3, r3, #26
 8002e72:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d109      	bne.n	8002e96 <HAL_ADC_ConfigChannel+0x602>
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	0e9b      	lsrs	r3, r3, #26
 8002e88:	3301      	adds	r3, #1
 8002e8a:	f003 031f 	and.w	r3, r3, #31
 8002e8e:	2101      	movs	r1, #1
 8002e90:	fa01 f303 	lsl.w	r3, r1, r3
 8002e94:	e017      	b.n	8002ec6 <HAL_ADC_ConfigChannel+0x632>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	fa93 f3a3 	rbit	r3, r3
 8002ea2:	61bb      	str	r3, [r7, #24]
  return result;
 8002ea4:	69bb      	ldr	r3, [r7, #24]
 8002ea6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002eae:	2320      	movs	r3, #32
 8002eb0:	e003      	b.n	8002eba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002eb2:	6a3b      	ldr	r3, [r7, #32]
 8002eb4:	fab3 f383 	clz	r3, r3
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	3301      	adds	r3, #1
 8002ebc:	f003 031f 	and.w	r3, r3, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec6:	ea42 0103 	orr.w	r1, r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x65e>
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	0e9b      	lsrs	r3, r3, #26
 8002edc:	3301      	adds	r3, #1
 8002ede:	f003 021f 	and.w	r2, r3, #31
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	4413      	add	r3, r2
 8002ee8:	3b1e      	subs	r3, #30
 8002eea:	051b      	lsls	r3, r3, #20
 8002eec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ef0:	e01e      	b.n	8002f30 <HAL_ADC_ConfigChannel+0x69c>
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	fa93 f3a3 	rbit	r3, r3
 8002efe:	60fb      	str	r3, [r7, #12]
  return result;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d104      	bne.n	8002f14 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002f0a:	2320      	movs	r3, #32
 8002f0c:	e006      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x688>
 8002f0e:	bf00      	nop
 8002f10:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fab3 f383 	clz	r3, r3
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	f003 021f 	and.w	r2, r3, #31
 8002f22:	4613      	mov	r3, r2
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	4413      	add	r3, r2
 8002f28:	3b1e      	subs	r3, #30
 8002f2a:	051b      	lsls	r3, r3, #20
 8002f2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f30:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002f36:	4619      	mov	r1, r3
 8002f38:	f7ff f8cb 	bl	80020d2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b3d      	ldr	r3, [pc, #244]	; (8003038 <HAL_ADC_ConfigChannel+0x7a4>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d06c      	beq.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f48:	483c      	ldr	r0, [pc, #240]	; (800303c <HAL_ADC_ConfigChannel+0x7a8>)
 8002f4a:	f7ff f80d 	bl	8001f68 <LL_ADC_GetCommonPathInternalCh>
 8002f4e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a3a      	ldr	r2, [pc, #232]	; (8003040 <HAL_ADC_ConfigChannel+0x7ac>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d127      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002f5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d121      	bne.n	8002fac <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a35      	ldr	r2, [pc, #212]	; (8003044 <HAL_ADC_ConfigChannel+0x7b0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d157      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	482f      	ldr	r0, [pc, #188]	; (800303c <HAL_ADC_ConfigChannel+0x7a8>)
 8002f7e:	f7fe ffe0 	bl	8001f42 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f82:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_ADC_ConfigChannel+0x7b4>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	099b      	lsrs	r3, r3, #6
 8002f88:	4a30      	ldr	r2, [pc, #192]	; (800304c <HAL_ADC_ConfigChannel+0x7b8>)
 8002f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8e:	099b      	lsrs	r3, r3, #6
 8002f90:	1c5a      	adds	r2, r3, #1
 8002f92:	4613      	mov	r3, r2
 8002f94:	005b      	lsls	r3, r3, #1
 8002f96:	4413      	add	r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002f9c:	e002      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f9      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002faa:	e03a      	b.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a27      	ldr	r2, [pc, #156]	; (8003050 <HAL_ADC_ConfigChannel+0x7bc>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d113      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002fb6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d10d      	bne.n	8002fde <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_ADC_ConfigChannel+0x7b0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d12a      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002fcc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fd0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	4819      	ldr	r0, [pc, #100]	; (800303c <HAL_ADC_ConfigChannel+0x7a8>)
 8002fd8:	f7fe ffb3 	bl	8001f42 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002fdc:	e021      	b.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a1c      	ldr	r2, [pc, #112]	; (8003054 <HAL_ADC_ConfigChannel+0x7c0>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d11c      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002fe8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d116      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a12      	ldr	r2, [pc, #72]	; (8003044 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d111      	bne.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ffe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003002:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003006:	4619      	mov	r1, r3
 8003008:	480c      	ldr	r0, [pc, #48]	; (800303c <HAL_ADC_ConfigChannel+0x7a8>)
 800300a:	f7fe ff9a 	bl	8001f42 <LL_ADC_SetCommonPathInternalCh>
 800300e:	e008      	b.n	8003022 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003014:	f043 0220 	orr.w	r2, r3, #32
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800302a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800302e:	4618      	mov	r0, r3
 8003030:	37d8      	adds	r7, #216	; 0xd8
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	80080000 	.word	0x80080000
 800303c:	50040300 	.word	0x50040300
 8003040:	c7520000 	.word	0xc7520000
 8003044:	50040000 	.word	0x50040000
 8003048:	20000004 	.word	0x20000004
 800304c:	053e2d63 	.word	0x053e2d63
 8003050:	cb840000 	.word	0xcb840000
 8003054:	80000001 	.word	0x80000001

08003058 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003088:	bf00      	nop
 800308a:	370c      	adds	r7, #12
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b083      	sub	sp, #12
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80030b0:	bf00      	nop
 80030b2:	370c      	adds	r7, #12
 80030b4:	46bd      	mov	sp, r7
 80030b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ba:	4770      	bx	lr

080030bc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b084      	sub	sp, #16
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d101      	bne.n	80030ce <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e0ed      	b.n	80032aa <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030d4:	b2db      	uxtb	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d102      	bne.n	80030e0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe f920 	bl	8001320 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	681a      	ldr	r2, [r3, #0]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f042 0201 	orr.w	r2, r2, #1
 80030ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030f0:	f7fe fee4 	bl	8001ebc <HAL_GetTick>
 80030f4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80030f6:	e012      	b.n	800311e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80030f8:	f7fe fee0 	bl	8001ebc <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b0a      	cmp	r3, #10
 8003104:	d90b      	bls.n	800311e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2205      	movs	r2, #5
 8003116:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e0c5      	b.n	80032aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0301 	and.w	r3, r3, #1
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0e5      	beq.n	80030f8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0202 	bic.w	r2, r2, #2
 800313a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800313c:	f7fe febe 	bl	8001ebc <HAL_GetTick>
 8003140:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003142:	e012      	b.n	800316a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003144:	f7fe feba 	bl	8001ebc <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b0a      	cmp	r3, #10
 8003150:	d90b      	bls.n	800316a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2205      	movs	r2, #5
 8003162:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e09f      	b.n	80032aa <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d1e5      	bne.n	8003144 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	7e1b      	ldrb	r3, [r3, #24]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d108      	bne.n	8003192 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800318e:	601a      	str	r2, [r3, #0]
 8003190:	e007      	b.n	80031a2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031a0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	7e5b      	ldrb	r3, [r3, #25]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d108      	bne.n	80031bc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031b8:	601a      	str	r2, [r3, #0]
 80031ba:	e007      	b.n	80031cc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ca:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	7e9b      	ldrb	r3, [r3, #26]
 80031d0:	2b01      	cmp	r3, #1
 80031d2:	d108      	bne.n	80031e6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0220 	orr.w	r2, r2, #32
 80031e2:	601a      	str	r2, [r3, #0]
 80031e4:	e007      	b.n	80031f6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	7edb      	ldrb	r3, [r3, #27]
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d108      	bne.n	8003210 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f022 0210 	bic.w	r2, r2, #16
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e007      	b.n	8003220 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f042 0210 	orr.w	r2, r2, #16
 800321e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7f1b      	ldrb	r3, [r3, #28]
 8003224:	2b01      	cmp	r3, #1
 8003226:	d108      	bne.n	800323a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f042 0208 	orr.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
 8003238:	e007      	b.n	800324a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f022 0208 	bic.w	r2, r2, #8
 8003248:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	7f5b      	ldrb	r3, [r3, #29]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d108      	bne.n	8003264 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0204 	orr.w	r2, r2, #4
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e007      	b.n	8003274 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0204 	bic.w	r2, r2, #4
 8003272:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	689a      	ldr	r2, [r3, #8]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	431a      	orrs	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	691b      	ldr	r3, [r3, #16]
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	695b      	ldr	r3, [r3, #20]
 8003288:	ea42 0103 	orr.w	r1, r2, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	1e5a      	subs	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	430a      	orrs	r2, r1
 8003298:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3710      	adds	r7, #16
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b084      	sub	sp, #16
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d12e      	bne.n	8003324 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2202      	movs	r2, #2
 80032ca:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681a      	ldr	r2, [r3, #0]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0201 	bic.w	r2, r2, #1
 80032dc:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80032de:	f7fe fded 	bl	8001ebc <HAL_GetTick>
 80032e2:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80032e4:	e012      	b.n	800330c <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032e6:	f7fe fde9 	bl	8001ebc <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b0a      	cmp	r3, #10
 80032f2:	d90b      	bls.n	800330c <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2205      	movs	r2, #5
 8003304:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8003308:	2301      	movs	r3, #1
 800330a:	e012      	b.n	8003332 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d1e5      	bne.n	80032e6 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e006      	b.n	8003332 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003328:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3710      	adds	r7, #16
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
	...

0800333c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333c:	b480      	push	{r7}
 800333e:	b085      	sub	sp, #20
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003352:	68ba      	ldr	r2, [r7, #8]
 8003354:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003358:	4013      	ands	r3, r2
 800335a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003364:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003368:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800336e:	4a04      	ldr	r2, [pc, #16]	; (8003380 <__NVIC_SetPriorityGrouping+0x44>)
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60d3      	str	r3, [r2, #12]
}
 8003374:	bf00      	nop
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	e000ed00 	.word	0xe000ed00

08003384 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003388:	4b04      	ldr	r3, [pc, #16]	; (800339c <__NVIC_GetPriorityGrouping+0x18>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 0307 	and.w	r3, r3, #7
}
 8003392:	4618      	mov	r0, r3
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr
 800339c:	e000ed00 	.word	0xe000ed00

080033a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	db0b      	blt.n	80033ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033b2:	79fb      	ldrb	r3, [r7, #7]
 80033b4:	f003 021f 	and.w	r2, r3, #31
 80033b8:	4907      	ldr	r1, [pc, #28]	; (80033d8 <__NVIC_EnableIRQ+0x38>)
 80033ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033be:	095b      	lsrs	r3, r3, #5
 80033c0:	2001      	movs	r0, #1
 80033c2:	fa00 f202 	lsl.w	r2, r0, r2
 80033c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033ca:	bf00      	nop
 80033cc:	370c      	adds	r7, #12
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	e000e100 	.word	0xe000e100

080033dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003430:	b480      	push	{r7}
 8003432:	b089      	sub	sp, #36	; 0x24
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f003 0307 	and.w	r3, r3, #7
 8003442:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	f1c3 0307 	rsb	r3, r3, #7
 800344a:	2b04      	cmp	r3, #4
 800344c:	bf28      	it	cs
 800344e:	2304      	movcs	r3, #4
 8003450:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	3304      	adds	r3, #4
 8003456:	2b06      	cmp	r3, #6
 8003458:	d902      	bls.n	8003460 <NVIC_EncodePriority+0x30>
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	3b03      	subs	r3, #3
 800345e:	e000      	b.n	8003462 <NVIC_EncodePriority+0x32>
 8003460:	2300      	movs	r3, #0
 8003462:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003464:	f04f 32ff 	mov.w	r2, #4294967295
 8003468:	69bb      	ldr	r3, [r7, #24]
 800346a:	fa02 f303 	lsl.w	r3, r2, r3
 800346e:	43da      	mvns	r2, r3
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	401a      	ands	r2, r3
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003478:	f04f 31ff 	mov.w	r1, #4294967295
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fa01 f303 	lsl.w	r3, r1, r3
 8003482:	43d9      	mvns	r1, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003488:	4313      	orrs	r3, r2
         );
}
 800348a:	4618      	mov	r0, r3
 800348c:	3724      	adds	r7, #36	; 0x24
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr
	...

08003498 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	3b01      	subs	r3, #1
 80034a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a8:	d301      	bcc.n	80034ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034aa:	2301      	movs	r3, #1
 80034ac:	e00f      	b.n	80034ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034ae:	4a0a      	ldr	r2, [pc, #40]	; (80034d8 <SysTick_Config+0x40>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3b01      	subs	r3, #1
 80034b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034b6:	210f      	movs	r1, #15
 80034b8:	f04f 30ff 	mov.w	r0, #4294967295
 80034bc:	f7ff ff8e 	bl	80033dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034c0:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <SysTick_Config+0x40>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034c6:	4b04      	ldr	r3, [pc, #16]	; (80034d8 <SysTick_Config+0x40>)
 80034c8:	2207      	movs	r2, #7
 80034ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3708      	adds	r7, #8
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	e000e010 	.word	0xe000e010

080034dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b082      	sub	sp, #8
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	f7ff ff29 	bl	800333c <__NVIC_SetPriorityGrouping>
}
 80034ea:	bf00      	nop
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}

080034f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034f2:	b580      	push	{r7, lr}
 80034f4:	b086      	sub	sp, #24
 80034f6:	af00      	add	r7, sp, #0
 80034f8:	4603      	mov	r3, r0
 80034fa:	60b9      	str	r1, [r7, #8]
 80034fc:	607a      	str	r2, [r7, #4]
 80034fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003504:	f7ff ff3e 	bl	8003384 <__NVIC_GetPriorityGrouping>
 8003508:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	68b9      	ldr	r1, [r7, #8]
 800350e:	6978      	ldr	r0, [r7, #20]
 8003510:	f7ff ff8e 	bl	8003430 <NVIC_EncodePriority>
 8003514:	4602      	mov	r2, r0
 8003516:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800351a:	4611      	mov	r1, r2
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff ff5d 	bl	80033dc <__NVIC_SetPriority>
}
 8003522:	bf00      	nop
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b082      	sub	sp, #8
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff ff31 	bl	80033a0 <__NVIC_EnableIRQ>
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f7ff ffa2 	bl	8003498 <SysTick_Config>
 8003554:	4603      	mov	r3, r0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3708      	adds	r7, #8
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003560:	b480      	push	{r7}
 8003562:	b085      	sub	sp, #20
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d101      	bne.n	8003572 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	e098      	b.n	80036a4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	461a      	mov	r2, r3
 8003578:	4b4d      	ldr	r3, [pc, #308]	; (80036b0 <HAL_DMA_Init+0x150>)
 800357a:	429a      	cmp	r2, r3
 800357c:	d80f      	bhi.n	800359e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	461a      	mov	r2, r3
 8003584:	4b4b      	ldr	r3, [pc, #300]	; (80036b4 <HAL_DMA_Init+0x154>)
 8003586:	4413      	add	r3, r2
 8003588:	4a4b      	ldr	r2, [pc, #300]	; (80036b8 <HAL_DMA_Init+0x158>)
 800358a:	fba2 2303 	umull	r2, r3, r2, r3
 800358e:	091b      	lsrs	r3, r3, #4
 8003590:	009a      	lsls	r2, r3, #2
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a48      	ldr	r2, [pc, #288]	; (80036bc <HAL_DMA_Init+0x15c>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40
 800359c:	e00e      	b.n	80035bc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b46      	ldr	r3, [pc, #280]	; (80036c0 <HAL_DMA_Init+0x160>)
 80035a6:	4413      	add	r3, r2
 80035a8:	4a43      	ldr	r2, [pc, #268]	; (80036b8 <HAL_DMA_Init+0x158>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	009a      	lsls	r2, r3, #2
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a42      	ldr	r2, [pc, #264]	; (80036c4 <HAL_DMA_Init+0x164>)
 80035ba:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2202      	movs	r2, #2
 80035c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80035e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003616:	d039      	beq.n	800368c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	4a27      	ldr	r2, [pc, #156]	; (80036bc <HAL_DMA_Init+0x15c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d11a      	bne.n	8003658 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003622:	4b29      	ldr	r3, [pc, #164]	; (80036c8 <HAL_DMA_Init+0x168>)
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	f003 031c 	and.w	r3, r3, #28
 800362e:	210f      	movs	r1, #15
 8003630:	fa01 f303 	lsl.w	r3, r1, r3
 8003634:	43db      	mvns	r3, r3
 8003636:	4924      	ldr	r1, [pc, #144]	; (80036c8 <HAL_DMA_Init+0x168>)
 8003638:	4013      	ands	r3, r2
 800363a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800363c:	4b22      	ldr	r3, [pc, #136]	; (80036c8 <HAL_DMA_Init+0x168>)
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6859      	ldr	r1, [r3, #4]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f003 031c 	and.w	r3, r3, #28
 800364c:	fa01 f303 	lsl.w	r3, r1, r3
 8003650:	491d      	ldr	r1, [pc, #116]	; (80036c8 <HAL_DMA_Init+0x168>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
 8003656:	e019      	b.n	800368c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003658:	4b1c      	ldr	r3, [pc, #112]	; (80036cc <HAL_DMA_Init+0x16c>)
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003660:	f003 031c 	and.w	r3, r3, #28
 8003664:	210f      	movs	r1, #15
 8003666:	fa01 f303 	lsl.w	r3, r1, r3
 800366a:	43db      	mvns	r3, r3
 800366c:	4917      	ldr	r1, [pc, #92]	; (80036cc <HAL_DMA_Init+0x16c>)
 800366e:	4013      	ands	r3, r2
 8003670:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003672:	4b16      	ldr	r3, [pc, #88]	; (80036cc <HAL_DMA_Init+0x16c>)
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6859      	ldr	r1, [r3, #4]
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f003 031c 	and.w	r3, r3, #28
 8003682:	fa01 f303 	lsl.w	r3, r1, r3
 8003686:	4911      	ldr	r1, [pc, #68]	; (80036cc <HAL_DMA_Init+0x16c>)
 8003688:	4313      	orrs	r3, r2
 800368a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3714      	adds	r7, #20
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	40020407 	.word	0x40020407
 80036b4:	bffdfff8 	.word	0xbffdfff8
 80036b8:	cccccccd 	.word	0xcccccccd
 80036bc:	40020000 	.word	0x40020000
 80036c0:	bffdfbf8 	.word	0xbffdfbf8
 80036c4:	40020400 	.word	0x40020400
 80036c8:	400200a8 	.word	0x400200a8
 80036cc:	400204a8 	.word	0x400204a8

080036d0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036d8:	2300      	movs	r3, #0
 80036da:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80036e2:	b2db      	uxtb	r3, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d005      	beq.n	80036f4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2204      	movs	r2, #4
 80036ec:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	73fb      	strb	r3, [r7, #15]
 80036f2:	e029      	b.n	8003748 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 020e 	bic.w	r2, r2, #14
 8003702:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0201 	bic.w	r2, r2, #1
 8003712:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003718:	f003 021c 	and.w	r2, r3, #28
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f202 	lsl.w	r2, r1, r2
 8003726:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2200      	movs	r2, #0
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	4798      	blx	r3
    }
  }
  return status;
 8003748:	7bfb      	ldrb	r3, [r7, #15]
}
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003752:	b580      	push	{r7, lr}
 8003754:	b084      	sub	sp, #16
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800376e:	f003 031c 	and.w	r3, r3, #28
 8003772:	2204      	movs	r2, #4
 8003774:	409a      	lsls	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	4013      	ands	r3, r2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d026      	beq.n	80037cc <HAL_DMA_IRQHandler+0x7a>
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d021      	beq.n	80037cc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d107      	bne.n	80037a6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681a      	ldr	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0204 	bic.w	r2, r2, #4
 80037a4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037aa:	f003 021c 	and.w	r2, r3, #28
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	2104      	movs	r1, #4
 80037b4:	fa01 f202 	lsl.w	r2, r1, r2
 80037b8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d071      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80037ca:	e06c      	b.n	80038a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f003 031c 	and.w	r3, r3, #28
 80037d4:	2202      	movs	r2, #2
 80037d6:	409a      	lsls	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4013      	ands	r3, r2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d02e      	beq.n	800383e <HAL_DMA_IRQHandler+0xec>
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d029      	beq.n	800383e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0320 	and.w	r3, r3, #32
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10b      	bne.n	8003810 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f022 020a 	bic.w	r2, r2, #10
 8003806:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003814:	f003 021c 	and.w	r2, r3, #28
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381c:	2102      	movs	r1, #2
 800381e:	fa01 f202 	lsl.w	r2, r1, r2
 8003822:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	d038      	beq.n	80038a6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800383c:	e033      	b.n	80038a6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003842:	f003 031c 	and.w	r3, r3, #28
 8003846:	2208      	movs	r2, #8
 8003848:	409a      	lsls	r2, r3
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	4013      	ands	r3, r2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d02a      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x156>
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	f003 0308 	and.w	r3, r3, #8
 8003858:	2b00      	cmp	r3, #0
 800385a:	d025      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 020e 	bic.w	r2, r2, #14
 800386a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003870:	f003 021c 	and.w	r2, r3, #28
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2101      	movs	r1, #1
 800387a:	fa01 f202 	lsl.w	r2, r1, r2
 800387e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2201      	movs	r2, #1
 8003884:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80038a6:	bf00      	nop
 80038a8:	bf00      	nop
}
 80038aa:	3710      	adds	r7, #16
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038be:	b2db      	uxtb	r3, r3
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e148      	b.n	8003b6e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	fa01 f303 	lsl.w	r3, r1, r3
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 813a 	beq.w	8003b68 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_GPIO_Init+0x40>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f003 0303 	and.w	r3, r3, #3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	fa02 f303 	lsl.w	r3, r2, r3
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	fa02 f303 	lsl.w	r3, r2, r3
 800394a:	43db      	mvns	r3, r3
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	f003 0201 	and.w	r2, r3, #1
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	fa02 f303 	lsl.w	r3, r2, r3
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0303 	and.w	r3, r3, #3
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2203      	movs	r2, #3
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	fa02 f303 	lsl.w	r3, r2, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f003 0303 	and.w	r3, r3, #3
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d123      	bne.n	80039fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	f003 0307 	and.w	r3, r3, #7
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	fa02 f303 	lsl.w	r3, r2, r3
 80039d2:	43db      	mvns	r3, r3
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	f003 0307 	and.w	r3, r3, #7
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	6939      	ldr	r1, [r7, #16]
 80039fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f003 0203 	and.w	r2, r3, #3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 8094 	beq.w	8003b68 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a40:	4b52      	ldr	r3, [pc, #328]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	4a51      	ldr	r2, [pc, #324]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a46:	f043 0301 	orr.w	r3, r3, #1
 8003a4a:	6613      	str	r3, [r2, #96]	; 0x60
 8003a4c:	4b4f      	ldr	r3, [pc, #316]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	60bb      	str	r3, [r7, #8]
 8003a56:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003a58:	4a4d      	ldr	r2, [pc, #308]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	089b      	lsrs	r3, r3, #2
 8003a5e:	3302      	adds	r3, #2
 8003a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a64:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	220f      	movs	r2, #15
 8003a70:	fa02 f303 	lsl.w	r3, r2, r3
 8003a74:	43db      	mvns	r3, r3
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	4013      	ands	r3, r2
 8003a7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003a82:	d00d      	beq.n	8003aa0 <HAL_GPIO_Init+0x1d4>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a43      	ldr	r2, [pc, #268]	; (8003b94 <HAL_GPIO_Init+0x2c8>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <HAL_GPIO_Init+0x1d0>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a42      	ldr	r2, [pc, #264]	; (8003b98 <HAL_GPIO_Init+0x2cc>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d101      	bne.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a94:	2302      	movs	r3, #2
 8003a96:	e004      	b.n	8003aa2 <HAL_GPIO_Init+0x1d6>
 8003a98:	2307      	movs	r3, #7
 8003a9a:	e002      	b.n	8003aa2 <HAL_GPIO_Init+0x1d6>
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e000      	b.n	8003aa2 <HAL_GPIO_Init+0x1d6>
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	f002 0203 	and.w	r2, r2, #3
 8003aa8:	0092      	lsls	r2, r2, #2
 8003aaa:	4093      	lsls	r3, r2
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003ab2:	4937      	ldr	r1, [pc, #220]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	089b      	lsrs	r3, r3, #2
 8003ab8:	3302      	adds	r3, #2
 8003aba:	693a      	ldr	r2, [r7, #16]
 8003abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ac0:	4b36      	ldr	r3, [pc, #216]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	693a      	ldr	r2, [r7, #16]
 8003acc:	4013      	ands	r3, r2
 8003ace:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003aea:	4b2c      	ldr	r3, [pc, #176]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003aec:	68db      	ldr	r3, [r3, #12]
 8003aee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d003      	beq.n	8003b0e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b0e:	4a23      	ldr	r2, [pc, #140]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b14:	4b21      	ldr	r3, [pc, #132]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	43db      	mvns	r3, r3
 8003b1e:	693a      	ldr	r2, [r7, #16]
 8003b20:	4013      	ands	r3, r2
 8003b22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003b30:	693a      	ldr	r2, [r7, #16]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b38:	4a18      	ldr	r2, [pc, #96]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003b3e:	4b17      	ldr	r3, [pc, #92]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	43db      	mvns	r3, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b4e:	683b      	ldr	r3, [r7, #0]
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d003      	beq.n	8003b62 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b62:	4a0e      	ldr	r2, [pc, #56]	; (8003b9c <HAL_GPIO_Init+0x2d0>)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	fa22 f303 	lsr.w	r3, r2, r3
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	f47f aeaf 	bne.w	80038dc <HAL_GPIO_Init+0x10>
  }
}
 8003b7e:	bf00      	nop
 8003b80:	bf00      	nop
 8003b82:	371c      	adds	r7, #28
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	40010000 	.word	0x40010000
 8003b94:	48000400 	.word	0x48000400
 8003b98:	48000800 	.word	0x48000800
 8003b9c:	40010400 	.word	0x40010400

08003ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	460b      	mov	r3, r1
 8003baa:	807b      	strh	r3, [r7, #2]
 8003bac:	4613      	mov	r3, r2
 8003bae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bb0:	787b      	ldrb	r3, [r7, #1]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d003      	beq.n	8003bbe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb6:	887a      	ldrh	r2, [r7, #2]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	887a      	ldrh	r2, [r7, #2]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	e08d      	b.n	8003cfe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003be8:	b2db      	uxtb	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d106      	bne.n	8003bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003bf6:	6878      	ldr	r0, [r7, #4]
 8003bf8:	f7fd fc9c 	bl	8001534 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2224      	movs	r2, #36	; 0x24
 8003c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f022 0201 	bic.w	r2, r2, #1
 8003c12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685a      	ldr	r2, [r3, #4]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	689a      	ldr	r2, [r3, #8]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d107      	bne.n	8003c4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c46:	609a      	str	r2, [r3, #8]
 8003c48:	e006      	b.n	8003c58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003c56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	2b02      	cmp	r3, #2
 8003c5e:	d108      	bne.n	8003c72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c6e:	605a      	str	r2, [r3, #4]
 8003c70:	e007      	b.n	8003c82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	685a      	ldr	r2, [r3, #4]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	687a      	ldr	r2, [r7, #4]
 8003c8a:	6812      	ldr	r2, [r2, #0]
 8003c8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ca4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	695b      	ldr	r3, [r3, #20]
 8003cae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	699b      	ldr	r3, [r3, #24]
 8003cb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69d9      	ldr	r1, [r3, #28]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a1a      	ldr	r2, [r3, #32]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	430a      	orrs	r2, r1
 8003cce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	2220      	movs	r2, #32
 8003cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003cfc:	2300      	movs	r3, #0
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
	...

08003d08 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b088      	sub	sp, #32
 8003d0c:	af02      	add	r7, sp, #8
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	607a      	str	r2, [r7, #4]
 8003d12:	461a      	mov	r2, r3
 8003d14:	460b      	mov	r3, r1
 8003d16:	817b      	strh	r3, [r7, #10]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d22:	b2db      	uxtb	r3, r3
 8003d24:	2b20      	cmp	r3, #32
 8003d26:	f040 80fd 	bne.w	8003f24 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_Master_Transmit+0x30>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e0f6      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003d40:	f7fe f8bc 	bl	8001ebc <HAL_GetTick>
 8003d44:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	2319      	movs	r3, #25
 8003d4c:	2201      	movs	r2, #1
 8003d4e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 ff33 	bl	8004bbe <I2C_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e0e1      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	2221      	movs	r2, #33	; 0x21
 8003d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	2210      	movs	r2, #16
 8003d6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	2200      	movs	r2, #0
 8003d76:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	893a      	ldrh	r2, [r7, #8]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	2bff      	cmp	r3, #255	; 0xff
 8003d92:	d906      	bls.n	8003da2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	22ff      	movs	r2, #255	; 0xff
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003d9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9e:	617b      	str	r3, [r7, #20]
 8003da0:	e007      	b.n	8003db2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003db0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d024      	beq.n	8003e04 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbe:	781a      	ldrb	r2, [r3, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dca:	1c5a      	adds	r2, r3, #1
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29b      	uxth	r3, r3
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	b29a      	uxth	r2, r3
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003de2:	3b01      	subs	r3, #1
 8003de4:	b29a      	uxth	r2, r3
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	8979      	ldrh	r1, [r7, #10]
 8003df6:	4b4e      	ldr	r3, [pc, #312]	; (8003f30 <HAL_I2C_Master_Transmit+0x228>)
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	68f8      	ldr	r0, [r7, #12]
 8003dfe:	f001 f919 	bl	8005034 <I2C_TransferConfig>
 8003e02:	e066      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	8979      	ldrh	r1, [r7, #10]
 8003e0c:	4b48      	ldr	r3, [pc, #288]	; (8003f30 <HAL_I2C_Master_Transmit+0x228>)
 8003e0e:	9300      	str	r3, [sp, #0]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f001 f90e 	bl	8005034 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003e18:	e05b      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e1a:	693a      	ldr	r2, [r7, #16]
 8003e1c:	6a39      	ldr	r1, [r7, #32]
 8003e1e:	68f8      	ldr	r0, [r7, #12]
 8003e20:	f000 ff1c 	bl	8004c5c <I2C_WaitOnTXISFlagUntilTimeout>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d001      	beq.n	8003e2e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e07b      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e32:	781a      	ldrb	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	1c5a      	adds	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d034      	beq.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ca>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d130      	bne.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	9300      	str	r3, [sp, #0]
 8003e74:	6a3b      	ldr	r3, [r7, #32]
 8003e76:	2200      	movs	r2, #0
 8003e78:	2180      	movs	r1, #128	; 0x80
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 fe9f 	bl	8004bbe <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d001      	beq.n	8003e8a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e04d      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	2bff      	cmp	r3, #255	; 0xff
 8003e92:	d90e      	bls.n	8003eb2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	22ff      	movs	r2, #255	; 0xff
 8003e98:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9e:	b2da      	uxtb	r2, r3
 8003ea0:	8979      	ldrh	r1, [r7, #10]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f001 f8c2 	bl	8005034 <I2C_TransferConfig>
 8003eb0:	e00f      	b.n	8003ed2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb6:	b29a      	uxth	r2, r3
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec0:	b2da      	uxtb	r2, r3
 8003ec2:	8979      	ldrh	r1, [r7, #10]
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f001 f8b1 	bl	8005034 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d19e      	bne.n	8003e1a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	6a39      	ldr	r1, [r7, #32]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 ff02 	bl	8004cea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e01a      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6859      	ldr	r1, [r3, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_I2C_Master_Transmit+0x22c>)
 8003f04:	400b      	ands	r3, r1
 8003f06:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2220      	movs	r2, #32
 8003f0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003f20:	2300      	movs	r3, #0
 8003f22:	e000      	b.n	8003f26 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003f24:	2302      	movs	r3, #2
  }
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	80002000 	.word	0x80002000
 8003f34:	fe00e800 	.word	0xfe00e800

08003f38 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b088      	sub	sp, #32
 8003f3c:	af02      	add	r7, sp, #8
 8003f3e:	60f8      	str	r0, [r7, #12]
 8003f40:	607a      	str	r2, [r7, #4]
 8003f42:	461a      	mov	r2, r3
 8003f44:	460b      	mov	r3, r1
 8003f46:	817b      	strh	r3, [r7, #10]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b20      	cmp	r3, #32
 8003f56:	f040 80db 	bne.w	8004110 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f60:	2b01      	cmp	r3, #1
 8003f62:	d101      	bne.n	8003f68 <HAL_I2C_Master_Receive+0x30>
 8003f64:	2302      	movs	r3, #2
 8003f66:	e0d4      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003f70:	f7fd ffa4 	bl	8001ebc <HAL_GetTick>
 8003f74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	9300      	str	r3, [sp, #0]
 8003f7a:	2319      	movs	r3, #25
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f000 fe1b 	bl	8004bbe <I2C_WaitOnFlagUntilTimeout>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d001      	beq.n	8003f92 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e0bf      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2222      	movs	r2, #34	; 0x22
 8003f96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2210      	movs	r2, #16
 8003f9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	893a      	ldrh	r2, [r7, #8]
 8003fb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2bff      	cmp	r3, #255	; 0xff
 8003fc2:	d90e      	bls.n	8003fe2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	22ff      	movs	r2, #255	; 0xff
 8003fc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fce:	b2da      	uxtb	r2, r3
 8003fd0:	8979      	ldrh	r1, [r7, #10]
 8003fd2:	4b52      	ldr	r3, [pc, #328]	; (800411c <HAL_I2C_Master_Receive+0x1e4>)
 8003fd4:	9300      	str	r3, [sp, #0]
 8003fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f001 f82a 	bl	8005034 <I2C_TransferConfig>
 8003fe0:	e06d      	b.n	80040be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe6:	b29a      	uxth	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	8979      	ldrh	r1, [r7, #10]
 8003ff4:	4b49      	ldr	r3, [pc, #292]	; (800411c <HAL_I2C_Master_Receive+0x1e4>)
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ffc:	68f8      	ldr	r0, [r7, #12]
 8003ffe:	f001 f819 	bl	8005034 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004002:	e05c      	b.n	80040be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004004:	697a      	ldr	r2, [r7, #20]
 8004006:	6a39      	ldr	r1, [r7, #32]
 8004008:	68f8      	ldr	r0, [r7, #12]
 800400a:	f000 feb1 	bl	8004d70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d001      	beq.n	8004018 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e07c      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004034:	3b01      	subs	r3, #1
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004040:	b29b      	uxth	r3, r3
 8004042:	3b01      	subs	r3, #1
 8004044:	b29a      	uxth	r2, r3
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800404e:	b29b      	uxth	r3, r3
 8004050:	2b00      	cmp	r3, #0
 8004052:	d034      	beq.n	80040be <HAL_I2C_Master_Receive+0x186>
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d130      	bne.n	80040be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	9300      	str	r3, [sp, #0]
 8004060:	6a3b      	ldr	r3, [r7, #32]
 8004062:	2200      	movs	r2, #0
 8004064:	2180      	movs	r1, #128	; 0x80
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fda9 	bl	8004bbe <I2C_WaitOnFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e04d      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800407a:	b29b      	uxth	r3, r3
 800407c:	2bff      	cmp	r3, #255	; 0xff
 800407e:	d90e      	bls.n	800409e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	22ff      	movs	r2, #255	; 0xff
 8004084:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800408a:	b2da      	uxtb	r2, r3
 800408c:	8979      	ldrh	r1, [r7, #10]
 800408e:	2300      	movs	r3, #0
 8004090:	9300      	str	r3, [sp, #0]
 8004092:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004096:	68f8      	ldr	r0, [r7, #12]
 8004098:	f000 ffcc 	bl	8005034 <I2C_TransferConfig>
 800409c:	e00f      	b.n	80040be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a2:	b29a      	uxth	r2, r3
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ac:	b2da      	uxtb	r2, r3
 80040ae:	8979      	ldrh	r1, [r7, #10]
 80040b0:	2300      	movs	r3, #0
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 ffbb 	bl	8005034 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d19d      	bne.n	8004004 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040c8:	697a      	ldr	r2, [r7, #20]
 80040ca:	6a39      	ldr	r1, [r7, #32]
 80040cc:	68f8      	ldr	r0, [r7, #12]
 80040ce:	f000 fe0c 	bl	8004cea <I2C_WaitOnSTOPFlagUntilTimeout>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d001      	beq.n	80040dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e01a      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2220      	movs	r2, #32
 80040e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	6859      	ldr	r1, [r3, #4]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	4b0c      	ldr	r3, [pc, #48]	; (8004120 <HAL_I2C_Master_Receive+0x1e8>)
 80040f0:	400b      	ands	r3, r1
 80040f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2200      	movs	r2, #0
 8004100:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2200      	movs	r2, #0
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	e000      	b.n	8004112 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004110:	2302      	movs	r3, #2
  }
}
 8004112:	4618      	mov	r0, r3
 8004114:	3718      	adds	r7, #24
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}
 800411a:	bf00      	nop
 800411c:	80002400 	.word	0x80002400
 8004120:	fe00e800 	.word	0xfe00e800

08004124 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b084      	sub	sp, #16
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004140:	2b00      	cmp	r3, #0
 8004142:	d005      	beq.n	8004150 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004148:	68ba      	ldr	r2, [r7, #8]
 800414a:	68f9      	ldr	r1, [r7, #12]
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
  }
}
 8004150:	bf00      	nop
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b086      	sub	sp, #24
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00f      	beq.n	800419a <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004180:	2b00      	cmp	r3, #0
 8004182:	d00a      	beq.n	800419a <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004188:	f043 0201 	orr.w	r2, r3, #1
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004198:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00f      	beq.n	80041c4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00a      	beq.n	80041c4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041b2:	f043 0208 	orr.w	r2, r3, #8
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041c2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d00f      	beq.n	80041ee <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d00a      	beq.n	80041ee <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f043 0202 	orr.w	r2, r3, #2
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041ec:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f2:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 030b 	and.w	r3, r3, #11
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d003      	beq.n	8004206 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f000 fb83 	bl	800490c <I2C_ITError>
  }
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800420e:	b480      	push	{r7}
 8004210:	b083      	sub	sp, #12
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004216:	bf00      	nop
 8004218:	370c      	adds	r7, #12
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr

08004222 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004222:	b480      	push	{r7}
 8004224:	b083      	sub	sp, #12
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004236:	b480      	push	{r7}
 8004238:	b083      	sub	sp, #12
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	460b      	mov	r3, r1
 8004240:	70fb      	strb	r3, [r7, #3]
 8004242:	4613      	mov	r3, r2
 8004244:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004246:	bf00      	nop
 8004248:	370c      	adds	r7, #12
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004252:	b480      	push	{r7}
 8004254:	b083      	sub	sp, #12
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004266:	b480      	push	{r7}
 8004268:	b083      	sub	sp, #12
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800426e:	bf00      	nop
 8004270:	370c      	adds	r7, #12
 8004272:	46bd      	mov	sp, r7
 8004274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004278:	4770      	bx	lr

0800427a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800427a:	b480      	push	{r7}
 800427c:	b083      	sub	sp, #12
 800427e:	af00      	add	r7, sp, #0
 8004280:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004282:	bf00      	nop
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr

0800428e <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800428e:	b580      	push	{r7, lr}
 8004290:	b086      	sub	sp, #24
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800429e:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d101      	bne.n	80042b2 <I2C_Slave_ISR_IT+0x24>
 80042ae:	2302      	movs	r3, #2
 80042b0:	e0e1      	b.n	8004476 <I2C_Slave_ISR_IT+0x1e8>
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f003 0320 	and.w	r3, r3, #32
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d008      	beq.n	80042d6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d003      	beq.n	80042d6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80042ce:	6939      	ldr	r1, [r7, #16]
 80042d0:	68f8      	ldr	r0, [r7, #12]
 80042d2:	f000 f9b5 	bl	8004640 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042d6:	693b      	ldr	r3, [r7, #16]
 80042d8:	f003 0310 	and.w	r3, r3, #16
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d04b      	beq.n	8004378 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d046      	beq.n	8004378 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ee:	b29b      	uxth	r3, r3
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d128      	bne.n	8004346 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042fa:	b2db      	uxtb	r3, r3
 80042fc:	2b28      	cmp	r3, #40	; 0x28
 80042fe:	d108      	bne.n	8004312 <I2C_Slave_ISR_IT+0x84>
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004306:	d104      	bne.n	8004312 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004308:	6939      	ldr	r1, [r7, #16]
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 faaa 	bl	8004864 <I2C_ITListenCplt>
 8004310:	e031      	b.n	8004376 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b29      	cmp	r3, #41	; 0x29
 800431c:	d10e      	bne.n	800433c <I2C_Slave_ISR_IT+0xae>
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004324:	d00a      	beq.n	800433c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2210      	movs	r2, #16
 800432c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fc03 	bl	8004b3a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f000 f926 	bl	8004586 <I2C_ITSlaveSeqCplt>
 800433a:	e01c      	b.n	8004376 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2210      	movs	r2, #16
 8004342:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004344:	e08f      	b.n	8004466 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2210      	movs	r2, #16
 800434c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004352:	f043 0204 	orr.w	r2, r3, #4
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d003      	beq.n	8004368 <I2C_Slave_ISR_IT+0xda>
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004366:	d17e      	bne.n	8004466 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800436c:	4619      	mov	r1, r3
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 facc 	bl	800490c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004374:	e077      	b.n	8004466 <I2C_Slave_ISR_IT+0x1d8>
 8004376:	e076      	b.n	8004466 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f003 0304 	and.w	r3, r3, #4
 800437e:	2b00      	cmp	r3, #0
 8004380:	d02f      	beq.n	80043e2 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8004388:	2b00      	cmp	r3, #0
 800438a:	d02a      	beq.n	80043e2 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004390:	b29b      	uxth	r3, r3
 8004392:	2b00      	cmp	r3, #0
 8004394:	d018      	beq.n	80043c8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	1c5a      	adds	r2, r3, #1
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b2:	3b01      	subs	r3, #1
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d14b      	bne.n	800446a <I2C_Slave_ISR_IT+0x1dc>
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80043d8:	d047      	beq.n	800446a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 f8d3 	bl	8004586 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80043e0:	e043      	b.n	800446a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	f003 0308 	and.w	r3, r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d009      	beq.n	8004400 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80043f6:	6939      	ldr	r1, [r7, #16]
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f840 	bl	800447e <I2C_ITAddrCplt>
 80043fe:	e035      	b.n	800446c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d030      	beq.n	800446c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8004410:	2b00      	cmp	r3, #0
 8004412:	d02b      	beq.n	800446c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004418:	b29b      	uxth	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d018      	beq.n	8004450 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	781a      	ldrb	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	1c5a      	adds	r2, r3, #1
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004438:	b29b      	uxth	r3, r3
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004446:	3b01      	subs	r3, #1
 8004448:	b29a      	uxth	r2, r3
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	851a      	strh	r2, [r3, #40]	; 0x28
 800444e:	e00d      	b.n	800446c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004456:	d002      	beq.n	800445e <I2C_Slave_ISR_IT+0x1d0>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d106      	bne.n	800446c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800445e:	68f8      	ldr	r0, [r7, #12]
 8004460:	f000 f891 	bl	8004586 <I2C_ITSlaveSeqCplt>
 8004464:	e002      	b.n	800446c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8004466:	bf00      	nop
 8004468:	e000      	b.n	800446c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800446a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004474:	2300      	movs	r3, #0
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800447e:	b580      	push	{r7, lr}
 8004480:	b084      	sub	sp, #16
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
 8004486:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004494:	2b28      	cmp	r3, #40	; 0x28
 8004496:	d16a      	bne.n	800456e <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699b      	ldr	r3, [r3, #24]
 800449e:	0c1b      	lsrs	r3, r3, #16
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	f003 0301 	and.w	r3, r3, #1
 80044a6:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	0c1b      	lsrs	r3, r3, #16
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80044b6:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	b29b      	uxth	r3, r3
 80044c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80044c4:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80044d2:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b02      	cmp	r3, #2
 80044da:	d138      	bne.n	800454e <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80044dc:	897b      	ldrh	r3, [r7, #10]
 80044de:	09db      	lsrs	r3, r3, #7
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	89bb      	ldrh	r3, [r7, #12]
 80044e4:	4053      	eors	r3, r2
 80044e6:	b29b      	uxth	r3, r3
 80044e8:	f003 0306 	and.w	r3, r3, #6
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11c      	bne.n	800452a <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80044f0:	897b      	ldrh	r3, [r7, #10]
 80044f2:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004502:	2b02      	cmp	r3, #2
 8004504:	d13b      	bne.n	800457e <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	2208      	movs	r2, #8
 8004512:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800451c:	89ba      	ldrh	r2, [r7, #12]
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	4619      	mov	r1, r3
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff fe87 	bl	8004236 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004528:	e029      	b.n	800457e <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800452a:	893b      	ldrh	r3, [r7, #8]
 800452c:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800452e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f000 fdb0 	bl	8005098 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004540:	89ba      	ldrh	r2, [r7, #12]
 8004542:	7bfb      	ldrb	r3, [r7, #15]
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f7ff fe75 	bl	8004236 <HAL_I2C_AddrCallback>
}
 800454c:	e017      	b.n	800457e <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800454e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004552:	6878      	ldr	r0, [r7, #4]
 8004554:	f000 fda0 	bl	8005098 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004560:	89ba      	ldrh	r2, [r7, #12]
 8004562:	7bfb      	ldrb	r3, [r7, #15]
 8004564:	4619      	mov	r1, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe65 	bl	8004236 <HAL_I2C_AddrCallback>
}
 800456c:	e007      	b.n	800457e <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	2208      	movs	r2, #8
 8004574:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800457e:	bf00      	nop
 8004580:	3710      	adds	r7, #16
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b084      	sub	sp, #16
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	e00c      	b.n	80045d4 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d007      	beq.n	80045d4 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045d2:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	2b29      	cmp	r3, #41	; 0x29
 80045de:	d112      	bne.n	8004606 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2228      	movs	r2, #40	; 0x28
 80045e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2221      	movs	r2, #33	; 0x21
 80045ec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80045ee:	2101      	movs	r1, #1
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fd51 	bl	8005098 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f7ff fe05 	bl	800420e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004604:	e017      	b.n	8004636 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800460c:	b2db      	uxtb	r3, r3
 800460e:	2b2a      	cmp	r3, #42	; 0x2a
 8004610:	d111      	bne.n	8004636 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2228      	movs	r2, #40	; 0x28
 8004616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2222      	movs	r2, #34	; 0x22
 800461e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004620:	2102      	movs	r1, #2
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 fd38 	bl	8005098 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fdf6 	bl	8004222 <HAL_I2C_SlaveRxCpltCallback>
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b086      	sub	sp, #24
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800465c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	2220      	movs	r2, #32
 8004664:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004666:	7bfb      	ldrb	r3, [r7, #15]
 8004668:	2b21      	cmp	r3, #33	; 0x21
 800466a:	d002      	beq.n	8004672 <I2C_ITSlaveCplt+0x32>
 800466c:	7bfb      	ldrb	r3, [r7, #15]
 800466e:	2b29      	cmp	r3, #41	; 0x29
 8004670:	d108      	bne.n	8004684 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004672:	f248 0101 	movw	r1, #32769	; 0x8001
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fd0e 	bl	8005098 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2221      	movs	r2, #33	; 0x21
 8004680:	631a      	str	r2, [r3, #48]	; 0x30
 8004682:	e019      	b.n	80046b8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b22      	cmp	r3, #34	; 0x22
 8004688:	d002      	beq.n	8004690 <I2C_ITSlaveCplt+0x50>
 800468a:	7bfb      	ldrb	r3, [r7, #15]
 800468c:	2b2a      	cmp	r3, #42	; 0x2a
 800468e:	d108      	bne.n	80046a2 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004690:	f248 0102 	movw	r1, #32770	; 0x8002
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fcff 	bl	8005098 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2222      	movs	r2, #34	; 0x22
 800469e:	631a      	str	r2, [r3, #48]	; 0x30
 80046a0:	e00a      	b.n	80046b8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
 80046a4:	2b28      	cmp	r3, #40	; 0x28
 80046a6:	d107      	bne.n	80046b8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80046a8:	f248 0103 	movw	r1, #32771	; 0x8003
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fcf3 	bl	8005098 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	685a      	ldr	r2, [r3, #4]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046c6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	6859      	ldr	r1, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	4b62      	ldr	r3, [pc, #392]	; (800485c <I2C_ITSlaveCplt+0x21c>)
 80046d4:	400b      	ands	r3, r1
 80046d6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f000 fa2e 	bl	8004b3a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d013      	beq.n	8004710 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046f6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d01f      	beq.n	8004740 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	b29a      	uxth	r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800470e:	e017      	b.n	8004740 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004710:	693b      	ldr	r3, [r7, #16]
 8004712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d012      	beq.n	8004740 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004728:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d006      	beq.n	8004740 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	b29a      	uxth	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 0304 	and.w	r3, r3, #4
 8004746:	2b00      	cmp	r3, #0
 8004748:	d020      	beq.n	800478c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f023 0304 	bic.w	r3, r3, #4
 8004750:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	b2d2      	uxtb	r2, r2
 800475e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476e:	2b00      	cmp	r3, #0
 8004770:	d00c      	beq.n	800478c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	3b01      	subs	r3, #1
 8004778:	b29a      	uxth	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004782:	b29b      	uxth	r3, r3
 8004784:	3b01      	subs	r3, #1
 8004786:	b29a      	uxth	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004790:	b29b      	uxth	r3, r3
 8004792:	2b00      	cmp	r3, #0
 8004794:	d005      	beq.n	80047a2 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479a:	f043 0204 	orr.w	r2, r3, #4
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2200      	movs	r2, #0
 80047a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d010      	beq.n	80047da <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047bc:	4619      	mov	r1, r3
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8a4 	bl	800490c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	2b28      	cmp	r3, #40	; 0x28
 80047ce:	d141      	bne.n	8004854 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80047d0:	6979      	ldr	r1, [r7, #20]
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f846 	bl	8004864 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047d8:	e03c      	b.n	8004854 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047e2:	d014      	beq.n	800480e <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff fece 	bl	8004586 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a1c      	ldr	r2, [pc, #112]	; (8004860 <I2C_ITSlaveCplt+0x220>)
 80047ee:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff fd23 	bl	8004252 <HAL_I2C_ListenCpltCallback>
}
 800480c:	e022      	b.n	8004854 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004814:	b2db      	uxtb	r3, r3
 8004816:	2b22      	cmp	r3, #34	; 0x22
 8004818:	d10e      	bne.n	8004838 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2220      	movs	r2, #32
 800481e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2200      	movs	r2, #0
 800482c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7ff fcf6 	bl	8004222 <HAL_I2C_SlaveRxCpltCallback>
}
 8004836:	e00d      	b.n	8004854 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2220      	movs	r2, #32
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7ff fcdd 	bl	800420e <HAL_I2C_SlaveTxCpltCallback>
}
 8004854:	bf00      	nop
 8004856:	3718      	adds	r7, #24
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	fe00e800 	.word	0xfe00e800
 8004860:	ffff0000 	.word	0xffff0000

08004864 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a25      	ldr	r2, [pc, #148]	; (8004908 <I2C_ITListenCplt+0xa4>)
 8004872:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2200      	movs	r2, #0
 8004878:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	f003 0304 	and.w	r3, r3, #4
 8004896:	2b00      	cmp	r3, #0
 8004898:	d022      	beq.n	80048e0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d012      	beq.n	80048e0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048be:	3b01      	subs	r3, #1
 80048c0:	b29a      	uxth	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ca:	b29b      	uxth	r3, r3
 80048cc:	3b01      	subs	r3, #1
 80048ce:	b29a      	uxth	r2, r3
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80048e0:	f248 0103 	movw	r1, #32771	; 0x8003
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 fbd7 	bl	8005098 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2210      	movs	r2, #16
 80048f0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80048fa:	6878      	ldr	r0, [r7, #4]
 80048fc:	f7ff fca9 	bl	8004252 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004900:	bf00      	nop
 8004902:	3708      	adds	r7, #8
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	ffff0000 	.word	0xffff0000

0800490c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800491c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a6d      	ldr	r2, [pc, #436]	; (8004ae0 <I2C_ITError+0x1d4>)
 800492a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800493e:	7bfb      	ldrb	r3, [r7, #15]
 8004940:	2b28      	cmp	r3, #40	; 0x28
 8004942:	d005      	beq.n	8004950 <I2C_ITError+0x44>
 8004944:	7bfb      	ldrb	r3, [r7, #15]
 8004946:	2b29      	cmp	r3, #41	; 0x29
 8004948:	d002      	beq.n	8004950 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800494a:	7bfb      	ldrb	r3, [r7, #15]
 800494c:	2b2a      	cmp	r3, #42	; 0x2a
 800494e:	d10b      	bne.n	8004968 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004950:	2103      	movs	r1, #3
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f000 fba0 	bl	8005098 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2228      	movs	r2, #40	; 0x28
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a60      	ldr	r2, [pc, #384]	; (8004ae4 <I2C_ITError+0x1d8>)
 8004964:	635a      	str	r2, [r3, #52]	; 0x34
 8004966:	e030      	b.n	80049ca <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004968:	f248 0103 	movw	r1, #32771	; 0x8003
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f000 fb93 	bl	8005098 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f8e1 	bl	8004b3a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800497e:	b2db      	uxtb	r3, r3
 8004980:	2b60      	cmp	r3, #96	; 0x60
 8004982:	d01f      	beq.n	80049c4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699b      	ldr	r3, [r3, #24]
 8004992:	f003 0320 	and.w	r3, r3, #32
 8004996:	2b20      	cmp	r3, #32
 8004998:	d114      	bne.n	80049c4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	699b      	ldr	r3, [r3, #24]
 80049a0:	f003 0310 	and.w	r3, r3, #16
 80049a4:	2b10      	cmp	r3, #16
 80049a6:	d109      	bne.n	80049bc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	2210      	movs	r2, #16
 80049ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049b4:	f043 0204 	orr.w	r2, r3, #4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2220      	movs	r2, #32
 80049c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d039      	beq.n	8004a4c <I2C_ITError+0x140>
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	2b11      	cmp	r3, #17
 80049dc:	d002      	beq.n	80049e4 <I2C_ITError+0xd8>
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b21      	cmp	r3, #33	; 0x21
 80049e2:	d133      	bne.n	8004a4c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049f2:	d107      	bne.n	8004a04 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a02:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7fe ff51 	bl	80038b0 <HAL_DMA_GetState>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d017      	beq.n	8004a44 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a18:	4a33      	ldr	r2, [pc, #204]	; (8004ae8 <I2C_ITError+0x1dc>)
 8004a1a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f7fe fe51 	bl	80036d0 <HAL_DMA_Abort_IT>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d04d      	beq.n	8004ad0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a3e:	4610      	mov	r0, r2
 8004a40:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a42:	e045      	b.n	8004ad0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f000 f851 	bl	8004aec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004a4a:	e041      	b.n	8004ad0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d039      	beq.n	8004ac8 <I2C_ITError+0x1bc>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b12      	cmp	r3, #18
 8004a58:	d002      	beq.n	8004a60 <I2C_ITError+0x154>
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b22      	cmp	r3, #34	; 0x22
 8004a5e:	d133      	bne.n	8004ac8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a6e:	d107      	bne.n	8004a80 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004a7e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a84:	4618      	mov	r0, r3
 8004a86:	f7fe ff13 	bl	80038b0 <HAL_DMA_GetState>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d017      	beq.n	8004ac0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <I2C_ITError+0x1dc>)
 8004a96:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fe fe13 	bl	80036d0 <HAL_DMA_Abort_IT>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d011      	beq.n	8004ad4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004aba:	4610      	mov	r0, r2
 8004abc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004abe:	e009      	b.n	8004ad4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f000 f813 	bl	8004aec <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ac6:	e005      	b.n	8004ad4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f80f 	bl	8004aec <I2C_TreatErrorCallback>
  }
}
 8004ace:	e002      	b.n	8004ad6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004ad4:	bf00      	nop
}
 8004ad6:	bf00      	nop
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	ffff0000 	.word	0xffff0000
 8004ae4:	0800428f 	.word	0x0800428f
 8004ae8:	08004b83 	.word	0x08004b83

08004aec <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b082      	sub	sp, #8
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afa:	b2db      	uxtb	r3, r3
 8004afc:	2b60      	cmp	r3, #96	; 0x60
 8004afe:	d10e      	bne.n	8004b1e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2220      	movs	r2, #32
 8004b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7ff fbaf 	bl	800427a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004b1c:	e009      	b.n	8004b32 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fb9a 	bl	8004266 <HAL_I2C_ErrorCallback>
}
 8004b32:	bf00      	nop
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	699b      	ldr	r3, [r3, #24]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d103      	bne.n	8004b58 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2200      	movs	r2, #0
 8004b56:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	699b      	ldr	r3, [r3, #24]
 8004b5e:	f003 0301 	and.w	r3, r3, #1
 8004b62:	2b01      	cmp	r3, #1
 8004b64:	d007      	beq.n	8004b76 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	699a      	ldr	r2, [r3, #24]
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f042 0201 	orr.w	r2, r2, #1
 8004b74:	619a      	str	r2, [r3, #24]
  }
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d003      	beq.n	8004ba0 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bac:	2200      	movs	r2, #0
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004bb0:	68f8      	ldr	r0, [r7, #12]
 8004bb2:	f7ff ff9b 	bl	8004aec <I2C_TreatErrorCallback>
}
 8004bb6:	bf00      	nop
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	603b      	str	r3, [r7, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004bce:	e031      	b.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d02d      	beq.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bd8:	f7fd f970 	bl	8001ebc <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d302      	bcc.n	8004bee <I2C_WaitOnFlagUntilTimeout+0x30>
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d122      	bne.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	699a      	ldr	r2, [r3, #24]
 8004bf4:	68bb      	ldr	r3, [r7, #8]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	68ba      	ldr	r2, [r7, #8]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	bf0c      	ite	eq
 8004bfe:	2301      	moveq	r3, #1
 8004c00:	2300      	movne	r3, #0
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	461a      	mov	r2, r3
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d113      	bne.n	8004c34 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c10:	f043 0220 	orr.w	r2, r3, #32
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2220      	movs	r2, #32
 8004c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e00f      	b.n	8004c54 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	699a      	ldr	r2, [r3, #24]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	68ba      	ldr	r2, [r7, #8]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	bf0c      	ite	eq
 8004c44:	2301      	moveq	r3, #1
 8004c46:	2300      	movne	r3, #0
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	79fb      	ldrb	r3, [r7, #7]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d0be      	beq.n	8004bd0 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3710      	adds	r7, #16
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	bd80      	pop	{r7, pc}

08004c5c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	60f8      	str	r0, [r7, #12]
 8004c64:	60b9      	str	r1, [r7, #8]
 8004c66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004c68:	e033      	b.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	68b9      	ldr	r1, [r7, #8]
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 f900 	bl	8004e74 <I2C_IsErrorOccurred>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e031      	b.n	8004ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c84:	d025      	beq.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fd f919 	bl	8001ebc <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	68ba      	ldr	r2, [r7, #8]
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004c96:	68bb      	ldr	r3, [r7, #8]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d11a      	bne.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	699b      	ldr	r3, [r3, #24]
 8004ca2:	f003 0302 	and.w	r3, r3, #2
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d013      	beq.n	8004cd2 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cae:	f043 0220 	orr.w	r2, r3, #32
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2220      	movs	r2, #32
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	e007      	b.n	8004ce2 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	699b      	ldr	r3, [r3, #24]
 8004cd8:	f003 0302 	and.w	r3, r3, #2
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d1c4      	bne.n	8004c6a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}

08004cea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004cea:	b580      	push	{r7, lr}
 8004cec:	b084      	sub	sp, #16
 8004cee:	af00      	add	r7, sp, #0
 8004cf0:	60f8      	str	r0, [r7, #12]
 8004cf2:	60b9      	str	r1, [r7, #8]
 8004cf4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004cf6:	e02f      	b.n	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	68b9      	ldr	r1, [r7, #8]
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f8b9 	bl	8004e74 <I2C_IsErrorOccurred>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	e02d      	b.n	8004d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d0c:	f7fd f8d6 	bl	8001ebc <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d302      	bcc.n	8004d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d11a      	bne.n	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	f003 0320 	and.w	r3, r3, #32
 8004d2c:	2b20      	cmp	r3, #32
 8004d2e:	d013      	beq.n	8004d58 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d34:	f043 0220 	orr.w	r2, r3, #32
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2220      	movs	r2, #32
 8004d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	e007      	b.n	8004d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	699b      	ldr	r3, [r3, #24]
 8004d5e:	f003 0320 	and.w	r3, r3, #32
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	d1c8      	bne.n	8004cf8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3710      	adds	r7, #16
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d7c:	e06b      	b.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	68b9      	ldr	r1, [r7, #8]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f876 	bl	8004e74 <I2C_IsErrorOccurred>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e069      	b.n	8004e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	699b      	ldr	r3, [r3, #24]
 8004d98:	f003 0320 	and.w	r3, r3, #32
 8004d9c:	2b20      	cmp	r3, #32
 8004d9e:	d138      	bne.n	8004e12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	f003 0304 	and.w	r3, r3, #4
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d105      	bne.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e055      	b.n	8004e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	699b      	ldr	r3, [r3, #24]
 8004dc0:	f003 0310 	and.w	r3, r3, #16
 8004dc4:	2b10      	cmp	r3, #16
 8004dc6:	d107      	bne.n	8004dd8 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2210      	movs	r2, #16
 8004dce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	2204      	movs	r2, #4
 8004dd4:	645a      	str	r2, [r3, #68]	; 0x44
 8004dd6:	e002      	b.n	8004dde <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2220      	movs	r2, #32
 8004de4:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6859      	ldr	r1, [r3, #4]
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	4b1f      	ldr	r3, [pc, #124]	; (8004e70 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004df2:	400b      	ands	r3, r1
 8004df4:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e029      	b.n	8004e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fd f853 	bl	8001ebc <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d116      	bne.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	f003 0304 	and.w	r3, r3, #4
 8004e32:	2b04      	cmp	r3, #4
 8004e34:	d00f      	beq.n	8004e56 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e3a:	f043 0220 	orr.w	r2, r3, #32
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e52:	2301      	movs	r3, #1
 8004e54:	e007      	b.n	8004e66 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	699b      	ldr	r3, [r3, #24]
 8004e5c:	f003 0304 	and.w	r3, r3, #4
 8004e60:	2b04      	cmp	r3, #4
 8004e62:	d18c      	bne.n	8004d7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
 8004e6e:	bf00      	nop
 8004e70:	fe00e800 	.word	0xfe00e800

08004e74 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08a      	sub	sp, #40	; 0x28
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d068      	beq.n	8004f72 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2210      	movs	r2, #16
 8004ea6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ea8:	e049      	b.n	8004f3e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d045      	beq.n	8004f3e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004eb2:	f7fd f803 	bl	8001ebc <HAL_GetTick>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	1ad3      	subs	r3, r2, r3
 8004ebc:	68ba      	ldr	r2, [r7, #8]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	d302      	bcc.n	8004ec8 <I2C_IsErrorOccurred+0x54>
 8004ec2:	68bb      	ldr	r3, [r7, #8]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d13a      	bne.n	8004f3e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ed2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eda:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	699b      	ldr	r3, [r3, #24]
 8004ee2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ee6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004eea:	d121      	bne.n	8004f30 <I2C_IsErrorOccurred+0xbc>
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ef2:	d01d      	beq.n	8004f30 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004ef4:	7cfb      	ldrb	r3, [r7, #19]
 8004ef6:	2b20      	cmp	r3, #32
 8004ef8:	d01a      	beq.n	8004f30 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f08:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004f0a:	f7fc ffd7 	bl	8001ebc <HAL_GetTick>
 8004f0e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f10:	e00e      	b.n	8004f30 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004f12:	f7fc ffd3 	bl	8001ebc <HAL_GetTick>
 8004f16:	4602      	mov	r2, r0
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2b19      	cmp	r3, #25
 8004f1e:	d907      	bls.n	8004f30 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004f20:	6a3b      	ldr	r3, [r7, #32]
 8004f22:	f043 0320 	orr.w	r3, r3, #32
 8004f26:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004f2e:	e006      	b.n	8004f3e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	f003 0320 	and.w	r3, r3, #32
 8004f3a:	2b20      	cmp	r3, #32
 8004f3c:	d1e9      	bne.n	8004f12 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	699b      	ldr	r3, [r3, #24]
 8004f44:	f003 0320 	and.w	r3, r3, #32
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d003      	beq.n	8004f54 <I2C_IsErrorOccurred+0xe0>
 8004f4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0aa      	beq.n	8004eaa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004f54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2220      	movs	r2, #32
 8004f62:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004f64:	6a3b      	ldr	r3, [r7, #32]
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d00b      	beq.n	8004f9c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004f84:	6a3b      	ldr	r3, [r7, #32]
 8004f86:	f043 0301 	orr.w	r3, r3, #1
 8004f8a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004f94:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004f9c:	69bb      	ldr	r3, [r7, #24]
 8004f9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d00b      	beq.n	8004fbe <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004fa6:	6a3b      	ldr	r3, [r7, #32]
 8004fa8:	f043 0308 	orr.w	r3, r3, #8
 8004fac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fb6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004fbe:	69bb      	ldr	r3, [r7, #24]
 8004fc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d00b      	beq.n	8004fe0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004fc8:	6a3b      	ldr	r3, [r7, #32]
 8004fca:	f043 0302 	orr.w	r3, r3, #2
 8004fce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fd8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004fe0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01c      	beq.n	8005022 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f7ff fda6 	bl	8004b3a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	6859      	ldr	r1, [r3, #4]
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b0d      	ldr	r3, [pc, #52]	; (8005030 <I2C_IsErrorOccurred+0x1bc>)
 8004ffa:	400b      	ands	r3, r1
 8004ffc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	431a      	orrs	r2, r3
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2220      	movs	r2, #32
 800500e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2200      	movs	r2, #0
 8005016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8005022:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005026:	4618      	mov	r0, r3
 8005028:	3728      	adds	r7, #40	; 0x28
 800502a:	46bd      	mov	sp, r7
 800502c:	bd80      	pop	{r7, pc}
 800502e:	bf00      	nop
 8005030:	fe00e800 	.word	0xfe00e800

08005034 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005034:	b480      	push	{r7}
 8005036:	b087      	sub	sp, #28
 8005038:	af00      	add	r7, sp, #0
 800503a:	60f8      	str	r0, [r7, #12]
 800503c:	607b      	str	r3, [r7, #4]
 800503e:	460b      	mov	r3, r1
 8005040:	817b      	strh	r3, [r7, #10]
 8005042:	4613      	mov	r3, r2
 8005044:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005046:	897b      	ldrh	r3, [r7, #10]
 8005048:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800504c:	7a7b      	ldrb	r3, [r7, #9]
 800504e:	041b      	lsls	r3, r3, #16
 8005050:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005054:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	4313      	orrs	r3, r2
 800505e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005062:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	0d5b      	lsrs	r3, r3, #21
 800506e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8005072:	4b08      	ldr	r3, [pc, #32]	; (8005094 <I2C_TransferConfig+0x60>)
 8005074:	430b      	orrs	r3, r1
 8005076:	43db      	mvns	r3, r3
 8005078:	ea02 0103 	and.w	r1, r2, r3
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	697a      	ldr	r2, [r7, #20]
 8005082:	430a      	orrs	r2, r1
 8005084:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8005086:	bf00      	nop
 8005088:	371c      	adds	r7, #28
 800508a:	46bd      	mov	sp, r7
 800508c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop
 8005094:	03ff63ff 	.word	0x03ff63ff

08005098 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	460b      	mov	r3, r1
 80050a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80050a8:	887b      	ldrh	r3, [r7, #2]
 80050aa:	f003 0301 	and.w	r3, r3, #1
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00f      	beq.n	80050d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80050b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050c6:	2b28      	cmp	r3, #40	; 0x28
 80050c8:	d003      	beq.n	80050d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80050d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80050d2:	887b      	ldrh	r3, [r7, #2]
 80050d4:	f003 0302 	and.w	r3, r3, #2
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00f      	beq.n	80050fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80050e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ea:	b2db      	uxtb	r3, r3
 80050ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80050f0:	2b28      	cmp	r3, #40	; 0x28
 80050f2:	d003      	beq.n	80050fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80050fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80050fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8005100:	2b00      	cmp	r3, #0
 8005102:	da03      	bge.n	800510c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800510a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800510c:	887b      	ldrh	r3, [r7, #2]
 800510e:	2b10      	cmp	r3, #16
 8005110:	d103      	bne.n	800511a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005118:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800511a:	887b      	ldrh	r3, [r7, #2]
 800511c:	2b20      	cmp	r3, #32
 800511e:	d103      	bne.n	8005128 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f043 0320 	orr.w	r3, r3, #32
 8005126:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005128:	887b      	ldrh	r3, [r7, #2]
 800512a:	2b40      	cmp	r3, #64	; 0x40
 800512c:	d103      	bne.n	8005136 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005134:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6819      	ldr	r1, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	43da      	mvns	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	400a      	ands	r2, r1
 8005146:	601a      	str	r2, [r3, #0]
}
 8005148:	bf00      	nop
 800514a:	3714      	adds	r7, #20
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005154:	b480      	push	{r7}
 8005156:	b083      	sub	sp, #12
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005164:	b2db      	uxtb	r3, r3
 8005166:	2b20      	cmp	r3, #32
 8005168:	d138      	bne.n	80051dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005170:	2b01      	cmp	r3, #1
 8005172:	d101      	bne.n	8005178 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005174:	2302      	movs	r3, #2
 8005176:	e032      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2201      	movs	r2, #1
 800517c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2224      	movs	r2, #36	; 0x24
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0201 	bic.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	6819      	ldr	r1, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	683a      	ldr	r2, [r7, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f042 0201 	orr.w	r2, r2, #1
 80051c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2220      	movs	r2, #32
 80051cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80051d8:	2300      	movs	r3, #0
 80051da:	e000      	b.n	80051de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051dc:	2302      	movs	r3, #2
  }
}
 80051de:	4618      	mov	r0, r3
 80051e0:	370c      	adds	r7, #12
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	2b20      	cmp	r3, #32
 80051fe:	d139      	bne.n	8005274 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005206:	2b01      	cmp	r3, #1
 8005208:	d101      	bne.n	800520e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800520a:	2302      	movs	r3, #2
 800520c:	e033      	b.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2224      	movs	r2, #36	; 0x24
 800521a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681a      	ldr	r2, [r3, #0]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 0201 	bic.w	r2, r2, #1
 800522c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800523c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	021b      	lsls	r3, r3, #8
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f042 0201 	orr.w	r2, r2, #1
 800525e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e000      	b.n	8005276 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005274:	2302      	movs	r3, #2
  }
}
 8005276:	4618      	mov	r0, r3
 8005278:	3714      	adds	r7, #20
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr
	...

08005284 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005284:	b480      	push	{r7}
 8005286:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005288:	4b05      	ldr	r3, [pc, #20]	; (80052a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a04      	ldr	r2, [pc, #16]	; (80052a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800528e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005292:	6013      	str	r3, [r2, #0]
}
 8005294:	bf00      	nop
 8005296:	46bd      	mov	sp, r7
 8005298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529c:	4770      	bx	lr
 800529e:	bf00      	nop
 80052a0:	40007000 	.word	0x40007000

080052a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80052a8:	4b04      	ldr	r3, [pc, #16]	; (80052bc <HAL_PWREx_GetVoltageRange+0x18>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	40007000 	.word	0x40007000

080052c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b085      	sub	sp, #20
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ce:	d130      	bne.n	8005332 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80052d0:	4b23      	ldr	r3, [pc, #140]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052dc:	d038      	beq.n	8005350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052de:	4b20      	ldr	r3, [pc, #128]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052e6:	4a1e      	ldr	r2, [pc, #120]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80052e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80052ee:	4b1d      	ldr	r3, [pc, #116]	; (8005364 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	2232      	movs	r2, #50	; 0x32
 80052f4:	fb02 f303 	mul.w	r3, r2, r3
 80052f8:	4a1b      	ldr	r2, [pc, #108]	; (8005368 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80052fa:	fba2 2303 	umull	r2, r3, r2, r3
 80052fe:	0c9b      	lsrs	r3, r3, #18
 8005300:	3301      	adds	r3, #1
 8005302:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005304:	e002      	b.n	800530c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	3b01      	subs	r3, #1
 800530a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800530c:	4b14      	ldr	r3, [pc, #80]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800530e:	695b      	ldr	r3, [r3, #20]
 8005310:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005314:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005318:	d102      	bne.n	8005320 <HAL_PWREx_ControlVoltageScaling+0x60>
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d1f2      	bne.n	8005306 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005320:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005322:	695b      	ldr	r3, [r3, #20]
 8005324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005328:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532c:	d110      	bne.n	8005350 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e00f      	b.n	8005352 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005332:	4b0b      	ldr	r3, [pc, #44]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800533a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800533e:	d007      	beq.n	8005350 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005340:	4b07      	ldr	r3, [pc, #28]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005348:	4a05      	ldr	r2, [pc, #20]	; (8005360 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800534a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800534e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005350:	2300      	movs	r3, #0
}
 8005352:	4618      	mov	r0, r3
 8005354:	3714      	adds	r7, #20
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	40007000 	.word	0x40007000
 8005364:	20000004 	.word	0x20000004
 8005368:	431bde83 	.word	0x431bde83

0800536c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b088      	sub	sp, #32
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	f000 bc02 	b.w	8005b84 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005380:	4b96      	ldr	r3, [pc, #600]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	f003 030c 	and.w	r3, r3, #12
 8005388:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800538a:	4b94      	ldr	r3, [pc, #592]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	f003 0303 	and.w	r3, r3, #3
 8005392:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0310 	and.w	r3, r3, #16
 800539c:	2b00      	cmp	r3, #0
 800539e:	f000 80e4 	beq.w	800556a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d007      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4c>
 80053a8:	69bb      	ldr	r3, [r7, #24]
 80053aa:	2b0c      	cmp	r3, #12
 80053ac:	f040 808b 	bne.w	80054c6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	f040 8087 	bne.w	80054c6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80053b8:	4b88      	ldr	r3, [pc, #544]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_OscConfig+0x64>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	699b      	ldr	r3, [r3, #24]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e3d9      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1a      	ldr	r2, [r3, #32]
 80053d4:	4b81      	ldr	r3, [pc, #516]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0308 	and.w	r3, r3, #8
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d004      	beq.n	80053ea <HAL_RCC_OscConfig+0x7e>
 80053e0:	4b7e      	ldr	r3, [pc, #504]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053e8:	e005      	b.n	80053f6 <HAL_RCC_OscConfig+0x8a>
 80053ea:	4b7c      	ldr	r3, [pc, #496]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80053ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053f0:	091b      	lsrs	r3, r3, #4
 80053f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d223      	bcs.n	8005442 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fd8c 	bl	8005f1c <RCC_SetFlashLatencyFromMSIRange>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d001      	beq.n	800540e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800540a:	2301      	movs	r3, #1
 800540c:	e3ba      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800540e:	4b73      	ldr	r3, [pc, #460]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a72      	ldr	r2, [pc, #456]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005414:	f043 0308 	orr.w	r3, r3, #8
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	4b70      	ldr	r3, [pc, #448]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	496d      	ldr	r1, [pc, #436]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005428:	4313      	orrs	r3, r2
 800542a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800542c:	4b6b      	ldr	r3, [pc, #428]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
 8005438:	021b      	lsls	r3, r3, #8
 800543a:	4968      	ldr	r1, [pc, #416]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800543c:	4313      	orrs	r3, r2
 800543e:	604b      	str	r3, [r1, #4]
 8005440:	e025      	b.n	800548e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005442:	4b66      	ldr	r3, [pc, #408]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a65      	ldr	r2, [pc, #404]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005448:	f043 0308 	orr.w	r3, r3, #8
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4b63      	ldr	r3, [pc, #396]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	4960      	ldr	r1, [pc, #384]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800545c:	4313      	orrs	r3, r2
 800545e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005460:	4b5e      	ldr	r3, [pc, #376]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	021b      	lsls	r3, r3, #8
 800546e:	495b      	ldr	r1, [pc, #364]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005470:	4313      	orrs	r3, r2
 8005472:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005474:	69bb      	ldr	r3, [r7, #24]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d109      	bne.n	800548e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a1b      	ldr	r3, [r3, #32]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fd4c 	bl	8005f1c <RCC_SetFlashLatencyFromMSIRange>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d001      	beq.n	800548e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e37a      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800548e:	f000 fc81 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005492:	4602      	mov	r2, r0
 8005494:	4b51      	ldr	r3, [pc, #324]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	091b      	lsrs	r3, r3, #4
 800549a:	f003 030f 	and.w	r3, r3, #15
 800549e:	4950      	ldr	r1, [pc, #320]	; (80055e0 <HAL_RCC_OscConfig+0x274>)
 80054a0:	5ccb      	ldrb	r3, [r1, r3]
 80054a2:	f003 031f 	and.w	r3, r3, #31
 80054a6:	fa22 f303 	lsr.w	r3, r2, r3
 80054aa:	4a4e      	ldr	r2, [pc, #312]	; (80055e4 <HAL_RCC_OscConfig+0x278>)
 80054ac:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80054ae:	4b4e      	ldr	r3, [pc, #312]	; (80055e8 <HAL_RCC_OscConfig+0x27c>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f7fc fcb2 	bl	8001e1c <HAL_InitTick>
 80054b8:	4603      	mov	r3, r0
 80054ba:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80054bc:	7bfb      	ldrb	r3, [r7, #15]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d052      	beq.n	8005568 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80054c2:	7bfb      	ldrb	r3, [r7, #15]
 80054c4:	e35e      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	699b      	ldr	r3, [r3, #24]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d032      	beq.n	8005534 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80054ce:	4b43      	ldr	r3, [pc, #268]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a42      	ldr	r2, [pc, #264]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80054d4:	f043 0301 	orr.w	r3, r3, #1
 80054d8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80054da:	f7fc fcef 	bl	8001ebc <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80054e2:	f7fc fceb 	bl	8001ebc <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e347      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80054f4:	4b39      	ldr	r3, [pc, #228]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0302 	and.w	r3, r3, #2
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005500:	4b36      	ldr	r3, [pc, #216]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a35      	ldr	r2, [pc, #212]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005506:	f043 0308 	orr.w	r3, r3, #8
 800550a:	6013      	str	r3, [r2, #0]
 800550c:	4b33      	ldr	r3, [pc, #204]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	4930      	ldr	r1, [pc, #192]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800551a:	4313      	orrs	r3, r2
 800551c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800551e:	4b2f      	ldr	r3, [pc, #188]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	021b      	lsls	r3, r3, #8
 800552c:	492b      	ldr	r1, [pc, #172]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800552e:	4313      	orrs	r3, r2
 8005530:	604b      	str	r3, [r1, #4]
 8005532:	e01a      	b.n	800556a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005534:	4b29      	ldr	r3, [pc, #164]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a28      	ldr	r2, [pc, #160]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800553a:	f023 0301 	bic.w	r3, r3, #1
 800553e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005540:	f7fc fcbc 	bl	8001ebc <HAL_GetTick>
 8005544:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005546:	e008      	b.n	800555a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005548:	f7fc fcb8 	bl	8001ebc <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d901      	bls.n	800555a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	e314      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800555a:	4b20      	ldr	r3, [pc, #128]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f0      	bne.n	8005548 <HAL_RCC_OscConfig+0x1dc>
 8005566:	e000      	b.n	800556a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0301 	and.w	r3, r3, #1
 8005572:	2b00      	cmp	r3, #0
 8005574:	d073      	beq.n	800565e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d005      	beq.n	8005588 <HAL_RCC_OscConfig+0x21c>
 800557c:	69bb      	ldr	r3, [r7, #24]
 800557e:	2b0c      	cmp	r3, #12
 8005580:	d10e      	bne.n	80055a0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	2b03      	cmp	r3, #3
 8005586:	d10b      	bne.n	80055a0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005588:	4b14      	ldr	r3, [pc, #80]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d063      	beq.n	800565c <HAL_RCC_OscConfig+0x2f0>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d15f      	bne.n	800565c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800559c:	2301      	movs	r3, #1
 800559e:	e2f1      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055a8:	d106      	bne.n	80055b8 <HAL_RCC_OscConfig+0x24c>
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	4a0b      	ldr	r2, [pc, #44]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	e025      	b.n	8005604 <HAL_RCC_OscConfig+0x298>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80055c0:	d114      	bne.n	80055ec <HAL_RCC_OscConfig+0x280>
 80055c2:	4b06      	ldr	r3, [pc, #24]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a05      	ldr	r2, [pc, #20]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80055cc:	6013      	str	r3, [r2, #0]
 80055ce:	4b03      	ldr	r3, [pc, #12]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a02      	ldr	r2, [pc, #8]	; (80055dc <HAL_RCC_OscConfig+0x270>)
 80055d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80055d8:	6013      	str	r3, [r2, #0]
 80055da:	e013      	b.n	8005604 <HAL_RCC_OscConfig+0x298>
 80055dc:	40021000 	.word	0x40021000
 80055e0:	0800abc0 	.word	0x0800abc0
 80055e4:	20000004 	.word	0x20000004
 80055e8:	20000008 	.word	0x20000008
 80055ec:	4ba0      	ldr	r3, [pc, #640]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a9f      	ldr	r2, [pc, #636]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80055f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055f6:	6013      	str	r3, [r2, #0]
 80055f8:	4b9d      	ldr	r3, [pc, #628]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a9c      	ldr	r2, [pc, #624]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80055fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d013      	beq.n	8005634 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800560c:	f7fc fc56 	bl	8001ebc <HAL_GetTick>
 8005610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005612:	e008      	b.n	8005626 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005614:	f7fc fc52 	bl	8001ebc <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b64      	cmp	r3, #100	; 0x64
 8005620:	d901      	bls.n	8005626 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e2ae      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005626:	4b92      	ldr	r3, [pc, #584]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d0f0      	beq.n	8005614 <HAL_RCC_OscConfig+0x2a8>
 8005632:	e014      	b.n	800565e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005634:	f7fc fc42 	bl	8001ebc <HAL_GetTick>
 8005638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800563a:	e008      	b.n	800564e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800563c:	f7fc fc3e 	bl	8001ebc <HAL_GetTick>
 8005640:	4602      	mov	r2, r0
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	1ad3      	subs	r3, r2, r3
 8005646:	2b64      	cmp	r3, #100	; 0x64
 8005648:	d901      	bls.n	800564e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e29a      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800564e:	4b88      	ldr	r3, [pc, #544]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1f0      	bne.n	800563c <HAL_RCC_OscConfig+0x2d0>
 800565a:	e000      	b.n	800565e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800565c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0302 	and.w	r3, r3, #2
 8005666:	2b00      	cmp	r3, #0
 8005668:	d060      	beq.n	800572c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d005      	beq.n	800567c <HAL_RCC_OscConfig+0x310>
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	2b0c      	cmp	r3, #12
 8005674:	d119      	bne.n	80056aa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d116      	bne.n	80056aa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800567c:	4b7c      	ldr	r3, [pc, #496]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005684:	2b00      	cmp	r3, #0
 8005686:	d005      	beq.n	8005694 <HAL_RCC_OscConfig+0x328>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005690:	2301      	movs	r3, #1
 8005692:	e277      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005694:	4b76      	ldr	r3, [pc, #472]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	691b      	ldr	r3, [r3, #16]
 80056a0:	061b      	lsls	r3, r3, #24
 80056a2:	4973      	ldr	r1, [pc, #460]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056a4:	4313      	orrs	r3, r2
 80056a6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056a8:	e040      	b.n	800572c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d023      	beq.n	80056fa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80056b2:	4b6f      	ldr	r3, [pc, #444]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a6e      	ldr	r2, [pc, #440]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fc fbfd 	bl	8001ebc <HAL_GetTick>
 80056c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c6:	f7fc fbf9 	bl	8001ebc <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e255      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d8:	4b65      	ldr	r3, [pc, #404]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d0f0      	beq.n	80056c6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e4:	4b62      	ldr	r3, [pc, #392]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	061b      	lsls	r3, r3, #24
 80056f2:	495f      	ldr	r1, [pc, #380]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056f4:	4313      	orrs	r3, r2
 80056f6:	604b      	str	r3, [r1, #4]
 80056f8:	e018      	b.n	800572c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056fa:	4b5d      	ldr	r3, [pc, #372]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a5c      	ldr	r2, [pc, #368]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005700:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005706:	f7fc fbd9 	bl	8001ebc <HAL_GetTick>
 800570a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800570c:	e008      	b.n	8005720 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800570e:	f7fc fbd5 	bl	8001ebc <HAL_GetTick>
 8005712:	4602      	mov	r2, r0
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	1ad3      	subs	r3, r2, r3
 8005718:	2b02      	cmp	r3, #2
 800571a:	d901      	bls.n	8005720 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800571c:	2303      	movs	r3, #3
 800571e:	e231      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005720:	4b53      	ldr	r3, [pc, #332]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1f0      	bne.n	800570e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0308 	and.w	r3, r3, #8
 8005734:	2b00      	cmp	r3, #0
 8005736:	d03c      	beq.n	80057b2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	695b      	ldr	r3, [r3, #20]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01c      	beq.n	800577a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005740:	4b4b      	ldr	r3, [pc, #300]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005742:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005746:	4a4a      	ldr	r2, [pc, #296]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005748:	f043 0301 	orr.w	r3, r3, #1
 800574c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005750:	f7fc fbb4 	bl	8001ebc <HAL_GetTick>
 8005754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005756:	e008      	b.n	800576a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005758:	f7fc fbb0 	bl	8001ebc <HAL_GetTick>
 800575c:	4602      	mov	r2, r0
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	1ad3      	subs	r3, r2, r3
 8005762:	2b02      	cmp	r3, #2
 8005764:	d901      	bls.n	800576a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005766:	2303      	movs	r3, #3
 8005768:	e20c      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800576a:	4b41      	ldr	r3, [pc, #260]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800576c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ef      	beq.n	8005758 <HAL_RCC_OscConfig+0x3ec>
 8005778:	e01b      	b.n	80057b2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800577a:	4b3d      	ldr	r3, [pc, #244]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800577c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005780:	4a3b      	ldr	r2, [pc, #236]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005782:	f023 0301 	bic.w	r3, r3, #1
 8005786:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800578a:	f7fc fb97 	bl	8001ebc <HAL_GetTick>
 800578e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005790:	e008      	b.n	80057a4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005792:	f7fc fb93 	bl	8001ebc <HAL_GetTick>
 8005796:	4602      	mov	r2, r0
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2b02      	cmp	r3, #2
 800579e:	d901      	bls.n	80057a4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80057a0:	2303      	movs	r3, #3
 80057a2:	e1ef      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057a4:	4b32      	ldr	r3, [pc, #200]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80057a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057aa:	f003 0302 	and.w	r3, r3, #2
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d1ef      	bne.n	8005792 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 80a6 	beq.w	800590c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057c0:	2300      	movs	r3, #0
 80057c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80057c4:	4b2a      	ldr	r3, [pc, #168]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80057c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d10d      	bne.n	80057ec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057d0:	4b27      	ldr	r3, [pc, #156]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80057d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d4:	4a26      	ldr	r2, [pc, #152]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80057d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057da:	6593      	str	r3, [r2, #88]	; 0x58
 80057dc:	4b24      	ldr	r3, [pc, #144]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 80057de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057e8:	2301      	movs	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ec:	4b21      	ldr	r3, [pc, #132]	; (8005874 <HAL_RCC_OscConfig+0x508>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d118      	bne.n	800582a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057f8:	4b1e      	ldr	r3, [pc, #120]	; (8005874 <HAL_RCC_OscConfig+0x508>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a1d      	ldr	r2, [pc, #116]	; (8005874 <HAL_RCC_OscConfig+0x508>)
 80057fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005802:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005804:	f7fc fb5a 	bl	8001ebc <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800580c:	f7fc fb56 	bl	8001ebc <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e1b2      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800581e:	4b15      	ldr	r3, [pc, #84]	; (8005874 <HAL_RCC_OscConfig+0x508>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d108      	bne.n	8005844 <HAL_RCC_OscConfig+0x4d8>
 8005832:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005834:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005838:	4a0d      	ldr	r2, [pc, #52]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800583a:	f043 0301 	orr.w	r3, r3, #1
 800583e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005842:	e029      	b.n	8005898 <HAL_RCC_OscConfig+0x52c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	2b05      	cmp	r3, #5
 800584a:	d115      	bne.n	8005878 <HAL_RCC_OscConfig+0x50c>
 800584c:	4b08      	ldr	r3, [pc, #32]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	4a07      	ldr	r2, [pc, #28]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005854:	f043 0304 	orr.w	r3, r3, #4
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800585c:	4b04      	ldr	r3, [pc, #16]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 800585e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005862:	4a03      	ldr	r2, [pc, #12]	; (8005870 <HAL_RCC_OscConfig+0x504>)
 8005864:	f043 0301 	orr.w	r3, r3, #1
 8005868:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800586c:	e014      	b.n	8005898 <HAL_RCC_OscConfig+0x52c>
 800586e:	bf00      	nop
 8005870:	40021000 	.word	0x40021000
 8005874:	40007000 	.word	0x40007000
 8005878:	4b9a      	ldr	r3, [pc, #616]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 800587a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587e:	4a99      	ldr	r2, [pc, #612]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005888:	4b96      	ldr	r3, [pc, #600]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 800588a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588e:	4a95      	ldr	r2, [pc, #596]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005890:	f023 0304 	bic.w	r3, r3, #4
 8005894:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d016      	beq.n	80058ce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058a0:	f7fc fb0c 	bl	8001ebc <HAL_GetTick>
 80058a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058a6:	e00a      	b.n	80058be <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058a8:	f7fc fb08 	bl	8001ebc <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	693b      	ldr	r3, [r7, #16]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d901      	bls.n	80058be <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e162      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80058be:	4b89      	ldr	r3, [pc, #548]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 80058c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d0ed      	beq.n	80058a8 <HAL_RCC_OscConfig+0x53c>
 80058cc:	e015      	b.n	80058fa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058ce:	f7fc faf5 	bl	8001ebc <HAL_GetTick>
 80058d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058d4:	e00a      	b.n	80058ec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80058d6:	f7fc faf1 	bl	8001ebc <HAL_GetTick>
 80058da:	4602      	mov	r2, r0
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1ad3      	subs	r3, r2, r3
 80058e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d901      	bls.n	80058ec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80058e8:	2303      	movs	r3, #3
 80058ea:	e14b      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058ec:	4b7d      	ldr	r3, [pc, #500]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	f003 0302 	and.w	r3, r3, #2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1ed      	bne.n	80058d6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058fa:	7ffb      	ldrb	r3, [r7, #31]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d105      	bne.n	800590c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005900:	4b78      	ldr	r3, [pc, #480]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005902:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005904:	4a77      	ldr	r2, [pc, #476]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005906:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800590a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0320 	and.w	r3, r3, #32
 8005914:	2b00      	cmp	r3, #0
 8005916:	d03c      	beq.n	8005992 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01c      	beq.n	800595a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005920:	4b70      	ldr	r3, [pc, #448]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005922:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005926:	4a6f      	ldr	r2, [pc, #444]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005928:	f043 0301 	orr.w	r3, r3, #1
 800592c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005930:	f7fc fac4 	bl	8001ebc <HAL_GetTick>
 8005934:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005936:	e008      	b.n	800594a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005938:	f7fc fac0 	bl	8001ebc <HAL_GetTick>
 800593c:	4602      	mov	r2, r0
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	1ad3      	subs	r3, r2, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d901      	bls.n	800594a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005946:	2303      	movs	r3, #3
 8005948:	e11c      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800594a:	4b66      	ldr	r3, [pc, #408]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 800594c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0ef      	beq.n	8005938 <HAL_RCC_OscConfig+0x5cc>
 8005958:	e01b      	b.n	8005992 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800595a:	4b62      	ldr	r3, [pc, #392]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 800595c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005960:	4a60      	ldr	r2, [pc, #384]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005962:	f023 0301 	bic.w	r3, r3, #1
 8005966:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800596a:	f7fc faa7 	bl	8001ebc <HAL_GetTick>
 800596e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005972:	f7fc faa3 	bl	8001ebc <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e0ff      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005984:	4b57      	ldr	r3, [pc, #348]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	2b00      	cmp	r3, #0
 8005990:	d1ef      	bne.n	8005972 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005996:	2b00      	cmp	r3, #0
 8005998:	f000 80f3 	beq.w	8005b82 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	f040 80c9 	bne.w	8005b38 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80059a6:	4b4f      	ldr	r3, [pc, #316]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059ac:	697b      	ldr	r3, [r7, #20]
 80059ae:	f003 0203 	and.w	r2, r3, #3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d12c      	bne.n	8005a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c4:	3b01      	subs	r3, #1
 80059c6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d123      	bne.n	8005a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80059d8:	429a      	cmp	r2, r3
 80059da:	d11b      	bne.n	8005a14 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d113      	bne.n	8005a14 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059ec:	697b      	ldr	r3, [r7, #20]
 80059ee:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059f6:	085b      	lsrs	r3, r3, #1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d109      	bne.n	8005a14 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0a:	085b      	lsrs	r3, r3, #1
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005a10:	429a      	cmp	r2, r3
 8005a12:	d06b      	beq.n	8005aec <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a14:	69bb      	ldr	r3, [r7, #24]
 8005a16:	2b0c      	cmp	r3, #12
 8005a18:	d062      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005a1a:	4b32      	ldr	r3, [pc, #200]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e0ac      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005a2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a2d      	ldr	r2, [pc, #180]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a34:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005a36:	f7fc fa41 	bl	8001ebc <HAL_GetTick>
 8005a3a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a3c:	e008      	b.n	8005a50 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3e:	f7fc fa3d 	bl	8001ebc <HAL_GetTick>
 8005a42:	4602      	mov	r2, r0
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	1ad3      	subs	r3, r2, r3
 8005a48:	2b02      	cmp	r3, #2
 8005a4a:	d901      	bls.n	8005a50 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005a4c:	2303      	movs	r3, #3
 8005a4e:	e099      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a50:	4b24      	ldr	r3, [pc, #144]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1f0      	bne.n	8005a3e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a5c:	4b21      	ldr	r3, [pc, #132]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a5e:	68da      	ldr	r2, [r3, #12]
 8005a60:	4b21      	ldr	r3, [pc, #132]	; (8005ae8 <HAL_RCC_OscConfig+0x77c>)
 8005a62:	4013      	ands	r3, r2
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a6c:	3a01      	subs	r2, #1
 8005a6e:	0112      	lsls	r2, r2, #4
 8005a70:	4311      	orrs	r1, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a76:	0212      	lsls	r2, r2, #8
 8005a78:	4311      	orrs	r1, r2
 8005a7a:	687a      	ldr	r2, [r7, #4]
 8005a7c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005a7e:	0852      	lsrs	r2, r2, #1
 8005a80:	3a01      	subs	r2, #1
 8005a82:	0552      	lsls	r2, r2, #21
 8005a84:	4311      	orrs	r1, r2
 8005a86:	687a      	ldr	r2, [r7, #4]
 8005a88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a8a:	0852      	lsrs	r2, r2, #1
 8005a8c:	3a01      	subs	r2, #1
 8005a8e:	0652      	lsls	r2, r2, #25
 8005a90:	4311      	orrs	r1, r2
 8005a92:	687a      	ldr	r2, [r7, #4]
 8005a94:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005a96:	06d2      	lsls	r2, r2, #27
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	4912      	ldr	r1, [pc, #72]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005aa0:	4b10      	ldr	r3, [pc, #64]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005aa6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aaa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aac:	4b0d      	ldr	r3, [pc, #52]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005aae:	68db      	ldr	r3, [r3, #12]
 8005ab0:	4a0c      	ldr	r2, [pc, #48]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005ab8:	f7fc fa00 	bl	8001ebc <HAL_GetTick>
 8005abc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005abe:	e008      	b.n	8005ad2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac0:	f7fc f9fc 	bl	8001ebc <HAL_GetTick>
 8005ac4:	4602      	mov	r2, r0
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	2b02      	cmp	r3, #2
 8005acc:	d901      	bls.n	8005ad2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e058      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad2:	4b04      	ldr	r3, [pc, #16]	; (8005ae4 <HAL_RCC_OscConfig+0x778>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d0f0      	beq.n	8005ac0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005ade:	e050      	b.n	8005b82 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e04f      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
 8005ae4:	40021000 	.word	0x40021000
 8005ae8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aec:	4b27      	ldr	r3, [pc, #156]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d144      	bne.n	8005b82 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005af8:	4b24      	ldr	r3, [pc, #144]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a23      	ldr	r2, [pc, #140]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005afe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b02:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b04:	4b21      	ldr	r3, [pc, #132]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	4a20      	ldr	r2, [pc, #128]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005b0e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005b10:	f7fc f9d4 	bl	8001ebc <HAL_GetTick>
 8005b14:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b16:	e008      	b.n	8005b2a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fc f9d0 	bl	8001ebc <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e02c      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b2a:	4b18      	ldr	r3, [pc, #96]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d0f0      	beq.n	8005b18 <HAL_RCC_OscConfig+0x7ac>
 8005b36:	e024      	b.n	8005b82 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b38:	69bb      	ldr	r3, [r7, #24]
 8005b3a:	2b0c      	cmp	r3, #12
 8005b3c:	d01f      	beq.n	8005b7e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b3e:	4b13      	ldr	r3, [pc, #76]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b44:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b4a:	f7fc f9b7 	bl	8001ebc <HAL_GetTick>
 8005b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b50:	e008      	b.n	8005b64 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b52:	f7fc f9b3 	bl	8001ebc <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	2b02      	cmp	r3, #2
 8005b5e:	d901      	bls.n	8005b64 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005b60:	2303      	movs	r3, #3
 8005b62:	e00f      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b64:	4b09      	ldr	r3, [pc, #36]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1f0      	bne.n	8005b52 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005b70:	4b06      	ldr	r3, [pc, #24]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b72:	68da      	ldr	r2, [r3, #12]
 8005b74:	4905      	ldr	r1, [pc, #20]	; (8005b8c <HAL_RCC_OscConfig+0x820>)
 8005b76:	4b06      	ldr	r3, [pc, #24]	; (8005b90 <HAL_RCC_OscConfig+0x824>)
 8005b78:	4013      	ands	r3, r2
 8005b7a:	60cb      	str	r3, [r1, #12]
 8005b7c:	e001      	b.n	8005b82 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005b7e:	2301      	movs	r3, #1
 8005b80:	e000      	b.n	8005b84 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3720      	adds	r7, #32
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	40021000 	.word	0x40021000
 8005b90:	feeefffc 	.word	0xfeeefffc

08005b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e0e7      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005ba8:	4b75      	ldr	r3, [pc, #468]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f003 0307 	and.w	r3, r3, #7
 8005bb0:	683a      	ldr	r2, [r7, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d910      	bls.n	8005bd8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bb6:	4b72      	ldr	r3, [pc, #456]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f023 0207 	bic.w	r2, r3, #7
 8005bbe:	4970      	ldr	r1, [pc, #448]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bc6:	4b6e      	ldr	r3, [pc, #440]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0307 	and.w	r3, r3, #7
 8005bce:	683a      	ldr	r2, [r7, #0]
 8005bd0:	429a      	cmp	r2, r3
 8005bd2:	d001      	beq.n	8005bd8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e0cf      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0302 	and.w	r3, r3, #2
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d010      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	689a      	ldr	r2, [r3, #8]
 8005be8:	4b66      	ldr	r3, [pc, #408]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bea:	689b      	ldr	r3, [r3, #8]
 8005bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d908      	bls.n	8005c06 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	4b63      	ldr	r3, [pc, #396]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	4960      	ldr	r1, [pc, #384]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c02:	4313      	orrs	r3, r2
 8005c04:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f003 0301 	and.w	r3, r3, #1
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d04c      	beq.n	8005cac <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d107      	bne.n	8005c2a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1a:	4b5a      	ldr	r3, [pc, #360]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d121      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0a6      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d107      	bne.n	8005c42 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c32:	4b54      	ldr	r3, [pc, #336]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d115      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e09a      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d107      	bne.n	8005c5a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005c4a:	4b4e      	ldr	r3, [pc, #312]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e08e      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c5a:	4b4a      	ldr	r3, [pc, #296]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d101      	bne.n	8005c6a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005c66:	2301      	movs	r3, #1
 8005c68:	e086      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c6a:	4b46      	ldr	r3, [pc, #280]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	f023 0203 	bic.w	r2, r3, #3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	685b      	ldr	r3, [r3, #4]
 8005c76:	4943      	ldr	r1, [pc, #268]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c7c:	f7fc f91e 	bl	8001ebc <HAL_GetTick>
 8005c80:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c82:	e00a      	b.n	8005c9a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c84:	f7fc f91a 	bl	8001ebc <HAL_GetTick>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	1ad3      	subs	r3, r2, r3
 8005c8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e06e      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c9a:	4b3a      	ldr	r3, [pc, #232]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	f003 020c 	and.w	r2, r3, #12
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	429a      	cmp	r2, r3
 8005caa:	d1eb      	bne.n	8005c84 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d010      	beq.n	8005cda <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689a      	ldr	r2, [r3, #8]
 8005cbc:	4b31      	ldr	r3, [pc, #196]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005cbe:	689b      	ldr	r3, [r3, #8]
 8005cc0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d208      	bcs.n	8005cda <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cc8:	4b2e      	ldr	r3, [pc, #184]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	492b      	ldr	r1, [pc, #172]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005cda:	4b29      	ldr	r3, [pc, #164]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f003 0307 	and.w	r3, r3, #7
 8005ce2:	683a      	ldr	r2, [r7, #0]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d210      	bcs.n	8005d0a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ce8:	4b25      	ldr	r3, [pc, #148]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f023 0207 	bic.w	r2, r3, #7
 8005cf0:	4923      	ldr	r1, [pc, #140]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf8:	4b21      	ldr	r3, [pc, #132]	; (8005d80 <HAL_RCC_ClockConfig+0x1ec>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f003 0307 	and.w	r3, r3, #7
 8005d00:	683a      	ldr	r2, [r7, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d001      	beq.n	8005d0a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005d06:	2301      	movs	r3, #1
 8005d08:	e036      	b.n	8005d78 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0304 	and.w	r3, r3, #4
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d008      	beq.n	8005d28 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d16:	4b1b      	ldr	r3, [pc, #108]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68db      	ldr	r3, [r3, #12]
 8005d22:	4918      	ldr	r1, [pc, #96]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d24:	4313      	orrs	r3, r2
 8005d26:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d34:	4b13      	ldr	r3, [pc, #76]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	00db      	lsls	r3, r3, #3
 8005d42:	4910      	ldr	r1, [pc, #64]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d48:	f000 f824 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	4b0d      	ldr	r3, [pc, #52]	; (8005d84 <HAL_RCC_ClockConfig+0x1f0>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 030f 	and.w	r3, r3, #15
 8005d58:	490b      	ldr	r1, [pc, #44]	; (8005d88 <HAL_RCC_ClockConfig+0x1f4>)
 8005d5a:	5ccb      	ldrb	r3, [r1, r3]
 8005d5c:	f003 031f 	and.w	r3, r3, #31
 8005d60:	fa22 f303 	lsr.w	r3, r2, r3
 8005d64:	4a09      	ldr	r2, [pc, #36]	; (8005d8c <HAL_RCC_ClockConfig+0x1f8>)
 8005d66:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <HAL_RCC_ClockConfig+0x1fc>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f7fc f855 	bl	8001e1c <HAL_InitTick>
 8005d72:	4603      	mov	r3, r0
 8005d74:	72fb      	strb	r3, [r7, #11]

  return status;
 8005d76:	7afb      	ldrb	r3, [r7, #11]
}
 8005d78:	4618      	mov	r0, r3
 8005d7a:	3710      	adds	r7, #16
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	bd80      	pop	{r7, pc}
 8005d80:	40022000 	.word	0x40022000
 8005d84:	40021000 	.word	0x40021000
 8005d88:	0800abc0 	.word	0x0800abc0
 8005d8c:	20000004 	.word	0x20000004
 8005d90:	20000008 	.word	0x20000008

08005d94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d94:	b480      	push	{r7}
 8005d96:	b089      	sub	sp, #36	; 0x24
 8005d98:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	61fb      	str	r3, [r7, #28]
 8005d9e:	2300      	movs	r3, #0
 8005da0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005da2:	4b3e      	ldr	r3, [pc, #248]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	f003 030c 	and.w	r3, r3, #12
 8005daa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005dac:	4b3b      	ldr	r3, [pc, #236]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0303 	and.w	r3, r3, #3
 8005db4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_RCC_GetSysClockFreq+0x34>
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d121      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11e      	bne.n	8005e06 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005dc8:	4b34      	ldr	r3, [pc, #208]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0308 	and.w	r3, r3, #8
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d107      	bne.n	8005de4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005dd4:	4b31      	ldr	r3, [pc, #196]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dda:	0a1b      	lsrs	r3, r3, #8
 8005ddc:	f003 030f 	and.w	r3, r3, #15
 8005de0:	61fb      	str	r3, [r7, #28]
 8005de2:	e005      	b.n	8005df0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005de4:	4b2d      	ldr	r3, [pc, #180]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	091b      	lsrs	r3, r3, #4
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005df0:	4a2b      	ldr	r2, [pc, #172]	; (8005ea0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005df8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dfa:	693b      	ldr	r3, [r7, #16]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d10d      	bne.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005e04:	e00a      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	2b04      	cmp	r3, #4
 8005e0a:	d102      	bne.n	8005e12 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e0c:	4b25      	ldr	r3, [pc, #148]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	e004      	b.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005e12:	693b      	ldr	r3, [r7, #16]
 8005e14:	2b08      	cmp	r3, #8
 8005e16:	d101      	bne.n	8005e1c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e18:	4b23      	ldr	r3, [pc, #140]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e1a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2b0c      	cmp	r3, #12
 8005e20:	d134      	bne.n	8005e8c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e22:	4b1e      	ldr	r3, [pc, #120]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e24:	68db      	ldr	r3, [r3, #12]
 8005e26:	f003 0303 	and.w	r3, r3, #3
 8005e2a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e2c:	68bb      	ldr	r3, [r7, #8]
 8005e2e:	2b02      	cmp	r3, #2
 8005e30:	d003      	beq.n	8005e3a <HAL_RCC_GetSysClockFreq+0xa6>
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	2b03      	cmp	r3, #3
 8005e36:	d003      	beq.n	8005e40 <HAL_RCC_GetSysClockFreq+0xac>
 8005e38:	e005      	b.n	8005e46 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005e3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ea4 <HAL_RCC_GetSysClockFreq+0x110>)
 8005e3c:	617b      	str	r3, [r7, #20]
      break;
 8005e3e:	e005      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005e40:	4b19      	ldr	r3, [pc, #100]	; (8005ea8 <HAL_RCC_GetSysClockFreq+0x114>)
 8005e42:	617b      	str	r3, [r7, #20]
      break;
 8005e44:	e002      	b.n	8005e4c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	617b      	str	r3, [r7, #20]
      break;
 8005e4a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e4c:	4b13      	ldr	r3, [pc, #76]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	091b      	lsrs	r3, r3, #4
 8005e52:	f003 0307 	and.w	r3, r3, #7
 8005e56:	3301      	adds	r3, #1
 8005e58:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005e5a:	4b10      	ldr	r3, [pc, #64]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e5c:	68db      	ldr	r3, [r3, #12]
 8005e5e:	0a1b      	lsrs	r3, r3, #8
 8005e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e64:	697a      	ldr	r2, [r7, #20]
 8005e66:	fb03 f202 	mul.w	r2, r3, r2
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e70:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e72:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <HAL_RCC_GetSysClockFreq+0x108>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	0e5b      	lsrs	r3, r3, #25
 8005e78:	f003 0303 	and.w	r3, r3, #3
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	005b      	lsls	r3, r3, #1
 8005e80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005e82:	697a      	ldr	r2, [r7, #20]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005e8c:	69bb      	ldr	r3, [r7, #24]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3724      	adds	r7, #36	; 0x24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr
 8005e9a:	bf00      	nop
 8005e9c:	40021000 	.word	0x40021000
 8005ea0:	0800abd8 	.word	0x0800abd8
 8005ea4:	00f42400 	.word	0x00f42400
 8005ea8:	007a1200 	.word	0x007a1200

08005eac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005eb0:	4b03      	ldr	r3, [pc, #12]	; (8005ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	20000004 	.word	0x20000004

08005ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ec8:	f7ff fff0 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	4b06      	ldr	r3, [pc, #24]	; (8005ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	0a1b      	lsrs	r3, r3, #8
 8005ed4:	f003 0307 	and.w	r3, r3, #7
 8005ed8:	4904      	ldr	r1, [pc, #16]	; (8005eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eda:	5ccb      	ldrb	r3, [r1, r3]
 8005edc:	f003 031f 	and.w	r3, r3, #31
 8005ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	bd80      	pop	{r7, pc}
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	0800abd0 	.word	0x0800abd0

08005ef0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ef4:	f7ff ffda 	bl	8005eac <HAL_RCC_GetHCLKFreq>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	0adb      	lsrs	r3, r3, #11
 8005f00:	f003 0307 	and.w	r3, r3, #7
 8005f04:	4904      	ldr	r1, [pc, #16]	; (8005f18 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005f06:	5ccb      	ldrb	r3, [r1, r3]
 8005f08:	f003 031f 	and.w	r3, r3, #31
 8005f0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40021000 	.word	0x40021000
 8005f18:	0800abd0 	.word	0x0800abd0

08005f1c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005f24:	2300      	movs	r3, #0
 8005f26:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f28:	4b2a      	ldr	r3, [pc, #168]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d003      	beq.n	8005f3c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f34:	f7ff f9b6 	bl	80052a4 <HAL_PWREx_GetVoltageRange>
 8005f38:	6178      	str	r0, [r7, #20]
 8005f3a:	e014      	b.n	8005f66 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f3c:	4b25      	ldr	r3, [pc, #148]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f40:	4a24      	ldr	r2, [pc, #144]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f46:	6593      	str	r3, [r2, #88]	; 0x58
 8005f48:	4b22      	ldr	r3, [pc, #136]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005f54:	f7ff f9a6 	bl	80052a4 <HAL_PWREx_GetVoltageRange>
 8005f58:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f5a:	4b1e      	ldr	r3, [pc, #120]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5e:	4a1d      	ldr	r2, [pc, #116]	; (8005fd4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005f60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f64:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f6c:	d10b      	bne.n	8005f86 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b80      	cmp	r3, #128	; 0x80
 8005f72:	d919      	bls.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2ba0      	cmp	r3, #160	; 0xa0
 8005f78:	d902      	bls.n	8005f80 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	613b      	str	r3, [r7, #16]
 8005f7e:	e013      	b.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005f80:	2301      	movs	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
 8005f84:	e010      	b.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2b80      	cmp	r3, #128	; 0x80
 8005f8a:	d902      	bls.n	8005f92 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	613b      	str	r3, [r7, #16]
 8005f90:	e00a      	b.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b80      	cmp	r3, #128	; 0x80
 8005f96:	d102      	bne.n	8005f9e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005f98:	2302      	movs	r3, #2
 8005f9a:	613b      	str	r3, [r7, #16]
 8005f9c:	e004      	b.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b70      	cmp	r3, #112	; 0x70
 8005fa2:	d101      	bne.n	8005fa8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005fa8:	4b0b      	ldr	r3, [pc, #44]	; (8005fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f023 0207 	bic.w	r2, r3, #7
 8005fb0:	4909      	ldr	r1, [pc, #36]	; (8005fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005fb8:	4b07      	ldr	r3, [pc, #28]	; (8005fd8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 0307 	and.w	r3, r3, #7
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d001      	beq.n	8005fca <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	e000      	b.n	8005fcc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}
 8005fd4:	40021000 	.word	0x40021000
 8005fd8:	40022000 	.word	0x40022000

08005fdc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fe8:	2300      	movs	r3, #0
 8005fea:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d031      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ffc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006000:	d01a      	beq.n	8006038 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8006002:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006006:	d814      	bhi.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006008:	2b00      	cmp	r3, #0
 800600a:	d009      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800600c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006010:	d10f      	bne.n	8006032 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8006012:	4b5d      	ldr	r3, [pc, #372]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006014:	68db      	ldr	r3, [r3, #12]
 8006016:	4a5c      	ldr	r2, [pc, #368]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800601c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800601e:	e00c      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	3304      	adds	r3, #4
 8006024:	2100      	movs	r1, #0
 8006026:	4618      	mov	r0, r3
 8006028:	f000 f9de 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 800602c:	4603      	mov	r3, r0
 800602e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8006030:	e003      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006032:	2301      	movs	r3, #1
 8006034:	74fb      	strb	r3, [r7, #19]
      break;
 8006036:	e000      	b.n	800603a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006038:	bf00      	nop
    }

    if(ret == HAL_OK)
 800603a:	7cfb      	ldrb	r3, [r7, #19]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10b      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006040:	4b51      	ldr	r3, [pc, #324]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006046:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800604e:	494e      	ldr	r1, [pc, #312]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006050:	4313      	orrs	r3, r2
 8006052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8006056:	e001      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006058:	7cfb      	ldrb	r3, [r7, #19]
 800605a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006064:	2b00      	cmp	r3, #0
 8006066:	f000 809e 	beq.w	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800606a:	2300      	movs	r3, #0
 800606c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800606e:	4b46      	ldr	r3, [pc, #280]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006076:	2b00      	cmp	r3, #0
 8006078:	d101      	bne.n	800607e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800607a:	2301      	movs	r3, #1
 800607c:	e000      	b.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800607e:	2300      	movs	r3, #0
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00d      	beq.n	80060a0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006084:	4b40      	ldr	r3, [pc, #256]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006088:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800608a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800608e:	6593      	str	r3, [r2, #88]	; 0x58
 8006090:	4b3d      	ldr	r3, [pc, #244]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006094:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006098:	60bb      	str	r3, [r7, #8]
 800609a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800609c:	2301      	movs	r3, #1
 800609e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060a0:	4b3a      	ldr	r3, [pc, #232]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	4a39      	ldr	r2, [pc, #228]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80060ac:	f7fb ff06 	bl	8001ebc <HAL_GetTick>
 80060b0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060b2:	e009      	b.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060b4:	f7fb ff02 	bl	8001ebc <HAL_GetTick>
 80060b8:	4602      	mov	r2, r0
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d902      	bls.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80060c2:	2303      	movs	r3, #3
 80060c4:	74fb      	strb	r3, [r7, #19]
        break;
 80060c6:	e005      	b.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80060c8:	4b30      	ldr	r3, [pc, #192]	; (800618c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d0ef      	beq.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80060d4:	7cfb      	ldrb	r3, [r7, #19]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d15a      	bne.n	8006190 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80060da:	4b2b      	ldr	r3, [pc, #172]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80060e4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d01e      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060f0:	697a      	ldr	r2, [r7, #20]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d019      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060f6:	4b24      	ldr	r3, [pc, #144]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80060f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006100:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006102:	4b21      	ldr	r3, [pc, #132]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006108:	4a1f      	ldr	r2, [pc, #124]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800610a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800610e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006112:	4b1d      	ldr	r3, [pc, #116]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006118:	4a1b      	ldr	r2, [pc, #108]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800611a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006122:	4a19      	ldr	r2, [pc, #100]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	f003 0301 	and.w	r3, r3, #1
 8006130:	2b00      	cmp	r3, #0
 8006132:	d016      	beq.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006134:	f7fb fec2 	bl	8001ebc <HAL_GetTick>
 8006138:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800613a:	e00b      	b.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800613c:	f7fb febe 	bl	8001ebc <HAL_GetTick>
 8006140:	4602      	mov	r2, r0
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	f241 3288 	movw	r2, #5000	; 0x1388
 800614a:	4293      	cmp	r3, r2
 800614c:	d902      	bls.n	8006154 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800614e:	2303      	movs	r3, #3
 8006150:	74fb      	strb	r3, [r7, #19]
            break;
 8006152:	e006      	b.n	8006162 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006154:	4b0c      	ldr	r3, [pc, #48]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800615a:	f003 0302 	and.w	r3, r3, #2
 800615e:	2b00      	cmp	r3, #0
 8006160:	d0ec      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006162:	7cfb      	ldrb	r3, [r7, #19]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d10b      	bne.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006168:	4b07      	ldr	r3, [pc, #28]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800616a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800616e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006176:	4904      	ldr	r1, [pc, #16]	; (8006188 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800617e:	e009      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	74bb      	strb	r3, [r7, #18]
 8006184:	e006      	b.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8006186:	bf00      	nop
 8006188:	40021000 	.word	0x40021000
 800618c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006190:	7cfb      	ldrb	r3, [r7, #19]
 8006192:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006194:	7c7b      	ldrb	r3, [r7, #17]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d105      	bne.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800619a:	4b8a      	ldr	r3, [pc, #552]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800619c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800619e:	4a89      	ldr	r2, [pc, #548]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80061a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0301 	and.w	r3, r3, #1
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d00a      	beq.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80061b2:	4b84      	ldr	r3, [pc, #528]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061b8:	f023 0203 	bic.w	r2, r3, #3
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a1b      	ldr	r3, [r3, #32]
 80061c0:	4980      	ldr	r1, [pc, #512]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00a      	beq.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80061d4:	4b7b      	ldr	r3, [pc, #492]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061da:	f023 020c 	bic.w	r2, r3, #12
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	4978      	ldr	r1, [pc, #480]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f003 0320 	and.w	r3, r3, #32
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d00a      	beq.n	800620c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f6:	4b73      	ldr	r3, [pc, #460]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006204:	496f      	ldr	r1, [pc, #444]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006206:	4313      	orrs	r3, r2
 8006208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00a      	beq.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006218:	4b6a      	ldr	r3, [pc, #424]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006226:	4967      	ldr	r1, [pc, #412]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006228:	4313      	orrs	r3, r2
 800622a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006236:	2b00      	cmp	r3, #0
 8006238:	d00a      	beq.n	8006250 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800623a:	4b62      	ldr	r3, [pc, #392]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800623c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006240:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006248:	495e      	ldr	r1, [pc, #376]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800624a:	4313      	orrs	r3, r2
 800624c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006258:	2b00      	cmp	r3, #0
 800625a:	d00a      	beq.n	8006272 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800625c:	4b59      	ldr	r3, [pc, #356]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800625e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006262:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800626a:	4956      	ldr	r1, [pc, #344]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800626c:	4313      	orrs	r3, r2
 800626e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00a      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800627e:	4b51      	ldr	r3, [pc, #324]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628c:	494d      	ldr	r1, [pc, #308]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800628e:	4313      	orrs	r3, r2
 8006290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800629c:	2b00      	cmp	r3, #0
 800629e:	d028      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80062a0:	4b48      	ldr	r3, [pc, #288]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	4945      	ldr	r1, [pc, #276]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062b0:	4313      	orrs	r3, r2
 80062b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80062be:	d106      	bne.n	80062ce <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062c0:	4b40      	ldr	r3, [pc, #256]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	4a3f      	ldr	r2, [pc, #252]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062ca:	60d3      	str	r3, [r2, #12]
 80062cc:	e011      	b.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80062d6:	d10c      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	3304      	adds	r3, #4
 80062dc:	2101      	movs	r1, #1
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 f882 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 80062e4:	4603      	mov	r3, r0
 80062e6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80062e8:	7cfb      	ldrb	r3, [r7, #19]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d001      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80062ee:	7cfb      	ldrb	r3, [r7, #19]
 80062f0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d028      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80062fe:	4b31      	ldr	r3, [pc, #196]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800630c:	492d      	ldr	r1, [pc, #180]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006318:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800631c:	d106      	bne.n	800632c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800631e:	4b29      	ldr	r3, [pc, #164]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006320:	68db      	ldr	r3, [r3, #12]
 8006322:	4a28      	ldr	r2, [pc, #160]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006324:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006328:	60d3      	str	r3, [r2, #12]
 800632a:	e011      	b.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006330:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006334:	d10c      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	3304      	adds	r3, #4
 800633a:	2101      	movs	r1, #1
 800633c:	4618      	mov	r0, r3
 800633e:	f000 f853 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 8006342:	4603      	mov	r3, r0
 8006344:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006346:	7cfb      	ldrb	r3, [r7, #19]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800634c:	7cfb      	ldrb	r3, [r7, #19]
 800634e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006358:	2b00      	cmp	r3, #0
 800635a:	d01c      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800635e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006362:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800636a:	4916      	ldr	r1, [pc, #88]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800636c:	4313      	orrs	r3, r2
 800636e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006376:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800637a:	d10c      	bne.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	2102      	movs	r1, #2
 8006382:	4618      	mov	r0, r3
 8006384:	f000 f830 	bl	80063e8 <RCCEx_PLLSAI1_Config>
 8006388:	4603      	mov	r3, r0
 800638a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800638c:	7cfb      	ldrb	r3, [r7, #19]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006392:	7cfb      	ldrb	r3, [r7, #19]
 8006394:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d00a      	beq.n	80063b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80063a2:	4b08      	ldr	r3, [pc, #32]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063a8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80063b0:	4904      	ldr	r1, [pc, #16]	; (80063c4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b2:	4313      	orrs	r3, r2
 80063b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80063b8:	7cbb      	ldrb	r3, [r7, #18]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3718      	adds	r7, #24
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	40021000 	.word	0x40021000

080063c8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80063c8:	b480      	push	{r7}
 80063ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80063cc:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a04      	ldr	r2, [pc, #16]	; (80063e4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	6013      	str	r3, [r2, #0]
}
 80063d8:	bf00      	nop
 80063da:	46bd      	mov	sp, r7
 80063dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e0:	4770      	bx	lr
 80063e2:	bf00      	nop
 80063e4:	40021000 	.word	0x40021000

080063e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80063f2:	2300      	movs	r3, #0
 80063f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80063f6:	4b74      	ldr	r3, [pc, #464]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f8:	68db      	ldr	r3, [r3, #12]
 80063fa:	f003 0303 	and.w	r3, r3, #3
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d018      	beq.n	8006434 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006402:	4b71      	ldr	r3, [pc, #452]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0203 	and.w	r2, r3, #3
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d10d      	bne.n	800642e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
       ||
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800641a:	4b6b      	ldr	r3, [pc, #428]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	091b      	lsrs	r3, r3, #4
 8006420:	f003 0307 	and.w	r3, r3, #7
 8006424:	1c5a      	adds	r2, r3, #1
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	685b      	ldr	r3, [r3, #4]
       ||
 800642a:	429a      	cmp	r2, r3
 800642c:	d047      	beq.n	80064be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	73fb      	strb	r3, [r7, #15]
 8006432:	e044      	b.n	80064be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b03      	cmp	r3, #3
 800643a:	d018      	beq.n	800646e <RCCEx_PLLSAI1_Config+0x86>
 800643c:	2b03      	cmp	r3, #3
 800643e:	d825      	bhi.n	800648c <RCCEx_PLLSAI1_Config+0xa4>
 8006440:	2b01      	cmp	r3, #1
 8006442:	d002      	beq.n	800644a <RCCEx_PLLSAI1_Config+0x62>
 8006444:	2b02      	cmp	r3, #2
 8006446:	d009      	beq.n	800645c <RCCEx_PLLSAI1_Config+0x74>
 8006448:	e020      	b.n	800648c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800644a:	4b5f      	ldr	r3, [pc, #380]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d11d      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800645a:	e01a      	b.n	8006492 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800645c:	4b5a      	ldr	r3, [pc, #360]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006464:	2b00      	cmp	r3, #0
 8006466:	d116      	bne.n	8006496 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800646c:	e013      	b.n	8006496 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800646e:	4b56      	ldr	r3, [pc, #344]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10f      	bne.n	800649a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800647a:	4b53      	ldr	r3, [pc, #332]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d109      	bne.n	800649a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8006486:	2301      	movs	r3, #1
 8006488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800648a:	e006      	b.n	800649a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
      break;
 8006490:	e004      	b.n	800649c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006492:	bf00      	nop
 8006494:	e002      	b.n	800649c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006496:	bf00      	nop
 8006498:	e000      	b.n	800649c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800649a:	bf00      	nop
    }

    if(status == HAL_OK)
 800649c:	7bfb      	ldrb	r3, [r7, #15]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10d      	bne.n	80064be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064a2:	4b49      	ldr	r3, [pc, #292]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6819      	ldr	r1, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	3b01      	subs	r3, #1
 80064b4:	011b      	lsls	r3, r3, #4
 80064b6:	430b      	orrs	r3, r1
 80064b8:	4943      	ldr	r1, [pc, #268]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ba:	4313      	orrs	r3, r2
 80064bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80064be:	7bfb      	ldrb	r3, [r7, #15]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d17c      	bne.n	80065be <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80064c4:	4b40      	ldr	r3, [pc, #256]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a3f      	ldr	r2, [pc, #252]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80064ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80064d0:	f7fb fcf4 	bl	8001ebc <HAL_GetTick>
 80064d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064d6:	e009      	b.n	80064ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80064d8:	f7fb fcf0 	bl	8001ebc <HAL_GetTick>
 80064dc:	4602      	mov	r2, r0
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	1ad3      	subs	r3, r2, r3
 80064e2:	2b02      	cmp	r3, #2
 80064e4:	d902      	bls.n	80064ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80064e6:	2303      	movs	r3, #3
 80064e8:	73fb      	strb	r3, [r7, #15]
        break;
 80064ea:	e005      	b.n	80064f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1ef      	bne.n	80064d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80064f8:	7bfb      	ldrb	r3, [r7, #15]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d15f      	bne.n	80065be <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d110      	bne.n	8006526 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006504:	4b30      	ldr	r3, [pc, #192]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800650c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006510:	687a      	ldr	r2, [r7, #4]
 8006512:	6892      	ldr	r2, [r2, #8]
 8006514:	0211      	lsls	r1, r2, #8
 8006516:	687a      	ldr	r2, [r7, #4]
 8006518:	68d2      	ldr	r2, [r2, #12]
 800651a:	06d2      	lsls	r2, r2, #27
 800651c:	430a      	orrs	r2, r1
 800651e:	492a      	ldr	r1, [pc, #168]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006520:	4313      	orrs	r3, r2
 8006522:	610b      	str	r3, [r1, #16]
 8006524:	e027      	b.n	8006576 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	2b01      	cmp	r3, #1
 800652a:	d112      	bne.n	8006552 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800652c:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800652e:	691b      	ldr	r3, [r3, #16]
 8006530:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006534:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	6892      	ldr	r2, [r2, #8]
 800653c:	0211      	lsls	r1, r2, #8
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	6912      	ldr	r2, [r2, #16]
 8006542:	0852      	lsrs	r2, r2, #1
 8006544:	3a01      	subs	r2, #1
 8006546:	0552      	lsls	r2, r2, #21
 8006548:	430a      	orrs	r2, r1
 800654a:	491f      	ldr	r1, [pc, #124]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800654c:	4313      	orrs	r3, r2
 800654e:	610b      	str	r3, [r1, #16]
 8006550:	e011      	b.n	8006576 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006552:	4b1d      	ldr	r3, [pc, #116]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800655a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	6892      	ldr	r2, [r2, #8]
 8006562:	0211      	lsls	r1, r2, #8
 8006564:	687a      	ldr	r2, [r7, #4]
 8006566:	6952      	ldr	r2, [r2, #20]
 8006568:	0852      	lsrs	r2, r2, #1
 800656a:	3a01      	subs	r2, #1
 800656c:	0652      	lsls	r2, r2, #25
 800656e:	430a      	orrs	r2, r1
 8006570:	4915      	ldr	r1, [pc, #84]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006572:	4313      	orrs	r3, r2
 8006574:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8006576:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800657c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006580:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006582:	f7fb fc9b 	bl	8001ebc <HAL_GetTick>
 8006586:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006588:	e009      	b.n	800659e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800658a:	f7fb fc97 	bl	8001ebc <HAL_GetTick>
 800658e:	4602      	mov	r2, r0
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	1ad3      	subs	r3, r2, r3
 8006594:	2b02      	cmp	r3, #2
 8006596:	d902      	bls.n	800659e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8006598:	2303      	movs	r3, #3
 800659a:	73fb      	strb	r3, [r7, #15]
          break;
 800659c:	e005      	b.n	80065aa <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800659e:	4b0a      	ldr	r3, [pc, #40]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0ef      	beq.n	800658a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80065aa:	7bfb      	ldrb	r3, [r7, #15]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80065b0:	4b05      	ldr	r3, [pc, #20]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065b2:	691a      	ldr	r2, [r3, #16]
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	699b      	ldr	r3, [r3, #24]
 80065b8:	4903      	ldr	r1, [pc, #12]	; (80065c8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80065be:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3710      	adds	r7, #16
 80065c4:	46bd      	mov	sp, r7
 80065c6:	bd80      	pop	{r7, pc}
 80065c8:	40021000 	.word	0x40021000

080065cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b082      	sub	sp, #8
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d101      	bne.n	80065de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065da:	2301      	movs	r3, #1
 80065dc:	e049      	b.n	8006672 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d106      	bne.n	80065f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2200      	movs	r2, #0
 80065ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f7fb fade 	bl	8001bb4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2202      	movs	r2, #2
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	3304      	adds	r3, #4
 8006608:	4619      	mov	r1, r3
 800660a:	4610      	mov	r0, r2
 800660c:	f000 fb04 	bl	8006c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2201      	movs	r2, #1
 8006614:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2201      	movs	r2, #1
 800661c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2201      	movs	r2, #1
 8006624:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006670:	2300      	movs	r3, #0
}
 8006672:	4618      	mov	r0, r3
 8006674:	3708      	adds	r7, #8
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b082      	sub	sp, #8
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d101      	bne.n	800668c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006688:	2301      	movs	r3, #1
 800668a:	e049      	b.n	8006720 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d106      	bne.n	80066a6 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 f841 	bl	8006728 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2202      	movs	r2, #2
 80066aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	3304      	adds	r3, #4
 80066b6:	4619      	mov	r1, r3
 80066b8:	4610      	mov	r0, r2
 80066ba:	f000 faad 	bl	8006c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2201      	movs	r2, #1
 80066c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2201      	movs	r2, #1
 80066ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2201      	movs	r2, #1
 80066d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2201      	movs	r2, #1
 80066da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	2201      	movs	r2, #1
 80066ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2201      	movs	r2, #1
 800671a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3708      	adds	r7, #8
 8006724:	46bd      	mov	sp, r7
 8006726:	bd80      	pop	{r7, pc}

08006728 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006730:	bf00      	nop
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b084      	sub	sp, #16
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	691b      	ldr	r3, [r3, #16]
 8006752:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d020      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f003 0302 	and.w	r3, r3, #2
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01b      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f06f 0202 	mvn.w	r2, #2
 8006770:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	f003 0303 	and.w	r3, r3, #3
 8006782:	2b00      	cmp	r3, #0
 8006784:	d003      	beq.n	800678e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006786:	6878      	ldr	r0, [r7, #4]
 8006788:	f000 fa27 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 800678c:	e005      	b.n	800679a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 fa19 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f000 fa2a 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2200      	movs	r2, #0
 800679e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f003 0304 	and.w	r3, r3, #4
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d020      	beq.n	80067ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 0304 	and.w	r3, r3, #4
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d01b      	beq.n	80067ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f06f 0204 	mvn.w	r2, #4
 80067bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2202      	movs	r2, #2
 80067c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d003      	beq.n	80067da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fa01 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 80067d8:	e005      	b.n	80067e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9f3 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80067e0:	6878      	ldr	r0, [r7, #4]
 80067e2:	f000 fa04 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	2200      	movs	r2, #0
 80067ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80067ec:	68bb      	ldr	r3, [r7, #8]
 80067ee:	f003 0308 	and.w	r3, r3, #8
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d020      	beq.n	8006838 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d01b      	beq.n	8006838 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f06f 0208 	mvn.w	r2, #8
 8006808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2204      	movs	r2, #4
 800680e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	f003 0303 	and.w	r3, r3, #3
 800681a:	2b00      	cmp	r3, #0
 800681c:	d003      	beq.n	8006826 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800681e:	6878      	ldr	r0, [r7, #4]
 8006820:	f000 f9db 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 8006824:	e005      	b.n	8006832 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 f9cd 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 f9de 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006838:	68bb      	ldr	r3, [r7, #8]
 800683a:	f003 0310 	and.w	r3, r3, #16
 800683e:	2b00      	cmp	r3, #0
 8006840:	d020      	beq.n	8006884 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f003 0310 	and.w	r3, r3, #16
 8006848:	2b00      	cmp	r3, #0
 800684a:	d01b      	beq.n	8006884 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f06f 0210 	mvn.w	r2, #16
 8006854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2208      	movs	r2, #8
 800685a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69db      	ldr	r3, [r3, #28]
 8006862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f000 f9b5 	bl	8006bda <HAL_TIM_IC_CaptureCallback>
 8006870:	e005      	b.n	800687e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006872:	6878      	ldr	r0, [r7, #4]
 8006874:	f000 f9a7 	bl	8006bc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006878:	6878      	ldr	r0, [r7, #4]
 800687a:	f000 f9b8 	bl	8006bee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d00c      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f003 0301 	and.w	r3, r3, #1
 8006894:	2b00      	cmp	r3, #0
 8006896:	d007      	beq.n	80068a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f06f 0201 	mvn.w	r2, #1
 80068a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f7fa ff94 	bl	80017d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d00c      	beq.n	80068cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d007      	beq.n	80068cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80068c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f000 fd92 	bl	80073f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80068cc:	68bb      	ldr	r3, [r7, #8]
 80068ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00c      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d007      	beq.n	80068f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80068e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fd8a 	bl	8007404 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80068f0:	68bb      	ldr	r3, [r7, #8]
 80068f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00c      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006900:	2b00      	cmp	r3, #0
 8006902:	d007      	beq.n	8006914 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800690c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f977 	bl	8006c02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006914:	68bb      	ldr	r3, [r7, #8]
 8006916:	f003 0320 	and.w	r3, r3, #32
 800691a:	2b00      	cmp	r3, #0
 800691c:	d00c      	beq.n	8006938 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	f003 0320 	and.w	r3, r3, #32
 8006924:	2b00      	cmp	r3, #0
 8006926:	d007      	beq.n	8006938 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f06f 0220 	mvn.w	r2, #32
 8006930:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fd52 	bl	80073dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006938:	bf00      	nop
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800694c:	2300      	movs	r3, #0
 800694e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006956:	2b01      	cmp	r3, #1
 8006958:	d101      	bne.n	800695e <HAL_TIM_OC_ConfigChannel+0x1e>
 800695a:	2302      	movs	r3, #2
 800695c:	e066      	b.n	8006a2c <HAL_TIM_OC_ConfigChannel+0xec>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2201      	movs	r2, #1
 8006962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2b14      	cmp	r3, #20
 800696a:	d857      	bhi.n	8006a1c <HAL_TIM_OC_ConfigChannel+0xdc>
 800696c:	a201      	add	r2, pc, #4	; (adr r2, 8006974 <HAL_TIM_OC_ConfigChannel+0x34>)
 800696e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006972:	bf00      	nop
 8006974:	080069c9 	.word	0x080069c9
 8006978:	08006a1d 	.word	0x08006a1d
 800697c:	08006a1d 	.word	0x08006a1d
 8006980:	08006a1d 	.word	0x08006a1d
 8006984:	080069d7 	.word	0x080069d7
 8006988:	08006a1d 	.word	0x08006a1d
 800698c:	08006a1d 	.word	0x08006a1d
 8006990:	08006a1d 	.word	0x08006a1d
 8006994:	080069e5 	.word	0x080069e5
 8006998:	08006a1d 	.word	0x08006a1d
 800699c:	08006a1d 	.word	0x08006a1d
 80069a0:	08006a1d 	.word	0x08006a1d
 80069a4:	080069f3 	.word	0x080069f3
 80069a8:	08006a1d 	.word	0x08006a1d
 80069ac:	08006a1d 	.word	0x08006a1d
 80069b0:	08006a1d 	.word	0x08006a1d
 80069b4:	08006a01 	.word	0x08006a01
 80069b8:	08006a1d 	.word	0x08006a1d
 80069bc:	08006a1d 	.word	0x08006a1d
 80069c0:	08006a1d 	.word	0x08006a1d
 80069c4:	08006a0f 	.word	0x08006a0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	4618      	mov	r0, r3
 80069d0:	f000 f986 	bl	8006ce0 <TIM_OC1_SetConfig>
      break;
 80069d4:	e025      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f9fb 	bl	8006dd8 <TIM_OC2_SetConfig>
      break;
 80069e2:	e01e      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68b9      	ldr	r1, [r7, #8]
 80069ea:	4618      	mov	r0, r3
 80069ec:	f000 fa6e 	bl	8006ecc <TIM_OC3_SetConfig>
      break;
 80069f0:	e017      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68b9      	ldr	r1, [r7, #8]
 80069f8:	4618      	mov	r0, r3
 80069fa:	f000 fadf 	bl	8006fbc <TIM_OC4_SetConfig>
      break;
 80069fe:	e010      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 fb36 	bl	8007078 <TIM_OC5_SetConfig>
      break;
 8006a0c:	e009      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	68b9      	ldr	r1, [r7, #8]
 8006a14:	4618      	mov	r0, r3
 8006a16:	f000 fb87 	bl	8007128 <TIM_OC6_SetConfig>
      break;
 8006a1a:	e002      	b.n	8006a22 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	75fb      	strb	r3, [r7, #23]
      break;
 8006a20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2200      	movs	r2, #0
 8006a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	3718      	adds	r7, #24
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}

08006a34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
 8006a3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a48:	2b01      	cmp	r3, #1
 8006a4a:	d101      	bne.n	8006a50 <HAL_TIM_ConfigClockSource+0x1c>
 8006a4c:	2302      	movs	r3, #2
 8006a4e:	e0b6      	b.n	8006bbe <HAL_TIM_ConfigClockSource+0x18a>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2202      	movs	r2, #2
 8006a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	689b      	ldr	r3, [r3, #8]
 8006a66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006a72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68ba      	ldr	r2, [r7, #8]
 8006a82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a8c:	d03e      	beq.n	8006b0c <HAL_TIM_ConfigClockSource+0xd8>
 8006a8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a92:	f200 8087 	bhi.w	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a9a:	f000 8086 	beq.w	8006baa <HAL_TIM_ConfigClockSource+0x176>
 8006a9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006aa2:	d87f      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006aa4:	2b70      	cmp	r3, #112	; 0x70
 8006aa6:	d01a      	beq.n	8006ade <HAL_TIM_ConfigClockSource+0xaa>
 8006aa8:	2b70      	cmp	r3, #112	; 0x70
 8006aaa:	d87b      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006aac:	2b60      	cmp	r3, #96	; 0x60
 8006aae:	d050      	beq.n	8006b52 <HAL_TIM_ConfigClockSource+0x11e>
 8006ab0:	2b60      	cmp	r3, #96	; 0x60
 8006ab2:	d877      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006ab4:	2b50      	cmp	r3, #80	; 0x50
 8006ab6:	d03c      	beq.n	8006b32 <HAL_TIM_ConfigClockSource+0xfe>
 8006ab8:	2b50      	cmp	r3, #80	; 0x50
 8006aba:	d873      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006abc:	2b40      	cmp	r3, #64	; 0x40
 8006abe:	d058      	beq.n	8006b72 <HAL_TIM_ConfigClockSource+0x13e>
 8006ac0:	2b40      	cmp	r3, #64	; 0x40
 8006ac2:	d86f      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006ac4:	2b30      	cmp	r3, #48	; 0x30
 8006ac6:	d064      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15e>
 8006ac8:	2b30      	cmp	r3, #48	; 0x30
 8006aca:	d86b      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006acc:	2b20      	cmp	r3, #32
 8006ace:	d060      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15e>
 8006ad0:	2b20      	cmp	r3, #32
 8006ad2:	d867      	bhi.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d05c      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15e>
 8006ad8:	2b10      	cmp	r3, #16
 8006ada:	d05a      	beq.n	8006b92 <HAL_TIM_ConfigClockSource+0x15e>
 8006adc:	e062      	b.n	8006ba4 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006aee:	f000 fbef 	bl	80072d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006b00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	68ba      	ldr	r2, [r7, #8]
 8006b08:	609a      	str	r2, [r3, #8]
      break;
 8006b0a:	e04f      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006b1c:	f000 fbd8 	bl	80072d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	689a      	ldr	r2, [r3, #8]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006b2e:	609a      	str	r2, [r3, #8]
      break;
 8006b30:	e03c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b3e:	461a      	mov	r2, r3
 8006b40:	f000 fb4c 	bl	80071dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2150      	movs	r1, #80	; 0x50
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f000 fba5 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 8006b50:	e02c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006b5e:	461a      	mov	r2, r3
 8006b60:	f000 fb6b 	bl	800723a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	2160      	movs	r1, #96	; 0x60
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f000 fb95 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 8006b70:	e01c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006b7e:	461a      	mov	r2, r3
 8006b80:	f000 fb2c 	bl	80071dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2140      	movs	r1, #64	; 0x40
 8006b8a:	4618      	mov	r0, r3
 8006b8c:	f000 fb85 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 8006b90:	e00c      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	4610      	mov	r0, r2
 8006b9e:	f000 fb7c 	bl	800729a <TIM_ITRx_SetConfig>
      break;
 8006ba2:	e003      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
      break;
 8006ba8:	e000      	b.n	8006bac <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006baa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3710      	adds	r7, #16
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006bc6:	b480      	push	{r7}
 8006bc8:	b083      	sub	sp, #12
 8006bca:	af00      	add	r7, sp, #0
 8006bcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006bce:	bf00      	nop
 8006bd0:	370c      	adds	r7, #12
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006bda:	b480      	push	{r7}
 8006bdc:	b083      	sub	sp, #12
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr

08006bee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006bee:	b480      	push	{r7}
 8006bf0:	b083      	sub	sp, #12
 8006bf2:	af00      	add	r7, sp, #0
 8006bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006bf6:	bf00      	nop
 8006bf8:	370c      	adds	r7, #12
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c00:	4770      	bx	lr

08006c02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006c02:	b480      	push	{r7}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006c0a:	bf00      	nop
 8006c0c:	370c      	adds	r7, #12
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b085      	sub	sp, #20
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	4a2a      	ldr	r2, [pc, #168]	; (8006cd4 <TIM_Base_SetConfig+0xbc>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d003      	beq.n	8006c38 <TIM_Base_SetConfig+0x20>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c36:	d108      	bne.n	8006c4a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	68fa      	ldr	r2, [r7, #12]
 8006c46:	4313      	orrs	r3, r2
 8006c48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a21      	ldr	r2, [pc, #132]	; (8006cd4 <TIM_Base_SetConfig+0xbc>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d00b      	beq.n	8006c6a <TIM_Base_SetConfig+0x52>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c58:	d007      	beq.n	8006c6a <TIM_Base_SetConfig+0x52>
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a1e      	ldr	r2, [pc, #120]	; (8006cd8 <TIM_Base_SetConfig+0xc0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_Base_SetConfig+0x52>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a1d      	ldr	r2, [pc, #116]	; (8006cdc <TIM_Base_SetConfig+0xc4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d108      	bne.n	8006c7c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	4313      	orrs	r3, r2
 8006c7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	68fa      	ldr	r2, [r7, #12]
 8006c8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	689a      	ldr	r2, [r3, #8]
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c98:	683b      	ldr	r3, [r7, #0]
 8006c9a:	681a      	ldr	r2, [r3, #0]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	4a0c      	ldr	r2, [pc, #48]	; (8006cd4 <TIM_Base_SetConfig+0xbc>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d007      	beq.n	8006cb8 <TIM_Base_SetConfig+0xa0>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	4a0b      	ldr	r2, [pc, #44]	; (8006cd8 <TIM_Base_SetConfig+0xc0>)
 8006cac:	4293      	cmp	r3, r2
 8006cae:	d003      	beq.n	8006cb8 <TIM_Base_SetConfig+0xa0>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a0a      	ldr	r2, [pc, #40]	; (8006cdc <TIM_Base_SetConfig+0xc4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d103      	bne.n	8006cc0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	691a      	ldr	r2, [r3, #16]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	615a      	str	r2, [r3, #20]
}
 8006cc6:	bf00      	nop
 8006cc8:	3714      	adds	r7, #20
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40012c00 	.word	0x40012c00
 8006cd8:	40014000 	.word	0x40014000
 8006cdc:	40014400 	.word	0x40014400

08006ce0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b087      	sub	sp, #28
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
 8006ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6a1b      	ldr	r3, [r3, #32]
 8006cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6a1b      	ldr	r3, [r3, #32]
 8006cf4:	f023 0201 	bic.w	r2, r3, #1
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	685b      	ldr	r3, [r3, #4]
 8006d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	699b      	ldr	r3, [r3, #24]
 8006d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f023 0303 	bic.w	r3, r3, #3
 8006d1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68fa      	ldr	r2, [r7, #12]
 8006d22:	4313      	orrs	r3, r2
 8006d24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f023 0302 	bic.w	r3, r3, #2
 8006d2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	4a24      	ldr	r2, [pc, #144]	; (8006dcc <TIM_OC1_SetConfig+0xec>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d007      	beq.n	8006d50 <TIM_OC1_SetConfig+0x70>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	4a23      	ldr	r2, [pc, #140]	; (8006dd0 <TIM_OC1_SetConfig+0xf0>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d003      	beq.n	8006d50 <TIM_OC1_SetConfig+0x70>
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	4a22      	ldr	r2, [pc, #136]	; (8006dd4 <TIM_OC1_SetConfig+0xf4>)
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d10c      	bne.n	8006d6a <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	f023 0308 	bic.w	r3, r3, #8
 8006d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d58:	683b      	ldr	r3, [r7, #0]
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	f023 0304 	bic.w	r3, r3, #4
 8006d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a17      	ldr	r2, [pc, #92]	; (8006dcc <TIM_OC1_SetConfig+0xec>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d007      	beq.n	8006d82 <TIM_OC1_SetConfig+0xa2>
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	4a16      	ldr	r2, [pc, #88]	; (8006dd0 <TIM_OC1_SetConfig+0xf0>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d003      	beq.n	8006d82 <TIM_OC1_SetConfig+0xa2>
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4a15      	ldr	r2, [pc, #84]	; (8006dd4 <TIM_OC1_SetConfig+0xf4>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d111      	bne.n	8006da6 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d88:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d90:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
 8006d96:	693a      	ldr	r2, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4313      	orrs	r3, r2
 8006da4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	68fa      	ldr	r2, [r7, #12]
 8006db0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685a      	ldr	r2, [r3, #4]
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	621a      	str	r2, [r3, #32]
}
 8006dc0:	bf00      	nop
 8006dc2:	371c      	adds	r7, #28
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	40012c00 	.word	0x40012c00
 8006dd0:	40014000 	.word	0x40014000
 8006dd4:	40014400 	.word	0x40014400

08006dd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b087      	sub	sp, #28
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
 8006de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	f023 0210 	bic.w	r2, r3, #16
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f023 0320 	bic.w	r3, r3, #32
 8006e26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	697a      	ldr	r2, [r7, #20]
 8006e30:	4313      	orrs	r3, r2
 8006e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a22      	ldr	r2, [pc, #136]	; (8006ec0 <TIM_OC2_SetConfig+0xe8>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d10d      	bne.n	8006e58 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	011b      	lsls	r3, r3, #4
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e56:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a19      	ldr	r2, [pc, #100]	; (8006ec0 <TIM_OC2_SetConfig+0xe8>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d007      	beq.n	8006e70 <TIM_OC2_SetConfig+0x98>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	4a18      	ldr	r2, [pc, #96]	; (8006ec4 <TIM_OC2_SetConfig+0xec>)
 8006e64:	4293      	cmp	r3, r2
 8006e66:	d003      	beq.n	8006e70 <TIM_OC2_SetConfig+0x98>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a17      	ldr	r2, [pc, #92]	; (8006ec8 <TIM_OC2_SetConfig+0xf0>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d113      	bne.n	8006e98 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e76:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e78:	693b      	ldr	r3, [r7, #16]
 8006e7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	695b      	ldr	r3, [r3, #20]
 8006e84:	009b      	lsls	r3, r3, #2
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	699b      	ldr	r3, [r3, #24]
 8006e90:	009b      	lsls	r3, r3, #2
 8006e92:	693a      	ldr	r2, [r7, #16]
 8006e94:	4313      	orrs	r3, r2
 8006e96:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	693a      	ldr	r2, [r7, #16]
 8006e9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685a      	ldr	r2, [r3, #4]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	697a      	ldr	r2, [r7, #20]
 8006eb0:	621a      	str	r2, [r3, #32]
}
 8006eb2:	bf00      	nop
 8006eb4:	371c      	adds	r7, #28
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	40012c00 	.word	0x40012c00
 8006ec4:	40014000 	.word	0x40014000
 8006ec8:	40014400 	.word	0x40014400

08006ecc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	b087      	sub	sp, #28
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6a1b      	ldr	r3, [r3, #32]
 8006eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6a1b      	ldr	r3, [r3, #32]
 8006ee0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	685b      	ldr	r3, [r3, #4]
 8006eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	69db      	ldr	r3, [r3, #28]
 8006ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f023 0303 	bic.w	r3, r3, #3
 8006f06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	68fa      	ldr	r2, [r7, #12]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	021b      	lsls	r3, r3, #8
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	4a21      	ldr	r2, [pc, #132]	; (8006fb0 <TIM_OC3_SetConfig+0xe4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d10d      	bne.n	8006f4a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	68db      	ldr	r3, [r3, #12]
 8006f3a:	021b      	lsls	r3, r3, #8
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	4a18      	ldr	r2, [pc, #96]	; (8006fb0 <TIM_OC3_SetConfig+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d007      	beq.n	8006f62 <TIM_OC3_SetConfig+0x96>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	4a17      	ldr	r2, [pc, #92]	; (8006fb4 <TIM_OC3_SetConfig+0xe8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d003      	beq.n	8006f62 <TIM_OC3_SetConfig+0x96>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	4a16      	ldr	r2, [pc, #88]	; (8006fb8 <TIM_OC3_SetConfig+0xec>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d113      	bne.n	8006f8a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f62:	693b      	ldr	r3, [r7, #16]
 8006f64:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f6a:	693b      	ldr	r3, [r7, #16]
 8006f6c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f72:	683b      	ldr	r3, [r7, #0]
 8006f74:	695b      	ldr	r3, [r3, #20]
 8006f76:	011b      	lsls	r3, r3, #4
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	011b      	lsls	r3, r3, #4
 8006f84:	693a      	ldr	r2, [r7, #16]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685a      	ldr	r2, [r3, #4]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	697a      	ldr	r2, [r7, #20]
 8006fa2:	621a      	str	r2, [r3, #32]
}
 8006fa4:	bf00      	nop
 8006fa6:	371c      	adds	r7, #28
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	40012c00 	.word	0x40012c00
 8006fb4:	40014000 	.word	0x40014000
 8006fb8:	40014400 	.word	0x40014400

08006fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b087      	sub	sp, #28
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6a1b      	ldr	r3, [r3, #32]
 8006fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6a1b      	ldr	r3, [r3, #32]
 8006fd0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	69db      	ldr	r3, [r3, #28]
 8006fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006fea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	021b      	lsls	r3, r3, #8
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	4313      	orrs	r3, r2
 8007002:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800700a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	689b      	ldr	r3, [r3, #8]
 8007010:	031b      	lsls	r3, r3, #12
 8007012:	693a      	ldr	r2, [r7, #16]
 8007014:	4313      	orrs	r3, r2
 8007016:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	4a14      	ldr	r2, [pc, #80]	; (800706c <TIM_OC4_SetConfig+0xb0>)
 800701c:	4293      	cmp	r3, r2
 800701e:	d007      	beq.n	8007030 <TIM_OC4_SetConfig+0x74>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	4a13      	ldr	r2, [pc, #76]	; (8007070 <TIM_OC4_SetConfig+0xb4>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d003      	beq.n	8007030 <TIM_OC4_SetConfig+0x74>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a12      	ldr	r2, [pc, #72]	; (8007074 <TIM_OC4_SetConfig+0xb8>)
 800702c:	4293      	cmp	r3, r2
 800702e:	d109      	bne.n	8007044 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007036:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	019b      	lsls	r3, r3, #6
 800703e:	697a      	ldr	r2, [r7, #20]
 8007040:	4313      	orrs	r3, r2
 8007042:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	697a      	ldr	r2, [r7, #20]
 8007048:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	685a      	ldr	r2, [r3, #4]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	693a      	ldr	r2, [r7, #16]
 800705c:	621a      	str	r2, [r3, #32]
}
 800705e:	bf00      	nop
 8007060:	371c      	adds	r7, #28
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40012c00 	.word	0x40012c00
 8007070:	40014000 	.word	0x40014000
 8007074:	40014400 	.word	0x40014400

08007078 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007078:	b480      	push	{r7}
 800707a:	b087      	sub	sp, #28
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a1b      	ldr	r3, [r3, #32]
 800708c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800709e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	68fa      	ldr	r2, [r7, #12]
 80070b2:	4313      	orrs	r3, r2
 80070b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80070bc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	041b      	lsls	r3, r3, #16
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	4a13      	ldr	r2, [pc, #76]	; (800711c <TIM_OC5_SetConfig+0xa4>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d007      	beq.n	80070e2 <TIM_OC5_SetConfig+0x6a>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a12      	ldr	r2, [pc, #72]	; (8007120 <TIM_OC5_SetConfig+0xa8>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d003      	beq.n	80070e2 <TIM_OC5_SetConfig+0x6a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a11      	ldr	r2, [pc, #68]	; (8007124 <TIM_OC5_SetConfig+0xac>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d109      	bne.n	80070f6 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070e2:	697b      	ldr	r3, [r7, #20]
 80070e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	695b      	ldr	r3, [r3, #20]
 80070ee:	021b      	lsls	r3, r3, #8
 80070f0:	697a      	ldr	r2, [r7, #20]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	697a      	ldr	r2, [r7, #20]
 80070fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	68fa      	ldr	r2, [r7, #12]
 8007100:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	693a      	ldr	r2, [r7, #16]
 800710e:	621a      	str	r2, [r3, #32]
}
 8007110:	bf00      	nop
 8007112:	371c      	adds	r7, #28
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40012c00 	.word	0x40012c00
 8007120:	40014000 	.word	0x40014000
 8007124:	40014400 	.word	0x40014400

08007128 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007128:	b480      	push	{r7}
 800712a:	b087      	sub	sp, #28
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	6a1b      	ldr	r3, [r3, #32]
 8007136:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6a1b      	ldr	r3, [r3, #32]
 800713c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685b      	ldr	r3, [r3, #4]
 8007148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007156:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800715a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800715c:	683b      	ldr	r3, [r7, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	021b      	lsls	r3, r3, #8
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4313      	orrs	r3, r2
 8007166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800716e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	051b      	lsls	r3, r3, #20
 8007176:	693a      	ldr	r2, [r7, #16]
 8007178:	4313      	orrs	r3, r2
 800717a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	4a14      	ldr	r2, [pc, #80]	; (80071d0 <TIM_OC6_SetConfig+0xa8>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d007      	beq.n	8007194 <TIM_OC6_SetConfig+0x6c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <TIM_OC6_SetConfig+0xac>)
 8007188:	4293      	cmp	r3, r2
 800718a:	d003      	beq.n	8007194 <TIM_OC6_SetConfig+0x6c>
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	4a12      	ldr	r2, [pc, #72]	; (80071d8 <TIM_OC6_SetConfig+0xb0>)
 8007190:	4293      	cmp	r3, r2
 8007192:	d109      	bne.n	80071a8 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800719a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	695b      	ldr	r3, [r3, #20]
 80071a0:	029b      	lsls	r3, r3, #10
 80071a2:	697a      	ldr	r2, [r7, #20]
 80071a4:	4313      	orrs	r3, r2
 80071a6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	697a      	ldr	r2, [r7, #20]
 80071ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	685a      	ldr	r2, [r3, #4]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	693a      	ldr	r2, [r7, #16]
 80071c0:	621a      	str	r2, [r3, #32]
}
 80071c2:	bf00      	nop
 80071c4:	371c      	adds	r7, #28
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40012c00 	.word	0x40012c00
 80071d4:	40014000 	.word	0x40014000
 80071d8:	40014400 	.word	0x40014400

080071dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071dc:	b480      	push	{r7}
 80071de:	b087      	sub	sp, #28
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	6a1b      	ldr	r3, [r3, #32]
 80071ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f023 0201 	bic.w	r2, r3, #1
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	699b      	ldr	r3, [r3, #24]
 80071fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007206:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	011b      	lsls	r3, r3, #4
 800720c:	693a      	ldr	r2, [r7, #16]
 800720e:	4313      	orrs	r3, r2
 8007210:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	f023 030a 	bic.w	r3, r3, #10
 8007218:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800721a:	697a      	ldr	r2, [r7, #20]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	693a      	ldr	r2, [r7, #16]
 8007226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	697a      	ldr	r2, [r7, #20]
 800722c:	621a      	str	r2, [r3, #32]
}
 800722e:	bf00      	nop
 8007230:	371c      	adds	r7, #28
 8007232:	46bd      	mov	sp, r7
 8007234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007238:	4770      	bx	lr

0800723a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800723a:	b480      	push	{r7}
 800723c:	b087      	sub	sp, #28
 800723e:	af00      	add	r7, sp, #0
 8007240:	60f8      	str	r0, [r7, #12]
 8007242:	60b9      	str	r1, [r7, #8]
 8007244:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6a1b      	ldr	r3, [r3, #32]
 800724a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	6a1b      	ldr	r3, [r3, #32]
 8007250:	f023 0210 	bic.w	r2, r3, #16
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007264:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	031b      	lsls	r3, r3, #12
 800726a:	693a      	ldr	r2, [r7, #16]
 800726c:	4313      	orrs	r3, r2
 800726e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007276:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	697a      	ldr	r2, [r7, #20]
 800727e:	4313      	orrs	r3, r2
 8007280:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	693a      	ldr	r2, [r7, #16]
 8007286:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	621a      	str	r2, [r3, #32]
}
 800728e:	bf00      	nop
 8007290:	371c      	adds	r7, #28
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr

0800729a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800729a:	b480      	push	{r7}
 800729c:	b085      	sub	sp, #20
 800729e:	af00      	add	r7, sp, #0
 80072a0:	6078      	str	r0, [r7, #4]
 80072a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	689b      	ldr	r3, [r3, #8]
 80072a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	4313      	orrs	r3, r2
 80072b8:	f043 0307 	orr.w	r3, r3, #7
 80072bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68fa      	ldr	r2, [r7, #12]
 80072c2:	609a      	str	r2, [r3, #8]
}
 80072c4:	bf00      	nop
 80072c6:	3714      	adds	r7, #20
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	60f8      	str	r0, [r7, #12]
 80072d8:	60b9      	str	r1, [r7, #8]
 80072da:	607a      	str	r2, [r7, #4]
 80072dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	689b      	ldr	r3, [r3, #8]
 80072e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	021a      	lsls	r2, r3, #8
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	431a      	orrs	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	697a      	ldr	r2, [r7, #20]
 8007302:	609a      	str	r2, [r3, #8]
}
 8007304:	bf00      	nop
 8007306:	371c      	adds	r7, #28
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007310:	b480      	push	{r7}
 8007312:	b085      	sub	sp, #20
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007320:	2b01      	cmp	r3, #1
 8007322:	d101      	bne.n	8007328 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007324:	2302      	movs	r3, #2
 8007326:	e04f      	b.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a21      	ldr	r2, [pc, #132]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800734e:	4293      	cmp	r3, r2
 8007350:	d108      	bne.n	8007364 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007358:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	685b      	ldr	r3, [r3, #4]
 800735e:	68fa      	ldr	r2, [r7, #12]
 8007360:	4313      	orrs	r3, r2
 8007362:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800736a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800736c:	683b      	ldr	r3, [r7, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	4313      	orrs	r3, r2
 8007374:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	68fa      	ldr	r2, [r7, #12]
 800737c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a14      	ldr	r2, [pc, #80]	; (80073d4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d009      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007390:	d004      	beq.n	800739c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	4a10      	ldr	r2, [pc, #64]	; (80073d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007398:	4293      	cmp	r3, r2
 800739a:	d10c      	bne.n	80073b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	68ba      	ldr	r2, [r7, #8]
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80073c6:	2300      	movs	r3, #0
}
 80073c8:	4618      	mov	r0, r3
 80073ca:	3714      	adds	r7, #20
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40014000 	.word	0x40014000

080073dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b082      	sub	sp, #8
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d101      	bne.n	800742a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007426:	2301      	movs	r3, #1
 8007428:	e040      	b.n	80074ac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800742e:	2b00      	cmp	r3, #0
 8007430:	d106      	bne.n	8007440 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f7fa fc42 	bl	8001cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2224      	movs	r2, #36	; 0x24
 8007444:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0201 	bic.w	r2, r2, #1
 8007454:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	2b00      	cmp	r3, #0
 800745c:	d002      	beq.n	8007464 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fade 	bl	8007a20 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f8af 	bl	80075c8 <UART_SetConfig>
 800746a:	4603      	mov	r3, r0
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e01b      	b.n	80074ac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007482:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007492:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f042 0201 	orr.w	r2, r2, #1
 80074a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fb5d 	bl	8007b64 <UART_CheckIdleState>
 80074aa:	4603      	mov	r3, r0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	; 0x28
 80074b8:	af02      	add	r7, sp, #8
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	4613      	mov	r3, r2
 80074c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80074c8:	2b20      	cmp	r3, #32
 80074ca:	d178      	bne.n	80075be <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_UART_Transmit+0x24>
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d101      	bne.n	80074dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80074d8:	2301      	movs	r3, #1
 80074da:	e071      	b.n	80075c0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2221      	movs	r2, #33	; 0x21
 80074e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074ea:	f7fa fce7 	bl	8001ebc <HAL_GetTick>
 80074ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	88fa      	ldrh	r2, [r7, #6]
 80074f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	689b      	ldr	r3, [r3, #8]
 8007504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007508:	d108      	bne.n	800751c <HAL_UART_Transmit+0x68>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d104      	bne.n	800751c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007512:	2300      	movs	r3, #0
 8007514:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	61bb      	str	r3, [r7, #24]
 800751a:	e003      	b.n	8007524 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007520:	2300      	movs	r3, #0
 8007522:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007524:	e030      	b.n	8007588 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f000 fbbf 	bl	8007cb4 <UART_WaitOnFlagUntilTimeout>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d004      	beq.n	8007546 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2220      	movs	r2, #32
 8007540:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007542:	2303      	movs	r3, #3
 8007544:	e03c      	b.n	80075c0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d10b      	bne.n	8007564 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800754c:	69bb      	ldr	r3, [r7, #24]
 800754e:	881a      	ldrh	r2, [r3, #0]
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007558:	b292      	uxth	r2, r2
 800755a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800755c:	69bb      	ldr	r3, [r7, #24]
 800755e:	3302      	adds	r3, #2
 8007560:	61bb      	str	r3, [r7, #24]
 8007562:	e008      	b.n	8007576 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	781a      	ldrb	r2, [r3, #0]
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	b292      	uxth	r2, r2
 800756e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	3301      	adds	r3, #1
 8007574:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800757c:	b29b      	uxth	r3, r3
 800757e:	3b01      	subs	r3, #1
 8007580:	b29a      	uxth	r2, r3
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1c8      	bne.n	8007526 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	9300      	str	r3, [sp, #0]
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2200      	movs	r2, #0
 800759c:	2140      	movs	r1, #64	; 0x40
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f000 fb88 	bl	8007cb4 <UART_WaitOnFlagUntilTimeout>
 80075a4:	4603      	mov	r3, r0
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d004      	beq.n	80075b4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2220      	movs	r2, #32
 80075ae:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80075b0:	2303      	movs	r3, #3
 80075b2:	e005      	b.n	80075c0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	2220      	movs	r2, #32
 80075b8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80075ba:	2300      	movs	r3, #0
 80075bc:	e000      	b.n	80075c0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80075be:	2302      	movs	r3, #2
  }
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3720      	adds	r7, #32
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80075c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80075cc:	b08a      	sub	sp, #40	; 0x28
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80075d2:	2300      	movs	r3, #0
 80075d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	689a      	ldr	r2, [r3, #8]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	691b      	ldr	r3, [r3, #16]
 80075e0:	431a      	orrs	r2, r3
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	695b      	ldr	r3, [r3, #20]
 80075e6:	431a      	orrs	r2, r3
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	69db      	ldr	r3, [r3, #28]
 80075ec:	4313      	orrs	r3, r2
 80075ee:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	681a      	ldr	r2, [r3, #0]
 80075f6:	4bb4      	ldr	r3, [pc, #720]	; (80078c8 <UART_SetConfig+0x300>)
 80075f8:	4013      	ands	r3, r2
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	6812      	ldr	r2, [r2, #0]
 80075fe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007600:	430b      	orrs	r3, r1
 8007602:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	68da      	ldr	r2, [r3, #12]
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	430a      	orrs	r2, r1
 8007618:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	699b      	ldr	r3, [r3, #24]
 800761e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4aa9      	ldr	r2, [pc, #676]	; (80078cc <UART_SetConfig+0x304>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d004      	beq.n	8007634 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007630:	4313      	orrs	r3, r2
 8007632:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007644:	430a      	orrs	r2, r1
 8007646:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4aa0      	ldr	r2, [pc, #640]	; (80078d0 <UART_SetConfig+0x308>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d126      	bne.n	80076a0 <UART_SetConfig+0xd8>
 8007652:	4ba0      	ldr	r3, [pc, #640]	; (80078d4 <UART_SetConfig+0x30c>)
 8007654:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007658:	f003 0303 	and.w	r3, r3, #3
 800765c:	2b03      	cmp	r3, #3
 800765e:	d81b      	bhi.n	8007698 <UART_SetConfig+0xd0>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <UART_SetConfig+0xa0>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	08007679 	.word	0x08007679
 800766c:	08007689 	.word	0x08007689
 8007670:	08007681 	.word	0x08007681
 8007674:	08007691 	.word	0x08007691
 8007678:	2301      	movs	r3, #1
 800767a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800767e:	e080      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007680:	2302      	movs	r3, #2
 8007682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007686:	e07c      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007688:	2304      	movs	r3, #4
 800768a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800768e:	e078      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007690:	2308      	movs	r3, #8
 8007692:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007696:	e074      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007698:	2310      	movs	r3, #16
 800769a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800769e:	e070      	b.n	8007782 <UART_SetConfig+0x1ba>
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4a8c      	ldr	r2, [pc, #560]	; (80078d8 <UART_SetConfig+0x310>)
 80076a6:	4293      	cmp	r3, r2
 80076a8:	d138      	bne.n	800771c <UART_SetConfig+0x154>
 80076aa:	4b8a      	ldr	r3, [pc, #552]	; (80078d4 <UART_SetConfig+0x30c>)
 80076ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076b0:	f003 030c 	and.w	r3, r3, #12
 80076b4:	2b0c      	cmp	r3, #12
 80076b6:	d82d      	bhi.n	8007714 <UART_SetConfig+0x14c>
 80076b8:	a201      	add	r2, pc, #4	; (adr r2, 80076c0 <UART_SetConfig+0xf8>)
 80076ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076be:	bf00      	nop
 80076c0:	080076f5 	.word	0x080076f5
 80076c4:	08007715 	.word	0x08007715
 80076c8:	08007715 	.word	0x08007715
 80076cc:	08007715 	.word	0x08007715
 80076d0:	08007705 	.word	0x08007705
 80076d4:	08007715 	.word	0x08007715
 80076d8:	08007715 	.word	0x08007715
 80076dc:	08007715 	.word	0x08007715
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	08007715 	.word	0x08007715
 80076e8:	08007715 	.word	0x08007715
 80076ec:	08007715 	.word	0x08007715
 80076f0:	0800770d 	.word	0x0800770d
 80076f4:	2300      	movs	r3, #0
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fa:	e042      	b.n	8007782 <UART_SetConfig+0x1ba>
 80076fc:	2302      	movs	r3, #2
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007702:	e03e      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007704:	2304      	movs	r3, #4
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e03a      	b.n	8007782 <UART_SetConfig+0x1ba>
 800770c:	2308      	movs	r3, #8
 800770e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007712:	e036      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007714:	2310      	movs	r3, #16
 8007716:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800771a:	e032      	b.n	8007782 <UART_SetConfig+0x1ba>
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a6a      	ldr	r2, [pc, #424]	; (80078cc <UART_SetConfig+0x304>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d12a      	bne.n	800777c <UART_SetConfig+0x1b4>
 8007726:	4b6b      	ldr	r3, [pc, #428]	; (80078d4 <UART_SetConfig+0x30c>)
 8007728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800772c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007730:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007734:	d01a      	beq.n	800776c <UART_SetConfig+0x1a4>
 8007736:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800773a:	d81b      	bhi.n	8007774 <UART_SetConfig+0x1ac>
 800773c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007740:	d00c      	beq.n	800775c <UART_SetConfig+0x194>
 8007742:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007746:	d815      	bhi.n	8007774 <UART_SetConfig+0x1ac>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d003      	beq.n	8007754 <UART_SetConfig+0x18c>
 800774c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007750:	d008      	beq.n	8007764 <UART_SetConfig+0x19c>
 8007752:	e00f      	b.n	8007774 <UART_SetConfig+0x1ac>
 8007754:	2300      	movs	r3, #0
 8007756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800775a:	e012      	b.n	8007782 <UART_SetConfig+0x1ba>
 800775c:	2302      	movs	r3, #2
 800775e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007762:	e00e      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007764:	2304      	movs	r3, #4
 8007766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776a:	e00a      	b.n	8007782 <UART_SetConfig+0x1ba>
 800776c:	2308      	movs	r3, #8
 800776e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007772:	e006      	b.n	8007782 <UART_SetConfig+0x1ba>
 8007774:	2310      	movs	r3, #16
 8007776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777a:	e002      	b.n	8007782 <UART_SetConfig+0x1ba>
 800777c:	2310      	movs	r3, #16
 800777e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a51      	ldr	r2, [pc, #324]	; (80078cc <UART_SetConfig+0x304>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d17a      	bne.n	8007882 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800778c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007790:	2b08      	cmp	r3, #8
 8007792:	d824      	bhi.n	80077de <UART_SetConfig+0x216>
 8007794:	a201      	add	r2, pc, #4	; (adr r2, 800779c <UART_SetConfig+0x1d4>)
 8007796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800779a:	bf00      	nop
 800779c:	080077c1 	.word	0x080077c1
 80077a0:	080077df 	.word	0x080077df
 80077a4:	080077c9 	.word	0x080077c9
 80077a8:	080077df 	.word	0x080077df
 80077ac:	080077cf 	.word	0x080077cf
 80077b0:	080077df 	.word	0x080077df
 80077b4:	080077df 	.word	0x080077df
 80077b8:	080077df 	.word	0x080077df
 80077bc:	080077d7 	.word	0x080077d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077c0:	f7fe fb80 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 80077c4:	61f8      	str	r0, [r7, #28]
        break;
 80077c6:	e010      	b.n	80077ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077c8:	4b44      	ldr	r3, [pc, #272]	; (80078dc <UART_SetConfig+0x314>)
 80077ca:	61fb      	str	r3, [r7, #28]
        break;
 80077cc:	e00d      	b.n	80077ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077ce:	f7fe fae1 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 80077d2:	61f8      	str	r0, [r7, #28]
        break;
 80077d4:	e009      	b.n	80077ea <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077da:	61fb      	str	r3, [r7, #28]
        break;
 80077dc:	e005      	b.n	80077ea <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80077de:	2300      	movs	r3, #0
 80077e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077e8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	f000 8107 	beq.w	8007a00 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	685a      	ldr	r2, [r3, #4]
 80077f6:	4613      	mov	r3, r2
 80077f8:	005b      	lsls	r3, r3, #1
 80077fa:	4413      	add	r3, r2
 80077fc:	69fa      	ldr	r2, [r7, #28]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d305      	bcc.n	800780e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007808:	69fa      	ldr	r2, [r7, #28]
 800780a:	429a      	cmp	r2, r3
 800780c:	d903      	bls.n	8007816 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007814:	e0f4      	b.n	8007a00 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007816:	69fb      	ldr	r3, [r7, #28]
 8007818:	2200      	movs	r2, #0
 800781a:	461c      	mov	r4, r3
 800781c:	4615      	mov	r5, r2
 800781e:	f04f 0200 	mov.w	r2, #0
 8007822:	f04f 0300 	mov.w	r3, #0
 8007826:	022b      	lsls	r3, r5, #8
 8007828:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800782c:	0222      	lsls	r2, r4, #8
 800782e:	68f9      	ldr	r1, [r7, #12]
 8007830:	6849      	ldr	r1, [r1, #4]
 8007832:	0849      	lsrs	r1, r1, #1
 8007834:	2000      	movs	r0, #0
 8007836:	4688      	mov	r8, r1
 8007838:	4681      	mov	r9, r0
 800783a:	eb12 0a08 	adds.w	sl, r2, r8
 800783e:	eb43 0b09 	adc.w	fp, r3, r9
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	603b      	str	r3, [r7, #0]
 800784a:	607a      	str	r2, [r7, #4]
 800784c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007850:	4650      	mov	r0, sl
 8007852:	4659      	mov	r1, fp
 8007854:	f7f9 f9a8 	bl	8000ba8 <__aeabi_uldivmod>
 8007858:	4602      	mov	r2, r0
 800785a:	460b      	mov	r3, r1
 800785c:	4613      	mov	r3, r2
 800785e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007860:	69bb      	ldr	r3, [r7, #24]
 8007862:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007866:	d308      	bcc.n	800787a <UART_SetConfig+0x2b2>
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800786e:	d204      	bcs.n	800787a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	69ba      	ldr	r2, [r7, #24]
 8007876:	60da      	str	r2, [r3, #12]
 8007878:	e0c2      	b.n	8007a00 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800787a:	2301      	movs	r3, #1
 800787c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007880:	e0be      	b.n	8007a00 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	69db      	ldr	r3, [r3, #28]
 8007886:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800788a:	d16a      	bne.n	8007962 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800788c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007890:	2b08      	cmp	r3, #8
 8007892:	d834      	bhi.n	80078fe <UART_SetConfig+0x336>
 8007894:	a201      	add	r2, pc, #4	; (adr r2, 800789c <UART_SetConfig+0x2d4>)
 8007896:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789a:	bf00      	nop
 800789c:	080078c1 	.word	0x080078c1
 80078a0:	080078e1 	.word	0x080078e1
 80078a4:	080078e9 	.word	0x080078e9
 80078a8:	080078ff 	.word	0x080078ff
 80078ac:	080078ef 	.word	0x080078ef
 80078b0:	080078ff 	.word	0x080078ff
 80078b4:	080078ff 	.word	0x080078ff
 80078b8:	080078ff 	.word	0x080078ff
 80078bc:	080078f7 	.word	0x080078f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80078c0:	f7fe fb00 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 80078c4:	61f8      	str	r0, [r7, #28]
        break;
 80078c6:	e020      	b.n	800790a <UART_SetConfig+0x342>
 80078c8:	efff69f3 	.word	0xefff69f3
 80078cc:	40008000 	.word	0x40008000
 80078d0:	40013800 	.word	0x40013800
 80078d4:	40021000 	.word	0x40021000
 80078d8:	40004400 	.word	0x40004400
 80078dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80078e0:	f7fe fb06 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 80078e4:	61f8      	str	r0, [r7, #28]
        break;
 80078e6:	e010      	b.n	800790a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80078e8:	4b4c      	ldr	r3, [pc, #304]	; (8007a1c <UART_SetConfig+0x454>)
 80078ea:	61fb      	str	r3, [r7, #28]
        break;
 80078ec:	e00d      	b.n	800790a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80078ee:	f7fe fa51 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 80078f2:	61f8      	str	r0, [r7, #28]
        break;
 80078f4:	e009      	b.n	800790a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80078f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80078fa:	61fb      	str	r3, [r7, #28]
        break;
 80078fc:	e005      	b.n	800790a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80078fe:	2300      	movs	r3, #0
 8007900:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007908:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800790a:	69fb      	ldr	r3, [r7, #28]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d077      	beq.n	8007a00 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007910:	69fb      	ldr	r3, [r7, #28]
 8007912:	005a      	lsls	r2, r3, #1
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	085b      	lsrs	r3, r3, #1
 800791a:	441a      	add	r2, r3
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	685b      	ldr	r3, [r3, #4]
 8007920:	fbb2 f3f3 	udiv	r3, r2, r3
 8007924:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	2b0f      	cmp	r3, #15
 800792a:	d916      	bls.n	800795a <UART_SetConfig+0x392>
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d212      	bcs.n	800795a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007934:	69bb      	ldr	r3, [r7, #24]
 8007936:	b29b      	uxth	r3, r3
 8007938:	f023 030f 	bic.w	r3, r3, #15
 800793c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800793e:	69bb      	ldr	r3, [r7, #24]
 8007940:	085b      	lsrs	r3, r3, #1
 8007942:	b29b      	uxth	r3, r3
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	b29a      	uxth	r2, r3
 800794a:	8afb      	ldrh	r3, [r7, #22]
 800794c:	4313      	orrs	r3, r2
 800794e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	8afa      	ldrh	r2, [r7, #22]
 8007956:	60da      	str	r2, [r3, #12]
 8007958:	e052      	b.n	8007a00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007960:	e04e      	b.n	8007a00 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007962:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007966:	2b08      	cmp	r3, #8
 8007968:	d827      	bhi.n	80079ba <UART_SetConfig+0x3f2>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0x3a8>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	08007995 	.word	0x08007995
 8007974:	0800799d 	.word	0x0800799d
 8007978:	080079a5 	.word	0x080079a5
 800797c:	080079bb 	.word	0x080079bb
 8007980:	080079ab 	.word	0x080079ab
 8007984:	080079bb 	.word	0x080079bb
 8007988:	080079bb 	.word	0x080079bb
 800798c:	080079bb 	.word	0x080079bb
 8007990:	080079b3 	.word	0x080079b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007994:	f7fe fa96 	bl	8005ec4 <HAL_RCC_GetPCLK1Freq>
 8007998:	61f8      	str	r0, [r7, #28]
        break;
 800799a:	e014      	b.n	80079c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800799c:	f7fe faa8 	bl	8005ef0 <HAL_RCC_GetPCLK2Freq>
 80079a0:	61f8      	str	r0, [r7, #28]
        break;
 80079a2:	e010      	b.n	80079c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079a4:	4b1d      	ldr	r3, [pc, #116]	; (8007a1c <UART_SetConfig+0x454>)
 80079a6:	61fb      	str	r3, [r7, #28]
        break;
 80079a8:	e00d      	b.n	80079c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079aa:	f7fe f9f3 	bl	8005d94 <HAL_RCC_GetSysClockFreq>
 80079ae:	61f8      	str	r0, [r7, #28]
        break;
 80079b0:	e009      	b.n	80079c6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079b6:	61fb      	str	r3, [r7, #28]
        break;
 80079b8:	e005      	b.n	80079c6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80079ba:	2300      	movs	r3, #0
 80079bc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80079c4:	bf00      	nop
    }

    if (pclk != 0U)
 80079c6:	69fb      	ldr	r3, [r7, #28]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d019      	beq.n	8007a00 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	685b      	ldr	r3, [r3, #4]
 80079d0:	085a      	lsrs	r2, r3, #1
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	441a      	add	r2, r3
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	fbb2 f3f3 	udiv	r3, r2, r3
 80079de:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80079e0:	69bb      	ldr	r3, [r7, #24]
 80079e2:	2b0f      	cmp	r3, #15
 80079e4:	d909      	bls.n	80079fa <UART_SetConfig+0x432>
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ec:	d205      	bcs.n	80079fa <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	60da      	str	r2, [r3, #12]
 80079f8:	e002      	b.n	8007a00 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80079fa:	2301      	movs	r3, #1
 80079fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007a0c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	3728      	adds	r7, #40	; 0x28
 8007a14:	46bd      	mov	sp, r7
 8007a16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007a1a:	bf00      	nop
 8007a1c:	00f42400 	.word	0x00f42400

08007a20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d00a      	beq.n	8007a4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	685b      	ldr	r3, [r3, #4]
 8007a3a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	430a      	orrs	r2, r1
 8007a48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4e:	f003 0301 	and.w	r3, r3, #1
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d00a      	beq.n	8007a6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	685b      	ldr	r3, [r3, #4]
 8007a5c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	430a      	orrs	r2, r1
 8007a6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a70:	f003 0302 	and.w	r3, r3, #2
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d00a      	beq.n	8007a8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	685b      	ldr	r3, [r3, #4]
 8007a7e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	430a      	orrs	r2, r1
 8007a8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	430a      	orrs	r2, r1
 8007aae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab4:	f003 0310 	and.w	r3, r3, #16
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00a      	beq.n	8007ad2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	430a      	orrs	r2, r1
 8007ad0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 0320 	and.w	r3, r3, #32
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d00a      	beq.n	8007af4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d01a      	beq.n	8007b36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	685b      	ldr	r3, [r3, #4]
 8007b06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	430a      	orrs	r2, r1
 8007b14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b1e:	d10a      	bne.n	8007b36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	430a      	orrs	r2, r1
 8007b34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	430a      	orrs	r2, r1
 8007b56:	605a      	str	r2, [r3, #4]
  }
}
 8007b58:	bf00      	nop
 8007b5a:	370c      	adds	r7, #12
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b62:	4770      	bx	lr

08007b64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b098      	sub	sp, #96	; 0x60
 8007b68:	af02      	add	r7, sp, #8
 8007b6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007b74:	f7fa f9a2 	bl	8001ebc <HAL_GetTick>
 8007b78:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f003 0308 	and.w	r3, r3, #8
 8007b84:	2b08      	cmp	r3, #8
 8007b86:	d12e      	bne.n	8007be6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007b88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007b8c:	9300      	str	r3, [sp, #0]
 8007b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b90:	2200      	movs	r2, #0
 8007b92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007b96:	6878      	ldr	r0, [r7, #4]
 8007b98:	f000 f88c 	bl	8007cb4 <UART_WaitOnFlagUntilTimeout>
 8007b9c:	4603      	mov	r3, r0
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d021      	beq.n	8007be6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007baa:	e853 3f00 	ldrex	r3, [r3]
 8007bae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb6:	653b      	str	r3, [r7, #80]	; 0x50
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bc0:	647b      	str	r3, [r7, #68]	; 0x44
 8007bc2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bc8:	e841 2300 	strex	r3, r2, [r1]
 8007bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d1e6      	bne.n	8007ba2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	2220      	movs	r2, #32
 8007bd8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007be2:	2303      	movs	r3, #3
 8007be4:	e062      	b.n	8007cac <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f003 0304 	and.w	r3, r3, #4
 8007bf0:	2b04      	cmp	r3, #4
 8007bf2:	d149      	bne.n	8007c88 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f856 	bl	8007cb4 <UART_WaitOnFlagUntilTimeout>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d03c      	beq.n	8007c88 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c16:	e853 3f00 	ldrex	r3, [r3]
 8007c1a:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	461a      	mov	r2, r3
 8007c2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007c2e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c34:	e841 2300 	strex	r3, r2, [r1]
 8007c38:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1e6      	bne.n	8007c0e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	3308      	adds	r3, #8
 8007c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0301 	bic.w	r3, r3, #1
 8007c56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	3308      	adds	r3, #8
 8007c5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c60:	61fa      	str	r2, [r7, #28]
 8007c62:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c64:	69b9      	ldr	r1, [r7, #24]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	e841 2300 	strex	r3, r2, [r1]
 8007c6c:	617b      	str	r3, [r7, #20]
   return(result);
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d1e5      	bne.n	8007c40 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2220      	movs	r2, #32
 8007c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c84:	2303      	movs	r3, #3
 8007c86:	e011      	b.n	8007cac <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2220      	movs	r2, #32
 8007c8c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	2220      	movs	r2, #32
 8007c92:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	2200      	movs	r2, #0
 8007c9a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3758      	adds	r7, #88	; 0x58
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	4613      	mov	r3, r2
 8007cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cc4:	e049      	b.n	8007d5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cc6:	69bb      	ldr	r3, [r7, #24]
 8007cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ccc:	d045      	beq.n	8007d5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cce:	f7fa f8f5 	bl	8001ebc <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	69ba      	ldr	r2, [r7, #24]
 8007cda:	429a      	cmp	r2, r3
 8007cdc:	d302      	bcc.n	8007ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e048      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0304 	and.w	r3, r3, #4
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d031      	beq.n	8007d5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	69db      	ldr	r3, [r3, #28]
 8007cfc:	f003 0308 	and.w	r3, r3, #8
 8007d00:	2b08      	cmp	r3, #8
 8007d02:	d110      	bne.n	8007d26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	2208      	movs	r2, #8
 8007d0a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d0c:	68f8      	ldr	r0, [r7, #12]
 8007d0e:	f000 f838 	bl	8007d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	2208      	movs	r2, #8
 8007d16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	2200      	movs	r2, #0
 8007d1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007d22:	2301      	movs	r3, #1
 8007d24:	e029      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	69db      	ldr	r3, [r3, #28]
 8007d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d34:	d111      	bne.n	8007d5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007d40:	68f8      	ldr	r0, [r7, #12]
 8007d42:	f000 f81e 	bl	8007d82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2220      	movs	r2, #32
 8007d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007d56:	2303      	movs	r3, #3
 8007d58:	e00f      	b.n	8007d7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	69da      	ldr	r2, [r3, #28]
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	4013      	ands	r3, r2
 8007d64:	68ba      	ldr	r2, [r7, #8]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	bf0c      	ite	eq
 8007d6a:	2301      	moveq	r3, #1
 8007d6c:	2300      	movne	r3, #0
 8007d6e:	b2db      	uxtb	r3, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	79fb      	ldrb	r3, [r7, #7]
 8007d74:	429a      	cmp	r2, r3
 8007d76:	d0a6      	beq.n	8007cc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007d78:	2300      	movs	r3, #0
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d82:	b480      	push	{r7}
 8007d84:	b095      	sub	sp, #84	; 0x54
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d92:	e853 3f00 	ldrex	r3, [r3]
 8007d96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	461a      	mov	r2, r3
 8007da6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007da8:	643b      	str	r3, [r7, #64]	; 0x40
 8007daa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007db0:	e841 2300 	strex	r3, r2, [r1]
 8007db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d1e6      	bne.n	8007d8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc4:	6a3b      	ldr	r3, [r7, #32]
 8007dc6:	e853 3f00 	ldrex	r3, [r3]
 8007dca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3308      	adds	r3, #8
 8007dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ddc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007de4:	e841 2300 	strex	r3, r2, [r1]
 8007de8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	d118      	bne.n	8007e2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	f023 0310 	bic.w	r3, r3, #16
 8007e0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	461a      	mov	r2, r3
 8007e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e16:	61bb      	str	r3, [r7, #24]
 8007e18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1a:	6979      	ldr	r1, [r7, #20]
 8007e1c:	69ba      	ldr	r2, [r7, #24]
 8007e1e:	e841 2300 	strex	r3, r2, [r1]
 8007e22:	613b      	str	r3, [r7, #16]
   return(result);
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d1e6      	bne.n	8007df8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2220      	movs	r2, #32
 8007e2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2200      	movs	r2, #0
 8007e3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007e3e:	bf00      	nop
 8007e40:	3754      	adds	r7, #84	; 0x54
 8007e42:	46bd      	mov	sp, r7
 8007e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e48:	4770      	bx	lr

08007e4a <__cvt>:
 8007e4a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e4e:	ec55 4b10 	vmov	r4, r5, d0
 8007e52:	2d00      	cmp	r5, #0
 8007e54:	460e      	mov	r6, r1
 8007e56:	4619      	mov	r1, r3
 8007e58:	462b      	mov	r3, r5
 8007e5a:	bfbb      	ittet	lt
 8007e5c:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007e60:	461d      	movlt	r5, r3
 8007e62:	2300      	movge	r3, #0
 8007e64:	232d      	movlt	r3, #45	; 0x2d
 8007e66:	700b      	strb	r3, [r1, #0]
 8007e68:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007e6a:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007e6e:	4691      	mov	r9, r2
 8007e70:	f023 0820 	bic.w	r8, r3, #32
 8007e74:	bfbc      	itt	lt
 8007e76:	4622      	movlt	r2, r4
 8007e78:	4614      	movlt	r4, r2
 8007e7a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007e7e:	d005      	beq.n	8007e8c <__cvt+0x42>
 8007e80:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007e84:	d100      	bne.n	8007e88 <__cvt+0x3e>
 8007e86:	3601      	adds	r6, #1
 8007e88:	2102      	movs	r1, #2
 8007e8a:	e000      	b.n	8007e8e <__cvt+0x44>
 8007e8c:	2103      	movs	r1, #3
 8007e8e:	ab03      	add	r3, sp, #12
 8007e90:	9301      	str	r3, [sp, #4]
 8007e92:	ab02      	add	r3, sp, #8
 8007e94:	9300      	str	r3, [sp, #0]
 8007e96:	ec45 4b10 	vmov	d0, r4, r5
 8007e9a:	4653      	mov	r3, sl
 8007e9c:	4632      	mov	r2, r6
 8007e9e:	f000 fe6b 	bl	8008b78 <_dtoa_r>
 8007ea2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ea6:	4607      	mov	r7, r0
 8007ea8:	d102      	bne.n	8007eb0 <__cvt+0x66>
 8007eaa:	f019 0f01 	tst.w	r9, #1
 8007eae:	d022      	beq.n	8007ef6 <__cvt+0xac>
 8007eb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007eb4:	eb07 0906 	add.w	r9, r7, r6
 8007eb8:	d110      	bne.n	8007edc <__cvt+0x92>
 8007eba:	783b      	ldrb	r3, [r7, #0]
 8007ebc:	2b30      	cmp	r3, #48	; 0x30
 8007ebe:	d10a      	bne.n	8007ed6 <__cvt+0x8c>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2300      	movs	r3, #0
 8007ec4:	4620      	mov	r0, r4
 8007ec6:	4629      	mov	r1, r5
 8007ec8:	f7f8 fdfe 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ecc:	b918      	cbnz	r0, 8007ed6 <__cvt+0x8c>
 8007ece:	f1c6 0601 	rsb	r6, r6, #1
 8007ed2:	f8ca 6000 	str.w	r6, [sl]
 8007ed6:	f8da 3000 	ldr.w	r3, [sl]
 8007eda:	4499      	add	r9, r3
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	4620      	mov	r0, r4
 8007ee2:	4629      	mov	r1, r5
 8007ee4:	f7f8 fdf0 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee8:	b108      	cbz	r0, 8007eee <__cvt+0xa4>
 8007eea:	f8cd 900c 	str.w	r9, [sp, #12]
 8007eee:	2230      	movs	r2, #48	; 0x30
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	454b      	cmp	r3, r9
 8007ef4:	d307      	bcc.n	8007f06 <__cvt+0xbc>
 8007ef6:	9b03      	ldr	r3, [sp, #12]
 8007ef8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007efa:	1bdb      	subs	r3, r3, r7
 8007efc:	4638      	mov	r0, r7
 8007efe:	6013      	str	r3, [r2, #0]
 8007f00:	b004      	add	sp, #16
 8007f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f06:	1c59      	adds	r1, r3, #1
 8007f08:	9103      	str	r1, [sp, #12]
 8007f0a:	701a      	strb	r2, [r3, #0]
 8007f0c:	e7f0      	b.n	8007ef0 <__cvt+0xa6>

08007f0e <__exponent>:
 8007f0e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007f10:	4603      	mov	r3, r0
 8007f12:	2900      	cmp	r1, #0
 8007f14:	bfb8      	it	lt
 8007f16:	4249      	neglt	r1, r1
 8007f18:	f803 2b02 	strb.w	r2, [r3], #2
 8007f1c:	bfb4      	ite	lt
 8007f1e:	222d      	movlt	r2, #45	; 0x2d
 8007f20:	222b      	movge	r2, #43	; 0x2b
 8007f22:	2909      	cmp	r1, #9
 8007f24:	7042      	strb	r2, [r0, #1]
 8007f26:	dd2a      	ble.n	8007f7e <__exponent+0x70>
 8007f28:	f10d 0207 	add.w	r2, sp, #7
 8007f2c:	4617      	mov	r7, r2
 8007f2e:	260a      	movs	r6, #10
 8007f30:	4694      	mov	ip, r2
 8007f32:	fb91 f5f6 	sdiv	r5, r1, r6
 8007f36:	fb06 1415 	mls	r4, r6, r5, r1
 8007f3a:	3430      	adds	r4, #48	; 0x30
 8007f3c:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007f40:	460c      	mov	r4, r1
 8007f42:	2c63      	cmp	r4, #99	; 0x63
 8007f44:	f102 32ff 	add.w	r2, r2, #4294967295
 8007f48:	4629      	mov	r1, r5
 8007f4a:	dcf1      	bgt.n	8007f30 <__exponent+0x22>
 8007f4c:	3130      	adds	r1, #48	; 0x30
 8007f4e:	f1ac 0402 	sub.w	r4, ip, #2
 8007f52:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007f56:	1c41      	adds	r1, r0, #1
 8007f58:	4622      	mov	r2, r4
 8007f5a:	42ba      	cmp	r2, r7
 8007f5c:	d30a      	bcc.n	8007f74 <__exponent+0x66>
 8007f5e:	f10d 0209 	add.w	r2, sp, #9
 8007f62:	eba2 020c 	sub.w	r2, r2, ip
 8007f66:	42bc      	cmp	r4, r7
 8007f68:	bf88      	it	hi
 8007f6a:	2200      	movhi	r2, #0
 8007f6c:	4413      	add	r3, r2
 8007f6e:	1a18      	subs	r0, r3, r0
 8007f70:	b003      	add	sp, #12
 8007f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f74:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007f78:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007f7c:	e7ed      	b.n	8007f5a <__exponent+0x4c>
 8007f7e:	2330      	movs	r3, #48	; 0x30
 8007f80:	3130      	adds	r1, #48	; 0x30
 8007f82:	7083      	strb	r3, [r0, #2]
 8007f84:	70c1      	strb	r1, [r0, #3]
 8007f86:	1d03      	adds	r3, r0, #4
 8007f88:	e7f1      	b.n	8007f6e <__exponent+0x60>
	...

08007f8c <_printf_float>:
 8007f8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f90:	ed2d 8b02 	vpush	{d8}
 8007f94:	b08d      	sub	sp, #52	; 0x34
 8007f96:	460c      	mov	r4, r1
 8007f98:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007f9c:	4616      	mov	r6, r2
 8007f9e:	461f      	mov	r7, r3
 8007fa0:	4605      	mov	r5, r0
 8007fa2:	f000 fce7 	bl	8008974 <_localeconv_r>
 8007fa6:	f8d0 a000 	ldr.w	sl, [r0]
 8007faa:	4650      	mov	r0, sl
 8007fac:	f7f8 f960 	bl	8000270 <strlen>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	930a      	str	r3, [sp, #40]	; 0x28
 8007fb4:	6823      	ldr	r3, [r4, #0]
 8007fb6:	9305      	str	r3, [sp, #20]
 8007fb8:	f8d8 3000 	ldr.w	r3, [r8]
 8007fbc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007fc0:	3307      	adds	r3, #7
 8007fc2:	f023 0307 	bic.w	r3, r3, #7
 8007fc6:	f103 0208 	add.w	r2, r3, #8
 8007fca:	f8c8 2000 	str.w	r2, [r8]
 8007fce:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007fd2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007fd6:	9307      	str	r3, [sp, #28]
 8007fd8:	f8cd 8018 	str.w	r8, [sp, #24]
 8007fdc:	ee08 0a10 	vmov	s16, r0
 8007fe0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007fe4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007fe8:	4b9e      	ldr	r3, [pc, #632]	; (8008264 <_printf_float+0x2d8>)
 8007fea:	f04f 32ff 	mov.w	r2, #4294967295
 8007fee:	f7f8 fd9d 	bl	8000b2c <__aeabi_dcmpun>
 8007ff2:	bb88      	cbnz	r0, 8008058 <_printf_float+0xcc>
 8007ff4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007ff8:	4b9a      	ldr	r3, [pc, #616]	; (8008264 <_printf_float+0x2d8>)
 8007ffa:	f04f 32ff 	mov.w	r2, #4294967295
 8007ffe:	f7f8 fd77 	bl	8000af0 <__aeabi_dcmple>
 8008002:	bb48      	cbnz	r0, 8008058 <_printf_float+0xcc>
 8008004:	2200      	movs	r2, #0
 8008006:	2300      	movs	r3, #0
 8008008:	4640      	mov	r0, r8
 800800a:	4649      	mov	r1, r9
 800800c:	f7f8 fd66 	bl	8000adc <__aeabi_dcmplt>
 8008010:	b110      	cbz	r0, 8008018 <_printf_float+0x8c>
 8008012:	232d      	movs	r3, #45	; 0x2d
 8008014:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008018:	4a93      	ldr	r2, [pc, #588]	; (8008268 <_printf_float+0x2dc>)
 800801a:	4b94      	ldr	r3, [pc, #592]	; (800826c <_printf_float+0x2e0>)
 800801c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008020:	bf94      	ite	ls
 8008022:	4690      	movls	r8, r2
 8008024:	4698      	movhi	r8, r3
 8008026:	2303      	movs	r3, #3
 8008028:	6123      	str	r3, [r4, #16]
 800802a:	9b05      	ldr	r3, [sp, #20]
 800802c:	f023 0304 	bic.w	r3, r3, #4
 8008030:	6023      	str	r3, [r4, #0]
 8008032:	f04f 0900 	mov.w	r9, #0
 8008036:	9700      	str	r7, [sp, #0]
 8008038:	4633      	mov	r3, r6
 800803a:	aa0b      	add	r2, sp, #44	; 0x2c
 800803c:	4621      	mov	r1, r4
 800803e:	4628      	mov	r0, r5
 8008040:	f000 f9da 	bl	80083f8 <_printf_common>
 8008044:	3001      	adds	r0, #1
 8008046:	f040 8090 	bne.w	800816a <_printf_float+0x1de>
 800804a:	f04f 30ff 	mov.w	r0, #4294967295
 800804e:	b00d      	add	sp, #52	; 0x34
 8008050:	ecbd 8b02 	vpop	{d8}
 8008054:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008058:	4642      	mov	r2, r8
 800805a:	464b      	mov	r3, r9
 800805c:	4640      	mov	r0, r8
 800805e:	4649      	mov	r1, r9
 8008060:	f7f8 fd64 	bl	8000b2c <__aeabi_dcmpun>
 8008064:	b140      	cbz	r0, 8008078 <_printf_float+0xec>
 8008066:	464b      	mov	r3, r9
 8008068:	2b00      	cmp	r3, #0
 800806a:	bfbc      	itt	lt
 800806c:	232d      	movlt	r3, #45	; 0x2d
 800806e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008072:	4a7f      	ldr	r2, [pc, #508]	; (8008270 <_printf_float+0x2e4>)
 8008074:	4b7f      	ldr	r3, [pc, #508]	; (8008274 <_printf_float+0x2e8>)
 8008076:	e7d1      	b.n	800801c <_printf_float+0x90>
 8008078:	6863      	ldr	r3, [r4, #4]
 800807a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800807e:	9206      	str	r2, [sp, #24]
 8008080:	1c5a      	adds	r2, r3, #1
 8008082:	d13f      	bne.n	8008104 <_printf_float+0x178>
 8008084:	2306      	movs	r3, #6
 8008086:	6063      	str	r3, [r4, #4]
 8008088:	9b05      	ldr	r3, [sp, #20]
 800808a:	6861      	ldr	r1, [r4, #4]
 800808c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008090:	2300      	movs	r3, #0
 8008092:	9303      	str	r3, [sp, #12]
 8008094:	ab0a      	add	r3, sp, #40	; 0x28
 8008096:	e9cd b301 	strd	fp, r3, [sp, #4]
 800809a:	ab09      	add	r3, sp, #36	; 0x24
 800809c:	ec49 8b10 	vmov	d0, r8, r9
 80080a0:	9300      	str	r3, [sp, #0]
 80080a2:	6022      	str	r2, [r4, #0]
 80080a4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80080a8:	4628      	mov	r0, r5
 80080aa:	f7ff fece 	bl	8007e4a <__cvt>
 80080ae:	9b06      	ldr	r3, [sp, #24]
 80080b0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80080b2:	2b47      	cmp	r3, #71	; 0x47
 80080b4:	4680      	mov	r8, r0
 80080b6:	d108      	bne.n	80080ca <_printf_float+0x13e>
 80080b8:	1cc8      	adds	r0, r1, #3
 80080ba:	db02      	blt.n	80080c2 <_printf_float+0x136>
 80080bc:	6863      	ldr	r3, [r4, #4]
 80080be:	4299      	cmp	r1, r3
 80080c0:	dd41      	ble.n	8008146 <_printf_float+0x1ba>
 80080c2:	f1ab 0302 	sub.w	r3, fp, #2
 80080c6:	fa5f fb83 	uxtb.w	fp, r3
 80080ca:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80080ce:	d820      	bhi.n	8008112 <_printf_float+0x186>
 80080d0:	3901      	subs	r1, #1
 80080d2:	465a      	mov	r2, fp
 80080d4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80080d8:	9109      	str	r1, [sp, #36]	; 0x24
 80080da:	f7ff ff18 	bl	8007f0e <__exponent>
 80080de:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80080e0:	1813      	adds	r3, r2, r0
 80080e2:	2a01      	cmp	r2, #1
 80080e4:	4681      	mov	r9, r0
 80080e6:	6123      	str	r3, [r4, #16]
 80080e8:	dc02      	bgt.n	80080f0 <_printf_float+0x164>
 80080ea:	6822      	ldr	r2, [r4, #0]
 80080ec:	07d2      	lsls	r2, r2, #31
 80080ee:	d501      	bpl.n	80080f4 <_printf_float+0x168>
 80080f0:	3301      	adds	r3, #1
 80080f2:	6123      	str	r3, [r4, #16]
 80080f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d09c      	beq.n	8008036 <_printf_float+0xaa>
 80080fc:	232d      	movs	r3, #45	; 0x2d
 80080fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008102:	e798      	b.n	8008036 <_printf_float+0xaa>
 8008104:	9a06      	ldr	r2, [sp, #24]
 8008106:	2a47      	cmp	r2, #71	; 0x47
 8008108:	d1be      	bne.n	8008088 <_printf_float+0xfc>
 800810a:	2b00      	cmp	r3, #0
 800810c:	d1bc      	bne.n	8008088 <_printf_float+0xfc>
 800810e:	2301      	movs	r3, #1
 8008110:	e7b9      	b.n	8008086 <_printf_float+0xfa>
 8008112:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008116:	d118      	bne.n	800814a <_printf_float+0x1be>
 8008118:	2900      	cmp	r1, #0
 800811a:	6863      	ldr	r3, [r4, #4]
 800811c:	dd0b      	ble.n	8008136 <_printf_float+0x1aa>
 800811e:	6121      	str	r1, [r4, #16]
 8008120:	b913      	cbnz	r3, 8008128 <_printf_float+0x19c>
 8008122:	6822      	ldr	r2, [r4, #0]
 8008124:	07d0      	lsls	r0, r2, #31
 8008126:	d502      	bpl.n	800812e <_printf_float+0x1a2>
 8008128:	3301      	adds	r3, #1
 800812a:	440b      	add	r3, r1
 800812c:	6123      	str	r3, [r4, #16]
 800812e:	65a1      	str	r1, [r4, #88]	; 0x58
 8008130:	f04f 0900 	mov.w	r9, #0
 8008134:	e7de      	b.n	80080f4 <_printf_float+0x168>
 8008136:	b913      	cbnz	r3, 800813e <_printf_float+0x1b2>
 8008138:	6822      	ldr	r2, [r4, #0]
 800813a:	07d2      	lsls	r2, r2, #31
 800813c:	d501      	bpl.n	8008142 <_printf_float+0x1b6>
 800813e:	3302      	adds	r3, #2
 8008140:	e7f4      	b.n	800812c <_printf_float+0x1a0>
 8008142:	2301      	movs	r3, #1
 8008144:	e7f2      	b.n	800812c <_printf_float+0x1a0>
 8008146:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800814a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800814c:	4299      	cmp	r1, r3
 800814e:	db05      	blt.n	800815c <_printf_float+0x1d0>
 8008150:	6823      	ldr	r3, [r4, #0]
 8008152:	6121      	str	r1, [r4, #16]
 8008154:	07d8      	lsls	r0, r3, #31
 8008156:	d5ea      	bpl.n	800812e <_printf_float+0x1a2>
 8008158:	1c4b      	adds	r3, r1, #1
 800815a:	e7e7      	b.n	800812c <_printf_float+0x1a0>
 800815c:	2900      	cmp	r1, #0
 800815e:	bfd4      	ite	le
 8008160:	f1c1 0202 	rsble	r2, r1, #2
 8008164:	2201      	movgt	r2, #1
 8008166:	4413      	add	r3, r2
 8008168:	e7e0      	b.n	800812c <_printf_float+0x1a0>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	055a      	lsls	r2, r3, #21
 800816e:	d407      	bmi.n	8008180 <_printf_float+0x1f4>
 8008170:	6923      	ldr	r3, [r4, #16]
 8008172:	4642      	mov	r2, r8
 8008174:	4631      	mov	r1, r6
 8008176:	4628      	mov	r0, r5
 8008178:	47b8      	blx	r7
 800817a:	3001      	adds	r0, #1
 800817c:	d12c      	bne.n	80081d8 <_printf_float+0x24c>
 800817e:	e764      	b.n	800804a <_printf_float+0xbe>
 8008180:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008184:	f240 80e0 	bls.w	8008348 <_printf_float+0x3bc>
 8008188:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800818c:	2200      	movs	r2, #0
 800818e:	2300      	movs	r3, #0
 8008190:	f7f8 fc9a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008194:	2800      	cmp	r0, #0
 8008196:	d034      	beq.n	8008202 <_printf_float+0x276>
 8008198:	4a37      	ldr	r2, [pc, #220]	; (8008278 <_printf_float+0x2ec>)
 800819a:	2301      	movs	r3, #1
 800819c:	4631      	mov	r1, r6
 800819e:	4628      	mov	r0, r5
 80081a0:	47b8      	blx	r7
 80081a2:	3001      	adds	r0, #1
 80081a4:	f43f af51 	beq.w	800804a <_printf_float+0xbe>
 80081a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80081ac:	429a      	cmp	r2, r3
 80081ae:	db02      	blt.n	80081b6 <_printf_float+0x22a>
 80081b0:	6823      	ldr	r3, [r4, #0]
 80081b2:	07d8      	lsls	r0, r3, #31
 80081b4:	d510      	bpl.n	80081d8 <_printf_float+0x24c>
 80081b6:	ee18 3a10 	vmov	r3, s16
 80081ba:	4652      	mov	r2, sl
 80081bc:	4631      	mov	r1, r6
 80081be:	4628      	mov	r0, r5
 80081c0:	47b8      	blx	r7
 80081c2:	3001      	adds	r0, #1
 80081c4:	f43f af41 	beq.w	800804a <_printf_float+0xbe>
 80081c8:	f04f 0800 	mov.w	r8, #0
 80081cc:	f104 091a 	add.w	r9, r4, #26
 80081d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80081d2:	3b01      	subs	r3, #1
 80081d4:	4543      	cmp	r3, r8
 80081d6:	dc09      	bgt.n	80081ec <_printf_float+0x260>
 80081d8:	6823      	ldr	r3, [r4, #0]
 80081da:	079b      	lsls	r3, r3, #30
 80081dc:	f100 8107 	bmi.w	80083ee <_printf_float+0x462>
 80081e0:	68e0      	ldr	r0, [r4, #12]
 80081e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081e4:	4298      	cmp	r0, r3
 80081e6:	bfb8      	it	lt
 80081e8:	4618      	movlt	r0, r3
 80081ea:	e730      	b.n	800804e <_printf_float+0xc2>
 80081ec:	2301      	movs	r3, #1
 80081ee:	464a      	mov	r2, r9
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af27 	beq.w	800804a <_printf_float+0xbe>
 80081fc:	f108 0801 	add.w	r8, r8, #1
 8008200:	e7e6      	b.n	80081d0 <_printf_float+0x244>
 8008202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008204:	2b00      	cmp	r3, #0
 8008206:	dc39      	bgt.n	800827c <_printf_float+0x2f0>
 8008208:	4a1b      	ldr	r2, [pc, #108]	; (8008278 <_printf_float+0x2ec>)
 800820a:	2301      	movs	r3, #1
 800820c:	4631      	mov	r1, r6
 800820e:	4628      	mov	r0, r5
 8008210:	47b8      	blx	r7
 8008212:	3001      	adds	r0, #1
 8008214:	f43f af19 	beq.w	800804a <_printf_float+0xbe>
 8008218:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800821c:	4313      	orrs	r3, r2
 800821e:	d102      	bne.n	8008226 <_printf_float+0x29a>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	07d9      	lsls	r1, r3, #31
 8008224:	d5d8      	bpl.n	80081d8 <_printf_float+0x24c>
 8008226:	ee18 3a10 	vmov	r3, s16
 800822a:	4652      	mov	r2, sl
 800822c:	4631      	mov	r1, r6
 800822e:	4628      	mov	r0, r5
 8008230:	47b8      	blx	r7
 8008232:	3001      	adds	r0, #1
 8008234:	f43f af09 	beq.w	800804a <_printf_float+0xbe>
 8008238:	f04f 0900 	mov.w	r9, #0
 800823c:	f104 0a1a 	add.w	sl, r4, #26
 8008240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008242:	425b      	negs	r3, r3
 8008244:	454b      	cmp	r3, r9
 8008246:	dc01      	bgt.n	800824c <_printf_float+0x2c0>
 8008248:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800824a:	e792      	b.n	8008172 <_printf_float+0x1e6>
 800824c:	2301      	movs	r3, #1
 800824e:	4652      	mov	r2, sl
 8008250:	4631      	mov	r1, r6
 8008252:	4628      	mov	r0, r5
 8008254:	47b8      	blx	r7
 8008256:	3001      	adds	r0, #1
 8008258:	f43f aef7 	beq.w	800804a <_printf_float+0xbe>
 800825c:	f109 0901 	add.w	r9, r9, #1
 8008260:	e7ee      	b.n	8008240 <_printf_float+0x2b4>
 8008262:	bf00      	nop
 8008264:	7fefffff 	.word	0x7fefffff
 8008268:	0800ac08 	.word	0x0800ac08
 800826c:	0800ac0c 	.word	0x0800ac0c
 8008270:	0800ac10 	.word	0x0800ac10
 8008274:	0800ac14 	.word	0x0800ac14
 8008278:	0800ac18 	.word	0x0800ac18
 800827c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800827e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008280:	429a      	cmp	r2, r3
 8008282:	bfa8      	it	ge
 8008284:	461a      	movge	r2, r3
 8008286:	2a00      	cmp	r2, #0
 8008288:	4691      	mov	r9, r2
 800828a:	dc37      	bgt.n	80082fc <_printf_float+0x370>
 800828c:	f04f 0b00 	mov.w	fp, #0
 8008290:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008294:	f104 021a 	add.w	r2, r4, #26
 8008298:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800829a:	9305      	str	r3, [sp, #20]
 800829c:	eba3 0309 	sub.w	r3, r3, r9
 80082a0:	455b      	cmp	r3, fp
 80082a2:	dc33      	bgt.n	800830c <_printf_float+0x380>
 80082a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082a8:	429a      	cmp	r2, r3
 80082aa:	db3b      	blt.n	8008324 <_printf_float+0x398>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	07da      	lsls	r2, r3, #31
 80082b0:	d438      	bmi.n	8008324 <_printf_float+0x398>
 80082b2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80082b6:	eba2 0903 	sub.w	r9, r2, r3
 80082ba:	9b05      	ldr	r3, [sp, #20]
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	4591      	cmp	r9, r2
 80082c0:	bfa8      	it	ge
 80082c2:	4691      	movge	r9, r2
 80082c4:	f1b9 0f00 	cmp.w	r9, #0
 80082c8:	dc35      	bgt.n	8008336 <_printf_float+0x3aa>
 80082ca:	f04f 0800 	mov.w	r8, #0
 80082ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80082d2:	f104 0a1a 	add.w	sl, r4, #26
 80082d6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082da:	1a9b      	subs	r3, r3, r2
 80082dc:	eba3 0309 	sub.w	r3, r3, r9
 80082e0:	4543      	cmp	r3, r8
 80082e2:	f77f af79 	ble.w	80081d8 <_printf_float+0x24c>
 80082e6:	2301      	movs	r3, #1
 80082e8:	4652      	mov	r2, sl
 80082ea:	4631      	mov	r1, r6
 80082ec:	4628      	mov	r0, r5
 80082ee:	47b8      	blx	r7
 80082f0:	3001      	adds	r0, #1
 80082f2:	f43f aeaa 	beq.w	800804a <_printf_float+0xbe>
 80082f6:	f108 0801 	add.w	r8, r8, #1
 80082fa:	e7ec      	b.n	80082d6 <_printf_float+0x34a>
 80082fc:	4613      	mov	r3, r2
 80082fe:	4631      	mov	r1, r6
 8008300:	4642      	mov	r2, r8
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	d1c0      	bne.n	800828c <_printf_float+0x300>
 800830a:	e69e      	b.n	800804a <_printf_float+0xbe>
 800830c:	2301      	movs	r3, #1
 800830e:	4631      	mov	r1, r6
 8008310:	4628      	mov	r0, r5
 8008312:	9205      	str	r2, [sp, #20]
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f ae97 	beq.w	800804a <_printf_float+0xbe>
 800831c:	9a05      	ldr	r2, [sp, #20]
 800831e:	f10b 0b01 	add.w	fp, fp, #1
 8008322:	e7b9      	b.n	8008298 <_printf_float+0x30c>
 8008324:	ee18 3a10 	vmov	r3, s16
 8008328:	4652      	mov	r2, sl
 800832a:	4631      	mov	r1, r6
 800832c:	4628      	mov	r0, r5
 800832e:	47b8      	blx	r7
 8008330:	3001      	adds	r0, #1
 8008332:	d1be      	bne.n	80082b2 <_printf_float+0x326>
 8008334:	e689      	b.n	800804a <_printf_float+0xbe>
 8008336:	9a05      	ldr	r2, [sp, #20]
 8008338:	464b      	mov	r3, r9
 800833a:	4442      	add	r2, r8
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	d1c1      	bne.n	80082ca <_printf_float+0x33e>
 8008346:	e680      	b.n	800804a <_printf_float+0xbe>
 8008348:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800834a:	2a01      	cmp	r2, #1
 800834c:	dc01      	bgt.n	8008352 <_printf_float+0x3c6>
 800834e:	07db      	lsls	r3, r3, #31
 8008350:	d53a      	bpl.n	80083c8 <_printf_float+0x43c>
 8008352:	2301      	movs	r3, #1
 8008354:	4642      	mov	r2, r8
 8008356:	4631      	mov	r1, r6
 8008358:	4628      	mov	r0, r5
 800835a:	47b8      	blx	r7
 800835c:	3001      	adds	r0, #1
 800835e:	f43f ae74 	beq.w	800804a <_printf_float+0xbe>
 8008362:	ee18 3a10 	vmov	r3, s16
 8008366:	4652      	mov	r2, sl
 8008368:	4631      	mov	r1, r6
 800836a:	4628      	mov	r0, r5
 800836c:	47b8      	blx	r7
 800836e:	3001      	adds	r0, #1
 8008370:	f43f ae6b 	beq.w	800804a <_printf_float+0xbe>
 8008374:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008378:	2200      	movs	r2, #0
 800837a:	2300      	movs	r3, #0
 800837c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008380:	f7f8 fba2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008384:	b9d8      	cbnz	r0, 80083be <_printf_float+0x432>
 8008386:	f10a 33ff 	add.w	r3, sl, #4294967295
 800838a:	f108 0201 	add.w	r2, r8, #1
 800838e:	4631      	mov	r1, r6
 8008390:	4628      	mov	r0, r5
 8008392:	47b8      	blx	r7
 8008394:	3001      	adds	r0, #1
 8008396:	d10e      	bne.n	80083b6 <_printf_float+0x42a>
 8008398:	e657      	b.n	800804a <_printf_float+0xbe>
 800839a:	2301      	movs	r3, #1
 800839c:	4652      	mov	r2, sl
 800839e:	4631      	mov	r1, r6
 80083a0:	4628      	mov	r0, r5
 80083a2:	47b8      	blx	r7
 80083a4:	3001      	adds	r0, #1
 80083a6:	f43f ae50 	beq.w	800804a <_printf_float+0xbe>
 80083aa:	f108 0801 	add.w	r8, r8, #1
 80083ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083b0:	3b01      	subs	r3, #1
 80083b2:	4543      	cmp	r3, r8
 80083b4:	dcf1      	bgt.n	800839a <_printf_float+0x40e>
 80083b6:	464b      	mov	r3, r9
 80083b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80083bc:	e6da      	b.n	8008174 <_printf_float+0x1e8>
 80083be:	f04f 0800 	mov.w	r8, #0
 80083c2:	f104 0a1a 	add.w	sl, r4, #26
 80083c6:	e7f2      	b.n	80083ae <_printf_float+0x422>
 80083c8:	2301      	movs	r3, #1
 80083ca:	4642      	mov	r2, r8
 80083cc:	e7df      	b.n	800838e <_printf_float+0x402>
 80083ce:	2301      	movs	r3, #1
 80083d0:	464a      	mov	r2, r9
 80083d2:	4631      	mov	r1, r6
 80083d4:	4628      	mov	r0, r5
 80083d6:	47b8      	blx	r7
 80083d8:	3001      	adds	r0, #1
 80083da:	f43f ae36 	beq.w	800804a <_printf_float+0xbe>
 80083de:	f108 0801 	add.w	r8, r8, #1
 80083e2:	68e3      	ldr	r3, [r4, #12]
 80083e4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80083e6:	1a5b      	subs	r3, r3, r1
 80083e8:	4543      	cmp	r3, r8
 80083ea:	dcf0      	bgt.n	80083ce <_printf_float+0x442>
 80083ec:	e6f8      	b.n	80081e0 <_printf_float+0x254>
 80083ee:	f04f 0800 	mov.w	r8, #0
 80083f2:	f104 0919 	add.w	r9, r4, #25
 80083f6:	e7f4      	b.n	80083e2 <_printf_float+0x456>

080083f8 <_printf_common>:
 80083f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083fc:	4616      	mov	r6, r2
 80083fe:	4699      	mov	r9, r3
 8008400:	688a      	ldr	r2, [r1, #8]
 8008402:	690b      	ldr	r3, [r1, #16]
 8008404:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008408:	4293      	cmp	r3, r2
 800840a:	bfb8      	it	lt
 800840c:	4613      	movlt	r3, r2
 800840e:	6033      	str	r3, [r6, #0]
 8008410:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008414:	4607      	mov	r7, r0
 8008416:	460c      	mov	r4, r1
 8008418:	b10a      	cbz	r2, 800841e <_printf_common+0x26>
 800841a:	3301      	adds	r3, #1
 800841c:	6033      	str	r3, [r6, #0]
 800841e:	6823      	ldr	r3, [r4, #0]
 8008420:	0699      	lsls	r1, r3, #26
 8008422:	bf42      	ittt	mi
 8008424:	6833      	ldrmi	r3, [r6, #0]
 8008426:	3302      	addmi	r3, #2
 8008428:	6033      	strmi	r3, [r6, #0]
 800842a:	6825      	ldr	r5, [r4, #0]
 800842c:	f015 0506 	ands.w	r5, r5, #6
 8008430:	d106      	bne.n	8008440 <_printf_common+0x48>
 8008432:	f104 0a19 	add.w	sl, r4, #25
 8008436:	68e3      	ldr	r3, [r4, #12]
 8008438:	6832      	ldr	r2, [r6, #0]
 800843a:	1a9b      	subs	r3, r3, r2
 800843c:	42ab      	cmp	r3, r5
 800843e:	dc26      	bgt.n	800848e <_printf_common+0x96>
 8008440:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008444:	1e13      	subs	r3, r2, #0
 8008446:	6822      	ldr	r2, [r4, #0]
 8008448:	bf18      	it	ne
 800844a:	2301      	movne	r3, #1
 800844c:	0692      	lsls	r2, r2, #26
 800844e:	d42b      	bmi.n	80084a8 <_printf_common+0xb0>
 8008450:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008454:	4649      	mov	r1, r9
 8008456:	4638      	mov	r0, r7
 8008458:	47c0      	blx	r8
 800845a:	3001      	adds	r0, #1
 800845c:	d01e      	beq.n	800849c <_printf_common+0xa4>
 800845e:	6823      	ldr	r3, [r4, #0]
 8008460:	6922      	ldr	r2, [r4, #16]
 8008462:	f003 0306 	and.w	r3, r3, #6
 8008466:	2b04      	cmp	r3, #4
 8008468:	bf02      	ittt	eq
 800846a:	68e5      	ldreq	r5, [r4, #12]
 800846c:	6833      	ldreq	r3, [r6, #0]
 800846e:	1aed      	subeq	r5, r5, r3
 8008470:	68a3      	ldr	r3, [r4, #8]
 8008472:	bf0c      	ite	eq
 8008474:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008478:	2500      	movne	r5, #0
 800847a:	4293      	cmp	r3, r2
 800847c:	bfc4      	itt	gt
 800847e:	1a9b      	subgt	r3, r3, r2
 8008480:	18ed      	addgt	r5, r5, r3
 8008482:	2600      	movs	r6, #0
 8008484:	341a      	adds	r4, #26
 8008486:	42b5      	cmp	r5, r6
 8008488:	d11a      	bne.n	80084c0 <_printf_common+0xc8>
 800848a:	2000      	movs	r0, #0
 800848c:	e008      	b.n	80084a0 <_printf_common+0xa8>
 800848e:	2301      	movs	r3, #1
 8008490:	4652      	mov	r2, sl
 8008492:	4649      	mov	r1, r9
 8008494:	4638      	mov	r0, r7
 8008496:	47c0      	blx	r8
 8008498:	3001      	adds	r0, #1
 800849a:	d103      	bne.n	80084a4 <_printf_common+0xac>
 800849c:	f04f 30ff 	mov.w	r0, #4294967295
 80084a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084a4:	3501      	adds	r5, #1
 80084a6:	e7c6      	b.n	8008436 <_printf_common+0x3e>
 80084a8:	18e1      	adds	r1, r4, r3
 80084aa:	1c5a      	adds	r2, r3, #1
 80084ac:	2030      	movs	r0, #48	; 0x30
 80084ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084b2:	4422      	add	r2, r4
 80084b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084bc:	3302      	adds	r3, #2
 80084be:	e7c7      	b.n	8008450 <_printf_common+0x58>
 80084c0:	2301      	movs	r3, #1
 80084c2:	4622      	mov	r2, r4
 80084c4:	4649      	mov	r1, r9
 80084c6:	4638      	mov	r0, r7
 80084c8:	47c0      	blx	r8
 80084ca:	3001      	adds	r0, #1
 80084cc:	d0e6      	beq.n	800849c <_printf_common+0xa4>
 80084ce:	3601      	adds	r6, #1
 80084d0:	e7d9      	b.n	8008486 <_printf_common+0x8e>
	...

080084d4 <_printf_i>:
 80084d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084d8:	7e0f      	ldrb	r7, [r1, #24]
 80084da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084dc:	2f78      	cmp	r7, #120	; 0x78
 80084de:	4691      	mov	r9, r2
 80084e0:	4680      	mov	r8, r0
 80084e2:	460c      	mov	r4, r1
 80084e4:	469a      	mov	sl, r3
 80084e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084ea:	d807      	bhi.n	80084fc <_printf_i+0x28>
 80084ec:	2f62      	cmp	r7, #98	; 0x62
 80084ee:	d80a      	bhi.n	8008506 <_printf_i+0x32>
 80084f0:	2f00      	cmp	r7, #0
 80084f2:	f000 80d4 	beq.w	800869e <_printf_i+0x1ca>
 80084f6:	2f58      	cmp	r7, #88	; 0x58
 80084f8:	f000 80c0 	beq.w	800867c <_printf_i+0x1a8>
 80084fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008500:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008504:	e03a      	b.n	800857c <_printf_i+0xa8>
 8008506:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800850a:	2b15      	cmp	r3, #21
 800850c:	d8f6      	bhi.n	80084fc <_printf_i+0x28>
 800850e:	a101      	add	r1, pc, #4	; (adr r1, 8008514 <_printf_i+0x40>)
 8008510:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008514:	0800856d 	.word	0x0800856d
 8008518:	08008581 	.word	0x08008581
 800851c:	080084fd 	.word	0x080084fd
 8008520:	080084fd 	.word	0x080084fd
 8008524:	080084fd 	.word	0x080084fd
 8008528:	080084fd 	.word	0x080084fd
 800852c:	08008581 	.word	0x08008581
 8008530:	080084fd 	.word	0x080084fd
 8008534:	080084fd 	.word	0x080084fd
 8008538:	080084fd 	.word	0x080084fd
 800853c:	080084fd 	.word	0x080084fd
 8008540:	08008685 	.word	0x08008685
 8008544:	080085ad 	.word	0x080085ad
 8008548:	0800863f 	.word	0x0800863f
 800854c:	080084fd 	.word	0x080084fd
 8008550:	080084fd 	.word	0x080084fd
 8008554:	080086a7 	.word	0x080086a7
 8008558:	080084fd 	.word	0x080084fd
 800855c:	080085ad 	.word	0x080085ad
 8008560:	080084fd 	.word	0x080084fd
 8008564:	080084fd 	.word	0x080084fd
 8008568:	08008647 	.word	0x08008647
 800856c:	682b      	ldr	r3, [r5, #0]
 800856e:	1d1a      	adds	r2, r3, #4
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	602a      	str	r2, [r5, #0]
 8008574:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008578:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800857c:	2301      	movs	r3, #1
 800857e:	e09f      	b.n	80086c0 <_printf_i+0x1ec>
 8008580:	6820      	ldr	r0, [r4, #0]
 8008582:	682b      	ldr	r3, [r5, #0]
 8008584:	0607      	lsls	r7, r0, #24
 8008586:	f103 0104 	add.w	r1, r3, #4
 800858a:	6029      	str	r1, [r5, #0]
 800858c:	d501      	bpl.n	8008592 <_printf_i+0xbe>
 800858e:	681e      	ldr	r6, [r3, #0]
 8008590:	e003      	b.n	800859a <_printf_i+0xc6>
 8008592:	0646      	lsls	r6, r0, #25
 8008594:	d5fb      	bpl.n	800858e <_printf_i+0xba>
 8008596:	f9b3 6000 	ldrsh.w	r6, [r3]
 800859a:	2e00      	cmp	r6, #0
 800859c:	da03      	bge.n	80085a6 <_printf_i+0xd2>
 800859e:	232d      	movs	r3, #45	; 0x2d
 80085a0:	4276      	negs	r6, r6
 80085a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085a6:	485a      	ldr	r0, [pc, #360]	; (8008710 <_printf_i+0x23c>)
 80085a8:	230a      	movs	r3, #10
 80085aa:	e012      	b.n	80085d2 <_printf_i+0xfe>
 80085ac:	682b      	ldr	r3, [r5, #0]
 80085ae:	6820      	ldr	r0, [r4, #0]
 80085b0:	1d19      	adds	r1, r3, #4
 80085b2:	6029      	str	r1, [r5, #0]
 80085b4:	0605      	lsls	r5, r0, #24
 80085b6:	d501      	bpl.n	80085bc <_printf_i+0xe8>
 80085b8:	681e      	ldr	r6, [r3, #0]
 80085ba:	e002      	b.n	80085c2 <_printf_i+0xee>
 80085bc:	0641      	lsls	r1, r0, #25
 80085be:	d5fb      	bpl.n	80085b8 <_printf_i+0xe4>
 80085c0:	881e      	ldrh	r6, [r3, #0]
 80085c2:	4853      	ldr	r0, [pc, #332]	; (8008710 <_printf_i+0x23c>)
 80085c4:	2f6f      	cmp	r7, #111	; 0x6f
 80085c6:	bf0c      	ite	eq
 80085c8:	2308      	moveq	r3, #8
 80085ca:	230a      	movne	r3, #10
 80085cc:	2100      	movs	r1, #0
 80085ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085d2:	6865      	ldr	r5, [r4, #4]
 80085d4:	60a5      	str	r5, [r4, #8]
 80085d6:	2d00      	cmp	r5, #0
 80085d8:	bfa2      	ittt	ge
 80085da:	6821      	ldrge	r1, [r4, #0]
 80085dc:	f021 0104 	bicge.w	r1, r1, #4
 80085e0:	6021      	strge	r1, [r4, #0]
 80085e2:	b90e      	cbnz	r6, 80085e8 <_printf_i+0x114>
 80085e4:	2d00      	cmp	r5, #0
 80085e6:	d04b      	beq.n	8008680 <_printf_i+0x1ac>
 80085e8:	4615      	mov	r5, r2
 80085ea:	fbb6 f1f3 	udiv	r1, r6, r3
 80085ee:	fb03 6711 	mls	r7, r3, r1, r6
 80085f2:	5dc7      	ldrb	r7, [r0, r7]
 80085f4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085f8:	4637      	mov	r7, r6
 80085fa:	42bb      	cmp	r3, r7
 80085fc:	460e      	mov	r6, r1
 80085fe:	d9f4      	bls.n	80085ea <_printf_i+0x116>
 8008600:	2b08      	cmp	r3, #8
 8008602:	d10b      	bne.n	800861c <_printf_i+0x148>
 8008604:	6823      	ldr	r3, [r4, #0]
 8008606:	07de      	lsls	r6, r3, #31
 8008608:	d508      	bpl.n	800861c <_printf_i+0x148>
 800860a:	6923      	ldr	r3, [r4, #16]
 800860c:	6861      	ldr	r1, [r4, #4]
 800860e:	4299      	cmp	r1, r3
 8008610:	bfde      	ittt	le
 8008612:	2330      	movle	r3, #48	; 0x30
 8008614:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008618:	f105 35ff 	addle.w	r5, r5, #4294967295
 800861c:	1b52      	subs	r2, r2, r5
 800861e:	6122      	str	r2, [r4, #16]
 8008620:	f8cd a000 	str.w	sl, [sp]
 8008624:	464b      	mov	r3, r9
 8008626:	aa03      	add	r2, sp, #12
 8008628:	4621      	mov	r1, r4
 800862a:	4640      	mov	r0, r8
 800862c:	f7ff fee4 	bl	80083f8 <_printf_common>
 8008630:	3001      	adds	r0, #1
 8008632:	d14a      	bne.n	80086ca <_printf_i+0x1f6>
 8008634:	f04f 30ff 	mov.w	r0, #4294967295
 8008638:	b004      	add	sp, #16
 800863a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	f043 0320 	orr.w	r3, r3, #32
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	4833      	ldr	r0, [pc, #204]	; (8008714 <_printf_i+0x240>)
 8008648:	2778      	movs	r7, #120	; 0x78
 800864a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800864e:	6823      	ldr	r3, [r4, #0]
 8008650:	6829      	ldr	r1, [r5, #0]
 8008652:	061f      	lsls	r7, r3, #24
 8008654:	f851 6b04 	ldr.w	r6, [r1], #4
 8008658:	d402      	bmi.n	8008660 <_printf_i+0x18c>
 800865a:	065f      	lsls	r7, r3, #25
 800865c:	bf48      	it	mi
 800865e:	b2b6      	uxthmi	r6, r6
 8008660:	07df      	lsls	r7, r3, #31
 8008662:	bf48      	it	mi
 8008664:	f043 0320 	orrmi.w	r3, r3, #32
 8008668:	6029      	str	r1, [r5, #0]
 800866a:	bf48      	it	mi
 800866c:	6023      	strmi	r3, [r4, #0]
 800866e:	b91e      	cbnz	r6, 8008678 <_printf_i+0x1a4>
 8008670:	6823      	ldr	r3, [r4, #0]
 8008672:	f023 0320 	bic.w	r3, r3, #32
 8008676:	6023      	str	r3, [r4, #0]
 8008678:	2310      	movs	r3, #16
 800867a:	e7a7      	b.n	80085cc <_printf_i+0xf8>
 800867c:	4824      	ldr	r0, [pc, #144]	; (8008710 <_printf_i+0x23c>)
 800867e:	e7e4      	b.n	800864a <_printf_i+0x176>
 8008680:	4615      	mov	r5, r2
 8008682:	e7bd      	b.n	8008600 <_printf_i+0x12c>
 8008684:	682b      	ldr	r3, [r5, #0]
 8008686:	6826      	ldr	r6, [r4, #0]
 8008688:	6961      	ldr	r1, [r4, #20]
 800868a:	1d18      	adds	r0, r3, #4
 800868c:	6028      	str	r0, [r5, #0]
 800868e:	0635      	lsls	r5, r6, #24
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	d501      	bpl.n	8008698 <_printf_i+0x1c4>
 8008694:	6019      	str	r1, [r3, #0]
 8008696:	e002      	b.n	800869e <_printf_i+0x1ca>
 8008698:	0670      	lsls	r0, r6, #25
 800869a:	d5fb      	bpl.n	8008694 <_printf_i+0x1c0>
 800869c:	8019      	strh	r1, [r3, #0]
 800869e:	2300      	movs	r3, #0
 80086a0:	6123      	str	r3, [r4, #16]
 80086a2:	4615      	mov	r5, r2
 80086a4:	e7bc      	b.n	8008620 <_printf_i+0x14c>
 80086a6:	682b      	ldr	r3, [r5, #0]
 80086a8:	1d1a      	adds	r2, r3, #4
 80086aa:	602a      	str	r2, [r5, #0]
 80086ac:	681d      	ldr	r5, [r3, #0]
 80086ae:	6862      	ldr	r2, [r4, #4]
 80086b0:	2100      	movs	r1, #0
 80086b2:	4628      	mov	r0, r5
 80086b4:	f7f7 fd8c 	bl	80001d0 <memchr>
 80086b8:	b108      	cbz	r0, 80086be <_printf_i+0x1ea>
 80086ba:	1b40      	subs	r0, r0, r5
 80086bc:	6060      	str	r0, [r4, #4]
 80086be:	6863      	ldr	r3, [r4, #4]
 80086c0:	6123      	str	r3, [r4, #16]
 80086c2:	2300      	movs	r3, #0
 80086c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086c8:	e7aa      	b.n	8008620 <_printf_i+0x14c>
 80086ca:	6923      	ldr	r3, [r4, #16]
 80086cc:	462a      	mov	r2, r5
 80086ce:	4649      	mov	r1, r9
 80086d0:	4640      	mov	r0, r8
 80086d2:	47d0      	blx	sl
 80086d4:	3001      	adds	r0, #1
 80086d6:	d0ad      	beq.n	8008634 <_printf_i+0x160>
 80086d8:	6823      	ldr	r3, [r4, #0]
 80086da:	079b      	lsls	r3, r3, #30
 80086dc:	d413      	bmi.n	8008706 <_printf_i+0x232>
 80086de:	68e0      	ldr	r0, [r4, #12]
 80086e0:	9b03      	ldr	r3, [sp, #12]
 80086e2:	4298      	cmp	r0, r3
 80086e4:	bfb8      	it	lt
 80086e6:	4618      	movlt	r0, r3
 80086e8:	e7a6      	b.n	8008638 <_printf_i+0x164>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4632      	mov	r2, r6
 80086ee:	4649      	mov	r1, r9
 80086f0:	4640      	mov	r0, r8
 80086f2:	47d0      	blx	sl
 80086f4:	3001      	adds	r0, #1
 80086f6:	d09d      	beq.n	8008634 <_printf_i+0x160>
 80086f8:	3501      	adds	r5, #1
 80086fa:	68e3      	ldr	r3, [r4, #12]
 80086fc:	9903      	ldr	r1, [sp, #12]
 80086fe:	1a5b      	subs	r3, r3, r1
 8008700:	42ab      	cmp	r3, r5
 8008702:	dcf2      	bgt.n	80086ea <_printf_i+0x216>
 8008704:	e7eb      	b.n	80086de <_printf_i+0x20a>
 8008706:	2500      	movs	r5, #0
 8008708:	f104 0619 	add.w	r6, r4, #25
 800870c:	e7f5      	b.n	80086fa <_printf_i+0x226>
 800870e:	bf00      	nop
 8008710:	0800ac1a 	.word	0x0800ac1a
 8008714:	0800ac2b 	.word	0x0800ac2b

08008718 <std>:
 8008718:	2300      	movs	r3, #0
 800871a:	b510      	push	{r4, lr}
 800871c:	4604      	mov	r4, r0
 800871e:	e9c0 3300 	strd	r3, r3, [r0]
 8008722:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008726:	6083      	str	r3, [r0, #8]
 8008728:	8181      	strh	r1, [r0, #12]
 800872a:	6643      	str	r3, [r0, #100]	; 0x64
 800872c:	81c2      	strh	r2, [r0, #14]
 800872e:	6183      	str	r3, [r0, #24]
 8008730:	4619      	mov	r1, r3
 8008732:	2208      	movs	r2, #8
 8008734:	305c      	adds	r0, #92	; 0x5c
 8008736:	f000 f914 	bl	8008962 <memset>
 800873a:	4b0d      	ldr	r3, [pc, #52]	; (8008770 <std+0x58>)
 800873c:	6263      	str	r3, [r4, #36]	; 0x24
 800873e:	4b0d      	ldr	r3, [pc, #52]	; (8008774 <std+0x5c>)
 8008740:	62a3      	str	r3, [r4, #40]	; 0x28
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <std+0x60>)
 8008744:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008746:	4b0d      	ldr	r3, [pc, #52]	; (800877c <std+0x64>)
 8008748:	6323      	str	r3, [r4, #48]	; 0x30
 800874a:	4b0d      	ldr	r3, [pc, #52]	; (8008780 <std+0x68>)
 800874c:	6224      	str	r4, [r4, #32]
 800874e:	429c      	cmp	r4, r3
 8008750:	d006      	beq.n	8008760 <std+0x48>
 8008752:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008756:	4294      	cmp	r4, r2
 8008758:	d002      	beq.n	8008760 <std+0x48>
 800875a:	33d0      	adds	r3, #208	; 0xd0
 800875c:	429c      	cmp	r4, r3
 800875e:	d105      	bne.n	800876c <std+0x54>
 8008760:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008768:	f000 b978 	b.w	8008a5c <__retarget_lock_init_recursive>
 800876c:	bd10      	pop	{r4, pc}
 800876e:	bf00      	nop
 8008770:	080088dd 	.word	0x080088dd
 8008774:	080088ff 	.word	0x080088ff
 8008778:	08008937 	.word	0x08008937
 800877c:	0800895b 	.word	0x0800895b
 8008780:	200004a8 	.word	0x200004a8

08008784 <stdio_exit_handler>:
 8008784:	4a02      	ldr	r2, [pc, #8]	; (8008790 <stdio_exit_handler+0xc>)
 8008786:	4903      	ldr	r1, [pc, #12]	; (8008794 <stdio_exit_handler+0x10>)
 8008788:	4803      	ldr	r0, [pc, #12]	; (8008798 <stdio_exit_handler+0x14>)
 800878a:	f000 b869 	b.w	8008860 <_fwalk_sglue>
 800878e:	bf00      	nop
 8008790:	20000010 	.word	0x20000010
 8008794:	0800a411 	.word	0x0800a411
 8008798:	2000001c 	.word	0x2000001c

0800879c <cleanup_stdio>:
 800879c:	6841      	ldr	r1, [r0, #4]
 800879e:	4b0c      	ldr	r3, [pc, #48]	; (80087d0 <cleanup_stdio+0x34>)
 80087a0:	4299      	cmp	r1, r3
 80087a2:	b510      	push	{r4, lr}
 80087a4:	4604      	mov	r4, r0
 80087a6:	d001      	beq.n	80087ac <cleanup_stdio+0x10>
 80087a8:	f001 fe32 	bl	800a410 <_fflush_r>
 80087ac:	68a1      	ldr	r1, [r4, #8]
 80087ae:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <cleanup_stdio+0x38>)
 80087b0:	4299      	cmp	r1, r3
 80087b2:	d002      	beq.n	80087ba <cleanup_stdio+0x1e>
 80087b4:	4620      	mov	r0, r4
 80087b6:	f001 fe2b 	bl	800a410 <_fflush_r>
 80087ba:	68e1      	ldr	r1, [r4, #12]
 80087bc:	4b06      	ldr	r3, [pc, #24]	; (80087d8 <cleanup_stdio+0x3c>)
 80087be:	4299      	cmp	r1, r3
 80087c0:	d004      	beq.n	80087cc <cleanup_stdio+0x30>
 80087c2:	4620      	mov	r0, r4
 80087c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c8:	f001 be22 	b.w	800a410 <_fflush_r>
 80087cc:	bd10      	pop	{r4, pc}
 80087ce:	bf00      	nop
 80087d0:	200004a8 	.word	0x200004a8
 80087d4:	20000510 	.word	0x20000510
 80087d8:	20000578 	.word	0x20000578

080087dc <global_stdio_init.part.0>:
 80087dc:	b510      	push	{r4, lr}
 80087de:	4b0b      	ldr	r3, [pc, #44]	; (800880c <global_stdio_init.part.0+0x30>)
 80087e0:	4c0b      	ldr	r4, [pc, #44]	; (8008810 <global_stdio_init.part.0+0x34>)
 80087e2:	4a0c      	ldr	r2, [pc, #48]	; (8008814 <global_stdio_init.part.0+0x38>)
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	4620      	mov	r0, r4
 80087e8:	2200      	movs	r2, #0
 80087ea:	2104      	movs	r1, #4
 80087ec:	f7ff ff94 	bl	8008718 <std>
 80087f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80087f4:	2201      	movs	r2, #1
 80087f6:	2109      	movs	r1, #9
 80087f8:	f7ff ff8e 	bl	8008718 <std>
 80087fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008800:	2202      	movs	r2, #2
 8008802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008806:	2112      	movs	r1, #18
 8008808:	f7ff bf86 	b.w	8008718 <std>
 800880c:	200005e0 	.word	0x200005e0
 8008810:	200004a8 	.word	0x200004a8
 8008814:	08008785 	.word	0x08008785

08008818 <__sfp_lock_acquire>:
 8008818:	4801      	ldr	r0, [pc, #4]	; (8008820 <__sfp_lock_acquire+0x8>)
 800881a:	f000 b920 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 800881e:	bf00      	nop
 8008820:	200005e9 	.word	0x200005e9

08008824 <__sfp_lock_release>:
 8008824:	4801      	ldr	r0, [pc, #4]	; (800882c <__sfp_lock_release+0x8>)
 8008826:	f000 b91b 	b.w	8008a60 <__retarget_lock_release_recursive>
 800882a:	bf00      	nop
 800882c:	200005e9 	.word	0x200005e9

08008830 <__sinit>:
 8008830:	b510      	push	{r4, lr}
 8008832:	4604      	mov	r4, r0
 8008834:	f7ff fff0 	bl	8008818 <__sfp_lock_acquire>
 8008838:	6a23      	ldr	r3, [r4, #32]
 800883a:	b11b      	cbz	r3, 8008844 <__sinit+0x14>
 800883c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008840:	f7ff bff0 	b.w	8008824 <__sfp_lock_release>
 8008844:	4b04      	ldr	r3, [pc, #16]	; (8008858 <__sinit+0x28>)
 8008846:	6223      	str	r3, [r4, #32]
 8008848:	4b04      	ldr	r3, [pc, #16]	; (800885c <__sinit+0x2c>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1f5      	bne.n	800883c <__sinit+0xc>
 8008850:	f7ff ffc4 	bl	80087dc <global_stdio_init.part.0>
 8008854:	e7f2      	b.n	800883c <__sinit+0xc>
 8008856:	bf00      	nop
 8008858:	0800879d 	.word	0x0800879d
 800885c:	200005e0 	.word	0x200005e0

08008860 <_fwalk_sglue>:
 8008860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008864:	4607      	mov	r7, r0
 8008866:	4688      	mov	r8, r1
 8008868:	4614      	mov	r4, r2
 800886a:	2600      	movs	r6, #0
 800886c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008870:	f1b9 0901 	subs.w	r9, r9, #1
 8008874:	d505      	bpl.n	8008882 <_fwalk_sglue+0x22>
 8008876:	6824      	ldr	r4, [r4, #0]
 8008878:	2c00      	cmp	r4, #0
 800887a:	d1f7      	bne.n	800886c <_fwalk_sglue+0xc>
 800887c:	4630      	mov	r0, r6
 800887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008882:	89ab      	ldrh	r3, [r5, #12]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d907      	bls.n	8008898 <_fwalk_sglue+0x38>
 8008888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800888c:	3301      	adds	r3, #1
 800888e:	d003      	beq.n	8008898 <_fwalk_sglue+0x38>
 8008890:	4629      	mov	r1, r5
 8008892:	4638      	mov	r0, r7
 8008894:	47c0      	blx	r8
 8008896:	4306      	orrs	r6, r0
 8008898:	3568      	adds	r5, #104	; 0x68
 800889a:	e7e9      	b.n	8008870 <_fwalk_sglue+0x10>

0800889c <siprintf>:
 800889c:	b40e      	push	{r1, r2, r3}
 800889e:	b500      	push	{lr}
 80088a0:	b09c      	sub	sp, #112	; 0x70
 80088a2:	ab1d      	add	r3, sp, #116	; 0x74
 80088a4:	9002      	str	r0, [sp, #8]
 80088a6:	9006      	str	r0, [sp, #24]
 80088a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088ac:	4809      	ldr	r0, [pc, #36]	; (80088d4 <siprintf+0x38>)
 80088ae:	9107      	str	r1, [sp, #28]
 80088b0:	9104      	str	r1, [sp, #16]
 80088b2:	4909      	ldr	r1, [pc, #36]	; (80088d8 <siprintf+0x3c>)
 80088b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b8:	9105      	str	r1, [sp, #20]
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	a902      	add	r1, sp, #8
 80088c0:	f001 fc22 	bl	800a108 <_svfiprintf_r>
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	b01c      	add	sp, #112	; 0x70
 80088cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d0:	b003      	add	sp, #12
 80088d2:	4770      	bx	lr
 80088d4:	20000068 	.word	0x20000068
 80088d8:	ffff0208 	.word	0xffff0208

080088dc <__sread>:
 80088dc:	b510      	push	{r4, lr}
 80088de:	460c      	mov	r4, r1
 80088e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088e4:	f000 f86c 	bl	80089c0 <_read_r>
 80088e8:	2800      	cmp	r0, #0
 80088ea:	bfab      	itete	ge
 80088ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80088ee:	89a3      	ldrhlt	r3, [r4, #12]
 80088f0:	181b      	addge	r3, r3, r0
 80088f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80088f6:	bfac      	ite	ge
 80088f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80088fa:	81a3      	strhlt	r3, [r4, #12]
 80088fc:	bd10      	pop	{r4, pc}

080088fe <__swrite>:
 80088fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008902:	461f      	mov	r7, r3
 8008904:	898b      	ldrh	r3, [r1, #12]
 8008906:	05db      	lsls	r3, r3, #23
 8008908:	4605      	mov	r5, r0
 800890a:	460c      	mov	r4, r1
 800890c:	4616      	mov	r6, r2
 800890e:	d505      	bpl.n	800891c <__swrite+0x1e>
 8008910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008914:	2302      	movs	r3, #2
 8008916:	2200      	movs	r2, #0
 8008918:	f000 f840 	bl	800899c <_lseek_r>
 800891c:	89a3      	ldrh	r3, [r4, #12]
 800891e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008922:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008926:	81a3      	strh	r3, [r4, #12]
 8008928:	4632      	mov	r2, r6
 800892a:	463b      	mov	r3, r7
 800892c:	4628      	mov	r0, r5
 800892e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	f000 b857 	b.w	80089e4 <_write_r>

08008936 <__sseek>:
 8008936:	b510      	push	{r4, lr}
 8008938:	460c      	mov	r4, r1
 800893a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800893e:	f000 f82d 	bl	800899c <_lseek_r>
 8008942:	1c43      	adds	r3, r0, #1
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	bf15      	itete	ne
 8008948:	6560      	strne	r0, [r4, #84]	; 0x54
 800894a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800894e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008952:	81a3      	strheq	r3, [r4, #12]
 8008954:	bf18      	it	ne
 8008956:	81a3      	strhne	r3, [r4, #12]
 8008958:	bd10      	pop	{r4, pc}

0800895a <__sclose>:
 800895a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800895e:	f000 b80d 	b.w	800897c <_close_r>

08008962 <memset>:
 8008962:	4402      	add	r2, r0
 8008964:	4603      	mov	r3, r0
 8008966:	4293      	cmp	r3, r2
 8008968:	d100      	bne.n	800896c <memset+0xa>
 800896a:	4770      	bx	lr
 800896c:	f803 1b01 	strb.w	r1, [r3], #1
 8008970:	e7f9      	b.n	8008966 <memset+0x4>
	...

08008974 <_localeconv_r>:
 8008974:	4800      	ldr	r0, [pc, #0]	; (8008978 <_localeconv_r+0x4>)
 8008976:	4770      	bx	lr
 8008978:	2000015c 	.word	0x2000015c

0800897c <_close_r>:
 800897c:	b538      	push	{r3, r4, r5, lr}
 800897e:	4d06      	ldr	r5, [pc, #24]	; (8008998 <_close_r+0x1c>)
 8008980:	2300      	movs	r3, #0
 8008982:	4604      	mov	r4, r0
 8008984:	4608      	mov	r0, r1
 8008986:	602b      	str	r3, [r5, #0]
 8008988:	f7f9 f821 	bl	80019ce <_close>
 800898c:	1c43      	adds	r3, r0, #1
 800898e:	d102      	bne.n	8008996 <_close_r+0x1a>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	b103      	cbz	r3, 8008996 <_close_r+0x1a>
 8008994:	6023      	str	r3, [r4, #0]
 8008996:	bd38      	pop	{r3, r4, r5, pc}
 8008998:	200005e4 	.word	0x200005e4

0800899c <_lseek_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4d07      	ldr	r5, [pc, #28]	; (80089bc <_lseek_r+0x20>)
 80089a0:	4604      	mov	r4, r0
 80089a2:	4608      	mov	r0, r1
 80089a4:	4611      	mov	r1, r2
 80089a6:	2200      	movs	r2, #0
 80089a8:	602a      	str	r2, [r5, #0]
 80089aa:	461a      	mov	r2, r3
 80089ac:	f7f9 f836 	bl	8001a1c <_lseek>
 80089b0:	1c43      	adds	r3, r0, #1
 80089b2:	d102      	bne.n	80089ba <_lseek_r+0x1e>
 80089b4:	682b      	ldr	r3, [r5, #0]
 80089b6:	b103      	cbz	r3, 80089ba <_lseek_r+0x1e>
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	bd38      	pop	{r3, r4, r5, pc}
 80089bc:	200005e4 	.word	0x200005e4

080089c0 <_read_r>:
 80089c0:	b538      	push	{r3, r4, r5, lr}
 80089c2:	4d07      	ldr	r5, [pc, #28]	; (80089e0 <_read_r+0x20>)
 80089c4:	4604      	mov	r4, r0
 80089c6:	4608      	mov	r0, r1
 80089c8:	4611      	mov	r1, r2
 80089ca:	2200      	movs	r2, #0
 80089cc:	602a      	str	r2, [r5, #0]
 80089ce:	461a      	mov	r2, r3
 80089d0:	f7f8 ffc4 	bl	800195c <_read>
 80089d4:	1c43      	adds	r3, r0, #1
 80089d6:	d102      	bne.n	80089de <_read_r+0x1e>
 80089d8:	682b      	ldr	r3, [r5, #0]
 80089da:	b103      	cbz	r3, 80089de <_read_r+0x1e>
 80089dc:	6023      	str	r3, [r4, #0]
 80089de:	bd38      	pop	{r3, r4, r5, pc}
 80089e0:	200005e4 	.word	0x200005e4

080089e4 <_write_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	; (8008a04 <_write_r+0x20>)
 80089e8:	4604      	mov	r4, r0
 80089ea:	4608      	mov	r0, r1
 80089ec:	4611      	mov	r1, r2
 80089ee:	2200      	movs	r2, #0
 80089f0:	602a      	str	r2, [r5, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	f7f8 ffcf 	bl	8001996 <_write>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d102      	bne.n	8008a02 <_write_r+0x1e>
 80089fc:	682b      	ldr	r3, [r5, #0]
 80089fe:	b103      	cbz	r3, 8008a02 <_write_r+0x1e>
 8008a00:	6023      	str	r3, [r4, #0]
 8008a02:	bd38      	pop	{r3, r4, r5, pc}
 8008a04:	200005e4 	.word	0x200005e4

08008a08 <__errno>:
 8008a08:	4b01      	ldr	r3, [pc, #4]	; (8008a10 <__errno+0x8>)
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	4770      	bx	lr
 8008a0e:	bf00      	nop
 8008a10:	20000068 	.word	0x20000068

08008a14 <__libc_init_array>:
 8008a14:	b570      	push	{r4, r5, r6, lr}
 8008a16:	4d0d      	ldr	r5, [pc, #52]	; (8008a4c <__libc_init_array+0x38>)
 8008a18:	4c0d      	ldr	r4, [pc, #52]	; (8008a50 <__libc_init_array+0x3c>)
 8008a1a:	1b64      	subs	r4, r4, r5
 8008a1c:	10a4      	asrs	r4, r4, #2
 8008a1e:	2600      	movs	r6, #0
 8008a20:	42a6      	cmp	r6, r4
 8008a22:	d109      	bne.n	8008a38 <__libc_init_array+0x24>
 8008a24:	4d0b      	ldr	r5, [pc, #44]	; (8008a54 <__libc_init_array+0x40>)
 8008a26:	4c0c      	ldr	r4, [pc, #48]	; (8008a58 <__libc_init_array+0x44>)
 8008a28:	f002 f896 	bl	800ab58 <_init>
 8008a2c:	1b64      	subs	r4, r4, r5
 8008a2e:	10a4      	asrs	r4, r4, #2
 8008a30:	2600      	movs	r6, #0
 8008a32:	42a6      	cmp	r6, r4
 8008a34:	d105      	bne.n	8008a42 <__libc_init_array+0x2e>
 8008a36:	bd70      	pop	{r4, r5, r6, pc}
 8008a38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a3c:	4798      	blx	r3
 8008a3e:	3601      	adds	r6, #1
 8008a40:	e7ee      	b.n	8008a20 <__libc_init_array+0xc>
 8008a42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a46:	4798      	blx	r3
 8008a48:	3601      	adds	r6, #1
 8008a4a:	e7f2      	b.n	8008a32 <__libc_init_array+0x1e>
 8008a4c:	0800af84 	.word	0x0800af84
 8008a50:	0800af84 	.word	0x0800af84
 8008a54:	0800af84 	.word	0x0800af84
 8008a58:	0800af88 	.word	0x0800af88

08008a5c <__retarget_lock_init_recursive>:
 8008a5c:	4770      	bx	lr

08008a5e <__retarget_lock_acquire_recursive>:
 8008a5e:	4770      	bx	lr

08008a60 <__retarget_lock_release_recursive>:
 8008a60:	4770      	bx	lr

08008a62 <quorem>:
 8008a62:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a66:	6903      	ldr	r3, [r0, #16]
 8008a68:	690c      	ldr	r4, [r1, #16]
 8008a6a:	42a3      	cmp	r3, r4
 8008a6c:	4607      	mov	r7, r0
 8008a6e:	db7e      	blt.n	8008b6e <quorem+0x10c>
 8008a70:	3c01      	subs	r4, #1
 8008a72:	f101 0814 	add.w	r8, r1, #20
 8008a76:	f100 0514 	add.w	r5, r0, #20
 8008a7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008a7e:	9301      	str	r3, [sp, #4]
 8008a80:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008a84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	429a      	cmp	r2, r3
 8008a8c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008a90:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008a94:	fbb2 f6f3 	udiv	r6, r2, r3
 8008a98:	d331      	bcc.n	8008afe <quorem+0x9c>
 8008a9a:	f04f 0e00 	mov.w	lr, #0
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	46ac      	mov	ip, r5
 8008aa2:	46f2      	mov	sl, lr
 8008aa4:	f850 2b04 	ldr.w	r2, [r0], #4
 8008aa8:	b293      	uxth	r3, r2
 8008aaa:	fb06 e303 	mla	r3, r6, r3, lr
 8008aae:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ab2:	0c1a      	lsrs	r2, r3, #16
 8008ab4:	b29b      	uxth	r3, r3
 8008ab6:	ebaa 0303 	sub.w	r3, sl, r3
 8008aba:	f8dc a000 	ldr.w	sl, [ip]
 8008abe:	fa13 f38a 	uxtah	r3, r3, sl
 8008ac2:	fb06 220e 	mla	r2, r6, lr, r2
 8008ac6:	9300      	str	r3, [sp, #0]
 8008ac8:	9b00      	ldr	r3, [sp, #0]
 8008aca:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008ace:	b292      	uxth	r2, r2
 8008ad0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008ad4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008ad8:	f8bd 3000 	ldrh.w	r3, [sp]
 8008adc:	4581      	cmp	r9, r0
 8008ade:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ae2:	f84c 3b04 	str.w	r3, [ip], #4
 8008ae6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008aea:	d2db      	bcs.n	8008aa4 <quorem+0x42>
 8008aec:	f855 300b 	ldr.w	r3, [r5, fp]
 8008af0:	b92b      	cbnz	r3, 8008afe <quorem+0x9c>
 8008af2:	9b01      	ldr	r3, [sp, #4]
 8008af4:	3b04      	subs	r3, #4
 8008af6:	429d      	cmp	r5, r3
 8008af8:	461a      	mov	r2, r3
 8008afa:	d32c      	bcc.n	8008b56 <quorem+0xf4>
 8008afc:	613c      	str	r4, [r7, #16]
 8008afe:	4638      	mov	r0, r7
 8008b00:	f001 f9a8 	bl	8009e54 <__mcmp>
 8008b04:	2800      	cmp	r0, #0
 8008b06:	db22      	blt.n	8008b4e <quorem+0xec>
 8008b08:	3601      	adds	r6, #1
 8008b0a:	4629      	mov	r1, r5
 8008b0c:	2000      	movs	r0, #0
 8008b0e:	f858 2b04 	ldr.w	r2, [r8], #4
 8008b12:	f8d1 c000 	ldr.w	ip, [r1]
 8008b16:	b293      	uxth	r3, r2
 8008b18:	1ac3      	subs	r3, r0, r3
 8008b1a:	0c12      	lsrs	r2, r2, #16
 8008b1c:	fa13 f38c 	uxtah	r3, r3, ip
 8008b20:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008b24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008b28:	b29b      	uxth	r3, r3
 8008b2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008b2e:	45c1      	cmp	r9, r8
 8008b30:	f841 3b04 	str.w	r3, [r1], #4
 8008b34:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008b38:	d2e9      	bcs.n	8008b0e <quorem+0xac>
 8008b3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008b3e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008b42:	b922      	cbnz	r2, 8008b4e <quorem+0xec>
 8008b44:	3b04      	subs	r3, #4
 8008b46:	429d      	cmp	r5, r3
 8008b48:	461a      	mov	r2, r3
 8008b4a:	d30a      	bcc.n	8008b62 <quorem+0x100>
 8008b4c:	613c      	str	r4, [r7, #16]
 8008b4e:	4630      	mov	r0, r6
 8008b50:	b003      	add	sp, #12
 8008b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b56:	6812      	ldr	r2, [r2, #0]
 8008b58:	3b04      	subs	r3, #4
 8008b5a:	2a00      	cmp	r2, #0
 8008b5c:	d1ce      	bne.n	8008afc <quorem+0x9a>
 8008b5e:	3c01      	subs	r4, #1
 8008b60:	e7c9      	b.n	8008af6 <quorem+0x94>
 8008b62:	6812      	ldr	r2, [r2, #0]
 8008b64:	3b04      	subs	r3, #4
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	d1f0      	bne.n	8008b4c <quorem+0xea>
 8008b6a:	3c01      	subs	r4, #1
 8008b6c:	e7eb      	b.n	8008b46 <quorem+0xe4>
 8008b6e:	2000      	movs	r0, #0
 8008b70:	e7ee      	b.n	8008b50 <quorem+0xee>
 8008b72:	0000      	movs	r0, r0
 8008b74:	0000      	movs	r0, r0
	...

08008b78 <_dtoa_r>:
 8008b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b7c:	ed2d 8b04 	vpush	{d8-d9}
 8008b80:	69c5      	ldr	r5, [r0, #28]
 8008b82:	b093      	sub	sp, #76	; 0x4c
 8008b84:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008b88:	ec57 6b10 	vmov	r6, r7, d0
 8008b8c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008b90:	9107      	str	r1, [sp, #28]
 8008b92:	4604      	mov	r4, r0
 8008b94:	920a      	str	r2, [sp, #40]	; 0x28
 8008b96:	930d      	str	r3, [sp, #52]	; 0x34
 8008b98:	b975      	cbnz	r5, 8008bb8 <_dtoa_r+0x40>
 8008b9a:	2010      	movs	r0, #16
 8008b9c:	f000 fe2a 	bl	80097f4 <malloc>
 8008ba0:	4602      	mov	r2, r0
 8008ba2:	61e0      	str	r0, [r4, #28]
 8008ba4:	b920      	cbnz	r0, 8008bb0 <_dtoa_r+0x38>
 8008ba6:	4bae      	ldr	r3, [pc, #696]	; (8008e60 <_dtoa_r+0x2e8>)
 8008ba8:	21ef      	movs	r1, #239	; 0xef
 8008baa:	48ae      	ldr	r0, [pc, #696]	; (8008e64 <_dtoa_r+0x2ec>)
 8008bac:	f001 fc90 	bl	800a4d0 <__assert_func>
 8008bb0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008bb4:	6005      	str	r5, [r0, #0]
 8008bb6:	60c5      	str	r5, [r0, #12]
 8008bb8:	69e3      	ldr	r3, [r4, #28]
 8008bba:	6819      	ldr	r1, [r3, #0]
 8008bbc:	b151      	cbz	r1, 8008bd4 <_dtoa_r+0x5c>
 8008bbe:	685a      	ldr	r2, [r3, #4]
 8008bc0:	604a      	str	r2, [r1, #4]
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	4093      	lsls	r3, r2
 8008bc6:	608b      	str	r3, [r1, #8]
 8008bc8:	4620      	mov	r0, r4
 8008bca:	f000 ff07 	bl	80099dc <_Bfree>
 8008bce:	69e3      	ldr	r3, [r4, #28]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	601a      	str	r2, [r3, #0]
 8008bd4:	1e3b      	subs	r3, r7, #0
 8008bd6:	bfbb      	ittet	lt
 8008bd8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008bdc:	9303      	strlt	r3, [sp, #12]
 8008bde:	2300      	movge	r3, #0
 8008be0:	2201      	movlt	r2, #1
 8008be2:	bfac      	ite	ge
 8008be4:	f8c8 3000 	strge.w	r3, [r8]
 8008be8:	f8c8 2000 	strlt.w	r2, [r8]
 8008bec:	4b9e      	ldr	r3, [pc, #632]	; (8008e68 <_dtoa_r+0x2f0>)
 8008bee:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008bf2:	ea33 0308 	bics.w	r3, r3, r8
 8008bf6:	d11b      	bne.n	8008c30 <_dtoa_r+0xb8>
 8008bf8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008bfa:	f242 730f 	movw	r3, #9999	; 0x270f
 8008bfe:	6013      	str	r3, [r2, #0]
 8008c00:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008c04:	4333      	orrs	r3, r6
 8008c06:	f000 8593 	beq.w	8009730 <_dtoa_r+0xbb8>
 8008c0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c0c:	b963      	cbnz	r3, 8008c28 <_dtoa_r+0xb0>
 8008c0e:	4b97      	ldr	r3, [pc, #604]	; (8008e6c <_dtoa_r+0x2f4>)
 8008c10:	e027      	b.n	8008c62 <_dtoa_r+0xea>
 8008c12:	4b97      	ldr	r3, [pc, #604]	; (8008e70 <_dtoa_r+0x2f8>)
 8008c14:	9300      	str	r3, [sp, #0]
 8008c16:	3308      	adds	r3, #8
 8008c18:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c1a:	6013      	str	r3, [r2, #0]
 8008c1c:	9800      	ldr	r0, [sp, #0]
 8008c1e:	b013      	add	sp, #76	; 0x4c
 8008c20:	ecbd 8b04 	vpop	{d8-d9}
 8008c24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c28:	4b90      	ldr	r3, [pc, #576]	; (8008e6c <_dtoa_r+0x2f4>)
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	3303      	adds	r3, #3
 8008c2e:	e7f3      	b.n	8008c18 <_dtoa_r+0xa0>
 8008c30:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	ec51 0b17 	vmov	r0, r1, d7
 8008c3a:	eeb0 8a47 	vmov.f32	s16, s14
 8008c3e:	eef0 8a67 	vmov.f32	s17, s15
 8008c42:	2300      	movs	r3, #0
 8008c44:	f7f7 ff40 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c48:	4681      	mov	r9, r0
 8008c4a:	b160      	cbz	r0, 8008c66 <_dtoa_r+0xee>
 8008c4c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008c4e:	2301      	movs	r3, #1
 8008c50:	6013      	str	r3, [r2, #0]
 8008c52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	f000 8568 	beq.w	800972a <_dtoa_r+0xbb2>
 8008c5a:	4b86      	ldr	r3, [pc, #536]	; (8008e74 <_dtoa_r+0x2fc>)
 8008c5c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008c5e:	6013      	str	r3, [r2, #0]
 8008c60:	3b01      	subs	r3, #1
 8008c62:	9300      	str	r3, [sp, #0]
 8008c64:	e7da      	b.n	8008c1c <_dtoa_r+0xa4>
 8008c66:	aa10      	add	r2, sp, #64	; 0x40
 8008c68:	a911      	add	r1, sp, #68	; 0x44
 8008c6a:	4620      	mov	r0, r4
 8008c6c:	eeb0 0a48 	vmov.f32	s0, s16
 8008c70:	eef0 0a68 	vmov.f32	s1, s17
 8008c74:	f001 f994 	bl	8009fa0 <__d2b>
 8008c78:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008c7c:	4682      	mov	sl, r0
 8008c7e:	2d00      	cmp	r5, #0
 8008c80:	d07f      	beq.n	8008d82 <_dtoa_r+0x20a>
 8008c82:	ee18 3a90 	vmov	r3, s17
 8008c86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c8a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008c8e:	ec51 0b18 	vmov	r0, r1, d8
 8008c92:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008c96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008c9a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	4b75      	ldr	r3, [pc, #468]	; (8008e78 <_dtoa_r+0x300>)
 8008ca4:	f7f7 faf0 	bl	8000288 <__aeabi_dsub>
 8008ca8:	a367      	add	r3, pc, #412	; (adr r3, 8008e48 <_dtoa_r+0x2d0>)
 8008caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cae:	f7f7 fca3 	bl	80005f8 <__aeabi_dmul>
 8008cb2:	a367      	add	r3, pc, #412	; (adr r3, 8008e50 <_dtoa_r+0x2d8>)
 8008cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb8:	f7f7 fae8 	bl	800028c <__adddf3>
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	4628      	mov	r0, r5
 8008cc0:	460f      	mov	r7, r1
 8008cc2:	f7f7 fc2f 	bl	8000524 <__aeabi_i2d>
 8008cc6:	a364      	add	r3, pc, #400	; (adr r3, 8008e58 <_dtoa_r+0x2e0>)
 8008cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ccc:	f7f7 fc94 	bl	80005f8 <__aeabi_dmul>
 8008cd0:	4602      	mov	r2, r0
 8008cd2:	460b      	mov	r3, r1
 8008cd4:	4630      	mov	r0, r6
 8008cd6:	4639      	mov	r1, r7
 8008cd8:	f7f7 fad8 	bl	800028c <__adddf3>
 8008cdc:	4606      	mov	r6, r0
 8008cde:	460f      	mov	r7, r1
 8008ce0:	f7f7 ff3a 	bl	8000b58 <__aeabi_d2iz>
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	4683      	mov	fp, r0
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4630      	mov	r0, r6
 8008cec:	4639      	mov	r1, r7
 8008cee:	f7f7 fef5 	bl	8000adc <__aeabi_dcmplt>
 8008cf2:	b148      	cbz	r0, 8008d08 <_dtoa_r+0x190>
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f7f7 fc15 	bl	8000524 <__aeabi_i2d>
 8008cfa:	4632      	mov	r2, r6
 8008cfc:	463b      	mov	r3, r7
 8008cfe:	f7f7 fee3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d02:	b908      	cbnz	r0, 8008d08 <_dtoa_r+0x190>
 8008d04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d08:	f1bb 0f16 	cmp.w	fp, #22
 8008d0c:	d857      	bhi.n	8008dbe <_dtoa_r+0x246>
 8008d0e:	4b5b      	ldr	r3, [pc, #364]	; (8008e7c <_dtoa_r+0x304>)
 8008d10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d18:	ec51 0b18 	vmov	r0, r1, d8
 8008d1c:	f7f7 fede 	bl	8000adc <__aeabi_dcmplt>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d04e      	beq.n	8008dc2 <_dtoa_r+0x24a>
 8008d24:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008d28:	2300      	movs	r3, #0
 8008d2a:	930c      	str	r3, [sp, #48]	; 0x30
 8008d2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d2e:	1b5b      	subs	r3, r3, r5
 8008d30:	1e5a      	subs	r2, r3, #1
 8008d32:	bf45      	ittet	mi
 8008d34:	f1c3 0301 	rsbmi	r3, r3, #1
 8008d38:	9305      	strmi	r3, [sp, #20]
 8008d3a:	2300      	movpl	r3, #0
 8008d3c:	2300      	movmi	r3, #0
 8008d3e:	9206      	str	r2, [sp, #24]
 8008d40:	bf54      	ite	pl
 8008d42:	9305      	strpl	r3, [sp, #20]
 8008d44:	9306      	strmi	r3, [sp, #24]
 8008d46:	f1bb 0f00 	cmp.w	fp, #0
 8008d4a:	db3c      	blt.n	8008dc6 <_dtoa_r+0x24e>
 8008d4c:	9b06      	ldr	r3, [sp, #24]
 8008d4e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008d52:	445b      	add	r3, fp
 8008d54:	9306      	str	r3, [sp, #24]
 8008d56:	2300      	movs	r3, #0
 8008d58:	9308      	str	r3, [sp, #32]
 8008d5a:	9b07      	ldr	r3, [sp, #28]
 8008d5c:	2b09      	cmp	r3, #9
 8008d5e:	d868      	bhi.n	8008e32 <_dtoa_r+0x2ba>
 8008d60:	2b05      	cmp	r3, #5
 8008d62:	bfc4      	itt	gt
 8008d64:	3b04      	subgt	r3, #4
 8008d66:	9307      	strgt	r3, [sp, #28]
 8008d68:	9b07      	ldr	r3, [sp, #28]
 8008d6a:	f1a3 0302 	sub.w	r3, r3, #2
 8008d6e:	bfcc      	ite	gt
 8008d70:	2500      	movgt	r5, #0
 8008d72:	2501      	movle	r5, #1
 8008d74:	2b03      	cmp	r3, #3
 8008d76:	f200 8085 	bhi.w	8008e84 <_dtoa_r+0x30c>
 8008d7a:	e8df f003 	tbb	[pc, r3]
 8008d7e:	3b2e      	.short	0x3b2e
 8008d80:	5839      	.short	0x5839
 8008d82:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008d86:	441d      	add	r5, r3
 8008d88:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008d8c:	2b20      	cmp	r3, #32
 8008d8e:	bfc1      	itttt	gt
 8008d90:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008d94:	fa08 f803 	lslgt.w	r8, r8, r3
 8008d98:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008d9c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008da0:	bfd6      	itet	le
 8008da2:	f1c3 0320 	rsble	r3, r3, #32
 8008da6:	ea48 0003 	orrgt.w	r0, r8, r3
 8008daa:	fa06 f003 	lslle.w	r0, r6, r3
 8008dae:	f7f7 fba9 	bl	8000504 <__aeabi_ui2d>
 8008db2:	2201      	movs	r2, #1
 8008db4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008db8:	3d01      	subs	r5, #1
 8008dba:	920e      	str	r2, [sp, #56]	; 0x38
 8008dbc:	e76f      	b.n	8008c9e <_dtoa_r+0x126>
 8008dbe:	2301      	movs	r3, #1
 8008dc0:	e7b3      	b.n	8008d2a <_dtoa_r+0x1b2>
 8008dc2:	900c      	str	r0, [sp, #48]	; 0x30
 8008dc4:	e7b2      	b.n	8008d2c <_dtoa_r+0x1b4>
 8008dc6:	9b05      	ldr	r3, [sp, #20]
 8008dc8:	eba3 030b 	sub.w	r3, r3, fp
 8008dcc:	9305      	str	r3, [sp, #20]
 8008dce:	f1cb 0300 	rsb	r3, fp, #0
 8008dd2:	9308      	str	r3, [sp, #32]
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	930b      	str	r3, [sp, #44]	; 0x2c
 8008dd8:	e7bf      	b.n	8008d5a <_dtoa_r+0x1e2>
 8008dda:	2300      	movs	r3, #0
 8008ddc:	9309      	str	r3, [sp, #36]	; 0x24
 8008dde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	dc52      	bgt.n	8008e8a <_dtoa_r+0x312>
 8008de4:	2301      	movs	r3, #1
 8008de6:	9301      	str	r3, [sp, #4]
 8008de8:	9304      	str	r3, [sp, #16]
 8008dea:	461a      	mov	r2, r3
 8008dec:	920a      	str	r2, [sp, #40]	; 0x28
 8008dee:	e00b      	b.n	8008e08 <_dtoa_r+0x290>
 8008df0:	2301      	movs	r3, #1
 8008df2:	e7f3      	b.n	8008ddc <_dtoa_r+0x264>
 8008df4:	2300      	movs	r3, #0
 8008df6:	9309      	str	r3, [sp, #36]	; 0x24
 8008df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008dfa:	445b      	add	r3, fp
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	3301      	adds	r3, #1
 8008e00:	2b01      	cmp	r3, #1
 8008e02:	9304      	str	r3, [sp, #16]
 8008e04:	bfb8      	it	lt
 8008e06:	2301      	movlt	r3, #1
 8008e08:	69e0      	ldr	r0, [r4, #28]
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	2204      	movs	r2, #4
 8008e0e:	f102 0614 	add.w	r6, r2, #20
 8008e12:	429e      	cmp	r6, r3
 8008e14:	d93d      	bls.n	8008e92 <_dtoa_r+0x31a>
 8008e16:	6041      	str	r1, [r0, #4]
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fd9f 	bl	800995c <_Balloc>
 8008e1e:	9000      	str	r0, [sp, #0]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	d139      	bne.n	8008e98 <_dtoa_r+0x320>
 8008e24:	4b16      	ldr	r3, [pc, #88]	; (8008e80 <_dtoa_r+0x308>)
 8008e26:	4602      	mov	r2, r0
 8008e28:	f240 11af 	movw	r1, #431	; 0x1af
 8008e2c:	e6bd      	b.n	8008baa <_dtoa_r+0x32>
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e7e1      	b.n	8008df6 <_dtoa_r+0x27e>
 8008e32:	2501      	movs	r5, #1
 8008e34:	2300      	movs	r3, #0
 8008e36:	9307      	str	r3, [sp, #28]
 8008e38:	9509      	str	r5, [sp, #36]	; 0x24
 8008e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8008e3e:	9301      	str	r3, [sp, #4]
 8008e40:	9304      	str	r3, [sp, #16]
 8008e42:	2200      	movs	r2, #0
 8008e44:	2312      	movs	r3, #18
 8008e46:	e7d1      	b.n	8008dec <_dtoa_r+0x274>
 8008e48:	636f4361 	.word	0x636f4361
 8008e4c:	3fd287a7 	.word	0x3fd287a7
 8008e50:	8b60c8b3 	.word	0x8b60c8b3
 8008e54:	3fc68a28 	.word	0x3fc68a28
 8008e58:	509f79fb 	.word	0x509f79fb
 8008e5c:	3fd34413 	.word	0x3fd34413
 8008e60:	0800ac49 	.word	0x0800ac49
 8008e64:	0800ac60 	.word	0x0800ac60
 8008e68:	7ff00000 	.word	0x7ff00000
 8008e6c:	0800ac45 	.word	0x0800ac45
 8008e70:	0800ac3c 	.word	0x0800ac3c
 8008e74:	0800ac19 	.word	0x0800ac19
 8008e78:	3ff80000 	.word	0x3ff80000
 8008e7c:	0800ad50 	.word	0x0800ad50
 8008e80:	0800acb8 	.word	0x0800acb8
 8008e84:	2301      	movs	r3, #1
 8008e86:	9309      	str	r3, [sp, #36]	; 0x24
 8008e88:	e7d7      	b.n	8008e3a <_dtoa_r+0x2c2>
 8008e8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8c:	9301      	str	r3, [sp, #4]
 8008e8e:	9304      	str	r3, [sp, #16]
 8008e90:	e7ba      	b.n	8008e08 <_dtoa_r+0x290>
 8008e92:	3101      	adds	r1, #1
 8008e94:	0052      	lsls	r2, r2, #1
 8008e96:	e7ba      	b.n	8008e0e <_dtoa_r+0x296>
 8008e98:	69e3      	ldr	r3, [r4, #28]
 8008e9a:	9a00      	ldr	r2, [sp, #0]
 8008e9c:	601a      	str	r2, [r3, #0]
 8008e9e:	9b04      	ldr	r3, [sp, #16]
 8008ea0:	2b0e      	cmp	r3, #14
 8008ea2:	f200 80a8 	bhi.w	8008ff6 <_dtoa_r+0x47e>
 8008ea6:	2d00      	cmp	r5, #0
 8008ea8:	f000 80a5 	beq.w	8008ff6 <_dtoa_r+0x47e>
 8008eac:	f1bb 0f00 	cmp.w	fp, #0
 8008eb0:	dd38      	ble.n	8008f24 <_dtoa_r+0x3ac>
 8008eb2:	4bc0      	ldr	r3, [pc, #768]	; (80091b4 <_dtoa_r+0x63c>)
 8008eb4:	f00b 020f 	and.w	r2, fp, #15
 8008eb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ebc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ec0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008ec4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008ec8:	d019      	beq.n	8008efe <_dtoa_r+0x386>
 8008eca:	4bbb      	ldr	r3, [pc, #748]	; (80091b8 <_dtoa_r+0x640>)
 8008ecc:	ec51 0b18 	vmov	r0, r1, d8
 8008ed0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ed4:	f7f7 fcba 	bl	800084c <__aeabi_ddiv>
 8008ed8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008edc:	f008 080f 	and.w	r8, r8, #15
 8008ee0:	2503      	movs	r5, #3
 8008ee2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80091b8 <_dtoa_r+0x640>
 8008ee6:	f1b8 0f00 	cmp.w	r8, #0
 8008eea:	d10a      	bne.n	8008f02 <_dtoa_r+0x38a>
 8008eec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ef0:	4632      	mov	r2, r6
 8008ef2:	463b      	mov	r3, r7
 8008ef4:	f7f7 fcaa 	bl	800084c <__aeabi_ddiv>
 8008ef8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008efc:	e02b      	b.n	8008f56 <_dtoa_r+0x3de>
 8008efe:	2502      	movs	r5, #2
 8008f00:	e7ef      	b.n	8008ee2 <_dtoa_r+0x36a>
 8008f02:	f018 0f01 	tst.w	r8, #1
 8008f06:	d008      	beq.n	8008f1a <_dtoa_r+0x3a2>
 8008f08:	4630      	mov	r0, r6
 8008f0a:	4639      	mov	r1, r7
 8008f0c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008f10:	f7f7 fb72 	bl	80005f8 <__aeabi_dmul>
 8008f14:	3501      	adds	r5, #1
 8008f16:	4606      	mov	r6, r0
 8008f18:	460f      	mov	r7, r1
 8008f1a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008f1e:	f109 0908 	add.w	r9, r9, #8
 8008f22:	e7e0      	b.n	8008ee6 <_dtoa_r+0x36e>
 8008f24:	f000 809f 	beq.w	8009066 <_dtoa_r+0x4ee>
 8008f28:	f1cb 0600 	rsb	r6, fp, #0
 8008f2c:	4ba1      	ldr	r3, [pc, #644]	; (80091b4 <_dtoa_r+0x63c>)
 8008f2e:	4fa2      	ldr	r7, [pc, #648]	; (80091b8 <_dtoa_r+0x640>)
 8008f30:	f006 020f 	and.w	r2, r6, #15
 8008f34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f3c:	ec51 0b18 	vmov	r0, r1, d8
 8008f40:	f7f7 fb5a 	bl	80005f8 <__aeabi_dmul>
 8008f44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f48:	1136      	asrs	r6, r6, #4
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	2502      	movs	r5, #2
 8008f4e:	2e00      	cmp	r6, #0
 8008f50:	d17e      	bne.n	8009050 <_dtoa_r+0x4d8>
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1d0      	bne.n	8008ef8 <_dtoa_r+0x380>
 8008f56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008f58:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	f000 8084 	beq.w	800906a <_dtoa_r+0x4f2>
 8008f62:	4b96      	ldr	r3, [pc, #600]	; (80091bc <_dtoa_r+0x644>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	4640      	mov	r0, r8
 8008f68:	4649      	mov	r1, r9
 8008f6a:	f7f7 fdb7 	bl	8000adc <__aeabi_dcmplt>
 8008f6e:	2800      	cmp	r0, #0
 8008f70:	d07b      	beq.n	800906a <_dtoa_r+0x4f2>
 8008f72:	9b04      	ldr	r3, [sp, #16]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d078      	beq.n	800906a <_dtoa_r+0x4f2>
 8008f78:	9b01      	ldr	r3, [sp, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	dd39      	ble.n	8008ff2 <_dtoa_r+0x47a>
 8008f7e:	4b90      	ldr	r3, [pc, #576]	; (80091c0 <_dtoa_r+0x648>)
 8008f80:	2200      	movs	r2, #0
 8008f82:	4640      	mov	r0, r8
 8008f84:	4649      	mov	r1, r9
 8008f86:	f7f7 fb37 	bl	80005f8 <__aeabi_dmul>
 8008f8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f8e:	9e01      	ldr	r6, [sp, #4]
 8008f90:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008f94:	3501      	adds	r5, #1
 8008f96:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7f7 fac2 	bl	8000524 <__aeabi_i2d>
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	f7f7 fb28 	bl	80005f8 <__aeabi_dmul>
 8008fa8:	4b86      	ldr	r3, [pc, #536]	; (80091c4 <_dtoa_r+0x64c>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	f7f7 f96e 	bl	800028c <__adddf3>
 8008fb0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008fb8:	9303      	str	r3, [sp, #12]
 8008fba:	2e00      	cmp	r6, #0
 8008fbc:	d158      	bne.n	8009070 <_dtoa_r+0x4f8>
 8008fbe:	4b82      	ldr	r3, [pc, #520]	; (80091c8 <_dtoa_r+0x650>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	4649      	mov	r1, r9
 8008fc6:	f7f7 f95f 	bl	8000288 <__aeabi_dsub>
 8008fca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008fce:	4680      	mov	r8, r0
 8008fd0:	4689      	mov	r9, r1
 8008fd2:	f7f7 fda1 	bl	8000b18 <__aeabi_dcmpgt>
 8008fd6:	2800      	cmp	r0, #0
 8008fd8:	f040 8296 	bne.w	8009508 <_dtoa_r+0x990>
 8008fdc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008fe0:	4640      	mov	r0, r8
 8008fe2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008fe6:	4649      	mov	r1, r9
 8008fe8:	f7f7 fd78 	bl	8000adc <__aeabi_dcmplt>
 8008fec:	2800      	cmp	r0, #0
 8008fee:	f040 8289 	bne.w	8009504 <_dtoa_r+0x98c>
 8008ff2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008ff6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	f2c0 814e 	blt.w	800929a <_dtoa_r+0x722>
 8008ffe:	f1bb 0f0e 	cmp.w	fp, #14
 8009002:	f300 814a 	bgt.w	800929a <_dtoa_r+0x722>
 8009006:	4b6b      	ldr	r3, [pc, #428]	; (80091b4 <_dtoa_r+0x63c>)
 8009008:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800900c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009010:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009012:	2b00      	cmp	r3, #0
 8009014:	f280 80dc 	bge.w	80091d0 <_dtoa_r+0x658>
 8009018:	9b04      	ldr	r3, [sp, #16]
 800901a:	2b00      	cmp	r3, #0
 800901c:	f300 80d8 	bgt.w	80091d0 <_dtoa_r+0x658>
 8009020:	f040 826f 	bne.w	8009502 <_dtoa_r+0x98a>
 8009024:	4b68      	ldr	r3, [pc, #416]	; (80091c8 <_dtoa_r+0x650>)
 8009026:	2200      	movs	r2, #0
 8009028:	4640      	mov	r0, r8
 800902a:	4649      	mov	r1, r9
 800902c:	f7f7 fae4 	bl	80005f8 <__aeabi_dmul>
 8009030:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009034:	f7f7 fd66 	bl	8000b04 <__aeabi_dcmpge>
 8009038:	9e04      	ldr	r6, [sp, #16]
 800903a:	4637      	mov	r7, r6
 800903c:	2800      	cmp	r0, #0
 800903e:	f040 8245 	bne.w	80094cc <_dtoa_r+0x954>
 8009042:	9d00      	ldr	r5, [sp, #0]
 8009044:	2331      	movs	r3, #49	; 0x31
 8009046:	f805 3b01 	strb.w	r3, [r5], #1
 800904a:	f10b 0b01 	add.w	fp, fp, #1
 800904e:	e241      	b.n	80094d4 <_dtoa_r+0x95c>
 8009050:	07f2      	lsls	r2, r6, #31
 8009052:	d505      	bpl.n	8009060 <_dtoa_r+0x4e8>
 8009054:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009058:	f7f7 face 	bl	80005f8 <__aeabi_dmul>
 800905c:	3501      	adds	r5, #1
 800905e:	2301      	movs	r3, #1
 8009060:	1076      	asrs	r6, r6, #1
 8009062:	3708      	adds	r7, #8
 8009064:	e773      	b.n	8008f4e <_dtoa_r+0x3d6>
 8009066:	2502      	movs	r5, #2
 8009068:	e775      	b.n	8008f56 <_dtoa_r+0x3de>
 800906a:	9e04      	ldr	r6, [sp, #16]
 800906c:	465f      	mov	r7, fp
 800906e:	e792      	b.n	8008f96 <_dtoa_r+0x41e>
 8009070:	9900      	ldr	r1, [sp, #0]
 8009072:	4b50      	ldr	r3, [pc, #320]	; (80091b4 <_dtoa_r+0x63c>)
 8009074:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009078:	4431      	add	r1, r6
 800907a:	9102      	str	r1, [sp, #8]
 800907c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800907e:	eeb0 9a47 	vmov.f32	s18, s14
 8009082:	eef0 9a67 	vmov.f32	s19, s15
 8009086:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800908a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800908e:	2900      	cmp	r1, #0
 8009090:	d044      	beq.n	800911c <_dtoa_r+0x5a4>
 8009092:	494e      	ldr	r1, [pc, #312]	; (80091cc <_dtoa_r+0x654>)
 8009094:	2000      	movs	r0, #0
 8009096:	f7f7 fbd9 	bl	800084c <__aeabi_ddiv>
 800909a:	ec53 2b19 	vmov	r2, r3, d9
 800909e:	f7f7 f8f3 	bl	8000288 <__aeabi_dsub>
 80090a2:	9d00      	ldr	r5, [sp, #0]
 80090a4:	ec41 0b19 	vmov	d9, r0, r1
 80090a8:	4649      	mov	r1, r9
 80090aa:	4640      	mov	r0, r8
 80090ac:	f7f7 fd54 	bl	8000b58 <__aeabi_d2iz>
 80090b0:	4606      	mov	r6, r0
 80090b2:	f7f7 fa37 	bl	8000524 <__aeabi_i2d>
 80090b6:	4602      	mov	r2, r0
 80090b8:	460b      	mov	r3, r1
 80090ba:	4640      	mov	r0, r8
 80090bc:	4649      	mov	r1, r9
 80090be:	f7f7 f8e3 	bl	8000288 <__aeabi_dsub>
 80090c2:	3630      	adds	r6, #48	; 0x30
 80090c4:	f805 6b01 	strb.w	r6, [r5], #1
 80090c8:	ec53 2b19 	vmov	r2, r3, d9
 80090cc:	4680      	mov	r8, r0
 80090ce:	4689      	mov	r9, r1
 80090d0:	f7f7 fd04 	bl	8000adc <__aeabi_dcmplt>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	d164      	bne.n	80091a2 <_dtoa_r+0x62a>
 80090d8:	4642      	mov	r2, r8
 80090da:	464b      	mov	r3, r9
 80090dc:	4937      	ldr	r1, [pc, #220]	; (80091bc <_dtoa_r+0x644>)
 80090de:	2000      	movs	r0, #0
 80090e0:	f7f7 f8d2 	bl	8000288 <__aeabi_dsub>
 80090e4:	ec53 2b19 	vmov	r2, r3, d9
 80090e8:	f7f7 fcf8 	bl	8000adc <__aeabi_dcmplt>
 80090ec:	2800      	cmp	r0, #0
 80090ee:	f040 80b6 	bne.w	800925e <_dtoa_r+0x6e6>
 80090f2:	9b02      	ldr	r3, [sp, #8]
 80090f4:	429d      	cmp	r5, r3
 80090f6:	f43f af7c 	beq.w	8008ff2 <_dtoa_r+0x47a>
 80090fa:	4b31      	ldr	r3, [pc, #196]	; (80091c0 <_dtoa_r+0x648>)
 80090fc:	ec51 0b19 	vmov	r0, r1, d9
 8009100:	2200      	movs	r2, #0
 8009102:	f7f7 fa79 	bl	80005f8 <__aeabi_dmul>
 8009106:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <_dtoa_r+0x648>)
 8009108:	ec41 0b19 	vmov	d9, r0, r1
 800910c:	2200      	movs	r2, #0
 800910e:	4640      	mov	r0, r8
 8009110:	4649      	mov	r1, r9
 8009112:	f7f7 fa71 	bl	80005f8 <__aeabi_dmul>
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	e7c5      	b.n	80090a8 <_dtoa_r+0x530>
 800911c:	ec51 0b17 	vmov	r0, r1, d7
 8009120:	f7f7 fa6a 	bl	80005f8 <__aeabi_dmul>
 8009124:	9b02      	ldr	r3, [sp, #8]
 8009126:	9d00      	ldr	r5, [sp, #0]
 8009128:	930f      	str	r3, [sp, #60]	; 0x3c
 800912a:	ec41 0b19 	vmov	d9, r0, r1
 800912e:	4649      	mov	r1, r9
 8009130:	4640      	mov	r0, r8
 8009132:	f7f7 fd11 	bl	8000b58 <__aeabi_d2iz>
 8009136:	4606      	mov	r6, r0
 8009138:	f7f7 f9f4 	bl	8000524 <__aeabi_i2d>
 800913c:	3630      	adds	r6, #48	; 0x30
 800913e:	4602      	mov	r2, r0
 8009140:	460b      	mov	r3, r1
 8009142:	4640      	mov	r0, r8
 8009144:	4649      	mov	r1, r9
 8009146:	f7f7 f89f 	bl	8000288 <__aeabi_dsub>
 800914a:	f805 6b01 	strb.w	r6, [r5], #1
 800914e:	9b02      	ldr	r3, [sp, #8]
 8009150:	429d      	cmp	r5, r3
 8009152:	4680      	mov	r8, r0
 8009154:	4689      	mov	r9, r1
 8009156:	f04f 0200 	mov.w	r2, #0
 800915a:	d124      	bne.n	80091a6 <_dtoa_r+0x62e>
 800915c:	4b1b      	ldr	r3, [pc, #108]	; (80091cc <_dtoa_r+0x654>)
 800915e:	ec51 0b19 	vmov	r0, r1, d9
 8009162:	f7f7 f893 	bl	800028c <__adddf3>
 8009166:	4602      	mov	r2, r0
 8009168:	460b      	mov	r3, r1
 800916a:	4640      	mov	r0, r8
 800916c:	4649      	mov	r1, r9
 800916e:	f7f7 fcd3 	bl	8000b18 <__aeabi_dcmpgt>
 8009172:	2800      	cmp	r0, #0
 8009174:	d173      	bne.n	800925e <_dtoa_r+0x6e6>
 8009176:	ec53 2b19 	vmov	r2, r3, d9
 800917a:	4914      	ldr	r1, [pc, #80]	; (80091cc <_dtoa_r+0x654>)
 800917c:	2000      	movs	r0, #0
 800917e:	f7f7 f883 	bl	8000288 <__aeabi_dsub>
 8009182:	4602      	mov	r2, r0
 8009184:	460b      	mov	r3, r1
 8009186:	4640      	mov	r0, r8
 8009188:	4649      	mov	r1, r9
 800918a:	f7f7 fca7 	bl	8000adc <__aeabi_dcmplt>
 800918e:	2800      	cmp	r0, #0
 8009190:	f43f af2f 	beq.w	8008ff2 <_dtoa_r+0x47a>
 8009194:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009196:	1e6b      	subs	r3, r5, #1
 8009198:	930f      	str	r3, [sp, #60]	; 0x3c
 800919a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800919e:	2b30      	cmp	r3, #48	; 0x30
 80091a0:	d0f8      	beq.n	8009194 <_dtoa_r+0x61c>
 80091a2:	46bb      	mov	fp, r7
 80091a4:	e04a      	b.n	800923c <_dtoa_r+0x6c4>
 80091a6:	4b06      	ldr	r3, [pc, #24]	; (80091c0 <_dtoa_r+0x648>)
 80091a8:	f7f7 fa26 	bl	80005f8 <__aeabi_dmul>
 80091ac:	4680      	mov	r8, r0
 80091ae:	4689      	mov	r9, r1
 80091b0:	e7bd      	b.n	800912e <_dtoa_r+0x5b6>
 80091b2:	bf00      	nop
 80091b4:	0800ad50 	.word	0x0800ad50
 80091b8:	0800ad28 	.word	0x0800ad28
 80091bc:	3ff00000 	.word	0x3ff00000
 80091c0:	40240000 	.word	0x40240000
 80091c4:	401c0000 	.word	0x401c0000
 80091c8:	40140000 	.word	0x40140000
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80091d4:	9d00      	ldr	r5, [sp, #0]
 80091d6:	4642      	mov	r2, r8
 80091d8:	464b      	mov	r3, r9
 80091da:	4630      	mov	r0, r6
 80091dc:	4639      	mov	r1, r7
 80091de:	f7f7 fb35 	bl	800084c <__aeabi_ddiv>
 80091e2:	f7f7 fcb9 	bl	8000b58 <__aeabi_d2iz>
 80091e6:	9001      	str	r0, [sp, #4]
 80091e8:	f7f7 f99c 	bl	8000524 <__aeabi_i2d>
 80091ec:	4642      	mov	r2, r8
 80091ee:	464b      	mov	r3, r9
 80091f0:	f7f7 fa02 	bl	80005f8 <__aeabi_dmul>
 80091f4:	4602      	mov	r2, r0
 80091f6:	460b      	mov	r3, r1
 80091f8:	4630      	mov	r0, r6
 80091fa:	4639      	mov	r1, r7
 80091fc:	f7f7 f844 	bl	8000288 <__aeabi_dsub>
 8009200:	9e01      	ldr	r6, [sp, #4]
 8009202:	9f04      	ldr	r7, [sp, #16]
 8009204:	3630      	adds	r6, #48	; 0x30
 8009206:	f805 6b01 	strb.w	r6, [r5], #1
 800920a:	9e00      	ldr	r6, [sp, #0]
 800920c:	1bae      	subs	r6, r5, r6
 800920e:	42b7      	cmp	r7, r6
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	d134      	bne.n	8009280 <_dtoa_r+0x708>
 8009216:	f7f7 f839 	bl	800028c <__adddf3>
 800921a:	4642      	mov	r2, r8
 800921c:	464b      	mov	r3, r9
 800921e:	4606      	mov	r6, r0
 8009220:	460f      	mov	r7, r1
 8009222:	f7f7 fc79 	bl	8000b18 <__aeabi_dcmpgt>
 8009226:	b9c8      	cbnz	r0, 800925c <_dtoa_r+0x6e4>
 8009228:	4642      	mov	r2, r8
 800922a:	464b      	mov	r3, r9
 800922c:	4630      	mov	r0, r6
 800922e:	4639      	mov	r1, r7
 8009230:	f7f7 fc4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009234:	b110      	cbz	r0, 800923c <_dtoa_r+0x6c4>
 8009236:	9b01      	ldr	r3, [sp, #4]
 8009238:	07db      	lsls	r3, r3, #31
 800923a:	d40f      	bmi.n	800925c <_dtoa_r+0x6e4>
 800923c:	4651      	mov	r1, sl
 800923e:	4620      	mov	r0, r4
 8009240:	f000 fbcc 	bl	80099dc <_Bfree>
 8009244:	2300      	movs	r3, #0
 8009246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009248:	702b      	strb	r3, [r5, #0]
 800924a:	f10b 0301 	add.w	r3, fp, #1
 800924e:	6013      	str	r3, [r2, #0]
 8009250:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009252:	2b00      	cmp	r3, #0
 8009254:	f43f ace2 	beq.w	8008c1c <_dtoa_r+0xa4>
 8009258:	601d      	str	r5, [r3, #0]
 800925a:	e4df      	b.n	8008c1c <_dtoa_r+0xa4>
 800925c:	465f      	mov	r7, fp
 800925e:	462b      	mov	r3, r5
 8009260:	461d      	mov	r5, r3
 8009262:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009266:	2a39      	cmp	r2, #57	; 0x39
 8009268:	d106      	bne.n	8009278 <_dtoa_r+0x700>
 800926a:	9a00      	ldr	r2, [sp, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d1f7      	bne.n	8009260 <_dtoa_r+0x6e8>
 8009270:	9900      	ldr	r1, [sp, #0]
 8009272:	2230      	movs	r2, #48	; 0x30
 8009274:	3701      	adds	r7, #1
 8009276:	700a      	strb	r2, [r1, #0]
 8009278:	781a      	ldrb	r2, [r3, #0]
 800927a:	3201      	adds	r2, #1
 800927c:	701a      	strb	r2, [r3, #0]
 800927e:	e790      	b.n	80091a2 <_dtoa_r+0x62a>
 8009280:	4ba3      	ldr	r3, [pc, #652]	; (8009510 <_dtoa_r+0x998>)
 8009282:	2200      	movs	r2, #0
 8009284:	f7f7 f9b8 	bl	80005f8 <__aeabi_dmul>
 8009288:	2200      	movs	r2, #0
 800928a:	2300      	movs	r3, #0
 800928c:	4606      	mov	r6, r0
 800928e:	460f      	mov	r7, r1
 8009290:	f7f7 fc1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009294:	2800      	cmp	r0, #0
 8009296:	d09e      	beq.n	80091d6 <_dtoa_r+0x65e>
 8009298:	e7d0      	b.n	800923c <_dtoa_r+0x6c4>
 800929a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800929c:	2a00      	cmp	r2, #0
 800929e:	f000 80ca 	beq.w	8009436 <_dtoa_r+0x8be>
 80092a2:	9a07      	ldr	r2, [sp, #28]
 80092a4:	2a01      	cmp	r2, #1
 80092a6:	f300 80ad 	bgt.w	8009404 <_dtoa_r+0x88c>
 80092aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80092ac:	2a00      	cmp	r2, #0
 80092ae:	f000 80a5 	beq.w	80093fc <_dtoa_r+0x884>
 80092b2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80092b6:	9e08      	ldr	r6, [sp, #32]
 80092b8:	9d05      	ldr	r5, [sp, #20]
 80092ba:	9a05      	ldr	r2, [sp, #20]
 80092bc:	441a      	add	r2, r3
 80092be:	9205      	str	r2, [sp, #20]
 80092c0:	9a06      	ldr	r2, [sp, #24]
 80092c2:	2101      	movs	r1, #1
 80092c4:	441a      	add	r2, r3
 80092c6:	4620      	mov	r0, r4
 80092c8:	9206      	str	r2, [sp, #24]
 80092ca:	f000 fc3d 	bl	8009b48 <__i2b>
 80092ce:	4607      	mov	r7, r0
 80092d0:	b165      	cbz	r5, 80092ec <_dtoa_r+0x774>
 80092d2:	9b06      	ldr	r3, [sp, #24]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	dd09      	ble.n	80092ec <_dtoa_r+0x774>
 80092d8:	42ab      	cmp	r3, r5
 80092da:	9a05      	ldr	r2, [sp, #20]
 80092dc:	bfa8      	it	ge
 80092de:	462b      	movge	r3, r5
 80092e0:	1ad2      	subs	r2, r2, r3
 80092e2:	9205      	str	r2, [sp, #20]
 80092e4:	9a06      	ldr	r2, [sp, #24]
 80092e6:	1aed      	subs	r5, r5, r3
 80092e8:	1ad3      	subs	r3, r2, r3
 80092ea:	9306      	str	r3, [sp, #24]
 80092ec:	9b08      	ldr	r3, [sp, #32]
 80092ee:	b1f3      	cbz	r3, 800932e <_dtoa_r+0x7b6>
 80092f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	f000 80a3 	beq.w	800943e <_dtoa_r+0x8c6>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	dd10      	ble.n	800931e <_dtoa_r+0x7a6>
 80092fc:	4639      	mov	r1, r7
 80092fe:	4632      	mov	r2, r6
 8009300:	4620      	mov	r0, r4
 8009302:	f000 fce1 	bl	8009cc8 <__pow5mult>
 8009306:	4652      	mov	r2, sl
 8009308:	4601      	mov	r1, r0
 800930a:	4607      	mov	r7, r0
 800930c:	4620      	mov	r0, r4
 800930e:	f000 fc31 	bl	8009b74 <__multiply>
 8009312:	4651      	mov	r1, sl
 8009314:	4680      	mov	r8, r0
 8009316:	4620      	mov	r0, r4
 8009318:	f000 fb60 	bl	80099dc <_Bfree>
 800931c:	46c2      	mov	sl, r8
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	1b9a      	subs	r2, r3, r6
 8009322:	d004      	beq.n	800932e <_dtoa_r+0x7b6>
 8009324:	4651      	mov	r1, sl
 8009326:	4620      	mov	r0, r4
 8009328:	f000 fcce 	bl	8009cc8 <__pow5mult>
 800932c:	4682      	mov	sl, r0
 800932e:	2101      	movs	r1, #1
 8009330:	4620      	mov	r0, r4
 8009332:	f000 fc09 	bl	8009b48 <__i2b>
 8009336:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009338:	2b00      	cmp	r3, #0
 800933a:	4606      	mov	r6, r0
 800933c:	f340 8081 	ble.w	8009442 <_dtoa_r+0x8ca>
 8009340:	461a      	mov	r2, r3
 8009342:	4601      	mov	r1, r0
 8009344:	4620      	mov	r0, r4
 8009346:	f000 fcbf 	bl	8009cc8 <__pow5mult>
 800934a:	9b07      	ldr	r3, [sp, #28]
 800934c:	2b01      	cmp	r3, #1
 800934e:	4606      	mov	r6, r0
 8009350:	dd7a      	ble.n	8009448 <_dtoa_r+0x8d0>
 8009352:	f04f 0800 	mov.w	r8, #0
 8009356:	6933      	ldr	r3, [r6, #16]
 8009358:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800935c:	6918      	ldr	r0, [r3, #16]
 800935e:	f000 fba5 	bl	8009aac <__hi0bits>
 8009362:	f1c0 0020 	rsb	r0, r0, #32
 8009366:	9b06      	ldr	r3, [sp, #24]
 8009368:	4418      	add	r0, r3
 800936a:	f010 001f 	ands.w	r0, r0, #31
 800936e:	f000 8094 	beq.w	800949a <_dtoa_r+0x922>
 8009372:	f1c0 0320 	rsb	r3, r0, #32
 8009376:	2b04      	cmp	r3, #4
 8009378:	f340 8085 	ble.w	8009486 <_dtoa_r+0x90e>
 800937c:	9b05      	ldr	r3, [sp, #20]
 800937e:	f1c0 001c 	rsb	r0, r0, #28
 8009382:	4403      	add	r3, r0
 8009384:	9305      	str	r3, [sp, #20]
 8009386:	9b06      	ldr	r3, [sp, #24]
 8009388:	4403      	add	r3, r0
 800938a:	4405      	add	r5, r0
 800938c:	9306      	str	r3, [sp, #24]
 800938e:	9b05      	ldr	r3, [sp, #20]
 8009390:	2b00      	cmp	r3, #0
 8009392:	dd05      	ble.n	80093a0 <_dtoa_r+0x828>
 8009394:	4651      	mov	r1, sl
 8009396:	461a      	mov	r2, r3
 8009398:	4620      	mov	r0, r4
 800939a:	f000 fcef 	bl	8009d7c <__lshift>
 800939e:	4682      	mov	sl, r0
 80093a0:	9b06      	ldr	r3, [sp, #24]
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	dd05      	ble.n	80093b2 <_dtoa_r+0x83a>
 80093a6:	4631      	mov	r1, r6
 80093a8:	461a      	mov	r2, r3
 80093aa:	4620      	mov	r0, r4
 80093ac:	f000 fce6 	bl	8009d7c <__lshift>
 80093b0:	4606      	mov	r6, r0
 80093b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d072      	beq.n	800949e <_dtoa_r+0x926>
 80093b8:	4631      	mov	r1, r6
 80093ba:	4650      	mov	r0, sl
 80093bc:	f000 fd4a 	bl	8009e54 <__mcmp>
 80093c0:	2800      	cmp	r0, #0
 80093c2:	da6c      	bge.n	800949e <_dtoa_r+0x926>
 80093c4:	2300      	movs	r3, #0
 80093c6:	4651      	mov	r1, sl
 80093c8:	220a      	movs	r2, #10
 80093ca:	4620      	mov	r0, r4
 80093cc:	f000 fb28 	bl	8009a20 <__multadd>
 80093d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093d6:	4682      	mov	sl, r0
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f000 81b0 	beq.w	800973e <_dtoa_r+0xbc6>
 80093de:	2300      	movs	r3, #0
 80093e0:	4639      	mov	r1, r7
 80093e2:	220a      	movs	r2, #10
 80093e4:	4620      	mov	r0, r4
 80093e6:	f000 fb1b 	bl	8009a20 <__multadd>
 80093ea:	9b01      	ldr	r3, [sp, #4]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	4607      	mov	r7, r0
 80093f0:	f300 8096 	bgt.w	8009520 <_dtoa_r+0x9a8>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	2b02      	cmp	r3, #2
 80093f8:	dc59      	bgt.n	80094ae <_dtoa_r+0x936>
 80093fa:	e091      	b.n	8009520 <_dtoa_r+0x9a8>
 80093fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80093fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009402:	e758      	b.n	80092b6 <_dtoa_r+0x73e>
 8009404:	9b04      	ldr	r3, [sp, #16]
 8009406:	1e5e      	subs	r6, r3, #1
 8009408:	9b08      	ldr	r3, [sp, #32]
 800940a:	42b3      	cmp	r3, r6
 800940c:	bfbf      	itttt	lt
 800940e:	9b08      	ldrlt	r3, [sp, #32]
 8009410:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009412:	9608      	strlt	r6, [sp, #32]
 8009414:	1af3      	sublt	r3, r6, r3
 8009416:	bfb4      	ite	lt
 8009418:	18d2      	addlt	r2, r2, r3
 800941a:	1b9e      	subge	r6, r3, r6
 800941c:	9b04      	ldr	r3, [sp, #16]
 800941e:	bfbc      	itt	lt
 8009420:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009422:	2600      	movlt	r6, #0
 8009424:	2b00      	cmp	r3, #0
 8009426:	bfb7      	itett	lt
 8009428:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800942c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009430:	1a9d      	sublt	r5, r3, r2
 8009432:	2300      	movlt	r3, #0
 8009434:	e741      	b.n	80092ba <_dtoa_r+0x742>
 8009436:	9e08      	ldr	r6, [sp, #32]
 8009438:	9d05      	ldr	r5, [sp, #20]
 800943a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800943c:	e748      	b.n	80092d0 <_dtoa_r+0x758>
 800943e:	9a08      	ldr	r2, [sp, #32]
 8009440:	e770      	b.n	8009324 <_dtoa_r+0x7ac>
 8009442:	9b07      	ldr	r3, [sp, #28]
 8009444:	2b01      	cmp	r3, #1
 8009446:	dc19      	bgt.n	800947c <_dtoa_r+0x904>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	b9bb      	cbnz	r3, 800947c <_dtoa_r+0x904>
 800944c:	9b03      	ldr	r3, [sp, #12]
 800944e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009452:	b99b      	cbnz	r3, 800947c <_dtoa_r+0x904>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800945a:	0d1b      	lsrs	r3, r3, #20
 800945c:	051b      	lsls	r3, r3, #20
 800945e:	b183      	cbz	r3, 8009482 <_dtoa_r+0x90a>
 8009460:	9b05      	ldr	r3, [sp, #20]
 8009462:	3301      	adds	r3, #1
 8009464:	9305      	str	r3, [sp, #20]
 8009466:	9b06      	ldr	r3, [sp, #24]
 8009468:	3301      	adds	r3, #1
 800946a:	9306      	str	r3, [sp, #24]
 800946c:	f04f 0801 	mov.w	r8, #1
 8009470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009472:	2b00      	cmp	r3, #0
 8009474:	f47f af6f 	bne.w	8009356 <_dtoa_r+0x7de>
 8009478:	2001      	movs	r0, #1
 800947a:	e774      	b.n	8009366 <_dtoa_r+0x7ee>
 800947c:	f04f 0800 	mov.w	r8, #0
 8009480:	e7f6      	b.n	8009470 <_dtoa_r+0x8f8>
 8009482:	4698      	mov	r8, r3
 8009484:	e7f4      	b.n	8009470 <_dtoa_r+0x8f8>
 8009486:	d082      	beq.n	800938e <_dtoa_r+0x816>
 8009488:	9a05      	ldr	r2, [sp, #20]
 800948a:	331c      	adds	r3, #28
 800948c:	441a      	add	r2, r3
 800948e:	9205      	str	r2, [sp, #20]
 8009490:	9a06      	ldr	r2, [sp, #24]
 8009492:	441a      	add	r2, r3
 8009494:	441d      	add	r5, r3
 8009496:	9206      	str	r2, [sp, #24]
 8009498:	e779      	b.n	800938e <_dtoa_r+0x816>
 800949a:	4603      	mov	r3, r0
 800949c:	e7f4      	b.n	8009488 <_dtoa_r+0x910>
 800949e:	9b04      	ldr	r3, [sp, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	dc37      	bgt.n	8009514 <_dtoa_r+0x99c>
 80094a4:	9b07      	ldr	r3, [sp, #28]
 80094a6:	2b02      	cmp	r3, #2
 80094a8:	dd34      	ble.n	8009514 <_dtoa_r+0x99c>
 80094aa:	9b04      	ldr	r3, [sp, #16]
 80094ac:	9301      	str	r3, [sp, #4]
 80094ae:	9b01      	ldr	r3, [sp, #4]
 80094b0:	b963      	cbnz	r3, 80094cc <_dtoa_r+0x954>
 80094b2:	4631      	mov	r1, r6
 80094b4:	2205      	movs	r2, #5
 80094b6:	4620      	mov	r0, r4
 80094b8:	f000 fab2 	bl	8009a20 <__multadd>
 80094bc:	4601      	mov	r1, r0
 80094be:	4606      	mov	r6, r0
 80094c0:	4650      	mov	r0, sl
 80094c2:	f000 fcc7 	bl	8009e54 <__mcmp>
 80094c6:	2800      	cmp	r0, #0
 80094c8:	f73f adbb 	bgt.w	8009042 <_dtoa_r+0x4ca>
 80094cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094ce:	9d00      	ldr	r5, [sp, #0]
 80094d0:	ea6f 0b03 	mvn.w	fp, r3
 80094d4:	f04f 0800 	mov.w	r8, #0
 80094d8:	4631      	mov	r1, r6
 80094da:	4620      	mov	r0, r4
 80094dc:	f000 fa7e 	bl	80099dc <_Bfree>
 80094e0:	2f00      	cmp	r7, #0
 80094e2:	f43f aeab 	beq.w	800923c <_dtoa_r+0x6c4>
 80094e6:	f1b8 0f00 	cmp.w	r8, #0
 80094ea:	d005      	beq.n	80094f8 <_dtoa_r+0x980>
 80094ec:	45b8      	cmp	r8, r7
 80094ee:	d003      	beq.n	80094f8 <_dtoa_r+0x980>
 80094f0:	4641      	mov	r1, r8
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fa72 	bl	80099dc <_Bfree>
 80094f8:	4639      	mov	r1, r7
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 fa6e 	bl	80099dc <_Bfree>
 8009500:	e69c      	b.n	800923c <_dtoa_r+0x6c4>
 8009502:	2600      	movs	r6, #0
 8009504:	4637      	mov	r7, r6
 8009506:	e7e1      	b.n	80094cc <_dtoa_r+0x954>
 8009508:	46bb      	mov	fp, r7
 800950a:	4637      	mov	r7, r6
 800950c:	e599      	b.n	8009042 <_dtoa_r+0x4ca>
 800950e:	bf00      	nop
 8009510:	40240000 	.word	0x40240000
 8009514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009516:	2b00      	cmp	r3, #0
 8009518:	f000 80c8 	beq.w	80096ac <_dtoa_r+0xb34>
 800951c:	9b04      	ldr	r3, [sp, #16]
 800951e:	9301      	str	r3, [sp, #4]
 8009520:	2d00      	cmp	r5, #0
 8009522:	dd05      	ble.n	8009530 <_dtoa_r+0x9b8>
 8009524:	4639      	mov	r1, r7
 8009526:	462a      	mov	r2, r5
 8009528:	4620      	mov	r0, r4
 800952a:	f000 fc27 	bl	8009d7c <__lshift>
 800952e:	4607      	mov	r7, r0
 8009530:	f1b8 0f00 	cmp.w	r8, #0
 8009534:	d05b      	beq.n	80095ee <_dtoa_r+0xa76>
 8009536:	6879      	ldr	r1, [r7, #4]
 8009538:	4620      	mov	r0, r4
 800953a:	f000 fa0f 	bl	800995c <_Balloc>
 800953e:	4605      	mov	r5, r0
 8009540:	b928      	cbnz	r0, 800954e <_dtoa_r+0x9d6>
 8009542:	4b83      	ldr	r3, [pc, #524]	; (8009750 <_dtoa_r+0xbd8>)
 8009544:	4602      	mov	r2, r0
 8009546:	f240 21ef 	movw	r1, #751	; 0x2ef
 800954a:	f7ff bb2e 	b.w	8008baa <_dtoa_r+0x32>
 800954e:	693a      	ldr	r2, [r7, #16]
 8009550:	3202      	adds	r2, #2
 8009552:	0092      	lsls	r2, r2, #2
 8009554:	f107 010c 	add.w	r1, r7, #12
 8009558:	300c      	adds	r0, #12
 800955a:	f000 ffab 	bl	800a4b4 <memcpy>
 800955e:	2201      	movs	r2, #1
 8009560:	4629      	mov	r1, r5
 8009562:	4620      	mov	r0, r4
 8009564:	f000 fc0a 	bl	8009d7c <__lshift>
 8009568:	9b00      	ldr	r3, [sp, #0]
 800956a:	3301      	adds	r3, #1
 800956c:	9304      	str	r3, [sp, #16]
 800956e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009572:	4413      	add	r3, r2
 8009574:	9308      	str	r3, [sp, #32]
 8009576:	9b02      	ldr	r3, [sp, #8]
 8009578:	f003 0301 	and.w	r3, r3, #1
 800957c:	46b8      	mov	r8, r7
 800957e:	9306      	str	r3, [sp, #24]
 8009580:	4607      	mov	r7, r0
 8009582:	9b04      	ldr	r3, [sp, #16]
 8009584:	4631      	mov	r1, r6
 8009586:	3b01      	subs	r3, #1
 8009588:	4650      	mov	r0, sl
 800958a:	9301      	str	r3, [sp, #4]
 800958c:	f7ff fa69 	bl	8008a62 <quorem>
 8009590:	4641      	mov	r1, r8
 8009592:	9002      	str	r0, [sp, #8]
 8009594:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009598:	4650      	mov	r0, sl
 800959a:	f000 fc5b 	bl	8009e54 <__mcmp>
 800959e:	463a      	mov	r2, r7
 80095a0:	9005      	str	r0, [sp, #20]
 80095a2:	4631      	mov	r1, r6
 80095a4:	4620      	mov	r0, r4
 80095a6:	f000 fc71 	bl	8009e8c <__mdiff>
 80095aa:	68c2      	ldr	r2, [r0, #12]
 80095ac:	4605      	mov	r5, r0
 80095ae:	bb02      	cbnz	r2, 80095f2 <_dtoa_r+0xa7a>
 80095b0:	4601      	mov	r1, r0
 80095b2:	4650      	mov	r0, sl
 80095b4:	f000 fc4e 	bl	8009e54 <__mcmp>
 80095b8:	4602      	mov	r2, r0
 80095ba:	4629      	mov	r1, r5
 80095bc:	4620      	mov	r0, r4
 80095be:	9209      	str	r2, [sp, #36]	; 0x24
 80095c0:	f000 fa0c 	bl	80099dc <_Bfree>
 80095c4:	9b07      	ldr	r3, [sp, #28]
 80095c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80095c8:	9d04      	ldr	r5, [sp, #16]
 80095ca:	ea43 0102 	orr.w	r1, r3, r2
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	4319      	orrs	r1, r3
 80095d2:	d110      	bne.n	80095f6 <_dtoa_r+0xa7e>
 80095d4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80095d8:	d029      	beq.n	800962e <_dtoa_r+0xab6>
 80095da:	9b05      	ldr	r3, [sp, #20]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	dd02      	ble.n	80095e6 <_dtoa_r+0xa6e>
 80095e0:	9b02      	ldr	r3, [sp, #8]
 80095e2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	f883 9000 	strb.w	r9, [r3]
 80095ec:	e774      	b.n	80094d8 <_dtoa_r+0x960>
 80095ee:	4638      	mov	r0, r7
 80095f0:	e7ba      	b.n	8009568 <_dtoa_r+0x9f0>
 80095f2:	2201      	movs	r2, #1
 80095f4:	e7e1      	b.n	80095ba <_dtoa_r+0xa42>
 80095f6:	9b05      	ldr	r3, [sp, #20]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	db04      	blt.n	8009606 <_dtoa_r+0xa8e>
 80095fc:	9907      	ldr	r1, [sp, #28]
 80095fe:	430b      	orrs	r3, r1
 8009600:	9906      	ldr	r1, [sp, #24]
 8009602:	430b      	orrs	r3, r1
 8009604:	d120      	bne.n	8009648 <_dtoa_r+0xad0>
 8009606:	2a00      	cmp	r2, #0
 8009608:	dded      	ble.n	80095e6 <_dtoa_r+0xa6e>
 800960a:	4651      	mov	r1, sl
 800960c:	2201      	movs	r2, #1
 800960e:	4620      	mov	r0, r4
 8009610:	f000 fbb4 	bl	8009d7c <__lshift>
 8009614:	4631      	mov	r1, r6
 8009616:	4682      	mov	sl, r0
 8009618:	f000 fc1c 	bl	8009e54 <__mcmp>
 800961c:	2800      	cmp	r0, #0
 800961e:	dc03      	bgt.n	8009628 <_dtoa_r+0xab0>
 8009620:	d1e1      	bne.n	80095e6 <_dtoa_r+0xa6e>
 8009622:	f019 0f01 	tst.w	r9, #1
 8009626:	d0de      	beq.n	80095e6 <_dtoa_r+0xa6e>
 8009628:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800962c:	d1d8      	bne.n	80095e0 <_dtoa_r+0xa68>
 800962e:	9a01      	ldr	r2, [sp, #4]
 8009630:	2339      	movs	r3, #57	; 0x39
 8009632:	7013      	strb	r3, [r2, #0]
 8009634:	462b      	mov	r3, r5
 8009636:	461d      	mov	r5, r3
 8009638:	3b01      	subs	r3, #1
 800963a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800963e:	2a39      	cmp	r2, #57	; 0x39
 8009640:	d06c      	beq.n	800971c <_dtoa_r+0xba4>
 8009642:	3201      	adds	r2, #1
 8009644:	701a      	strb	r2, [r3, #0]
 8009646:	e747      	b.n	80094d8 <_dtoa_r+0x960>
 8009648:	2a00      	cmp	r2, #0
 800964a:	dd07      	ble.n	800965c <_dtoa_r+0xae4>
 800964c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009650:	d0ed      	beq.n	800962e <_dtoa_r+0xab6>
 8009652:	9a01      	ldr	r2, [sp, #4]
 8009654:	f109 0301 	add.w	r3, r9, #1
 8009658:	7013      	strb	r3, [r2, #0]
 800965a:	e73d      	b.n	80094d8 <_dtoa_r+0x960>
 800965c:	9b04      	ldr	r3, [sp, #16]
 800965e:	9a08      	ldr	r2, [sp, #32]
 8009660:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009664:	4293      	cmp	r3, r2
 8009666:	d043      	beq.n	80096f0 <_dtoa_r+0xb78>
 8009668:	4651      	mov	r1, sl
 800966a:	2300      	movs	r3, #0
 800966c:	220a      	movs	r2, #10
 800966e:	4620      	mov	r0, r4
 8009670:	f000 f9d6 	bl	8009a20 <__multadd>
 8009674:	45b8      	cmp	r8, r7
 8009676:	4682      	mov	sl, r0
 8009678:	f04f 0300 	mov.w	r3, #0
 800967c:	f04f 020a 	mov.w	r2, #10
 8009680:	4641      	mov	r1, r8
 8009682:	4620      	mov	r0, r4
 8009684:	d107      	bne.n	8009696 <_dtoa_r+0xb1e>
 8009686:	f000 f9cb 	bl	8009a20 <__multadd>
 800968a:	4680      	mov	r8, r0
 800968c:	4607      	mov	r7, r0
 800968e:	9b04      	ldr	r3, [sp, #16]
 8009690:	3301      	adds	r3, #1
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	e775      	b.n	8009582 <_dtoa_r+0xa0a>
 8009696:	f000 f9c3 	bl	8009a20 <__multadd>
 800969a:	4639      	mov	r1, r7
 800969c:	4680      	mov	r8, r0
 800969e:	2300      	movs	r3, #0
 80096a0:	220a      	movs	r2, #10
 80096a2:	4620      	mov	r0, r4
 80096a4:	f000 f9bc 	bl	8009a20 <__multadd>
 80096a8:	4607      	mov	r7, r0
 80096aa:	e7f0      	b.n	800968e <_dtoa_r+0xb16>
 80096ac:	9b04      	ldr	r3, [sp, #16]
 80096ae:	9301      	str	r3, [sp, #4]
 80096b0:	9d00      	ldr	r5, [sp, #0]
 80096b2:	4631      	mov	r1, r6
 80096b4:	4650      	mov	r0, sl
 80096b6:	f7ff f9d4 	bl	8008a62 <quorem>
 80096ba:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096be:	9b00      	ldr	r3, [sp, #0]
 80096c0:	f805 9b01 	strb.w	r9, [r5], #1
 80096c4:	1aea      	subs	r2, r5, r3
 80096c6:	9b01      	ldr	r3, [sp, #4]
 80096c8:	4293      	cmp	r3, r2
 80096ca:	dd07      	ble.n	80096dc <_dtoa_r+0xb64>
 80096cc:	4651      	mov	r1, sl
 80096ce:	2300      	movs	r3, #0
 80096d0:	220a      	movs	r2, #10
 80096d2:	4620      	mov	r0, r4
 80096d4:	f000 f9a4 	bl	8009a20 <__multadd>
 80096d8:	4682      	mov	sl, r0
 80096da:	e7ea      	b.n	80096b2 <_dtoa_r+0xb3a>
 80096dc:	9b01      	ldr	r3, [sp, #4]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	bfc8      	it	gt
 80096e2:	461d      	movgt	r5, r3
 80096e4:	9b00      	ldr	r3, [sp, #0]
 80096e6:	bfd8      	it	le
 80096e8:	2501      	movle	r5, #1
 80096ea:	441d      	add	r5, r3
 80096ec:	f04f 0800 	mov.w	r8, #0
 80096f0:	4651      	mov	r1, sl
 80096f2:	2201      	movs	r2, #1
 80096f4:	4620      	mov	r0, r4
 80096f6:	f000 fb41 	bl	8009d7c <__lshift>
 80096fa:	4631      	mov	r1, r6
 80096fc:	4682      	mov	sl, r0
 80096fe:	f000 fba9 	bl	8009e54 <__mcmp>
 8009702:	2800      	cmp	r0, #0
 8009704:	dc96      	bgt.n	8009634 <_dtoa_r+0xabc>
 8009706:	d102      	bne.n	800970e <_dtoa_r+0xb96>
 8009708:	f019 0f01 	tst.w	r9, #1
 800970c:	d192      	bne.n	8009634 <_dtoa_r+0xabc>
 800970e:	462b      	mov	r3, r5
 8009710:	461d      	mov	r5, r3
 8009712:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009716:	2a30      	cmp	r2, #48	; 0x30
 8009718:	d0fa      	beq.n	8009710 <_dtoa_r+0xb98>
 800971a:	e6dd      	b.n	80094d8 <_dtoa_r+0x960>
 800971c:	9a00      	ldr	r2, [sp, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d189      	bne.n	8009636 <_dtoa_r+0xabe>
 8009722:	f10b 0b01 	add.w	fp, fp, #1
 8009726:	2331      	movs	r3, #49	; 0x31
 8009728:	e796      	b.n	8009658 <_dtoa_r+0xae0>
 800972a:	4b0a      	ldr	r3, [pc, #40]	; (8009754 <_dtoa_r+0xbdc>)
 800972c:	f7ff ba99 	b.w	8008c62 <_dtoa_r+0xea>
 8009730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009732:	2b00      	cmp	r3, #0
 8009734:	f47f aa6d 	bne.w	8008c12 <_dtoa_r+0x9a>
 8009738:	4b07      	ldr	r3, [pc, #28]	; (8009758 <_dtoa_r+0xbe0>)
 800973a:	f7ff ba92 	b.w	8008c62 <_dtoa_r+0xea>
 800973e:	9b01      	ldr	r3, [sp, #4]
 8009740:	2b00      	cmp	r3, #0
 8009742:	dcb5      	bgt.n	80096b0 <_dtoa_r+0xb38>
 8009744:	9b07      	ldr	r3, [sp, #28]
 8009746:	2b02      	cmp	r3, #2
 8009748:	f73f aeb1 	bgt.w	80094ae <_dtoa_r+0x936>
 800974c:	e7b0      	b.n	80096b0 <_dtoa_r+0xb38>
 800974e:	bf00      	nop
 8009750:	0800acb8 	.word	0x0800acb8
 8009754:	0800ac18 	.word	0x0800ac18
 8009758:	0800ac3c 	.word	0x0800ac3c

0800975c <_free_r>:
 800975c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800975e:	2900      	cmp	r1, #0
 8009760:	d044      	beq.n	80097ec <_free_r+0x90>
 8009762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009766:	9001      	str	r0, [sp, #4]
 8009768:	2b00      	cmp	r3, #0
 800976a:	f1a1 0404 	sub.w	r4, r1, #4
 800976e:	bfb8      	it	lt
 8009770:	18e4      	addlt	r4, r4, r3
 8009772:	f000 f8e7 	bl	8009944 <__malloc_lock>
 8009776:	4a1e      	ldr	r2, [pc, #120]	; (80097f0 <_free_r+0x94>)
 8009778:	9801      	ldr	r0, [sp, #4]
 800977a:	6813      	ldr	r3, [r2, #0]
 800977c:	b933      	cbnz	r3, 800978c <_free_r+0x30>
 800977e:	6063      	str	r3, [r4, #4]
 8009780:	6014      	str	r4, [r2, #0]
 8009782:	b003      	add	sp, #12
 8009784:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009788:	f000 b8e2 	b.w	8009950 <__malloc_unlock>
 800978c:	42a3      	cmp	r3, r4
 800978e:	d908      	bls.n	80097a2 <_free_r+0x46>
 8009790:	6825      	ldr	r5, [r4, #0]
 8009792:	1961      	adds	r1, r4, r5
 8009794:	428b      	cmp	r3, r1
 8009796:	bf01      	itttt	eq
 8009798:	6819      	ldreq	r1, [r3, #0]
 800979a:	685b      	ldreq	r3, [r3, #4]
 800979c:	1949      	addeq	r1, r1, r5
 800979e:	6021      	streq	r1, [r4, #0]
 80097a0:	e7ed      	b.n	800977e <_free_r+0x22>
 80097a2:	461a      	mov	r2, r3
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	b10b      	cbz	r3, 80097ac <_free_r+0x50>
 80097a8:	42a3      	cmp	r3, r4
 80097aa:	d9fa      	bls.n	80097a2 <_free_r+0x46>
 80097ac:	6811      	ldr	r1, [r2, #0]
 80097ae:	1855      	adds	r5, r2, r1
 80097b0:	42a5      	cmp	r5, r4
 80097b2:	d10b      	bne.n	80097cc <_free_r+0x70>
 80097b4:	6824      	ldr	r4, [r4, #0]
 80097b6:	4421      	add	r1, r4
 80097b8:	1854      	adds	r4, r2, r1
 80097ba:	42a3      	cmp	r3, r4
 80097bc:	6011      	str	r1, [r2, #0]
 80097be:	d1e0      	bne.n	8009782 <_free_r+0x26>
 80097c0:	681c      	ldr	r4, [r3, #0]
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	6053      	str	r3, [r2, #4]
 80097c6:	440c      	add	r4, r1
 80097c8:	6014      	str	r4, [r2, #0]
 80097ca:	e7da      	b.n	8009782 <_free_r+0x26>
 80097cc:	d902      	bls.n	80097d4 <_free_r+0x78>
 80097ce:	230c      	movs	r3, #12
 80097d0:	6003      	str	r3, [r0, #0]
 80097d2:	e7d6      	b.n	8009782 <_free_r+0x26>
 80097d4:	6825      	ldr	r5, [r4, #0]
 80097d6:	1961      	adds	r1, r4, r5
 80097d8:	428b      	cmp	r3, r1
 80097da:	bf04      	itt	eq
 80097dc:	6819      	ldreq	r1, [r3, #0]
 80097de:	685b      	ldreq	r3, [r3, #4]
 80097e0:	6063      	str	r3, [r4, #4]
 80097e2:	bf04      	itt	eq
 80097e4:	1949      	addeq	r1, r1, r5
 80097e6:	6021      	streq	r1, [r4, #0]
 80097e8:	6054      	str	r4, [r2, #4]
 80097ea:	e7ca      	b.n	8009782 <_free_r+0x26>
 80097ec:	b003      	add	sp, #12
 80097ee:	bd30      	pop	{r4, r5, pc}
 80097f0:	200005ec 	.word	0x200005ec

080097f4 <malloc>:
 80097f4:	4b02      	ldr	r3, [pc, #8]	; (8009800 <malloc+0xc>)
 80097f6:	4601      	mov	r1, r0
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	f000 b823 	b.w	8009844 <_malloc_r>
 80097fe:	bf00      	nop
 8009800:	20000068 	.word	0x20000068

08009804 <sbrk_aligned>:
 8009804:	b570      	push	{r4, r5, r6, lr}
 8009806:	4e0e      	ldr	r6, [pc, #56]	; (8009840 <sbrk_aligned+0x3c>)
 8009808:	460c      	mov	r4, r1
 800980a:	6831      	ldr	r1, [r6, #0]
 800980c:	4605      	mov	r5, r0
 800980e:	b911      	cbnz	r1, 8009816 <sbrk_aligned+0x12>
 8009810:	f000 fe40 	bl	800a494 <_sbrk_r>
 8009814:	6030      	str	r0, [r6, #0]
 8009816:	4621      	mov	r1, r4
 8009818:	4628      	mov	r0, r5
 800981a:	f000 fe3b 	bl	800a494 <_sbrk_r>
 800981e:	1c43      	adds	r3, r0, #1
 8009820:	d00a      	beq.n	8009838 <sbrk_aligned+0x34>
 8009822:	1cc4      	adds	r4, r0, #3
 8009824:	f024 0403 	bic.w	r4, r4, #3
 8009828:	42a0      	cmp	r0, r4
 800982a:	d007      	beq.n	800983c <sbrk_aligned+0x38>
 800982c:	1a21      	subs	r1, r4, r0
 800982e:	4628      	mov	r0, r5
 8009830:	f000 fe30 	bl	800a494 <_sbrk_r>
 8009834:	3001      	adds	r0, #1
 8009836:	d101      	bne.n	800983c <sbrk_aligned+0x38>
 8009838:	f04f 34ff 	mov.w	r4, #4294967295
 800983c:	4620      	mov	r0, r4
 800983e:	bd70      	pop	{r4, r5, r6, pc}
 8009840:	200005f0 	.word	0x200005f0

08009844 <_malloc_r>:
 8009844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009848:	1ccd      	adds	r5, r1, #3
 800984a:	f025 0503 	bic.w	r5, r5, #3
 800984e:	3508      	adds	r5, #8
 8009850:	2d0c      	cmp	r5, #12
 8009852:	bf38      	it	cc
 8009854:	250c      	movcc	r5, #12
 8009856:	2d00      	cmp	r5, #0
 8009858:	4607      	mov	r7, r0
 800985a:	db01      	blt.n	8009860 <_malloc_r+0x1c>
 800985c:	42a9      	cmp	r1, r5
 800985e:	d905      	bls.n	800986c <_malloc_r+0x28>
 8009860:	230c      	movs	r3, #12
 8009862:	603b      	str	r3, [r7, #0]
 8009864:	2600      	movs	r6, #0
 8009866:	4630      	mov	r0, r6
 8009868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800986c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009940 <_malloc_r+0xfc>
 8009870:	f000 f868 	bl	8009944 <__malloc_lock>
 8009874:	f8d8 3000 	ldr.w	r3, [r8]
 8009878:	461c      	mov	r4, r3
 800987a:	bb5c      	cbnz	r4, 80098d4 <_malloc_r+0x90>
 800987c:	4629      	mov	r1, r5
 800987e:	4638      	mov	r0, r7
 8009880:	f7ff ffc0 	bl	8009804 <sbrk_aligned>
 8009884:	1c43      	adds	r3, r0, #1
 8009886:	4604      	mov	r4, r0
 8009888:	d155      	bne.n	8009936 <_malloc_r+0xf2>
 800988a:	f8d8 4000 	ldr.w	r4, [r8]
 800988e:	4626      	mov	r6, r4
 8009890:	2e00      	cmp	r6, #0
 8009892:	d145      	bne.n	8009920 <_malloc_r+0xdc>
 8009894:	2c00      	cmp	r4, #0
 8009896:	d048      	beq.n	800992a <_malloc_r+0xe6>
 8009898:	6823      	ldr	r3, [r4, #0]
 800989a:	4631      	mov	r1, r6
 800989c:	4638      	mov	r0, r7
 800989e:	eb04 0903 	add.w	r9, r4, r3
 80098a2:	f000 fdf7 	bl	800a494 <_sbrk_r>
 80098a6:	4581      	cmp	r9, r0
 80098a8:	d13f      	bne.n	800992a <_malloc_r+0xe6>
 80098aa:	6821      	ldr	r1, [r4, #0]
 80098ac:	1a6d      	subs	r5, r5, r1
 80098ae:	4629      	mov	r1, r5
 80098b0:	4638      	mov	r0, r7
 80098b2:	f7ff ffa7 	bl	8009804 <sbrk_aligned>
 80098b6:	3001      	adds	r0, #1
 80098b8:	d037      	beq.n	800992a <_malloc_r+0xe6>
 80098ba:	6823      	ldr	r3, [r4, #0]
 80098bc:	442b      	add	r3, r5
 80098be:	6023      	str	r3, [r4, #0]
 80098c0:	f8d8 3000 	ldr.w	r3, [r8]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d038      	beq.n	800993a <_malloc_r+0xf6>
 80098c8:	685a      	ldr	r2, [r3, #4]
 80098ca:	42a2      	cmp	r2, r4
 80098cc:	d12b      	bne.n	8009926 <_malloc_r+0xe2>
 80098ce:	2200      	movs	r2, #0
 80098d0:	605a      	str	r2, [r3, #4]
 80098d2:	e00f      	b.n	80098f4 <_malloc_r+0xb0>
 80098d4:	6822      	ldr	r2, [r4, #0]
 80098d6:	1b52      	subs	r2, r2, r5
 80098d8:	d41f      	bmi.n	800991a <_malloc_r+0xd6>
 80098da:	2a0b      	cmp	r2, #11
 80098dc:	d917      	bls.n	800990e <_malloc_r+0xca>
 80098de:	1961      	adds	r1, r4, r5
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	6025      	str	r5, [r4, #0]
 80098e4:	bf18      	it	ne
 80098e6:	6059      	strne	r1, [r3, #4]
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	bf08      	it	eq
 80098ec:	f8c8 1000 	streq.w	r1, [r8]
 80098f0:	5162      	str	r2, [r4, r5]
 80098f2:	604b      	str	r3, [r1, #4]
 80098f4:	4638      	mov	r0, r7
 80098f6:	f104 060b 	add.w	r6, r4, #11
 80098fa:	f000 f829 	bl	8009950 <__malloc_unlock>
 80098fe:	f026 0607 	bic.w	r6, r6, #7
 8009902:	1d23      	adds	r3, r4, #4
 8009904:	1af2      	subs	r2, r6, r3
 8009906:	d0ae      	beq.n	8009866 <_malloc_r+0x22>
 8009908:	1b9b      	subs	r3, r3, r6
 800990a:	50a3      	str	r3, [r4, r2]
 800990c:	e7ab      	b.n	8009866 <_malloc_r+0x22>
 800990e:	42a3      	cmp	r3, r4
 8009910:	6862      	ldr	r2, [r4, #4]
 8009912:	d1dd      	bne.n	80098d0 <_malloc_r+0x8c>
 8009914:	f8c8 2000 	str.w	r2, [r8]
 8009918:	e7ec      	b.n	80098f4 <_malloc_r+0xb0>
 800991a:	4623      	mov	r3, r4
 800991c:	6864      	ldr	r4, [r4, #4]
 800991e:	e7ac      	b.n	800987a <_malloc_r+0x36>
 8009920:	4634      	mov	r4, r6
 8009922:	6876      	ldr	r6, [r6, #4]
 8009924:	e7b4      	b.n	8009890 <_malloc_r+0x4c>
 8009926:	4613      	mov	r3, r2
 8009928:	e7cc      	b.n	80098c4 <_malloc_r+0x80>
 800992a:	230c      	movs	r3, #12
 800992c:	603b      	str	r3, [r7, #0]
 800992e:	4638      	mov	r0, r7
 8009930:	f000 f80e 	bl	8009950 <__malloc_unlock>
 8009934:	e797      	b.n	8009866 <_malloc_r+0x22>
 8009936:	6025      	str	r5, [r4, #0]
 8009938:	e7dc      	b.n	80098f4 <_malloc_r+0xb0>
 800993a:	605b      	str	r3, [r3, #4]
 800993c:	deff      	udf	#255	; 0xff
 800993e:	bf00      	nop
 8009940:	200005ec 	.word	0x200005ec

08009944 <__malloc_lock>:
 8009944:	4801      	ldr	r0, [pc, #4]	; (800994c <__malloc_lock+0x8>)
 8009946:	f7ff b88a 	b.w	8008a5e <__retarget_lock_acquire_recursive>
 800994a:	bf00      	nop
 800994c:	200005e8 	.word	0x200005e8

08009950 <__malloc_unlock>:
 8009950:	4801      	ldr	r0, [pc, #4]	; (8009958 <__malloc_unlock+0x8>)
 8009952:	f7ff b885 	b.w	8008a60 <__retarget_lock_release_recursive>
 8009956:	bf00      	nop
 8009958:	200005e8 	.word	0x200005e8

0800995c <_Balloc>:
 800995c:	b570      	push	{r4, r5, r6, lr}
 800995e:	69c6      	ldr	r6, [r0, #28]
 8009960:	4604      	mov	r4, r0
 8009962:	460d      	mov	r5, r1
 8009964:	b976      	cbnz	r6, 8009984 <_Balloc+0x28>
 8009966:	2010      	movs	r0, #16
 8009968:	f7ff ff44 	bl	80097f4 <malloc>
 800996c:	4602      	mov	r2, r0
 800996e:	61e0      	str	r0, [r4, #28]
 8009970:	b920      	cbnz	r0, 800997c <_Balloc+0x20>
 8009972:	4b18      	ldr	r3, [pc, #96]	; (80099d4 <_Balloc+0x78>)
 8009974:	4818      	ldr	r0, [pc, #96]	; (80099d8 <_Balloc+0x7c>)
 8009976:	216b      	movs	r1, #107	; 0x6b
 8009978:	f000 fdaa 	bl	800a4d0 <__assert_func>
 800997c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009980:	6006      	str	r6, [r0, #0]
 8009982:	60c6      	str	r6, [r0, #12]
 8009984:	69e6      	ldr	r6, [r4, #28]
 8009986:	68f3      	ldr	r3, [r6, #12]
 8009988:	b183      	cbz	r3, 80099ac <_Balloc+0x50>
 800998a:	69e3      	ldr	r3, [r4, #28]
 800998c:	68db      	ldr	r3, [r3, #12]
 800998e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009992:	b9b8      	cbnz	r0, 80099c4 <_Balloc+0x68>
 8009994:	2101      	movs	r1, #1
 8009996:	fa01 f605 	lsl.w	r6, r1, r5
 800999a:	1d72      	adds	r2, r6, #5
 800999c:	0092      	lsls	r2, r2, #2
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 fdb4 	bl	800a50c <_calloc_r>
 80099a4:	b160      	cbz	r0, 80099c0 <_Balloc+0x64>
 80099a6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80099aa:	e00e      	b.n	80099ca <_Balloc+0x6e>
 80099ac:	2221      	movs	r2, #33	; 0x21
 80099ae:	2104      	movs	r1, #4
 80099b0:	4620      	mov	r0, r4
 80099b2:	f000 fdab 	bl	800a50c <_calloc_r>
 80099b6:	69e3      	ldr	r3, [r4, #28]
 80099b8:	60f0      	str	r0, [r6, #12]
 80099ba:	68db      	ldr	r3, [r3, #12]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d1e4      	bne.n	800998a <_Balloc+0x2e>
 80099c0:	2000      	movs	r0, #0
 80099c2:	bd70      	pop	{r4, r5, r6, pc}
 80099c4:	6802      	ldr	r2, [r0, #0]
 80099c6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80099ca:	2300      	movs	r3, #0
 80099cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80099d0:	e7f7      	b.n	80099c2 <_Balloc+0x66>
 80099d2:	bf00      	nop
 80099d4:	0800ac49 	.word	0x0800ac49
 80099d8:	0800acc9 	.word	0x0800acc9

080099dc <_Bfree>:
 80099dc:	b570      	push	{r4, r5, r6, lr}
 80099de:	69c6      	ldr	r6, [r0, #28]
 80099e0:	4605      	mov	r5, r0
 80099e2:	460c      	mov	r4, r1
 80099e4:	b976      	cbnz	r6, 8009a04 <_Bfree+0x28>
 80099e6:	2010      	movs	r0, #16
 80099e8:	f7ff ff04 	bl	80097f4 <malloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	61e8      	str	r0, [r5, #28]
 80099f0:	b920      	cbnz	r0, 80099fc <_Bfree+0x20>
 80099f2:	4b09      	ldr	r3, [pc, #36]	; (8009a18 <_Bfree+0x3c>)
 80099f4:	4809      	ldr	r0, [pc, #36]	; (8009a1c <_Bfree+0x40>)
 80099f6:	218f      	movs	r1, #143	; 0x8f
 80099f8:	f000 fd6a 	bl	800a4d0 <__assert_func>
 80099fc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a00:	6006      	str	r6, [r0, #0]
 8009a02:	60c6      	str	r6, [r0, #12]
 8009a04:	b13c      	cbz	r4, 8009a16 <_Bfree+0x3a>
 8009a06:	69eb      	ldr	r3, [r5, #28]
 8009a08:	6862      	ldr	r2, [r4, #4]
 8009a0a:	68db      	ldr	r3, [r3, #12]
 8009a0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009a10:	6021      	str	r1, [r4, #0]
 8009a12:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009a16:	bd70      	pop	{r4, r5, r6, pc}
 8009a18:	0800ac49 	.word	0x0800ac49
 8009a1c:	0800acc9 	.word	0x0800acc9

08009a20 <__multadd>:
 8009a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a24:	690d      	ldr	r5, [r1, #16]
 8009a26:	4607      	mov	r7, r0
 8009a28:	460c      	mov	r4, r1
 8009a2a:	461e      	mov	r6, r3
 8009a2c:	f101 0c14 	add.w	ip, r1, #20
 8009a30:	2000      	movs	r0, #0
 8009a32:	f8dc 3000 	ldr.w	r3, [ip]
 8009a36:	b299      	uxth	r1, r3
 8009a38:	fb02 6101 	mla	r1, r2, r1, r6
 8009a3c:	0c1e      	lsrs	r6, r3, #16
 8009a3e:	0c0b      	lsrs	r3, r1, #16
 8009a40:	fb02 3306 	mla	r3, r2, r6, r3
 8009a44:	b289      	uxth	r1, r1
 8009a46:	3001      	adds	r0, #1
 8009a48:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009a4c:	4285      	cmp	r5, r0
 8009a4e:	f84c 1b04 	str.w	r1, [ip], #4
 8009a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009a56:	dcec      	bgt.n	8009a32 <__multadd+0x12>
 8009a58:	b30e      	cbz	r6, 8009a9e <__multadd+0x7e>
 8009a5a:	68a3      	ldr	r3, [r4, #8]
 8009a5c:	42ab      	cmp	r3, r5
 8009a5e:	dc19      	bgt.n	8009a94 <__multadd+0x74>
 8009a60:	6861      	ldr	r1, [r4, #4]
 8009a62:	4638      	mov	r0, r7
 8009a64:	3101      	adds	r1, #1
 8009a66:	f7ff ff79 	bl	800995c <_Balloc>
 8009a6a:	4680      	mov	r8, r0
 8009a6c:	b928      	cbnz	r0, 8009a7a <__multadd+0x5a>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	4b0c      	ldr	r3, [pc, #48]	; (8009aa4 <__multadd+0x84>)
 8009a72:	480d      	ldr	r0, [pc, #52]	; (8009aa8 <__multadd+0x88>)
 8009a74:	21ba      	movs	r1, #186	; 0xba
 8009a76:	f000 fd2b 	bl	800a4d0 <__assert_func>
 8009a7a:	6922      	ldr	r2, [r4, #16]
 8009a7c:	3202      	adds	r2, #2
 8009a7e:	f104 010c 	add.w	r1, r4, #12
 8009a82:	0092      	lsls	r2, r2, #2
 8009a84:	300c      	adds	r0, #12
 8009a86:	f000 fd15 	bl	800a4b4 <memcpy>
 8009a8a:	4621      	mov	r1, r4
 8009a8c:	4638      	mov	r0, r7
 8009a8e:	f7ff ffa5 	bl	80099dc <_Bfree>
 8009a92:	4644      	mov	r4, r8
 8009a94:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009a98:	3501      	adds	r5, #1
 8009a9a:	615e      	str	r6, [r3, #20]
 8009a9c:	6125      	str	r5, [r4, #16]
 8009a9e:	4620      	mov	r0, r4
 8009aa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009aa4:	0800acb8 	.word	0x0800acb8
 8009aa8:	0800acc9 	.word	0x0800acc9

08009aac <__hi0bits>:
 8009aac:	0c03      	lsrs	r3, r0, #16
 8009aae:	041b      	lsls	r3, r3, #16
 8009ab0:	b9d3      	cbnz	r3, 8009ae8 <__hi0bits+0x3c>
 8009ab2:	0400      	lsls	r0, r0, #16
 8009ab4:	2310      	movs	r3, #16
 8009ab6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009aba:	bf04      	itt	eq
 8009abc:	0200      	lsleq	r0, r0, #8
 8009abe:	3308      	addeq	r3, #8
 8009ac0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009ac4:	bf04      	itt	eq
 8009ac6:	0100      	lsleq	r0, r0, #4
 8009ac8:	3304      	addeq	r3, #4
 8009aca:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009ace:	bf04      	itt	eq
 8009ad0:	0080      	lsleq	r0, r0, #2
 8009ad2:	3302      	addeq	r3, #2
 8009ad4:	2800      	cmp	r0, #0
 8009ad6:	db05      	blt.n	8009ae4 <__hi0bits+0x38>
 8009ad8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009adc:	f103 0301 	add.w	r3, r3, #1
 8009ae0:	bf08      	it	eq
 8009ae2:	2320      	moveq	r3, #32
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	4770      	bx	lr
 8009ae8:	2300      	movs	r3, #0
 8009aea:	e7e4      	b.n	8009ab6 <__hi0bits+0xa>

08009aec <__lo0bits>:
 8009aec:	6803      	ldr	r3, [r0, #0]
 8009aee:	f013 0207 	ands.w	r2, r3, #7
 8009af2:	d00c      	beq.n	8009b0e <__lo0bits+0x22>
 8009af4:	07d9      	lsls	r1, r3, #31
 8009af6:	d422      	bmi.n	8009b3e <__lo0bits+0x52>
 8009af8:	079a      	lsls	r2, r3, #30
 8009afa:	bf49      	itett	mi
 8009afc:	085b      	lsrmi	r3, r3, #1
 8009afe:	089b      	lsrpl	r3, r3, #2
 8009b00:	6003      	strmi	r3, [r0, #0]
 8009b02:	2201      	movmi	r2, #1
 8009b04:	bf5c      	itt	pl
 8009b06:	6003      	strpl	r3, [r0, #0]
 8009b08:	2202      	movpl	r2, #2
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	4770      	bx	lr
 8009b0e:	b299      	uxth	r1, r3
 8009b10:	b909      	cbnz	r1, 8009b16 <__lo0bits+0x2a>
 8009b12:	0c1b      	lsrs	r3, r3, #16
 8009b14:	2210      	movs	r2, #16
 8009b16:	b2d9      	uxtb	r1, r3
 8009b18:	b909      	cbnz	r1, 8009b1e <__lo0bits+0x32>
 8009b1a:	3208      	adds	r2, #8
 8009b1c:	0a1b      	lsrs	r3, r3, #8
 8009b1e:	0719      	lsls	r1, r3, #28
 8009b20:	bf04      	itt	eq
 8009b22:	091b      	lsreq	r3, r3, #4
 8009b24:	3204      	addeq	r2, #4
 8009b26:	0799      	lsls	r1, r3, #30
 8009b28:	bf04      	itt	eq
 8009b2a:	089b      	lsreq	r3, r3, #2
 8009b2c:	3202      	addeq	r2, #2
 8009b2e:	07d9      	lsls	r1, r3, #31
 8009b30:	d403      	bmi.n	8009b3a <__lo0bits+0x4e>
 8009b32:	085b      	lsrs	r3, r3, #1
 8009b34:	f102 0201 	add.w	r2, r2, #1
 8009b38:	d003      	beq.n	8009b42 <__lo0bits+0x56>
 8009b3a:	6003      	str	r3, [r0, #0]
 8009b3c:	e7e5      	b.n	8009b0a <__lo0bits+0x1e>
 8009b3e:	2200      	movs	r2, #0
 8009b40:	e7e3      	b.n	8009b0a <__lo0bits+0x1e>
 8009b42:	2220      	movs	r2, #32
 8009b44:	e7e1      	b.n	8009b0a <__lo0bits+0x1e>
	...

08009b48 <__i2b>:
 8009b48:	b510      	push	{r4, lr}
 8009b4a:	460c      	mov	r4, r1
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	f7ff ff05 	bl	800995c <_Balloc>
 8009b52:	4602      	mov	r2, r0
 8009b54:	b928      	cbnz	r0, 8009b62 <__i2b+0x1a>
 8009b56:	4b05      	ldr	r3, [pc, #20]	; (8009b6c <__i2b+0x24>)
 8009b58:	4805      	ldr	r0, [pc, #20]	; (8009b70 <__i2b+0x28>)
 8009b5a:	f240 1145 	movw	r1, #325	; 0x145
 8009b5e:	f000 fcb7 	bl	800a4d0 <__assert_func>
 8009b62:	2301      	movs	r3, #1
 8009b64:	6144      	str	r4, [r0, #20]
 8009b66:	6103      	str	r3, [r0, #16]
 8009b68:	bd10      	pop	{r4, pc}
 8009b6a:	bf00      	nop
 8009b6c:	0800acb8 	.word	0x0800acb8
 8009b70:	0800acc9 	.word	0x0800acc9

08009b74 <__multiply>:
 8009b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b78:	4691      	mov	r9, r2
 8009b7a:	690a      	ldr	r2, [r1, #16]
 8009b7c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009b80:	429a      	cmp	r2, r3
 8009b82:	bfb8      	it	lt
 8009b84:	460b      	movlt	r3, r1
 8009b86:	460c      	mov	r4, r1
 8009b88:	bfbc      	itt	lt
 8009b8a:	464c      	movlt	r4, r9
 8009b8c:	4699      	movlt	r9, r3
 8009b8e:	6927      	ldr	r7, [r4, #16]
 8009b90:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009b94:	68a3      	ldr	r3, [r4, #8]
 8009b96:	6861      	ldr	r1, [r4, #4]
 8009b98:	eb07 060a 	add.w	r6, r7, sl
 8009b9c:	42b3      	cmp	r3, r6
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	bfb8      	it	lt
 8009ba2:	3101      	addlt	r1, #1
 8009ba4:	f7ff feda 	bl	800995c <_Balloc>
 8009ba8:	b930      	cbnz	r0, 8009bb8 <__multiply+0x44>
 8009baa:	4602      	mov	r2, r0
 8009bac:	4b44      	ldr	r3, [pc, #272]	; (8009cc0 <__multiply+0x14c>)
 8009bae:	4845      	ldr	r0, [pc, #276]	; (8009cc4 <__multiply+0x150>)
 8009bb0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009bb4:	f000 fc8c 	bl	800a4d0 <__assert_func>
 8009bb8:	f100 0514 	add.w	r5, r0, #20
 8009bbc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009bc0:	462b      	mov	r3, r5
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	4543      	cmp	r3, r8
 8009bc6:	d321      	bcc.n	8009c0c <__multiply+0x98>
 8009bc8:	f104 0314 	add.w	r3, r4, #20
 8009bcc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009bd0:	f109 0314 	add.w	r3, r9, #20
 8009bd4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009bd8:	9202      	str	r2, [sp, #8]
 8009bda:	1b3a      	subs	r2, r7, r4
 8009bdc:	3a15      	subs	r2, #21
 8009bde:	f022 0203 	bic.w	r2, r2, #3
 8009be2:	3204      	adds	r2, #4
 8009be4:	f104 0115 	add.w	r1, r4, #21
 8009be8:	428f      	cmp	r7, r1
 8009bea:	bf38      	it	cc
 8009bec:	2204      	movcc	r2, #4
 8009bee:	9201      	str	r2, [sp, #4]
 8009bf0:	9a02      	ldr	r2, [sp, #8]
 8009bf2:	9303      	str	r3, [sp, #12]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d80c      	bhi.n	8009c12 <__multiply+0x9e>
 8009bf8:	2e00      	cmp	r6, #0
 8009bfa:	dd03      	ble.n	8009c04 <__multiply+0x90>
 8009bfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d05b      	beq.n	8009cbc <__multiply+0x148>
 8009c04:	6106      	str	r6, [r0, #16]
 8009c06:	b005      	add	sp, #20
 8009c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c0c:	f843 2b04 	str.w	r2, [r3], #4
 8009c10:	e7d8      	b.n	8009bc4 <__multiply+0x50>
 8009c12:	f8b3 a000 	ldrh.w	sl, [r3]
 8009c16:	f1ba 0f00 	cmp.w	sl, #0
 8009c1a:	d024      	beq.n	8009c66 <__multiply+0xf2>
 8009c1c:	f104 0e14 	add.w	lr, r4, #20
 8009c20:	46a9      	mov	r9, r5
 8009c22:	f04f 0c00 	mov.w	ip, #0
 8009c26:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009c2a:	f8d9 1000 	ldr.w	r1, [r9]
 8009c2e:	fa1f fb82 	uxth.w	fp, r2
 8009c32:	b289      	uxth	r1, r1
 8009c34:	fb0a 110b 	mla	r1, sl, fp, r1
 8009c38:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009c3c:	f8d9 2000 	ldr.w	r2, [r9]
 8009c40:	4461      	add	r1, ip
 8009c42:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c46:	fb0a c20b 	mla	r2, sl, fp, ip
 8009c4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009c4e:	b289      	uxth	r1, r1
 8009c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c54:	4577      	cmp	r7, lr
 8009c56:	f849 1b04 	str.w	r1, [r9], #4
 8009c5a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009c5e:	d8e2      	bhi.n	8009c26 <__multiply+0xb2>
 8009c60:	9a01      	ldr	r2, [sp, #4]
 8009c62:	f845 c002 	str.w	ip, [r5, r2]
 8009c66:	9a03      	ldr	r2, [sp, #12]
 8009c68:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009c6c:	3304      	adds	r3, #4
 8009c6e:	f1b9 0f00 	cmp.w	r9, #0
 8009c72:	d021      	beq.n	8009cb8 <__multiply+0x144>
 8009c74:	6829      	ldr	r1, [r5, #0]
 8009c76:	f104 0c14 	add.w	ip, r4, #20
 8009c7a:	46ae      	mov	lr, r5
 8009c7c:	f04f 0a00 	mov.w	sl, #0
 8009c80:	f8bc b000 	ldrh.w	fp, [ip]
 8009c84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009c88:	fb09 220b 	mla	r2, r9, fp, r2
 8009c8c:	4452      	add	r2, sl
 8009c8e:	b289      	uxth	r1, r1
 8009c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009c94:	f84e 1b04 	str.w	r1, [lr], #4
 8009c98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009c9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8009ca4:	fb09 110a 	mla	r1, r9, sl, r1
 8009ca8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009cac:	4567      	cmp	r7, ip
 8009cae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009cb2:	d8e5      	bhi.n	8009c80 <__multiply+0x10c>
 8009cb4:	9a01      	ldr	r2, [sp, #4]
 8009cb6:	50a9      	str	r1, [r5, r2]
 8009cb8:	3504      	adds	r5, #4
 8009cba:	e799      	b.n	8009bf0 <__multiply+0x7c>
 8009cbc:	3e01      	subs	r6, #1
 8009cbe:	e79b      	b.n	8009bf8 <__multiply+0x84>
 8009cc0:	0800acb8 	.word	0x0800acb8
 8009cc4:	0800acc9 	.word	0x0800acc9

08009cc8 <__pow5mult>:
 8009cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ccc:	4615      	mov	r5, r2
 8009cce:	f012 0203 	ands.w	r2, r2, #3
 8009cd2:	4606      	mov	r6, r0
 8009cd4:	460f      	mov	r7, r1
 8009cd6:	d007      	beq.n	8009ce8 <__pow5mult+0x20>
 8009cd8:	4c25      	ldr	r4, [pc, #148]	; (8009d70 <__pow5mult+0xa8>)
 8009cda:	3a01      	subs	r2, #1
 8009cdc:	2300      	movs	r3, #0
 8009cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009ce2:	f7ff fe9d 	bl	8009a20 <__multadd>
 8009ce6:	4607      	mov	r7, r0
 8009ce8:	10ad      	asrs	r5, r5, #2
 8009cea:	d03d      	beq.n	8009d68 <__pow5mult+0xa0>
 8009cec:	69f4      	ldr	r4, [r6, #28]
 8009cee:	b97c      	cbnz	r4, 8009d10 <__pow5mult+0x48>
 8009cf0:	2010      	movs	r0, #16
 8009cf2:	f7ff fd7f 	bl	80097f4 <malloc>
 8009cf6:	4602      	mov	r2, r0
 8009cf8:	61f0      	str	r0, [r6, #28]
 8009cfa:	b928      	cbnz	r0, 8009d08 <__pow5mult+0x40>
 8009cfc:	4b1d      	ldr	r3, [pc, #116]	; (8009d74 <__pow5mult+0xac>)
 8009cfe:	481e      	ldr	r0, [pc, #120]	; (8009d78 <__pow5mult+0xb0>)
 8009d00:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009d04:	f000 fbe4 	bl	800a4d0 <__assert_func>
 8009d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009d0c:	6004      	str	r4, [r0, #0]
 8009d0e:	60c4      	str	r4, [r0, #12]
 8009d10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009d18:	b94c      	cbnz	r4, 8009d2e <__pow5mult+0x66>
 8009d1a:	f240 2171 	movw	r1, #625	; 0x271
 8009d1e:	4630      	mov	r0, r6
 8009d20:	f7ff ff12 	bl	8009b48 <__i2b>
 8009d24:	2300      	movs	r3, #0
 8009d26:	f8c8 0008 	str.w	r0, [r8, #8]
 8009d2a:	4604      	mov	r4, r0
 8009d2c:	6003      	str	r3, [r0, #0]
 8009d2e:	f04f 0900 	mov.w	r9, #0
 8009d32:	07eb      	lsls	r3, r5, #31
 8009d34:	d50a      	bpl.n	8009d4c <__pow5mult+0x84>
 8009d36:	4639      	mov	r1, r7
 8009d38:	4622      	mov	r2, r4
 8009d3a:	4630      	mov	r0, r6
 8009d3c:	f7ff ff1a 	bl	8009b74 <__multiply>
 8009d40:	4639      	mov	r1, r7
 8009d42:	4680      	mov	r8, r0
 8009d44:	4630      	mov	r0, r6
 8009d46:	f7ff fe49 	bl	80099dc <_Bfree>
 8009d4a:	4647      	mov	r7, r8
 8009d4c:	106d      	asrs	r5, r5, #1
 8009d4e:	d00b      	beq.n	8009d68 <__pow5mult+0xa0>
 8009d50:	6820      	ldr	r0, [r4, #0]
 8009d52:	b938      	cbnz	r0, 8009d64 <__pow5mult+0x9c>
 8009d54:	4622      	mov	r2, r4
 8009d56:	4621      	mov	r1, r4
 8009d58:	4630      	mov	r0, r6
 8009d5a:	f7ff ff0b 	bl	8009b74 <__multiply>
 8009d5e:	6020      	str	r0, [r4, #0]
 8009d60:	f8c0 9000 	str.w	r9, [r0]
 8009d64:	4604      	mov	r4, r0
 8009d66:	e7e4      	b.n	8009d32 <__pow5mult+0x6a>
 8009d68:	4638      	mov	r0, r7
 8009d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d6e:	bf00      	nop
 8009d70:	0800ae18 	.word	0x0800ae18
 8009d74:	0800ac49 	.word	0x0800ac49
 8009d78:	0800acc9 	.word	0x0800acc9

08009d7c <__lshift>:
 8009d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d80:	460c      	mov	r4, r1
 8009d82:	6849      	ldr	r1, [r1, #4]
 8009d84:	6923      	ldr	r3, [r4, #16]
 8009d86:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d8a:	68a3      	ldr	r3, [r4, #8]
 8009d8c:	4607      	mov	r7, r0
 8009d8e:	4691      	mov	r9, r2
 8009d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d94:	f108 0601 	add.w	r6, r8, #1
 8009d98:	42b3      	cmp	r3, r6
 8009d9a:	db0b      	blt.n	8009db4 <__lshift+0x38>
 8009d9c:	4638      	mov	r0, r7
 8009d9e:	f7ff fddd 	bl	800995c <_Balloc>
 8009da2:	4605      	mov	r5, r0
 8009da4:	b948      	cbnz	r0, 8009dba <__lshift+0x3e>
 8009da6:	4602      	mov	r2, r0
 8009da8:	4b28      	ldr	r3, [pc, #160]	; (8009e4c <__lshift+0xd0>)
 8009daa:	4829      	ldr	r0, [pc, #164]	; (8009e50 <__lshift+0xd4>)
 8009dac:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009db0:	f000 fb8e 	bl	800a4d0 <__assert_func>
 8009db4:	3101      	adds	r1, #1
 8009db6:	005b      	lsls	r3, r3, #1
 8009db8:	e7ee      	b.n	8009d98 <__lshift+0x1c>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	f100 0114 	add.w	r1, r0, #20
 8009dc0:	f100 0210 	add.w	r2, r0, #16
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	4553      	cmp	r3, sl
 8009dc8:	db33      	blt.n	8009e32 <__lshift+0xb6>
 8009dca:	6920      	ldr	r0, [r4, #16]
 8009dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009dd0:	f104 0314 	add.w	r3, r4, #20
 8009dd4:	f019 091f 	ands.w	r9, r9, #31
 8009dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009ddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009de0:	d02b      	beq.n	8009e3a <__lshift+0xbe>
 8009de2:	f1c9 0e20 	rsb	lr, r9, #32
 8009de6:	468a      	mov	sl, r1
 8009de8:	2200      	movs	r2, #0
 8009dea:	6818      	ldr	r0, [r3, #0]
 8009dec:	fa00 f009 	lsl.w	r0, r0, r9
 8009df0:	4310      	orrs	r0, r2
 8009df2:	f84a 0b04 	str.w	r0, [sl], #4
 8009df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dfa:	459c      	cmp	ip, r3
 8009dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8009e00:	d8f3      	bhi.n	8009dea <__lshift+0x6e>
 8009e02:	ebac 0304 	sub.w	r3, ip, r4
 8009e06:	3b15      	subs	r3, #21
 8009e08:	f023 0303 	bic.w	r3, r3, #3
 8009e0c:	3304      	adds	r3, #4
 8009e0e:	f104 0015 	add.w	r0, r4, #21
 8009e12:	4584      	cmp	ip, r0
 8009e14:	bf38      	it	cc
 8009e16:	2304      	movcc	r3, #4
 8009e18:	50ca      	str	r2, [r1, r3]
 8009e1a:	b10a      	cbz	r2, 8009e20 <__lshift+0xa4>
 8009e1c:	f108 0602 	add.w	r6, r8, #2
 8009e20:	3e01      	subs	r6, #1
 8009e22:	4638      	mov	r0, r7
 8009e24:	612e      	str	r6, [r5, #16]
 8009e26:	4621      	mov	r1, r4
 8009e28:	f7ff fdd8 	bl	80099dc <_Bfree>
 8009e2c:	4628      	mov	r0, r5
 8009e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8009e36:	3301      	adds	r3, #1
 8009e38:	e7c5      	b.n	8009dc6 <__lshift+0x4a>
 8009e3a:	3904      	subs	r1, #4
 8009e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e40:	f841 2f04 	str.w	r2, [r1, #4]!
 8009e44:	459c      	cmp	ip, r3
 8009e46:	d8f9      	bhi.n	8009e3c <__lshift+0xc0>
 8009e48:	e7ea      	b.n	8009e20 <__lshift+0xa4>
 8009e4a:	bf00      	nop
 8009e4c:	0800acb8 	.word	0x0800acb8
 8009e50:	0800acc9 	.word	0x0800acc9

08009e54 <__mcmp>:
 8009e54:	b530      	push	{r4, r5, lr}
 8009e56:	6902      	ldr	r2, [r0, #16]
 8009e58:	690c      	ldr	r4, [r1, #16]
 8009e5a:	1b12      	subs	r2, r2, r4
 8009e5c:	d10e      	bne.n	8009e7c <__mcmp+0x28>
 8009e5e:	f100 0314 	add.w	r3, r0, #20
 8009e62:	3114      	adds	r1, #20
 8009e64:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009e68:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009e6c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009e70:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009e74:	42a5      	cmp	r5, r4
 8009e76:	d003      	beq.n	8009e80 <__mcmp+0x2c>
 8009e78:	d305      	bcc.n	8009e86 <__mcmp+0x32>
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	bd30      	pop	{r4, r5, pc}
 8009e80:	4283      	cmp	r3, r0
 8009e82:	d3f3      	bcc.n	8009e6c <__mcmp+0x18>
 8009e84:	e7fa      	b.n	8009e7c <__mcmp+0x28>
 8009e86:	f04f 32ff 	mov.w	r2, #4294967295
 8009e8a:	e7f7      	b.n	8009e7c <__mcmp+0x28>

08009e8c <__mdiff>:
 8009e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	460c      	mov	r4, r1
 8009e92:	4606      	mov	r6, r0
 8009e94:	4611      	mov	r1, r2
 8009e96:	4620      	mov	r0, r4
 8009e98:	4690      	mov	r8, r2
 8009e9a:	f7ff ffdb 	bl	8009e54 <__mcmp>
 8009e9e:	1e05      	subs	r5, r0, #0
 8009ea0:	d110      	bne.n	8009ec4 <__mdiff+0x38>
 8009ea2:	4629      	mov	r1, r5
 8009ea4:	4630      	mov	r0, r6
 8009ea6:	f7ff fd59 	bl	800995c <_Balloc>
 8009eaa:	b930      	cbnz	r0, 8009eba <__mdiff+0x2e>
 8009eac:	4b3a      	ldr	r3, [pc, #232]	; (8009f98 <__mdiff+0x10c>)
 8009eae:	4602      	mov	r2, r0
 8009eb0:	f240 2137 	movw	r1, #567	; 0x237
 8009eb4:	4839      	ldr	r0, [pc, #228]	; (8009f9c <__mdiff+0x110>)
 8009eb6:	f000 fb0b 	bl	800a4d0 <__assert_func>
 8009eba:	2301      	movs	r3, #1
 8009ebc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009ec0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ec4:	bfa4      	itt	ge
 8009ec6:	4643      	movge	r3, r8
 8009ec8:	46a0      	movge	r8, r4
 8009eca:	4630      	mov	r0, r6
 8009ecc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009ed0:	bfa6      	itte	ge
 8009ed2:	461c      	movge	r4, r3
 8009ed4:	2500      	movge	r5, #0
 8009ed6:	2501      	movlt	r5, #1
 8009ed8:	f7ff fd40 	bl	800995c <_Balloc>
 8009edc:	b920      	cbnz	r0, 8009ee8 <__mdiff+0x5c>
 8009ede:	4b2e      	ldr	r3, [pc, #184]	; (8009f98 <__mdiff+0x10c>)
 8009ee0:	4602      	mov	r2, r0
 8009ee2:	f240 2145 	movw	r1, #581	; 0x245
 8009ee6:	e7e5      	b.n	8009eb4 <__mdiff+0x28>
 8009ee8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009eec:	6926      	ldr	r6, [r4, #16]
 8009eee:	60c5      	str	r5, [r0, #12]
 8009ef0:	f104 0914 	add.w	r9, r4, #20
 8009ef4:	f108 0514 	add.w	r5, r8, #20
 8009ef8:	f100 0e14 	add.w	lr, r0, #20
 8009efc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009f00:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009f04:	f108 0210 	add.w	r2, r8, #16
 8009f08:	46f2      	mov	sl, lr
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009f10:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009f14:	fa11 f88b 	uxtah	r8, r1, fp
 8009f18:	b299      	uxth	r1, r3
 8009f1a:	0c1b      	lsrs	r3, r3, #16
 8009f1c:	eba8 0801 	sub.w	r8, r8, r1
 8009f20:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009f24:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009f28:	fa1f f888 	uxth.w	r8, r8
 8009f2c:	1419      	asrs	r1, r3, #16
 8009f2e:	454e      	cmp	r6, r9
 8009f30:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009f34:	f84a 3b04 	str.w	r3, [sl], #4
 8009f38:	d8e8      	bhi.n	8009f0c <__mdiff+0x80>
 8009f3a:	1b33      	subs	r3, r6, r4
 8009f3c:	3b15      	subs	r3, #21
 8009f3e:	f023 0303 	bic.w	r3, r3, #3
 8009f42:	3304      	adds	r3, #4
 8009f44:	3415      	adds	r4, #21
 8009f46:	42a6      	cmp	r6, r4
 8009f48:	bf38      	it	cc
 8009f4a:	2304      	movcc	r3, #4
 8009f4c:	441d      	add	r5, r3
 8009f4e:	4473      	add	r3, lr
 8009f50:	469e      	mov	lr, r3
 8009f52:	462e      	mov	r6, r5
 8009f54:	4566      	cmp	r6, ip
 8009f56:	d30e      	bcc.n	8009f76 <__mdiff+0xea>
 8009f58:	f10c 0203 	add.w	r2, ip, #3
 8009f5c:	1b52      	subs	r2, r2, r5
 8009f5e:	f022 0203 	bic.w	r2, r2, #3
 8009f62:	3d03      	subs	r5, #3
 8009f64:	45ac      	cmp	ip, r5
 8009f66:	bf38      	it	cc
 8009f68:	2200      	movcc	r2, #0
 8009f6a:	4413      	add	r3, r2
 8009f6c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009f70:	b17a      	cbz	r2, 8009f92 <__mdiff+0x106>
 8009f72:	6107      	str	r7, [r0, #16]
 8009f74:	e7a4      	b.n	8009ec0 <__mdiff+0x34>
 8009f76:	f856 8b04 	ldr.w	r8, [r6], #4
 8009f7a:	fa11 f288 	uxtah	r2, r1, r8
 8009f7e:	1414      	asrs	r4, r2, #16
 8009f80:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009f84:	b292      	uxth	r2, r2
 8009f86:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009f8a:	f84e 2b04 	str.w	r2, [lr], #4
 8009f8e:	1421      	asrs	r1, r4, #16
 8009f90:	e7e0      	b.n	8009f54 <__mdiff+0xc8>
 8009f92:	3f01      	subs	r7, #1
 8009f94:	e7ea      	b.n	8009f6c <__mdiff+0xe0>
 8009f96:	bf00      	nop
 8009f98:	0800acb8 	.word	0x0800acb8
 8009f9c:	0800acc9 	.word	0x0800acc9

08009fa0 <__d2b>:
 8009fa0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009fa4:	460f      	mov	r7, r1
 8009fa6:	2101      	movs	r1, #1
 8009fa8:	ec59 8b10 	vmov	r8, r9, d0
 8009fac:	4616      	mov	r6, r2
 8009fae:	f7ff fcd5 	bl	800995c <_Balloc>
 8009fb2:	4604      	mov	r4, r0
 8009fb4:	b930      	cbnz	r0, 8009fc4 <__d2b+0x24>
 8009fb6:	4602      	mov	r2, r0
 8009fb8:	4b24      	ldr	r3, [pc, #144]	; (800a04c <__d2b+0xac>)
 8009fba:	4825      	ldr	r0, [pc, #148]	; (800a050 <__d2b+0xb0>)
 8009fbc:	f240 310f 	movw	r1, #783	; 0x30f
 8009fc0:	f000 fa86 	bl	800a4d0 <__assert_func>
 8009fc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009fc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009fcc:	bb2d      	cbnz	r5, 800a01a <__d2b+0x7a>
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	f1b8 0300 	subs.w	r3, r8, #0
 8009fd4:	d026      	beq.n	800a024 <__d2b+0x84>
 8009fd6:	4668      	mov	r0, sp
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	f7ff fd87 	bl	8009aec <__lo0bits>
 8009fde:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009fe2:	b1e8      	cbz	r0, 800a020 <__d2b+0x80>
 8009fe4:	f1c0 0320 	rsb	r3, r0, #32
 8009fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fec:	430b      	orrs	r3, r1
 8009fee:	40c2      	lsrs	r2, r0
 8009ff0:	6163      	str	r3, [r4, #20]
 8009ff2:	9201      	str	r2, [sp, #4]
 8009ff4:	9b01      	ldr	r3, [sp, #4]
 8009ff6:	61a3      	str	r3, [r4, #24]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	bf14      	ite	ne
 8009ffc:	2202      	movne	r2, #2
 8009ffe:	2201      	moveq	r2, #1
 800a000:	6122      	str	r2, [r4, #16]
 800a002:	b1bd      	cbz	r5, 800a034 <__d2b+0x94>
 800a004:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a008:	4405      	add	r5, r0
 800a00a:	603d      	str	r5, [r7, #0]
 800a00c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a010:	6030      	str	r0, [r6, #0]
 800a012:	4620      	mov	r0, r4
 800a014:	b003      	add	sp, #12
 800a016:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a01a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a01e:	e7d6      	b.n	8009fce <__d2b+0x2e>
 800a020:	6161      	str	r1, [r4, #20]
 800a022:	e7e7      	b.n	8009ff4 <__d2b+0x54>
 800a024:	a801      	add	r0, sp, #4
 800a026:	f7ff fd61 	bl	8009aec <__lo0bits>
 800a02a:	9b01      	ldr	r3, [sp, #4]
 800a02c:	6163      	str	r3, [r4, #20]
 800a02e:	3020      	adds	r0, #32
 800a030:	2201      	movs	r2, #1
 800a032:	e7e5      	b.n	800a000 <__d2b+0x60>
 800a034:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a038:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a03c:	6038      	str	r0, [r7, #0]
 800a03e:	6918      	ldr	r0, [r3, #16]
 800a040:	f7ff fd34 	bl	8009aac <__hi0bits>
 800a044:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a048:	e7e2      	b.n	800a010 <__d2b+0x70>
 800a04a:	bf00      	nop
 800a04c:	0800acb8 	.word	0x0800acb8
 800a050:	0800acc9 	.word	0x0800acc9

0800a054 <__ssputs_r>:
 800a054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a058:	688e      	ldr	r6, [r1, #8]
 800a05a:	461f      	mov	r7, r3
 800a05c:	42be      	cmp	r6, r7
 800a05e:	680b      	ldr	r3, [r1, #0]
 800a060:	4682      	mov	sl, r0
 800a062:	460c      	mov	r4, r1
 800a064:	4690      	mov	r8, r2
 800a066:	d82c      	bhi.n	800a0c2 <__ssputs_r+0x6e>
 800a068:	898a      	ldrh	r2, [r1, #12]
 800a06a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a06e:	d026      	beq.n	800a0be <__ssputs_r+0x6a>
 800a070:	6965      	ldr	r5, [r4, #20]
 800a072:	6909      	ldr	r1, [r1, #16]
 800a074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a078:	eba3 0901 	sub.w	r9, r3, r1
 800a07c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a080:	1c7b      	adds	r3, r7, #1
 800a082:	444b      	add	r3, r9
 800a084:	106d      	asrs	r5, r5, #1
 800a086:	429d      	cmp	r5, r3
 800a088:	bf38      	it	cc
 800a08a:	461d      	movcc	r5, r3
 800a08c:	0553      	lsls	r3, r2, #21
 800a08e:	d527      	bpl.n	800a0e0 <__ssputs_r+0x8c>
 800a090:	4629      	mov	r1, r5
 800a092:	f7ff fbd7 	bl	8009844 <_malloc_r>
 800a096:	4606      	mov	r6, r0
 800a098:	b360      	cbz	r0, 800a0f4 <__ssputs_r+0xa0>
 800a09a:	6921      	ldr	r1, [r4, #16]
 800a09c:	464a      	mov	r2, r9
 800a09e:	f000 fa09 	bl	800a4b4 <memcpy>
 800a0a2:	89a3      	ldrh	r3, [r4, #12]
 800a0a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a0a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0ac:	81a3      	strh	r3, [r4, #12]
 800a0ae:	6126      	str	r6, [r4, #16]
 800a0b0:	6165      	str	r5, [r4, #20]
 800a0b2:	444e      	add	r6, r9
 800a0b4:	eba5 0509 	sub.w	r5, r5, r9
 800a0b8:	6026      	str	r6, [r4, #0]
 800a0ba:	60a5      	str	r5, [r4, #8]
 800a0bc:	463e      	mov	r6, r7
 800a0be:	42be      	cmp	r6, r7
 800a0c0:	d900      	bls.n	800a0c4 <__ssputs_r+0x70>
 800a0c2:	463e      	mov	r6, r7
 800a0c4:	6820      	ldr	r0, [r4, #0]
 800a0c6:	4632      	mov	r2, r6
 800a0c8:	4641      	mov	r1, r8
 800a0ca:	f000 f9c9 	bl	800a460 <memmove>
 800a0ce:	68a3      	ldr	r3, [r4, #8]
 800a0d0:	1b9b      	subs	r3, r3, r6
 800a0d2:	60a3      	str	r3, [r4, #8]
 800a0d4:	6823      	ldr	r3, [r4, #0]
 800a0d6:	4433      	add	r3, r6
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	2000      	movs	r0, #0
 800a0dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0e0:	462a      	mov	r2, r5
 800a0e2:	f000 fa3b 	bl	800a55c <_realloc_r>
 800a0e6:	4606      	mov	r6, r0
 800a0e8:	2800      	cmp	r0, #0
 800a0ea:	d1e0      	bne.n	800a0ae <__ssputs_r+0x5a>
 800a0ec:	6921      	ldr	r1, [r4, #16]
 800a0ee:	4650      	mov	r0, sl
 800a0f0:	f7ff fb34 	bl	800975c <_free_r>
 800a0f4:	230c      	movs	r3, #12
 800a0f6:	f8ca 3000 	str.w	r3, [sl]
 800a0fa:	89a3      	ldrh	r3, [r4, #12]
 800a0fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	f04f 30ff 	mov.w	r0, #4294967295
 800a106:	e7e9      	b.n	800a0dc <__ssputs_r+0x88>

0800a108 <_svfiprintf_r>:
 800a108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a10c:	4698      	mov	r8, r3
 800a10e:	898b      	ldrh	r3, [r1, #12]
 800a110:	061b      	lsls	r3, r3, #24
 800a112:	b09d      	sub	sp, #116	; 0x74
 800a114:	4607      	mov	r7, r0
 800a116:	460d      	mov	r5, r1
 800a118:	4614      	mov	r4, r2
 800a11a:	d50e      	bpl.n	800a13a <_svfiprintf_r+0x32>
 800a11c:	690b      	ldr	r3, [r1, #16]
 800a11e:	b963      	cbnz	r3, 800a13a <_svfiprintf_r+0x32>
 800a120:	2140      	movs	r1, #64	; 0x40
 800a122:	f7ff fb8f 	bl	8009844 <_malloc_r>
 800a126:	6028      	str	r0, [r5, #0]
 800a128:	6128      	str	r0, [r5, #16]
 800a12a:	b920      	cbnz	r0, 800a136 <_svfiprintf_r+0x2e>
 800a12c:	230c      	movs	r3, #12
 800a12e:	603b      	str	r3, [r7, #0]
 800a130:	f04f 30ff 	mov.w	r0, #4294967295
 800a134:	e0d0      	b.n	800a2d8 <_svfiprintf_r+0x1d0>
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	616b      	str	r3, [r5, #20]
 800a13a:	2300      	movs	r3, #0
 800a13c:	9309      	str	r3, [sp, #36]	; 0x24
 800a13e:	2320      	movs	r3, #32
 800a140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a144:	f8cd 800c 	str.w	r8, [sp, #12]
 800a148:	2330      	movs	r3, #48	; 0x30
 800a14a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a2f0 <_svfiprintf_r+0x1e8>
 800a14e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a152:	f04f 0901 	mov.w	r9, #1
 800a156:	4623      	mov	r3, r4
 800a158:	469a      	mov	sl, r3
 800a15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a15e:	b10a      	cbz	r2, 800a164 <_svfiprintf_r+0x5c>
 800a160:	2a25      	cmp	r2, #37	; 0x25
 800a162:	d1f9      	bne.n	800a158 <_svfiprintf_r+0x50>
 800a164:	ebba 0b04 	subs.w	fp, sl, r4
 800a168:	d00b      	beq.n	800a182 <_svfiprintf_r+0x7a>
 800a16a:	465b      	mov	r3, fp
 800a16c:	4622      	mov	r2, r4
 800a16e:	4629      	mov	r1, r5
 800a170:	4638      	mov	r0, r7
 800a172:	f7ff ff6f 	bl	800a054 <__ssputs_r>
 800a176:	3001      	adds	r0, #1
 800a178:	f000 80a9 	beq.w	800a2ce <_svfiprintf_r+0x1c6>
 800a17c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a17e:	445a      	add	r2, fp
 800a180:	9209      	str	r2, [sp, #36]	; 0x24
 800a182:	f89a 3000 	ldrb.w	r3, [sl]
 800a186:	2b00      	cmp	r3, #0
 800a188:	f000 80a1 	beq.w	800a2ce <_svfiprintf_r+0x1c6>
 800a18c:	2300      	movs	r3, #0
 800a18e:	f04f 32ff 	mov.w	r2, #4294967295
 800a192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a196:	f10a 0a01 	add.w	sl, sl, #1
 800a19a:	9304      	str	r3, [sp, #16]
 800a19c:	9307      	str	r3, [sp, #28]
 800a19e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a1a2:	931a      	str	r3, [sp, #104]	; 0x68
 800a1a4:	4654      	mov	r4, sl
 800a1a6:	2205      	movs	r2, #5
 800a1a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1ac:	4850      	ldr	r0, [pc, #320]	; (800a2f0 <_svfiprintf_r+0x1e8>)
 800a1ae:	f7f6 f80f 	bl	80001d0 <memchr>
 800a1b2:	9a04      	ldr	r2, [sp, #16]
 800a1b4:	b9d8      	cbnz	r0, 800a1ee <_svfiprintf_r+0xe6>
 800a1b6:	06d0      	lsls	r0, r2, #27
 800a1b8:	bf44      	itt	mi
 800a1ba:	2320      	movmi	r3, #32
 800a1bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1c0:	0711      	lsls	r1, r2, #28
 800a1c2:	bf44      	itt	mi
 800a1c4:	232b      	movmi	r3, #43	; 0x2b
 800a1c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a1ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a1ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a1d0:	d015      	beq.n	800a1fe <_svfiprintf_r+0xf6>
 800a1d2:	9a07      	ldr	r2, [sp, #28]
 800a1d4:	4654      	mov	r4, sl
 800a1d6:	2000      	movs	r0, #0
 800a1d8:	f04f 0c0a 	mov.w	ip, #10
 800a1dc:	4621      	mov	r1, r4
 800a1de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a1e2:	3b30      	subs	r3, #48	; 0x30
 800a1e4:	2b09      	cmp	r3, #9
 800a1e6:	d94d      	bls.n	800a284 <_svfiprintf_r+0x17c>
 800a1e8:	b1b0      	cbz	r0, 800a218 <_svfiprintf_r+0x110>
 800a1ea:	9207      	str	r2, [sp, #28]
 800a1ec:	e014      	b.n	800a218 <_svfiprintf_r+0x110>
 800a1ee:	eba0 0308 	sub.w	r3, r0, r8
 800a1f2:	fa09 f303 	lsl.w	r3, r9, r3
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	46a2      	mov	sl, r4
 800a1fc:	e7d2      	b.n	800a1a4 <_svfiprintf_r+0x9c>
 800a1fe:	9b03      	ldr	r3, [sp, #12]
 800a200:	1d19      	adds	r1, r3, #4
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	9103      	str	r1, [sp, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	bfbb      	ittet	lt
 800a20a:	425b      	neglt	r3, r3
 800a20c:	f042 0202 	orrlt.w	r2, r2, #2
 800a210:	9307      	strge	r3, [sp, #28]
 800a212:	9307      	strlt	r3, [sp, #28]
 800a214:	bfb8      	it	lt
 800a216:	9204      	strlt	r2, [sp, #16]
 800a218:	7823      	ldrb	r3, [r4, #0]
 800a21a:	2b2e      	cmp	r3, #46	; 0x2e
 800a21c:	d10c      	bne.n	800a238 <_svfiprintf_r+0x130>
 800a21e:	7863      	ldrb	r3, [r4, #1]
 800a220:	2b2a      	cmp	r3, #42	; 0x2a
 800a222:	d134      	bne.n	800a28e <_svfiprintf_r+0x186>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	1d1a      	adds	r2, r3, #4
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	9203      	str	r2, [sp, #12]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	bfb8      	it	lt
 800a230:	f04f 33ff 	movlt.w	r3, #4294967295
 800a234:	3402      	adds	r4, #2
 800a236:	9305      	str	r3, [sp, #20]
 800a238:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a300 <_svfiprintf_r+0x1f8>
 800a23c:	7821      	ldrb	r1, [r4, #0]
 800a23e:	2203      	movs	r2, #3
 800a240:	4650      	mov	r0, sl
 800a242:	f7f5 ffc5 	bl	80001d0 <memchr>
 800a246:	b138      	cbz	r0, 800a258 <_svfiprintf_r+0x150>
 800a248:	9b04      	ldr	r3, [sp, #16]
 800a24a:	eba0 000a 	sub.w	r0, r0, sl
 800a24e:	2240      	movs	r2, #64	; 0x40
 800a250:	4082      	lsls	r2, r0
 800a252:	4313      	orrs	r3, r2
 800a254:	3401      	adds	r4, #1
 800a256:	9304      	str	r3, [sp, #16]
 800a258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a25c:	4825      	ldr	r0, [pc, #148]	; (800a2f4 <_svfiprintf_r+0x1ec>)
 800a25e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a262:	2206      	movs	r2, #6
 800a264:	f7f5 ffb4 	bl	80001d0 <memchr>
 800a268:	2800      	cmp	r0, #0
 800a26a:	d038      	beq.n	800a2de <_svfiprintf_r+0x1d6>
 800a26c:	4b22      	ldr	r3, [pc, #136]	; (800a2f8 <_svfiprintf_r+0x1f0>)
 800a26e:	bb1b      	cbnz	r3, 800a2b8 <_svfiprintf_r+0x1b0>
 800a270:	9b03      	ldr	r3, [sp, #12]
 800a272:	3307      	adds	r3, #7
 800a274:	f023 0307 	bic.w	r3, r3, #7
 800a278:	3308      	adds	r3, #8
 800a27a:	9303      	str	r3, [sp, #12]
 800a27c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a27e:	4433      	add	r3, r6
 800a280:	9309      	str	r3, [sp, #36]	; 0x24
 800a282:	e768      	b.n	800a156 <_svfiprintf_r+0x4e>
 800a284:	fb0c 3202 	mla	r2, ip, r2, r3
 800a288:	460c      	mov	r4, r1
 800a28a:	2001      	movs	r0, #1
 800a28c:	e7a6      	b.n	800a1dc <_svfiprintf_r+0xd4>
 800a28e:	2300      	movs	r3, #0
 800a290:	3401      	adds	r4, #1
 800a292:	9305      	str	r3, [sp, #20]
 800a294:	4619      	mov	r1, r3
 800a296:	f04f 0c0a 	mov.w	ip, #10
 800a29a:	4620      	mov	r0, r4
 800a29c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2a0:	3a30      	subs	r2, #48	; 0x30
 800a2a2:	2a09      	cmp	r2, #9
 800a2a4:	d903      	bls.n	800a2ae <_svfiprintf_r+0x1a6>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d0c6      	beq.n	800a238 <_svfiprintf_r+0x130>
 800a2aa:	9105      	str	r1, [sp, #20]
 800a2ac:	e7c4      	b.n	800a238 <_svfiprintf_r+0x130>
 800a2ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a2b2:	4604      	mov	r4, r0
 800a2b4:	2301      	movs	r3, #1
 800a2b6:	e7f0      	b.n	800a29a <_svfiprintf_r+0x192>
 800a2b8:	ab03      	add	r3, sp, #12
 800a2ba:	9300      	str	r3, [sp, #0]
 800a2bc:	462a      	mov	r2, r5
 800a2be:	4b0f      	ldr	r3, [pc, #60]	; (800a2fc <_svfiprintf_r+0x1f4>)
 800a2c0:	a904      	add	r1, sp, #16
 800a2c2:	4638      	mov	r0, r7
 800a2c4:	f7fd fe62 	bl	8007f8c <_printf_float>
 800a2c8:	1c42      	adds	r2, r0, #1
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	d1d6      	bne.n	800a27c <_svfiprintf_r+0x174>
 800a2ce:	89ab      	ldrh	r3, [r5, #12]
 800a2d0:	065b      	lsls	r3, r3, #25
 800a2d2:	f53f af2d 	bmi.w	800a130 <_svfiprintf_r+0x28>
 800a2d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2d8:	b01d      	add	sp, #116	; 0x74
 800a2da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2de:	ab03      	add	r3, sp, #12
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	462a      	mov	r2, r5
 800a2e4:	4b05      	ldr	r3, [pc, #20]	; (800a2fc <_svfiprintf_r+0x1f4>)
 800a2e6:	a904      	add	r1, sp, #16
 800a2e8:	4638      	mov	r0, r7
 800a2ea:	f7fe f8f3 	bl	80084d4 <_printf_i>
 800a2ee:	e7eb      	b.n	800a2c8 <_svfiprintf_r+0x1c0>
 800a2f0:	0800ae24 	.word	0x0800ae24
 800a2f4:	0800ae2e 	.word	0x0800ae2e
 800a2f8:	08007f8d 	.word	0x08007f8d
 800a2fc:	0800a055 	.word	0x0800a055
 800a300:	0800ae2a 	.word	0x0800ae2a

0800a304 <__sflush_r>:
 800a304:	898a      	ldrh	r2, [r1, #12]
 800a306:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a30a:	4605      	mov	r5, r0
 800a30c:	0710      	lsls	r0, r2, #28
 800a30e:	460c      	mov	r4, r1
 800a310:	d458      	bmi.n	800a3c4 <__sflush_r+0xc0>
 800a312:	684b      	ldr	r3, [r1, #4]
 800a314:	2b00      	cmp	r3, #0
 800a316:	dc05      	bgt.n	800a324 <__sflush_r+0x20>
 800a318:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	dc02      	bgt.n	800a324 <__sflush_r+0x20>
 800a31e:	2000      	movs	r0, #0
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a326:	2e00      	cmp	r6, #0
 800a328:	d0f9      	beq.n	800a31e <__sflush_r+0x1a>
 800a32a:	2300      	movs	r3, #0
 800a32c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a330:	682f      	ldr	r7, [r5, #0]
 800a332:	6a21      	ldr	r1, [r4, #32]
 800a334:	602b      	str	r3, [r5, #0]
 800a336:	d032      	beq.n	800a39e <__sflush_r+0x9a>
 800a338:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	075a      	lsls	r2, r3, #29
 800a33e:	d505      	bpl.n	800a34c <__sflush_r+0x48>
 800a340:	6863      	ldr	r3, [r4, #4]
 800a342:	1ac0      	subs	r0, r0, r3
 800a344:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a346:	b10b      	cbz	r3, 800a34c <__sflush_r+0x48>
 800a348:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a34a:	1ac0      	subs	r0, r0, r3
 800a34c:	2300      	movs	r3, #0
 800a34e:	4602      	mov	r2, r0
 800a350:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a352:	6a21      	ldr	r1, [r4, #32]
 800a354:	4628      	mov	r0, r5
 800a356:	47b0      	blx	r6
 800a358:	1c43      	adds	r3, r0, #1
 800a35a:	89a3      	ldrh	r3, [r4, #12]
 800a35c:	d106      	bne.n	800a36c <__sflush_r+0x68>
 800a35e:	6829      	ldr	r1, [r5, #0]
 800a360:	291d      	cmp	r1, #29
 800a362:	d82b      	bhi.n	800a3bc <__sflush_r+0xb8>
 800a364:	4a29      	ldr	r2, [pc, #164]	; (800a40c <__sflush_r+0x108>)
 800a366:	410a      	asrs	r2, r1
 800a368:	07d6      	lsls	r6, r2, #31
 800a36a:	d427      	bmi.n	800a3bc <__sflush_r+0xb8>
 800a36c:	2200      	movs	r2, #0
 800a36e:	6062      	str	r2, [r4, #4]
 800a370:	04d9      	lsls	r1, r3, #19
 800a372:	6922      	ldr	r2, [r4, #16]
 800a374:	6022      	str	r2, [r4, #0]
 800a376:	d504      	bpl.n	800a382 <__sflush_r+0x7e>
 800a378:	1c42      	adds	r2, r0, #1
 800a37a:	d101      	bne.n	800a380 <__sflush_r+0x7c>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b903      	cbnz	r3, 800a382 <__sflush_r+0x7e>
 800a380:	6560      	str	r0, [r4, #84]	; 0x54
 800a382:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a384:	602f      	str	r7, [r5, #0]
 800a386:	2900      	cmp	r1, #0
 800a388:	d0c9      	beq.n	800a31e <__sflush_r+0x1a>
 800a38a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a38e:	4299      	cmp	r1, r3
 800a390:	d002      	beq.n	800a398 <__sflush_r+0x94>
 800a392:	4628      	mov	r0, r5
 800a394:	f7ff f9e2 	bl	800975c <_free_r>
 800a398:	2000      	movs	r0, #0
 800a39a:	6360      	str	r0, [r4, #52]	; 0x34
 800a39c:	e7c0      	b.n	800a320 <__sflush_r+0x1c>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	4628      	mov	r0, r5
 800a3a2:	47b0      	blx	r6
 800a3a4:	1c41      	adds	r1, r0, #1
 800a3a6:	d1c8      	bne.n	800a33a <__sflush_r+0x36>
 800a3a8:	682b      	ldr	r3, [r5, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d0c5      	beq.n	800a33a <__sflush_r+0x36>
 800a3ae:	2b1d      	cmp	r3, #29
 800a3b0:	d001      	beq.n	800a3b6 <__sflush_r+0xb2>
 800a3b2:	2b16      	cmp	r3, #22
 800a3b4:	d101      	bne.n	800a3ba <__sflush_r+0xb6>
 800a3b6:	602f      	str	r7, [r5, #0]
 800a3b8:	e7b1      	b.n	800a31e <__sflush_r+0x1a>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3c0:	81a3      	strh	r3, [r4, #12]
 800a3c2:	e7ad      	b.n	800a320 <__sflush_r+0x1c>
 800a3c4:	690f      	ldr	r7, [r1, #16]
 800a3c6:	2f00      	cmp	r7, #0
 800a3c8:	d0a9      	beq.n	800a31e <__sflush_r+0x1a>
 800a3ca:	0793      	lsls	r3, r2, #30
 800a3cc:	680e      	ldr	r6, [r1, #0]
 800a3ce:	bf08      	it	eq
 800a3d0:	694b      	ldreq	r3, [r1, #20]
 800a3d2:	600f      	str	r7, [r1, #0]
 800a3d4:	bf18      	it	ne
 800a3d6:	2300      	movne	r3, #0
 800a3d8:	eba6 0807 	sub.w	r8, r6, r7
 800a3dc:	608b      	str	r3, [r1, #8]
 800a3de:	f1b8 0f00 	cmp.w	r8, #0
 800a3e2:	dd9c      	ble.n	800a31e <__sflush_r+0x1a>
 800a3e4:	6a21      	ldr	r1, [r4, #32]
 800a3e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a3e8:	4643      	mov	r3, r8
 800a3ea:	463a      	mov	r2, r7
 800a3ec:	4628      	mov	r0, r5
 800a3ee:	47b0      	blx	r6
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	dc06      	bgt.n	800a402 <__sflush_r+0xfe>
 800a3f4:	89a3      	ldrh	r3, [r4, #12]
 800a3f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a3fa:	81a3      	strh	r3, [r4, #12]
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295
 800a400:	e78e      	b.n	800a320 <__sflush_r+0x1c>
 800a402:	4407      	add	r7, r0
 800a404:	eba8 0800 	sub.w	r8, r8, r0
 800a408:	e7e9      	b.n	800a3de <__sflush_r+0xda>
 800a40a:	bf00      	nop
 800a40c:	dfbffffe 	.word	0xdfbffffe

0800a410 <_fflush_r>:
 800a410:	b538      	push	{r3, r4, r5, lr}
 800a412:	690b      	ldr	r3, [r1, #16]
 800a414:	4605      	mov	r5, r0
 800a416:	460c      	mov	r4, r1
 800a418:	b913      	cbnz	r3, 800a420 <_fflush_r+0x10>
 800a41a:	2500      	movs	r5, #0
 800a41c:	4628      	mov	r0, r5
 800a41e:	bd38      	pop	{r3, r4, r5, pc}
 800a420:	b118      	cbz	r0, 800a42a <_fflush_r+0x1a>
 800a422:	6a03      	ldr	r3, [r0, #32]
 800a424:	b90b      	cbnz	r3, 800a42a <_fflush_r+0x1a>
 800a426:	f7fe fa03 	bl	8008830 <__sinit>
 800a42a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d0f3      	beq.n	800a41a <_fflush_r+0xa>
 800a432:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a434:	07d0      	lsls	r0, r2, #31
 800a436:	d404      	bmi.n	800a442 <_fflush_r+0x32>
 800a438:	0599      	lsls	r1, r3, #22
 800a43a:	d402      	bmi.n	800a442 <_fflush_r+0x32>
 800a43c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a43e:	f7fe fb0e 	bl	8008a5e <__retarget_lock_acquire_recursive>
 800a442:	4628      	mov	r0, r5
 800a444:	4621      	mov	r1, r4
 800a446:	f7ff ff5d 	bl	800a304 <__sflush_r>
 800a44a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a44c:	07da      	lsls	r2, r3, #31
 800a44e:	4605      	mov	r5, r0
 800a450:	d4e4      	bmi.n	800a41c <_fflush_r+0xc>
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	059b      	lsls	r3, r3, #22
 800a456:	d4e1      	bmi.n	800a41c <_fflush_r+0xc>
 800a458:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a45a:	f7fe fb01 	bl	8008a60 <__retarget_lock_release_recursive>
 800a45e:	e7dd      	b.n	800a41c <_fflush_r+0xc>

0800a460 <memmove>:
 800a460:	4288      	cmp	r0, r1
 800a462:	b510      	push	{r4, lr}
 800a464:	eb01 0402 	add.w	r4, r1, r2
 800a468:	d902      	bls.n	800a470 <memmove+0x10>
 800a46a:	4284      	cmp	r4, r0
 800a46c:	4623      	mov	r3, r4
 800a46e:	d807      	bhi.n	800a480 <memmove+0x20>
 800a470:	1e43      	subs	r3, r0, #1
 800a472:	42a1      	cmp	r1, r4
 800a474:	d008      	beq.n	800a488 <memmove+0x28>
 800a476:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a47a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a47e:	e7f8      	b.n	800a472 <memmove+0x12>
 800a480:	4402      	add	r2, r0
 800a482:	4601      	mov	r1, r0
 800a484:	428a      	cmp	r2, r1
 800a486:	d100      	bne.n	800a48a <memmove+0x2a>
 800a488:	bd10      	pop	{r4, pc}
 800a48a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a48e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a492:	e7f7      	b.n	800a484 <memmove+0x24>

0800a494 <_sbrk_r>:
 800a494:	b538      	push	{r3, r4, r5, lr}
 800a496:	4d06      	ldr	r5, [pc, #24]	; (800a4b0 <_sbrk_r+0x1c>)
 800a498:	2300      	movs	r3, #0
 800a49a:	4604      	mov	r4, r0
 800a49c:	4608      	mov	r0, r1
 800a49e:	602b      	str	r3, [r5, #0]
 800a4a0:	f7f7 faca 	bl	8001a38 <_sbrk>
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d102      	bne.n	800a4ae <_sbrk_r+0x1a>
 800a4a8:	682b      	ldr	r3, [r5, #0]
 800a4aa:	b103      	cbz	r3, 800a4ae <_sbrk_r+0x1a>
 800a4ac:	6023      	str	r3, [r4, #0]
 800a4ae:	bd38      	pop	{r3, r4, r5, pc}
 800a4b0:	200005e4 	.word	0x200005e4

0800a4b4 <memcpy>:
 800a4b4:	440a      	add	r2, r1
 800a4b6:	4291      	cmp	r1, r2
 800a4b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4bc:	d100      	bne.n	800a4c0 <memcpy+0xc>
 800a4be:	4770      	bx	lr
 800a4c0:	b510      	push	{r4, lr}
 800a4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4ca:	4291      	cmp	r1, r2
 800a4cc:	d1f9      	bne.n	800a4c2 <memcpy+0xe>
 800a4ce:	bd10      	pop	{r4, pc}

0800a4d0 <__assert_func>:
 800a4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4d2:	4614      	mov	r4, r2
 800a4d4:	461a      	mov	r2, r3
 800a4d6:	4b09      	ldr	r3, [pc, #36]	; (800a4fc <__assert_func+0x2c>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	4605      	mov	r5, r0
 800a4dc:	68d8      	ldr	r0, [r3, #12]
 800a4de:	b14c      	cbz	r4, 800a4f4 <__assert_func+0x24>
 800a4e0:	4b07      	ldr	r3, [pc, #28]	; (800a500 <__assert_func+0x30>)
 800a4e2:	9100      	str	r1, [sp, #0]
 800a4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4e8:	4906      	ldr	r1, [pc, #24]	; (800a504 <__assert_func+0x34>)
 800a4ea:	462b      	mov	r3, r5
 800a4ec:	f000 f872 	bl	800a5d4 <fiprintf>
 800a4f0:	f000 f882 	bl	800a5f8 <abort>
 800a4f4:	4b04      	ldr	r3, [pc, #16]	; (800a508 <__assert_func+0x38>)
 800a4f6:	461c      	mov	r4, r3
 800a4f8:	e7f3      	b.n	800a4e2 <__assert_func+0x12>
 800a4fa:	bf00      	nop
 800a4fc:	20000068 	.word	0x20000068
 800a500:	0800ae3f 	.word	0x0800ae3f
 800a504:	0800ae4c 	.word	0x0800ae4c
 800a508:	0800ae7a 	.word	0x0800ae7a

0800a50c <_calloc_r>:
 800a50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a50e:	fba1 2402 	umull	r2, r4, r1, r2
 800a512:	b94c      	cbnz	r4, 800a528 <_calloc_r+0x1c>
 800a514:	4611      	mov	r1, r2
 800a516:	9201      	str	r2, [sp, #4]
 800a518:	f7ff f994 	bl	8009844 <_malloc_r>
 800a51c:	9a01      	ldr	r2, [sp, #4]
 800a51e:	4605      	mov	r5, r0
 800a520:	b930      	cbnz	r0, 800a530 <_calloc_r+0x24>
 800a522:	4628      	mov	r0, r5
 800a524:	b003      	add	sp, #12
 800a526:	bd30      	pop	{r4, r5, pc}
 800a528:	220c      	movs	r2, #12
 800a52a:	6002      	str	r2, [r0, #0]
 800a52c:	2500      	movs	r5, #0
 800a52e:	e7f8      	b.n	800a522 <_calloc_r+0x16>
 800a530:	4621      	mov	r1, r4
 800a532:	f7fe fa16 	bl	8008962 <memset>
 800a536:	e7f4      	b.n	800a522 <_calloc_r+0x16>

0800a538 <__ascii_mbtowc>:
 800a538:	b082      	sub	sp, #8
 800a53a:	b901      	cbnz	r1, 800a53e <__ascii_mbtowc+0x6>
 800a53c:	a901      	add	r1, sp, #4
 800a53e:	b142      	cbz	r2, 800a552 <__ascii_mbtowc+0x1a>
 800a540:	b14b      	cbz	r3, 800a556 <__ascii_mbtowc+0x1e>
 800a542:	7813      	ldrb	r3, [r2, #0]
 800a544:	600b      	str	r3, [r1, #0]
 800a546:	7812      	ldrb	r2, [r2, #0]
 800a548:	1e10      	subs	r0, r2, #0
 800a54a:	bf18      	it	ne
 800a54c:	2001      	movne	r0, #1
 800a54e:	b002      	add	sp, #8
 800a550:	4770      	bx	lr
 800a552:	4610      	mov	r0, r2
 800a554:	e7fb      	b.n	800a54e <__ascii_mbtowc+0x16>
 800a556:	f06f 0001 	mvn.w	r0, #1
 800a55a:	e7f8      	b.n	800a54e <__ascii_mbtowc+0x16>

0800a55c <_realloc_r>:
 800a55c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a560:	4680      	mov	r8, r0
 800a562:	4614      	mov	r4, r2
 800a564:	460e      	mov	r6, r1
 800a566:	b921      	cbnz	r1, 800a572 <_realloc_r+0x16>
 800a568:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a56c:	4611      	mov	r1, r2
 800a56e:	f7ff b969 	b.w	8009844 <_malloc_r>
 800a572:	b92a      	cbnz	r2, 800a580 <_realloc_r+0x24>
 800a574:	f7ff f8f2 	bl	800975c <_free_r>
 800a578:	4625      	mov	r5, r4
 800a57a:	4628      	mov	r0, r5
 800a57c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a580:	f000 f841 	bl	800a606 <_malloc_usable_size_r>
 800a584:	4284      	cmp	r4, r0
 800a586:	4607      	mov	r7, r0
 800a588:	d802      	bhi.n	800a590 <_realloc_r+0x34>
 800a58a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a58e:	d812      	bhi.n	800a5b6 <_realloc_r+0x5a>
 800a590:	4621      	mov	r1, r4
 800a592:	4640      	mov	r0, r8
 800a594:	f7ff f956 	bl	8009844 <_malloc_r>
 800a598:	4605      	mov	r5, r0
 800a59a:	2800      	cmp	r0, #0
 800a59c:	d0ed      	beq.n	800a57a <_realloc_r+0x1e>
 800a59e:	42bc      	cmp	r4, r7
 800a5a0:	4622      	mov	r2, r4
 800a5a2:	4631      	mov	r1, r6
 800a5a4:	bf28      	it	cs
 800a5a6:	463a      	movcs	r2, r7
 800a5a8:	f7ff ff84 	bl	800a4b4 <memcpy>
 800a5ac:	4631      	mov	r1, r6
 800a5ae:	4640      	mov	r0, r8
 800a5b0:	f7ff f8d4 	bl	800975c <_free_r>
 800a5b4:	e7e1      	b.n	800a57a <_realloc_r+0x1e>
 800a5b6:	4635      	mov	r5, r6
 800a5b8:	e7df      	b.n	800a57a <_realloc_r+0x1e>

0800a5ba <__ascii_wctomb>:
 800a5ba:	b149      	cbz	r1, 800a5d0 <__ascii_wctomb+0x16>
 800a5bc:	2aff      	cmp	r2, #255	; 0xff
 800a5be:	bf85      	ittet	hi
 800a5c0:	238a      	movhi	r3, #138	; 0x8a
 800a5c2:	6003      	strhi	r3, [r0, #0]
 800a5c4:	700a      	strbls	r2, [r1, #0]
 800a5c6:	f04f 30ff 	movhi.w	r0, #4294967295
 800a5ca:	bf98      	it	ls
 800a5cc:	2001      	movls	r0, #1
 800a5ce:	4770      	bx	lr
 800a5d0:	4608      	mov	r0, r1
 800a5d2:	4770      	bx	lr

0800a5d4 <fiprintf>:
 800a5d4:	b40e      	push	{r1, r2, r3}
 800a5d6:	b503      	push	{r0, r1, lr}
 800a5d8:	4601      	mov	r1, r0
 800a5da:	ab03      	add	r3, sp, #12
 800a5dc:	4805      	ldr	r0, [pc, #20]	; (800a5f4 <fiprintf+0x20>)
 800a5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800a5e2:	6800      	ldr	r0, [r0, #0]
 800a5e4:	9301      	str	r3, [sp, #4]
 800a5e6:	f000 f83f 	bl	800a668 <_vfiprintf_r>
 800a5ea:	b002      	add	sp, #8
 800a5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a5f0:	b003      	add	sp, #12
 800a5f2:	4770      	bx	lr
 800a5f4:	20000068 	.word	0x20000068

0800a5f8 <abort>:
 800a5f8:	b508      	push	{r3, lr}
 800a5fa:	2006      	movs	r0, #6
 800a5fc:	f000 fa0c 	bl	800aa18 <raise>
 800a600:	2001      	movs	r0, #1
 800a602:	f7f7 f9a1 	bl	8001948 <_exit>

0800a606 <_malloc_usable_size_r>:
 800a606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a60a:	1f18      	subs	r0, r3, #4
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	bfbc      	itt	lt
 800a610:	580b      	ldrlt	r3, [r1, r0]
 800a612:	18c0      	addlt	r0, r0, r3
 800a614:	4770      	bx	lr

0800a616 <__sfputc_r>:
 800a616:	6893      	ldr	r3, [r2, #8]
 800a618:	3b01      	subs	r3, #1
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	b410      	push	{r4}
 800a61e:	6093      	str	r3, [r2, #8]
 800a620:	da08      	bge.n	800a634 <__sfputc_r+0x1e>
 800a622:	6994      	ldr	r4, [r2, #24]
 800a624:	42a3      	cmp	r3, r4
 800a626:	db01      	blt.n	800a62c <__sfputc_r+0x16>
 800a628:	290a      	cmp	r1, #10
 800a62a:	d103      	bne.n	800a634 <__sfputc_r+0x1e>
 800a62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a630:	f000 b934 	b.w	800a89c <__swbuf_r>
 800a634:	6813      	ldr	r3, [r2, #0]
 800a636:	1c58      	adds	r0, r3, #1
 800a638:	6010      	str	r0, [r2, #0]
 800a63a:	7019      	strb	r1, [r3, #0]
 800a63c:	4608      	mov	r0, r1
 800a63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <__sfputs_r>:
 800a644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a646:	4606      	mov	r6, r0
 800a648:	460f      	mov	r7, r1
 800a64a:	4614      	mov	r4, r2
 800a64c:	18d5      	adds	r5, r2, r3
 800a64e:	42ac      	cmp	r4, r5
 800a650:	d101      	bne.n	800a656 <__sfputs_r+0x12>
 800a652:	2000      	movs	r0, #0
 800a654:	e007      	b.n	800a666 <__sfputs_r+0x22>
 800a656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65a:	463a      	mov	r2, r7
 800a65c:	4630      	mov	r0, r6
 800a65e:	f7ff ffda 	bl	800a616 <__sfputc_r>
 800a662:	1c43      	adds	r3, r0, #1
 800a664:	d1f3      	bne.n	800a64e <__sfputs_r+0xa>
 800a666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a668 <_vfiprintf_r>:
 800a668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a66c:	460d      	mov	r5, r1
 800a66e:	b09d      	sub	sp, #116	; 0x74
 800a670:	4614      	mov	r4, r2
 800a672:	4698      	mov	r8, r3
 800a674:	4606      	mov	r6, r0
 800a676:	b118      	cbz	r0, 800a680 <_vfiprintf_r+0x18>
 800a678:	6a03      	ldr	r3, [r0, #32]
 800a67a:	b90b      	cbnz	r3, 800a680 <_vfiprintf_r+0x18>
 800a67c:	f7fe f8d8 	bl	8008830 <__sinit>
 800a680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a682:	07d9      	lsls	r1, r3, #31
 800a684:	d405      	bmi.n	800a692 <_vfiprintf_r+0x2a>
 800a686:	89ab      	ldrh	r3, [r5, #12]
 800a688:	059a      	lsls	r2, r3, #22
 800a68a:	d402      	bmi.n	800a692 <_vfiprintf_r+0x2a>
 800a68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a68e:	f7fe f9e6 	bl	8008a5e <__retarget_lock_acquire_recursive>
 800a692:	89ab      	ldrh	r3, [r5, #12]
 800a694:	071b      	lsls	r3, r3, #28
 800a696:	d501      	bpl.n	800a69c <_vfiprintf_r+0x34>
 800a698:	692b      	ldr	r3, [r5, #16]
 800a69a:	b99b      	cbnz	r3, 800a6c4 <_vfiprintf_r+0x5c>
 800a69c:	4629      	mov	r1, r5
 800a69e:	4630      	mov	r0, r6
 800a6a0:	f000 f93a 	bl	800a918 <__swsetup_r>
 800a6a4:	b170      	cbz	r0, 800a6c4 <_vfiprintf_r+0x5c>
 800a6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a6a8:	07dc      	lsls	r4, r3, #31
 800a6aa:	d504      	bpl.n	800a6b6 <_vfiprintf_r+0x4e>
 800a6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800a6b0:	b01d      	add	sp, #116	; 0x74
 800a6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b6:	89ab      	ldrh	r3, [r5, #12]
 800a6b8:	0598      	lsls	r0, r3, #22
 800a6ba:	d4f7      	bmi.n	800a6ac <_vfiprintf_r+0x44>
 800a6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a6be:	f7fe f9cf 	bl	8008a60 <__retarget_lock_release_recursive>
 800a6c2:	e7f3      	b.n	800a6ac <_vfiprintf_r+0x44>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6c8:	2320      	movs	r3, #32
 800a6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800a6d2:	2330      	movs	r3, #48	; 0x30
 800a6d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a888 <_vfiprintf_r+0x220>
 800a6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a6dc:	f04f 0901 	mov.w	r9, #1
 800a6e0:	4623      	mov	r3, r4
 800a6e2:	469a      	mov	sl, r3
 800a6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a6e8:	b10a      	cbz	r2, 800a6ee <_vfiprintf_r+0x86>
 800a6ea:	2a25      	cmp	r2, #37	; 0x25
 800a6ec:	d1f9      	bne.n	800a6e2 <_vfiprintf_r+0x7a>
 800a6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800a6f2:	d00b      	beq.n	800a70c <_vfiprintf_r+0xa4>
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	4622      	mov	r2, r4
 800a6f8:	4629      	mov	r1, r5
 800a6fa:	4630      	mov	r0, r6
 800a6fc:	f7ff ffa2 	bl	800a644 <__sfputs_r>
 800a700:	3001      	adds	r0, #1
 800a702:	f000 80a9 	beq.w	800a858 <_vfiprintf_r+0x1f0>
 800a706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a708:	445a      	add	r2, fp
 800a70a:	9209      	str	r2, [sp, #36]	; 0x24
 800a70c:	f89a 3000 	ldrb.w	r3, [sl]
 800a710:	2b00      	cmp	r3, #0
 800a712:	f000 80a1 	beq.w	800a858 <_vfiprintf_r+0x1f0>
 800a716:	2300      	movs	r3, #0
 800a718:	f04f 32ff 	mov.w	r2, #4294967295
 800a71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a720:	f10a 0a01 	add.w	sl, sl, #1
 800a724:	9304      	str	r3, [sp, #16]
 800a726:	9307      	str	r3, [sp, #28]
 800a728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a72c:	931a      	str	r3, [sp, #104]	; 0x68
 800a72e:	4654      	mov	r4, sl
 800a730:	2205      	movs	r2, #5
 800a732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a736:	4854      	ldr	r0, [pc, #336]	; (800a888 <_vfiprintf_r+0x220>)
 800a738:	f7f5 fd4a 	bl	80001d0 <memchr>
 800a73c:	9a04      	ldr	r2, [sp, #16]
 800a73e:	b9d8      	cbnz	r0, 800a778 <_vfiprintf_r+0x110>
 800a740:	06d1      	lsls	r1, r2, #27
 800a742:	bf44      	itt	mi
 800a744:	2320      	movmi	r3, #32
 800a746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a74a:	0713      	lsls	r3, r2, #28
 800a74c:	bf44      	itt	mi
 800a74e:	232b      	movmi	r3, #43	; 0x2b
 800a750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a754:	f89a 3000 	ldrb.w	r3, [sl]
 800a758:	2b2a      	cmp	r3, #42	; 0x2a
 800a75a:	d015      	beq.n	800a788 <_vfiprintf_r+0x120>
 800a75c:	9a07      	ldr	r2, [sp, #28]
 800a75e:	4654      	mov	r4, sl
 800a760:	2000      	movs	r0, #0
 800a762:	f04f 0c0a 	mov.w	ip, #10
 800a766:	4621      	mov	r1, r4
 800a768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a76c:	3b30      	subs	r3, #48	; 0x30
 800a76e:	2b09      	cmp	r3, #9
 800a770:	d94d      	bls.n	800a80e <_vfiprintf_r+0x1a6>
 800a772:	b1b0      	cbz	r0, 800a7a2 <_vfiprintf_r+0x13a>
 800a774:	9207      	str	r2, [sp, #28]
 800a776:	e014      	b.n	800a7a2 <_vfiprintf_r+0x13a>
 800a778:	eba0 0308 	sub.w	r3, r0, r8
 800a77c:	fa09 f303 	lsl.w	r3, r9, r3
 800a780:	4313      	orrs	r3, r2
 800a782:	9304      	str	r3, [sp, #16]
 800a784:	46a2      	mov	sl, r4
 800a786:	e7d2      	b.n	800a72e <_vfiprintf_r+0xc6>
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	1d19      	adds	r1, r3, #4
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	9103      	str	r1, [sp, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfbb      	ittet	lt
 800a794:	425b      	neglt	r3, r3
 800a796:	f042 0202 	orrlt.w	r2, r2, #2
 800a79a:	9307      	strge	r3, [sp, #28]
 800a79c:	9307      	strlt	r3, [sp, #28]
 800a79e:	bfb8      	it	lt
 800a7a0:	9204      	strlt	r2, [sp, #16]
 800a7a2:	7823      	ldrb	r3, [r4, #0]
 800a7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800a7a6:	d10c      	bne.n	800a7c2 <_vfiprintf_r+0x15a>
 800a7a8:	7863      	ldrb	r3, [r4, #1]
 800a7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800a7ac:	d134      	bne.n	800a818 <_vfiprintf_r+0x1b0>
 800a7ae:	9b03      	ldr	r3, [sp, #12]
 800a7b0:	1d1a      	adds	r2, r3, #4
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	9203      	str	r2, [sp, #12]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	bfb8      	it	lt
 800a7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7be:	3402      	adds	r4, #2
 800a7c0:	9305      	str	r3, [sp, #20]
 800a7c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a898 <_vfiprintf_r+0x230>
 800a7c6:	7821      	ldrb	r1, [r4, #0]
 800a7c8:	2203      	movs	r2, #3
 800a7ca:	4650      	mov	r0, sl
 800a7cc:	f7f5 fd00 	bl	80001d0 <memchr>
 800a7d0:	b138      	cbz	r0, 800a7e2 <_vfiprintf_r+0x17a>
 800a7d2:	9b04      	ldr	r3, [sp, #16]
 800a7d4:	eba0 000a 	sub.w	r0, r0, sl
 800a7d8:	2240      	movs	r2, #64	; 0x40
 800a7da:	4082      	lsls	r2, r0
 800a7dc:	4313      	orrs	r3, r2
 800a7de:	3401      	adds	r4, #1
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7e6:	4829      	ldr	r0, [pc, #164]	; (800a88c <_vfiprintf_r+0x224>)
 800a7e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a7ec:	2206      	movs	r2, #6
 800a7ee:	f7f5 fcef 	bl	80001d0 <memchr>
 800a7f2:	2800      	cmp	r0, #0
 800a7f4:	d03f      	beq.n	800a876 <_vfiprintf_r+0x20e>
 800a7f6:	4b26      	ldr	r3, [pc, #152]	; (800a890 <_vfiprintf_r+0x228>)
 800a7f8:	bb1b      	cbnz	r3, 800a842 <_vfiprintf_r+0x1da>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	3307      	adds	r3, #7
 800a7fe:	f023 0307 	bic.w	r3, r3, #7
 800a802:	3308      	adds	r3, #8
 800a804:	9303      	str	r3, [sp, #12]
 800a806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a808:	443b      	add	r3, r7
 800a80a:	9309      	str	r3, [sp, #36]	; 0x24
 800a80c:	e768      	b.n	800a6e0 <_vfiprintf_r+0x78>
 800a80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a812:	460c      	mov	r4, r1
 800a814:	2001      	movs	r0, #1
 800a816:	e7a6      	b.n	800a766 <_vfiprintf_r+0xfe>
 800a818:	2300      	movs	r3, #0
 800a81a:	3401      	adds	r4, #1
 800a81c:	9305      	str	r3, [sp, #20]
 800a81e:	4619      	mov	r1, r3
 800a820:	f04f 0c0a 	mov.w	ip, #10
 800a824:	4620      	mov	r0, r4
 800a826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a82a:	3a30      	subs	r2, #48	; 0x30
 800a82c:	2a09      	cmp	r2, #9
 800a82e:	d903      	bls.n	800a838 <_vfiprintf_r+0x1d0>
 800a830:	2b00      	cmp	r3, #0
 800a832:	d0c6      	beq.n	800a7c2 <_vfiprintf_r+0x15a>
 800a834:	9105      	str	r1, [sp, #20]
 800a836:	e7c4      	b.n	800a7c2 <_vfiprintf_r+0x15a>
 800a838:	fb0c 2101 	mla	r1, ip, r1, r2
 800a83c:	4604      	mov	r4, r0
 800a83e:	2301      	movs	r3, #1
 800a840:	e7f0      	b.n	800a824 <_vfiprintf_r+0x1bc>
 800a842:	ab03      	add	r3, sp, #12
 800a844:	9300      	str	r3, [sp, #0]
 800a846:	462a      	mov	r2, r5
 800a848:	4b12      	ldr	r3, [pc, #72]	; (800a894 <_vfiprintf_r+0x22c>)
 800a84a:	a904      	add	r1, sp, #16
 800a84c:	4630      	mov	r0, r6
 800a84e:	f7fd fb9d 	bl	8007f8c <_printf_float>
 800a852:	4607      	mov	r7, r0
 800a854:	1c78      	adds	r0, r7, #1
 800a856:	d1d6      	bne.n	800a806 <_vfiprintf_r+0x19e>
 800a858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a85a:	07d9      	lsls	r1, r3, #31
 800a85c:	d405      	bmi.n	800a86a <_vfiprintf_r+0x202>
 800a85e:	89ab      	ldrh	r3, [r5, #12]
 800a860:	059a      	lsls	r2, r3, #22
 800a862:	d402      	bmi.n	800a86a <_vfiprintf_r+0x202>
 800a864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a866:	f7fe f8fb 	bl	8008a60 <__retarget_lock_release_recursive>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	065b      	lsls	r3, r3, #25
 800a86e:	f53f af1d 	bmi.w	800a6ac <_vfiprintf_r+0x44>
 800a872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a874:	e71c      	b.n	800a6b0 <_vfiprintf_r+0x48>
 800a876:	ab03      	add	r3, sp, #12
 800a878:	9300      	str	r3, [sp, #0]
 800a87a:	462a      	mov	r2, r5
 800a87c:	4b05      	ldr	r3, [pc, #20]	; (800a894 <_vfiprintf_r+0x22c>)
 800a87e:	a904      	add	r1, sp, #16
 800a880:	4630      	mov	r0, r6
 800a882:	f7fd fe27 	bl	80084d4 <_printf_i>
 800a886:	e7e4      	b.n	800a852 <_vfiprintf_r+0x1ea>
 800a888:	0800ae24 	.word	0x0800ae24
 800a88c:	0800ae2e 	.word	0x0800ae2e
 800a890:	08007f8d 	.word	0x08007f8d
 800a894:	0800a645 	.word	0x0800a645
 800a898:	0800ae2a 	.word	0x0800ae2a

0800a89c <__swbuf_r>:
 800a89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a89e:	460e      	mov	r6, r1
 800a8a0:	4614      	mov	r4, r2
 800a8a2:	4605      	mov	r5, r0
 800a8a4:	b118      	cbz	r0, 800a8ae <__swbuf_r+0x12>
 800a8a6:	6a03      	ldr	r3, [r0, #32]
 800a8a8:	b90b      	cbnz	r3, 800a8ae <__swbuf_r+0x12>
 800a8aa:	f7fd ffc1 	bl	8008830 <__sinit>
 800a8ae:	69a3      	ldr	r3, [r4, #24]
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	071a      	lsls	r2, r3, #28
 800a8b6:	d525      	bpl.n	800a904 <__swbuf_r+0x68>
 800a8b8:	6923      	ldr	r3, [r4, #16]
 800a8ba:	b31b      	cbz	r3, 800a904 <__swbuf_r+0x68>
 800a8bc:	6823      	ldr	r3, [r4, #0]
 800a8be:	6922      	ldr	r2, [r4, #16]
 800a8c0:	1a98      	subs	r0, r3, r2
 800a8c2:	6963      	ldr	r3, [r4, #20]
 800a8c4:	b2f6      	uxtb	r6, r6
 800a8c6:	4283      	cmp	r3, r0
 800a8c8:	4637      	mov	r7, r6
 800a8ca:	dc04      	bgt.n	800a8d6 <__swbuf_r+0x3a>
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4628      	mov	r0, r5
 800a8d0:	f7ff fd9e 	bl	800a410 <_fflush_r>
 800a8d4:	b9e0      	cbnz	r0, 800a910 <__swbuf_r+0x74>
 800a8d6:	68a3      	ldr	r3, [r4, #8]
 800a8d8:	3b01      	subs	r3, #1
 800a8da:	60a3      	str	r3, [r4, #8]
 800a8dc:	6823      	ldr	r3, [r4, #0]
 800a8de:	1c5a      	adds	r2, r3, #1
 800a8e0:	6022      	str	r2, [r4, #0]
 800a8e2:	701e      	strb	r6, [r3, #0]
 800a8e4:	6962      	ldr	r2, [r4, #20]
 800a8e6:	1c43      	adds	r3, r0, #1
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d004      	beq.n	800a8f6 <__swbuf_r+0x5a>
 800a8ec:	89a3      	ldrh	r3, [r4, #12]
 800a8ee:	07db      	lsls	r3, r3, #31
 800a8f0:	d506      	bpl.n	800a900 <__swbuf_r+0x64>
 800a8f2:	2e0a      	cmp	r6, #10
 800a8f4:	d104      	bne.n	800a900 <__swbuf_r+0x64>
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	4628      	mov	r0, r5
 800a8fa:	f7ff fd89 	bl	800a410 <_fflush_r>
 800a8fe:	b938      	cbnz	r0, 800a910 <__swbuf_r+0x74>
 800a900:	4638      	mov	r0, r7
 800a902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a904:	4621      	mov	r1, r4
 800a906:	4628      	mov	r0, r5
 800a908:	f000 f806 	bl	800a918 <__swsetup_r>
 800a90c:	2800      	cmp	r0, #0
 800a90e:	d0d5      	beq.n	800a8bc <__swbuf_r+0x20>
 800a910:	f04f 37ff 	mov.w	r7, #4294967295
 800a914:	e7f4      	b.n	800a900 <__swbuf_r+0x64>
	...

0800a918 <__swsetup_r>:
 800a918:	b538      	push	{r3, r4, r5, lr}
 800a91a:	4b2a      	ldr	r3, [pc, #168]	; (800a9c4 <__swsetup_r+0xac>)
 800a91c:	4605      	mov	r5, r0
 800a91e:	6818      	ldr	r0, [r3, #0]
 800a920:	460c      	mov	r4, r1
 800a922:	b118      	cbz	r0, 800a92c <__swsetup_r+0x14>
 800a924:	6a03      	ldr	r3, [r0, #32]
 800a926:	b90b      	cbnz	r3, 800a92c <__swsetup_r+0x14>
 800a928:	f7fd ff82 	bl	8008830 <__sinit>
 800a92c:	89a3      	ldrh	r3, [r4, #12]
 800a92e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a932:	0718      	lsls	r0, r3, #28
 800a934:	d422      	bmi.n	800a97c <__swsetup_r+0x64>
 800a936:	06d9      	lsls	r1, r3, #27
 800a938:	d407      	bmi.n	800a94a <__swsetup_r+0x32>
 800a93a:	2309      	movs	r3, #9
 800a93c:	602b      	str	r3, [r5, #0]
 800a93e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a942:	81a3      	strh	r3, [r4, #12]
 800a944:	f04f 30ff 	mov.w	r0, #4294967295
 800a948:	e034      	b.n	800a9b4 <__swsetup_r+0x9c>
 800a94a:	0758      	lsls	r0, r3, #29
 800a94c:	d512      	bpl.n	800a974 <__swsetup_r+0x5c>
 800a94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a950:	b141      	cbz	r1, 800a964 <__swsetup_r+0x4c>
 800a952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a956:	4299      	cmp	r1, r3
 800a958:	d002      	beq.n	800a960 <__swsetup_r+0x48>
 800a95a:	4628      	mov	r0, r5
 800a95c:	f7fe fefe 	bl	800975c <_free_r>
 800a960:	2300      	movs	r3, #0
 800a962:	6363      	str	r3, [r4, #52]	; 0x34
 800a964:	89a3      	ldrh	r3, [r4, #12]
 800a966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a96a:	81a3      	strh	r3, [r4, #12]
 800a96c:	2300      	movs	r3, #0
 800a96e:	6063      	str	r3, [r4, #4]
 800a970:	6923      	ldr	r3, [r4, #16]
 800a972:	6023      	str	r3, [r4, #0]
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f043 0308 	orr.w	r3, r3, #8
 800a97a:	81a3      	strh	r3, [r4, #12]
 800a97c:	6923      	ldr	r3, [r4, #16]
 800a97e:	b94b      	cbnz	r3, 800a994 <__swsetup_r+0x7c>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a98a:	d003      	beq.n	800a994 <__swsetup_r+0x7c>
 800a98c:	4621      	mov	r1, r4
 800a98e:	4628      	mov	r0, r5
 800a990:	f000 f884 	bl	800aa9c <__smakebuf_r>
 800a994:	89a0      	ldrh	r0, [r4, #12]
 800a996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a99a:	f010 0301 	ands.w	r3, r0, #1
 800a99e:	d00a      	beq.n	800a9b6 <__swsetup_r+0x9e>
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	60a3      	str	r3, [r4, #8]
 800a9a4:	6963      	ldr	r3, [r4, #20]
 800a9a6:	425b      	negs	r3, r3
 800a9a8:	61a3      	str	r3, [r4, #24]
 800a9aa:	6923      	ldr	r3, [r4, #16]
 800a9ac:	b943      	cbnz	r3, 800a9c0 <__swsetup_r+0xa8>
 800a9ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a9b2:	d1c4      	bne.n	800a93e <__swsetup_r+0x26>
 800a9b4:	bd38      	pop	{r3, r4, r5, pc}
 800a9b6:	0781      	lsls	r1, r0, #30
 800a9b8:	bf58      	it	pl
 800a9ba:	6963      	ldrpl	r3, [r4, #20]
 800a9bc:	60a3      	str	r3, [r4, #8]
 800a9be:	e7f4      	b.n	800a9aa <__swsetup_r+0x92>
 800a9c0:	2000      	movs	r0, #0
 800a9c2:	e7f7      	b.n	800a9b4 <__swsetup_r+0x9c>
 800a9c4:	20000068 	.word	0x20000068

0800a9c8 <_raise_r>:
 800a9c8:	291f      	cmp	r1, #31
 800a9ca:	b538      	push	{r3, r4, r5, lr}
 800a9cc:	4604      	mov	r4, r0
 800a9ce:	460d      	mov	r5, r1
 800a9d0:	d904      	bls.n	800a9dc <_raise_r+0x14>
 800a9d2:	2316      	movs	r3, #22
 800a9d4:	6003      	str	r3, [r0, #0]
 800a9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a9de:	b112      	cbz	r2, 800a9e6 <_raise_r+0x1e>
 800a9e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a9e4:	b94b      	cbnz	r3, 800a9fa <_raise_r+0x32>
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f000 f830 	bl	800aa4c <_getpid_r>
 800a9ec:	462a      	mov	r2, r5
 800a9ee:	4601      	mov	r1, r0
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a9f6:	f000 b817 	b.w	800aa28 <_kill_r>
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	d00a      	beq.n	800aa14 <_raise_r+0x4c>
 800a9fe:	1c59      	adds	r1, r3, #1
 800aa00:	d103      	bne.n	800aa0a <_raise_r+0x42>
 800aa02:	2316      	movs	r3, #22
 800aa04:	6003      	str	r3, [r0, #0]
 800aa06:	2001      	movs	r0, #1
 800aa08:	e7e7      	b.n	800a9da <_raise_r+0x12>
 800aa0a:	2400      	movs	r4, #0
 800aa0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa10:	4628      	mov	r0, r5
 800aa12:	4798      	blx	r3
 800aa14:	2000      	movs	r0, #0
 800aa16:	e7e0      	b.n	800a9da <_raise_r+0x12>

0800aa18 <raise>:
 800aa18:	4b02      	ldr	r3, [pc, #8]	; (800aa24 <raise+0xc>)
 800aa1a:	4601      	mov	r1, r0
 800aa1c:	6818      	ldr	r0, [r3, #0]
 800aa1e:	f7ff bfd3 	b.w	800a9c8 <_raise_r>
 800aa22:	bf00      	nop
 800aa24:	20000068 	.word	0x20000068

0800aa28 <_kill_r>:
 800aa28:	b538      	push	{r3, r4, r5, lr}
 800aa2a:	4d07      	ldr	r5, [pc, #28]	; (800aa48 <_kill_r+0x20>)
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	4604      	mov	r4, r0
 800aa30:	4608      	mov	r0, r1
 800aa32:	4611      	mov	r1, r2
 800aa34:	602b      	str	r3, [r5, #0]
 800aa36:	f7f6 ff77 	bl	8001928 <_kill>
 800aa3a:	1c43      	adds	r3, r0, #1
 800aa3c:	d102      	bne.n	800aa44 <_kill_r+0x1c>
 800aa3e:	682b      	ldr	r3, [r5, #0]
 800aa40:	b103      	cbz	r3, 800aa44 <_kill_r+0x1c>
 800aa42:	6023      	str	r3, [r4, #0]
 800aa44:	bd38      	pop	{r3, r4, r5, pc}
 800aa46:	bf00      	nop
 800aa48:	200005e4 	.word	0x200005e4

0800aa4c <_getpid_r>:
 800aa4c:	f7f6 bf64 	b.w	8001918 <_getpid>

0800aa50 <__swhatbuf_r>:
 800aa50:	b570      	push	{r4, r5, r6, lr}
 800aa52:	460c      	mov	r4, r1
 800aa54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa58:	2900      	cmp	r1, #0
 800aa5a:	b096      	sub	sp, #88	; 0x58
 800aa5c:	4615      	mov	r5, r2
 800aa5e:	461e      	mov	r6, r3
 800aa60:	da0d      	bge.n	800aa7e <__swhatbuf_r+0x2e>
 800aa62:	89a3      	ldrh	r3, [r4, #12]
 800aa64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800aa68:	f04f 0100 	mov.w	r1, #0
 800aa6c:	bf0c      	ite	eq
 800aa6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800aa72:	2340      	movne	r3, #64	; 0x40
 800aa74:	2000      	movs	r0, #0
 800aa76:	6031      	str	r1, [r6, #0]
 800aa78:	602b      	str	r3, [r5, #0]
 800aa7a:	b016      	add	sp, #88	; 0x58
 800aa7c:	bd70      	pop	{r4, r5, r6, pc}
 800aa7e:	466a      	mov	r2, sp
 800aa80:	f000 f848 	bl	800ab14 <_fstat_r>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	dbec      	blt.n	800aa62 <__swhatbuf_r+0x12>
 800aa88:	9901      	ldr	r1, [sp, #4]
 800aa8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800aa8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800aa92:	4259      	negs	r1, r3
 800aa94:	4159      	adcs	r1, r3
 800aa96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aa9a:	e7eb      	b.n	800aa74 <__swhatbuf_r+0x24>

0800aa9c <__smakebuf_r>:
 800aa9c:	898b      	ldrh	r3, [r1, #12]
 800aa9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aaa0:	079d      	lsls	r5, r3, #30
 800aaa2:	4606      	mov	r6, r0
 800aaa4:	460c      	mov	r4, r1
 800aaa6:	d507      	bpl.n	800aab8 <__smakebuf_r+0x1c>
 800aaa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aaac:	6023      	str	r3, [r4, #0]
 800aaae:	6123      	str	r3, [r4, #16]
 800aab0:	2301      	movs	r3, #1
 800aab2:	6163      	str	r3, [r4, #20]
 800aab4:	b002      	add	sp, #8
 800aab6:	bd70      	pop	{r4, r5, r6, pc}
 800aab8:	ab01      	add	r3, sp, #4
 800aaba:	466a      	mov	r2, sp
 800aabc:	f7ff ffc8 	bl	800aa50 <__swhatbuf_r>
 800aac0:	9900      	ldr	r1, [sp, #0]
 800aac2:	4605      	mov	r5, r0
 800aac4:	4630      	mov	r0, r6
 800aac6:	f7fe febd 	bl	8009844 <_malloc_r>
 800aaca:	b948      	cbnz	r0, 800aae0 <__smakebuf_r+0x44>
 800aacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aad0:	059a      	lsls	r2, r3, #22
 800aad2:	d4ef      	bmi.n	800aab4 <__smakebuf_r+0x18>
 800aad4:	f023 0303 	bic.w	r3, r3, #3
 800aad8:	f043 0302 	orr.w	r3, r3, #2
 800aadc:	81a3      	strh	r3, [r4, #12]
 800aade:	e7e3      	b.n	800aaa8 <__smakebuf_r+0xc>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	6020      	str	r0, [r4, #0]
 800aae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aae8:	81a3      	strh	r3, [r4, #12]
 800aaea:	9b00      	ldr	r3, [sp, #0]
 800aaec:	6163      	str	r3, [r4, #20]
 800aaee:	9b01      	ldr	r3, [sp, #4]
 800aaf0:	6120      	str	r0, [r4, #16]
 800aaf2:	b15b      	cbz	r3, 800ab0c <__smakebuf_r+0x70>
 800aaf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aaf8:	4630      	mov	r0, r6
 800aafa:	f000 f81d 	bl	800ab38 <_isatty_r>
 800aafe:	b128      	cbz	r0, 800ab0c <__smakebuf_r+0x70>
 800ab00:	89a3      	ldrh	r3, [r4, #12]
 800ab02:	f023 0303 	bic.w	r3, r3, #3
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	81a3      	strh	r3, [r4, #12]
 800ab0c:	89a3      	ldrh	r3, [r4, #12]
 800ab0e:	431d      	orrs	r5, r3
 800ab10:	81a5      	strh	r5, [r4, #12]
 800ab12:	e7cf      	b.n	800aab4 <__smakebuf_r+0x18>

0800ab14 <_fstat_r>:
 800ab14:	b538      	push	{r3, r4, r5, lr}
 800ab16:	4d07      	ldr	r5, [pc, #28]	; (800ab34 <_fstat_r+0x20>)
 800ab18:	2300      	movs	r3, #0
 800ab1a:	4604      	mov	r4, r0
 800ab1c:	4608      	mov	r0, r1
 800ab1e:	4611      	mov	r1, r2
 800ab20:	602b      	str	r3, [r5, #0]
 800ab22:	f7f6 ff60 	bl	80019e6 <_fstat>
 800ab26:	1c43      	adds	r3, r0, #1
 800ab28:	d102      	bne.n	800ab30 <_fstat_r+0x1c>
 800ab2a:	682b      	ldr	r3, [r5, #0]
 800ab2c:	b103      	cbz	r3, 800ab30 <_fstat_r+0x1c>
 800ab2e:	6023      	str	r3, [r4, #0]
 800ab30:	bd38      	pop	{r3, r4, r5, pc}
 800ab32:	bf00      	nop
 800ab34:	200005e4 	.word	0x200005e4

0800ab38 <_isatty_r>:
 800ab38:	b538      	push	{r3, r4, r5, lr}
 800ab3a:	4d06      	ldr	r5, [pc, #24]	; (800ab54 <_isatty_r+0x1c>)
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4604      	mov	r4, r0
 800ab40:	4608      	mov	r0, r1
 800ab42:	602b      	str	r3, [r5, #0]
 800ab44:	f7f6 ff5f 	bl	8001a06 <_isatty>
 800ab48:	1c43      	adds	r3, r0, #1
 800ab4a:	d102      	bne.n	800ab52 <_isatty_r+0x1a>
 800ab4c:	682b      	ldr	r3, [r5, #0]
 800ab4e:	b103      	cbz	r3, 800ab52 <_isatty_r+0x1a>
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	bd38      	pop	{r3, r4, r5, pc}
 800ab54:	200005e4 	.word	0x200005e4

0800ab58 <_init>:
 800ab58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab5a:	bf00      	nop
 800ab5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab5e:	bc08      	pop	{r3}
 800ab60:	469e      	mov	lr, r3
 800ab62:	4770      	bx	lr

0800ab64 <_fini>:
 800ab64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab66:	bf00      	nop
 800ab68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ab6a:	bc08      	pop	{r3}
 800ab6c:	469e      	mov	lr, r3
 800ab6e:	4770      	bx	lr
