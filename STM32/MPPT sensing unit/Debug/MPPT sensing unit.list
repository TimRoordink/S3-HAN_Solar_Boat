
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003fc  0800a358  0800a358  0001a358  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a754  0800a754  000201d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a754  0800a754  0001a754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a75c  0800a75c  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a75c  0800a75c  0001a75c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a760  0800a760  0001a760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800a764  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e0  200001d8  0800a93c  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005b8  0800a93c  000205b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001981d  00000000  00000000  0002024b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a1  00000000  00000000  00039a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001720  00000000  00000000  0003cf10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001201  00000000  00000000  0003e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f21  00000000  00000000  0003f831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfd0  00000000  00000000  00064752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e190d  00000000  00000000  00080722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073f4  00000000  00000000  00162030  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00169424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a340 	.word	0x0800a340

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800a340 	.word	0x0800a340

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HSB_ADC_Select_ChannelE>:
const float Vref = 3.3;
const float twelfBitADC = 4096;
const float unitValue = Vref / twelfBitADC * 1000;
const float sensitivity = 1000.0 / 264.0;// 1000mA per 265 mV

void HSB_ADC_Select_ChannelE (void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b086      	sub	sp, #24
 8000ea8:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2200      	movs	r2, #0
 8000eae:	601a      	str	r2, [r3, #0]
 8000eb0:	605a      	str	r2, [r3, #4]
 8000eb2:	609a      	str	r2, [r3, #8]
 8000eb4:	60da      	str	r2, [r3, #12]
 8000eb6:	611a      	str	r2, [r3, #16]
 8000eb8:	615a      	str	r2, [r3, #20]
	  sConfig.Channel = ADC_CHANNEL_5;
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HSB_ADC_Select_ChannelE+0x4c>)
 8000ebc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ebe:	2306      	movs	r3, #6
 8000ec0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
	  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ec6:	237f      	movs	r3, #127	; 0x7f
 8000ec8:	60fb      	str	r3, [r7, #12]
	  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eca:	2304      	movs	r3, #4
 8000ecc:	613b      	str	r3, [r7, #16]
	  sConfig.Offset = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	4807      	ldr	r0, [pc, #28]	; (8000ef4 <HSB_ADC_Select_ChannelE+0x50>)
 8000ed8:	f001 fc24 	bl	8002724 <HAL_ADC_ConfigChannel>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d001      	beq.n	8000ee6 <HSB_ADC_Select_ChannelE+0x42>
	  {
	    Error_Handler();
 8000ee2:	f000 fb6b 	bl	80015bc <Error_Handler>
	  }
}
 8000ee6:	bf00      	nop
 8000ee8:	3718      	adds	r7, #24
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	14f00020 	.word	0x14f00020
 8000ef4:	20000218 	.word	0x20000218

08000ef8 <HSB_ADC_Select_ChannelF>:

void HSB_ADC_Select_ChannelF (void) {
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b086      	sub	sp, #24
 8000efc:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]
 8000f0a:	611a      	str	r2, [r3, #16]
 8000f0c:	615a      	str	r2, [r3, #20]
	  sConfig.Channel = ADC_CHANNEL_6;
 8000f0e:	4b09      	ldr	r3, [pc, #36]	; (8000f34 <HSB_ADC_Select_ChannelF+0x3c>)
 8000f10:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f12:	2306      	movs	r3, #6
 8000f14:	607b      	str	r3, [r7, #4]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f16:	463b      	mov	r3, r7
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <HSB_ADC_Select_ChannelF+0x40>)
 8000f1c:	f001 fc02 	bl	8002724 <HAL_ADC_ConfigChannel>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HSB_ADC_Select_ChannelF+0x32>
	  {
	    Error_Handler();
 8000f26:	f000 fb49 	bl	80015bc <Error_Handler>
	  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	19200040 	.word	0x19200040
 8000f38:	20000218 	.word	0x20000218

08000f3c <HSB_ReadCurrentModule>:

uint16_t HSB_ReadCurrentModule(int channel){
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	if 		(channel == 0) {
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d102      	bne.n	8000f50 <HSB_ReadCurrentModule+0x14>
		HSB_ADC_Select_ChannelE();
 8000f4a:	f7ff ffab 	bl	8000ea4 <HSB_ADC_Select_ChannelE>
 8000f4e:	e004      	b.n	8000f5a <HSB_ReadCurrentModule+0x1e>
	}
	else if (channel == 1){
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2b01      	cmp	r3, #1
 8000f54:	d101      	bne.n	8000f5a <HSB_ReadCurrentModule+0x1e>
		HSB_ADC_Select_ChannelF();
 8000f56:	f7ff ffcf 	bl	8000ef8 <HSB_ADC_Select_ChannelF>
	}

	HAL_ADC_Start(&hadc1);
 8000f5a:	4826      	ldr	r0, [pc, #152]	; (8000ff4 <HSB_ReadCurrentModule+0xb8>)
 8000f5c:	f001 fab0 	bl	80024c0 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8000f60:	f04f 31ff 	mov.w	r1, #4294967295
 8000f64:	4823      	ldr	r0, [pc, #140]	; (8000ff4 <HSB_ReadCurrentModule+0xb8>)
 8000f66:	f001 fb41 	bl	80025ec <HAL_ADC_PollForConversion>
	rawValues[channel] = HAL_ADC_GetValue(&hadc1);
 8000f6a:	4822      	ldr	r0, [pc, #136]	; (8000ff4 <HSB_ReadCurrentModule+0xb8>)
 8000f6c:	f001 fbcd 	bl	800270a <HAL_ADC_GetValue>
 8000f70:	4603      	mov	r3, r0
 8000f72:	b299      	uxth	r1, r3
 8000f74:	4a20      	ldr	r2, [pc, #128]	; (8000ff8 <HSB_ReadCurrentModule+0xbc>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	HAL_ADC_Stop(&hadc1);
 8000f7c:	481d      	ldr	r0, [pc, #116]	; (8000ff4 <HSB_ReadCurrentModule+0xb8>)
 8000f7e:	f001 fb02 	bl	8002586 <HAL_ADC_Stop>

	raw = (uint16_t) rawValues[channel];
 8000f82:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HSB_ReadCurrentModule+0xbc>)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	; (8000ffc <HSB_ReadCurrentModule+0xc0>)
 8000f8c:	801a      	strh	r2, [r3, #0]
	voltage = unitValue * raw;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <HSB_ReadCurrentModule+0xc0>)
 8000f90:	881b      	ldrh	r3, [r3, #0]
 8000f92:	ee07 3a90 	vmov	s15, r3
 8000f96:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f9a:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001000 <HSB_ReadCurrentModule+0xc4>
 8000f9e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fa2:	4b18      	ldr	r3, [pc, #96]	; (8001004 <HSB_ReadCurrentModule+0xc8>)
 8000fa4:	edc3 7a00 	vstr	s15, [r3]
	current = (voltage - offset) * sensitivity;
 8000fa8:	4b16      	ldr	r3, [pc, #88]	; (8001004 <HSB_ReadCurrentModule+0xc8>)
 8000faa:	edd3 7a00 	vldr	s15, [r3]
 8000fae:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001008 <HSB_ReadCurrentModule+0xcc>
 8000fb2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000fb6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 800100c <HSB_ReadCurrentModule+0xd0>
 8000fba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000fbe:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HSB_ReadCurrentModule+0xd4>)
 8000fc0:	edc3 7a00 	vstr	s15, [r3]
	HSB_DebugPrint("Current Module\n\rChannel: %i\tValue %.2f \n\r", channel, current);
 8000fc4:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HSB_ReadCurrentModule+0xd4>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	4618      	mov	r0, r3
 8000fca:	f7ff fabd 	bl	8000548 <__aeabi_f2d>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	480f      	ldr	r0, [pc, #60]	; (8001014 <HSB_ReadCurrentModule+0xd8>)
 8000fd6:	f000 f853 	bl	8001080 <HSB_DebugPrint>
	return current;
 8000fda:	4b0d      	ldr	r3, [pc, #52]	; (8001010 <HSB_ReadCurrentModule+0xd4>)
 8000fdc:	edd3 7a00 	vldr	s15, [r3]
 8000fe0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe4:	ee17 3a90 	vmov	r3, s15
 8000fe8:	b29b      	uxth	r3, r3
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000218 	.word	0x20000218
 8000ff8:	200001f8 	.word	0x200001f8
 8000ffc:	200001fc 	.word	0x200001fc
 8001000:	3f4e4000 	.word	0x3f4e4000
 8001004:	20000200 	.word	0x20000200
 8001008:	43a10000 	.word	0x43a10000
 800100c:	40726c9b 	.word	0x40726c9b
 8001010:	200001f4 	.word	0x200001f4
 8001014:	0800a358 	.word	0x0800a358

08001018 <HSB_CurrentModule>:

void HSB_CurrentModule(float* E, float* F){
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
 8001020:	6039      	str	r1, [r7, #0]
	HSB_DebugPrint("\n\rstart current\n\r");
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <HSB_CurrentModule+0x44>)
 8001024:	f000 f82c 	bl	8001080 <HSB_DebugPrint>
	*E = HSB_ReadCurrentModule(0);
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff ff87 	bl	8000f3c <HSB_ReadCurrentModule>
 800102e:	4603      	mov	r3, r0
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	edc3 7a00 	vstr	s15, [r3]
	*F = HSB_ReadCurrentModule(1);
 800103e:	2001      	movs	r0, #1
 8001040:	f7ff ff7c 	bl	8000f3c <HSB_ReadCurrentModule>
 8001044:	4603      	mov	r3, r0
 8001046:	ee07 3a90 	vmov	s15, r3
 800104a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	edc3 7a00 	vstr	s15, [r3]
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800a384 	.word	0x0800a384

08001060 <HSB_DebugPrint_Init>:

//Boolean for turn off debug print
//Make false to turn off
bool HSB_DebugPrintOn = true;

void HSB_DebugPrint_Init(bool input){
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	4603      	mov	r3, r0
 8001068:	71fb      	strb	r3, [r7, #7]
	HSB_DebugPrintOn = input;
 800106a:	4a04      	ldr	r2, [pc, #16]	; (800107c <HSB_DebugPrint_Init+0x1c>)
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	7013      	strb	r3, [r2, #0]
	}
 8001070:	bf00      	nop
 8001072:	370c      	adds	r7, #12
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	20000000 	.word	0x20000000

08001080 <HSB_DebugPrint>:

void HSB_DebugPrint(const char *x, ...){
 8001080:	b40f      	push	{r0, r1, r2, r3}
 8001082:	b580      	push	{r7, lr}
 8001084:	af00      	add	r7, sp, #0
	if(HSB_DebugPrintOn){
 8001086:	4b0c      	ldr	r3, [pc, #48]	; (80010b8 <HSB_DebugPrint+0x38>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d00e      	beq.n	80010ac <HSB_DebugPrint+0x2c>
		//UART variables
		sprintf(msg,x);
 800108e:	68b9      	ldr	r1, [r7, #8]
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <HSB_DebugPrint+0x3c>)
 8001092:	f006 fff7 	bl	8008084 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8001096:	4809      	ldr	r0, [pc, #36]	; (80010bc <HSB_DebugPrint+0x3c>)
 8001098:	f7ff f8ea 	bl	8000270 <strlen>
 800109c:	4603      	mov	r3, r0
 800109e:	b29a      	uxth	r2, r3
 80010a0:	f04f 33ff 	mov.w	r3, #4294967295
 80010a4:	4905      	ldr	r1, [pc, #20]	; (80010bc <HSB_DebugPrint+0x3c>)
 80010a6:	4806      	ldr	r0, [pc, #24]	; (80010c0 <HSB_DebugPrint+0x40>)
 80010a8:	f005 fdf8 	bl	8006c9c <HAL_UART_Transmit>
	}
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b4:	b004      	add	sp, #16
 80010b6:	4770      	bx	lr
 80010b8:	20000000 	.word	0x20000000
 80010bc:	20000204 	.word	0x20000204
 80010c0:	200003d4 	.word	0x200003d4

080010c4 <HSB_VoltageModule_Init>:
const float ADCFactor = ReferenceVoltage / ADCBits;
//conversion factor to acount for the voltage divider on the PCB
//58.7 is the total resistance of the devider and 2.7 the small resistor
const float converionFactor = 1 / 2.7 * 58.7;

void HSB_VoltageModule_Init(uint8_t adress){
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	005b      	lsls	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HSB_VoltageModule_Init+0x20>)
 80010d6:	701a      	strb	r2, [r3, #0]
}
 80010d8:	bf00      	nop
 80010da:	370c      	adds	r7, #12
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	20000001 	.word	0x20000001

080010e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010ec:	f000 fe1b 	bl	8001d26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010f0:	f000 f81e 	bl	8001130 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010f4:	f000 fa00 	bl	80014f8 <MX_GPIO_Init>
  MX_DMA_Init();
 80010f8:	f000 f9d8 	bl	80014ac <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010fc:	f000 f9a6 	bl	800144c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001100:	f000 f878 	bl	80011f4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001104:	f000 f8ec 	bl	80012e0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001108:	f000 f8b4 	bl	8001274 <MX_CAN1_Init>
  MX_TIM2_Init();
 800110c:	f000 f928 	bl	8001360 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 8001110:	2001      	movs	r0, #1
 8001112:	f7ff ffa5 	bl	8001060 <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 8001116:	2068      	movs	r0, #104	; 0x68
 8001118:	f7ff ffd4 	bl	80010c4 <HSB_VoltageModule_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HSB_CurrentModule(&CurrentE, &CurrentF);
 800111c:	4902      	ldr	r1, [pc, #8]	; (8001128 <main+0x40>)
 800111e:	4803      	ldr	r0, [pc, #12]	; (800112c <main+0x44>)
 8001120:	f7ff ff7a 	bl	8001018 <HSB_CurrentModule>
 8001124:	e7fa      	b.n	800111c <main+0x34>
 8001126:	bf00      	nop
 8001128:	20000460 	.word	0x20000460
 800112c:	2000045c 	.word	0x2000045c

08001130 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b096      	sub	sp, #88	; 0x58
 8001134:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001136:	f107 0314 	add.w	r3, r7, #20
 800113a:	2244      	movs	r2, #68	; 0x44
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f007 f803 	bl	800814a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001144:	463b      	mov	r3, r7
 8001146:	2200      	movs	r2, #0
 8001148:	601a      	str	r2, [r3, #0]
 800114a:	605a      	str	r2, [r3, #4]
 800114c:	609a      	str	r2, [r3, #8]
 800114e:	60da      	str	r2, [r3, #12]
 8001150:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001152:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001156:	f003 fca7 	bl	8004aa8 <HAL_PWREx_ControlVoltageScaling>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001160:	f000 fa2c 	bl	80015bc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001164:	f003 fc82 	bl	8004a6c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001168:	4b21      	ldr	r3, [pc, #132]	; (80011f0 <SystemClock_Config+0xc0>)
 800116a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800116e:	4a20      	ldr	r2, [pc, #128]	; (80011f0 <SystemClock_Config+0xc0>)
 8001170:	f023 0318 	bic.w	r3, r3, #24
 8001174:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001178:	2314      	movs	r3, #20
 800117a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800117c:	2301      	movs	r3, #1
 800117e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001180:	2301      	movs	r3, #1
 8001182:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001184:	2300      	movs	r3, #0
 8001186:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001188:	2360      	movs	r3, #96	; 0x60
 800118a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800118c:	2302      	movs	r3, #2
 800118e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001190:	2301      	movs	r3, #1
 8001192:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001198:	2310      	movs	r3, #16
 800119a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800119c:	2307      	movs	r3, #7
 800119e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80011a0:	2302      	movs	r3, #2
 80011a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80011a4:	2302      	movs	r3, #2
 80011a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011a8:	f107 0314 	add.w	r3, r7, #20
 80011ac:	4618      	mov	r0, r3
 80011ae:	f003 fcd1 	bl	8004b54 <HAL_RCC_OscConfig>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80011b8:	f000 fa00 	bl	80015bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011bc:	230f      	movs	r3, #15
 80011be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c0:	2303      	movs	r3, #3
 80011c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011c4:	2300      	movs	r3, #0
 80011c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011cc:	2300      	movs	r3, #0
 80011ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011d0:	463b      	mov	r3, r7
 80011d2:	2101      	movs	r1, #1
 80011d4:	4618      	mov	r0, r3
 80011d6:	f004 f8d1 	bl	800537c <HAL_RCC_ClockConfig>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80011e0:	f000 f9ec 	bl	80015bc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80011e4:	f004 fce4 	bl	8005bb0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80011e8:	bf00      	nop
 80011ea:	3758      	adds	r7, #88	; 0x58
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	40021000 	.word	0x40021000

080011f4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80011f8:	4b1c      	ldr	r3, [pc, #112]	; (800126c <MX_ADC1_Init+0x78>)
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <MX_ADC1_Init+0x7c>)
 80011fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <MX_ADC1_Init+0x78>)
 8001200:	2200      	movs	r2, #0
 8001202:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001204:	4b19      	ldr	r3, [pc, #100]	; (800126c <MX_ADC1_Init+0x78>)
 8001206:	2200      	movs	r2, #0
 8001208:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800120a:	4b18      	ldr	r3, [pc, #96]	; (800126c <MX_ADC1_Init+0x78>)
 800120c:	2200      	movs	r2, #0
 800120e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <MX_ADC1_Init+0x78>)
 8001212:	2201      	movs	r2, #1
 8001214:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001216:	4b15      	ldr	r3, [pc, #84]	; (800126c <MX_ADC1_Init+0x78>)
 8001218:	2204      	movs	r2, #4
 800121a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800121c:	4b13      	ldr	r3, [pc, #76]	; (800126c <MX_ADC1_Init+0x78>)
 800121e:	2200      	movs	r2, #0
 8001220:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001222:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_ADC1_Init+0x78>)
 8001224:	2200      	movs	r2, #0
 8001226:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <MX_ADC1_Init+0x78>)
 800122a:	2202      	movs	r2, #2
 800122c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800122e:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_ADC1_Init+0x78>)
 8001230:	2200      	movs	r2, #0
 8001232:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001236:	4b0d      	ldr	r3, [pc, #52]	; (800126c <MX_ADC1_Init+0x78>)
 8001238:	2200      	movs	r2, #0
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <MX_ADC1_Init+0x78>)
 800123e:	2200      	movs	r2, #0
 8001240:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001242:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_ADC1_Init+0x78>)
 8001244:	2200      	movs	r2, #0
 8001246:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <MX_ADC1_Init+0x78>)
 800124c:	2200      	movs	r2, #0
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001250:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_ADC1_Init+0x78>)
 8001252:	2200      	movs	r2, #0
 8001254:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_ADC1_Init+0x78>)
 800125a:	f000 ffef 	bl	800223c <HAL_ADC_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8001264:	f000 f9aa 	bl	80015bc <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20000218 	.word	0x20000218
 8001270:	50040000 	.word	0x50040000

08001274 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001278:	4b17      	ldr	r3, [pc, #92]	; (80012d8 <MX_CAN1_Init+0x64>)
 800127a:	4a18      	ldr	r2, [pc, #96]	; (80012dc <MX_CAN1_Init+0x68>)
 800127c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 800127e:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_CAN1_Init+0x64>)
 8001280:	2208      	movs	r2, #8
 8001282:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001284:	4b14      	ldr	r3, [pc, #80]	; (80012d8 <MX_CAN1_Init+0x64>)
 8001286:	2200      	movs	r2, #0
 8001288:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800128a:	4b13      	ldr	r3, [pc, #76]	; (80012d8 <MX_CAN1_Init+0x64>)
 800128c:	2200      	movs	r2, #0
 800128e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8001290:	4b11      	ldr	r3, [pc, #68]	; (80012d8 <MX_CAN1_Init+0x64>)
 8001292:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8001296:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_CAN1_Init+0x64>)
 800129a:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800129e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80012a0:	4b0d      	ldr	r3, [pc, #52]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_CAN1_Init+0x64>)
 80012c6:	f001 ffb0 	bl	800322a <HAL_CAN_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80012d0:	f000 f974 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	2000027c 	.word	0x2000027c
 80012dc:	40006400 	.word	0x40006400

080012e0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_I2C1_Init+0x74>)
 80012e6:	4a1c      	ldr	r2, [pc, #112]	; (8001358 <MX_I2C1_Init+0x78>)
 80012e8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_I2C1_Init+0x74>)
 80012ec:	4a1b      	ldr	r2, [pc, #108]	; (800135c <MX_I2C1_Init+0x7c>)
 80012ee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_I2C1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012f6:	4b17      	ldr	r3, [pc, #92]	; (8001354 <MX_I2C1_Init+0x74>)
 80012f8:	2201      	movs	r2, #1
 80012fa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012fc:	4b15      	ldr	r3, [pc, #84]	; (8001354 <MX_I2C1_Init+0x74>)
 80012fe:	2200      	movs	r2, #0
 8001300:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001302:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_I2C1_Init+0x74>)
 8001304:	2200      	movs	r2, #0
 8001306:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001308:	4b12      	ldr	r3, [pc, #72]	; (8001354 <MX_I2C1_Init+0x74>)
 800130a:	2200      	movs	r2, #0
 800130c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800130e:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_I2C1_Init+0x74>)
 8001310:	2200      	movs	r2, #0
 8001312:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001314:	4b0f      	ldr	r3, [pc, #60]	; (8001354 <MX_I2C1_Init+0x74>)
 8001316:	2200      	movs	r2, #0
 8001318:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800131a:	480e      	ldr	r0, [pc, #56]	; (8001354 <MX_I2C1_Init+0x74>)
 800131c:	f002 fcca 	bl	8003cb4 <HAL_I2C_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001326:	f000 f949 	bl	80015bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800132a:	2100      	movs	r1, #0
 800132c:	4809      	ldr	r0, [pc, #36]	; (8001354 <MX_I2C1_Init+0x74>)
 800132e:	f003 fb06 	bl	800493e <HAL_I2CEx_ConfigAnalogFilter>
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	d001      	beq.n	800133c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001338:	f000 f940 	bl	80015bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800133c:	2100      	movs	r1, #0
 800133e:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_I2C1_Init+0x74>)
 8001340:	f003 fb48 	bl	80049d4 <HAL_I2CEx_ConfigDigitalFilter>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800134a:	f000 f937 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800134e:	bf00      	nop
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200002a4 	.word	0x200002a4
 8001358:	40005400 	.word	0x40005400
 800135c:	00707cbb 	.word	0x00707cbb

08001360 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b08e      	sub	sp, #56	; 0x38
 8001364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001366:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001374:	f107 031c 	add.w	r3, r7, #28
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001380:	463b      	mov	r3, r7
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]
 800138e:	615a      	str	r2, [r3, #20]
 8001390:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001392:	4b2d      	ldr	r3, [pc, #180]	; (8001448 <MX_TIM2_Init+0xe8>)
 8001394:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001398:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 800139a:	4b2b      	ldr	r3, [pc, #172]	; (8001448 <MX_TIM2_Init+0xe8>)
 800139c:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80013a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a2:	4b29      	ldr	r3, [pc, #164]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 80013a8:	4b27      	ldr	r3, [pc, #156]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013aa:	220a      	movs	r2, #10
 80013ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b26      	ldr	r3, [pc, #152]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b4:	4b24      	ldr	r3, [pc, #144]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013ba:	4823      	ldr	r0, [pc, #140]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013bc:	f004 fcfa 	bl	8005db4 <HAL_TIM_Base_Init>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 f8f9 	bl	80015bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d4:	4619      	mov	r1, r3
 80013d6:	481c      	ldr	r0, [pc, #112]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013d8:	f004 ff20 	bl	800621c <HAL_TIM_ConfigClockSource>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80013e2:	f000 f8eb 	bl	80015bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 80013e6:	4818      	ldr	r0, [pc, #96]	; (8001448 <MX_TIM2_Init+0xe8>)
 80013e8:	f004 fd3b 	bl	8005e62 <HAL_TIM_OC_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80013f2:	f000 f8e3 	bl	80015bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fa:	2300      	movs	r3, #0
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fe:	f107 031c 	add.w	r3, r7, #28
 8001402:	4619      	mov	r1, r3
 8001404:	4810      	ldr	r0, [pc, #64]	; (8001448 <MX_TIM2_Init+0xe8>)
 8001406:	f005 fb77 	bl	8006af8 <HAL_TIMEx_MasterConfigSynchronization>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001410:	f000 f8d4 	bl	80015bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001414:	2350      	movs	r3, #80	; 0x50
 8001416:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001418:	2300      	movs	r3, #0
 800141a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001424:	463b      	mov	r3, r7
 8001426:	2200      	movs	r2, #0
 8001428:	4619      	mov	r1, r3
 800142a:	4807      	ldr	r0, [pc, #28]	; (8001448 <MX_TIM2_Init+0xe8>)
 800142c:	f004 fe7c 	bl	8006128 <HAL_TIM_OC_ConfigChannel>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001436:	f000 f8c1 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <MX_TIM2_Init+0xe8>)
 800143c:	f000 fa78 	bl	8001930 <HAL_TIM_MspPostInit>

}
 8001440:	bf00      	nop
 8001442:	3738      	adds	r7, #56	; 0x38
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	20000388 	.word	0x20000388

0800144c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001452:	4a15      	ldr	r2, [pc, #84]	; (80014a8 <MX_USART2_UART_Init+0x5c>)
 8001454:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001458:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800145c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001460:	2200      	movs	r2, #0
 8001462:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001464:	4b0f      	ldr	r3, [pc, #60]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001466:	2200      	movs	r2, #0
 8001468:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800146c:	2200      	movs	r2, #0
 800146e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001472:	220c      	movs	r2, #12
 8001474:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001476:	4b0b      	ldr	r3, [pc, #44]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001478:	2200      	movs	r2, #0
 800147a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800147c:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800147e:	2200      	movs	r2, #0
 8001480:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001482:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001484:	2200      	movs	r2, #0
 8001486:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 800148a:	2200      	movs	r2, #0
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800148e:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_USART2_UART_Init+0x58>)
 8001490:	f005 fbb6 	bl	8006c00 <HAL_UART_Init>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800149a:	f000 f88f 	bl	80015bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200003d4 	.word	0x200003d4
 80014a8:	40004400 	.word	0x40004400

080014ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014b2:	4b10      	ldr	r3, [pc, #64]	; (80014f4 <MX_DMA_Init+0x48>)
 80014b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014b6:	4a0f      	ldr	r2, [pc, #60]	; (80014f4 <MX_DMA_Init+0x48>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6493      	str	r3, [r2, #72]	; 0x48
 80014be:	4b0d      	ldr	r3, [pc, #52]	; (80014f4 <MX_DMA_Init+0x48>)
 80014c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2010      	movs	r0, #16
 80014d0:	f002 f881 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80014d4:	2010      	movs	r0, #16
 80014d6:	f002 f89a 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2011      	movs	r0, #17
 80014e0:	f002 f879 	bl	80035d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80014e4:	2011      	movs	r0, #17
 80014e6:	f002 f892 	bl	800360e <HAL_NVIC_EnableIRQ>

}
 80014ea:	bf00      	nop
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	40021000 	.word	0x40021000

080014f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b088      	sub	sp, #32
 80014fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fe:	f107 030c 	add.w	r3, r7, #12
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
 8001508:	609a      	str	r2, [r3, #8]
 800150a:	60da      	str	r2, [r3, #12]
 800150c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800150e:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001512:	4a23      	ldr	r2, [pc, #140]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001514:	f043 0304 	orr.w	r3, r3, #4
 8001518:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151a:	4b21      	ldr	r3, [pc, #132]	; (80015a0 <MX_GPIO_Init+0xa8>)
 800151c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001526:	4b1e      	ldr	r3, [pc, #120]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001528:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152a:	4a1d      	ldr	r2, [pc, #116]	; (80015a0 <MX_GPIO_Init+0xa8>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001532:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001542:	4a17      	ldr	r2, [pc, #92]	; (80015a0 <MX_GPIO_Init+0xa8>)
 8001544:	f043 0302 	orr.w	r3, r3, #2
 8001548:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154a:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_GPIO_Init+0xa8>)
 800154c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800154e:	f003 0302 	and.w	r3, r3, #2
 8001552:	603b      	str	r3, [r7, #0]
 8001554:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001556:	2200      	movs	r2, #0
 8001558:	2108      	movs	r1, #8
 800155a:	4812      	ldr	r0, [pc, #72]	; (80015a4 <MX_GPIO_Init+0xac>)
 800155c:	f002 fb92 	bl	8003c84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8001560:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f002 fa1a 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800157c:	2308      	movs	r3, #8
 800157e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001580:	2301      	movs	r3, #1
 8001582:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001588:	2300      	movs	r3, #0
 800158a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800158c:	f107 030c 	add.w	r3, r7, #12
 8001590:	4619      	mov	r1, r3
 8001592:	4804      	ldr	r0, [pc, #16]	; (80015a4 <MX_GPIO_Init+0xac>)
 8001594:	f002 fa0c 	bl	80039b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001598:	bf00      	nop
 800159a:	3720      	adds	r7, #32
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40021000 	.word	0x40021000
 80015a4:	48000400 	.word	0x48000400

080015a8 <HAL_TIM_PeriodElapsedCallback>:
	  Error_Handler ();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
	//function to run on interval interupt
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015c0:	b672      	cpsid	i
}
 80015c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <Error_Handler+0x8>
	...

080015c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ce:	4b0f      	ldr	r3, [pc, #60]	; (800160c <HAL_MspInit+0x44>)
 80015d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d2:	4a0e      	ldr	r2, [pc, #56]	; (800160c <HAL_MspInit+0x44>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6613      	str	r3, [r2, #96]	; 0x60
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_MspInit+0x44>)
 80015dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x44>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6593      	str	r3, [r2, #88]	; 0x58
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x44>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b09e      	sub	sp, #120	; 0x78
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001628:	f107 0310 	add.w	r3, r7, #16
 800162c:	2254      	movs	r2, #84	; 0x54
 800162e:	2100      	movs	r1, #0
 8001630:	4618      	mov	r0, r3
 8001632:	f006 fd8a 	bl	800814a <memset>
  if(hadc->Instance==ADC1)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a25      	ldr	r2, [pc, #148]	; (80016d0 <HAL_ADC_MspInit+0xc0>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d143      	bne.n	80016c8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001640:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001644:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001646:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800164a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800164c:	2301      	movs	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001654:	2310      	movs	r3, #16
 8001656:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001658:	2307      	movs	r3, #7
 800165a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800165c:	2302      	movs	r3, #2
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001660:	2302      	movs	r3, #2
 8001662:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001668:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800166a:	f107 0310 	add.w	r3, r7, #16
 800166e:	4618      	mov	r0, r3
 8001670:	f004 f8a8 	bl	80057c4 <HAL_RCCEx_PeriphCLKConfig>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800167a:	f7ff ff9f 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 8001680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001682:	4a14      	ldr	r2, [pc, #80]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 8001684:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001688:	64d3      	str	r3, [r2, #76]	; 0x4c
 800168a:	4b12      	ldr	r3, [pc, #72]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 800168c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800168e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001696:	4b0f      	ldr	r3, [pc, #60]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 8001698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169a:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 800169c:	f043 0301 	orr.w	r3, r3, #1
 80016a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016a2:	4b0c      	ldr	r3, [pc, #48]	; (80016d4 <HAL_ADC_MspInit+0xc4>)
 80016a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 80016ae:	2303      	movs	r3, #3
 80016b0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80016b2:	230b      	movs	r3, #11
 80016b4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ba:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016be:	4619      	mov	r1, r3
 80016c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016c4:	f002 f974 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80016c8:	bf00      	nop
 80016ca:	3778      	adds	r7, #120	; 0x78
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	50040000 	.word	0x50040000
 80016d4:	40021000 	.word	0x40021000

080016d8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08a      	sub	sp, #40	; 0x28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a18      	ldr	r2, [pc, #96]	; (8001758 <HAL_CAN_MspInit+0x80>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d129      	bne.n	800174e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_CAN_MspInit+0x84>)
 80016fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_CAN_MspInit+0x84>)
 8001700:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001704:	6593      	str	r3, [r2, #88]	; 0x58
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_CAN_MspInit+0x84>)
 8001708:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800170a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800170e:	613b      	str	r3, [r7, #16]
 8001710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_CAN_MspInit+0x84>)
 8001714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_CAN_MspInit+0x84>)
 8001718:	f043 0301 	orr.w	r3, r3, #1
 800171c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800171e:	4b0f      	ldr	r3, [pc, #60]	; (800175c <HAL_CAN_MspInit+0x84>)
 8001720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800172a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800172e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001730:	2302      	movs	r3, #2
 8001732:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001734:	2300      	movs	r3, #0
 8001736:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001738:	2303      	movs	r3, #3
 800173a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800173c:	2309      	movs	r3, #9
 800173e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001740:	f107 0314 	add.w	r3, r7, #20
 8001744:	4619      	mov	r1, r3
 8001746:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800174a:	f002 f931 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800174e:	bf00      	nop
 8001750:	3728      	adds	r7, #40	; 0x28
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40006400 	.word	0x40006400
 800175c:	40021000 	.word	0x40021000

08001760 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b09e      	sub	sp, #120	; 0x78
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001768:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
 8001772:	609a      	str	r2, [r3, #8]
 8001774:	60da      	str	r2, [r3, #12]
 8001776:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001778:	f107 0310 	add.w	r3, r7, #16
 800177c:	2254      	movs	r2, #84	; 0x54
 800177e:	2100      	movs	r1, #0
 8001780:	4618      	mov	r0, r3
 8001782:	f006 fce2 	bl	800814a <memset>
  if(hi2c->Instance==I2C1)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a50      	ldr	r2, [pc, #320]	; (80018cc <HAL_I2C_MspInit+0x16c>)
 800178c:	4293      	cmp	r3, r2
 800178e:	f040 8098 	bne.w	80018c2 <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001792:	2340      	movs	r3, #64	; 0x40
 8001794:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001796:	2300      	movs	r3, #0
 8001798:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800179a:	f107 0310 	add.w	r3, r7, #16
 800179e:	4618      	mov	r0, r3
 80017a0:	f004 f810 	bl	80057c4 <HAL_RCCEx_PeriphCLKConfig>
 80017a4:	4603      	mov	r3, r0
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017aa:	f7ff ff07 	bl	80015bc <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017b2:	4a47      	ldr	r2, [pc, #284]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017ba:	4b45      	ldr	r3, [pc, #276]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80017c6:	23c0      	movs	r3, #192	; 0xc0
 80017c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ca:	2312      	movs	r3, #18
 80017cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ce:	2301      	movs	r3, #1
 80017d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d2:	2303      	movs	r3, #3
 80017d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017d6:	2304      	movs	r3, #4
 80017d8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80017de:	4619      	mov	r1, r3
 80017e0:	483c      	ldr	r0, [pc, #240]	; (80018d4 <HAL_I2C_MspInit+0x174>)
 80017e2:	f002 f8e5 	bl	80039b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017e6:	4b3a      	ldr	r3, [pc, #232]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ea:	4a39      	ldr	r2, [pc, #228]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017f0:	6593      	str	r3, [r2, #88]	; 0x58
 80017f2:	4b37      	ldr	r3, [pc, #220]	; (80018d0 <HAL_I2C_MspInit+0x170>)
 80017f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017fa:	60bb      	str	r3, [r7, #8]
 80017fc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80017fe:	4b36      	ldr	r3, [pc, #216]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001800:	4a36      	ldr	r2, [pc, #216]	; (80018dc <HAL_I2C_MspInit+0x17c>)
 8001802:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001804:	4b34      	ldr	r3, [pc, #208]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001806:	2203      	movs	r2, #3
 8001808:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800180a:	4b33      	ldr	r3, [pc, #204]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001810:	4b31      	ldr	r3, [pc, #196]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001812:	2200      	movs	r2, #0
 8001814:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001818:	2280      	movs	r2, #128	; 0x80
 800181a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001822:	4b2d      	ldr	r3, [pc, #180]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001824:	2200      	movs	r2, #0
 8001826:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 800182a:	2200      	movs	r2, #0
 800182c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800182e:	4b2a      	ldr	r3, [pc, #168]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001830:	2200      	movs	r2, #0
 8001832:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001834:	4828      	ldr	r0, [pc, #160]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001836:	f001 ff05 	bl	8003644 <HAL_DMA_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001840:	f7ff febc 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a24      	ldr	r2, [pc, #144]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 8001848:	63da      	str	r2, [r3, #60]	; 0x3c
 800184a:	4a23      	ldr	r2, [pc, #140]	; (80018d8 <HAL_I2C_MspInit+0x178>)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001850:	4b23      	ldr	r3, [pc, #140]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001852:	4a24      	ldr	r2, [pc, #144]	; (80018e4 <HAL_I2C_MspInit+0x184>)
 8001854:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001856:	4b22      	ldr	r3, [pc, #136]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001858:	2203      	movs	r2, #3
 800185a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800185c:	4b20      	ldr	r3, [pc, #128]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 800185e:	2210      	movs	r2, #16
 8001860:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001862:	4b1f      	ldr	r3, [pc, #124]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001864:	2200      	movs	r2, #0
 8001866:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001868:	4b1d      	ldr	r3, [pc, #116]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 800186a:	2280      	movs	r2, #128	; 0x80
 800186c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001870:	2200      	movs	r2, #0
 8001872:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001874:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001876:	2200      	movs	r2, #0
 8001878:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800187a:	4b19      	ldr	r3, [pc, #100]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 800187c:	2200      	movs	r2, #0
 800187e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001880:	4b17      	ldr	r3, [pc, #92]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001882:	2200      	movs	r2, #0
 8001884:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001886:	4816      	ldr	r0, [pc, #88]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 8001888:	f001 fedc 	bl	8003644 <HAL_DMA_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001892:	f7ff fe93 	bl	80015bc <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a11      	ldr	r2, [pc, #68]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 800189a:	639a      	str	r2, [r3, #56]	; 0x38
 800189c:	4a10      	ldr	r2, [pc, #64]	; (80018e0 <HAL_I2C_MspInit+0x180>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201f      	movs	r0, #31
 80018a8:	f001 fe95 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80018ac:	201f      	movs	r0, #31
 80018ae:	f001 feae 	bl	800360e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80018b2:	2200      	movs	r2, #0
 80018b4:	2100      	movs	r1, #0
 80018b6:	2020      	movs	r0, #32
 80018b8:	f001 fe8d 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80018bc:	2020      	movs	r0, #32
 80018be:	f001 fea6 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018c2:	bf00      	nop
 80018c4:	3778      	adds	r7, #120	; 0x78
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	40005400 	.word	0x40005400
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	200002f8 	.word	0x200002f8
 80018dc:	40020080 	.word	0x40020080
 80018e0:	20000340 	.word	0x20000340
 80018e4:	4002006c 	.word	0x4002006c

080018e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f8:	d113      	bne.n	8001922 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018fa:	4b0c      	ldr	r3, [pc, #48]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	4a0b      	ldr	r2, [pc, #44]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 8001900:	f043 0301 	orr.w	r3, r3, #1
 8001904:	6593      	str	r3, [r2, #88]	; 0x58
 8001906:	4b09      	ldr	r3, [pc, #36]	; (800192c <HAL_TIM_Base_MspInit+0x44>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	f003 0301 	and.w	r3, r3, #1
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001912:	2200      	movs	r2, #0
 8001914:	2100      	movs	r1, #0
 8001916:	201c      	movs	r0, #28
 8001918:	f001 fe5d 	bl	80035d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800191c:	201c      	movs	r0, #28
 800191e:	f001 fe76 	bl	800360e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b088      	sub	sp, #32
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001938:	f107 030c 	add.w	r3, r7, #12
 800193c:	2200      	movs	r2, #0
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	605a      	str	r2, [r3, #4]
 8001942:	609a      	str	r2, [r3, #8]
 8001944:	60da      	str	r2, [r3, #12]
 8001946:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001950:	d11c      	bne.n	800198c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	4b10      	ldr	r3, [pc, #64]	; (8001994 <HAL_TIM_MspPostInit+0x64>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a0f      	ldr	r2, [pc, #60]	; (8001994 <HAL_TIM_MspPostInit+0x64>)
 8001958:	f043 0301 	orr.w	r3, r3, #1
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b0d      	ldr	r3, [pc, #52]	; (8001994 <HAL_TIM_MspPostInit+0x64>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	60bb      	str	r3, [r7, #8]
 8001968:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 800196a:	2320      	movs	r3, #32
 800196c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196e:	2302      	movs	r3, #2
 8001970:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001972:	2300      	movs	r3, #0
 8001974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800197a:	2301      	movs	r3, #1
 800197c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 800197e:	f107 030c 	add.w	r3, r7, #12
 8001982:	4619      	mov	r1, r3
 8001984:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001988:	f002 f812 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800198c:	bf00      	nop
 800198e:	3720      	adds	r7, #32
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40021000 	.word	0x40021000

08001998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b09e      	sub	sp, #120	; 0x78
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a4:	2200      	movs	r2, #0
 80019a6:	601a      	str	r2, [r3, #0]
 80019a8:	605a      	str	r2, [r3, #4]
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	60da      	str	r2, [r3, #12]
 80019ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2254      	movs	r2, #84	; 0x54
 80019b6:	2100      	movs	r1, #0
 80019b8:	4618      	mov	r0, r3
 80019ba:	f006 fbc6 	bl	800814a <memset>
  if(huart->Instance==USART2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a28      	ldr	r2, [pc, #160]	; (8001a64 <HAL_UART_MspInit+0xcc>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d148      	bne.n	8001a5a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80019c8:	2302      	movs	r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80019cc:	2300      	movs	r3, #0
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	4618      	mov	r0, r3
 80019d6:	f003 fef5 	bl	80057c4 <HAL_RCCEx_PeriphCLKConfig>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80019e0:	f7ff fdec 	bl	80015bc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e4:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	4a1f      	ldr	r2, [pc, #124]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 80019ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ee:	6593      	str	r3, [r2, #88]	; 0x58
 80019f0:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f8:	60fb      	str	r3, [r7, #12]
 80019fa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b1a      	ldr	r3, [pc, #104]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 80019fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a08:	4b17      	ldr	r3, [pc, #92]	; (8001a68 <HAL_UART_MspInit+0xd0>)
 8001a0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001a14:	2304      	movs	r3, #4
 8001a16:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a20:	2303      	movs	r3, #3
 8001a22:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a24:	2307      	movs	r3, #7
 8001a26:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001a28:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a32:	f001 ffbd 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001a36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a3a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a44:	2303      	movs	r3, #3
 8001a46:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001a50:	4619      	mov	r1, r3
 8001a52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a56:	f001 ffab 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a5a:	bf00      	nop
 8001a5c:	3778      	adds	r7, #120	; 0x78
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40004400 	.word	0x40004400
 8001a68:	40021000 	.word	0x40021000

08001a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <NMI_Handler+0x4>

08001a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <HardFault_Handler+0x4>

08001a78 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <MemManage_Handler+0x4>

08001a7e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a82:	e7fe      	b.n	8001a82 <BusFault_Handler+0x4>

08001a84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a88:	e7fe      	b.n	8001a88 <UsageFault_Handler+0x4>

08001a8a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a8e:	bf00      	nop
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr

08001aa6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr

08001ab4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ab8:	f000 f98a 	bl	8001dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8001ac4:	4802      	ldr	r0, [pc, #8]	; (8001ad0 <DMA1_Channel6_IRQHandler+0x10>)
 8001ac6:	f001 feb6 	bl	8003836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001aca:	bf00      	nop
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	20000340 	.word	0x20000340

08001ad4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001ad8:	4802      	ldr	r0, [pc, #8]	; (8001ae4 <DMA1_Channel7_IRQHandler+0x10>)
 8001ada:	f001 feac 	bl	8003836 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200002f8 	.word	0x200002f8

08001ae8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001aec:	4802      	ldr	r0, [pc, #8]	; (8001af8 <TIM2_IRQHandler+0x10>)
 8001aee:	f004 fa19 	bl	8005f24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000388 	.word	0x20000388

08001afc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b00:	4802      	ldr	r0, [pc, #8]	; (8001b0c <I2C1_EV_IRQHandler+0x10>)
 8001b02:	f002 f972 	bl	8003dea <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	200002a4 	.word	0x200002a4

08001b10 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b14:	4802      	ldr	r0, [pc, #8]	; (8001b20 <I2C1_ER_IRQHandler+0x10>)
 8001b16:	f002 f982 	bl	8003e1e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	200002a4 	.word	0x200002a4

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
  return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_kill>:

int _kill(int pid, int sig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b3e:	f006 fb57 	bl	80081f0 <__errno>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2216      	movs	r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
  return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_exit>:

void _exit (int status)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffe7 	bl	8001b34 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b66:	e7fe      	b.n	8001b66 <_exit+0x12>

08001b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
  }

  return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e009      	b.n	8001bc8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf1      	blt.n	8001bb4 <_write+0x12>
  }
  return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_close>:

int _close(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
  return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_isatty>:

int _isatty(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f006 fabc 	bl	80081f0 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20010000 	.word	0x20010000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	20000464 	.word	0x20000464
 8001cac:	200005b8 	.word	0x200005b8

08001cb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <SystemInit+0x20>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a05      	ldr	r2, [pc, #20]	; (8001cd0 <SystemInit+0x20>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	e000ed00 	.word	0xe000ed00

08001cd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001cd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001cd8:	f7ff ffea 	bl	8001cb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <LoopForever+0x6>)
  ldr r1, =_edata
 8001cde:	490d      	ldr	r1, [pc, #52]	; (8001d14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ce0:	4a0d      	ldr	r2, [pc, #52]	; (8001d18 <LoopForever+0xe>)
  movs r3, #0
 8001ce2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ce4:	e002      	b.n	8001cec <LoopCopyDataInit>

08001ce6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ce6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ce8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cea:	3304      	adds	r3, #4

08001cec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cf0:	d3f9      	bcc.n	8001ce6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001cf4:	4c0a      	ldr	r4, [pc, #40]	; (8001d20 <LoopForever+0x16>)
  movs r3, #0
 8001cf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001cf8:	e001      	b.n	8001cfe <LoopFillZerobss>

08001cfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001cfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001cfc:	3204      	adds	r2, #4

08001cfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001cfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d00:	d3fb      	bcc.n	8001cfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d02:	f006 fa7b 	bl	80081fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001d06:	f7ff f9ef 	bl	80010e8 <main>

08001d0a <LoopForever>:

LoopForever:
    b LoopForever
 8001d0a:	e7fe      	b.n	8001d0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001d0c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001d10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d14:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001d18:	0800a764 	.word	0x0800a764
  ldr r2, =_sbss
 8001d1c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001d20:	200005b8 	.word	0x200005b8

08001d24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001d24:	e7fe      	b.n	8001d24 <ADC1_IRQHandler>

08001d26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d30:	2003      	movs	r0, #3
 8001d32:	f001 fc45 	bl	80035c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001d36:	2000      	movs	r0, #0
 8001d38:	f000 f80e 	bl	8001d58 <HAL_InitTick>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d002      	beq.n	8001d48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	71fb      	strb	r3, [r7, #7]
 8001d46:	e001      	b.n	8001d4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001d48:	f7ff fc3e 	bl	80015c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001d60:	2300      	movs	r3, #0
 8001d62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d023      	beq.n	8001db4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <HAL_InitTick+0x70>)
 8001d6e:	681a      	ldr	r2, [r3, #0]
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <HAL_InitTick+0x6c>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	4619      	mov	r1, r3
 8001d76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d82:	4618      	mov	r0, r3
 8001d84:	f001 fc51 	bl	800362a <HAL_SYSTICK_Config>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10f      	bne.n	8001dae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2b0f      	cmp	r3, #15
 8001d92:	d809      	bhi.n	8001da8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d94:	2200      	movs	r2, #0
 8001d96:	6879      	ldr	r1, [r7, #4]
 8001d98:	f04f 30ff 	mov.w	r0, #4294967295
 8001d9c:	f001 fc1b 	bl	80035d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001da0:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <HAL_InitTick+0x74>)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e007      	b.n	8001db8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	73fb      	strb	r3, [r7, #15]
 8001dac:	e004      	b.n	8001db8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	e001      	b.n	8001db8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3710      	adds	r7, #16
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000000c 	.word	0x2000000c
 8001dc8:	20000004 	.word	0x20000004
 8001dcc:	20000008 	.word	0x20000008

08001dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <HAL_IncTick+0x20>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <HAL_IncTick+0x24>)
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4413      	add	r3, r2
 8001de0:	4a04      	ldr	r2, [pc, #16]	; (8001df4 <HAL_IncTick+0x24>)
 8001de2:	6013      	str	r3, [r2, #0]
}
 8001de4:	bf00      	nop
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	2000000c 	.word	0x2000000c
 8001df4:	20000468 	.word	0x20000468

08001df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_GetTick+0x14>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	20000468 	.word	0x20000468

08001e10 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	609a      	str	r2, [r3, #8]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr

08001e36 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	431a      	orrs	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
}
 8001e50:	bf00      	nop
 8001e52:	370c      	adds	r7, #12
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr

08001e5c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b087      	sub	sp, #28
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
 8001e84:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	3360      	adds	r3, #96	; 0x60
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	009b      	lsls	r3, r3, #2
 8001e90:	4413      	add	r3, r2
 8001e92:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4b08      	ldr	r3, [pc, #32]	; (8001ebc <LL_ADC_SetOffset+0x44>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001ea2:	683a      	ldr	r2, [r7, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001eb0:	bf00      	nop
 8001eb2:	371c      	adds	r7, #28
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	03fff000 	.word	0x03fff000

08001ec0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b085      	sub	sp, #20
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3360      	adds	r3, #96	; 0x60
 8001ece:	461a      	mov	r2, r3
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	4413      	add	r3, r2
 8001ed6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3714      	adds	r7, #20
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eea:	4770      	bx	lr

08001eec <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b087      	sub	sp, #28
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	3360      	adds	r3, #96	; 0x60
 8001efc:	461a      	mov	r2, r3
 8001efe:	68bb      	ldr	r3, [r7, #8]
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	431a      	orrs	r2, r3
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	3330      	adds	r3, #48	; 0x30
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	0a1b      	lsrs	r3, r3, #8
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	f003 030c 	and.w	r3, r3, #12
 8001f64:	4413      	add	r3, r2
 8001f66:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001f68:	697b      	ldr	r3, [r7, #20]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	f003 031f 	and.w	r3, r3, #31
 8001f72:	211f      	movs	r1, #31
 8001f74:	fa01 f303 	lsl.w	r3, r1, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	401a      	ands	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	0e9b      	lsrs	r3, r3, #26
 8001f80:	f003 011f 	and.w	r1, r3, #31
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	f003 031f 	and.w	r3, r3, #31
 8001f8a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f8e:	431a      	orrs	r2, r3
 8001f90:	697b      	ldr	r3, [r7, #20]
 8001f92:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001f94:	bf00      	nop
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b087      	sub	sp, #28
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	60f8      	str	r0, [r7, #12]
 8001fa8:	60b9      	str	r1, [r7, #8]
 8001faa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	3314      	adds	r3, #20
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	0e5b      	lsrs	r3, r3, #25
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	4413      	add	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	0d1b      	lsrs	r3, r3, #20
 8001fc8:	f003 031f 	and.w	r3, r3, #31
 8001fcc:	2107      	movs	r1, #7
 8001fce:	fa01 f303 	lsl.w	r3, r1, r3
 8001fd2:	43db      	mvns	r3, r3
 8001fd4:	401a      	ands	r2, r3
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	0d1b      	lsrs	r3, r3, #20
 8001fda:	f003 031f 	and.w	r3, r3, #31
 8001fde:	6879      	ldr	r1, [r7, #4]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	431a      	orrs	r2, r3
 8001fe6:	697b      	ldr	r3, [r7, #20]
 8001fe8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001fea:	bf00      	nop
 8001fec:	371c      	adds	r7, #28
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
	...

08001ff8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f003 0318 	and.w	r3, r3, #24
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <LL_ADC_SetChannelSingleDiff+0x44>)
 800201c:	40d9      	lsrs	r1, r3
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	400b      	ands	r3, r1
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	431a      	orrs	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	0007ffff 	.word	0x0007ffff

08002040 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	6093      	str	r3, [r2, #8]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002074:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002078:	d101      	bne.n	800207e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800209c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020a0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80020c8:	d101      	bne.n	80020ce <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80020ca:	2301      	movs	r3, #1
 80020cc:	e000      	b.n	80020d0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80020ce:	2300      	movs	r3, #0
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80020ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002114:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002118:	f043 0202 	orr.w	r2, r3, #2
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	f003 0301 	and.w	r3, r3, #1
 800213c:	2b01      	cmp	r3, #1
 800213e:	d101      	bne.n	8002144 <LL_ADC_IsEnabled+0x18>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <LL_ADC_IsEnabled+0x1a>
 8002144:	2300      	movs	r3, #0
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	f003 0302 	and.w	r3, r3, #2
 8002162:	2b02      	cmp	r3, #2
 8002164:	d101      	bne.n	800216a <LL_ADC_IsDisableOngoing+0x18>
 8002166:	2301      	movs	r3, #1
 8002168:	e000      	b.n	800216c <LL_ADC_IsDisableOngoing+0x1a>
 800216a:	2300      	movs	r3, #0
}
 800216c:	4618      	mov	r0, r3
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002188:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800218c:	f043 0204 	orr.w	r2, r3, #4
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002194:	bf00      	nop
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80021b4:	f043 0210 	orr.w	r2, r3, #16
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0304 	and.w	r3, r3, #4
 80021d8:	2b04      	cmp	r3, #4
 80021da:	d101      	bne.n	80021e0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80021dc:	2301      	movs	r3, #1
 80021de:	e000      	b.n	80021e2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	370c      	adds	r7, #12
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr

080021ee <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80021fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002202:	f043 0220 	orr.w	r2, r3, #32
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 800220a:	bf00      	nop
 800220c:	370c      	adds	r7, #12
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002216:	b480      	push	{r7}
 8002218:	b083      	sub	sp, #12
 800221a:	af00      	add	r7, sp, #0
 800221c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b08      	cmp	r3, #8
 8002228:	d101      	bne.n	800222e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800222a:	2301      	movs	r3, #1
 800222c:	e000      	b.n	8002230 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800222e:	2300      	movs	r3, #0
}
 8002230:	4618      	mov	r0, r3
 8002232:	370c      	adds	r7, #12
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr

0800223c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b088      	sub	sp, #32
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002248:	2300      	movs	r3, #0
 800224a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d101      	bne.n	8002256 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e126      	b.n	80024a4 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	2b00      	cmp	r3, #0
 8002262:	d109      	bne.n	8002278 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff f9d3 	bl	8001610 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fef1 	bl	8002064 <LL_ADC_IsDeepPowerDownEnabled>
 8002282:	4603      	mov	r3, r0
 8002284:	2b00      	cmp	r3, #0
 8002286:	d004      	beq.n	8002292 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fed7 	bl	8002040 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4618      	mov	r0, r3
 8002298:	f7ff ff0c 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d115      	bne.n	80022ce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7ff fef0 	bl	800208c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80022ac:	4b7f      	ldr	r3, [pc, #508]	; (80024ac <HAL_ADC_Init+0x270>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	099b      	lsrs	r3, r3, #6
 80022b2:	4a7f      	ldr	r2, [pc, #508]	; (80024b0 <HAL_ADC_Init+0x274>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	099b      	lsrs	r3, r3, #6
 80022ba:	3301      	adds	r3, #1
 80022bc:	005b      	lsls	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c0:	e002      	b.n	80022c8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	3b01      	subs	r3, #1
 80022c6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d1f9      	bne.n	80022c2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7ff feee 	bl	80020b4 <LL_ADC_IsInternalRegulatorEnabled>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d10d      	bne.n	80022fa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e2:	f043 0210 	orr.w	r2, r3, #16
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	f043 0201 	orr.w	r2, r3, #1
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7ff ff62 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 8002304:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 80bf 	bne.w	8002492 <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	2b00      	cmp	r3, #0
 8002318:	f040 80bb 	bne.w	8002492 <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002320:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002324:	f043 0202 	orr.w	r2, r3, #2
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4618      	mov	r0, r3
 8002332:	f7ff fefb 	bl	800212c <LL_ADC_IsEnabled>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10b      	bne.n	8002354 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800233c:	485d      	ldr	r0, [pc, #372]	; (80024b4 <HAL_ADC_Init+0x278>)
 800233e:	f7ff fef5 	bl	800212c <LL_ADC_IsEnabled>
 8002342:	4603      	mov	r3, r0
 8002344:	2b00      	cmp	r3, #0
 8002346:	d105      	bne.n	8002354 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	4619      	mov	r1, r3
 800234e:	485a      	ldr	r0, [pc, #360]	; (80024b8 <HAL_ADC_Init+0x27c>)
 8002350:	f7ff fd5e 	bl	8001e10 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	7e5b      	ldrb	r3, [r3, #25]
 8002358:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800235e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002364:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800236a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002372:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002374:	4313      	orrs	r3, r2
 8002376:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800237e:	2b01      	cmp	r3, #1
 8002380:	d106      	bne.n	8002390 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002386:	3b01      	subs	r3, #1
 8002388:	045b      	lsls	r3, r3, #17
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4313      	orrs	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002394:	2b00      	cmp	r3, #0
 8002396:	d009      	beq.n	80023ac <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a4:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	68da      	ldr	r2, [r3, #12]
 80023b2:	4b42      	ldr	r3, [pc, #264]	; (80024bc <HAL_ADC_Init+0x280>)
 80023b4:	4013      	ands	r3, r2
 80023b6:	687a      	ldr	r2, [r7, #4]
 80023b8:	6812      	ldr	r2, [r2, #0]
 80023ba:	69b9      	ldr	r1, [r7, #24]
 80023bc:	430b      	orrs	r3, r1
 80023be:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f7ff ff26 	bl	8002216 <LL_ADC_INJ_IsConversionOngoing>
 80023ca:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d13d      	bne.n	800244e <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d13a      	bne.n	800244e <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023dc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80023e4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80023e6:	4313      	orrs	r3, r2
 80023e8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023f4:	f023 0302 	bic.w	r3, r3, #2
 80023f8:	687a      	ldr	r2, [r7, #4]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	69b9      	ldr	r1, [r7, #24]
 80023fe:	430b      	orrs	r3, r1
 8002400:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002408:	2b01      	cmp	r3, #1
 800240a:	d118      	bne.n	800243e <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002416:	f023 0304 	bic.w	r3, r3, #4
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800241e:	687a      	ldr	r2, [r7, #4]
 8002420:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002422:	4311      	orrs	r1, r2
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800242e:	430a      	orrs	r2, r1
 8002430:	431a      	orrs	r2, r3
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	611a      	str	r2, [r3, #16]
 800243c:	e007      	b.n	800244e <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	691a      	ldr	r2, [r3, #16]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0201 	bic.w	r2, r2, #1
 800244c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d10c      	bne.n	8002470 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800245c:	f023 010f 	bic.w	r1, r3, #15
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	69db      	ldr	r3, [r3, #28]
 8002464:	1e5a      	subs	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	430a      	orrs	r2, r1
 800246c:	631a      	str	r2, [r3, #48]	; 0x30
 800246e:	e007      	b.n	8002480 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 020f 	bic.w	r2, r2, #15
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002484:	f023 0303 	bic.w	r3, r3, #3
 8002488:	f043 0201 	orr.w	r2, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	655a      	str	r2, [r3, #84]	; 0x54
 8002490:	e007      	b.n	80024a2 <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002496:	f043 0210 	orr.w	r2, r3, #16
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800249e:	2301      	movs	r3, #1
 80024a0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3720      	adds	r7, #32
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	20000004 	.word	0x20000004
 80024b0:	053e2d63 	.word	0x053e2d63
 80024b4:	50040000 	.word	0x50040000
 80024b8:	50040300 	.word	0x50040300
 80024bc:	fff0c007 	.word	0xfff0c007

080024c0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff fe7b 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 80024d2:	4603      	mov	r3, r0
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d14f      	bne.n	8002578 <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d101      	bne.n	80024e6 <HAL_ADC_Start+0x26>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e04b      	b.n	800257e <HAL_ADC_Start+0xbe>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	f000 fdb6 	bl	8003060 <ADC_Enable>
 80024f4:	4603      	mov	r3, r0
 80024f6:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d137      	bne.n	800256e <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002506:	f023 0301 	bic.w	r3, r3, #1
 800250a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800251a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251e:	d106      	bne.n	800252e <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002524:	f023 0206 	bic.w	r2, r3, #6
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	659a      	str	r2, [r3, #88]	; 0x58
 800252c:	e002      	b.n	8002534 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	221c      	movs	r2, #28
 800253a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d007      	beq.n	8002562 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800255a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fe06 	bl	8002178 <LL_ADC_REG_StartConversion>
 800256c:	e006      	b.n	800257c <HAL_ADC_Start+0xbc>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002576:	e001      	b.n	800257c <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002578:	2302      	movs	r3, #2
 800257a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
}
 800257e:	4618      	mov	r0, r3
 8002580:	3710      	adds	r7, #16
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b084      	sub	sp, #16
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002594:	2b01      	cmp	r3, #1
 8002596:	d101      	bne.n	800259c <HAL_ADC_Stop+0x16>
 8002598:	2302      	movs	r3, #2
 800259a:	e023      	b.n	80025e4 <HAL_ADC_Stop+0x5e>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80025a4:	2103      	movs	r1, #3
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 fc9e 	bl	8002ee8 <ADC_ConversionStop>
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d111      	bne.n	80025da <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 fdd8 	bl	800316c <ADC_Disable>
 80025bc:	4603      	mov	r3, r0
 80025be:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025c0:	7bfb      	ldrb	r3, [r7, #15]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d109      	bne.n	80025da <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025ce:	f023 0301 	bic.w	r3, r3, #1
 80025d2:	f043 0201 	orr.w	r2, r3, #1
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2200      	movs	r2, #0
 80025de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3710      	adds	r7, #16
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}

080025ec <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b086      	sub	sp, #24
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	695b      	ldr	r3, [r3, #20]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	d102      	bne.n	8002604 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80025fe:	2308      	movs	r3, #8
 8002600:	617b      	str	r3, [r7, #20]
 8002602:	e010      	b.n	8002626 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	f003 0301 	and.w	r3, r3, #1
 800260e:	2b00      	cmp	r3, #0
 8002610:	d007      	beq.n	8002622 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e06f      	b.n	8002702 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8002622:	2304      	movs	r3, #4
 8002624:	617b      	str	r3, [r7, #20]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002626:	f7ff fbe7 	bl	8001df8 <HAL_GetTick>
 800262a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800262c:	e021      	b.n	8002672 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d01d      	beq.n	8002672 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002636:	f7ff fbdf 	bl	8001df8 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	d302      	bcc.n	800264c <HAL_ADC_PollForConversion+0x60>
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d112      	bne.n	8002672 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4013      	ands	r3, r2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d10b      	bne.n	8002672 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e047      	b.n	8002702 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	4013      	ands	r3, r2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d0d6      	beq.n	800262e <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002684:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f7ff fc46 	bl	8001f22 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002696:	4603      	mov	r3, r0
 8002698:	2b00      	cmp	r3, #0
 800269a:	d01c      	beq.n	80026d6 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	7e5b      	ldrb	r3, [r3, #25]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d118      	bne.n	80026d6 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d111      	bne.n	80026d6 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d105      	bne.n	80026d6 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ce:	f043 0201 	orr.w	r2, r3, #1
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	68db      	ldr	r3, [r3, #12]
 80026dc:	60fb      	str	r3, [r7, #12]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	2b08      	cmp	r3, #8
 80026e2:	d104      	bne.n	80026ee <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2208      	movs	r2, #8
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	e008      	b.n	8002700 <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d103      	bne.n	8002700 <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	220c      	movs	r2, #12
 80026fe:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3718      	adds	r7, #24
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}

0800270a <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 800270a:	b480      	push	{r7}
 800270c:	b083      	sub	sp, #12
 800270e:	af00      	add	r7, sp, #0
 8002710:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b0b6      	sub	sp, #216	; 0xd8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272e:	2300      	movs	r3, #0
 8002730:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002734:	2300      	movs	r3, #0
 8002736:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800273e:	2b01      	cmp	r3, #1
 8002740:	d101      	bne.n	8002746 <HAL_ADC_ConfigChannel+0x22>
 8002742:	2302      	movs	r3, #2
 8002744:	e3bb      	b.n	8002ebe <HAL_ADC_ConfigChannel+0x79a>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2201      	movs	r2, #1
 800274a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff fd38 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 83a0 	bne.w	8002ea0 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b05      	cmp	r3, #5
 800276e:	d824      	bhi.n	80027ba <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	3b02      	subs	r3, #2
 8002776:	2b03      	cmp	r3, #3
 8002778:	d81b      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0x8e>
 800277a:	a201      	add	r2, pc, #4	; (adr r2, 8002780 <HAL_ADC_ConfigChannel+0x5c>)
 800277c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002780:	08002791 	.word	0x08002791
 8002784:	08002799 	.word	0x08002799
 8002788:	080027a1 	.word	0x080027a1
 800278c:	080027a9 	.word	0x080027a9
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002790:	230c      	movs	r3, #12
 8002792:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002796:	e010      	b.n	80027ba <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002798:	2312      	movs	r3, #18
 800279a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800279e:	e00c      	b.n	80027ba <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027a0:	2318      	movs	r3, #24
 80027a2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027a6:	e008      	b.n	80027ba <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027b0:	e003      	b.n	80027ba <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80027b2:	2306      	movs	r3, #6
 80027b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027b8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	461a      	mov	r2, r3
 80027c4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80027c8:	f7ff fbbe 	bl	8001f48 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f7ff fcf9 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 80027d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7ff fd19 	bl	8002216 <LL_ADC_INJ_IsConversionOngoing>
 80027e4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f040 81a4 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f040 819f 	bne.w	8002b3a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6818      	ldr	r0, [r3, #0]
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6819      	ldr	r1, [r3, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	689b      	ldr	r3, [r3, #8]
 8002808:	461a      	mov	r2, r3
 800280a:	f7ff fbc9 	bl	8001fa0 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	695a      	ldr	r2, [r3, #20]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	08db      	lsrs	r3, r3, #3
 800281a:	f003 0303 	and.w	r3, r3, #3
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	fa02 f303 	lsl.w	r3, r2, r3
 8002824:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	2b04      	cmp	r3, #4
 800282e:	d00a      	beq.n	8002846 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6818      	ldr	r0, [r3, #0]
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	6919      	ldr	r1, [r3, #16]
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002840:	f7ff fb1a 	bl	8001e78 <LL_ADC_SetOffset>
 8002844:	e179      	b.n	8002b3a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f7ff fb37 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002852:	4603      	mov	r3, r0
 8002854:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002858:	2b00      	cmp	r3, #0
 800285a:	d10a      	bne.n	8002872 <HAL_ADC_ConfigChannel+0x14e>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2100      	movs	r1, #0
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff fb2c 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002868:	4603      	mov	r3, r0
 800286a:	0e9b      	lsrs	r3, r3, #26
 800286c:	f003 021f 	and.w	r2, r3, #31
 8002870:	e01e      	b.n	80028b0 <HAL_ADC_ConfigChannel+0x18c>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2100      	movs	r1, #0
 8002878:	4618      	mov	r0, r3
 800287a:	f7ff fb21 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 800287e:	4603      	mov	r3, r0
 8002880:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002884:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002888:	fa93 f3a3 	rbit	r3, r3
 800288c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002890:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002894:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800289c:	2b00      	cmp	r3, #0
 800289e:	d101      	bne.n	80028a4 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028a0:	2320      	movs	r3, #32
 80028a2:	e004      	b.n	80028ae <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028a8:	fab3 f383 	clz	r3, r3
 80028ac:	b2db      	uxtb	r3, r3
 80028ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d105      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x1a4>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0e9b      	lsrs	r3, r3, #26
 80028c2:	f003 031f 	and.w	r3, r3, #31
 80028c6:	e018      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1d6>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d4:	fa93 f3a3 	rbit	r3, r3
 80028d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80028dc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80028e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80028e4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d101      	bne.n	80028f0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80028ec:	2320      	movs	r3, #32
 80028ee:	e004      	b.n	80028fa <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80028f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80028fa:	429a      	cmp	r2, r3
 80028fc:	d106      	bne.n	800290c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2200      	movs	r2, #0
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff faf0 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2101      	movs	r1, #1
 8002912:	4618      	mov	r0, r3
 8002914:	f7ff fad4 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002918:	4603      	mov	r3, r0
 800291a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291e:	2b00      	cmp	r3, #0
 8002920:	d10a      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x214>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f7ff fac9 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 800292e:	4603      	mov	r3, r0
 8002930:	0e9b      	lsrs	r3, r3, #26
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	e01e      	b.n	8002976 <HAL_ADC_ConfigChannel+0x252>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2101      	movs	r1, #1
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fabe 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002944:	4603      	mov	r3, r0
 8002946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002956:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800295a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800295e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002966:	2320      	movs	r3, #32
 8002968:	e004      	b.n	8002974 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800296a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800296e:	fab3 f383 	clz	r3, r3
 8002972:	b2db      	uxtb	r3, r3
 8002974:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800297e:	2b00      	cmp	r3, #0
 8002980:	d105      	bne.n	800298e <HAL_ADC_ConfigChannel+0x26a>
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	0e9b      	lsrs	r3, r3, #26
 8002988:	f003 031f 	and.w	r3, r3, #31
 800298c:	e018      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x29c>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002996:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800299a:	fa93 f3a3 	rbit	r3, r3
 800299e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80029a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029aa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d101      	bne.n	80029b6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80029b2:	2320      	movs	r3, #32
 80029b4:	e004      	b.n	80029c0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80029b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80029ba:	fab3 f383 	clz	r3, r3
 80029be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80029c0:	429a      	cmp	r2, r3
 80029c2:	d106      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	2200      	movs	r2, #0
 80029ca:	2101      	movs	r1, #1
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff fa8d 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fa71 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80029de:	4603      	mov	r3, r0
 80029e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10a      	bne.n	80029fe <HAL_ADC_ConfigChannel+0x2da>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2102      	movs	r1, #2
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7ff fa66 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 80029f4:	4603      	mov	r3, r0
 80029f6:	0e9b      	lsrs	r3, r3, #26
 80029f8:	f003 021f 	and.w	r2, r3, #31
 80029fc:	e01e      	b.n	8002a3c <HAL_ADC_ConfigChannel+0x318>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	2102      	movs	r1, #2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f7ff fa5b 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d101      	bne.n	8002a30 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a2c:	2320      	movs	r3, #32
 8002a2e:	e004      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a30:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <HAL_ADC_ConfigChannel+0x330>
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	0e9b      	lsrs	r3, r3, #26
 8002a4e:	f003 031f 	and.w	r3, r3, #31
 8002a52:	e014      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x35a>
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5c:	fa93 f3a3 	rbit	r3, r3
 8002a60:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002a62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a64:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002a68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d101      	bne.n	8002a74 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002a70:	2320      	movs	r3, #32
 8002a72:	e004      	b.n	8002a7e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002a74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002a78:	fab3 f383 	clz	r3, r3
 8002a7c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a7e:	429a      	cmp	r2, r3
 8002a80:	d106      	bne.n	8002a90 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2102      	movs	r1, #2
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7ff fa2e 	bl	8001eec <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	2103      	movs	r1, #3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff fa12 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d10a      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x398>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	2103      	movs	r1, #3
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fa07 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	0e9b      	lsrs	r3, r3, #26
 8002ab6:	f003 021f 	and.w	r2, r3, #31
 8002aba:	e017      	b.n	8002aec <HAL_ADC_ConfigChannel+0x3c8>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	2103      	movs	r1, #3
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f9fc 	bl	8001ec0 <LL_ADC_GetOffsetChannel>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002acc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ace:	fa93 f3a3 	rbit	r3, r3
 8002ad2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002ad4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ad6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002ad8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d101      	bne.n	8002ae2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002ade:	2320      	movs	r3, #32
 8002ae0:	e003      	b.n	8002aea <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002ae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ae4:	fab3 f383 	clz	r3, r3
 8002ae8:	b2db      	uxtb	r3, r3
 8002aea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d105      	bne.n	8002b04 <HAL_ADC_ConfigChannel+0x3e0>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	0e9b      	lsrs	r3, r3, #26
 8002afe:	f003 031f 	and.w	r3, r3, #31
 8002b02:	e011      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x404>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b0c:	fa93 f3a3 	rbit	r3, r3
 8002b10:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b14:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d101      	bne.n	8002b20 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b1c:	2320      	movs	r3, #32
 8002b1e:	e003      	b.n	8002b28 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b22:	fab3 f383 	clz	r3, r3
 8002b26:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d106      	bne.n	8002b3a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2200      	movs	r2, #0
 8002b32:	2103      	movs	r1, #3
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff f9d9 	bl	8001eec <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7ff faf4 	bl	800212c <LL_ADC_IsEnabled>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	f040 8140 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6818      	ldr	r0, [r3, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	6819      	ldr	r1, [r3, #0]
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	461a      	mov	r2, r3
 8002b5a:	f7ff fa4d 	bl	8001ff8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	4a8f      	ldr	r2, [pc, #572]	; (8002da0 <HAL_ADC_ConfigChannel+0x67c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f040 8131 	bne.w	8002dcc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_ADC_ConfigChannel+0x46e>
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	0e9b      	lsrs	r3, r3, #26
 8002b80:	3301      	adds	r3, #1
 8002b82:	f003 031f 	and.w	r3, r3, #31
 8002b86:	2b09      	cmp	r3, #9
 8002b88:	bf94      	ite	ls
 8002b8a:	2301      	movls	r3, #1
 8002b8c:	2300      	movhi	r3, #0
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	e019      	b.n	8002bc6 <HAL_ADC_ConfigChannel+0x4a2>
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b9a:	fa93 f3a3 	rbit	r3, r3
 8002b9e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ba2:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002ba4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002baa:	2320      	movs	r3, #32
 8002bac:	e003      	b.n	8002bb6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bb0:	fab3 f383 	clz	r3, r3
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	2b09      	cmp	r3, #9
 8002bbe:	bf94      	ite	ls
 8002bc0:	2301      	movls	r3, #1
 8002bc2:	2300      	movhi	r3, #0
 8002bc4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d079      	beq.n	8002cbe <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d107      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x4c2>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	0e9b      	lsrs	r3, r3, #26
 8002bdc:	3301      	adds	r3, #1
 8002bde:	069b      	lsls	r3, r3, #26
 8002be0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002be4:	e015      	b.n	8002c12 <HAL_ADC_ConfigChannel+0x4ee>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002bf4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002bf6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002bf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	069b      	lsls	r3, r3, #26
 8002c0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d109      	bne.n	8002c32 <HAL_ADC_ConfigChannel+0x50e>
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0e9b      	lsrs	r3, r3, #26
 8002c24:	3301      	adds	r3, #1
 8002c26:	f003 031f 	and.w	r3, r3, #31
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c30:	e017      	b.n	8002c62 <HAL_ADC_ConfigChannel+0x53e>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3a:	fa93 f3a3 	rbit	r3, r3
 8002c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c42:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d101      	bne.n	8002c4e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c4a:	2320      	movs	r3, #32
 8002c4c:	e003      	b.n	8002c56 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c50:	fab3 f383 	clz	r3, r3
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f003 031f 	and.w	r3, r3, #31
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c62:	ea42 0103 	orr.w	r1, r2, r3
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <HAL_ADC_ConfigChannel+0x564>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 021f 	and.w	r2, r3, #31
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	051b      	lsls	r3, r3, #20
 8002c86:	e018      	b.n	8002cba <HAL_ADC_ConfigChannel+0x596>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	fa93 f3a3 	rbit	r3, r3
 8002c94:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002ca0:	2320      	movs	r3, #32
 8002ca2:	e003      	b.n	8002cac <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca6:	fab3 f383 	clz	r3, r3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	3301      	adds	r3, #1
 8002cae:	f003 021f 	and.w	r2, r3, #31
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	005b      	lsls	r3, r3, #1
 8002cb6:	4413      	add	r3, r2
 8002cb8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002cba:	430b      	orrs	r3, r1
 8002cbc:	e081      	b.n	8002dc2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d107      	bne.n	8002cda <HAL_ADC_ConfigChannel+0x5b6>
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	0e9b      	lsrs	r3, r3, #26
 8002cd0:	3301      	adds	r3, #1
 8002cd2:	069b      	lsls	r3, r3, #26
 8002cd4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002cd8:	e015      	b.n	8002d06 <HAL_ADC_ConfigChannel+0x5e2>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ce2:	fa93 f3a3 	rbit	r3, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002cf2:	2320      	movs	r3, #32
 8002cf4:	e003      	b.n	8002cfe <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cf8:	fab3 f383 	clz	r3, r3
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	069b      	lsls	r3, r3, #26
 8002d02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_ADC_ConfigChannel+0x602>
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	0e9b      	lsrs	r3, r3, #26
 8002d18:	3301      	adds	r3, #1
 8002d1a:	f003 031f 	and.w	r3, r3, #31
 8002d1e:	2101      	movs	r1, #1
 8002d20:	fa01 f303 	lsl.w	r3, r1, r3
 8002d24:	e017      	b.n	8002d56 <HAL_ADC_ConfigChannel+0x632>
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	fa93 f3a3 	rbit	r3, r3
 8002d32:	61bb      	str	r3, [r7, #24]
  return result;
 8002d34:	69bb      	ldr	r3, [r7, #24]
 8002d36:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d38:	6a3b      	ldr	r3, [r7, #32]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d3e:	2320      	movs	r3, #32
 8002d40:	e003      	b.n	8002d4a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d42:	6a3b      	ldr	r3, [r7, #32]
 8002d44:	fab3 f383 	clz	r3, r3
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	f003 031f 	and.w	r3, r3, #31
 8002d50:	2101      	movs	r1, #1
 8002d52:	fa01 f303 	lsl.w	r3, r1, r3
 8002d56:	ea42 0103 	orr.w	r1, r2, r3
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d10d      	bne.n	8002d82 <HAL_ADC_ConfigChannel+0x65e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 021f 	and.w	r2, r3, #31
 8002d72:	4613      	mov	r3, r2
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4413      	add	r3, r2
 8002d78:	3b1e      	subs	r3, #30
 8002d7a:	051b      	lsls	r3, r3, #20
 8002d7c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d80:	e01e      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x69c>
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	60fb      	str	r3, [r7, #12]
  return result;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d104      	bne.n	8002da4 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002d9a:	2320      	movs	r3, #32
 8002d9c:	e006      	b.n	8002dac <HAL_ADC_ConfigChannel+0x688>
 8002d9e:	bf00      	nop
 8002da0:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	fab3 f383 	clz	r3, r3
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	3301      	adds	r3, #1
 8002dae:	f003 021f 	and.w	r2, r3, #31
 8002db2:	4613      	mov	r3, r2
 8002db4:	005b      	lsls	r3, r3, #1
 8002db6:	4413      	add	r3, r2
 8002db8:	3b1e      	subs	r3, #30
 8002dba:	051b      	lsls	r3, r3, #20
 8002dbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002dc2:	683a      	ldr	r2, [r7, #0]
 8002dc4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7ff f8ea 	bl	8001fa0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b3d      	ldr	r3, [pc, #244]	; (8002ec8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d06c      	beq.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002dd8:	483c      	ldr	r0, [pc, #240]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a8>)
 8002dda:	f7ff f83f 	bl	8001e5c <LL_ADC_GetCommonPathInternalCh>
 8002dde:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a3a      	ldr	r2, [pc, #232]	; (8002ed0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d127      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d121      	bne.n	8002e3c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a35      	ldr	r2, [pc, #212]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d157      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	482f      	ldr	r0, [pc, #188]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e0e:	f7ff f812 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e12:	4b31      	ldr	r3, [pc, #196]	; (8002ed8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	099b      	lsrs	r3, r3, #6
 8002e18:	4a30      	ldr	r2, [pc, #192]	; (8002edc <HAL_ADC_ConfigChannel+0x7b8>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	099b      	lsrs	r3, r3, #6
 8002e20:	1c5a      	adds	r2, r3, #1
 8002e22:	4613      	mov	r3, r2
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e2c:	e002      	b.n	8002e34 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	3b01      	subs	r3, #1
 8002e32:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d1f9      	bne.n	8002e2e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a27      	ldr	r2, [pc, #156]	; (8002ee0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d113      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10d      	bne.n	8002e6e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a1f      	ldr	r2, [pc, #124]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d12a      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e5c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e60:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e64:	4619      	mov	r1, r3
 8002e66:	4819      	ldr	r0, [pc, #100]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e68:	f7fe ffe5 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002e6c:	e021      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d11c      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d116      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a12      	ldr	r2, [pc, #72]	; (8002ed4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d111      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002e96:	4619      	mov	r1, r3
 8002e98:	480c      	ldr	r0, [pc, #48]	; (8002ecc <HAL_ADC_ConfigChannel+0x7a8>)
 8002e9a:	f7fe ffcc 	bl	8001e36 <LL_ADC_SetCommonPathInternalCh>
 8002e9e:	e008      	b.n	8002eb2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002eba:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	37d8      	adds	r7, #216	; 0xd8
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	80080000 	.word	0x80080000
 8002ecc:	50040300 	.word	0x50040300
 8002ed0:	c7520000 	.word	0xc7520000
 8002ed4:	50040000 	.word	0x50040000
 8002ed8:	20000004 	.word	0x20000004
 8002edc:	053e2d63 	.word	0x053e2d63
 8002ee0:	cb840000 	.word	0xcb840000
 8002ee4:	80000001 	.word	0x80000001

08002ee8 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f7ff f962 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 8002f04:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f7ff f983 	bl	8002216 <LL_ADC_INJ_IsConversionOngoing>
 8002f10:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8098 	beq.w	8003050 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d02a      	beq.n	8002f84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7e5b      	ldrb	r3, [r3, #25]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d126      	bne.n	8002f84 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	7e1b      	ldrb	r3, [r3, #24]
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d122      	bne.n	8002f84 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f42:	e014      	b.n	8002f6e <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4a45      	ldr	r2, [pc, #276]	; (800305c <ADC_ConversionStop+0x174>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d90d      	bls.n	8002f68 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f50:	f043 0210 	orr.w	r2, r3, #16
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5c:	f043 0201 	orr.w	r2, r3, #1
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e074      	b.n	8003052 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f78:	2b40      	cmp	r3, #64	; 0x40
 8002f7a:	d1e3      	bne.n	8002f44 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2240      	movs	r2, #64	; 0x40
 8002f82:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d014      	beq.n	8002fb4 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7ff f91a 	bl	80021c8 <LL_ADC_REG_IsConversionOngoing>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d00c      	beq.n	8002fb4 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7ff f8d7 	bl	8002152 <LL_ADC_IsDisableOngoing>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d104      	bne.n	8002fb4 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff f8f6 	bl	80021a0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d014      	beq.n	8002fe4 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7ff f929 	bl	8002216 <LL_ADC_INJ_IsConversionOngoing>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00c      	beq.n	8002fe4 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f7ff f8bf 	bl	8002152 <LL_ADC_IsDisableOngoing>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d104      	bne.n	8002fe4 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7ff f905 	bl	80021ee <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d005      	beq.n	8002ff6 <ADC_ConversionStop+0x10e>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	2b03      	cmp	r3, #3
 8002fee:	d105      	bne.n	8002ffc <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8002ff0:	230c      	movs	r3, #12
 8002ff2:	617b      	str	r3, [r7, #20]
        break;
 8002ff4:	e005      	b.n	8003002 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	617b      	str	r3, [r7, #20]
        break;
 8002ffa:	e002      	b.n	8003002 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8002ffc:	2304      	movs	r3, #4
 8002ffe:	617b      	str	r3, [r7, #20]
        break;
 8003000:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003002:	f7fe fef9 	bl	8001df8 <HAL_GetTick>
 8003006:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003008:	e01b      	b.n	8003042 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800300a:	f7fe fef5 	bl	8001df8 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b05      	cmp	r3, #5
 8003016:	d914      	bls.n	8003042 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	689a      	ldr	r2, [r3, #8]
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	4013      	ands	r3, r2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00d      	beq.n	8003042 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800302a:	f043 0210 	orr.w	r2, r3, #16
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003036:	f043 0201 	orr.w	r2, r3, #1
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800303e:	2301      	movs	r3, #1
 8003040:	e007      	b.n	8003052 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1dc      	bne.n	800300a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003050:	2300      	movs	r3, #0
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}
 800305a:	bf00      	nop
 800305c:	a33fffff 	.word	0xa33fffff

08003060 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003068:	2300      	movs	r3, #0
 800306a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4618      	mov	r0, r3
 8003072:	f7ff f85b 	bl	800212c <LL_ADC_IsEnabled>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d169      	bne.n	8003150 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	4b36      	ldr	r3, [pc, #216]	; (800315c <ADC_Enable+0xfc>)
 8003084:	4013      	ands	r3, r2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	f043 0210 	orr.w	r2, r3, #16
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	f043 0201 	orr.w	r2, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e055      	b.n	8003152 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f816 	bl	80020dc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030b0:	482b      	ldr	r0, [pc, #172]	; (8003160 <ADC_Enable+0x100>)
 80030b2:	f7fe fed3 	bl	8001e5c <LL_ADC_GetCommonPathInternalCh>
 80030b6:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80030b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d013      	beq.n	80030e8 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030c0:	4b28      	ldr	r3, [pc, #160]	; (8003164 <ADC_Enable+0x104>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	099b      	lsrs	r3, r3, #6
 80030c6:	4a28      	ldr	r2, [pc, #160]	; (8003168 <ADC_Enable+0x108>)
 80030c8:	fba2 2303 	umull	r2, r3, r2, r3
 80030cc:	099b      	lsrs	r3, r3, #6
 80030ce:	1c5a      	adds	r2, r3, #1
 80030d0:	4613      	mov	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	4413      	add	r3, r2
 80030d6:	009b      	lsls	r3, r3, #2
 80030d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030da:	e002      	b.n	80030e2 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	3b01      	subs	r3, #1
 80030e0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1f9      	bne.n	80030dc <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80030e8:	f7fe fe86 	bl	8001df8 <HAL_GetTick>
 80030ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80030ee:	e028      	b.n	8003142 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff f819 	bl	800212c <LL_ADC_IsEnabled>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d104      	bne.n	800310a <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4618      	mov	r0, r3
 8003106:	f7fe ffe9 	bl	80020dc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800310a:	f7fe fe75 	bl	8001df8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d914      	bls.n	8003142 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	2b01      	cmp	r3, #1
 8003124:	d00d      	beq.n	8003142 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e007      	b.n	8003152 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b01      	cmp	r3, #1
 800314e:	d1cf      	bne.n	80030f0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003150:	2300      	movs	r3, #0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}
 800315a:	bf00      	nop
 800315c:	8000003f 	.word	0x8000003f
 8003160:	50040300 	.word	0x50040300
 8003164:	20000004 	.word	0x20000004
 8003168:	053e2d63 	.word	0x053e2d63

0800316c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7fe ffea 	bl	8002152 <LL_ADC_IsDisableOngoing>
 800317e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7fe ffd1 	bl	800212c <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d047      	beq.n	8003220 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d144      	bne.n	8003220 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 030d 	and.w	r3, r3, #13
 80031a0:	2b01      	cmp	r3, #1
 80031a2:	d10c      	bne.n	80031be <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7fe ffab 	bl	8002104 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2203      	movs	r2, #3
 80031b4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80031b6:	f7fe fe1f 	bl	8001df8 <HAL_GetTick>
 80031ba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031bc:	e029      	b.n	8003212 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c2:	f043 0210 	orr.w	r2, r3, #16
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ce:	f043 0201 	orr.w	r2, r3, #1
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 80031d6:	2301      	movs	r3, #1
 80031d8:	e023      	b.n	8003222 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80031da:	f7fe fe0d 	bl	8001df8 <HAL_GetTick>
 80031de:	4602      	mov	r2, r0
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	1ad3      	subs	r3, r2, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d914      	bls.n	8003212 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	f003 0301 	and.w	r3, r3, #1
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031fa:	f043 0210 	orr.w	r2, r3, #16
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e007      	b.n	8003222 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	f003 0301 	and.w	r3, r3, #1
 800321c:	2b00      	cmp	r3, #0
 800321e:	d1dc      	bne.n	80031da <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e0ed      	b.n	8003418 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f7fe fa45 	bl	80016d8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800325e:	f7fe fdcb 	bl	8001df8 <HAL_GetTick>
 8003262:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003264:	e012      	b.n	800328c <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003266:	f7fe fdc7 	bl	8001df8 <HAL_GetTick>
 800326a:	4602      	mov	r2, r0
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	1ad3      	subs	r3, r2, r3
 8003270:	2b0a      	cmp	r3, #10
 8003272:	d90b      	bls.n	800328c <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003278:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2205      	movs	r2, #5
 8003284:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003288:	2301      	movs	r3, #1
 800328a:	e0c5      	b.n	8003418 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0e5      	beq.n	8003266 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0202 	bic.w	r2, r2, #2
 80032a8:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032aa:	f7fe fda5 	bl	8001df8 <HAL_GetTick>
 80032ae:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032b0:	e012      	b.n	80032d8 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80032b2:	f7fe fda1 	bl	8001df8 <HAL_GetTick>
 80032b6:	4602      	mov	r2, r0
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	1ad3      	subs	r3, r2, r3
 80032bc:	2b0a      	cmp	r3, #10
 80032be:	d90b      	bls.n	80032d8 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2205      	movs	r2, #5
 80032d0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e09f      	b.n	8003418 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d1e5      	bne.n	80032b2 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	7e1b      	ldrb	r3, [r3, #24]
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d108      	bne.n	8003300 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032fc:	601a      	str	r2, [r3, #0]
 80032fe:	e007      	b.n	8003310 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800330e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	7e5b      	ldrb	r3, [r3, #25]
 8003314:	2b01      	cmp	r3, #1
 8003316:	d108      	bne.n	800332a <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003326:	601a      	str	r2, [r3, #0]
 8003328:	e007      	b.n	800333a <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	7e9b      	ldrb	r3, [r3, #26]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d108      	bne.n	8003354 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0220 	orr.w	r2, r2, #32
 8003350:	601a      	str	r2, [r3, #0]
 8003352:	e007      	b.n	8003364 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	681a      	ldr	r2, [r3, #0]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 0220 	bic.w	r2, r2, #32
 8003362:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	7edb      	ldrb	r3, [r3, #27]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d108      	bne.n	800337e <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681a      	ldr	r2, [r3, #0]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f022 0210 	bic.w	r2, r2, #16
 800337a:	601a      	str	r2, [r3, #0]
 800337c:	e007      	b.n	800338e <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f042 0210 	orr.w	r2, r2, #16
 800338c:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	7f1b      	ldrb	r3, [r3, #28]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d108      	bne.n	80033a8 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0208 	orr.w	r2, r2, #8
 80033a4:	601a      	str	r2, [r3, #0]
 80033a6:	e007      	b.n	80033b8 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f022 0208 	bic.w	r2, r2, #8
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	7f5b      	ldrb	r3, [r3, #29]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d108      	bne.n	80033d2 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f042 0204 	orr.w	r2, r2, #4
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	e007      	b.n	80033e2 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0204 	bic.w	r2, r2, #4
 80033e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	431a      	orrs	r2, r3
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	ea42 0103 	orr.w	r1, r2, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	1e5a      	subs	r2, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003430:	4b0c      	ldr	r3, [pc, #48]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800343c:	4013      	ands	r3, r2
 800343e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003448:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800344c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003450:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003452:	4a04      	ldr	r2, [pc, #16]	; (8003464 <__NVIC_SetPriorityGrouping+0x44>)
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	60d3      	str	r3, [r2, #12]
}
 8003458:	bf00      	nop
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800346c:	4b04      	ldr	r3, [pc, #16]	; (8003480 <__NVIC_GetPriorityGrouping+0x18>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	0a1b      	lsrs	r3, r3, #8
 8003472:	f003 0307 	and.w	r3, r3, #7
}
 8003476:	4618      	mov	r0, r3
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	4603      	mov	r3, r0
 800348c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800348e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003492:	2b00      	cmp	r3, #0
 8003494:	db0b      	blt.n	80034ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003496:	79fb      	ldrb	r3, [r7, #7]
 8003498:	f003 021f 	and.w	r2, r3, #31
 800349c:	4907      	ldr	r1, [pc, #28]	; (80034bc <__NVIC_EnableIRQ+0x38>)
 800349e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a2:	095b      	lsrs	r3, r3, #5
 80034a4:	2001      	movs	r0, #1
 80034a6:	fa00 f202 	lsl.w	r2, r0, r2
 80034aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ae:	bf00      	nop
 80034b0:	370c      	adds	r7, #12
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	e000e100 	.word	0xe000e100

080034c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	6039      	str	r1, [r7, #0]
 80034ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	db0a      	blt.n	80034ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	b2da      	uxtb	r2, r3
 80034d8:	490c      	ldr	r1, [pc, #48]	; (800350c <__NVIC_SetPriority+0x4c>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	0112      	lsls	r2, r2, #4
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	440b      	add	r3, r1
 80034e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e8:	e00a      	b.n	8003500 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4908      	ldr	r1, [pc, #32]	; (8003510 <__NVIC_SetPriority+0x50>)
 80034f0:	79fb      	ldrb	r3, [r7, #7]
 80034f2:	f003 030f 	and.w	r3, r3, #15
 80034f6:	3b04      	subs	r3, #4
 80034f8:	0112      	lsls	r2, r2, #4
 80034fa:	b2d2      	uxtb	r2, r2
 80034fc:	440b      	add	r3, r1
 80034fe:	761a      	strb	r2, [r3, #24]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	e000e100 	.word	0xe000e100
 8003510:	e000ed00 	.word	0xe000ed00

08003514 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003514:	b480      	push	{r7}
 8003516:	b089      	sub	sp, #36	; 0x24
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	f003 0307 	and.w	r3, r3, #7
 8003526:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	f1c3 0307 	rsb	r3, r3, #7
 800352e:	2b04      	cmp	r3, #4
 8003530:	bf28      	it	cs
 8003532:	2304      	movcs	r3, #4
 8003534:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3304      	adds	r3, #4
 800353a:	2b06      	cmp	r3, #6
 800353c:	d902      	bls.n	8003544 <NVIC_EncodePriority+0x30>
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3b03      	subs	r3, #3
 8003542:	e000      	b.n	8003546 <NVIC_EncodePriority+0x32>
 8003544:	2300      	movs	r3, #0
 8003546:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003548:	f04f 32ff 	mov.w	r2, #4294967295
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	fa02 f303 	lsl.w	r3, r2, r3
 8003552:	43da      	mvns	r2, r3
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	401a      	ands	r2, r3
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800355c:	f04f 31ff 	mov.w	r1, #4294967295
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fa01 f303 	lsl.w	r3, r1, r3
 8003566:	43d9      	mvns	r1, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800356c:	4313      	orrs	r3, r2
         );
}
 800356e:	4618      	mov	r0, r3
 8003570:	3724      	adds	r7, #36	; 0x24
 8003572:	46bd      	mov	sp, r7
 8003574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003578:	4770      	bx	lr
	...

0800357c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3b01      	subs	r3, #1
 8003588:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800358c:	d301      	bcc.n	8003592 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800358e:	2301      	movs	r3, #1
 8003590:	e00f      	b.n	80035b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003592:	4a0a      	ldr	r2, [pc, #40]	; (80035bc <SysTick_Config+0x40>)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3b01      	subs	r3, #1
 8003598:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800359a:	210f      	movs	r1, #15
 800359c:	f04f 30ff 	mov.w	r0, #4294967295
 80035a0:	f7ff ff8e 	bl	80034c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035a4:	4b05      	ldr	r3, [pc, #20]	; (80035bc <SysTick_Config+0x40>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <SysTick_Config+0x40>)
 80035ac:	2207      	movs	r2, #7
 80035ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	e000e010 	.word	0xe000e010

080035c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b082      	sub	sp, #8
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c8:	6878      	ldr	r0, [r7, #4]
 80035ca:	f7ff ff29 	bl	8003420 <__NVIC_SetPriorityGrouping>
}
 80035ce:	bf00      	nop
 80035d0:	3708      	adds	r7, #8
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035d6:	b580      	push	{r7, lr}
 80035d8:	b086      	sub	sp, #24
 80035da:	af00      	add	r7, sp, #0
 80035dc:	4603      	mov	r3, r0
 80035de:	60b9      	str	r1, [r7, #8]
 80035e0:	607a      	str	r2, [r7, #4]
 80035e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80035e4:	2300      	movs	r3, #0
 80035e6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80035e8:	f7ff ff3e 	bl	8003468 <__NVIC_GetPriorityGrouping>
 80035ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	6978      	ldr	r0, [r7, #20]
 80035f4:	f7ff ff8e 	bl	8003514 <NVIC_EncodePriority>
 80035f8:	4602      	mov	r2, r0
 80035fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035fe:	4611      	mov	r1, r2
 8003600:	4618      	mov	r0, r3
 8003602:	f7ff ff5d 	bl	80034c0 <__NVIC_SetPriority>
}
 8003606:	bf00      	nop
 8003608:	3718      	adds	r7, #24
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}

0800360e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800360e:	b580      	push	{r7, lr}
 8003610:	b082      	sub	sp, #8
 8003612:	af00      	add	r7, sp, #0
 8003614:	4603      	mov	r3, r0
 8003616:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003618:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800361c:	4618      	mov	r0, r3
 800361e:	f7ff ff31 	bl	8003484 <__NVIC_EnableIRQ>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800362a:	b580      	push	{r7, lr}
 800362c:	b082      	sub	sp, #8
 800362e:	af00      	add	r7, sp, #0
 8003630:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f7ff ffa2 	bl	800357c <SysTick_Config>
 8003638:	4603      	mov	r3, r0
}
 800363a:	4618      	mov	r0, r3
 800363c:	3708      	adds	r7, #8
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
	...

08003644 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d101      	bne.n	8003656 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	e098      	b.n	8003788 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	461a      	mov	r2, r3
 800365c:	4b4d      	ldr	r3, [pc, #308]	; (8003794 <HAL_DMA_Init+0x150>)
 800365e:	429a      	cmp	r2, r3
 8003660:	d80f      	bhi.n	8003682 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	461a      	mov	r2, r3
 8003668:	4b4b      	ldr	r3, [pc, #300]	; (8003798 <HAL_DMA_Init+0x154>)
 800366a:	4413      	add	r3, r2
 800366c:	4a4b      	ldr	r2, [pc, #300]	; (800379c <HAL_DMA_Init+0x158>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	091b      	lsrs	r3, r3, #4
 8003674:	009a      	lsls	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a48      	ldr	r2, [pc, #288]	; (80037a0 <HAL_DMA_Init+0x15c>)
 800367e:	641a      	str	r2, [r3, #64]	; 0x40
 8003680:	e00e      	b.n	80036a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	461a      	mov	r2, r3
 8003688:	4b46      	ldr	r3, [pc, #280]	; (80037a4 <HAL_DMA_Init+0x160>)
 800368a:	4413      	add	r3, r2
 800368c:	4a43      	ldr	r2, [pc, #268]	; (800379c <HAL_DMA_Init+0x158>)
 800368e:	fba2 2303 	umull	r2, r3, r2, r3
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	009a      	lsls	r2, r3, #2
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a42      	ldr	r2, [pc, #264]	; (80037a8 <HAL_DMA_Init+0x164>)
 800369e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80036b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80036c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	691b      	ldr	r3, [r3, #16]
 80036ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6a1b      	ldr	r3, [r3, #32]
 80036e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80036fa:	d039      	beq.n	8003770 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003700:	4a27      	ldr	r2, [pc, #156]	; (80037a0 <HAL_DMA_Init+0x15c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d11a      	bne.n	800373c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003706:	4b29      	ldr	r3, [pc, #164]	; (80037ac <HAL_DMA_Init+0x168>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800370e:	f003 031c 	and.w	r3, r3, #28
 8003712:	210f      	movs	r1, #15
 8003714:	fa01 f303 	lsl.w	r3, r1, r3
 8003718:	43db      	mvns	r3, r3
 800371a:	4924      	ldr	r1, [pc, #144]	; (80037ac <HAL_DMA_Init+0x168>)
 800371c:	4013      	ands	r3, r2
 800371e:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003720:	4b22      	ldr	r3, [pc, #136]	; (80037ac <HAL_DMA_Init+0x168>)
 8003722:	681a      	ldr	r2, [r3, #0]
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6859      	ldr	r1, [r3, #4]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372c:	f003 031c 	and.w	r3, r3, #28
 8003730:	fa01 f303 	lsl.w	r3, r1, r3
 8003734:	491d      	ldr	r1, [pc, #116]	; (80037ac <HAL_DMA_Init+0x168>)
 8003736:	4313      	orrs	r3, r2
 8003738:	600b      	str	r3, [r1, #0]
 800373a:	e019      	b.n	8003770 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800373c:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <HAL_DMA_Init+0x16c>)
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003744:	f003 031c 	and.w	r3, r3, #28
 8003748:	210f      	movs	r1, #15
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43db      	mvns	r3, r3
 8003750:	4917      	ldr	r1, [pc, #92]	; (80037b0 <HAL_DMA_Init+0x16c>)
 8003752:	4013      	ands	r3, r2
 8003754:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003756:	4b16      	ldr	r3, [pc, #88]	; (80037b0 <HAL_DMA_Init+0x16c>)
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6859      	ldr	r1, [r3, #4]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003762:	f003 031c 	and.w	r3, r3, #28
 8003766:	fa01 f303 	lsl.w	r3, r1, r3
 800376a:	4911      	ldr	r1, [pc, #68]	; (80037b0 <HAL_DMA_Init+0x16c>)
 800376c:	4313      	orrs	r3, r2
 800376e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2200      	movs	r2, #0
 8003782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003786:	2300      	movs	r3, #0
}
 8003788:	4618      	mov	r0, r3
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr
 8003794:	40020407 	.word	0x40020407
 8003798:	bffdfff8 	.word	0xbffdfff8
 800379c:	cccccccd 	.word	0xcccccccd
 80037a0:	40020000 	.word	0x40020000
 80037a4:	bffdfbf8 	.word	0xbffdfbf8
 80037a8:	40020400 	.word	0x40020400
 80037ac:	400200a8 	.word	0x400200a8
 80037b0:	400204a8 	.word	0x400204a8

080037b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037bc:	2300      	movs	r3, #0
 80037be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	2b02      	cmp	r3, #2
 80037ca:	d005      	beq.n	80037d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2204      	movs	r2, #4
 80037d0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	73fb      	strb	r3, [r7, #15]
 80037d6:	e029      	b.n	800382c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 020e 	bic.w	r2, r2, #14
 80037e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f022 0201 	bic.w	r2, r2, #1
 80037f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fc:	f003 021c 	and.w	r2, r3, #28
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003804:	2101      	movs	r1, #1
 8003806:	fa01 f202 	lsl.w	r2, r1, r2
 800380a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003820:	2b00      	cmp	r3, #0
 8003822:	d003      	beq.n	800382c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	4798      	blx	r3
    }
  }
  return status;
 800382c:	7bfb      	ldrb	r3, [r7, #15]
}
 800382e:	4618      	mov	r0, r3
 8003830:	3710      	adds	r7, #16
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}

08003836 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b084      	sub	sp, #16
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f003 031c 	and.w	r3, r3, #28
 8003856:	2204      	movs	r2, #4
 8003858:	409a      	lsls	r2, r3
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	4013      	ands	r3, r2
 800385e:	2b00      	cmp	r3, #0
 8003860:	d026      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7a>
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	f003 0304 	and.w	r3, r3, #4
 8003868:	2b00      	cmp	r3, #0
 800386a:	d021      	beq.n	80038b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d107      	bne.n	800388a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0204 	bic.w	r2, r2, #4
 8003888:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800388e:	f003 021c 	and.w	r2, r3, #28
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003896:	2104      	movs	r1, #4
 8003898:	fa01 f202 	lsl.w	r2, r1, r2
 800389c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d071      	beq.n	800398a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038ae:	e06c      	b.n	800398a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	f003 031c 	and.w	r3, r3, #28
 80038b8:	2202      	movs	r2, #2
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d02e      	beq.n	8003922 <HAL_DMA_IRQHandler+0xec>
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0302 	and.w	r3, r3, #2
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d029      	beq.n	8003922 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f003 0320 	and.w	r3, r3, #32
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d10b      	bne.n	80038f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 020a 	bic.w	r2, r2, #10
 80038ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2201      	movs	r2, #1
 80038f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f8:	f003 021c 	and.w	r2, r3, #28
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003900:	2102      	movs	r1, #2
 8003902:	fa01 f202 	lsl.w	r2, r1, r2
 8003906:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2200      	movs	r2, #0
 800390c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003914:	2b00      	cmp	r3, #0
 8003916:	d038      	beq.n	800398a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003920:	e033      	b.n	800398a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 031c 	and.w	r3, r3, #28
 800392a:	2208      	movs	r2, #8
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d02a      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	f003 0308 	and.w	r3, r3, #8
 800393c:	2b00      	cmp	r3, #0
 800393e:	d025      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f022 020e 	bic.w	r2, r2, #14
 800394e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	f003 021c 	and.w	r2, r3, #28
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	2101      	movs	r1, #1
 800395e:	fa01 f202 	lsl.w	r2, r1, r2
 8003962:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397e:	2b00      	cmp	r3, #0
 8003980:	d004      	beq.n	800398c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800398a:	bf00      	nop
 800398c:	bf00      	nop
}
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039a2:	b2db      	uxtb	r3, r3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039be:	e148      	b.n	8003c52 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	2101      	movs	r1, #1
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	fa01 f303 	lsl.w	r3, r1, r3
 80039cc:	4013      	ands	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f000 813a 	beq.w	8003c4c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f003 0303 	and.w	r3, r3, #3
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d005      	beq.n	80039f0 <HAL_GPIO_Init+0x40>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f003 0303 	and.w	r3, r3, #3
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d130      	bne.n	8003a52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80039f6:	697b      	ldr	r3, [r7, #20]
 80039f8:	005b      	lsls	r3, r3, #1
 80039fa:	2203      	movs	r2, #3
 80039fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003a00:	43db      	mvns	r3, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a26:	2201      	movs	r2, #1
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43db      	mvns	r3, r3
 8003a30:	693a      	ldr	r2, [r7, #16]
 8003a32:	4013      	ands	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	091b      	lsrs	r3, r3, #4
 8003a3c:	f003 0201 	and.w	r2, r3, #1
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	fa02 f303 	lsl.w	r3, r2, r3
 8003a46:	693a      	ldr	r2, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	685b      	ldr	r3, [r3, #4]
 8003a56:	f003 0303 	and.w	r3, r3, #3
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	d017      	beq.n	8003a8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	68db      	ldr	r3, [r3, #12]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	005b      	lsls	r3, r3, #1
 8003a68:	2203      	movs	r2, #3
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43db      	mvns	r3, r3
 8003a70:	693a      	ldr	r2, [r7, #16]
 8003a72:	4013      	ands	r3, r2
 8003a74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	689a      	ldr	r2, [r3, #8]
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	005b      	lsls	r3, r3, #1
 8003a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4313      	orrs	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	693a      	ldr	r2, [r7, #16]
 8003a8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f003 0303 	and.w	r3, r3, #3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d123      	bne.n	8003ae2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	08da      	lsrs	r2, r3, #3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	3208      	adds	r2, #8
 8003aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	220f      	movs	r2, #15
 8003ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab6:	43db      	mvns	r3, r3
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	4013      	ands	r3, r2
 8003abc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	08da      	lsrs	r2, r3, #3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	3208      	adds	r2, #8
 8003adc:	6939      	ldr	r1, [r7, #16]
 8003ade:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	2203      	movs	r2, #3
 8003aee:	fa02 f303 	lsl.w	r3, r2, r3
 8003af2:	43db      	mvns	r3, r3
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4013      	ands	r3, r2
 8003af8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	f003 0203 	and.w	r2, r3, #3
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	005b      	lsls	r3, r3, #1
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	693a      	ldr	r2, [r7, #16]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	693a      	ldr	r2, [r7, #16]
 8003b14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8094 	beq.w	8003c4c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b24:	4b52      	ldr	r3, [pc, #328]	; (8003c70 <HAL_GPIO_Init+0x2c0>)
 8003b26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b28:	4a51      	ldr	r2, [pc, #324]	; (8003c70 <HAL_GPIO_Init+0x2c0>)
 8003b2a:	f043 0301 	orr.w	r3, r3, #1
 8003b2e:	6613      	str	r3, [r2, #96]	; 0x60
 8003b30:	4b4f      	ldr	r3, [pc, #316]	; (8003c70 <HAL_GPIO_Init+0x2c0>)
 8003b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b34:	f003 0301 	and.w	r3, r3, #1
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003b3c:	4a4d      	ldr	r2, [pc, #308]	; (8003c74 <HAL_GPIO_Init+0x2c4>)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	089b      	lsrs	r3, r3, #2
 8003b42:	3302      	adds	r3, #2
 8003b44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003b4a:	697b      	ldr	r3, [r7, #20]
 8003b4c:	f003 0303 	and.w	r3, r3, #3
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	220f      	movs	r2, #15
 8003b54:	fa02 f303 	lsl.w	r3, r2, r3
 8003b58:	43db      	mvns	r3, r3
 8003b5a:	693a      	ldr	r2, [r7, #16]
 8003b5c:	4013      	ands	r3, r2
 8003b5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003b66:	d00d      	beq.n	8003b84 <HAL_GPIO_Init+0x1d4>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a43      	ldr	r2, [pc, #268]	; (8003c78 <HAL_GPIO_Init+0x2c8>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d007      	beq.n	8003b80 <HAL_GPIO_Init+0x1d0>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a42      	ldr	r2, [pc, #264]	; (8003c7c <HAL_GPIO_Init+0x2cc>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d101      	bne.n	8003b7c <HAL_GPIO_Init+0x1cc>
 8003b78:	2302      	movs	r3, #2
 8003b7a:	e004      	b.n	8003b86 <HAL_GPIO_Init+0x1d6>
 8003b7c:	2307      	movs	r3, #7
 8003b7e:	e002      	b.n	8003b86 <HAL_GPIO_Init+0x1d6>
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_GPIO_Init+0x1d6>
 8003b84:	2300      	movs	r3, #0
 8003b86:	697a      	ldr	r2, [r7, #20]
 8003b88:	f002 0203 	and.w	r2, r2, #3
 8003b8c:	0092      	lsls	r2, r2, #2
 8003b8e:	4093      	lsls	r3, r2
 8003b90:	693a      	ldr	r2, [r7, #16]
 8003b92:	4313      	orrs	r3, r2
 8003b94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003b96:	4937      	ldr	r1, [pc, #220]	; (8003c74 <HAL_GPIO_Init+0x2c4>)
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	089b      	lsrs	r3, r3, #2
 8003b9c:	3302      	adds	r3, #2
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ba4:	4b36      	ldr	r3, [pc, #216]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	43db      	mvns	r3, r3
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d003      	beq.n	8003bc8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003bc8:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003bce:	4b2c      	ldr	r3, [pc, #176]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	43db      	mvns	r3, r3
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d003      	beq.n	8003bf2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003bf8:	4b21      	ldr	r3, [pc, #132]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	43db      	mvns	r3, r3
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c1c:	4a18      	ldr	r2, [pc, #96]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c22:	4b17      	ldr	r3, [pc, #92]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003c3e:	693a      	ldr	r2, [r7, #16]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003c46:	4a0e      	ldr	r2, [pc, #56]	; (8003c80 <HAL_GPIO_Init+0x2d0>)
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003c4c:	697b      	ldr	r3, [r7, #20]
 8003c4e:	3301      	adds	r3, #1
 8003c50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	f47f aeaf 	bne.w	80039c0 <HAL_GPIO_Init+0x10>
  }
}
 8003c62:	bf00      	nop
 8003c64:	bf00      	nop
 8003c66:	371c      	adds	r7, #28
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr
 8003c70:	40021000 	.word	0x40021000
 8003c74:	40010000 	.word	0x40010000
 8003c78:	48000400 	.word	0x48000400
 8003c7c:	48000800 	.word	0x48000800
 8003c80:	40010400 	.word	0x40010400

08003c84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	807b      	strh	r3, [r7, #2]
 8003c90:	4613      	mov	r3, r2
 8003c92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c94:	787b      	ldrb	r3, [r7, #1]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ca0:	e002      	b.n	8003ca8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e08d      	b.n	8003de2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d106      	bne.n	8003ce0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f7fd fd40 	bl	8001760 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2224      	movs	r2, #36	; 0x24
 8003ce4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 0201 	bic.w	r2, r2, #1
 8003cf6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d04:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	689a      	ldr	r2, [r3, #8]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d14:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d107      	bne.n	8003d2e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	689a      	ldr	r2, [r3, #8]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e006      	b.n	8003d3c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	689a      	ldr	r2, [r3, #8]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003d3a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d108      	bne.n	8003d56 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d52:	605a      	str	r2, [r3, #4]
 8003d54:	e007      	b.n	8003d66 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685a      	ldr	r2, [r3, #4]
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d64:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	6812      	ldr	r2, [r2, #0]
 8003d70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d78:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	68da      	ldr	r2, [r3, #12]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d88:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	691a      	ldr	r2, [r3, #16]
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	695b      	ldr	r3, [r3, #20]
 8003d92:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	430a      	orrs	r2, r1
 8003da2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	69d9      	ldr	r1, [r3, #28]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681a      	ldr	r2, [r3, #0]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f042 0201 	orr.w	r2, r2, #1
 8003dc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003de0:	2300      	movs	r3, #0
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3708      	adds	r7, #8
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}

08003dea <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003dea:	b580      	push	{r7, lr}
 8003dec:	b084      	sub	sp, #16
 8003dee:	af00      	add	r7, sp, #0
 8003df0:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	68f9      	ldr	r1, [r7, #12]
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	4798      	blx	r3
  }
}
 8003e16:	bf00      	nop
 8003e18:	3710      	adds	r7, #16
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003e1e:	b580      	push	{r7, lr}
 8003e20:	b086      	sub	sp, #24
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00f      	beq.n	8003e60 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f043 0201 	orr.w	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e5e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d00f      	beq.n	8003e8a <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	f043 0208 	orr.w	r2, r3, #8
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003e88:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00f      	beq.n	8003eb4 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f043 0202 	orr.w	r2, r3, #2
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eb2:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb8:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	f003 030b 	and.w	r3, r3, #11
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d003      	beq.n	8003ecc <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003ec4:	68f9      	ldr	r1, [r7, #12]
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fb82 	bl	80045d0 <I2C_ITError>
  }
}
 8003ecc:	bf00      	nop
 8003ece:	3718      	adds	r7, #24
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	460b      	mov	r3, r1
 8003f06:	70fb      	strb	r3, [r7, #3]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f0c:	bf00      	nop
 8003f0e:	370c      	adds	r7, #12
 8003f10:	46bd      	mov	sp, r7
 8003f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f16:	4770      	bx	lr

08003f18 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003f20:	bf00      	nop
 8003f22:	370c      	adds	r7, #12
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	60f8      	str	r0, [r7, #12]
 8003f5c:	60b9      	str	r1, [r7, #8]
 8003f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f64:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d101      	bne.n	8003f78 <I2C_Slave_ISR_IT+0x24>
 8003f74:	2302      	movs	r3, #2
 8003f76:	e0e1      	b.n	800413c <I2C_Slave_ISR_IT+0x1e8>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f003 0320 	and.w	r3, r3, #32
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d008      	beq.n	8003f9c <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8003f94:	6939      	ldr	r1, [r7, #16]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 f9b4 	bl	8004304 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	f003 0310 	and.w	r3, r3, #16
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d04b      	beq.n	800403e <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d046      	beq.n	800403e <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d128      	bne.n	800400c <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	2b28      	cmp	r3, #40	; 0x28
 8003fc4:	d108      	bne.n	8003fd8 <I2C_Slave_ISR_IT+0x84>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003fcc:	d104      	bne.n	8003fd8 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003fce:	6939      	ldr	r1, [r7, #16]
 8003fd0:	68f8      	ldr	r0, [r7, #12]
 8003fd2:	f000 faa9 	bl	8004528 <I2C_ITListenCplt>
 8003fd6:	e031      	b.n	800403c <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b29      	cmp	r3, #41	; 0x29
 8003fe2:	d10e      	bne.n	8004002 <I2C_Slave_ISR_IT+0xae>
 8003fe4:	697b      	ldr	r3, [r7, #20]
 8003fe6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fea:	d00a      	beq.n	8004002 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fc02 	bl	80047fe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f926 	bl	800424c <I2C_ITSlaveSeqCplt>
 8004000:	e01c      	b.n	800403c <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2210      	movs	r2, #16
 8004008:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800400a:	e08f      	b.n	800412c <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2210      	movs	r2, #16
 8004012:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	f043 0204 	orr.w	r2, r3, #4
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <I2C_Slave_ISR_IT+0xda>
 8004026:	697b      	ldr	r3, [r7, #20]
 8004028:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800402c:	d17e      	bne.n	800412c <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004032:	4619      	mov	r1, r3
 8004034:	68f8      	ldr	r0, [r7, #12]
 8004036:	f000 facb 	bl	80045d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800403a:	e077      	b.n	800412c <I2C_Slave_ISR_IT+0x1d8>
 800403c:	e076      	b.n	800412c <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d02f      	beq.n	80040a8 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800404e:	2b00      	cmp	r3, #0
 8004050:	d02a      	beq.n	80040a8 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004056:	b29b      	uxth	r3, r3
 8004058:	2b00      	cmp	r3, #0
 800405a:	d018      	beq.n	800408e <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	b2d2      	uxtb	r2, r2
 8004068:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	1c5a      	adds	r2, r3, #1
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004084:	b29b      	uxth	r3, r3
 8004086:	3b01      	subs	r3, #1
 8004088:	b29a      	uxth	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d14b      	bne.n	8004130 <I2C_Slave_ISR_IT+0x1dc>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800409e:	d047      	beq.n	8004130 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80040a0:	68f8      	ldr	r0, [r7, #12]
 80040a2:	f000 f8d3 	bl	800424c <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80040a6:	e043      	b.n	8004130 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0308 	and.w	r3, r3, #8
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d009      	beq.n	80040c6 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d004      	beq.n	80040c6 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80040bc:	6939      	ldr	r1, [r7, #16]
 80040be:	68f8      	ldr	r0, [r7, #12]
 80040c0:	f000 f840 	bl	8004144 <I2C_ITAddrCplt>
 80040c4:	e035      	b.n	8004132 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d030      	beq.n	8004132 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d02b      	beq.n	8004132 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040de:	b29b      	uxth	r3, r3
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d018      	beq.n	8004116 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e8:	781a      	ldrb	r2, [r3, #0]
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040fe:	b29b      	uxth	r3, r3
 8004100:	3b01      	subs	r3, #1
 8004102:	b29a      	uxth	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
 8004114:	e00d      	b.n	8004132 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800411c:	d002      	beq.n	8004124 <I2C_Slave_ISR_IT+0x1d0>
 800411e:	697b      	ldr	r3, [r7, #20]
 8004120:	2b00      	cmp	r3, #0
 8004122:	d106      	bne.n	8004132 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004124:	68f8      	ldr	r0, [r7, #12]
 8004126:	f000 f891 	bl	800424c <I2C_ITSlaveSeqCplt>
 800412a:	e002      	b.n	8004132 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800412c:	bf00      	nop
 800412e:	e000      	b.n	8004132 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8004130:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004154:	b2db      	uxtb	r3, r3
 8004156:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800415a:	2b28      	cmp	r3, #40	; 0x28
 800415c:	d16a      	bne.n	8004234 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	699b      	ldr	r3, [r3, #24]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f003 0301 	and.w	r3, r3, #1
 800416c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	699b      	ldr	r3, [r3, #24]
 8004174:	0c1b      	lsrs	r3, r3, #16
 8004176:	b29b      	uxth	r3, r3
 8004178:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800417c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	b29b      	uxth	r3, r3
 8004186:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800418a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68db      	ldr	r3, [r3, #12]
 8004192:	b29b      	uxth	r3, r3
 8004194:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004198:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	2b02      	cmp	r3, #2
 80041a0:	d138      	bne.n	8004214 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80041a2:	897b      	ldrh	r3, [r7, #10]
 80041a4:	09db      	lsrs	r3, r3, #7
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	89bb      	ldrh	r3, [r7, #12]
 80041aa:	4053      	eors	r3, r2
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	f003 0306 	and.w	r3, r3, #6
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d11c      	bne.n	80041f0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041be:	1c5a      	adds	r2, r3, #1
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d13b      	bne.n	8004244 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2200      	movs	r2, #0
 80041d0:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2208      	movs	r2, #8
 80041d8:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80041e2:	89ba      	ldrh	r2, [r7, #12]
 80041e4:	7bfb      	ldrb	r3, [r7, #15]
 80041e6:	4619      	mov	r1, r3
 80041e8:	6878      	ldr	r0, [r7, #4]
 80041ea:	f7ff fe87 	bl	8003efc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80041ee:	e029      	b.n	8004244 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80041f0:	893b      	ldrh	r3, [r7, #8]
 80041f2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80041f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f000 fb42 	bl	8004882 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2200      	movs	r2, #0
 8004202:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004206:	89ba      	ldrh	r2, [r7, #12]
 8004208:	7bfb      	ldrb	r3, [r7, #15]
 800420a:	4619      	mov	r1, r3
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	f7ff fe75 	bl	8003efc <HAL_I2C_AddrCallback>
}
 8004212:	e017      	b.n	8004244 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004214:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fb32 	bl	8004882 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004226:	89ba      	ldrh	r2, [r7, #12]
 8004228:	7bfb      	ldrb	r3, [r7, #15]
 800422a:	4619      	mov	r1, r3
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f7ff fe65 	bl	8003efc <HAL_I2C_AddrCallback>
}
 8004232:	e007      	b.n	8004244 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2208      	movs	r2, #8
 800423a:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d008      	beq.n	8004280 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800427c:	601a      	str	r2, [r3, #0]
 800427e:	e00c      	b.n	800429a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004298:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b29      	cmp	r3, #41	; 0x29
 80042a4:	d112      	bne.n	80042cc <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2228      	movs	r2, #40	; 0x28
 80042aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2221      	movs	r2, #33	; 0x21
 80042b2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80042b4:	2101      	movs	r1, #1
 80042b6:	6878      	ldr	r0, [r7, #4]
 80042b8:	f000 fae3 	bl	8004882 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7ff fe05 	bl	8003ed4 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80042ca:	e017      	b.n	80042fc <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042d2:	b2db      	uxtb	r3, r3
 80042d4:	2b2a      	cmp	r3, #42	; 0x2a
 80042d6:	d111      	bne.n	80042fc <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2228      	movs	r2, #40	; 0x28
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2222      	movs	r2, #34	; 0x22
 80042e4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80042e6:	2102      	movs	r1, #2
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 faca 	bl	8004882 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fdf6 	bl	8003ee8 <HAL_I2C_SlaveRxCpltCallback>
}
 80042fc:	bf00      	nop
 80042fe:	3710      	adds	r7, #16
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b086      	sub	sp, #24
 8004308:	af00      	add	r7, sp, #0
 800430a:	6078      	str	r0, [r7, #4]
 800430c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004320:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	2220      	movs	r2, #32
 8004328:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800432a:	7bfb      	ldrb	r3, [r7, #15]
 800432c:	2b21      	cmp	r3, #33	; 0x21
 800432e:	d002      	beq.n	8004336 <I2C_ITSlaveCplt+0x32>
 8004330:	7bfb      	ldrb	r3, [r7, #15]
 8004332:	2b29      	cmp	r3, #41	; 0x29
 8004334:	d108      	bne.n	8004348 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004336:	f248 0101 	movw	r1, #32769	; 0x8001
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 faa1 	bl	8004882 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	631a      	str	r2, [r3, #48]	; 0x30
 8004346:	e019      	b.n	800437c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b22      	cmp	r3, #34	; 0x22
 800434c:	d002      	beq.n	8004354 <I2C_ITSlaveCplt+0x50>
 800434e:	7bfb      	ldrb	r3, [r7, #15]
 8004350:	2b2a      	cmp	r3, #42	; 0x2a
 8004352:	d108      	bne.n	8004366 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004354:	f248 0102 	movw	r1, #32770	; 0x8002
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 fa92 	bl	8004882 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2222      	movs	r2, #34	; 0x22
 8004362:	631a      	str	r2, [r3, #48]	; 0x30
 8004364:	e00a      	b.n	800437c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004366:	7bfb      	ldrb	r3, [r7, #15]
 8004368:	2b28      	cmp	r3, #40	; 0x28
 800436a:	d107      	bne.n	800437c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800436c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 fa86 	bl	8004882 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800438a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6859      	ldr	r1, [r3, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681a      	ldr	r2, [r3, #0]
 8004396:	4b62      	ldr	r3, [pc, #392]	; (8004520 <I2C_ITSlaveCplt+0x21c>)
 8004398:	400b      	ands	r3, r1
 800439a:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fa2e 	bl	80047fe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d013      	beq.n	80043d4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80043ba:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01f      	beq.n	8004404 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80043d2:	e017      	b.n	8004404 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d012      	beq.n	8004404 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80043ec:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d006      	beq.n	8004404 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f003 0304 	and.w	r3, r3, #4
 800440a:	2b00      	cmp	r3, #0
 800440c:	d020      	beq.n	8004450 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	f023 0304 	bic.w	r3, r3, #4
 8004414:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004420:	b2d2      	uxtb	r2, r2
 8004422:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004432:	2b00      	cmp	r3, #0
 8004434:	d00c      	beq.n	8004450 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800443a:	3b01      	subs	r3, #1
 800443c:	b29a      	uxth	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004446:	b29b      	uxth	r3, r3
 8004448:	3b01      	subs	r3, #1
 800444a:	b29a      	uxth	r2, r3
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004454:	b29b      	uxth	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d005      	beq.n	8004466 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	f043 0204 	orr.w	r2, r3, #4
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004478:	2b00      	cmp	r3, #0
 800447a:	d010      	beq.n	800449e <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f8a4 	bl	80045d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800448e:	b2db      	uxtb	r3, r3
 8004490:	2b28      	cmp	r3, #40	; 0x28
 8004492:	d141      	bne.n	8004518 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004494:	6979      	ldr	r1, [r7, #20]
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f000 f846 	bl	8004528 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800449c:	e03c      	b.n	8004518 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a6:	d014      	beq.n	80044d2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	f7ff fecf 	bl	800424c <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1c      	ldr	r2, [pc, #112]	; (8004524 <I2C_ITSlaveCplt+0x220>)
 80044b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff fd24 	bl	8003f18 <HAL_I2C_ListenCpltCallback>
}
 80044d0:	e022      	b.n	8004518 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	d10e      	bne.n	80044fc <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2220      	movs	r2, #32
 80044e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f7ff fcf7 	bl	8003ee8 <HAL_I2C_SlaveRxCpltCallback>
}
 80044fa:	e00d      	b.n	8004518 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f7ff fcde 	bl	8003ed4 <HAL_I2C_SlaveTxCpltCallback>
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	fe00e800 	.word	0xfe00e800
 8004524:	ffff0000 	.word	0xffff0000

08004528 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a25      	ldr	r2, [pc, #148]	; (80045cc <I2C_ITListenCplt+0xa4>)
 8004536:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2220      	movs	r2, #32
 8004542:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	f003 0304 	and.w	r3, r3, #4
 800455a:	2b00      	cmp	r3, #0
 800455c:	d022      	beq.n	80045a4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004568:	b2d2      	uxtb	r2, r2
 800456a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	1c5a      	adds	r2, r3, #1
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800457a:	2b00      	cmp	r3, #0
 800457c:	d012      	beq.n	80045a4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004582:	3b01      	subs	r3, #1
 8004584:	b29a      	uxth	r2, r3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458e:	b29b      	uxth	r3, r3
 8004590:	3b01      	subs	r3, #1
 8004592:	b29a      	uxth	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80045a4:	f248 0103 	movw	r1, #32771	; 0x8003
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f96a 	bl	8004882 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2210      	movs	r2, #16
 80045b4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2200      	movs	r2, #0
 80045ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f7ff fcaa 	bl	8003f18 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	ffff0000 	.word	0xffff0000

080045d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a6d      	ldr	r2, [pc, #436]	; (80047a4 <I2C_ITError+0x1d4>)
 80045ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	431a      	orrs	r2, r3
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004602:	7bfb      	ldrb	r3, [r7, #15]
 8004604:	2b28      	cmp	r3, #40	; 0x28
 8004606:	d005      	beq.n	8004614 <I2C_ITError+0x44>
 8004608:	7bfb      	ldrb	r3, [r7, #15]
 800460a:	2b29      	cmp	r3, #41	; 0x29
 800460c:	d002      	beq.n	8004614 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800460e:	7bfb      	ldrb	r3, [r7, #15]
 8004610:	2b2a      	cmp	r3, #42	; 0x2a
 8004612:	d10b      	bne.n	800462c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004614:	2103      	movs	r1, #3
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f933 	bl	8004882 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2228      	movs	r2, #40	; 0x28
 8004620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	4a60      	ldr	r2, [pc, #384]	; (80047a8 <I2C_ITError+0x1d8>)
 8004628:	635a      	str	r2, [r3, #52]	; 0x34
 800462a:	e030      	b.n	800468e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800462c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 f926 	bl	8004882 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8e1 	bl	80047fe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b60      	cmp	r3, #96	; 0x60
 8004646:	d01f      	beq.n	8004688 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	699b      	ldr	r3, [r3, #24]
 8004656:	f003 0320 	and.w	r3, r3, #32
 800465a:	2b20      	cmp	r3, #32
 800465c:	d114      	bne.n	8004688 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b10      	cmp	r3, #16
 800466a:	d109      	bne.n	8004680 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	2210      	movs	r2, #16
 8004672:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	f043 0204 	orr.w	r2, r3, #4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2220      	movs	r2, #32
 8004686:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004692:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004698:	2b00      	cmp	r3, #0
 800469a:	d039      	beq.n	8004710 <I2C_ITError+0x140>
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	2b11      	cmp	r3, #17
 80046a0:	d002      	beq.n	80046a8 <I2C_ITError+0xd8>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b21      	cmp	r3, #33	; 0x21
 80046a6:	d133      	bne.n	8004710 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80046b6:	d107      	bne.n	80046c8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80046c6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff f961 	bl	8003994 <HAL_DMA_GetState>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d017      	beq.n	8004708 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046dc:	4a33      	ldr	r2, [pc, #204]	; (80047ac <I2C_ITError+0x1dc>)
 80046de:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ec:	4618      	mov	r0, r3
 80046ee:	f7ff f861 	bl	80037b4 <HAL_DMA_Abort_IT>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d04d      	beq.n	8004794 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004702:	4610      	mov	r0, r2
 8004704:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004706:	e045      	b.n	8004794 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 f851 	bl	80047b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800470e:	e041      	b.n	8004794 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d039      	beq.n	800478c <I2C_ITError+0x1bc>
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2b12      	cmp	r3, #18
 800471c:	d002      	beq.n	8004724 <I2C_ITError+0x154>
 800471e:	68bb      	ldr	r3, [r7, #8]
 8004720:	2b22      	cmp	r3, #34	; 0x22
 8004722:	d133      	bne.n	800478c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800472e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004732:	d107      	bne.n	8004744 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004742:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff f923 	bl	8003994 <HAL_DMA_GetState>
 800474e:	4603      	mov	r3, r0
 8004750:	2b01      	cmp	r3, #1
 8004752:	d017      	beq.n	8004784 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004758:	4a14      	ldr	r2, [pc, #80]	; (80047ac <I2C_ITError+0x1dc>)
 800475a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff f823 	bl	80037b4 <HAL_DMA_Abort_IT>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d011      	beq.n	8004798 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800477e:	4610      	mov	r0, r2
 8004780:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004782:	e009      	b.n	8004798 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004784:	6878      	ldr	r0, [r7, #4]
 8004786:	f000 f813 	bl	80047b0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800478a:	e005      	b.n	8004798 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f000 f80f 	bl	80047b0 <I2C_TreatErrorCallback>
  }
}
 8004792:	e002      	b.n	800479a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004794:	bf00      	nop
 8004796:	e000      	b.n	800479a <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004798:	bf00      	nop
}
 800479a:	bf00      	nop
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
 80047a2:	bf00      	nop
 80047a4:	ffff0000 	.word	0xffff0000
 80047a8:	08003f55 	.word	0x08003f55
 80047ac:	08004847 	.word	0x08004847

080047b0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b082      	sub	sp, #8
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	2b60      	cmp	r3, #96	; 0x60
 80047c2:	d10e      	bne.n	80047e2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fbb0 	bl	8003f40 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80047e0:	e009      	b.n	80047f6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	f7ff fb9b 	bl	8003f2c <HAL_I2C_ErrorCallback>
}
 80047f6:	bf00      	nop
 80047f8:	3708      	adds	r7, #8
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	699b      	ldr	r3, [r3, #24]
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b02      	cmp	r3, #2
 8004812:	d103      	bne.n	800481c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2200      	movs	r2, #0
 800481a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b01      	cmp	r3, #1
 8004828:	d007      	beq.n	800483a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	699a      	ldr	r2, [r3, #24]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f042 0201 	orr.w	r2, r2, #1
 8004838:	619a      	str	r2, [r3, #24]
  }
}
 800483a:	bf00      	nop
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004846:	b580      	push	{r7, lr}
 8004848:	b084      	sub	sp, #16
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004858:	2b00      	cmp	r3, #0
 800485a:	d003      	beq.n	8004864 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	2200      	movs	r2, #0
 8004862:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004870:	2200      	movs	r2, #0
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f7ff ff9b 	bl	80047b0 <I2C_TreatErrorCallback>
}
 800487a:	bf00      	nop
 800487c:	3710      	adds	r7, #16
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}

08004882 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004882:	b480      	push	{r7}
 8004884:	b085      	sub	sp, #20
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
 800488a:	460b      	mov	r3, r1
 800488c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800488e:	2300      	movs	r3, #0
 8004890:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004892:	887b      	ldrh	r3, [r7, #2]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80048a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b0:	2b28      	cmp	r3, #40	; 0x28
 80048b2:	d003      	beq.n	80048bc <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048ba:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80048bc:	887b      	ldrh	r3, [r7, #2]
 80048be:	f003 0302 	and.w	r3, r3, #2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00f      	beq.n	80048e6 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80048cc:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d4:	b2db      	uxtb	r3, r3
 80048d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048da:	2b28      	cmp	r3, #40	; 0x28
 80048dc:	d003      	beq.n	80048e6 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80048e4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80048e6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	da03      	bge.n	80048f6 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80048f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80048f6:	887b      	ldrh	r3, [r7, #2]
 80048f8:	2b10      	cmp	r3, #16
 80048fa:	d103      	bne.n	8004904 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004902:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004904:	887b      	ldrh	r3, [r7, #2]
 8004906:	2b20      	cmp	r3, #32
 8004908:	d103      	bne.n	8004912 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f043 0320 	orr.w	r3, r3, #32
 8004910:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004912:	887b      	ldrh	r3, [r7, #2]
 8004914:	2b40      	cmp	r3, #64	; 0x40
 8004916:	d103      	bne.n	8004920 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	6819      	ldr	r1, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	43da      	mvns	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	400a      	ands	r2, r1
 8004930:	601a      	str	r2, [r3, #0]
}
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800493e:	b480      	push	{r7}
 8004940:	b083      	sub	sp, #12
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
 8004946:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494e:	b2db      	uxtb	r3, r3
 8004950:	2b20      	cmp	r3, #32
 8004952:	d138      	bne.n	80049c6 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800495e:	2302      	movs	r3, #2
 8004960:	e032      	b.n	80049c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2224      	movs	r2, #36	; 0x24
 800496e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	681a      	ldr	r2, [r3, #0]
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f022 0201 	bic.w	r2, r2, #1
 8004980:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004990:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6819      	ldr	r1, [r3, #0]
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	683a      	ldr	r2, [r7, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f042 0201 	orr.w	r2, r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2220      	movs	r2, #32
 80049b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80049c2:	2300      	movs	r3, #0
 80049c4:	e000      	b.n	80049c8 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049c6:	2302      	movs	r3, #2
  }
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	370c      	adds	r7, #12
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b085      	sub	sp, #20
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	2b20      	cmp	r3, #32
 80049e8:	d139      	bne.n	8004a5e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e033      	b.n	8004a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2224      	movs	r2, #36	; 0x24
 8004a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f022 0201 	bic.w	r2, r2, #1
 8004a16:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004a26:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a28:	683b      	ldr	r3, [r7, #0]
 8004a2a:	021b      	lsls	r3, r3, #8
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2220      	movs	r2, #32
 8004a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e000      	b.n	8004a60 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a5e:	2302      	movs	r3, #2
  }
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a70:	4b05      	ldr	r3, [pc, #20]	; (8004a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004a76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a7a:	6013      	str	r3, [r2, #0]
}
 8004a7c:	bf00      	nop
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40007000 	.word	0x40007000

08004a8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a90:	4b04      	ldr	r3, [pc, #16]	; (8004aa4 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	40007000 	.word	0x40007000

08004aa8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ab6:	d130      	bne.n	8004b1a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004ab8:	4b23      	ldr	r3, [pc, #140]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ac4:	d038      	beq.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004ac6:	4b20      	ldr	r3, [pc, #128]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ace:	4a1e      	ldr	r2, [pc, #120]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004ad4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004ad6:	4b1d      	ldr	r3, [pc, #116]	; (8004b4c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2232      	movs	r2, #50	; 0x32
 8004adc:	fb02 f303 	mul.w	r3, r2, r3
 8004ae0:	4a1b      	ldr	r2, [pc, #108]	; (8004b50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ae6:	0c9b      	lsrs	r3, r3, #18
 8004ae8:	3301      	adds	r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004aec:	e002      	b.n	8004af4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	3b01      	subs	r3, #1
 8004af2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004af4:	4b14      	ldr	r3, [pc, #80]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b00:	d102      	bne.n	8004b08 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f2      	bne.n	8004aee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b08:	4b0f      	ldr	r3, [pc, #60]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b0a:	695b      	ldr	r3, [r3, #20]
 8004b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b14:	d110      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e00f      	b.n	8004b3a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b1a:	4b0b      	ldr	r3, [pc, #44]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d007      	beq.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004b28:	4b07      	ldr	r3, [pc, #28]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b30:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004b32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004b36:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004b38:	2300      	movs	r3, #0
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3714      	adds	r7, #20
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr
 8004b46:	bf00      	nop
 8004b48:	40007000 	.word	0x40007000
 8004b4c:	20000004 	.word	0x20000004
 8004b50:	431bde83 	.word	0x431bde83

08004b54 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d102      	bne.n	8004b68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f000 bc02 	b.w	800536c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b68:	4b96      	ldr	r3, [pc, #600]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f003 030c 	and.w	r3, r3, #12
 8004b70:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b72:	4b94      	ldr	r3, [pc, #592]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004b74:	68db      	ldr	r3, [r3, #12]
 8004b76:	f003 0303 	and.w	r3, r3, #3
 8004b7a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0310 	and.w	r3, r3, #16
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	f000 80e4 	beq.w	8004d52 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d007      	beq.n	8004ba0 <HAL_RCC_OscConfig+0x4c>
 8004b90:	69bb      	ldr	r3, [r7, #24]
 8004b92:	2b0c      	cmp	r3, #12
 8004b94:	f040 808b 	bne.w	8004cae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	f040 8087 	bne.w	8004cae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004ba0:	4b88      	ldr	r3, [pc, #544]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x64>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	699b      	ldr	r3, [r3, #24]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d101      	bne.n	8004bb8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e3d9      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a1a      	ldr	r2, [r3, #32]
 8004bbc:	4b81      	ldr	r3, [pc, #516]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0308 	and.w	r3, r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d004      	beq.n	8004bd2 <HAL_RCC_OscConfig+0x7e>
 8004bc8:	4b7e      	ldr	r3, [pc, #504]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bd0:	e005      	b.n	8004bde <HAL_RCC_OscConfig+0x8a>
 8004bd2:	4b7c      	ldr	r3, [pc, #496]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004bd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bd8:	091b      	lsrs	r3, r3, #4
 8004bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d223      	bcs.n	8004c2a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 fd8c 	bl	8005704 <RCC_SetFlashLatencyFromMSIRange>
 8004bec:	4603      	mov	r3, r0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d001      	beq.n	8004bf6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e3ba      	b.n	800536c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bf6:	4b73      	ldr	r3, [pc, #460]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a72      	ldr	r2, [pc, #456]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004bfc:	f043 0308 	orr.w	r3, r3, #8
 8004c00:	6013      	str	r3, [r2, #0]
 8004c02:	4b70      	ldr	r3, [pc, #448]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a1b      	ldr	r3, [r3, #32]
 8004c0e:	496d      	ldr	r1, [pc, #436]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c14:	4b6b      	ldr	r3, [pc, #428]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	69db      	ldr	r3, [r3, #28]
 8004c20:	021b      	lsls	r3, r3, #8
 8004c22:	4968      	ldr	r1, [pc, #416]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c24:	4313      	orrs	r3, r2
 8004c26:	604b      	str	r3, [r1, #4]
 8004c28:	e025      	b.n	8004c76 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c2a:	4b66      	ldr	r3, [pc, #408]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a65      	ldr	r2, [pc, #404]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c30:	f043 0308 	orr.w	r3, r3, #8
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	4b63      	ldr	r3, [pc, #396]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a1b      	ldr	r3, [r3, #32]
 8004c42:	4960      	ldr	r1, [pc, #384]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c48:	4b5e      	ldr	r3, [pc, #376]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	69db      	ldr	r3, [r3, #28]
 8004c54:	021b      	lsls	r3, r3, #8
 8004c56:	495b      	ldr	r1, [pc, #364]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d109      	bne.n	8004c76 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6a1b      	ldr	r3, [r3, #32]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f000 fd4c 	bl	8005704 <RCC_SetFlashLatencyFromMSIRange>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e37a      	b.n	800536c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c76:	f000 fc81 	bl	800557c <HAL_RCC_GetSysClockFreq>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	4b51      	ldr	r3, [pc, #324]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	091b      	lsrs	r3, r3, #4
 8004c82:	f003 030f 	and.w	r3, r3, #15
 8004c86:	4950      	ldr	r1, [pc, #320]	; (8004dc8 <HAL_RCC_OscConfig+0x274>)
 8004c88:	5ccb      	ldrb	r3, [r1, r3]
 8004c8a:	f003 031f 	and.w	r3, r3, #31
 8004c8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004c92:	4a4e      	ldr	r2, [pc, #312]	; (8004dcc <HAL_RCC_OscConfig+0x278>)
 8004c94:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c96:	4b4e      	ldr	r3, [pc, #312]	; (8004dd0 <HAL_RCC_OscConfig+0x27c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fd f85c 	bl	8001d58 <HAL_InitTick>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ca4:	7bfb      	ldrb	r3, [r7, #15]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d052      	beq.n	8004d50 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004caa:	7bfb      	ldrb	r3, [r7, #15]
 8004cac:	e35e      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d032      	beq.n	8004d1c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004cb6:	4b43      	ldr	r3, [pc, #268]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a42      	ldr	r2, [pc, #264]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cbc:	f043 0301 	orr.w	r3, r3, #1
 8004cc0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cc2:	f7fd f899 	bl	8001df8 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cca:	f7fd f895 	bl	8001df8 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e347      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004cdc:	4b39      	ldr	r3, [pc, #228]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0302 	and.w	r3, r3, #2
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ce8:	4b36      	ldr	r3, [pc, #216]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	4a35      	ldr	r2, [pc, #212]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cee:	f043 0308 	orr.w	r3, r3, #8
 8004cf2:	6013      	str	r3, [r2, #0]
 8004cf4:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	4930      	ldr	r1, [pc, #192]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d06:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	69db      	ldr	r3, [r3, #28]
 8004d12:	021b      	lsls	r3, r3, #8
 8004d14:	492b      	ldr	r1, [pc, #172]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	604b      	str	r3, [r1, #4]
 8004d1a:	e01a      	b.n	8004d52 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004d1c:	4b29      	ldr	r3, [pc, #164]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a28      	ldr	r2, [pc, #160]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d22:	f023 0301 	bic.w	r3, r3, #1
 8004d26:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004d28:	f7fd f866 	bl	8001df8 <HAL_GetTick>
 8004d2c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d2e:	e008      	b.n	8004d42 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004d30:	f7fd f862 	bl	8001df8 <HAL_GetTick>
 8004d34:	4602      	mov	r2, r0
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	1ad3      	subs	r3, r2, r3
 8004d3a:	2b02      	cmp	r3, #2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e314      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f003 0302 	and.w	r3, r3, #2
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1f0      	bne.n	8004d30 <HAL_RCC_OscConfig+0x1dc>
 8004d4e:	e000      	b.n	8004d52 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004d50:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f003 0301 	and.w	r3, r3, #1
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d073      	beq.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004d5e:	69bb      	ldr	r3, [r7, #24]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d005      	beq.n	8004d70 <HAL_RCC_OscConfig+0x21c>
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	2b0c      	cmp	r3, #12
 8004d68:	d10e      	bne.n	8004d88 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d10b      	bne.n	8004d88 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d063      	beq.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d15f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e2f1      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d106      	bne.n	8004da0 <HAL_RCC_OscConfig+0x24c>
 8004d92:	4b0c      	ldr	r3, [pc, #48]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004d98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9c:	6013      	str	r3, [r2, #0]
 8004d9e:	e025      	b.n	8004dec <HAL_RCC_OscConfig+0x298>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004da8:	d114      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x280>
 8004daa:	4b06      	ldr	r3, [pc, #24]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a05      	ldr	r2, [pc, #20]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004db0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004db4:	6013      	str	r3, [r2, #0]
 8004db6:	4b03      	ldr	r3, [pc, #12]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a02      	ldr	r2, [pc, #8]	; (8004dc4 <HAL_RCC_OscConfig+0x270>)
 8004dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dc0:	6013      	str	r3, [r2, #0]
 8004dc2:	e013      	b.n	8004dec <HAL_RCC_OscConfig+0x298>
 8004dc4:	40021000 	.word	0x40021000
 8004dc8:	0800a398 	.word	0x0800a398
 8004dcc:	20000004 	.word	0x20000004
 8004dd0:	20000008 	.word	0x20000008
 8004dd4:	4ba0      	ldr	r3, [pc, #640]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4a9f      	ldr	r2, [pc, #636]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dde:	6013      	str	r3, [r2, #0]
 8004de0:	4b9d      	ldr	r3, [pc, #628]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a9c      	ldr	r2, [pc, #624]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004de6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d013      	beq.n	8004e1c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df4:	f7fd f800 	bl	8001df8 <HAL_GetTick>
 8004df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004dfa:	e008      	b.n	8004e0e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004dfc:	f7fc fffc 	bl	8001df8 <HAL_GetTick>
 8004e00:	4602      	mov	r2, r0
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	1ad3      	subs	r3, r2, r3
 8004e06:	2b64      	cmp	r3, #100	; 0x64
 8004e08:	d901      	bls.n	8004e0e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e2ae      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e0e:	4b92      	ldr	r3, [pc, #584]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d0f0      	beq.n	8004dfc <HAL_RCC_OscConfig+0x2a8>
 8004e1a:	e014      	b.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e1c:	f7fc ffec 	bl	8001df8 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e24:	f7fc ffe8 	bl	8001df8 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b64      	cmp	r3, #100	; 0x64
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e29a      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004e36:	4b88      	ldr	r3, [pc, #544]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2d0>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d060      	beq.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b04      	cmp	r3, #4
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x310>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d119      	bne.n	8004e92 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b02      	cmp	r3, #2
 8004e62:	d116      	bne.n	8004e92 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e64:	4b7c      	ldr	r3, [pc, #496]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d005      	beq.n	8004e7c <HAL_RCC_OscConfig+0x328>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e277      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7c:	4b76      	ldr	r3, [pc, #472]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	061b      	lsls	r3, r3, #24
 8004e8a:	4973      	ldr	r1, [pc, #460]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e90:	e040      	b.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	68db      	ldr	r3, [r3, #12]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d023      	beq.n	8004ee2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e9a:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a6e      	ldr	r2, [pc, #440]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004ea0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea6:	f7fc ffa7 	bl	8001df8 <HAL_GetTick>
 8004eaa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004eac:	e008      	b.n	8004ec0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eae:	f7fc ffa3 	bl	8001df8 <HAL_GetTick>
 8004eb2:	4602      	mov	r2, r0
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	1ad3      	subs	r3, r2, r3
 8004eb8:	2b02      	cmp	r3, #2
 8004eba:	d901      	bls.n	8004ec0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e255      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ec0:	4b65      	ldr	r3, [pc, #404]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d0f0      	beq.n	8004eae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ecc:	4b62      	ldr	r3, [pc, #392]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	691b      	ldr	r3, [r3, #16]
 8004ed8:	061b      	lsls	r3, r3, #24
 8004eda:	495f      	ldr	r1, [pc, #380]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	604b      	str	r3, [r1, #4]
 8004ee0:	e018      	b.n	8004f14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ee2:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004ee8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eee:	f7fc ff83 	bl	8001df8 <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ef6:	f7fc ff7f 	bl	8001df8 <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e231      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004f08:	4b53      	ldr	r3, [pc, #332]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d1f0      	bne.n	8004ef6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0308 	and.w	r3, r3, #8
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d03c      	beq.n	8004f9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	695b      	ldr	r3, [r3, #20]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01c      	beq.n	8004f62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f28:	4b4b      	ldr	r3, [pc, #300]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f2e:	4a4a      	ldr	r2, [pc, #296]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f30:	f043 0301 	orr.w	r3, r3, #1
 8004f34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f38:	f7fc ff5e 	bl	8001df8 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f40:	f7fc ff5a 	bl	8001df8 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e20c      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f58:	f003 0302 	and.w	r3, r3, #2
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0ef      	beq.n	8004f40 <HAL_RCC_OscConfig+0x3ec>
 8004f60:	e01b      	b.n	8004f9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f62:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f68:	4a3b      	ldr	r2, [pc, #236]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f6a:	f023 0301 	bic.w	r3, r3, #1
 8004f6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f72:	f7fc ff41 	bl	8001df8 <HAL_GetTick>
 8004f76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f78:	e008      	b.n	8004f8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f7a:	f7fc ff3d 	bl	8001df8 <HAL_GetTick>
 8004f7e:	4602      	mov	r2, r0
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	1ad3      	subs	r3, r2, r3
 8004f84:	2b02      	cmp	r3, #2
 8004f86:	d901      	bls.n	8004f8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f88:	2303      	movs	r3, #3
 8004f8a:	e1ef      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f8c:	4b32      	ldr	r3, [pc, #200]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f92:	f003 0302 	and.w	r3, r3, #2
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1ef      	bne.n	8004f7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0304 	and.w	r3, r3, #4
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 80a6 	beq.w	80050f4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004fac:	4b2a      	ldr	r3, [pc, #168]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d10d      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fb8:	4b27      	ldr	r3, [pc, #156]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004fba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fbc:	4a26      	ldr	r2, [pc, #152]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004fbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fc4:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	60bb      	str	r3, [r7, #8]
 8004fce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCC_OscConfig+0x508>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d118      	bne.n	8005012 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fe0:	4b1e      	ldr	r3, [pc, #120]	; (800505c <HAL_RCC_OscConfig+0x508>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a1d      	ldr	r2, [pc, #116]	; (800505c <HAL_RCC_OscConfig+0x508>)
 8004fe6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fec:	f7fc ff04 	bl	8001df8 <HAL_GetTick>
 8004ff0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ff2:	e008      	b.n	8005006 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff4:	f7fc ff00 	bl	8001df8 <HAL_GetTick>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2b02      	cmp	r3, #2
 8005000:	d901      	bls.n	8005006 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005002:	2303      	movs	r3, #3
 8005004:	e1b2      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005006:	4b15      	ldr	r3, [pc, #84]	; (800505c <HAL_RCC_OscConfig+0x508>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0f0      	beq.n	8004ff4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	2b01      	cmp	r3, #1
 8005018:	d108      	bne.n	800502c <HAL_RCC_OscConfig+0x4d8>
 800501a:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 800501c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005020:	4a0d      	ldr	r2, [pc, #52]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8005022:	f043 0301 	orr.w	r3, r3, #1
 8005026:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800502a:	e029      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	689b      	ldr	r3, [r3, #8]
 8005030:	2b05      	cmp	r3, #5
 8005032:	d115      	bne.n	8005060 <HAL_RCC_OscConfig+0x50c>
 8005034:	4b08      	ldr	r3, [pc, #32]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8005036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503a:	4a07      	ldr	r2, [pc, #28]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 800503c:	f043 0304 	orr.w	r3, r3, #4
 8005040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	4a03      	ldr	r2, [pc, #12]	; (8005058 <HAL_RCC_OscConfig+0x504>)
 800504c:	f043 0301 	orr.w	r3, r3, #1
 8005050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005054:	e014      	b.n	8005080 <HAL_RCC_OscConfig+0x52c>
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
 8005060:	4b9a      	ldr	r3, [pc, #616]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005066:	4a99      	ldr	r2, [pc, #612]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005068:	f023 0301 	bic.w	r3, r3, #1
 800506c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005070:	4b96      	ldr	r3, [pc, #600]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005076:	4a95      	ldr	r2, [pc, #596]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005078:	f023 0304 	bic.w	r3, r3, #4
 800507c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d016      	beq.n	80050b6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005088:	f7fc feb6 	bl	8001df8 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800508e:	e00a      	b.n	80050a6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f7fc feb2 	bl	8001df8 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	f241 3288 	movw	r2, #5000	; 0x1388
 800509e:	4293      	cmp	r3, r2
 80050a0:	d901      	bls.n	80050a6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e162      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050a6:	4b89      	ldr	r3, [pc, #548]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f003 0302 	and.w	r3, r3, #2
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d0ed      	beq.n	8005090 <HAL_RCC_OscConfig+0x53c>
 80050b4:	e015      	b.n	80050e2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050b6:	f7fc fe9f 	bl	8001df8 <HAL_GetTick>
 80050ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050bc:	e00a      	b.n	80050d4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050be:	f7fc fe9b 	bl	8001df8 <HAL_GetTick>
 80050c2:	4602      	mov	r2, r0
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	1ad3      	subs	r3, r2, r3
 80050c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d901      	bls.n	80050d4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80050d0:	2303      	movs	r3, #3
 80050d2:	e14b      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80050d4:	4b7d      	ldr	r3, [pc, #500]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 80050d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1ed      	bne.n	80050be <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050e2:	7ffb      	ldrb	r3, [r7, #31]
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d105      	bne.n	80050f4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050e8:	4b78      	ldr	r3, [pc, #480]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 80050ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ec:	4a77      	ldr	r2, [pc, #476]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 80050ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050f2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0320 	and.w	r3, r3, #32
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d03c      	beq.n	800517a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005104:	2b00      	cmp	r3, #0
 8005106:	d01c      	beq.n	8005142 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005108:	4b70      	ldr	r3, [pc, #448]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800510a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800510e:	4a6f      	ldr	r2, [pc, #444]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005110:	f043 0301 	orr.w	r3, r3, #1
 8005114:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005118:	f7fc fe6e 	bl	8001df8 <HAL_GetTick>
 800511c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800511e:	e008      	b.n	8005132 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005120:	f7fc fe6a 	bl	8001df8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	2b02      	cmp	r3, #2
 800512c:	d901      	bls.n	8005132 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800512e:	2303      	movs	r3, #3
 8005130:	e11c      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005132:	4b66      	ldr	r3, [pc, #408]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005134:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0ef      	beq.n	8005120 <HAL_RCC_OscConfig+0x5cc>
 8005140:	e01b      	b.n	800517a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005142:	4b62      	ldr	r3, [pc, #392]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005144:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005148:	4a60      	ldr	r2, [pc, #384]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800514a:	f023 0301 	bic.w	r3, r3, #1
 800514e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005152:	f7fc fe51 	bl	8001df8 <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800515a:	f7fc fe4d 	bl	8001df8 <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e0ff      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800516c:	4b57      	ldr	r3, [pc, #348]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800516e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005172:	f003 0302 	and.w	r3, r3, #2
 8005176:	2b00      	cmp	r3, #0
 8005178:	d1ef      	bne.n	800515a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800517e:	2b00      	cmp	r3, #0
 8005180:	f000 80f3 	beq.w	800536a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	2b02      	cmp	r3, #2
 800518a:	f040 80c9 	bne.w	8005320 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800518e:	4b4f      	ldr	r3, [pc, #316]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	f003 0203 	and.w	r2, r3, #3
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800519e:	429a      	cmp	r2, r3
 80051a0:	d12c      	bne.n	80051fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051ac:	3b01      	subs	r3, #1
 80051ae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d123      	bne.n	80051fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051be:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d11b      	bne.n	80051fc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d113      	bne.n	80051fc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051de:	085b      	lsrs	r3, r3, #1
 80051e0:	3b01      	subs	r3, #1
 80051e2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d109      	bne.n	80051fc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051f2:	085b      	lsrs	r3, r3, #1
 80051f4:	3b01      	subs	r3, #1
 80051f6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d06b      	beq.n	80052d4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	2b0c      	cmp	r3, #12
 8005200:	d062      	beq.n	80052c8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005202:	4b32      	ldr	r3, [pc, #200]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e0ac      	b.n	800536c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005212:	4b2e      	ldr	r3, [pc, #184]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a2d      	ldr	r2, [pc, #180]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005218:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800521c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800521e:	f7fc fdeb 	bl	8001df8 <HAL_GetTick>
 8005222:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005224:	e008      	b.n	8005238 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005226:	f7fc fde7 	bl	8001df8 <HAL_GetTick>
 800522a:	4602      	mov	r2, r0
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	1ad3      	subs	r3, r2, r3
 8005230:	2b02      	cmp	r3, #2
 8005232:	d901      	bls.n	8005238 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005234:	2303      	movs	r3, #3
 8005236:	e099      	b.n	800536c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005238:	4b24      	ldr	r3, [pc, #144]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005240:	2b00      	cmp	r3, #0
 8005242:	d1f0      	bne.n	8005226 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005244:	4b21      	ldr	r3, [pc, #132]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	4b21      	ldr	r3, [pc, #132]	; (80052d0 <HAL_RCC_OscConfig+0x77c>)
 800524a:	4013      	ands	r3, r2
 800524c:	687a      	ldr	r2, [r7, #4]
 800524e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005254:	3a01      	subs	r2, #1
 8005256:	0112      	lsls	r2, r2, #4
 8005258:	4311      	orrs	r1, r2
 800525a:	687a      	ldr	r2, [r7, #4]
 800525c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800525e:	0212      	lsls	r2, r2, #8
 8005260:	4311      	orrs	r1, r2
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005266:	0852      	lsrs	r2, r2, #1
 8005268:	3a01      	subs	r2, #1
 800526a:	0552      	lsls	r2, r2, #21
 800526c:	4311      	orrs	r1, r2
 800526e:	687a      	ldr	r2, [r7, #4]
 8005270:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005272:	0852      	lsrs	r2, r2, #1
 8005274:	3a01      	subs	r2, #1
 8005276:	0652      	lsls	r2, r2, #25
 8005278:	4311      	orrs	r1, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800527e:	06d2      	lsls	r2, r2, #27
 8005280:	430a      	orrs	r2, r1
 8005282:	4912      	ldr	r1, [pc, #72]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005284:	4313      	orrs	r3, r2
 8005286:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005288:	4b10      	ldr	r3, [pc, #64]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a0f      	ldr	r2, [pc, #60]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800528e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005292:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005294:	4b0d      	ldr	r3, [pc, #52]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4a0c      	ldr	r2, [pc, #48]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 800529a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800529e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80052a0:	f7fc fdaa 	bl	8001df8 <HAL_GetTick>
 80052a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052a6:	e008      	b.n	80052ba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052a8:	f7fc fda6 	bl	8001df8 <HAL_GetTick>
 80052ac:	4602      	mov	r2, r0
 80052ae:	693b      	ldr	r3, [r7, #16]
 80052b0:	1ad3      	subs	r3, r2, r3
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d901      	bls.n	80052ba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80052b6:	2303      	movs	r3, #3
 80052b8:	e058      	b.n	800536c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052ba:	4b04      	ldr	r3, [pc, #16]	; (80052cc <HAL_RCC_OscConfig+0x778>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d0f0      	beq.n	80052a8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052c6:	e050      	b.n	800536a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80052c8:	2301      	movs	r3, #1
 80052ca:	e04f      	b.n	800536c <HAL_RCC_OscConfig+0x818>
 80052cc:	40021000 	.word	0x40021000
 80052d0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052d4:	4b27      	ldr	r3, [pc, #156]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d144      	bne.n	800536a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80052e0:	4b24      	ldr	r3, [pc, #144]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4a23      	ldr	r2, [pc, #140]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 80052e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80052ec:	4b21      	ldr	r3, [pc, #132]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	4a20      	ldr	r2, [pc, #128]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 80052f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80052f8:	f7fc fd7e 	bl	8001df8 <HAL_GetTick>
 80052fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052fe:	e008      	b.n	8005312 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005300:	f7fc fd7a 	bl	8001df8 <HAL_GetTick>
 8005304:	4602      	mov	r2, r0
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	1ad3      	subs	r3, r2, r3
 800530a:	2b02      	cmp	r3, #2
 800530c:	d901      	bls.n	8005312 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800530e:	2303      	movs	r3, #3
 8005310:	e02c      	b.n	800536c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005312:	4b18      	ldr	r3, [pc, #96]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d0f0      	beq.n	8005300 <HAL_RCC_OscConfig+0x7ac>
 800531e:	e024      	b.n	800536a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b0c      	cmp	r3, #12
 8005324:	d01f      	beq.n	8005366 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005326:	4b13      	ldr	r3, [pc, #76]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a12      	ldr	r2, [pc, #72]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 800532c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005332:	f7fc fd61 	bl	8001df8 <HAL_GetTick>
 8005336:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800533a:	f7fc fd5d 	bl	8001df8 <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e00f      	b.n	800536c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800534c:	4b09      	ldr	r3, [pc, #36]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1f0      	bne.n	800533a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005358:	4b06      	ldr	r3, [pc, #24]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 800535a:	68da      	ldr	r2, [r3, #12]
 800535c:	4905      	ldr	r1, [pc, #20]	; (8005374 <HAL_RCC_OscConfig+0x820>)
 800535e:	4b06      	ldr	r3, [pc, #24]	; (8005378 <HAL_RCC_OscConfig+0x824>)
 8005360:	4013      	ands	r3, r2
 8005362:	60cb      	str	r3, [r1, #12]
 8005364:	e001      	b.n	800536a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005366:	2301      	movs	r3, #1
 8005368:	e000      	b.n	800536c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3720      	adds	r7, #32
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	feeefffc 	.word	0xfeeefffc

0800537c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e0e7      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005390:	4b75      	ldr	r3, [pc, #468]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	683a      	ldr	r2, [r7, #0]
 800539a:	429a      	cmp	r2, r3
 800539c:	d910      	bls.n	80053c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800539e:	4b72      	ldr	r3, [pc, #456]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f023 0207 	bic.w	r2, r3, #7
 80053a6:	4970      	ldr	r1, [pc, #448]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ae:	4b6e      	ldr	r3, [pc, #440]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0307 	and.w	r3, r3, #7
 80053b6:	683a      	ldr	r2, [r7, #0]
 80053b8:	429a      	cmp	r2, r3
 80053ba:	d001      	beq.n	80053c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0cf      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d010      	beq.n	80053ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689a      	ldr	r2, [r3, #8]
 80053d0:	4b66      	ldr	r3, [pc, #408]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053d8:	429a      	cmp	r2, r3
 80053da:	d908      	bls.n	80053ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053dc:	4b63      	ldr	r3, [pc, #396]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	4960      	ldr	r1, [pc, #384]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f003 0301 	and.w	r3, r3, #1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d04c      	beq.n	8005494 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	2b03      	cmp	r3, #3
 8005400:	d107      	bne.n	8005412 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005402:	4b5a      	ldr	r3, [pc, #360]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d121      	bne.n	8005452 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e0a6      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d107      	bne.n	800542a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800541a:	4b54      	ldr	r3, [pc, #336]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005422:	2b00      	cmp	r3, #0
 8005424:	d115      	bne.n	8005452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005426:	2301      	movs	r3, #1
 8005428:	e09a      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005432:	4b4e      	ldr	r3, [pc, #312]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e08e      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005442:	4b4a      	ldr	r3, [pc, #296]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d101      	bne.n	8005452 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800544e:	2301      	movs	r3, #1
 8005450:	e086      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005452:	4b46      	ldr	r3, [pc, #280]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f023 0203 	bic.w	r2, r3, #3
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	4943      	ldr	r1, [pc, #268]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005460:	4313      	orrs	r3, r2
 8005462:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005464:	f7fc fcc8 	bl	8001df8 <HAL_GetTick>
 8005468:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800546a:	e00a      	b.n	8005482 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc fcc4 	bl	8001df8 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	; 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e06e      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005482:	4b3a      	ldr	r3, [pc, #232]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	f003 020c 	and.w	r2, r3, #12
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	009b      	lsls	r3, r3, #2
 8005490:	429a      	cmp	r2, r3
 8005492:	d1eb      	bne.n	800546c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0302 	and.w	r3, r3, #2
 800549c:	2b00      	cmp	r3, #0
 800549e:	d010      	beq.n	80054c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689a      	ldr	r2, [r3, #8]
 80054a4:	4b31      	ldr	r3, [pc, #196]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d208      	bcs.n	80054c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054b0:	4b2e      	ldr	r3, [pc, #184]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	492b      	ldr	r1, [pc, #172]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054c2:	4b29      	ldr	r3, [pc, #164]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0307 	and.w	r3, r3, #7
 80054ca:	683a      	ldr	r2, [r7, #0]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d210      	bcs.n	80054f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f023 0207 	bic.w	r2, r3, #7
 80054d8:	4923      	ldr	r1, [pc, #140]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	4313      	orrs	r3, r2
 80054de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054e0:	4b21      	ldr	r3, [pc, #132]	; (8005568 <HAL_RCC_ClockConfig+0x1ec>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0307 	and.w	r3, r3, #7
 80054e8:	683a      	ldr	r2, [r7, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d001      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e036      	b.n	8005560 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d008      	beq.n	8005510 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054fe:	4b1b      	ldr	r3, [pc, #108]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	4918      	ldr	r1, [pc, #96]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 800550c:	4313      	orrs	r3, r2
 800550e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0308 	and.w	r3, r3, #8
 8005518:	2b00      	cmp	r3, #0
 800551a:	d009      	beq.n	8005530 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4910      	ldr	r1, [pc, #64]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 800552c:	4313      	orrs	r3, r2
 800552e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005530:	f000 f824 	bl	800557c <HAL_RCC_GetSysClockFreq>
 8005534:	4602      	mov	r2, r0
 8005536:	4b0d      	ldr	r3, [pc, #52]	; (800556c <HAL_RCC_ClockConfig+0x1f0>)
 8005538:	689b      	ldr	r3, [r3, #8]
 800553a:	091b      	lsrs	r3, r3, #4
 800553c:	f003 030f 	and.w	r3, r3, #15
 8005540:	490b      	ldr	r1, [pc, #44]	; (8005570 <HAL_RCC_ClockConfig+0x1f4>)
 8005542:	5ccb      	ldrb	r3, [r1, r3]
 8005544:	f003 031f 	and.w	r3, r3, #31
 8005548:	fa22 f303 	lsr.w	r3, r2, r3
 800554c:	4a09      	ldr	r2, [pc, #36]	; (8005574 <HAL_RCC_ClockConfig+0x1f8>)
 800554e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005550:	4b09      	ldr	r3, [pc, #36]	; (8005578 <HAL_RCC_ClockConfig+0x1fc>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4618      	mov	r0, r3
 8005556:	f7fc fbff 	bl	8001d58 <HAL_InitTick>
 800555a:	4603      	mov	r3, r0
 800555c:	72fb      	strb	r3, [r7, #11]

  return status;
 800555e:	7afb      	ldrb	r3, [r7, #11]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3710      	adds	r7, #16
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40022000 	.word	0x40022000
 800556c:	40021000 	.word	0x40021000
 8005570:	0800a398 	.word	0x0800a398
 8005574:	20000004 	.word	0x20000004
 8005578:	20000008 	.word	0x20000008

0800557c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800557c:	b480      	push	{r7}
 800557e:	b089      	sub	sp, #36	; 0x24
 8005580:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005582:	2300      	movs	r3, #0
 8005584:	61fb      	str	r3, [r7, #28]
 8005586:	2300      	movs	r3, #0
 8005588:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800558a:	4b3e      	ldr	r3, [pc, #248]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 030c 	and.w	r3, r3, #12
 8005592:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005594:	4b3b      	ldr	r3, [pc, #236]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 8005596:	68db      	ldr	r3, [r3, #12]
 8005598:	f003 0303 	and.w	r3, r3, #3
 800559c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d005      	beq.n	80055b0 <HAL_RCC_GetSysClockFreq+0x34>
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	2b0c      	cmp	r3, #12
 80055a8:	d121      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d11e      	bne.n	80055ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80055b0:	4b34      	ldr	r3, [pc, #208]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0308 	and.w	r3, r3, #8
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d107      	bne.n	80055cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80055bc:	4b31      	ldr	r3, [pc, #196]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 80055be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c2:	0a1b      	lsrs	r3, r3, #8
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	61fb      	str	r3, [r7, #28]
 80055ca:	e005      	b.n	80055d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80055cc:	4b2d      	ldr	r3, [pc, #180]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	091b      	lsrs	r3, r3, #4
 80055d2:	f003 030f 	and.w	r3, r3, #15
 80055d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80055d8:	4a2b      	ldr	r2, [pc, #172]	; (8005688 <HAL_RCC_GetSysClockFreq+0x10c>)
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d10d      	bne.n	8005604 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80055e8:	69fb      	ldr	r3, [r7, #28]
 80055ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055ec:	e00a      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b04      	cmp	r3, #4
 80055f2:	d102      	bne.n	80055fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80055f4:	4b25      	ldr	r3, [pc, #148]	; (800568c <HAL_RCC_GetSysClockFreq+0x110>)
 80055f6:	61bb      	str	r3, [r7, #24]
 80055f8:	e004      	b.n	8005604 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d101      	bne.n	8005604 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005600:	4b23      	ldr	r3, [pc, #140]	; (8005690 <HAL_RCC_GetSysClockFreq+0x114>)
 8005602:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	2b0c      	cmp	r3, #12
 8005608:	d134      	bne.n	8005674 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800560a:	4b1e      	ldr	r3, [pc, #120]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0303 	and.w	r3, r3, #3
 8005612:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d003      	beq.n	8005622 <HAL_RCC_GetSysClockFreq+0xa6>
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2b03      	cmp	r3, #3
 800561e:	d003      	beq.n	8005628 <HAL_RCC_GetSysClockFreq+0xac>
 8005620:	e005      	b.n	800562e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005622:	4b1a      	ldr	r3, [pc, #104]	; (800568c <HAL_RCC_GetSysClockFreq+0x110>)
 8005624:	617b      	str	r3, [r7, #20]
      break;
 8005626:	e005      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005628:	4b19      	ldr	r3, [pc, #100]	; (8005690 <HAL_RCC_GetSysClockFreq+0x114>)
 800562a:	617b      	str	r3, [r7, #20]
      break;
 800562c:	e002      	b.n	8005634 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	617b      	str	r3, [r7, #20]
      break;
 8005632:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005634:	4b13      	ldr	r3, [pc, #76]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 8005636:	68db      	ldr	r3, [r3, #12]
 8005638:	091b      	lsrs	r3, r3, #4
 800563a:	f003 0307 	and.w	r3, r3, #7
 800563e:	3301      	adds	r3, #1
 8005640:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005642:	4b10      	ldr	r3, [pc, #64]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	0a1b      	lsrs	r3, r3, #8
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	fb03 f202 	mul.w	r2, r3, r2
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	fbb2 f3f3 	udiv	r3, r2, r3
 8005658:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800565a:	4b0a      	ldr	r3, [pc, #40]	; (8005684 <HAL_RCC_GetSysClockFreq+0x108>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	0e5b      	lsrs	r3, r3, #25
 8005660:	f003 0303 	and.w	r3, r3, #3
 8005664:	3301      	adds	r3, #1
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800566a:	697a      	ldr	r2, [r7, #20]
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005672:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005674:	69bb      	ldr	r3, [r7, #24]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	; 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
 8005682:	bf00      	nop
 8005684:	40021000 	.word	0x40021000
 8005688:	0800a3b0 	.word	0x0800a3b0
 800568c:	00f42400 	.word	0x00f42400
 8005690:	007a1200 	.word	0x007a1200

08005694 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005694:	b480      	push	{r7}
 8005696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005698:	4b03      	ldr	r3, [pc, #12]	; (80056a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800569a:	681b      	ldr	r3, [r3, #0]
}
 800569c:	4618      	mov	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000004 	.word	0x20000004

080056ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80056b0:	f7ff fff0 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056b4:	4602      	mov	r2, r0
 80056b6:	4b06      	ldr	r3, [pc, #24]	; (80056d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056b8:	689b      	ldr	r3, [r3, #8]
 80056ba:	0a1b      	lsrs	r3, r3, #8
 80056bc:	f003 0307 	and.w	r3, r3, #7
 80056c0:	4904      	ldr	r1, [pc, #16]	; (80056d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056c2:	5ccb      	ldrb	r3, [r1, r3]
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	40021000 	.word	0x40021000
 80056d4:	0800a3a8 	.word	0x0800a3a8

080056d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80056dc:	f7ff ffda 	bl	8005694 <HAL_RCC_GetHCLKFreq>
 80056e0:	4602      	mov	r2, r0
 80056e2:	4b06      	ldr	r3, [pc, #24]	; (80056fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	0adb      	lsrs	r3, r3, #11
 80056e8:	f003 0307 	and.w	r3, r3, #7
 80056ec:	4904      	ldr	r1, [pc, #16]	; (8005700 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056ee:	5ccb      	ldrb	r3, [r1, r3]
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	40021000 	.word	0x40021000
 8005700:	0800a3a8 	.word	0x0800a3a8

08005704 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b086      	sub	sp, #24
 8005708:	af00      	add	r7, sp, #0
 800570a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800570c:	2300      	movs	r3, #0
 800570e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005710:	4b2a      	ldr	r3, [pc, #168]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800571c:	f7ff f9b6 	bl	8004a8c <HAL_PWREx_GetVoltageRange>
 8005720:	6178      	str	r0, [r7, #20]
 8005722:	e014      	b.n	800574e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005724:	4b25      	ldr	r3, [pc, #148]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005728:	4a24      	ldr	r2, [pc, #144]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800572a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800572e:	6593      	str	r3, [r2, #88]	; 0x58
 8005730:	4b22      	ldr	r3, [pc, #136]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005734:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005738:	60fb      	str	r3, [r7, #12]
 800573a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800573c:	f7ff f9a6 	bl	8004a8c <HAL_PWREx_GetVoltageRange>
 8005740:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005742:	4b1e      	ldr	r3, [pc, #120]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005746:	4a1d      	ldr	r2, [pc, #116]	; (80057bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005748:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800574c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005754:	d10b      	bne.n	800576e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b80      	cmp	r3, #128	; 0x80
 800575a:	d919      	bls.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2ba0      	cmp	r3, #160	; 0xa0
 8005760:	d902      	bls.n	8005768 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005762:	2302      	movs	r3, #2
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	e013      	b.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005768:	2301      	movs	r3, #1
 800576a:	613b      	str	r3, [r7, #16]
 800576c:	e010      	b.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d902      	bls.n	800577a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005774:	2303      	movs	r3, #3
 8005776:	613b      	str	r3, [r7, #16]
 8005778:	e00a      	b.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b80      	cmp	r3, #128	; 0x80
 800577e:	d102      	bne.n	8005786 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005780:	2302      	movs	r3, #2
 8005782:	613b      	str	r3, [r7, #16]
 8005784:	e004      	b.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2b70      	cmp	r3, #112	; 0x70
 800578a:	d101      	bne.n	8005790 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800578c:	2301      	movs	r3, #1
 800578e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005790:	4b0b      	ldr	r3, [pc, #44]	; (80057c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f023 0207 	bic.w	r2, r3, #7
 8005798:	4909      	ldr	r1, [pc, #36]	; (80057c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800579a:	693b      	ldr	r3, [r7, #16]
 800579c:	4313      	orrs	r3, r2
 800579e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80057a0:	4b07      	ldr	r3, [pc, #28]	; (80057c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f003 0307 	and.w	r3, r3, #7
 80057a8:	693a      	ldr	r2, [r7, #16]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d001      	beq.n	80057b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e000      	b.n	80057b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80057b2:	2300      	movs	r3, #0
}
 80057b4:	4618      	mov	r0, r3
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	40021000 	.word	0x40021000
 80057c0:	40022000 	.word	0x40022000

080057c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b086      	sub	sp, #24
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80057cc:	2300      	movs	r3, #0
 80057ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057d0:	2300      	movs	r3, #0
 80057d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d031      	beq.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057e8:	d01a      	beq.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80057ea:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80057ee:	d814      	bhi.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x56>
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d009      	beq.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80057f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80057f8:	d10f      	bne.n	800581a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80057fa:	4b5d      	ldr	r3, [pc, #372]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80057fc:	68db      	ldr	r3, [r3, #12]
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005804:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005806:	e00c      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	3304      	adds	r3, #4
 800580c:	2100      	movs	r1, #0
 800580e:	4618      	mov	r0, r3
 8005810:	f000 f9de 	bl	8005bd0 <RCCEx_PLLSAI1_Config>
 8005814:	4603      	mov	r3, r0
 8005816:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005818:	e003      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	74fb      	strb	r3, [r7, #19]
      break;
 800581e:	e000      	b.n	8005822 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005822:	7cfb      	ldrb	r3, [r7, #19]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10b      	bne.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005828:	4b51      	ldr	r3, [pc, #324]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800582a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	494e      	ldr	r1, [pc, #312]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005838:	4313      	orrs	r3, r2
 800583a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800583e:	e001      	b.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005840:	7cfb      	ldrb	r3, [r7, #19]
 8005842:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 809e 	beq.w	800598e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005852:	2300      	movs	r3, #0
 8005854:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005856:	4b46      	ldr	r3, [pc, #280]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005858:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00d      	beq.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800586c:	4b40      	ldr	r3, [pc, #256]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800586e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005870:	4a3f      	ldr	r2, [pc, #252]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005872:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005876:	6593      	str	r3, [r2, #88]	; 0x58
 8005878:	4b3d      	ldr	r3, [pc, #244]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800587a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005880:	60bb      	str	r3, [r7, #8]
 8005882:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005884:	2301      	movs	r3, #1
 8005886:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005888:	4b3a      	ldr	r3, [pc, #232]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800588e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005892:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005894:	f7fc fab0 	bl	8001df8 <HAL_GetTick>
 8005898:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800589a:	e009      	b.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800589c:	f7fc faac 	bl	8001df8 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	1ad3      	subs	r3, r2, r3
 80058a6:	2b02      	cmp	r3, #2
 80058a8:	d902      	bls.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80058aa:	2303      	movs	r3, #3
 80058ac:	74fb      	strb	r3, [r7, #19]
        break;
 80058ae:	e005      	b.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058b0:	4b30      	ldr	r3, [pc, #192]	; (8005974 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d0ef      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80058bc:	7cfb      	ldrb	r3, [r7, #19]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d15a      	bne.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058c2:	4b2b      	ldr	r3, [pc, #172]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80058cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d01e      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d8:	697a      	ldr	r2, [r7, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d019      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80058de:	4b24      	ldr	r3, [pc, #144]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80058ea:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80058fa:	4b1d      	ldr	r3, [pc, #116]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80058fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005906:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800590a:	4a19      	ldr	r2, [pc, #100]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d016      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800591c:	f7fc fa6c 	bl	8001df8 <HAL_GetTick>
 8005920:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005922:	e00b      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005924:	f7fc fa68 	bl	8001df8 <HAL_GetTick>
 8005928:	4602      	mov	r2, r0
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	1ad3      	subs	r3, r2, r3
 800592e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005932:	4293      	cmp	r3, r2
 8005934:	d902      	bls.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	74fb      	strb	r3, [r7, #19]
            break;
 800593a:	e006      	b.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800593c:	4b0c      	ldr	r3, [pc, #48]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800593e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d0ec      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800594a:	7cfb      	ldrb	r3, [r7, #19]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10b      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005950:	4b07      	ldr	r3, [pc, #28]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005956:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	4904      	ldr	r1, [pc, #16]	; (8005970 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005960:	4313      	orrs	r3, r2
 8005962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005966:	e009      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005968:	7cfb      	ldrb	r3, [r7, #19]
 800596a:	74bb      	strb	r3, [r7, #18]
 800596c:	e006      	b.n	800597c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800596e:	bf00      	nop
 8005970:	40021000 	.word	0x40021000
 8005974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005978:	7cfb      	ldrb	r3, [r7, #19]
 800597a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800597c:	7c7b      	ldrb	r3, [r7, #17]
 800597e:	2b01      	cmp	r3, #1
 8005980:	d105      	bne.n	800598e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005982:	4b8a      	ldr	r3, [pc, #552]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005986:	4a89      	ldr	r2, [pc, #548]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005988:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800598c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 0301 	and.w	r3, r3, #1
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800599a:	4b84      	ldr	r3, [pc, #528]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	f023 0203 	bic.w	r2, r3, #3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	4980      	ldr	r1, [pc, #512]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059aa:	4313      	orrs	r3, r2
 80059ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d00a      	beq.n	80059d2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059bc:	4b7b      	ldr	r3, [pc, #492]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c2:	f023 020c 	bic.w	r2, r3, #12
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	4978      	ldr	r1, [pc, #480]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f003 0320 	and.w	r3, r3, #32
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00a      	beq.n	80059f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80059de:	4b73      	ldr	r3, [pc, #460]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ec:	496f      	ldr	r1, [pc, #444]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80059ee:	4313      	orrs	r3, r2
 80059f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00a      	beq.n	8005a16 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a00:	4b6a      	ldr	r3, [pc, #424]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a06:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a0e:	4967      	ldr	r1, [pc, #412]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a10:	4313      	orrs	r3, r2
 8005a12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d00a      	beq.n	8005a38 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005a22:	4b62      	ldr	r3, [pc, #392]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a28:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a30:	495e      	ldr	r1, [pc, #376]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a32:	4313      	orrs	r3, r2
 8005a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d00a      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005a44:	4b59      	ldr	r3, [pc, #356]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a4a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a52:	4956      	ldr	r1, [pc, #344]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a54:	4313      	orrs	r3, r2
 8005a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d00a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005a66:	4b51      	ldr	r3, [pc, #324]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a74:	494d      	ldr	r1, [pc, #308]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a76:	4313      	orrs	r3, r2
 8005a78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d028      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a88:	4b48      	ldr	r3, [pc, #288]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a96:	4945      	ldr	r1, [pc, #276]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aa2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005aa6:	d106      	bne.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa8:	4b40      	ldr	r3, [pc, #256]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a3f      	ldr	r2, [pc, #252]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ab2:	60d3      	str	r3, [r2, #12]
 8005ab4:	e011      	b.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005abe:	d10c      	bne.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	3304      	adds	r3, #4
 8005ac4:	2101      	movs	r1, #1
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	f000 f882 	bl	8005bd0 <RCCEx_PLLSAI1_Config>
 8005acc:	4603      	mov	r3, r0
 8005ace:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005ad0:	7cfb      	ldrb	r3, [r7, #19]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d001      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8005ad6:	7cfb      	ldrb	r3, [r7, #19]
 8005ad8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d028      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005ae6:	4b31      	ldr	r3, [pc, #196]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af4:	492d      	ldr	r1, [pc, #180]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b04:	d106      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b06:	4b29      	ldr	r3, [pc, #164]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	4a28      	ldr	r2, [pc, #160]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b0c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b10:	60d3      	str	r3, [r2, #12]
 8005b12:	e011      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b18:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3304      	adds	r3, #4
 8005b22:	2101      	movs	r1, #1
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f853 	bl	8005bd0 <RCCEx_PLLSAI1_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d01c      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005b44:	4b19      	ldr	r3, [pc, #100]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b52:	4916      	ldr	r1, [pc, #88]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b62:	d10c      	bne.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	2102      	movs	r1, #2
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f830 	bl	8005bd0 <RCCEx_PLLSAI1_Config>
 8005b70:	4603      	mov	r3, r0
 8005b72:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b74:	7cfb      	ldrb	r3, [r7, #19]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d001      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005b7a:	7cfb      	ldrb	r3, [r7, #19]
 8005b7c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b8a:	4b08      	ldr	r3, [pc, #32]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b90:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b98:	4904      	ldr	r1, [pc, #16]	; (8005bac <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005ba0:	7cbb      	ldrb	r3, [r7, #18]
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3718      	adds	r7, #24
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40021000 	.word	0x40021000

08005bb0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005bb4:	4b05      	ldr	r3, [pc, #20]	; (8005bcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a04      	ldr	r2, [pc, #16]	; (8005bcc <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8005bba:	f043 0304 	orr.w	r3, r3, #4
 8005bbe:	6013      	str	r3, [r2, #0]
}
 8005bc0:	bf00      	nop
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	40021000 	.word	0x40021000

08005bd0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b084      	sub	sp, #16
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005bde:	4b74      	ldr	r3, [pc, #464]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0303 	and.w	r3, r3, #3
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d018      	beq.n	8005c1c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005bea:	4b71      	ldr	r3, [pc, #452]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	f003 0203 	and.w	r2, r3, #3
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d10d      	bne.n	8005c16 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
       ||
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d009      	beq.n	8005c16 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005c02:	4b6b      	ldr	r3, [pc, #428]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c04:	68db      	ldr	r3, [r3, #12]
 8005c06:	091b      	lsrs	r3, r3, #4
 8005c08:	f003 0307 	and.w	r3, r3, #7
 8005c0c:	1c5a      	adds	r2, r3, #1
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	685b      	ldr	r3, [r3, #4]
       ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d047      	beq.n	8005ca6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
 8005c1a:	e044      	b.n	8005ca6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	2b03      	cmp	r3, #3
 8005c22:	d018      	beq.n	8005c56 <RCCEx_PLLSAI1_Config+0x86>
 8005c24:	2b03      	cmp	r3, #3
 8005c26:	d825      	bhi.n	8005c74 <RCCEx_PLLSAI1_Config+0xa4>
 8005c28:	2b01      	cmp	r3, #1
 8005c2a:	d002      	beq.n	8005c32 <RCCEx_PLLSAI1_Config+0x62>
 8005c2c:	2b02      	cmp	r3, #2
 8005c2e:	d009      	beq.n	8005c44 <RCCEx_PLLSAI1_Config+0x74>
 8005c30:	e020      	b.n	8005c74 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005c32:	4b5f      	ldr	r3, [pc, #380]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f003 0302 	and.w	r3, r3, #2
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d11d      	bne.n	8005c7a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c42:	e01a      	b.n	8005c7a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c44:	4b5a      	ldr	r3, [pc, #360]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d116      	bne.n	8005c7e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c54:	e013      	b.n	8005c7e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c56:	4b56      	ldr	r3, [pc, #344]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d10f      	bne.n	8005c82 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c62:	4b53      	ldr	r3, [pc, #332]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d109      	bne.n	8005c82 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c72:	e006      	b.n	8005c82 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c74:	2301      	movs	r3, #1
 8005c76:	73fb      	strb	r3, [r7, #15]
      break;
 8005c78:	e004      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c7a:	bf00      	nop
 8005c7c:	e002      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c7e:	bf00      	nop
 8005c80:	e000      	b.n	8005c84 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c82:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c84:	7bfb      	ldrb	r3, [r7, #15]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10d      	bne.n	8005ca6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c8a:	4b49      	ldr	r3, [pc, #292]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6819      	ldr	r1, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	3b01      	subs	r3, #1
 8005c9c:	011b      	lsls	r3, r3, #4
 8005c9e:	430b      	orrs	r3, r1
 8005ca0:	4943      	ldr	r1, [pc, #268]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d17c      	bne.n	8005da6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005cac:	4b40      	ldr	r3, [pc, #256]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4a3f      	ldr	r2, [pc, #252]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cb2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005cb6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cb8:	f7fc f89e 	bl	8001df8 <HAL_GetTick>
 8005cbc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cbe:	e009      	b.n	8005cd4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005cc0:	f7fc f89a 	bl	8001df8 <HAL_GetTick>
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	1ad3      	subs	r3, r2, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d902      	bls.n	8005cd4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005cce:	2303      	movs	r3, #3
 8005cd0:	73fb      	strb	r3, [r7, #15]
        break;
 8005cd2:	e005      	b.n	8005ce0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005cd4:	4b36      	ldr	r3, [pc, #216]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1ef      	bne.n	8005cc0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d15f      	bne.n	8005da6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d110      	bne.n	8005d0e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cec:	4b30      	ldr	r3, [pc, #192]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005cee:	691b      	ldr	r3, [r3, #16]
 8005cf0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005cf4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	6892      	ldr	r2, [r2, #8]
 8005cfc:	0211      	lsls	r1, r2, #8
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	68d2      	ldr	r2, [r2, #12]
 8005d02:	06d2      	lsls	r2, r2, #27
 8005d04:	430a      	orrs	r2, r1
 8005d06:	492a      	ldr	r1, [pc, #168]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	610b      	str	r3, [r1, #16]
 8005d0c:	e027      	b.n	8005d5e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d112      	bne.n	8005d3a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d14:	4b26      	ldr	r3, [pc, #152]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005d1c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d20:	687a      	ldr	r2, [r7, #4]
 8005d22:	6892      	ldr	r2, [r2, #8]
 8005d24:	0211      	lsls	r1, r2, #8
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6912      	ldr	r2, [r2, #16]
 8005d2a:	0852      	lsrs	r2, r2, #1
 8005d2c:	3a01      	subs	r2, #1
 8005d2e:	0552      	lsls	r2, r2, #21
 8005d30:	430a      	orrs	r2, r1
 8005d32:	491f      	ldr	r1, [pc, #124]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d34:	4313      	orrs	r3, r2
 8005d36:	610b      	str	r3, [r1, #16]
 8005d38:	e011      	b.n	8005d5e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005d3a:	4b1d      	ldr	r3, [pc, #116]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d3c:	691b      	ldr	r3, [r3, #16]
 8005d3e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d42:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d46:	687a      	ldr	r2, [r7, #4]
 8005d48:	6892      	ldr	r2, [r2, #8]
 8005d4a:	0211      	lsls	r1, r2, #8
 8005d4c:	687a      	ldr	r2, [r7, #4]
 8005d4e:	6952      	ldr	r2, [r2, #20]
 8005d50:	0852      	lsrs	r2, r2, #1
 8005d52:	3a01      	subs	r2, #1
 8005d54:	0652      	lsls	r2, r2, #25
 8005d56:	430a      	orrs	r2, r1
 8005d58:	4915      	ldr	r1, [pc, #84]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4a13      	ldr	r2, [pc, #76]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d68:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d6a:	f7fc f845 	bl	8001df8 <HAL_GetTick>
 8005d6e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d70:	e009      	b.n	8005d86 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d72:	f7fc f841 	bl	8001df8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d902      	bls.n	8005d86 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	73fb      	strb	r3, [r7, #15]
          break;
 8005d84:	e005      	b.n	8005d92 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d86:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0ef      	beq.n	8005d72 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8005d92:	7bfb      	ldrb	r3, [r7, #15]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d106      	bne.n	8005da6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	699b      	ldr	r3, [r3, #24]
 8005da0:	4903      	ldr	r1, [pc, #12]	; (8005db0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005da6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40021000 	.word	0x40021000

08005db4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e049      	b.n	8005e5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f7fb fd84 	bl	80018e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fb04 	bl	8006400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b082      	sub	sp, #8
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d101      	bne.n	8005e74 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e049      	b.n	8005f08 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d106      	bne.n	8005e8e <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f000 f841 	bl	8005f10 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2202      	movs	r2, #2
 8005e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	4619      	mov	r1, r3
 8005ea0:	4610      	mov	r0, r2
 8005ea2:	f000 faad 	bl	8006400 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2201      	movs	r2, #1
 8005eba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2201      	movs	r2, #1
 8005eca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2201      	movs	r2, #1
 8005eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2201      	movs	r2, #1
 8005ef2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2201      	movs	r2, #1
 8005f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3708      	adds	r7, #8
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b084      	sub	sp, #16
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d020      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	f003 0302 	and.w	r3, r3, #2
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d01b      	beq.n	8005f88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0202 	mvn.w	r2, #2
 8005f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f003 0303 	and.w	r3, r3, #3
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d003      	beq.n	8005f76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa27 	bl	80063c2 <HAL_TIM_IC_CaptureCallback>
 8005f74:	e005      	b.n	8005f82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 fa19 	bl	80063ae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fa2a 	bl	80063d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d020      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	f003 0304 	and.w	r3, r3, #4
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d01b      	beq.n	8005fd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f06f 0204 	mvn.w	r2, #4
 8005fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2202      	movs	r2, #2
 8005faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d003      	beq.n	8005fc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fa01 	bl	80063c2 <HAL_TIM_IC_CaptureCallback>
 8005fc0:	e005      	b.n	8005fce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f9f3 	bl	80063ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fa04 	bl	80063d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d020      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d01b      	beq.n	8006020 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f06f 0208 	mvn.w	r2, #8
 8005ff0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2204      	movs	r2, #4
 8005ff6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	f003 0303 	and.w	r3, r3, #3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d003      	beq.n	800600e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 f9db 	bl	80063c2 <HAL_TIM_IC_CaptureCallback>
 800600c:	e005      	b.n	800601a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 f9cd 	bl	80063ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006014:	6878      	ldr	r0, [r7, #4]
 8006016:	f000 f9de 	bl	80063d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 0310 	and.w	r3, r3, #16
 8006026:	2b00      	cmp	r3, #0
 8006028:	d020      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f003 0310 	and.w	r3, r3, #16
 8006030:	2b00      	cmp	r3, #0
 8006032:	d01b      	beq.n	800606c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f06f 0210 	mvn.w	r2, #16
 800603c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2208      	movs	r2, #8
 8006042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800604e:	2b00      	cmp	r3, #0
 8006050:	d003      	beq.n	800605a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f9b5 	bl	80063c2 <HAL_TIM_IC_CaptureCallback>
 8006058:	e005      	b.n	8006066 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f9a7 	bl	80063ae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f9b8 	bl	80063d6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0301 	and.w	r3, r3, #1
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f003 0301 	and.w	r3, r3, #1
 800607c:	2b00      	cmp	r3, #0
 800607e:	d007      	beq.n	8006090 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb fa8c 	bl	80015a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00c      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d007      	beq.n	80060b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fd92 	bl	8006bd8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00c      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d007      	beq.n	80060d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80060d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fd8a 	bl	8006bec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d00c      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d007      	beq.n	80060fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80060f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f977 	bl	80063ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80060fc:	68bb      	ldr	r3, [r7, #8]
 80060fe:	f003 0320 	and.w	r3, r3, #32
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00c      	beq.n	8006120 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f003 0320 	and.w	r3, r3, #32
 800610c:	2b00      	cmp	r3, #0
 800610e:	d007      	beq.n	8006120 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f06f 0220 	mvn.w	r2, #32
 8006118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 fd52 	bl	8006bc4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006120:	bf00      	nop
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	60f8      	str	r0, [r7, #12]
 8006130:	60b9      	str	r1, [r7, #8]
 8006132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006134:	2300      	movs	r3, #0
 8006136:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800613e:	2b01      	cmp	r3, #1
 8006140:	d101      	bne.n	8006146 <HAL_TIM_OC_ConfigChannel+0x1e>
 8006142:	2302      	movs	r3, #2
 8006144:	e066      	b.n	8006214 <HAL_TIM_OC_ConfigChannel+0xec>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2201      	movs	r2, #1
 800614a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2b14      	cmp	r3, #20
 8006152:	d857      	bhi.n	8006204 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <HAL_TIM_OC_ConfigChannel+0x34>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	080061b1 	.word	0x080061b1
 8006160:	08006205 	.word	0x08006205
 8006164:	08006205 	.word	0x08006205
 8006168:	08006205 	.word	0x08006205
 800616c:	080061bf 	.word	0x080061bf
 8006170:	08006205 	.word	0x08006205
 8006174:	08006205 	.word	0x08006205
 8006178:	08006205 	.word	0x08006205
 800617c:	080061cd 	.word	0x080061cd
 8006180:	08006205 	.word	0x08006205
 8006184:	08006205 	.word	0x08006205
 8006188:	08006205 	.word	0x08006205
 800618c:	080061db 	.word	0x080061db
 8006190:	08006205 	.word	0x08006205
 8006194:	08006205 	.word	0x08006205
 8006198:	08006205 	.word	0x08006205
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	08006205 	.word	0x08006205
 80061a4:	08006205 	.word	0x08006205
 80061a8:	08006205 	.word	0x08006205
 80061ac:	080061f7 	.word	0x080061f7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f000 f986 	bl	80064c8 <TIM_OC1_SetConfig>
      break;
 80061bc:	e025      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 f9fb 	bl	80065c0 <TIM_OC2_SetConfig>
      break;
 80061ca:	e01e      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68b9      	ldr	r1, [r7, #8]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 fa6e 	bl	80066b4 <TIM_OC3_SetConfig>
      break;
 80061d8:	e017      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 fadf 	bl	80067a4 <TIM_OC4_SetConfig>
      break;
 80061e6:	e010      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68b9      	ldr	r1, [r7, #8]
 80061ee:	4618      	mov	r0, r3
 80061f0:	f000 fb36 	bl	8006860 <TIM_OC5_SetConfig>
      break;
 80061f4:	e009      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68b9      	ldr	r1, [r7, #8]
 80061fc:	4618      	mov	r0, r3
 80061fe:	f000 fb87 	bl	8006910 <TIM_OC6_SetConfig>
      break;
 8006202:	e002      	b.n	800620a <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006204:	2301      	movs	r3, #1
 8006206:	75fb      	strb	r3, [r7, #23]
      break;
 8006208:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2200      	movs	r2, #0
 800620e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006212:	7dfb      	ldrb	r3, [r7, #23]
}
 8006214:	4618      	mov	r0, r3
 8006216:	3718      	adds	r7, #24
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
 8006224:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006226:	2300      	movs	r3, #0
 8006228:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006230:	2b01      	cmp	r3, #1
 8006232:	d101      	bne.n	8006238 <HAL_TIM_ConfigClockSource+0x1c>
 8006234:	2302      	movs	r3, #2
 8006236:	e0b6      	b.n	80063a6 <HAL_TIM_ConfigClockSource+0x18a>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2202      	movs	r2, #2
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006256:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800625a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006262:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006274:	d03e      	beq.n	80062f4 <HAL_TIM_ConfigClockSource+0xd8>
 8006276:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627a:	f200 8087 	bhi.w	800638c <HAL_TIM_ConfigClockSource+0x170>
 800627e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006282:	f000 8086 	beq.w	8006392 <HAL_TIM_ConfigClockSource+0x176>
 8006286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628a:	d87f      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 800628c:	2b70      	cmp	r3, #112	; 0x70
 800628e:	d01a      	beq.n	80062c6 <HAL_TIM_ConfigClockSource+0xaa>
 8006290:	2b70      	cmp	r3, #112	; 0x70
 8006292:	d87b      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 8006294:	2b60      	cmp	r3, #96	; 0x60
 8006296:	d050      	beq.n	800633a <HAL_TIM_ConfigClockSource+0x11e>
 8006298:	2b60      	cmp	r3, #96	; 0x60
 800629a:	d877      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 800629c:	2b50      	cmp	r3, #80	; 0x50
 800629e:	d03c      	beq.n	800631a <HAL_TIM_ConfigClockSource+0xfe>
 80062a0:	2b50      	cmp	r3, #80	; 0x50
 80062a2:	d873      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 80062a4:	2b40      	cmp	r3, #64	; 0x40
 80062a6:	d058      	beq.n	800635a <HAL_TIM_ConfigClockSource+0x13e>
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	d86f      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 80062ac:	2b30      	cmp	r3, #48	; 0x30
 80062ae:	d064      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x15e>
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d86b      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 80062b4:	2b20      	cmp	r3, #32
 80062b6:	d060      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x15e>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d867      	bhi.n	800638c <HAL_TIM_ConfigClockSource+0x170>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d05c      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x15e>
 80062c0:	2b10      	cmp	r3, #16
 80062c2:	d05a      	beq.n	800637a <HAL_TIM_ConfigClockSource+0x15e>
 80062c4:	e062      	b.n	800638c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80062d6:	f000 fbef 	bl	8006ab8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062e8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	68ba      	ldr	r2, [r7, #8]
 80062f0:	609a      	str	r2, [r3, #8]
      break;
 80062f2:	e04f      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80062f8:	683b      	ldr	r3, [r7, #0]
 80062fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006304:	f000 fbd8 	bl	8006ab8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689a      	ldr	r2, [r3, #8]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006316:	609a      	str	r2, [r3, #8]
      break;
 8006318:	e03c      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006326:	461a      	mov	r2, r3
 8006328:	f000 fb4c 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2150      	movs	r1, #80	; 0x50
 8006332:	4618      	mov	r0, r3
 8006334:	f000 fba5 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 8006338:	e02c      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006346:	461a      	mov	r2, r3
 8006348:	f000 fb6b 	bl	8006a22 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	2160      	movs	r1, #96	; 0x60
 8006352:	4618      	mov	r0, r3
 8006354:	f000 fb95 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 8006358:	e01c      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006366:	461a      	mov	r2, r3
 8006368:	f000 fb2c 	bl	80069c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2140      	movs	r1, #64	; 0x40
 8006372:	4618      	mov	r0, r3
 8006374:	f000 fb85 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 8006378:	e00c      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f000 fb7c 	bl	8006a82 <TIM_ITRx_SetConfig>
      break;
 800638a:	e003      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	73fb      	strb	r3, [r7, #15]
      break;
 8006390:	e000      	b.n	8006394 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006392:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3710      	adds	r7, #16
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}

080063ae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063ae:	b480      	push	{r7}
 80063b0:	b083      	sub	sp, #12
 80063b2:	af00      	add	r7, sp, #0
 80063b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063b6:	bf00      	nop
 80063b8:	370c      	adds	r7, #12
 80063ba:	46bd      	mov	sp, r7
 80063bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c0:	4770      	bx	lr

080063c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063c2:	b480      	push	{r7}
 80063c4:	b083      	sub	sp, #12
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063ca:	bf00      	nop
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063d6:	b480      	push	{r7}
 80063d8:	b083      	sub	sp, #12
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063de:	bf00      	nop
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006400:	b480      	push	{r7}
 8006402:	b085      	sub	sp, #20
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <TIM_Base_SetConfig+0xbc>)
 8006414:	4293      	cmp	r3, r2
 8006416:	d003      	beq.n	8006420 <TIM_Base_SetConfig+0x20>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800641e:	d108      	bne.n	8006432 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006426:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	68fa      	ldr	r2, [r7, #12]
 800642e:	4313      	orrs	r3, r2
 8006430:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a21      	ldr	r2, [pc, #132]	; (80064bc <TIM_Base_SetConfig+0xbc>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d00b      	beq.n	8006452 <TIM_Base_SetConfig+0x52>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006440:	d007      	beq.n	8006452 <TIM_Base_SetConfig+0x52>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	4a1e      	ldr	r2, [pc, #120]	; (80064c0 <TIM_Base_SetConfig+0xc0>)
 8006446:	4293      	cmp	r3, r2
 8006448:	d003      	beq.n	8006452 <TIM_Base_SetConfig+0x52>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	4a1d      	ldr	r2, [pc, #116]	; (80064c4 <TIM_Base_SetConfig+0xc4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d108      	bne.n	8006464 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006458:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	68db      	ldr	r3, [r3, #12]
 800645e:	68fa      	ldr	r2, [r7, #12]
 8006460:	4313      	orrs	r3, r2
 8006462:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	695b      	ldr	r3, [r3, #20]
 800646e:	4313      	orrs	r3, r2
 8006470:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	68fa      	ldr	r2, [r7, #12]
 8006476:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	689a      	ldr	r2, [r3, #8]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681a      	ldr	r2, [r3, #0]
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a0c      	ldr	r2, [pc, #48]	; (80064bc <TIM_Base_SetConfig+0xbc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d007      	beq.n	80064a0 <TIM_Base_SetConfig+0xa0>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	4a0b      	ldr	r2, [pc, #44]	; (80064c0 <TIM_Base_SetConfig+0xc0>)
 8006494:	4293      	cmp	r3, r2
 8006496:	d003      	beq.n	80064a0 <TIM_Base_SetConfig+0xa0>
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a0a      	ldr	r2, [pc, #40]	; (80064c4 <TIM_Base_SetConfig+0xc4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d103      	bne.n	80064a8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	691a      	ldr	r2, [r3, #16]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	615a      	str	r2, [r3, #20]
}
 80064ae:	bf00      	nop
 80064b0:	3714      	adds	r7, #20
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr
 80064ba:	bf00      	nop
 80064bc:	40012c00 	.word	0x40012c00
 80064c0:	40014000 	.word	0x40014000
 80064c4:	40014400 	.word	0x40014400

080064c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a1b      	ldr	r3, [r3, #32]
 80064d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	f023 0201 	bic.w	r2, r3, #1
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80064f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f023 0303 	bic.w	r3, r3, #3
 8006502:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	68fa      	ldr	r2, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	f023 0302 	bic.w	r3, r3, #2
 8006514:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	689b      	ldr	r3, [r3, #8]
 800651a:	697a      	ldr	r2, [r7, #20]
 800651c:	4313      	orrs	r3, r2
 800651e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	4a24      	ldr	r2, [pc, #144]	; (80065b4 <TIM_OC1_SetConfig+0xec>)
 8006524:	4293      	cmp	r3, r2
 8006526:	d007      	beq.n	8006538 <TIM_OC1_SetConfig+0x70>
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	4a23      	ldr	r2, [pc, #140]	; (80065b8 <TIM_OC1_SetConfig+0xf0>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d003      	beq.n	8006538 <TIM_OC1_SetConfig+0x70>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a22      	ldr	r2, [pc, #136]	; (80065bc <TIM_OC1_SetConfig+0xf4>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d10c      	bne.n	8006552 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f023 0308 	bic.w	r3, r3, #8
 800653e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	68db      	ldr	r3, [r3, #12]
 8006544:	697a      	ldr	r2, [r7, #20]
 8006546:	4313      	orrs	r3, r2
 8006548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f023 0304 	bic.w	r3, r3, #4
 8006550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a17      	ldr	r2, [pc, #92]	; (80065b4 <TIM_OC1_SetConfig+0xec>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d007      	beq.n	800656a <TIM_OC1_SetConfig+0xa2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a16      	ldr	r2, [pc, #88]	; (80065b8 <TIM_OC1_SetConfig+0xf0>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d003      	beq.n	800656a <TIM_OC1_SetConfig+0xa2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a15      	ldr	r2, [pc, #84]	; (80065bc <TIM_OC1_SetConfig+0xf4>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d111      	bne.n	800658e <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006570:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006578:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	4313      	orrs	r3, r2
 8006582:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	699b      	ldr	r3, [r3, #24]
 8006588:	693a      	ldr	r2, [r7, #16]
 800658a:	4313      	orrs	r3, r2
 800658c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	693a      	ldr	r2, [r7, #16]
 8006592:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	68fa      	ldr	r2, [r7, #12]
 8006598:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	697a      	ldr	r2, [r7, #20]
 80065a6:	621a      	str	r2, [r3, #32]
}
 80065a8:	bf00      	nop
 80065aa:	371c      	adds	r7, #28
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr
 80065b4:	40012c00 	.word	0x40012c00
 80065b8:	40014000 	.word	0x40014000
 80065bc:	40014400 	.word	0x40014400

080065c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a1b      	ldr	r3, [r3, #32]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	f023 0210 	bic.w	r2, r3, #16
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	685b      	ldr	r3, [r3, #4]
 80065e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	021b      	lsls	r3, r3, #8
 8006602:	68fa      	ldr	r2, [r7, #12]
 8006604:	4313      	orrs	r3, r2
 8006606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	f023 0320 	bic.w	r3, r3, #32
 800660e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006610:	683b      	ldr	r3, [r7, #0]
 8006612:	689b      	ldr	r3, [r3, #8]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	697a      	ldr	r2, [r7, #20]
 8006618:	4313      	orrs	r3, r2
 800661a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	4a22      	ldr	r2, [pc, #136]	; (80066a8 <TIM_OC2_SetConfig+0xe8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d10d      	bne.n	8006640 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800662a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800662c:	683b      	ldr	r3, [r7, #0]
 800662e:	68db      	ldr	r3, [r3, #12]
 8006630:	011b      	lsls	r3, r3, #4
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	4313      	orrs	r3, r2
 8006636:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a19      	ldr	r2, [pc, #100]	; (80066a8 <TIM_OC2_SetConfig+0xe8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_OC2_SetConfig+0x98>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <TIM_OC2_SetConfig+0xec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_OC2_SetConfig+0x98>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a17      	ldr	r2, [pc, #92]	; (80066b0 <TIM_OC2_SetConfig+0xf0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d113      	bne.n	8006680 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800665e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006660:	693b      	ldr	r3, [r7, #16]
 8006662:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	693a      	ldr	r2, [r7, #16]
 8006670:	4313      	orrs	r3, r2
 8006672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	699b      	ldr	r3, [r3, #24]
 8006678:	009b      	lsls	r3, r3, #2
 800667a:	693a      	ldr	r2, [r7, #16]
 800667c:	4313      	orrs	r3, r2
 800667e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	693a      	ldr	r2, [r7, #16]
 8006684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	68fa      	ldr	r2, [r7, #12]
 800668a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	685a      	ldr	r2, [r3, #4]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	621a      	str	r2, [r3, #32]
}
 800669a:	bf00      	nop
 800669c:	371c      	adds	r7, #28
 800669e:	46bd      	mov	sp, r7
 80066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a4:	4770      	bx	lr
 80066a6:	bf00      	nop
 80066a8:	40012c00 	.word	0x40012c00
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400

080066b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b087      	sub	sp, #28
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a1b      	ldr	r3, [r3, #32]
 80066c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0303 	bic.w	r3, r3, #3
 80066ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	68fa      	ldr	r2, [r7, #12]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006700:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	021b      	lsls	r3, r3, #8
 8006708:	697a      	ldr	r2, [r7, #20]
 800670a:	4313      	orrs	r3, r2
 800670c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a21      	ldr	r2, [pc, #132]	; (8006798 <TIM_OC3_SetConfig+0xe4>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d10d      	bne.n	8006732 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800671c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	021b      	lsls	r3, r3, #8
 8006724:	697a      	ldr	r2, [r7, #20]
 8006726:	4313      	orrs	r3, r2
 8006728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a18      	ldr	r2, [pc, #96]	; (8006798 <TIM_OC3_SetConfig+0xe4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d007      	beq.n	800674a <TIM_OC3_SetConfig+0x96>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a17      	ldr	r2, [pc, #92]	; (800679c <TIM_OC3_SetConfig+0xe8>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d003      	beq.n	800674a <TIM_OC3_SetConfig+0x96>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a16      	ldr	r2, [pc, #88]	; (80067a0 <TIM_OC3_SetConfig+0xec>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d113      	bne.n	8006772 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006750:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006758:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	695b      	ldr	r3, [r3, #20]
 800675e:	011b      	lsls	r3, r3, #4
 8006760:	693a      	ldr	r2, [r7, #16]
 8006762:	4313      	orrs	r3, r2
 8006764:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	699b      	ldr	r3, [r3, #24]
 800676a:	011b      	lsls	r3, r3, #4
 800676c:	693a      	ldr	r2, [r7, #16]
 800676e:	4313      	orrs	r3, r2
 8006770:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	693a      	ldr	r2, [r7, #16]
 8006776:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	68fa      	ldr	r2, [r7, #12]
 800677c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	685a      	ldr	r2, [r3, #4]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	621a      	str	r2, [r3, #32]
}
 800678c:	bf00      	nop
 800678e:	371c      	adds	r7, #28
 8006790:	46bd      	mov	sp, r7
 8006792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006796:	4770      	bx	lr
 8006798:	40012c00 	.word	0x40012c00
 800679c:	40014000 	.word	0x40014000
 80067a0:	40014400 	.word	0x40014400

080067a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	6a1b      	ldr	r3, [r3, #32]
 80067b8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	69db      	ldr	r3, [r3, #28]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	021b      	lsls	r3, r3, #8
 80067e6:	68fa      	ldr	r2, [r7, #12]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	031b      	lsls	r3, r3, #12
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	4313      	orrs	r3, r2
 80067fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a14      	ldr	r2, [pc, #80]	; (8006854 <TIM_OC4_SetConfig+0xb0>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d007      	beq.n	8006818 <TIM_OC4_SetConfig+0x74>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a13      	ldr	r2, [pc, #76]	; (8006858 <TIM_OC4_SetConfig+0xb4>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d003      	beq.n	8006818 <TIM_OC4_SetConfig+0x74>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a12      	ldr	r2, [pc, #72]	; (800685c <TIM_OC4_SetConfig+0xb8>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d109      	bne.n	800682c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800681e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006820:	683b      	ldr	r3, [r7, #0]
 8006822:	695b      	ldr	r3, [r3, #20]
 8006824:	019b      	lsls	r3, r3, #6
 8006826:	697a      	ldr	r2, [r7, #20]
 8006828:	4313      	orrs	r3, r2
 800682a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	685a      	ldr	r2, [r3, #4]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	693a      	ldr	r2, [r7, #16]
 8006844:	621a      	str	r2, [r3, #32]
}
 8006846:	bf00      	nop
 8006848:	371c      	adds	r7, #28
 800684a:	46bd      	mov	sp, r7
 800684c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006850:	4770      	bx	lr
 8006852:	bf00      	nop
 8006854:	40012c00 	.word	0x40012c00
 8006858:	40014000 	.word	0x40014000
 800685c:	40014400 	.word	0x40014400

08006860 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006860:	b480      	push	{r7}
 8006862:	b087      	sub	sp, #28
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
 8006868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800688e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006892:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	68fa      	ldr	r2, [r7, #12]
 800689a:	4313      	orrs	r3, r2
 800689c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80068a4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80068a6:	683b      	ldr	r3, [r7, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	041b      	lsls	r3, r3, #16
 80068ac:	693a      	ldr	r2, [r7, #16]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	4a13      	ldr	r2, [pc, #76]	; (8006904 <TIM_OC5_SetConfig+0xa4>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d007      	beq.n	80068ca <TIM_OC5_SetConfig+0x6a>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	4a12      	ldr	r2, [pc, #72]	; (8006908 <TIM_OC5_SetConfig+0xa8>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d003      	beq.n	80068ca <TIM_OC5_SetConfig+0x6a>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	4a11      	ldr	r2, [pc, #68]	; (800690c <TIM_OC5_SetConfig+0xac>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d109      	bne.n	80068de <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068d0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	021b      	lsls	r3, r3, #8
 80068d8:	697a      	ldr	r2, [r7, #20]
 80068da:	4313      	orrs	r3, r2
 80068dc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	697a      	ldr	r2, [r7, #20]
 80068e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	621a      	str	r2, [r3, #32]
}
 80068f8:	bf00      	nop
 80068fa:	371c      	adds	r7, #28
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr
 8006904:	40012c00 	.word	0x40012c00
 8006908:	40014000 	.word	0x40014000
 800690c:	40014400 	.word	0x40014400

08006910 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	6a1b      	ldr	r3, [r3, #32]
 8006924:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006936:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800693e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	021b      	lsls	r3, r3, #8
 800694a:	68fa      	ldr	r2, [r7, #12]
 800694c:	4313      	orrs	r3, r2
 800694e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006956:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	051b      	lsls	r3, r3, #20
 800695e:	693a      	ldr	r2, [r7, #16]
 8006960:	4313      	orrs	r3, r2
 8006962:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	4a14      	ldr	r2, [pc, #80]	; (80069b8 <TIM_OC6_SetConfig+0xa8>)
 8006968:	4293      	cmp	r3, r2
 800696a:	d007      	beq.n	800697c <TIM_OC6_SetConfig+0x6c>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a13      	ldr	r2, [pc, #76]	; (80069bc <TIM_OC6_SetConfig+0xac>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_OC6_SetConfig+0x6c>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a12      	ldr	r2, [pc, #72]	; (80069c0 <TIM_OC6_SetConfig+0xb0>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d109      	bne.n	8006990 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006982:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	695b      	ldr	r3, [r3, #20]
 8006988:	029b      	lsls	r3, r3, #10
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	685a      	ldr	r2, [r3, #4]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	693a      	ldr	r2, [r7, #16]
 80069a8:	621a      	str	r2, [r3, #32]
}
 80069aa:	bf00      	nop
 80069ac:	371c      	adds	r7, #28
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40012c00 	.word	0x40012c00
 80069bc:	40014000 	.word	0x40014000
 80069c0:	40014400 	.word	0x40014400

080069c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b087      	sub	sp, #28
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	6a1b      	ldr	r3, [r3, #32]
 80069da:	f023 0201 	bic.w	r2, r3, #1
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80069ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	011b      	lsls	r3, r3, #4
 80069f4:	693a      	ldr	r2, [r7, #16]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	f023 030a 	bic.w	r3, r3, #10
 8006a00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a02:	697a      	ldr	r2, [r7, #20]
 8006a04:	68bb      	ldr	r3, [r7, #8]
 8006a06:	4313      	orrs	r3, r2
 8006a08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	697a      	ldr	r2, [r7, #20]
 8006a14:	621a      	str	r2, [r3, #32]
}
 8006a16:	bf00      	nop
 8006a18:	371c      	adds	r7, #28
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a20:	4770      	bx	lr

08006a22 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a22:	b480      	push	{r7}
 8006a24:	b087      	sub	sp, #28
 8006a26:	af00      	add	r7, sp, #0
 8006a28:	60f8      	str	r0, [r7, #12]
 8006a2a:	60b9      	str	r1, [r7, #8]
 8006a2c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6a1b      	ldr	r3, [r3, #32]
 8006a32:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6a1b      	ldr	r3, [r3, #32]
 8006a38:	f023 0210 	bic.w	r2, r3, #16
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a4c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	031b      	lsls	r3, r3, #12
 8006a52:	693a      	ldr	r2, [r7, #16]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006a5e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	693a      	ldr	r2, [r7, #16]
 8006a6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	621a      	str	r2, [r3, #32]
}
 8006a76:	bf00      	nop
 8006a78:	371c      	adds	r7, #28
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr

08006a82 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a82:	b480      	push	{r7}
 8006a84:	b085      	sub	sp, #20
 8006a86:	af00      	add	r7, sp, #0
 8006a88:	6078      	str	r0, [r7, #4]
 8006a8a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a9a:	683a      	ldr	r2, [r7, #0]
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f043 0307 	orr.w	r3, r3, #7
 8006aa4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	68fa      	ldr	r2, [r7, #12]
 8006aaa:	609a      	str	r2, [r3, #8]
}
 8006aac:	bf00      	nop
 8006aae:	3714      	adds	r7, #20
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b087      	sub	sp, #28
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	60f8      	str	r0, [r7, #12]
 8006ac0:	60b9      	str	r1, [r7, #8]
 8006ac2:	607a      	str	r2, [r7, #4]
 8006ac4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ad2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	021a      	lsls	r2, r3, #8
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	431a      	orrs	r2, r3
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	4313      	orrs	r3, r2
 8006ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	697a      	ldr	r2, [r7, #20]
 8006aea:	609a      	str	r2, [r3, #8]
}
 8006aec:	bf00      	nop
 8006aee:	371c      	adds	r7, #28
 8006af0:	46bd      	mov	sp, r7
 8006af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af6:	4770      	bx	lr

08006af8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006af8:	b480      	push	{r7}
 8006afa:	b085      	sub	sp, #20
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
 8006b00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d101      	bne.n	8006b10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	e04f      	b.n	8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a21      	ldr	r2, [pc, #132]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d108      	bne.n	8006b4c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006b40:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	68fa      	ldr	r2, [r7, #12]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a14      	ldr	r2, [pc, #80]	; (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d009      	beq.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b78:	d004      	beq.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a10      	ldr	r2, [pc, #64]	; (8006bc0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d10c      	bne.n	8006b9e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b84:	68bb      	ldr	r3, [r7, #8]
 8006b86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b8a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	68ba      	ldr	r2, [r7, #8]
 8006b92:	4313      	orrs	r3, r2
 8006b94:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	68ba      	ldr	r2, [r7, #8]
 8006b9c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006bae:	2300      	movs	r3, #0
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40012c00 	.word	0x40012c00
 8006bc0:	40014000 	.word	0x40014000

08006bc4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b083      	sub	sp, #12
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bcc:	bf00      	nop
 8006bce:	370c      	adds	r7, #12
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr

08006bd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006be0:	bf00      	nop
 8006be2:	370c      	adds	r7, #12
 8006be4:	46bd      	mov	sp, r7
 8006be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bea:	4770      	bx	lr

08006bec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006bf4:	bf00      	nop
 8006bf6:	370c      	adds	r7, #12
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfe:	4770      	bx	lr

08006c00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d101      	bne.n	8006c12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e040      	b.n	8006c94 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f7fa feb8 	bl	8001998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2224      	movs	r2, #36	; 0x24
 8006c2c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f022 0201 	bic.w	r2, r2, #1
 8006c3c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d002      	beq.n	8006c4c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f000 fade 	bl	8007208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 f8af 	bl	8006db0 <UART_SetConfig>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d101      	bne.n	8006c5c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006c58:	2301      	movs	r3, #1
 8006c5a:	e01b      	b.n	8006c94 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685a      	ldr	r2, [r3, #4]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c6a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c7a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f042 0201 	orr.w	r2, r2, #1
 8006c8a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fb5d 	bl	800734c <UART_CheckIdleState>
 8006c92:	4603      	mov	r3, r0
}
 8006c94:	4618      	mov	r0, r3
 8006c96:	3708      	adds	r7, #8
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	bd80      	pop	{r7, pc}

08006c9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08a      	sub	sp, #40	; 0x28
 8006ca0:	af02      	add	r7, sp, #8
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	60b9      	str	r1, [r7, #8]
 8006ca6:	603b      	str	r3, [r7, #0]
 8006ca8:	4613      	mov	r3, r2
 8006caa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cb0:	2b20      	cmp	r3, #32
 8006cb2:	d178      	bne.n	8006da6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d002      	beq.n	8006cc0 <HAL_UART_Transmit+0x24>
 8006cba:	88fb      	ldrh	r3, [r7, #6]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e071      	b.n	8006da8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	2221      	movs	r2, #33	; 0x21
 8006cd0:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cd2:	f7fb f891 	bl	8001df8 <HAL_GetTick>
 8006cd6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	88fa      	ldrh	r2, [r7, #6]
 8006cdc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	88fa      	ldrh	r2, [r7, #6]
 8006ce4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cf0:	d108      	bne.n	8006d04 <HAL_UART_Transmit+0x68>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d104      	bne.n	8006d04 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	61bb      	str	r3, [r7, #24]
 8006d02:	e003      	b.n	8006d0c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d0c:	e030      	b.n	8006d70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	9300      	str	r3, [sp, #0]
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	2200      	movs	r2, #0
 8006d16:	2180      	movs	r1, #128	; 0x80
 8006d18:	68f8      	ldr	r0, [r7, #12]
 8006d1a:	f000 fbbf 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d004      	beq.n	8006d2e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2220      	movs	r2, #32
 8006d28:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006d2a:	2303      	movs	r3, #3
 8006d2c:	e03c      	b.n	8006da8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006d2e:	69fb      	ldr	r3, [r7, #28]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d10b      	bne.n	8006d4c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	881a      	ldrh	r2, [r3, #0]
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d40:	b292      	uxth	r2, r2
 8006d42:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d44:	69bb      	ldr	r3, [r7, #24]
 8006d46:	3302      	adds	r3, #2
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	e008      	b.n	8006d5e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d4c:	69fb      	ldr	r3, [r7, #28]
 8006d4e:	781a      	ldrb	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	b292      	uxth	r2, r2
 8006d56:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d58:	69fb      	ldr	r3, [r7, #28]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d64:	b29b      	uxth	r3, r3
 8006d66:	3b01      	subs	r3, #1
 8006d68:	b29a      	uxth	r2, r3
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d1c8      	bne.n	8006d0e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d7c:	683b      	ldr	r3, [r7, #0]
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	2200      	movs	r2, #0
 8006d84:	2140      	movs	r1, #64	; 0x40
 8006d86:	68f8      	ldr	r0, [r7, #12]
 8006d88:	f000 fb88 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d004      	beq.n	8006d9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	2220      	movs	r2, #32
 8006d96:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006d98:	2303      	movs	r3, #3
 8006d9a:	e005      	b.n	8006da8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	e000      	b.n	8006da8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006da6:	2302      	movs	r3, #2
  }
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3720      	adds	r7, #32
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006db0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006db4:	b08a      	sub	sp, #40	; 0x28
 8006db6:	af00      	add	r7, sp, #0
 8006db8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	689a      	ldr	r2, [r3, #8]
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	431a      	orrs	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	695b      	ldr	r3, [r3, #20]
 8006dce:	431a      	orrs	r2, r3
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	69db      	ldr	r3, [r3, #28]
 8006dd4:	4313      	orrs	r3, r2
 8006dd6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4bb4      	ldr	r3, [pc, #720]	; (80070b0 <UART_SetConfig+0x300>)
 8006de0:	4013      	ands	r3, r2
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	6812      	ldr	r2, [r2, #0]
 8006de6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006de8:	430b      	orrs	r3, r1
 8006dea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	68da      	ldr	r2, [r3, #12]
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	430a      	orrs	r2, r1
 8006e00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4aa9      	ldr	r2, [pc, #676]	; (80070b4 <UART_SetConfig+0x304>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d004      	beq.n	8006e1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e18:	4313      	orrs	r3, r2
 8006e1a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e2c:	430a      	orrs	r2, r1
 8006e2e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4aa0      	ldr	r2, [pc, #640]	; (80070b8 <UART_SetConfig+0x308>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d126      	bne.n	8006e88 <UART_SetConfig+0xd8>
 8006e3a:	4ba0      	ldr	r3, [pc, #640]	; (80070bc <UART_SetConfig+0x30c>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e40:	f003 0303 	and.w	r3, r3, #3
 8006e44:	2b03      	cmp	r3, #3
 8006e46:	d81b      	bhi.n	8006e80 <UART_SetConfig+0xd0>
 8006e48:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <UART_SetConfig+0xa0>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e61 	.word	0x08006e61
 8006e54:	08006e71 	.word	0x08006e71
 8006e58:	08006e69 	.word	0x08006e69
 8006e5c:	08006e79 	.word	0x08006e79
 8006e60:	2301      	movs	r3, #1
 8006e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e66:	e080      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e6e:	e07c      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e76:	e078      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e7e:	e074      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006e86:	e070      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a8c      	ldr	r2, [pc, #560]	; (80070c0 <UART_SetConfig+0x310>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d138      	bne.n	8006f04 <UART_SetConfig+0x154>
 8006e92:	4b8a      	ldr	r3, [pc, #552]	; (80070bc <UART_SetConfig+0x30c>)
 8006e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	2b0c      	cmp	r3, #12
 8006e9e:	d82d      	bhi.n	8006efc <UART_SetConfig+0x14c>
 8006ea0:	a201      	add	r2, pc, #4	; (adr r2, 8006ea8 <UART_SetConfig+0xf8>)
 8006ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ea6:	bf00      	nop
 8006ea8:	08006edd 	.word	0x08006edd
 8006eac:	08006efd 	.word	0x08006efd
 8006eb0:	08006efd 	.word	0x08006efd
 8006eb4:	08006efd 	.word	0x08006efd
 8006eb8:	08006eed 	.word	0x08006eed
 8006ebc:	08006efd 	.word	0x08006efd
 8006ec0:	08006efd 	.word	0x08006efd
 8006ec4:	08006efd 	.word	0x08006efd
 8006ec8:	08006ee5 	.word	0x08006ee5
 8006ecc:	08006efd 	.word	0x08006efd
 8006ed0:	08006efd 	.word	0x08006efd
 8006ed4:	08006efd 	.word	0x08006efd
 8006ed8:	08006ef5 	.word	0x08006ef5
 8006edc:	2300      	movs	r3, #0
 8006ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ee2:	e042      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006ee4:	2302      	movs	r3, #2
 8006ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006eea:	e03e      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006eec:	2304      	movs	r3, #4
 8006eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ef2:	e03a      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006ef4:	2308      	movs	r3, #8
 8006ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006efa:	e036      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006efc:	2310      	movs	r3, #16
 8006efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f02:	e032      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	4a6a      	ldr	r2, [pc, #424]	; (80070b4 <UART_SetConfig+0x304>)
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	d12a      	bne.n	8006f64 <UART_SetConfig+0x1b4>
 8006f0e:	4b6b      	ldr	r3, [pc, #428]	; (80070bc <UART_SetConfig+0x30c>)
 8006f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f14:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006f18:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f1c:	d01a      	beq.n	8006f54 <UART_SetConfig+0x1a4>
 8006f1e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f22:	d81b      	bhi.n	8006f5c <UART_SetConfig+0x1ac>
 8006f24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f28:	d00c      	beq.n	8006f44 <UART_SetConfig+0x194>
 8006f2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f2e:	d815      	bhi.n	8006f5c <UART_SetConfig+0x1ac>
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d003      	beq.n	8006f3c <UART_SetConfig+0x18c>
 8006f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f38:	d008      	beq.n	8006f4c <UART_SetConfig+0x19c>
 8006f3a:	e00f      	b.n	8006f5c <UART_SetConfig+0x1ac>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f42:	e012      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f44:	2302      	movs	r3, #2
 8006f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f4a:	e00e      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f4c:	2304      	movs	r3, #4
 8006f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f52:	e00a      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f54:	2308      	movs	r3, #8
 8006f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f5a:	e006      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f5c:	2310      	movs	r3, #16
 8006f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006f62:	e002      	b.n	8006f6a <UART_SetConfig+0x1ba>
 8006f64:	2310      	movs	r3, #16
 8006f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4a51      	ldr	r2, [pc, #324]	; (80070b4 <UART_SetConfig+0x304>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d17a      	bne.n	800706a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f74:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006f78:	2b08      	cmp	r3, #8
 8006f7a:	d824      	bhi.n	8006fc6 <UART_SetConfig+0x216>
 8006f7c:	a201      	add	r2, pc, #4	; (adr r2, 8006f84 <UART_SetConfig+0x1d4>)
 8006f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f82:	bf00      	nop
 8006f84:	08006fa9 	.word	0x08006fa9
 8006f88:	08006fc7 	.word	0x08006fc7
 8006f8c:	08006fb1 	.word	0x08006fb1
 8006f90:	08006fc7 	.word	0x08006fc7
 8006f94:	08006fb7 	.word	0x08006fb7
 8006f98:	08006fc7 	.word	0x08006fc7
 8006f9c:	08006fc7 	.word	0x08006fc7
 8006fa0:	08006fc7 	.word	0x08006fc7
 8006fa4:	08006fbf 	.word	0x08006fbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fa8:	f7fe fb80 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8006fac:	61f8      	str	r0, [r7, #28]
        break;
 8006fae:	e010      	b.n	8006fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006fb0:	4b44      	ldr	r3, [pc, #272]	; (80070c4 <UART_SetConfig+0x314>)
 8006fb2:	61fb      	str	r3, [r7, #28]
        break;
 8006fb4:	e00d      	b.n	8006fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006fb6:	f7fe fae1 	bl	800557c <HAL_RCC_GetSysClockFreq>
 8006fba:	61f8      	str	r0, [r7, #28]
        break;
 8006fbc:	e009      	b.n	8006fd2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006fbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fc2:	61fb      	str	r3, [r7, #28]
        break;
 8006fc4:	e005      	b.n	8006fd2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006fd0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fd2:	69fb      	ldr	r3, [r7, #28]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8107 	beq.w	80071e8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	685a      	ldr	r2, [r3, #4]
 8006fde:	4613      	mov	r3, r2
 8006fe0:	005b      	lsls	r3, r3, #1
 8006fe2:	4413      	add	r3, r2
 8006fe4:	69fa      	ldr	r2, [r7, #28]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d305      	bcc.n	8006ff6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006ff0:	69fa      	ldr	r2, [r7, #28]
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d903      	bls.n	8006ffe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006ffc:	e0f4      	b.n	80071e8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	2200      	movs	r2, #0
 8007002:	461c      	mov	r4, r3
 8007004:	4615      	mov	r5, r2
 8007006:	f04f 0200 	mov.w	r2, #0
 800700a:	f04f 0300 	mov.w	r3, #0
 800700e:	022b      	lsls	r3, r5, #8
 8007010:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007014:	0222      	lsls	r2, r4, #8
 8007016:	68f9      	ldr	r1, [r7, #12]
 8007018:	6849      	ldr	r1, [r1, #4]
 800701a:	0849      	lsrs	r1, r1, #1
 800701c:	2000      	movs	r0, #0
 800701e:	4688      	mov	r8, r1
 8007020:	4681      	mov	r9, r0
 8007022:	eb12 0a08 	adds.w	sl, r2, r8
 8007026:	eb43 0b09 	adc.w	fp, r3, r9
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	603b      	str	r3, [r7, #0]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007038:	4650      	mov	r0, sl
 800703a:	4659      	mov	r1, fp
 800703c:	f7f9 fdb4 	bl	8000ba8 <__aeabi_uldivmod>
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	4613      	mov	r3, r2
 8007046:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800704e:	d308      	bcc.n	8007062 <UART_SetConfig+0x2b2>
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007056:	d204      	bcs.n	8007062 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	69ba      	ldr	r2, [r7, #24]
 800705e:	60da      	str	r2, [r3, #12]
 8007060:	e0c2      	b.n	80071e8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8007062:	2301      	movs	r3, #1
 8007064:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007068:	e0be      	b.n	80071e8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	69db      	ldr	r3, [r3, #28]
 800706e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007072:	d16a      	bne.n	800714a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007074:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007078:	2b08      	cmp	r3, #8
 800707a:	d834      	bhi.n	80070e6 <UART_SetConfig+0x336>
 800707c:	a201      	add	r2, pc, #4	; (adr r2, 8007084 <UART_SetConfig+0x2d4>)
 800707e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007082:	bf00      	nop
 8007084:	080070a9 	.word	0x080070a9
 8007088:	080070c9 	.word	0x080070c9
 800708c:	080070d1 	.word	0x080070d1
 8007090:	080070e7 	.word	0x080070e7
 8007094:	080070d7 	.word	0x080070d7
 8007098:	080070e7 	.word	0x080070e7
 800709c:	080070e7 	.word	0x080070e7
 80070a0:	080070e7 	.word	0x080070e7
 80070a4:	080070df 	.word	0x080070df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070a8:	f7fe fb00 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 80070ac:	61f8      	str	r0, [r7, #28]
        break;
 80070ae:	e020      	b.n	80070f2 <UART_SetConfig+0x342>
 80070b0:	efff69f3 	.word	0xefff69f3
 80070b4:	40008000 	.word	0x40008000
 80070b8:	40013800 	.word	0x40013800
 80070bc:	40021000 	.word	0x40021000
 80070c0:	40004400 	.word	0x40004400
 80070c4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fe fb06 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 80070cc:	61f8      	str	r0, [r7, #28]
        break;
 80070ce:	e010      	b.n	80070f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d0:	4b4c      	ldr	r3, [pc, #304]	; (8007204 <UART_SetConfig+0x454>)
 80070d2:	61fb      	str	r3, [r7, #28]
        break;
 80070d4:	e00d      	b.n	80070f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fe fa51 	bl	800557c <HAL_RCC_GetSysClockFreq>
 80070da:	61f8      	str	r0, [r7, #28]
        break;
 80070dc:	e009      	b.n	80070f2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	61fb      	str	r3, [r7, #28]
        break;
 80070e4:	e005      	b.n	80070f2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80070f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d077      	beq.n	80071e8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80070f8:	69fb      	ldr	r3, [r7, #28]
 80070fa:	005a      	lsls	r2, r3, #1
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	085b      	lsrs	r3, r3, #1
 8007102:	441a      	add	r2, r3
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	fbb2 f3f3 	udiv	r3, r2, r3
 800710c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800710e:	69bb      	ldr	r3, [r7, #24]
 8007110:	2b0f      	cmp	r3, #15
 8007112:	d916      	bls.n	8007142 <UART_SetConfig+0x392>
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800711a:	d212      	bcs.n	8007142 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800711c:	69bb      	ldr	r3, [r7, #24]
 800711e:	b29b      	uxth	r3, r3
 8007120:	f023 030f 	bic.w	r3, r3, #15
 8007124:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	085b      	lsrs	r3, r3, #1
 800712a:	b29b      	uxth	r3, r3
 800712c:	f003 0307 	and.w	r3, r3, #7
 8007130:	b29a      	uxth	r2, r3
 8007132:	8afb      	ldrh	r3, [r7, #22]
 8007134:	4313      	orrs	r3, r2
 8007136:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	8afa      	ldrh	r2, [r7, #22]
 800713e:	60da      	str	r2, [r3, #12]
 8007140:	e052      	b.n	80071e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007148:	e04e      	b.n	80071e8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800714a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800714e:	2b08      	cmp	r3, #8
 8007150:	d827      	bhi.n	80071a2 <UART_SetConfig+0x3f2>
 8007152:	a201      	add	r2, pc, #4	; (adr r2, 8007158 <UART_SetConfig+0x3a8>)
 8007154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007158:	0800717d 	.word	0x0800717d
 800715c:	08007185 	.word	0x08007185
 8007160:	0800718d 	.word	0x0800718d
 8007164:	080071a3 	.word	0x080071a3
 8007168:	08007193 	.word	0x08007193
 800716c:	080071a3 	.word	0x080071a3
 8007170:	080071a3 	.word	0x080071a3
 8007174:	080071a3 	.word	0x080071a3
 8007178:	0800719b 	.word	0x0800719b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800717c:	f7fe fa96 	bl	80056ac <HAL_RCC_GetPCLK1Freq>
 8007180:	61f8      	str	r0, [r7, #28]
        break;
 8007182:	e014      	b.n	80071ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007184:	f7fe faa8 	bl	80056d8 <HAL_RCC_GetPCLK2Freq>
 8007188:	61f8      	str	r0, [r7, #28]
        break;
 800718a:	e010      	b.n	80071ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800718c:	4b1d      	ldr	r3, [pc, #116]	; (8007204 <UART_SetConfig+0x454>)
 800718e:	61fb      	str	r3, [r7, #28]
        break;
 8007190:	e00d      	b.n	80071ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007192:	f7fe f9f3 	bl	800557c <HAL_RCC_GetSysClockFreq>
 8007196:	61f8      	str	r0, [r7, #28]
        break;
 8007198:	e009      	b.n	80071ae <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800719e:	61fb      	str	r3, [r7, #28]
        break;
 80071a0:	e005      	b.n	80071ae <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80071a2:	2300      	movs	r3, #0
 80071a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80071ac:	bf00      	nop
    }

    if (pclk != 0U)
 80071ae:	69fb      	ldr	r3, [r7, #28]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d019      	beq.n	80071e8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	085a      	lsrs	r2, r3, #1
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80071c6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071c8:	69bb      	ldr	r3, [r7, #24]
 80071ca:	2b0f      	cmp	r3, #15
 80071cc:	d909      	bls.n	80071e2 <UART_SetConfig+0x432>
 80071ce:	69bb      	ldr	r3, [r7, #24]
 80071d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071d4:	d205      	bcs.n	80071e2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071d6:	69bb      	ldr	r3, [r7, #24]
 80071d8:	b29a      	uxth	r2, r3
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	60da      	str	r2, [r3, #12]
 80071e0:	e002      	b.n	80071e8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80071f4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3728      	adds	r7, #40	; 0x28
 80071fc:	46bd      	mov	sp, r7
 80071fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007202:	bf00      	nop
 8007204:	00f42400 	.word	0x00f42400

08007208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007208:	b480      	push	{r7}
 800720a:	b083      	sub	sp, #12
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007214:	f003 0308 	and.w	r3, r3, #8
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00a      	beq.n	8007232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	430a      	orrs	r2, r1
 8007230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	430a      	orrs	r2, r1
 8007252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d00a      	beq.n	8007276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	430a      	orrs	r2, r1
 8007274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800727a:	f003 0304 	and.w	r3, r3, #4
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00a      	beq.n	8007298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	430a      	orrs	r2, r1
 8007296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800729c:	f003 0310 	and.w	r3, r3, #16
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d00a      	beq.n	80072ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	430a      	orrs	r2, r1
 80072b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072be:	f003 0320 	and.w	r3, r3, #32
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00a      	beq.n	80072dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	430a      	orrs	r2, r1
 80072da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d01a      	beq.n	800731e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	430a      	orrs	r2, r1
 80072fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007302:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007306:	d10a      	bne.n	800731e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	430a      	orrs	r2, r1
 800731c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	605a      	str	r2, [r3, #4]
  }
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b098      	sub	sp, #96	; 0x60
 8007350:	af02      	add	r7, sp, #8
 8007352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800735c:	f7fa fd4c 	bl	8001df8 <HAL_GetTick>
 8007360:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0308 	and.w	r3, r3, #8
 800736c:	2b08      	cmp	r3, #8
 800736e:	d12e      	bne.n	80073ce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007370:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007374:	9300      	str	r3, [sp, #0]
 8007376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007378:	2200      	movs	r2, #0
 800737a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f88c 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 8007384:	4603      	mov	r3, r0
 8007386:	2b00      	cmp	r3, #0
 8007388:	d021      	beq.n	80073ce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007392:	e853 3f00 	ldrex	r3, [r3]
 8007396:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800739a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800739e:	653b      	str	r3, [r7, #80]	; 0x50
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073a8:	647b      	str	r3, [r7, #68]	; 0x44
 80073aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80073ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80073b0:	e841 2300 	strex	r3, r2, [r1]
 80073b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80073b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d1e6      	bne.n	800738a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2220      	movs	r2, #32
 80073c0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e062      	b.n	8007494 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f003 0304 	and.w	r3, r3, #4
 80073d8:	2b04      	cmp	r3, #4
 80073da:	d149      	bne.n	8007470 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073e0:	9300      	str	r3, [sp, #0]
 80073e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e4:	2200      	movs	r2, #0
 80073e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f856 	bl	800749c <UART_WaitOnFlagUntilTimeout>
 80073f0:	4603      	mov	r3, r0
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d03c      	beq.n	8007470 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073fe:	e853 3f00 	ldrex	r3, [r3]
 8007402:	623b      	str	r3, [r7, #32]
   return(result);
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800740a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	461a      	mov	r2, r3
 8007412:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007414:	633b      	str	r3, [r7, #48]	; 0x30
 8007416:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007418:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800741a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800741c:	e841 2300 	strex	r3, r2, [r1]
 8007420:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007424:	2b00      	cmp	r3, #0
 8007426:	d1e6      	bne.n	80073f6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	3308      	adds	r3, #8
 800742e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007430:	693b      	ldr	r3, [r7, #16]
 8007432:	e853 3f00 	ldrex	r3, [r3]
 8007436:	60fb      	str	r3, [r7, #12]
   return(result);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f023 0301 	bic.w	r3, r3, #1
 800743e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3308      	adds	r3, #8
 8007446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007448:	61fa      	str	r2, [r7, #28]
 800744a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744c:	69b9      	ldr	r1, [r7, #24]
 800744e:	69fa      	ldr	r2, [r7, #28]
 8007450:	e841 2300 	strex	r3, r2, [r1]
 8007454:	617b      	str	r3, [r7, #20]
   return(result);
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1e5      	bne.n	8007428 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2220      	movs	r2, #32
 8007460:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	e011      	b.n	8007494 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2220      	movs	r2, #32
 8007474:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2220      	movs	r2, #32
 800747a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3758      	adds	r7, #88	; 0x58
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	603b      	str	r3, [r7, #0]
 80074a8:	4613      	mov	r3, r2
 80074aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074ac:	e049      	b.n	8007542 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d045      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074b6:	f7fa fc9f 	bl	8001df8 <HAL_GetTick>
 80074ba:	4602      	mov	r2, r0
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	1ad3      	subs	r3, r2, r3
 80074c0:	69ba      	ldr	r2, [r7, #24]
 80074c2:	429a      	cmp	r2, r3
 80074c4:	d302      	bcc.n	80074cc <UART_WaitOnFlagUntilTimeout+0x30>
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d101      	bne.n	80074d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e048      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f003 0304 	and.w	r3, r3, #4
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d031      	beq.n	8007542 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	69db      	ldr	r3, [r3, #28]
 80074e4:	f003 0308 	and.w	r3, r3, #8
 80074e8:	2b08      	cmp	r3, #8
 80074ea:	d110      	bne.n	800750e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2208      	movs	r2, #8
 80074f2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80074f4:	68f8      	ldr	r0, [r7, #12]
 80074f6:	f000 f838 	bl	800756a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2208      	movs	r2, #8
 80074fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e029      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	69db      	ldr	r3, [r3, #28]
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007518:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800751c:	d111      	bne.n	8007542 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007526:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 f81e 	bl	800756a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2220      	movs	r2, #32
 8007532:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e00f      	b.n	8007562 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	69da      	ldr	r2, [r3, #28]
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	4013      	ands	r3, r2
 800754c:	68ba      	ldr	r2, [r7, #8]
 800754e:	429a      	cmp	r2, r3
 8007550:	bf0c      	ite	eq
 8007552:	2301      	moveq	r3, #1
 8007554:	2300      	movne	r3, #0
 8007556:	b2db      	uxtb	r3, r3
 8007558:	461a      	mov	r2, r3
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	429a      	cmp	r2, r3
 800755e:	d0a6      	beq.n	80074ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800756a:	b480      	push	{r7}
 800756c:	b095      	sub	sp, #84	; 0x54
 800756e:	af00      	add	r7, sp, #0
 8007570:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007582:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007586:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007590:	643b      	str	r3, [r7, #64]	; 0x40
 8007592:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800759e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3308      	adds	r3, #8
 80075aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	e853 3f00 	ldrex	r3, [r3]
 80075b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	f023 0301 	bic.w	r3, r3, #1
 80075ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	3308      	adds	r3, #8
 80075c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80075c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80075c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80075ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075cc:	e841 2300 	strex	r3, r2, [r1]
 80075d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1e5      	bne.n	80075a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d118      	bne.n	8007612 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	e853 3f00 	ldrex	r3, [r3]
 80075ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	f023 0310 	bic.w	r3, r3, #16
 80075f4:	647b      	str	r3, [r7, #68]	; 0x44
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	461a      	mov	r2, r3
 80075fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80075fe:	61bb      	str	r3, [r7, #24]
 8007600:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	613b      	str	r3, [r7, #16]
   return(result);
 800760c:	693b      	ldr	r3, [r7, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e6      	bne.n	80075e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	2220      	movs	r2, #32
 8007616:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2200      	movs	r2, #0
 800761e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007626:	bf00      	nop
 8007628:	3754      	adds	r7, #84	; 0x54
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <__cvt>:
 8007632:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007636:	ec55 4b10 	vmov	r4, r5, d0
 800763a:	2d00      	cmp	r5, #0
 800763c:	460e      	mov	r6, r1
 800763e:	4619      	mov	r1, r3
 8007640:	462b      	mov	r3, r5
 8007642:	bfbb      	ittet	lt
 8007644:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007648:	461d      	movlt	r5, r3
 800764a:	2300      	movge	r3, #0
 800764c:	232d      	movlt	r3, #45	; 0x2d
 800764e:	700b      	strb	r3, [r1, #0]
 8007650:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007652:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007656:	4691      	mov	r9, r2
 8007658:	f023 0820 	bic.w	r8, r3, #32
 800765c:	bfbc      	itt	lt
 800765e:	4622      	movlt	r2, r4
 8007660:	4614      	movlt	r4, r2
 8007662:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007666:	d005      	beq.n	8007674 <__cvt+0x42>
 8007668:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800766c:	d100      	bne.n	8007670 <__cvt+0x3e>
 800766e:	3601      	adds	r6, #1
 8007670:	2102      	movs	r1, #2
 8007672:	e000      	b.n	8007676 <__cvt+0x44>
 8007674:	2103      	movs	r1, #3
 8007676:	ab03      	add	r3, sp, #12
 8007678:	9301      	str	r3, [sp, #4]
 800767a:	ab02      	add	r3, sp, #8
 800767c:	9300      	str	r3, [sp, #0]
 800767e:	ec45 4b10 	vmov	d0, r4, r5
 8007682:	4653      	mov	r3, sl
 8007684:	4632      	mov	r2, r6
 8007686:	f000 fe6b 	bl	8008360 <_dtoa_r>
 800768a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800768e:	4607      	mov	r7, r0
 8007690:	d102      	bne.n	8007698 <__cvt+0x66>
 8007692:	f019 0f01 	tst.w	r9, #1
 8007696:	d022      	beq.n	80076de <__cvt+0xac>
 8007698:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800769c:	eb07 0906 	add.w	r9, r7, r6
 80076a0:	d110      	bne.n	80076c4 <__cvt+0x92>
 80076a2:	783b      	ldrb	r3, [r7, #0]
 80076a4:	2b30      	cmp	r3, #48	; 0x30
 80076a6:	d10a      	bne.n	80076be <__cvt+0x8c>
 80076a8:	2200      	movs	r2, #0
 80076aa:	2300      	movs	r3, #0
 80076ac:	4620      	mov	r0, r4
 80076ae:	4629      	mov	r1, r5
 80076b0:	f7f9 fa0a 	bl	8000ac8 <__aeabi_dcmpeq>
 80076b4:	b918      	cbnz	r0, 80076be <__cvt+0x8c>
 80076b6:	f1c6 0601 	rsb	r6, r6, #1
 80076ba:	f8ca 6000 	str.w	r6, [sl]
 80076be:	f8da 3000 	ldr.w	r3, [sl]
 80076c2:	4499      	add	r9, r3
 80076c4:	2200      	movs	r2, #0
 80076c6:	2300      	movs	r3, #0
 80076c8:	4620      	mov	r0, r4
 80076ca:	4629      	mov	r1, r5
 80076cc:	f7f9 f9fc 	bl	8000ac8 <__aeabi_dcmpeq>
 80076d0:	b108      	cbz	r0, 80076d6 <__cvt+0xa4>
 80076d2:	f8cd 900c 	str.w	r9, [sp, #12]
 80076d6:	2230      	movs	r2, #48	; 0x30
 80076d8:	9b03      	ldr	r3, [sp, #12]
 80076da:	454b      	cmp	r3, r9
 80076dc:	d307      	bcc.n	80076ee <__cvt+0xbc>
 80076de:	9b03      	ldr	r3, [sp, #12]
 80076e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076e2:	1bdb      	subs	r3, r3, r7
 80076e4:	4638      	mov	r0, r7
 80076e6:	6013      	str	r3, [r2, #0]
 80076e8:	b004      	add	sp, #16
 80076ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ee:	1c59      	adds	r1, r3, #1
 80076f0:	9103      	str	r1, [sp, #12]
 80076f2:	701a      	strb	r2, [r3, #0]
 80076f4:	e7f0      	b.n	80076d8 <__cvt+0xa6>

080076f6 <__exponent>:
 80076f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076f8:	4603      	mov	r3, r0
 80076fa:	2900      	cmp	r1, #0
 80076fc:	bfb8      	it	lt
 80076fe:	4249      	neglt	r1, r1
 8007700:	f803 2b02 	strb.w	r2, [r3], #2
 8007704:	bfb4      	ite	lt
 8007706:	222d      	movlt	r2, #45	; 0x2d
 8007708:	222b      	movge	r2, #43	; 0x2b
 800770a:	2909      	cmp	r1, #9
 800770c:	7042      	strb	r2, [r0, #1]
 800770e:	dd2a      	ble.n	8007766 <__exponent+0x70>
 8007710:	f10d 0207 	add.w	r2, sp, #7
 8007714:	4617      	mov	r7, r2
 8007716:	260a      	movs	r6, #10
 8007718:	4694      	mov	ip, r2
 800771a:	fb91 f5f6 	sdiv	r5, r1, r6
 800771e:	fb06 1415 	mls	r4, r6, r5, r1
 8007722:	3430      	adds	r4, #48	; 0x30
 8007724:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8007728:	460c      	mov	r4, r1
 800772a:	2c63      	cmp	r4, #99	; 0x63
 800772c:	f102 32ff 	add.w	r2, r2, #4294967295
 8007730:	4629      	mov	r1, r5
 8007732:	dcf1      	bgt.n	8007718 <__exponent+0x22>
 8007734:	3130      	adds	r1, #48	; 0x30
 8007736:	f1ac 0402 	sub.w	r4, ip, #2
 800773a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800773e:	1c41      	adds	r1, r0, #1
 8007740:	4622      	mov	r2, r4
 8007742:	42ba      	cmp	r2, r7
 8007744:	d30a      	bcc.n	800775c <__exponent+0x66>
 8007746:	f10d 0209 	add.w	r2, sp, #9
 800774a:	eba2 020c 	sub.w	r2, r2, ip
 800774e:	42bc      	cmp	r4, r7
 8007750:	bf88      	it	hi
 8007752:	2200      	movhi	r2, #0
 8007754:	4413      	add	r3, r2
 8007756:	1a18      	subs	r0, r3, r0
 8007758:	b003      	add	sp, #12
 800775a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800775c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8007760:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007764:	e7ed      	b.n	8007742 <__exponent+0x4c>
 8007766:	2330      	movs	r3, #48	; 0x30
 8007768:	3130      	adds	r1, #48	; 0x30
 800776a:	7083      	strb	r3, [r0, #2]
 800776c:	70c1      	strb	r1, [r0, #3]
 800776e:	1d03      	adds	r3, r0, #4
 8007770:	e7f1      	b.n	8007756 <__exponent+0x60>
	...

08007774 <_printf_float>:
 8007774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007778:	ed2d 8b02 	vpush	{d8}
 800777c:	b08d      	sub	sp, #52	; 0x34
 800777e:	460c      	mov	r4, r1
 8007780:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007784:	4616      	mov	r6, r2
 8007786:	461f      	mov	r7, r3
 8007788:	4605      	mov	r5, r0
 800778a:	f000 fce7 	bl	800815c <_localeconv_r>
 800778e:	f8d0 a000 	ldr.w	sl, [r0]
 8007792:	4650      	mov	r0, sl
 8007794:	f7f8 fd6c 	bl	8000270 <strlen>
 8007798:	2300      	movs	r3, #0
 800779a:	930a      	str	r3, [sp, #40]	; 0x28
 800779c:	6823      	ldr	r3, [r4, #0]
 800779e:	9305      	str	r3, [sp, #20]
 80077a0:	f8d8 3000 	ldr.w	r3, [r8]
 80077a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077a8:	3307      	adds	r3, #7
 80077aa:	f023 0307 	bic.w	r3, r3, #7
 80077ae:	f103 0208 	add.w	r2, r3, #8
 80077b2:	f8c8 2000 	str.w	r2, [r8]
 80077b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80077ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077be:	9307      	str	r3, [sp, #28]
 80077c0:	f8cd 8018 	str.w	r8, [sp, #24]
 80077c4:	ee08 0a10 	vmov	s16, r0
 80077c8:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80077cc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077d0:	4b9e      	ldr	r3, [pc, #632]	; (8007a4c <_printf_float+0x2d8>)
 80077d2:	f04f 32ff 	mov.w	r2, #4294967295
 80077d6:	f7f9 f9a9 	bl	8000b2c <__aeabi_dcmpun>
 80077da:	bb88      	cbnz	r0, 8007840 <_printf_float+0xcc>
 80077dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077e0:	4b9a      	ldr	r3, [pc, #616]	; (8007a4c <_printf_float+0x2d8>)
 80077e2:	f04f 32ff 	mov.w	r2, #4294967295
 80077e6:	f7f9 f983 	bl	8000af0 <__aeabi_dcmple>
 80077ea:	bb48      	cbnz	r0, 8007840 <_printf_float+0xcc>
 80077ec:	2200      	movs	r2, #0
 80077ee:	2300      	movs	r3, #0
 80077f0:	4640      	mov	r0, r8
 80077f2:	4649      	mov	r1, r9
 80077f4:	f7f9 f972 	bl	8000adc <__aeabi_dcmplt>
 80077f8:	b110      	cbz	r0, 8007800 <_printf_float+0x8c>
 80077fa:	232d      	movs	r3, #45	; 0x2d
 80077fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007800:	4a93      	ldr	r2, [pc, #588]	; (8007a50 <_printf_float+0x2dc>)
 8007802:	4b94      	ldr	r3, [pc, #592]	; (8007a54 <_printf_float+0x2e0>)
 8007804:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007808:	bf94      	ite	ls
 800780a:	4690      	movls	r8, r2
 800780c:	4698      	movhi	r8, r3
 800780e:	2303      	movs	r3, #3
 8007810:	6123      	str	r3, [r4, #16]
 8007812:	9b05      	ldr	r3, [sp, #20]
 8007814:	f023 0304 	bic.w	r3, r3, #4
 8007818:	6023      	str	r3, [r4, #0]
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	9700      	str	r7, [sp, #0]
 8007820:	4633      	mov	r3, r6
 8007822:	aa0b      	add	r2, sp, #44	; 0x2c
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 f9da 	bl	8007be0 <_printf_common>
 800782c:	3001      	adds	r0, #1
 800782e:	f040 8090 	bne.w	8007952 <_printf_float+0x1de>
 8007832:	f04f 30ff 	mov.w	r0, #4294967295
 8007836:	b00d      	add	sp, #52	; 0x34
 8007838:	ecbd 8b02 	vpop	{d8}
 800783c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007840:	4642      	mov	r2, r8
 8007842:	464b      	mov	r3, r9
 8007844:	4640      	mov	r0, r8
 8007846:	4649      	mov	r1, r9
 8007848:	f7f9 f970 	bl	8000b2c <__aeabi_dcmpun>
 800784c:	b140      	cbz	r0, 8007860 <_printf_float+0xec>
 800784e:	464b      	mov	r3, r9
 8007850:	2b00      	cmp	r3, #0
 8007852:	bfbc      	itt	lt
 8007854:	232d      	movlt	r3, #45	; 0x2d
 8007856:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800785a:	4a7f      	ldr	r2, [pc, #508]	; (8007a58 <_printf_float+0x2e4>)
 800785c:	4b7f      	ldr	r3, [pc, #508]	; (8007a5c <_printf_float+0x2e8>)
 800785e:	e7d1      	b.n	8007804 <_printf_float+0x90>
 8007860:	6863      	ldr	r3, [r4, #4]
 8007862:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007866:	9206      	str	r2, [sp, #24]
 8007868:	1c5a      	adds	r2, r3, #1
 800786a:	d13f      	bne.n	80078ec <_printf_float+0x178>
 800786c:	2306      	movs	r3, #6
 800786e:	6063      	str	r3, [r4, #4]
 8007870:	9b05      	ldr	r3, [sp, #20]
 8007872:	6861      	ldr	r1, [r4, #4]
 8007874:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007878:	2300      	movs	r3, #0
 800787a:	9303      	str	r3, [sp, #12]
 800787c:	ab0a      	add	r3, sp, #40	; 0x28
 800787e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007882:	ab09      	add	r3, sp, #36	; 0x24
 8007884:	ec49 8b10 	vmov	d0, r8, r9
 8007888:	9300      	str	r3, [sp, #0]
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007890:	4628      	mov	r0, r5
 8007892:	f7ff fece 	bl	8007632 <__cvt>
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	9909      	ldr	r1, [sp, #36]	; 0x24
 800789a:	2b47      	cmp	r3, #71	; 0x47
 800789c:	4680      	mov	r8, r0
 800789e:	d108      	bne.n	80078b2 <_printf_float+0x13e>
 80078a0:	1cc8      	adds	r0, r1, #3
 80078a2:	db02      	blt.n	80078aa <_printf_float+0x136>
 80078a4:	6863      	ldr	r3, [r4, #4]
 80078a6:	4299      	cmp	r1, r3
 80078a8:	dd41      	ble.n	800792e <_printf_float+0x1ba>
 80078aa:	f1ab 0302 	sub.w	r3, fp, #2
 80078ae:	fa5f fb83 	uxtb.w	fp, r3
 80078b2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078b6:	d820      	bhi.n	80078fa <_printf_float+0x186>
 80078b8:	3901      	subs	r1, #1
 80078ba:	465a      	mov	r2, fp
 80078bc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078c0:	9109      	str	r1, [sp, #36]	; 0x24
 80078c2:	f7ff ff18 	bl	80076f6 <__exponent>
 80078c6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078c8:	1813      	adds	r3, r2, r0
 80078ca:	2a01      	cmp	r2, #1
 80078cc:	4681      	mov	r9, r0
 80078ce:	6123      	str	r3, [r4, #16]
 80078d0:	dc02      	bgt.n	80078d8 <_printf_float+0x164>
 80078d2:	6822      	ldr	r2, [r4, #0]
 80078d4:	07d2      	lsls	r2, r2, #31
 80078d6:	d501      	bpl.n	80078dc <_printf_float+0x168>
 80078d8:	3301      	adds	r3, #1
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d09c      	beq.n	800781e <_printf_float+0xaa>
 80078e4:	232d      	movs	r3, #45	; 0x2d
 80078e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80078ea:	e798      	b.n	800781e <_printf_float+0xaa>
 80078ec:	9a06      	ldr	r2, [sp, #24]
 80078ee:	2a47      	cmp	r2, #71	; 0x47
 80078f0:	d1be      	bne.n	8007870 <_printf_float+0xfc>
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d1bc      	bne.n	8007870 <_printf_float+0xfc>
 80078f6:	2301      	movs	r3, #1
 80078f8:	e7b9      	b.n	800786e <_printf_float+0xfa>
 80078fa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80078fe:	d118      	bne.n	8007932 <_printf_float+0x1be>
 8007900:	2900      	cmp	r1, #0
 8007902:	6863      	ldr	r3, [r4, #4]
 8007904:	dd0b      	ble.n	800791e <_printf_float+0x1aa>
 8007906:	6121      	str	r1, [r4, #16]
 8007908:	b913      	cbnz	r3, 8007910 <_printf_float+0x19c>
 800790a:	6822      	ldr	r2, [r4, #0]
 800790c:	07d0      	lsls	r0, r2, #31
 800790e:	d502      	bpl.n	8007916 <_printf_float+0x1a2>
 8007910:	3301      	adds	r3, #1
 8007912:	440b      	add	r3, r1
 8007914:	6123      	str	r3, [r4, #16]
 8007916:	65a1      	str	r1, [r4, #88]	; 0x58
 8007918:	f04f 0900 	mov.w	r9, #0
 800791c:	e7de      	b.n	80078dc <_printf_float+0x168>
 800791e:	b913      	cbnz	r3, 8007926 <_printf_float+0x1b2>
 8007920:	6822      	ldr	r2, [r4, #0]
 8007922:	07d2      	lsls	r2, r2, #31
 8007924:	d501      	bpl.n	800792a <_printf_float+0x1b6>
 8007926:	3302      	adds	r3, #2
 8007928:	e7f4      	b.n	8007914 <_printf_float+0x1a0>
 800792a:	2301      	movs	r3, #1
 800792c:	e7f2      	b.n	8007914 <_printf_float+0x1a0>
 800792e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007934:	4299      	cmp	r1, r3
 8007936:	db05      	blt.n	8007944 <_printf_float+0x1d0>
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	6121      	str	r1, [r4, #16]
 800793c:	07d8      	lsls	r0, r3, #31
 800793e:	d5ea      	bpl.n	8007916 <_printf_float+0x1a2>
 8007940:	1c4b      	adds	r3, r1, #1
 8007942:	e7e7      	b.n	8007914 <_printf_float+0x1a0>
 8007944:	2900      	cmp	r1, #0
 8007946:	bfd4      	ite	le
 8007948:	f1c1 0202 	rsble	r2, r1, #2
 800794c:	2201      	movgt	r2, #1
 800794e:	4413      	add	r3, r2
 8007950:	e7e0      	b.n	8007914 <_printf_float+0x1a0>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	055a      	lsls	r2, r3, #21
 8007956:	d407      	bmi.n	8007968 <_printf_float+0x1f4>
 8007958:	6923      	ldr	r3, [r4, #16]
 800795a:	4642      	mov	r2, r8
 800795c:	4631      	mov	r1, r6
 800795e:	4628      	mov	r0, r5
 8007960:	47b8      	blx	r7
 8007962:	3001      	adds	r0, #1
 8007964:	d12c      	bne.n	80079c0 <_printf_float+0x24c>
 8007966:	e764      	b.n	8007832 <_printf_float+0xbe>
 8007968:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800796c:	f240 80e0 	bls.w	8007b30 <_printf_float+0x3bc>
 8007970:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007974:	2200      	movs	r2, #0
 8007976:	2300      	movs	r3, #0
 8007978:	f7f9 f8a6 	bl	8000ac8 <__aeabi_dcmpeq>
 800797c:	2800      	cmp	r0, #0
 800797e:	d034      	beq.n	80079ea <_printf_float+0x276>
 8007980:	4a37      	ldr	r2, [pc, #220]	; (8007a60 <_printf_float+0x2ec>)
 8007982:	2301      	movs	r3, #1
 8007984:	4631      	mov	r1, r6
 8007986:	4628      	mov	r0, r5
 8007988:	47b8      	blx	r7
 800798a:	3001      	adds	r0, #1
 800798c:	f43f af51 	beq.w	8007832 <_printf_float+0xbe>
 8007990:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007994:	429a      	cmp	r2, r3
 8007996:	db02      	blt.n	800799e <_printf_float+0x22a>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07d8      	lsls	r0, r3, #31
 800799c:	d510      	bpl.n	80079c0 <_printf_float+0x24c>
 800799e:	ee18 3a10 	vmov	r3, s16
 80079a2:	4652      	mov	r2, sl
 80079a4:	4631      	mov	r1, r6
 80079a6:	4628      	mov	r0, r5
 80079a8:	47b8      	blx	r7
 80079aa:	3001      	adds	r0, #1
 80079ac:	f43f af41 	beq.w	8007832 <_printf_float+0xbe>
 80079b0:	f04f 0800 	mov.w	r8, #0
 80079b4:	f104 091a 	add.w	r9, r4, #26
 80079b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079ba:	3b01      	subs	r3, #1
 80079bc:	4543      	cmp	r3, r8
 80079be:	dc09      	bgt.n	80079d4 <_printf_float+0x260>
 80079c0:	6823      	ldr	r3, [r4, #0]
 80079c2:	079b      	lsls	r3, r3, #30
 80079c4:	f100 8107 	bmi.w	8007bd6 <_printf_float+0x462>
 80079c8:	68e0      	ldr	r0, [r4, #12]
 80079ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079cc:	4298      	cmp	r0, r3
 80079ce:	bfb8      	it	lt
 80079d0:	4618      	movlt	r0, r3
 80079d2:	e730      	b.n	8007836 <_printf_float+0xc2>
 80079d4:	2301      	movs	r3, #1
 80079d6:	464a      	mov	r2, r9
 80079d8:	4631      	mov	r1, r6
 80079da:	4628      	mov	r0, r5
 80079dc:	47b8      	blx	r7
 80079de:	3001      	adds	r0, #1
 80079e0:	f43f af27 	beq.w	8007832 <_printf_float+0xbe>
 80079e4:	f108 0801 	add.w	r8, r8, #1
 80079e8:	e7e6      	b.n	80079b8 <_printf_float+0x244>
 80079ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	dc39      	bgt.n	8007a64 <_printf_float+0x2f0>
 80079f0:	4a1b      	ldr	r2, [pc, #108]	; (8007a60 <_printf_float+0x2ec>)
 80079f2:	2301      	movs	r3, #1
 80079f4:	4631      	mov	r1, r6
 80079f6:	4628      	mov	r0, r5
 80079f8:	47b8      	blx	r7
 80079fa:	3001      	adds	r0, #1
 80079fc:	f43f af19 	beq.w	8007832 <_printf_float+0xbe>
 8007a00:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a04:	4313      	orrs	r3, r2
 8007a06:	d102      	bne.n	8007a0e <_printf_float+0x29a>
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	07d9      	lsls	r1, r3, #31
 8007a0c:	d5d8      	bpl.n	80079c0 <_printf_float+0x24c>
 8007a0e:	ee18 3a10 	vmov	r3, s16
 8007a12:	4652      	mov	r2, sl
 8007a14:	4631      	mov	r1, r6
 8007a16:	4628      	mov	r0, r5
 8007a18:	47b8      	blx	r7
 8007a1a:	3001      	adds	r0, #1
 8007a1c:	f43f af09 	beq.w	8007832 <_printf_float+0xbe>
 8007a20:	f04f 0900 	mov.w	r9, #0
 8007a24:	f104 0a1a 	add.w	sl, r4, #26
 8007a28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a2a:	425b      	negs	r3, r3
 8007a2c:	454b      	cmp	r3, r9
 8007a2e:	dc01      	bgt.n	8007a34 <_printf_float+0x2c0>
 8007a30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a32:	e792      	b.n	800795a <_printf_float+0x1e6>
 8007a34:	2301      	movs	r3, #1
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f aef7 	beq.w	8007832 <_printf_float+0xbe>
 8007a44:	f109 0901 	add.w	r9, r9, #1
 8007a48:	e7ee      	b.n	8007a28 <_printf_float+0x2b4>
 8007a4a:	bf00      	nop
 8007a4c:	7fefffff 	.word	0x7fefffff
 8007a50:	0800a3e0 	.word	0x0800a3e0
 8007a54:	0800a3e4 	.word	0x0800a3e4
 8007a58:	0800a3e8 	.word	0x0800a3e8
 8007a5c:	0800a3ec 	.word	0x0800a3ec
 8007a60:	0800a3f0 	.word	0x0800a3f0
 8007a64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a66:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	bfa8      	it	ge
 8007a6c:	461a      	movge	r2, r3
 8007a6e:	2a00      	cmp	r2, #0
 8007a70:	4691      	mov	r9, r2
 8007a72:	dc37      	bgt.n	8007ae4 <_printf_float+0x370>
 8007a74:	f04f 0b00 	mov.w	fp, #0
 8007a78:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007a7c:	f104 021a 	add.w	r2, r4, #26
 8007a80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a82:	9305      	str	r3, [sp, #20]
 8007a84:	eba3 0309 	sub.w	r3, r3, r9
 8007a88:	455b      	cmp	r3, fp
 8007a8a:	dc33      	bgt.n	8007af4 <_printf_float+0x380>
 8007a8c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a90:	429a      	cmp	r2, r3
 8007a92:	db3b      	blt.n	8007b0c <_printf_float+0x398>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	07da      	lsls	r2, r3, #31
 8007a98:	d438      	bmi.n	8007b0c <_printf_float+0x398>
 8007a9a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007a9e:	eba2 0903 	sub.w	r9, r2, r3
 8007aa2:	9b05      	ldr	r3, [sp, #20]
 8007aa4:	1ad2      	subs	r2, r2, r3
 8007aa6:	4591      	cmp	r9, r2
 8007aa8:	bfa8      	it	ge
 8007aaa:	4691      	movge	r9, r2
 8007aac:	f1b9 0f00 	cmp.w	r9, #0
 8007ab0:	dc35      	bgt.n	8007b1e <_printf_float+0x3aa>
 8007ab2:	f04f 0800 	mov.w	r8, #0
 8007ab6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aba:	f104 0a1a 	add.w	sl, r4, #26
 8007abe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ac2:	1a9b      	subs	r3, r3, r2
 8007ac4:	eba3 0309 	sub.w	r3, r3, r9
 8007ac8:	4543      	cmp	r3, r8
 8007aca:	f77f af79 	ble.w	80079c0 <_printf_float+0x24c>
 8007ace:	2301      	movs	r3, #1
 8007ad0:	4652      	mov	r2, sl
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4628      	mov	r0, r5
 8007ad6:	47b8      	blx	r7
 8007ad8:	3001      	adds	r0, #1
 8007ada:	f43f aeaa 	beq.w	8007832 <_printf_float+0xbe>
 8007ade:	f108 0801 	add.w	r8, r8, #1
 8007ae2:	e7ec      	b.n	8007abe <_printf_float+0x34a>
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	4631      	mov	r1, r6
 8007ae8:	4642      	mov	r2, r8
 8007aea:	4628      	mov	r0, r5
 8007aec:	47b8      	blx	r7
 8007aee:	3001      	adds	r0, #1
 8007af0:	d1c0      	bne.n	8007a74 <_printf_float+0x300>
 8007af2:	e69e      	b.n	8007832 <_printf_float+0xbe>
 8007af4:	2301      	movs	r3, #1
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	9205      	str	r2, [sp, #20]
 8007afc:	47b8      	blx	r7
 8007afe:	3001      	adds	r0, #1
 8007b00:	f43f ae97 	beq.w	8007832 <_printf_float+0xbe>
 8007b04:	9a05      	ldr	r2, [sp, #20]
 8007b06:	f10b 0b01 	add.w	fp, fp, #1
 8007b0a:	e7b9      	b.n	8007a80 <_printf_float+0x30c>
 8007b0c:	ee18 3a10 	vmov	r3, s16
 8007b10:	4652      	mov	r2, sl
 8007b12:	4631      	mov	r1, r6
 8007b14:	4628      	mov	r0, r5
 8007b16:	47b8      	blx	r7
 8007b18:	3001      	adds	r0, #1
 8007b1a:	d1be      	bne.n	8007a9a <_printf_float+0x326>
 8007b1c:	e689      	b.n	8007832 <_printf_float+0xbe>
 8007b1e:	9a05      	ldr	r2, [sp, #20]
 8007b20:	464b      	mov	r3, r9
 8007b22:	4442      	add	r2, r8
 8007b24:	4631      	mov	r1, r6
 8007b26:	4628      	mov	r0, r5
 8007b28:	47b8      	blx	r7
 8007b2a:	3001      	adds	r0, #1
 8007b2c:	d1c1      	bne.n	8007ab2 <_printf_float+0x33e>
 8007b2e:	e680      	b.n	8007832 <_printf_float+0xbe>
 8007b30:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b32:	2a01      	cmp	r2, #1
 8007b34:	dc01      	bgt.n	8007b3a <_printf_float+0x3c6>
 8007b36:	07db      	lsls	r3, r3, #31
 8007b38:	d53a      	bpl.n	8007bb0 <_printf_float+0x43c>
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	4642      	mov	r2, r8
 8007b3e:	4631      	mov	r1, r6
 8007b40:	4628      	mov	r0, r5
 8007b42:	47b8      	blx	r7
 8007b44:	3001      	adds	r0, #1
 8007b46:	f43f ae74 	beq.w	8007832 <_printf_float+0xbe>
 8007b4a:	ee18 3a10 	vmov	r3, s16
 8007b4e:	4652      	mov	r2, sl
 8007b50:	4631      	mov	r1, r6
 8007b52:	4628      	mov	r0, r5
 8007b54:	47b8      	blx	r7
 8007b56:	3001      	adds	r0, #1
 8007b58:	f43f ae6b 	beq.w	8007832 <_printf_float+0xbe>
 8007b5c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b60:	2200      	movs	r2, #0
 8007b62:	2300      	movs	r3, #0
 8007b64:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007b68:	f7f8 ffae 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b6c:	b9d8      	cbnz	r0, 8007ba6 <_printf_float+0x432>
 8007b6e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007b72:	f108 0201 	add.w	r2, r8, #1
 8007b76:	4631      	mov	r1, r6
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b8      	blx	r7
 8007b7c:	3001      	adds	r0, #1
 8007b7e:	d10e      	bne.n	8007b9e <_printf_float+0x42a>
 8007b80:	e657      	b.n	8007832 <_printf_float+0xbe>
 8007b82:	2301      	movs	r3, #1
 8007b84:	4652      	mov	r2, sl
 8007b86:	4631      	mov	r1, r6
 8007b88:	4628      	mov	r0, r5
 8007b8a:	47b8      	blx	r7
 8007b8c:	3001      	adds	r0, #1
 8007b8e:	f43f ae50 	beq.w	8007832 <_printf_float+0xbe>
 8007b92:	f108 0801 	add.w	r8, r8, #1
 8007b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b98:	3b01      	subs	r3, #1
 8007b9a:	4543      	cmp	r3, r8
 8007b9c:	dcf1      	bgt.n	8007b82 <_printf_float+0x40e>
 8007b9e:	464b      	mov	r3, r9
 8007ba0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ba4:	e6da      	b.n	800795c <_printf_float+0x1e8>
 8007ba6:	f04f 0800 	mov.w	r8, #0
 8007baa:	f104 0a1a 	add.w	sl, r4, #26
 8007bae:	e7f2      	b.n	8007b96 <_printf_float+0x422>
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	4642      	mov	r2, r8
 8007bb4:	e7df      	b.n	8007b76 <_printf_float+0x402>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	464a      	mov	r2, r9
 8007bba:	4631      	mov	r1, r6
 8007bbc:	4628      	mov	r0, r5
 8007bbe:	47b8      	blx	r7
 8007bc0:	3001      	adds	r0, #1
 8007bc2:	f43f ae36 	beq.w	8007832 <_printf_float+0xbe>
 8007bc6:	f108 0801 	add.w	r8, r8, #1
 8007bca:	68e3      	ldr	r3, [r4, #12]
 8007bcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bce:	1a5b      	subs	r3, r3, r1
 8007bd0:	4543      	cmp	r3, r8
 8007bd2:	dcf0      	bgt.n	8007bb6 <_printf_float+0x442>
 8007bd4:	e6f8      	b.n	80079c8 <_printf_float+0x254>
 8007bd6:	f04f 0800 	mov.w	r8, #0
 8007bda:	f104 0919 	add.w	r9, r4, #25
 8007bde:	e7f4      	b.n	8007bca <_printf_float+0x456>

08007be0 <_printf_common>:
 8007be0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007be4:	4616      	mov	r6, r2
 8007be6:	4699      	mov	r9, r3
 8007be8:	688a      	ldr	r2, [r1, #8]
 8007bea:	690b      	ldr	r3, [r1, #16]
 8007bec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	bfb8      	it	lt
 8007bf4:	4613      	movlt	r3, r2
 8007bf6:	6033      	str	r3, [r6, #0]
 8007bf8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007bfc:	4607      	mov	r7, r0
 8007bfe:	460c      	mov	r4, r1
 8007c00:	b10a      	cbz	r2, 8007c06 <_printf_common+0x26>
 8007c02:	3301      	adds	r3, #1
 8007c04:	6033      	str	r3, [r6, #0]
 8007c06:	6823      	ldr	r3, [r4, #0]
 8007c08:	0699      	lsls	r1, r3, #26
 8007c0a:	bf42      	ittt	mi
 8007c0c:	6833      	ldrmi	r3, [r6, #0]
 8007c0e:	3302      	addmi	r3, #2
 8007c10:	6033      	strmi	r3, [r6, #0]
 8007c12:	6825      	ldr	r5, [r4, #0]
 8007c14:	f015 0506 	ands.w	r5, r5, #6
 8007c18:	d106      	bne.n	8007c28 <_printf_common+0x48>
 8007c1a:	f104 0a19 	add.w	sl, r4, #25
 8007c1e:	68e3      	ldr	r3, [r4, #12]
 8007c20:	6832      	ldr	r2, [r6, #0]
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	42ab      	cmp	r3, r5
 8007c26:	dc26      	bgt.n	8007c76 <_printf_common+0x96>
 8007c28:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c2c:	1e13      	subs	r3, r2, #0
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	bf18      	it	ne
 8007c32:	2301      	movne	r3, #1
 8007c34:	0692      	lsls	r2, r2, #26
 8007c36:	d42b      	bmi.n	8007c90 <_printf_common+0xb0>
 8007c38:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c3c:	4649      	mov	r1, r9
 8007c3e:	4638      	mov	r0, r7
 8007c40:	47c0      	blx	r8
 8007c42:	3001      	adds	r0, #1
 8007c44:	d01e      	beq.n	8007c84 <_printf_common+0xa4>
 8007c46:	6823      	ldr	r3, [r4, #0]
 8007c48:	6922      	ldr	r2, [r4, #16]
 8007c4a:	f003 0306 	and.w	r3, r3, #6
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	bf02      	ittt	eq
 8007c52:	68e5      	ldreq	r5, [r4, #12]
 8007c54:	6833      	ldreq	r3, [r6, #0]
 8007c56:	1aed      	subeq	r5, r5, r3
 8007c58:	68a3      	ldr	r3, [r4, #8]
 8007c5a:	bf0c      	ite	eq
 8007c5c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c60:	2500      	movne	r5, #0
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bfc4      	itt	gt
 8007c66:	1a9b      	subgt	r3, r3, r2
 8007c68:	18ed      	addgt	r5, r5, r3
 8007c6a:	2600      	movs	r6, #0
 8007c6c:	341a      	adds	r4, #26
 8007c6e:	42b5      	cmp	r5, r6
 8007c70:	d11a      	bne.n	8007ca8 <_printf_common+0xc8>
 8007c72:	2000      	movs	r0, #0
 8007c74:	e008      	b.n	8007c88 <_printf_common+0xa8>
 8007c76:	2301      	movs	r3, #1
 8007c78:	4652      	mov	r2, sl
 8007c7a:	4649      	mov	r1, r9
 8007c7c:	4638      	mov	r0, r7
 8007c7e:	47c0      	blx	r8
 8007c80:	3001      	adds	r0, #1
 8007c82:	d103      	bne.n	8007c8c <_printf_common+0xac>
 8007c84:	f04f 30ff 	mov.w	r0, #4294967295
 8007c88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c8c:	3501      	adds	r5, #1
 8007c8e:	e7c6      	b.n	8007c1e <_printf_common+0x3e>
 8007c90:	18e1      	adds	r1, r4, r3
 8007c92:	1c5a      	adds	r2, r3, #1
 8007c94:	2030      	movs	r0, #48	; 0x30
 8007c96:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007c9a:	4422      	add	r2, r4
 8007c9c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ca0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ca4:	3302      	adds	r3, #2
 8007ca6:	e7c7      	b.n	8007c38 <_printf_common+0x58>
 8007ca8:	2301      	movs	r3, #1
 8007caa:	4622      	mov	r2, r4
 8007cac:	4649      	mov	r1, r9
 8007cae:	4638      	mov	r0, r7
 8007cb0:	47c0      	blx	r8
 8007cb2:	3001      	adds	r0, #1
 8007cb4:	d0e6      	beq.n	8007c84 <_printf_common+0xa4>
 8007cb6:	3601      	adds	r6, #1
 8007cb8:	e7d9      	b.n	8007c6e <_printf_common+0x8e>
	...

08007cbc <_printf_i>:
 8007cbc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cc0:	7e0f      	ldrb	r7, [r1, #24]
 8007cc2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007cc4:	2f78      	cmp	r7, #120	; 0x78
 8007cc6:	4691      	mov	r9, r2
 8007cc8:	4680      	mov	r8, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	469a      	mov	sl, r3
 8007cce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cd2:	d807      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cd4:	2f62      	cmp	r7, #98	; 0x62
 8007cd6:	d80a      	bhi.n	8007cee <_printf_i+0x32>
 8007cd8:	2f00      	cmp	r7, #0
 8007cda:	f000 80d4 	beq.w	8007e86 <_printf_i+0x1ca>
 8007cde:	2f58      	cmp	r7, #88	; 0x58
 8007ce0:	f000 80c0 	beq.w	8007e64 <_printf_i+0x1a8>
 8007ce4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ce8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007cec:	e03a      	b.n	8007d64 <_printf_i+0xa8>
 8007cee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007cf2:	2b15      	cmp	r3, #21
 8007cf4:	d8f6      	bhi.n	8007ce4 <_printf_i+0x28>
 8007cf6:	a101      	add	r1, pc, #4	; (adr r1, 8007cfc <_printf_i+0x40>)
 8007cf8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007cfc:	08007d55 	.word	0x08007d55
 8007d00:	08007d69 	.word	0x08007d69
 8007d04:	08007ce5 	.word	0x08007ce5
 8007d08:	08007ce5 	.word	0x08007ce5
 8007d0c:	08007ce5 	.word	0x08007ce5
 8007d10:	08007ce5 	.word	0x08007ce5
 8007d14:	08007d69 	.word	0x08007d69
 8007d18:	08007ce5 	.word	0x08007ce5
 8007d1c:	08007ce5 	.word	0x08007ce5
 8007d20:	08007ce5 	.word	0x08007ce5
 8007d24:	08007ce5 	.word	0x08007ce5
 8007d28:	08007e6d 	.word	0x08007e6d
 8007d2c:	08007d95 	.word	0x08007d95
 8007d30:	08007e27 	.word	0x08007e27
 8007d34:	08007ce5 	.word	0x08007ce5
 8007d38:	08007ce5 	.word	0x08007ce5
 8007d3c:	08007e8f 	.word	0x08007e8f
 8007d40:	08007ce5 	.word	0x08007ce5
 8007d44:	08007d95 	.word	0x08007d95
 8007d48:	08007ce5 	.word	0x08007ce5
 8007d4c:	08007ce5 	.word	0x08007ce5
 8007d50:	08007e2f 	.word	0x08007e2f
 8007d54:	682b      	ldr	r3, [r5, #0]
 8007d56:	1d1a      	adds	r2, r3, #4
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	602a      	str	r2, [r5, #0]
 8007d5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d64:	2301      	movs	r3, #1
 8007d66:	e09f      	b.n	8007ea8 <_printf_i+0x1ec>
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	682b      	ldr	r3, [r5, #0]
 8007d6c:	0607      	lsls	r7, r0, #24
 8007d6e:	f103 0104 	add.w	r1, r3, #4
 8007d72:	6029      	str	r1, [r5, #0]
 8007d74:	d501      	bpl.n	8007d7a <_printf_i+0xbe>
 8007d76:	681e      	ldr	r6, [r3, #0]
 8007d78:	e003      	b.n	8007d82 <_printf_i+0xc6>
 8007d7a:	0646      	lsls	r6, r0, #25
 8007d7c:	d5fb      	bpl.n	8007d76 <_printf_i+0xba>
 8007d7e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007d82:	2e00      	cmp	r6, #0
 8007d84:	da03      	bge.n	8007d8e <_printf_i+0xd2>
 8007d86:	232d      	movs	r3, #45	; 0x2d
 8007d88:	4276      	negs	r6, r6
 8007d8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d8e:	485a      	ldr	r0, [pc, #360]	; (8007ef8 <_printf_i+0x23c>)
 8007d90:	230a      	movs	r3, #10
 8007d92:	e012      	b.n	8007dba <_printf_i+0xfe>
 8007d94:	682b      	ldr	r3, [r5, #0]
 8007d96:	6820      	ldr	r0, [r4, #0]
 8007d98:	1d19      	adds	r1, r3, #4
 8007d9a:	6029      	str	r1, [r5, #0]
 8007d9c:	0605      	lsls	r5, r0, #24
 8007d9e:	d501      	bpl.n	8007da4 <_printf_i+0xe8>
 8007da0:	681e      	ldr	r6, [r3, #0]
 8007da2:	e002      	b.n	8007daa <_printf_i+0xee>
 8007da4:	0641      	lsls	r1, r0, #25
 8007da6:	d5fb      	bpl.n	8007da0 <_printf_i+0xe4>
 8007da8:	881e      	ldrh	r6, [r3, #0]
 8007daa:	4853      	ldr	r0, [pc, #332]	; (8007ef8 <_printf_i+0x23c>)
 8007dac:	2f6f      	cmp	r7, #111	; 0x6f
 8007dae:	bf0c      	ite	eq
 8007db0:	2308      	moveq	r3, #8
 8007db2:	230a      	movne	r3, #10
 8007db4:	2100      	movs	r1, #0
 8007db6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dba:	6865      	ldr	r5, [r4, #4]
 8007dbc:	60a5      	str	r5, [r4, #8]
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	bfa2      	ittt	ge
 8007dc2:	6821      	ldrge	r1, [r4, #0]
 8007dc4:	f021 0104 	bicge.w	r1, r1, #4
 8007dc8:	6021      	strge	r1, [r4, #0]
 8007dca:	b90e      	cbnz	r6, 8007dd0 <_printf_i+0x114>
 8007dcc:	2d00      	cmp	r5, #0
 8007dce:	d04b      	beq.n	8007e68 <_printf_i+0x1ac>
 8007dd0:	4615      	mov	r5, r2
 8007dd2:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dd6:	fb03 6711 	mls	r7, r3, r1, r6
 8007dda:	5dc7      	ldrb	r7, [r0, r7]
 8007ddc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007de0:	4637      	mov	r7, r6
 8007de2:	42bb      	cmp	r3, r7
 8007de4:	460e      	mov	r6, r1
 8007de6:	d9f4      	bls.n	8007dd2 <_printf_i+0x116>
 8007de8:	2b08      	cmp	r3, #8
 8007dea:	d10b      	bne.n	8007e04 <_printf_i+0x148>
 8007dec:	6823      	ldr	r3, [r4, #0]
 8007dee:	07de      	lsls	r6, r3, #31
 8007df0:	d508      	bpl.n	8007e04 <_printf_i+0x148>
 8007df2:	6923      	ldr	r3, [r4, #16]
 8007df4:	6861      	ldr	r1, [r4, #4]
 8007df6:	4299      	cmp	r1, r3
 8007df8:	bfde      	ittt	le
 8007dfa:	2330      	movle	r3, #48	; 0x30
 8007dfc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e00:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e04:	1b52      	subs	r2, r2, r5
 8007e06:	6122      	str	r2, [r4, #16]
 8007e08:	f8cd a000 	str.w	sl, [sp]
 8007e0c:	464b      	mov	r3, r9
 8007e0e:	aa03      	add	r2, sp, #12
 8007e10:	4621      	mov	r1, r4
 8007e12:	4640      	mov	r0, r8
 8007e14:	f7ff fee4 	bl	8007be0 <_printf_common>
 8007e18:	3001      	adds	r0, #1
 8007e1a:	d14a      	bne.n	8007eb2 <_printf_i+0x1f6>
 8007e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e20:	b004      	add	sp, #16
 8007e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e26:	6823      	ldr	r3, [r4, #0]
 8007e28:	f043 0320 	orr.w	r3, r3, #32
 8007e2c:	6023      	str	r3, [r4, #0]
 8007e2e:	4833      	ldr	r0, [pc, #204]	; (8007efc <_printf_i+0x240>)
 8007e30:	2778      	movs	r7, #120	; 0x78
 8007e32:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	6829      	ldr	r1, [r5, #0]
 8007e3a:	061f      	lsls	r7, r3, #24
 8007e3c:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e40:	d402      	bmi.n	8007e48 <_printf_i+0x18c>
 8007e42:	065f      	lsls	r7, r3, #25
 8007e44:	bf48      	it	mi
 8007e46:	b2b6      	uxthmi	r6, r6
 8007e48:	07df      	lsls	r7, r3, #31
 8007e4a:	bf48      	it	mi
 8007e4c:	f043 0320 	orrmi.w	r3, r3, #32
 8007e50:	6029      	str	r1, [r5, #0]
 8007e52:	bf48      	it	mi
 8007e54:	6023      	strmi	r3, [r4, #0]
 8007e56:	b91e      	cbnz	r6, 8007e60 <_printf_i+0x1a4>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	f023 0320 	bic.w	r3, r3, #32
 8007e5e:	6023      	str	r3, [r4, #0]
 8007e60:	2310      	movs	r3, #16
 8007e62:	e7a7      	b.n	8007db4 <_printf_i+0xf8>
 8007e64:	4824      	ldr	r0, [pc, #144]	; (8007ef8 <_printf_i+0x23c>)
 8007e66:	e7e4      	b.n	8007e32 <_printf_i+0x176>
 8007e68:	4615      	mov	r5, r2
 8007e6a:	e7bd      	b.n	8007de8 <_printf_i+0x12c>
 8007e6c:	682b      	ldr	r3, [r5, #0]
 8007e6e:	6826      	ldr	r6, [r4, #0]
 8007e70:	6961      	ldr	r1, [r4, #20]
 8007e72:	1d18      	adds	r0, r3, #4
 8007e74:	6028      	str	r0, [r5, #0]
 8007e76:	0635      	lsls	r5, r6, #24
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	d501      	bpl.n	8007e80 <_printf_i+0x1c4>
 8007e7c:	6019      	str	r1, [r3, #0]
 8007e7e:	e002      	b.n	8007e86 <_printf_i+0x1ca>
 8007e80:	0670      	lsls	r0, r6, #25
 8007e82:	d5fb      	bpl.n	8007e7c <_printf_i+0x1c0>
 8007e84:	8019      	strh	r1, [r3, #0]
 8007e86:	2300      	movs	r3, #0
 8007e88:	6123      	str	r3, [r4, #16]
 8007e8a:	4615      	mov	r5, r2
 8007e8c:	e7bc      	b.n	8007e08 <_printf_i+0x14c>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	1d1a      	adds	r2, r3, #4
 8007e92:	602a      	str	r2, [r5, #0]
 8007e94:	681d      	ldr	r5, [r3, #0]
 8007e96:	6862      	ldr	r2, [r4, #4]
 8007e98:	2100      	movs	r1, #0
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	f7f8 f998 	bl	80001d0 <memchr>
 8007ea0:	b108      	cbz	r0, 8007ea6 <_printf_i+0x1ea>
 8007ea2:	1b40      	subs	r0, r0, r5
 8007ea4:	6060      	str	r0, [r4, #4]
 8007ea6:	6863      	ldr	r3, [r4, #4]
 8007ea8:	6123      	str	r3, [r4, #16]
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007eb0:	e7aa      	b.n	8007e08 <_printf_i+0x14c>
 8007eb2:	6923      	ldr	r3, [r4, #16]
 8007eb4:	462a      	mov	r2, r5
 8007eb6:	4649      	mov	r1, r9
 8007eb8:	4640      	mov	r0, r8
 8007eba:	47d0      	blx	sl
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	d0ad      	beq.n	8007e1c <_printf_i+0x160>
 8007ec0:	6823      	ldr	r3, [r4, #0]
 8007ec2:	079b      	lsls	r3, r3, #30
 8007ec4:	d413      	bmi.n	8007eee <_printf_i+0x232>
 8007ec6:	68e0      	ldr	r0, [r4, #12]
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	4298      	cmp	r0, r3
 8007ecc:	bfb8      	it	lt
 8007ece:	4618      	movlt	r0, r3
 8007ed0:	e7a6      	b.n	8007e20 <_printf_i+0x164>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	4632      	mov	r2, r6
 8007ed6:	4649      	mov	r1, r9
 8007ed8:	4640      	mov	r0, r8
 8007eda:	47d0      	blx	sl
 8007edc:	3001      	adds	r0, #1
 8007ede:	d09d      	beq.n	8007e1c <_printf_i+0x160>
 8007ee0:	3501      	adds	r5, #1
 8007ee2:	68e3      	ldr	r3, [r4, #12]
 8007ee4:	9903      	ldr	r1, [sp, #12]
 8007ee6:	1a5b      	subs	r3, r3, r1
 8007ee8:	42ab      	cmp	r3, r5
 8007eea:	dcf2      	bgt.n	8007ed2 <_printf_i+0x216>
 8007eec:	e7eb      	b.n	8007ec6 <_printf_i+0x20a>
 8007eee:	2500      	movs	r5, #0
 8007ef0:	f104 0619 	add.w	r6, r4, #25
 8007ef4:	e7f5      	b.n	8007ee2 <_printf_i+0x226>
 8007ef6:	bf00      	nop
 8007ef8:	0800a3f2 	.word	0x0800a3f2
 8007efc:	0800a403 	.word	0x0800a403

08007f00 <std>:
 8007f00:	2300      	movs	r3, #0
 8007f02:	b510      	push	{r4, lr}
 8007f04:	4604      	mov	r4, r0
 8007f06:	e9c0 3300 	strd	r3, r3, [r0]
 8007f0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f0e:	6083      	str	r3, [r0, #8]
 8007f10:	8181      	strh	r1, [r0, #12]
 8007f12:	6643      	str	r3, [r0, #100]	; 0x64
 8007f14:	81c2      	strh	r2, [r0, #14]
 8007f16:	6183      	str	r3, [r0, #24]
 8007f18:	4619      	mov	r1, r3
 8007f1a:	2208      	movs	r2, #8
 8007f1c:	305c      	adds	r0, #92	; 0x5c
 8007f1e:	f000 f914 	bl	800814a <memset>
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <std+0x58>)
 8007f24:	6263      	str	r3, [r4, #36]	; 0x24
 8007f26:	4b0d      	ldr	r3, [pc, #52]	; (8007f5c <std+0x5c>)
 8007f28:	62a3      	str	r3, [r4, #40]	; 0x28
 8007f2a:	4b0d      	ldr	r3, [pc, #52]	; (8007f60 <std+0x60>)
 8007f2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007f2e:	4b0d      	ldr	r3, [pc, #52]	; (8007f64 <std+0x64>)
 8007f30:	6323      	str	r3, [r4, #48]	; 0x30
 8007f32:	4b0d      	ldr	r3, [pc, #52]	; (8007f68 <std+0x68>)
 8007f34:	6224      	str	r4, [r4, #32]
 8007f36:	429c      	cmp	r4, r3
 8007f38:	d006      	beq.n	8007f48 <std+0x48>
 8007f3a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007f3e:	4294      	cmp	r4, r2
 8007f40:	d002      	beq.n	8007f48 <std+0x48>
 8007f42:	33d0      	adds	r3, #208	; 0xd0
 8007f44:	429c      	cmp	r4, r3
 8007f46:	d105      	bne.n	8007f54 <std+0x54>
 8007f48:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007f4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f50:	f000 b978 	b.w	8008244 <__retarget_lock_init_recursive>
 8007f54:	bd10      	pop	{r4, pc}
 8007f56:	bf00      	nop
 8007f58:	080080c5 	.word	0x080080c5
 8007f5c:	080080e7 	.word	0x080080e7
 8007f60:	0800811f 	.word	0x0800811f
 8007f64:	08008143 	.word	0x08008143
 8007f68:	2000046c 	.word	0x2000046c

08007f6c <stdio_exit_handler>:
 8007f6c:	4a02      	ldr	r2, [pc, #8]	; (8007f78 <stdio_exit_handler+0xc>)
 8007f6e:	4903      	ldr	r1, [pc, #12]	; (8007f7c <stdio_exit_handler+0x10>)
 8007f70:	4803      	ldr	r0, [pc, #12]	; (8007f80 <stdio_exit_handler+0x14>)
 8007f72:	f000 b869 	b.w	8008048 <_fwalk_sglue>
 8007f76:	bf00      	nop
 8007f78:	20000010 	.word	0x20000010
 8007f7c:	08009bf9 	.word	0x08009bf9
 8007f80:	2000001c 	.word	0x2000001c

08007f84 <cleanup_stdio>:
 8007f84:	6841      	ldr	r1, [r0, #4]
 8007f86:	4b0c      	ldr	r3, [pc, #48]	; (8007fb8 <cleanup_stdio+0x34>)
 8007f88:	4299      	cmp	r1, r3
 8007f8a:	b510      	push	{r4, lr}
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	d001      	beq.n	8007f94 <cleanup_stdio+0x10>
 8007f90:	f001 fe32 	bl	8009bf8 <_fflush_r>
 8007f94:	68a1      	ldr	r1, [r4, #8]
 8007f96:	4b09      	ldr	r3, [pc, #36]	; (8007fbc <cleanup_stdio+0x38>)
 8007f98:	4299      	cmp	r1, r3
 8007f9a:	d002      	beq.n	8007fa2 <cleanup_stdio+0x1e>
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f001 fe2b 	bl	8009bf8 <_fflush_r>
 8007fa2:	68e1      	ldr	r1, [r4, #12]
 8007fa4:	4b06      	ldr	r3, [pc, #24]	; (8007fc0 <cleanup_stdio+0x3c>)
 8007fa6:	4299      	cmp	r1, r3
 8007fa8:	d004      	beq.n	8007fb4 <cleanup_stdio+0x30>
 8007faa:	4620      	mov	r0, r4
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	f001 be22 	b.w	8009bf8 <_fflush_r>
 8007fb4:	bd10      	pop	{r4, pc}
 8007fb6:	bf00      	nop
 8007fb8:	2000046c 	.word	0x2000046c
 8007fbc:	200004d4 	.word	0x200004d4
 8007fc0:	2000053c 	.word	0x2000053c

08007fc4 <global_stdio_init.part.0>:
 8007fc4:	b510      	push	{r4, lr}
 8007fc6:	4b0b      	ldr	r3, [pc, #44]	; (8007ff4 <global_stdio_init.part.0+0x30>)
 8007fc8:	4c0b      	ldr	r4, [pc, #44]	; (8007ff8 <global_stdio_init.part.0+0x34>)
 8007fca:	4a0c      	ldr	r2, [pc, #48]	; (8007ffc <global_stdio_init.part.0+0x38>)
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	4620      	mov	r0, r4
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	2104      	movs	r1, #4
 8007fd4:	f7ff ff94 	bl	8007f00 <std>
 8007fd8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007fdc:	2201      	movs	r2, #1
 8007fde:	2109      	movs	r1, #9
 8007fe0:	f7ff ff8e 	bl	8007f00 <std>
 8007fe4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007fe8:	2202      	movs	r2, #2
 8007fea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fee:	2112      	movs	r1, #18
 8007ff0:	f7ff bf86 	b.w	8007f00 <std>
 8007ff4:	200005a4 	.word	0x200005a4
 8007ff8:	2000046c 	.word	0x2000046c
 8007ffc:	08007f6d 	.word	0x08007f6d

08008000 <__sfp_lock_acquire>:
 8008000:	4801      	ldr	r0, [pc, #4]	; (8008008 <__sfp_lock_acquire+0x8>)
 8008002:	f000 b920 	b.w	8008246 <__retarget_lock_acquire_recursive>
 8008006:	bf00      	nop
 8008008:	200005ad 	.word	0x200005ad

0800800c <__sfp_lock_release>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__sfp_lock_release+0x8>)
 800800e:	f000 b91b 	b.w	8008248 <__retarget_lock_release_recursive>
 8008012:	bf00      	nop
 8008014:	200005ad 	.word	0x200005ad

08008018 <__sinit>:
 8008018:	b510      	push	{r4, lr}
 800801a:	4604      	mov	r4, r0
 800801c:	f7ff fff0 	bl	8008000 <__sfp_lock_acquire>
 8008020:	6a23      	ldr	r3, [r4, #32]
 8008022:	b11b      	cbz	r3, 800802c <__sinit+0x14>
 8008024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008028:	f7ff bff0 	b.w	800800c <__sfp_lock_release>
 800802c:	4b04      	ldr	r3, [pc, #16]	; (8008040 <__sinit+0x28>)
 800802e:	6223      	str	r3, [r4, #32]
 8008030:	4b04      	ldr	r3, [pc, #16]	; (8008044 <__sinit+0x2c>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d1f5      	bne.n	8008024 <__sinit+0xc>
 8008038:	f7ff ffc4 	bl	8007fc4 <global_stdio_init.part.0>
 800803c:	e7f2      	b.n	8008024 <__sinit+0xc>
 800803e:	bf00      	nop
 8008040:	08007f85 	.word	0x08007f85
 8008044:	200005a4 	.word	0x200005a4

08008048 <_fwalk_sglue>:
 8008048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800804c:	4607      	mov	r7, r0
 800804e:	4688      	mov	r8, r1
 8008050:	4614      	mov	r4, r2
 8008052:	2600      	movs	r6, #0
 8008054:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008058:	f1b9 0901 	subs.w	r9, r9, #1
 800805c:	d505      	bpl.n	800806a <_fwalk_sglue+0x22>
 800805e:	6824      	ldr	r4, [r4, #0]
 8008060:	2c00      	cmp	r4, #0
 8008062:	d1f7      	bne.n	8008054 <_fwalk_sglue+0xc>
 8008064:	4630      	mov	r0, r6
 8008066:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800806a:	89ab      	ldrh	r3, [r5, #12]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d907      	bls.n	8008080 <_fwalk_sglue+0x38>
 8008070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008074:	3301      	adds	r3, #1
 8008076:	d003      	beq.n	8008080 <_fwalk_sglue+0x38>
 8008078:	4629      	mov	r1, r5
 800807a:	4638      	mov	r0, r7
 800807c:	47c0      	blx	r8
 800807e:	4306      	orrs	r6, r0
 8008080:	3568      	adds	r5, #104	; 0x68
 8008082:	e7e9      	b.n	8008058 <_fwalk_sglue+0x10>

08008084 <siprintf>:
 8008084:	b40e      	push	{r1, r2, r3}
 8008086:	b500      	push	{lr}
 8008088:	b09c      	sub	sp, #112	; 0x70
 800808a:	ab1d      	add	r3, sp, #116	; 0x74
 800808c:	9002      	str	r0, [sp, #8]
 800808e:	9006      	str	r0, [sp, #24]
 8008090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008094:	4809      	ldr	r0, [pc, #36]	; (80080bc <siprintf+0x38>)
 8008096:	9107      	str	r1, [sp, #28]
 8008098:	9104      	str	r1, [sp, #16]
 800809a:	4909      	ldr	r1, [pc, #36]	; (80080c0 <siprintf+0x3c>)
 800809c:	f853 2b04 	ldr.w	r2, [r3], #4
 80080a0:	9105      	str	r1, [sp, #20]
 80080a2:	6800      	ldr	r0, [r0, #0]
 80080a4:	9301      	str	r3, [sp, #4]
 80080a6:	a902      	add	r1, sp, #8
 80080a8:	f001 fc22 	bl	80098f0 <_svfiprintf_r>
 80080ac:	9b02      	ldr	r3, [sp, #8]
 80080ae:	2200      	movs	r2, #0
 80080b0:	701a      	strb	r2, [r3, #0]
 80080b2:	b01c      	add	sp, #112	; 0x70
 80080b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080b8:	b003      	add	sp, #12
 80080ba:	4770      	bx	lr
 80080bc:	20000068 	.word	0x20000068
 80080c0:	ffff0208 	.word	0xffff0208

080080c4 <__sread>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	460c      	mov	r4, r1
 80080c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080cc:	f000 f86c 	bl	80081a8 <_read_r>
 80080d0:	2800      	cmp	r0, #0
 80080d2:	bfab      	itete	ge
 80080d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80080d6:	89a3      	ldrhlt	r3, [r4, #12]
 80080d8:	181b      	addge	r3, r3, r0
 80080da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80080de:	bfac      	ite	ge
 80080e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80080e2:	81a3      	strhlt	r3, [r4, #12]
 80080e4:	bd10      	pop	{r4, pc}

080080e6 <__swrite>:
 80080e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080ea:	461f      	mov	r7, r3
 80080ec:	898b      	ldrh	r3, [r1, #12]
 80080ee:	05db      	lsls	r3, r3, #23
 80080f0:	4605      	mov	r5, r0
 80080f2:	460c      	mov	r4, r1
 80080f4:	4616      	mov	r6, r2
 80080f6:	d505      	bpl.n	8008104 <__swrite+0x1e>
 80080f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080fc:	2302      	movs	r3, #2
 80080fe:	2200      	movs	r2, #0
 8008100:	f000 f840 	bl	8008184 <_lseek_r>
 8008104:	89a3      	ldrh	r3, [r4, #12]
 8008106:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800810a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800810e:	81a3      	strh	r3, [r4, #12]
 8008110:	4632      	mov	r2, r6
 8008112:	463b      	mov	r3, r7
 8008114:	4628      	mov	r0, r5
 8008116:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800811a:	f000 b857 	b.w	80081cc <_write_r>

0800811e <__sseek>:
 800811e:	b510      	push	{r4, lr}
 8008120:	460c      	mov	r4, r1
 8008122:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008126:	f000 f82d 	bl	8008184 <_lseek_r>
 800812a:	1c43      	adds	r3, r0, #1
 800812c:	89a3      	ldrh	r3, [r4, #12]
 800812e:	bf15      	itete	ne
 8008130:	6560      	strne	r0, [r4, #84]	; 0x54
 8008132:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008136:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800813a:	81a3      	strheq	r3, [r4, #12]
 800813c:	bf18      	it	ne
 800813e:	81a3      	strhne	r3, [r4, #12]
 8008140:	bd10      	pop	{r4, pc}

08008142 <__sclose>:
 8008142:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008146:	f000 b80d 	b.w	8008164 <_close_r>

0800814a <memset>:
 800814a:	4402      	add	r2, r0
 800814c:	4603      	mov	r3, r0
 800814e:	4293      	cmp	r3, r2
 8008150:	d100      	bne.n	8008154 <memset+0xa>
 8008152:	4770      	bx	lr
 8008154:	f803 1b01 	strb.w	r1, [r3], #1
 8008158:	e7f9      	b.n	800814e <memset+0x4>
	...

0800815c <_localeconv_r>:
 800815c:	4800      	ldr	r0, [pc, #0]	; (8008160 <_localeconv_r+0x4>)
 800815e:	4770      	bx	lr
 8008160:	2000015c 	.word	0x2000015c

08008164 <_close_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_close_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f9 fd33 	bl	8001bda <_close>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_close_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_close_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200005a8 	.word	0x200005a8

08008184 <_lseek_r>:
 8008184:	b538      	push	{r3, r4, r5, lr}
 8008186:	4d07      	ldr	r5, [pc, #28]	; (80081a4 <_lseek_r+0x20>)
 8008188:	4604      	mov	r4, r0
 800818a:	4608      	mov	r0, r1
 800818c:	4611      	mov	r1, r2
 800818e:	2200      	movs	r2, #0
 8008190:	602a      	str	r2, [r5, #0]
 8008192:	461a      	mov	r2, r3
 8008194:	f7f9 fd48 	bl	8001c28 <_lseek>
 8008198:	1c43      	adds	r3, r0, #1
 800819a:	d102      	bne.n	80081a2 <_lseek_r+0x1e>
 800819c:	682b      	ldr	r3, [r5, #0]
 800819e:	b103      	cbz	r3, 80081a2 <_lseek_r+0x1e>
 80081a0:	6023      	str	r3, [r4, #0]
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	200005a8 	.word	0x200005a8

080081a8 <_read_r>:
 80081a8:	b538      	push	{r3, r4, r5, lr}
 80081aa:	4d07      	ldr	r5, [pc, #28]	; (80081c8 <_read_r+0x20>)
 80081ac:	4604      	mov	r4, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	4611      	mov	r1, r2
 80081b2:	2200      	movs	r2, #0
 80081b4:	602a      	str	r2, [r5, #0]
 80081b6:	461a      	mov	r2, r3
 80081b8:	f7f9 fcd6 	bl	8001b68 <_read>
 80081bc:	1c43      	adds	r3, r0, #1
 80081be:	d102      	bne.n	80081c6 <_read_r+0x1e>
 80081c0:	682b      	ldr	r3, [r5, #0]
 80081c2:	b103      	cbz	r3, 80081c6 <_read_r+0x1e>
 80081c4:	6023      	str	r3, [r4, #0]
 80081c6:	bd38      	pop	{r3, r4, r5, pc}
 80081c8:	200005a8 	.word	0x200005a8

080081cc <_write_r>:
 80081cc:	b538      	push	{r3, r4, r5, lr}
 80081ce:	4d07      	ldr	r5, [pc, #28]	; (80081ec <_write_r+0x20>)
 80081d0:	4604      	mov	r4, r0
 80081d2:	4608      	mov	r0, r1
 80081d4:	4611      	mov	r1, r2
 80081d6:	2200      	movs	r2, #0
 80081d8:	602a      	str	r2, [r5, #0]
 80081da:	461a      	mov	r2, r3
 80081dc:	f7f9 fce1 	bl	8001ba2 <_write>
 80081e0:	1c43      	adds	r3, r0, #1
 80081e2:	d102      	bne.n	80081ea <_write_r+0x1e>
 80081e4:	682b      	ldr	r3, [r5, #0]
 80081e6:	b103      	cbz	r3, 80081ea <_write_r+0x1e>
 80081e8:	6023      	str	r3, [r4, #0]
 80081ea:	bd38      	pop	{r3, r4, r5, pc}
 80081ec:	200005a8 	.word	0x200005a8

080081f0 <__errno>:
 80081f0:	4b01      	ldr	r3, [pc, #4]	; (80081f8 <__errno+0x8>)
 80081f2:	6818      	ldr	r0, [r3, #0]
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	20000068 	.word	0x20000068

080081fc <__libc_init_array>:
 80081fc:	b570      	push	{r4, r5, r6, lr}
 80081fe:	4d0d      	ldr	r5, [pc, #52]	; (8008234 <__libc_init_array+0x38>)
 8008200:	4c0d      	ldr	r4, [pc, #52]	; (8008238 <__libc_init_array+0x3c>)
 8008202:	1b64      	subs	r4, r4, r5
 8008204:	10a4      	asrs	r4, r4, #2
 8008206:	2600      	movs	r6, #0
 8008208:	42a6      	cmp	r6, r4
 800820a:	d109      	bne.n	8008220 <__libc_init_array+0x24>
 800820c:	4d0b      	ldr	r5, [pc, #44]	; (800823c <__libc_init_array+0x40>)
 800820e:	4c0c      	ldr	r4, [pc, #48]	; (8008240 <__libc_init_array+0x44>)
 8008210:	f002 f896 	bl	800a340 <_init>
 8008214:	1b64      	subs	r4, r4, r5
 8008216:	10a4      	asrs	r4, r4, #2
 8008218:	2600      	movs	r6, #0
 800821a:	42a6      	cmp	r6, r4
 800821c:	d105      	bne.n	800822a <__libc_init_array+0x2e>
 800821e:	bd70      	pop	{r4, r5, r6, pc}
 8008220:	f855 3b04 	ldr.w	r3, [r5], #4
 8008224:	4798      	blx	r3
 8008226:	3601      	adds	r6, #1
 8008228:	e7ee      	b.n	8008208 <__libc_init_array+0xc>
 800822a:	f855 3b04 	ldr.w	r3, [r5], #4
 800822e:	4798      	blx	r3
 8008230:	3601      	adds	r6, #1
 8008232:	e7f2      	b.n	800821a <__libc_init_array+0x1e>
 8008234:	0800a75c 	.word	0x0800a75c
 8008238:	0800a75c 	.word	0x0800a75c
 800823c:	0800a75c 	.word	0x0800a75c
 8008240:	0800a760 	.word	0x0800a760

08008244 <__retarget_lock_init_recursive>:
 8008244:	4770      	bx	lr

08008246 <__retarget_lock_acquire_recursive>:
 8008246:	4770      	bx	lr

08008248 <__retarget_lock_release_recursive>:
 8008248:	4770      	bx	lr

0800824a <quorem>:
 800824a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800824e:	6903      	ldr	r3, [r0, #16]
 8008250:	690c      	ldr	r4, [r1, #16]
 8008252:	42a3      	cmp	r3, r4
 8008254:	4607      	mov	r7, r0
 8008256:	db7e      	blt.n	8008356 <quorem+0x10c>
 8008258:	3c01      	subs	r4, #1
 800825a:	f101 0814 	add.w	r8, r1, #20
 800825e:	f100 0514 	add.w	r5, r0, #20
 8008262:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008266:	9301      	str	r3, [sp, #4]
 8008268:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800826c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008270:	3301      	adds	r3, #1
 8008272:	429a      	cmp	r2, r3
 8008274:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008278:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800827c:	fbb2 f6f3 	udiv	r6, r2, r3
 8008280:	d331      	bcc.n	80082e6 <quorem+0x9c>
 8008282:	f04f 0e00 	mov.w	lr, #0
 8008286:	4640      	mov	r0, r8
 8008288:	46ac      	mov	ip, r5
 800828a:	46f2      	mov	sl, lr
 800828c:	f850 2b04 	ldr.w	r2, [r0], #4
 8008290:	b293      	uxth	r3, r2
 8008292:	fb06 e303 	mla	r3, r6, r3, lr
 8008296:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800829a:	0c1a      	lsrs	r2, r3, #16
 800829c:	b29b      	uxth	r3, r3
 800829e:	ebaa 0303 	sub.w	r3, sl, r3
 80082a2:	f8dc a000 	ldr.w	sl, [ip]
 80082a6:	fa13 f38a 	uxtah	r3, r3, sl
 80082aa:	fb06 220e 	mla	r2, r6, lr, r2
 80082ae:	9300      	str	r3, [sp, #0]
 80082b0:	9b00      	ldr	r3, [sp, #0]
 80082b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80082b6:	b292      	uxth	r2, r2
 80082b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80082bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80082c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80082c4:	4581      	cmp	r9, r0
 80082c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80082ca:	f84c 3b04 	str.w	r3, [ip], #4
 80082ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80082d2:	d2db      	bcs.n	800828c <quorem+0x42>
 80082d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80082d8:	b92b      	cbnz	r3, 80082e6 <quorem+0x9c>
 80082da:	9b01      	ldr	r3, [sp, #4]
 80082dc:	3b04      	subs	r3, #4
 80082de:	429d      	cmp	r5, r3
 80082e0:	461a      	mov	r2, r3
 80082e2:	d32c      	bcc.n	800833e <quorem+0xf4>
 80082e4:	613c      	str	r4, [r7, #16]
 80082e6:	4638      	mov	r0, r7
 80082e8:	f001 f9a8 	bl	800963c <__mcmp>
 80082ec:	2800      	cmp	r0, #0
 80082ee:	db22      	blt.n	8008336 <quorem+0xec>
 80082f0:	3601      	adds	r6, #1
 80082f2:	4629      	mov	r1, r5
 80082f4:	2000      	movs	r0, #0
 80082f6:	f858 2b04 	ldr.w	r2, [r8], #4
 80082fa:	f8d1 c000 	ldr.w	ip, [r1]
 80082fe:	b293      	uxth	r3, r2
 8008300:	1ac3      	subs	r3, r0, r3
 8008302:	0c12      	lsrs	r2, r2, #16
 8008304:	fa13 f38c 	uxtah	r3, r3, ip
 8008308:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800830c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008310:	b29b      	uxth	r3, r3
 8008312:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008316:	45c1      	cmp	r9, r8
 8008318:	f841 3b04 	str.w	r3, [r1], #4
 800831c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008320:	d2e9      	bcs.n	80082f6 <quorem+0xac>
 8008322:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800832a:	b922      	cbnz	r2, 8008336 <quorem+0xec>
 800832c:	3b04      	subs	r3, #4
 800832e:	429d      	cmp	r5, r3
 8008330:	461a      	mov	r2, r3
 8008332:	d30a      	bcc.n	800834a <quorem+0x100>
 8008334:	613c      	str	r4, [r7, #16]
 8008336:	4630      	mov	r0, r6
 8008338:	b003      	add	sp, #12
 800833a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800833e:	6812      	ldr	r2, [r2, #0]
 8008340:	3b04      	subs	r3, #4
 8008342:	2a00      	cmp	r2, #0
 8008344:	d1ce      	bne.n	80082e4 <quorem+0x9a>
 8008346:	3c01      	subs	r4, #1
 8008348:	e7c9      	b.n	80082de <quorem+0x94>
 800834a:	6812      	ldr	r2, [r2, #0]
 800834c:	3b04      	subs	r3, #4
 800834e:	2a00      	cmp	r2, #0
 8008350:	d1f0      	bne.n	8008334 <quorem+0xea>
 8008352:	3c01      	subs	r4, #1
 8008354:	e7eb      	b.n	800832e <quorem+0xe4>
 8008356:	2000      	movs	r0, #0
 8008358:	e7ee      	b.n	8008338 <quorem+0xee>
 800835a:	0000      	movs	r0, r0
 800835c:	0000      	movs	r0, r0
	...

08008360 <_dtoa_r>:
 8008360:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008364:	ed2d 8b04 	vpush	{d8-d9}
 8008368:	69c5      	ldr	r5, [r0, #28]
 800836a:	b093      	sub	sp, #76	; 0x4c
 800836c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008370:	ec57 6b10 	vmov	r6, r7, d0
 8008374:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008378:	9107      	str	r1, [sp, #28]
 800837a:	4604      	mov	r4, r0
 800837c:	920a      	str	r2, [sp, #40]	; 0x28
 800837e:	930d      	str	r3, [sp, #52]	; 0x34
 8008380:	b975      	cbnz	r5, 80083a0 <_dtoa_r+0x40>
 8008382:	2010      	movs	r0, #16
 8008384:	f000 fe2a 	bl	8008fdc <malloc>
 8008388:	4602      	mov	r2, r0
 800838a:	61e0      	str	r0, [r4, #28]
 800838c:	b920      	cbnz	r0, 8008398 <_dtoa_r+0x38>
 800838e:	4bae      	ldr	r3, [pc, #696]	; (8008648 <_dtoa_r+0x2e8>)
 8008390:	21ef      	movs	r1, #239	; 0xef
 8008392:	48ae      	ldr	r0, [pc, #696]	; (800864c <_dtoa_r+0x2ec>)
 8008394:	f001 fc90 	bl	8009cb8 <__assert_func>
 8008398:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800839c:	6005      	str	r5, [r0, #0]
 800839e:	60c5      	str	r5, [r0, #12]
 80083a0:	69e3      	ldr	r3, [r4, #28]
 80083a2:	6819      	ldr	r1, [r3, #0]
 80083a4:	b151      	cbz	r1, 80083bc <_dtoa_r+0x5c>
 80083a6:	685a      	ldr	r2, [r3, #4]
 80083a8:	604a      	str	r2, [r1, #4]
 80083aa:	2301      	movs	r3, #1
 80083ac:	4093      	lsls	r3, r2
 80083ae:	608b      	str	r3, [r1, #8]
 80083b0:	4620      	mov	r0, r4
 80083b2:	f000 ff07 	bl	80091c4 <_Bfree>
 80083b6:	69e3      	ldr	r3, [r4, #28]
 80083b8:	2200      	movs	r2, #0
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	1e3b      	subs	r3, r7, #0
 80083be:	bfbb      	ittet	lt
 80083c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80083c4:	9303      	strlt	r3, [sp, #12]
 80083c6:	2300      	movge	r3, #0
 80083c8:	2201      	movlt	r2, #1
 80083ca:	bfac      	ite	ge
 80083cc:	f8c8 3000 	strge.w	r3, [r8]
 80083d0:	f8c8 2000 	strlt.w	r2, [r8]
 80083d4:	4b9e      	ldr	r3, [pc, #632]	; (8008650 <_dtoa_r+0x2f0>)
 80083d6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80083da:	ea33 0308 	bics.w	r3, r3, r8
 80083de:	d11b      	bne.n	8008418 <_dtoa_r+0xb8>
 80083e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083e2:	f242 730f 	movw	r3, #9999	; 0x270f
 80083e6:	6013      	str	r3, [r2, #0]
 80083e8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80083ec:	4333      	orrs	r3, r6
 80083ee:	f000 8593 	beq.w	8008f18 <_dtoa_r+0xbb8>
 80083f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80083f4:	b963      	cbnz	r3, 8008410 <_dtoa_r+0xb0>
 80083f6:	4b97      	ldr	r3, [pc, #604]	; (8008654 <_dtoa_r+0x2f4>)
 80083f8:	e027      	b.n	800844a <_dtoa_r+0xea>
 80083fa:	4b97      	ldr	r3, [pc, #604]	; (8008658 <_dtoa_r+0x2f8>)
 80083fc:	9300      	str	r3, [sp, #0]
 80083fe:	3308      	adds	r3, #8
 8008400:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008402:	6013      	str	r3, [r2, #0]
 8008404:	9800      	ldr	r0, [sp, #0]
 8008406:	b013      	add	sp, #76	; 0x4c
 8008408:	ecbd 8b04 	vpop	{d8-d9}
 800840c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008410:	4b90      	ldr	r3, [pc, #576]	; (8008654 <_dtoa_r+0x2f4>)
 8008412:	9300      	str	r3, [sp, #0]
 8008414:	3303      	adds	r3, #3
 8008416:	e7f3      	b.n	8008400 <_dtoa_r+0xa0>
 8008418:	ed9d 7b02 	vldr	d7, [sp, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	ec51 0b17 	vmov	r0, r1, d7
 8008422:	eeb0 8a47 	vmov.f32	s16, s14
 8008426:	eef0 8a67 	vmov.f32	s17, s15
 800842a:	2300      	movs	r3, #0
 800842c:	f7f8 fb4c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008430:	4681      	mov	r9, r0
 8008432:	b160      	cbz	r0, 800844e <_dtoa_r+0xee>
 8008434:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008436:	2301      	movs	r3, #1
 8008438:	6013      	str	r3, [r2, #0]
 800843a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800843c:	2b00      	cmp	r3, #0
 800843e:	f000 8568 	beq.w	8008f12 <_dtoa_r+0xbb2>
 8008442:	4b86      	ldr	r3, [pc, #536]	; (800865c <_dtoa_r+0x2fc>)
 8008444:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	3b01      	subs	r3, #1
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	e7da      	b.n	8008404 <_dtoa_r+0xa4>
 800844e:	aa10      	add	r2, sp, #64	; 0x40
 8008450:	a911      	add	r1, sp, #68	; 0x44
 8008452:	4620      	mov	r0, r4
 8008454:	eeb0 0a48 	vmov.f32	s0, s16
 8008458:	eef0 0a68 	vmov.f32	s1, s17
 800845c:	f001 f994 	bl	8009788 <__d2b>
 8008460:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008464:	4682      	mov	sl, r0
 8008466:	2d00      	cmp	r5, #0
 8008468:	d07f      	beq.n	800856a <_dtoa_r+0x20a>
 800846a:	ee18 3a90 	vmov	r3, s17
 800846e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008472:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008476:	ec51 0b18 	vmov	r0, r1, d8
 800847a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800847e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008482:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008486:	4619      	mov	r1, r3
 8008488:	2200      	movs	r2, #0
 800848a:	4b75      	ldr	r3, [pc, #468]	; (8008660 <_dtoa_r+0x300>)
 800848c:	f7f7 fefc 	bl	8000288 <__aeabi_dsub>
 8008490:	a367      	add	r3, pc, #412	; (adr r3, 8008630 <_dtoa_r+0x2d0>)
 8008492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008496:	f7f8 f8af 	bl	80005f8 <__aeabi_dmul>
 800849a:	a367      	add	r3, pc, #412	; (adr r3, 8008638 <_dtoa_r+0x2d8>)
 800849c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084a0:	f7f7 fef4 	bl	800028c <__adddf3>
 80084a4:	4606      	mov	r6, r0
 80084a6:	4628      	mov	r0, r5
 80084a8:	460f      	mov	r7, r1
 80084aa:	f7f8 f83b 	bl	8000524 <__aeabi_i2d>
 80084ae:	a364      	add	r3, pc, #400	; (adr r3, 8008640 <_dtoa_r+0x2e0>)
 80084b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80084b4:	f7f8 f8a0 	bl	80005f8 <__aeabi_dmul>
 80084b8:	4602      	mov	r2, r0
 80084ba:	460b      	mov	r3, r1
 80084bc:	4630      	mov	r0, r6
 80084be:	4639      	mov	r1, r7
 80084c0:	f7f7 fee4 	bl	800028c <__adddf3>
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	f7f8 fb46 	bl	8000b58 <__aeabi_d2iz>
 80084cc:	2200      	movs	r2, #0
 80084ce:	4683      	mov	fp, r0
 80084d0:	2300      	movs	r3, #0
 80084d2:	4630      	mov	r0, r6
 80084d4:	4639      	mov	r1, r7
 80084d6:	f7f8 fb01 	bl	8000adc <__aeabi_dcmplt>
 80084da:	b148      	cbz	r0, 80084f0 <_dtoa_r+0x190>
 80084dc:	4658      	mov	r0, fp
 80084de:	f7f8 f821 	bl	8000524 <__aeabi_i2d>
 80084e2:	4632      	mov	r2, r6
 80084e4:	463b      	mov	r3, r7
 80084e6:	f7f8 faef 	bl	8000ac8 <__aeabi_dcmpeq>
 80084ea:	b908      	cbnz	r0, 80084f0 <_dtoa_r+0x190>
 80084ec:	f10b 3bff 	add.w	fp, fp, #4294967295
 80084f0:	f1bb 0f16 	cmp.w	fp, #22
 80084f4:	d857      	bhi.n	80085a6 <_dtoa_r+0x246>
 80084f6:	4b5b      	ldr	r3, [pc, #364]	; (8008664 <_dtoa_r+0x304>)
 80084f8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80084fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008500:	ec51 0b18 	vmov	r0, r1, d8
 8008504:	f7f8 faea 	bl	8000adc <__aeabi_dcmplt>
 8008508:	2800      	cmp	r0, #0
 800850a:	d04e      	beq.n	80085aa <_dtoa_r+0x24a>
 800850c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008510:	2300      	movs	r3, #0
 8008512:	930c      	str	r3, [sp, #48]	; 0x30
 8008514:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008516:	1b5b      	subs	r3, r3, r5
 8008518:	1e5a      	subs	r2, r3, #1
 800851a:	bf45      	ittet	mi
 800851c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008520:	9305      	strmi	r3, [sp, #20]
 8008522:	2300      	movpl	r3, #0
 8008524:	2300      	movmi	r3, #0
 8008526:	9206      	str	r2, [sp, #24]
 8008528:	bf54      	ite	pl
 800852a:	9305      	strpl	r3, [sp, #20]
 800852c:	9306      	strmi	r3, [sp, #24]
 800852e:	f1bb 0f00 	cmp.w	fp, #0
 8008532:	db3c      	blt.n	80085ae <_dtoa_r+0x24e>
 8008534:	9b06      	ldr	r3, [sp, #24]
 8008536:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800853a:	445b      	add	r3, fp
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	2300      	movs	r3, #0
 8008540:	9308      	str	r3, [sp, #32]
 8008542:	9b07      	ldr	r3, [sp, #28]
 8008544:	2b09      	cmp	r3, #9
 8008546:	d868      	bhi.n	800861a <_dtoa_r+0x2ba>
 8008548:	2b05      	cmp	r3, #5
 800854a:	bfc4      	itt	gt
 800854c:	3b04      	subgt	r3, #4
 800854e:	9307      	strgt	r3, [sp, #28]
 8008550:	9b07      	ldr	r3, [sp, #28]
 8008552:	f1a3 0302 	sub.w	r3, r3, #2
 8008556:	bfcc      	ite	gt
 8008558:	2500      	movgt	r5, #0
 800855a:	2501      	movle	r5, #1
 800855c:	2b03      	cmp	r3, #3
 800855e:	f200 8085 	bhi.w	800866c <_dtoa_r+0x30c>
 8008562:	e8df f003 	tbb	[pc, r3]
 8008566:	3b2e      	.short	0x3b2e
 8008568:	5839      	.short	0x5839
 800856a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800856e:	441d      	add	r5, r3
 8008570:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008574:	2b20      	cmp	r3, #32
 8008576:	bfc1      	itttt	gt
 8008578:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800857c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008580:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008584:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008588:	bfd6      	itet	le
 800858a:	f1c3 0320 	rsble	r3, r3, #32
 800858e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008592:	fa06 f003 	lslle.w	r0, r6, r3
 8008596:	f7f7 ffb5 	bl	8000504 <__aeabi_ui2d>
 800859a:	2201      	movs	r2, #1
 800859c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80085a0:	3d01      	subs	r5, #1
 80085a2:	920e      	str	r2, [sp, #56]	; 0x38
 80085a4:	e76f      	b.n	8008486 <_dtoa_r+0x126>
 80085a6:	2301      	movs	r3, #1
 80085a8:	e7b3      	b.n	8008512 <_dtoa_r+0x1b2>
 80085aa:	900c      	str	r0, [sp, #48]	; 0x30
 80085ac:	e7b2      	b.n	8008514 <_dtoa_r+0x1b4>
 80085ae:	9b05      	ldr	r3, [sp, #20]
 80085b0:	eba3 030b 	sub.w	r3, r3, fp
 80085b4:	9305      	str	r3, [sp, #20]
 80085b6:	f1cb 0300 	rsb	r3, fp, #0
 80085ba:	9308      	str	r3, [sp, #32]
 80085bc:	2300      	movs	r3, #0
 80085be:	930b      	str	r3, [sp, #44]	; 0x2c
 80085c0:	e7bf      	b.n	8008542 <_dtoa_r+0x1e2>
 80085c2:	2300      	movs	r3, #0
 80085c4:	9309      	str	r3, [sp, #36]	; 0x24
 80085c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	dc52      	bgt.n	8008672 <_dtoa_r+0x312>
 80085cc:	2301      	movs	r3, #1
 80085ce:	9301      	str	r3, [sp, #4]
 80085d0:	9304      	str	r3, [sp, #16]
 80085d2:	461a      	mov	r2, r3
 80085d4:	920a      	str	r2, [sp, #40]	; 0x28
 80085d6:	e00b      	b.n	80085f0 <_dtoa_r+0x290>
 80085d8:	2301      	movs	r3, #1
 80085da:	e7f3      	b.n	80085c4 <_dtoa_r+0x264>
 80085dc:	2300      	movs	r3, #0
 80085de:	9309      	str	r3, [sp, #36]	; 0x24
 80085e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085e2:	445b      	add	r3, fp
 80085e4:	9301      	str	r3, [sp, #4]
 80085e6:	3301      	adds	r3, #1
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	9304      	str	r3, [sp, #16]
 80085ec:	bfb8      	it	lt
 80085ee:	2301      	movlt	r3, #1
 80085f0:	69e0      	ldr	r0, [r4, #28]
 80085f2:	2100      	movs	r1, #0
 80085f4:	2204      	movs	r2, #4
 80085f6:	f102 0614 	add.w	r6, r2, #20
 80085fa:	429e      	cmp	r6, r3
 80085fc:	d93d      	bls.n	800867a <_dtoa_r+0x31a>
 80085fe:	6041      	str	r1, [r0, #4]
 8008600:	4620      	mov	r0, r4
 8008602:	f000 fd9f 	bl	8009144 <_Balloc>
 8008606:	9000      	str	r0, [sp, #0]
 8008608:	2800      	cmp	r0, #0
 800860a:	d139      	bne.n	8008680 <_dtoa_r+0x320>
 800860c:	4b16      	ldr	r3, [pc, #88]	; (8008668 <_dtoa_r+0x308>)
 800860e:	4602      	mov	r2, r0
 8008610:	f240 11af 	movw	r1, #431	; 0x1af
 8008614:	e6bd      	b.n	8008392 <_dtoa_r+0x32>
 8008616:	2301      	movs	r3, #1
 8008618:	e7e1      	b.n	80085de <_dtoa_r+0x27e>
 800861a:	2501      	movs	r5, #1
 800861c:	2300      	movs	r3, #0
 800861e:	9307      	str	r3, [sp, #28]
 8008620:	9509      	str	r5, [sp, #36]	; 0x24
 8008622:	f04f 33ff 	mov.w	r3, #4294967295
 8008626:	9301      	str	r3, [sp, #4]
 8008628:	9304      	str	r3, [sp, #16]
 800862a:	2200      	movs	r2, #0
 800862c:	2312      	movs	r3, #18
 800862e:	e7d1      	b.n	80085d4 <_dtoa_r+0x274>
 8008630:	636f4361 	.word	0x636f4361
 8008634:	3fd287a7 	.word	0x3fd287a7
 8008638:	8b60c8b3 	.word	0x8b60c8b3
 800863c:	3fc68a28 	.word	0x3fc68a28
 8008640:	509f79fb 	.word	0x509f79fb
 8008644:	3fd34413 	.word	0x3fd34413
 8008648:	0800a421 	.word	0x0800a421
 800864c:	0800a438 	.word	0x0800a438
 8008650:	7ff00000 	.word	0x7ff00000
 8008654:	0800a41d 	.word	0x0800a41d
 8008658:	0800a414 	.word	0x0800a414
 800865c:	0800a3f1 	.word	0x0800a3f1
 8008660:	3ff80000 	.word	0x3ff80000
 8008664:	0800a528 	.word	0x0800a528
 8008668:	0800a490 	.word	0x0800a490
 800866c:	2301      	movs	r3, #1
 800866e:	9309      	str	r3, [sp, #36]	; 0x24
 8008670:	e7d7      	b.n	8008622 <_dtoa_r+0x2c2>
 8008672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	9304      	str	r3, [sp, #16]
 8008678:	e7ba      	b.n	80085f0 <_dtoa_r+0x290>
 800867a:	3101      	adds	r1, #1
 800867c:	0052      	lsls	r2, r2, #1
 800867e:	e7ba      	b.n	80085f6 <_dtoa_r+0x296>
 8008680:	69e3      	ldr	r3, [r4, #28]
 8008682:	9a00      	ldr	r2, [sp, #0]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	9b04      	ldr	r3, [sp, #16]
 8008688:	2b0e      	cmp	r3, #14
 800868a:	f200 80a8 	bhi.w	80087de <_dtoa_r+0x47e>
 800868e:	2d00      	cmp	r5, #0
 8008690:	f000 80a5 	beq.w	80087de <_dtoa_r+0x47e>
 8008694:	f1bb 0f00 	cmp.w	fp, #0
 8008698:	dd38      	ble.n	800870c <_dtoa_r+0x3ac>
 800869a:	4bc0      	ldr	r3, [pc, #768]	; (800899c <_dtoa_r+0x63c>)
 800869c:	f00b 020f 	and.w	r2, fp, #15
 80086a0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086a4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80086a8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80086ac:	ea4f 182b 	mov.w	r8, fp, asr #4
 80086b0:	d019      	beq.n	80086e6 <_dtoa_r+0x386>
 80086b2:	4bbb      	ldr	r3, [pc, #748]	; (80089a0 <_dtoa_r+0x640>)
 80086b4:	ec51 0b18 	vmov	r0, r1, d8
 80086b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80086bc:	f7f8 f8c6 	bl	800084c <__aeabi_ddiv>
 80086c0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086c4:	f008 080f 	and.w	r8, r8, #15
 80086c8:	2503      	movs	r5, #3
 80086ca:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 80089a0 <_dtoa_r+0x640>
 80086ce:	f1b8 0f00 	cmp.w	r8, #0
 80086d2:	d10a      	bne.n	80086ea <_dtoa_r+0x38a>
 80086d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	f7f8 f8b6 	bl	800084c <__aeabi_ddiv>
 80086e0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80086e4:	e02b      	b.n	800873e <_dtoa_r+0x3de>
 80086e6:	2502      	movs	r5, #2
 80086e8:	e7ef      	b.n	80086ca <_dtoa_r+0x36a>
 80086ea:	f018 0f01 	tst.w	r8, #1
 80086ee:	d008      	beq.n	8008702 <_dtoa_r+0x3a2>
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	e9d9 2300 	ldrd	r2, r3, [r9]
 80086f8:	f7f7 ff7e 	bl	80005f8 <__aeabi_dmul>
 80086fc:	3501      	adds	r5, #1
 80086fe:	4606      	mov	r6, r0
 8008700:	460f      	mov	r7, r1
 8008702:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008706:	f109 0908 	add.w	r9, r9, #8
 800870a:	e7e0      	b.n	80086ce <_dtoa_r+0x36e>
 800870c:	f000 809f 	beq.w	800884e <_dtoa_r+0x4ee>
 8008710:	f1cb 0600 	rsb	r6, fp, #0
 8008714:	4ba1      	ldr	r3, [pc, #644]	; (800899c <_dtoa_r+0x63c>)
 8008716:	4fa2      	ldr	r7, [pc, #648]	; (80089a0 <_dtoa_r+0x640>)
 8008718:	f006 020f 	and.w	r2, r6, #15
 800871c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008724:	ec51 0b18 	vmov	r0, r1, d8
 8008728:	f7f7 ff66 	bl	80005f8 <__aeabi_dmul>
 800872c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008730:	1136      	asrs	r6, r6, #4
 8008732:	2300      	movs	r3, #0
 8008734:	2502      	movs	r5, #2
 8008736:	2e00      	cmp	r6, #0
 8008738:	d17e      	bne.n	8008838 <_dtoa_r+0x4d8>
 800873a:	2b00      	cmp	r3, #0
 800873c:	d1d0      	bne.n	80086e0 <_dtoa_r+0x380>
 800873e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008740:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008744:	2b00      	cmp	r3, #0
 8008746:	f000 8084 	beq.w	8008852 <_dtoa_r+0x4f2>
 800874a:	4b96      	ldr	r3, [pc, #600]	; (80089a4 <_dtoa_r+0x644>)
 800874c:	2200      	movs	r2, #0
 800874e:	4640      	mov	r0, r8
 8008750:	4649      	mov	r1, r9
 8008752:	f7f8 f9c3 	bl	8000adc <__aeabi_dcmplt>
 8008756:	2800      	cmp	r0, #0
 8008758:	d07b      	beq.n	8008852 <_dtoa_r+0x4f2>
 800875a:	9b04      	ldr	r3, [sp, #16]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d078      	beq.n	8008852 <_dtoa_r+0x4f2>
 8008760:	9b01      	ldr	r3, [sp, #4]
 8008762:	2b00      	cmp	r3, #0
 8008764:	dd39      	ble.n	80087da <_dtoa_r+0x47a>
 8008766:	4b90      	ldr	r3, [pc, #576]	; (80089a8 <_dtoa_r+0x648>)
 8008768:	2200      	movs	r2, #0
 800876a:	4640      	mov	r0, r8
 800876c:	4649      	mov	r1, r9
 800876e:	f7f7 ff43 	bl	80005f8 <__aeabi_dmul>
 8008772:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008776:	9e01      	ldr	r6, [sp, #4]
 8008778:	f10b 37ff 	add.w	r7, fp, #4294967295
 800877c:	3501      	adds	r5, #1
 800877e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008782:	4628      	mov	r0, r5
 8008784:	f7f7 fece 	bl	8000524 <__aeabi_i2d>
 8008788:	4642      	mov	r2, r8
 800878a:	464b      	mov	r3, r9
 800878c:	f7f7 ff34 	bl	80005f8 <__aeabi_dmul>
 8008790:	4b86      	ldr	r3, [pc, #536]	; (80089ac <_dtoa_r+0x64c>)
 8008792:	2200      	movs	r2, #0
 8008794:	f7f7 fd7a 	bl	800028c <__adddf3>
 8008798:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800879c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087a0:	9303      	str	r3, [sp, #12]
 80087a2:	2e00      	cmp	r6, #0
 80087a4:	d158      	bne.n	8008858 <_dtoa_r+0x4f8>
 80087a6:	4b82      	ldr	r3, [pc, #520]	; (80089b0 <_dtoa_r+0x650>)
 80087a8:	2200      	movs	r2, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f7 fd6b 	bl	8000288 <__aeabi_dsub>
 80087b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80087b6:	4680      	mov	r8, r0
 80087b8:	4689      	mov	r9, r1
 80087ba:	f7f8 f9ad 	bl	8000b18 <__aeabi_dcmpgt>
 80087be:	2800      	cmp	r0, #0
 80087c0:	f040 8296 	bne.w	8008cf0 <_dtoa_r+0x990>
 80087c4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80087c8:	4640      	mov	r0, r8
 80087ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80087ce:	4649      	mov	r1, r9
 80087d0:	f7f8 f984 	bl	8000adc <__aeabi_dcmplt>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	f040 8289 	bne.w	8008cec <_dtoa_r+0x98c>
 80087da:	ed8d 8b02 	vstr	d8, [sp, #8]
 80087de:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	f2c0 814e 	blt.w	8008a82 <_dtoa_r+0x722>
 80087e6:	f1bb 0f0e 	cmp.w	fp, #14
 80087ea:	f300 814a 	bgt.w	8008a82 <_dtoa_r+0x722>
 80087ee:	4b6b      	ldr	r3, [pc, #428]	; (800899c <_dtoa_r+0x63c>)
 80087f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80087f4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80087f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	f280 80dc 	bge.w	80089b8 <_dtoa_r+0x658>
 8008800:	9b04      	ldr	r3, [sp, #16]
 8008802:	2b00      	cmp	r3, #0
 8008804:	f300 80d8 	bgt.w	80089b8 <_dtoa_r+0x658>
 8008808:	f040 826f 	bne.w	8008cea <_dtoa_r+0x98a>
 800880c:	4b68      	ldr	r3, [pc, #416]	; (80089b0 <_dtoa_r+0x650>)
 800880e:	2200      	movs	r2, #0
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f7 fef0 	bl	80005f8 <__aeabi_dmul>
 8008818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800881c:	f7f8 f972 	bl	8000b04 <__aeabi_dcmpge>
 8008820:	9e04      	ldr	r6, [sp, #16]
 8008822:	4637      	mov	r7, r6
 8008824:	2800      	cmp	r0, #0
 8008826:	f040 8245 	bne.w	8008cb4 <_dtoa_r+0x954>
 800882a:	9d00      	ldr	r5, [sp, #0]
 800882c:	2331      	movs	r3, #49	; 0x31
 800882e:	f805 3b01 	strb.w	r3, [r5], #1
 8008832:	f10b 0b01 	add.w	fp, fp, #1
 8008836:	e241      	b.n	8008cbc <_dtoa_r+0x95c>
 8008838:	07f2      	lsls	r2, r6, #31
 800883a:	d505      	bpl.n	8008848 <_dtoa_r+0x4e8>
 800883c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008840:	f7f7 feda 	bl	80005f8 <__aeabi_dmul>
 8008844:	3501      	adds	r5, #1
 8008846:	2301      	movs	r3, #1
 8008848:	1076      	asrs	r6, r6, #1
 800884a:	3708      	adds	r7, #8
 800884c:	e773      	b.n	8008736 <_dtoa_r+0x3d6>
 800884e:	2502      	movs	r5, #2
 8008850:	e775      	b.n	800873e <_dtoa_r+0x3de>
 8008852:	9e04      	ldr	r6, [sp, #16]
 8008854:	465f      	mov	r7, fp
 8008856:	e792      	b.n	800877e <_dtoa_r+0x41e>
 8008858:	9900      	ldr	r1, [sp, #0]
 800885a:	4b50      	ldr	r3, [pc, #320]	; (800899c <_dtoa_r+0x63c>)
 800885c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008860:	4431      	add	r1, r6
 8008862:	9102      	str	r1, [sp, #8]
 8008864:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008866:	eeb0 9a47 	vmov.f32	s18, s14
 800886a:	eef0 9a67 	vmov.f32	s19, s15
 800886e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008872:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008876:	2900      	cmp	r1, #0
 8008878:	d044      	beq.n	8008904 <_dtoa_r+0x5a4>
 800887a:	494e      	ldr	r1, [pc, #312]	; (80089b4 <_dtoa_r+0x654>)
 800887c:	2000      	movs	r0, #0
 800887e:	f7f7 ffe5 	bl	800084c <__aeabi_ddiv>
 8008882:	ec53 2b19 	vmov	r2, r3, d9
 8008886:	f7f7 fcff 	bl	8000288 <__aeabi_dsub>
 800888a:	9d00      	ldr	r5, [sp, #0]
 800888c:	ec41 0b19 	vmov	d9, r0, r1
 8008890:	4649      	mov	r1, r9
 8008892:	4640      	mov	r0, r8
 8008894:	f7f8 f960 	bl	8000b58 <__aeabi_d2iz>
 8008898:	4606      	mov	r6, r0
 800889a:	f7f7 fe43 	bl	8000524 <__aeabi_i2d>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4640      	mov	r0, r8
 80088a4:	4649      	mov	r1, r9
 80088a6:	f7f7 fcef 	bl	8000288 <__aeabi_dsub>
 80088aa:	3630      	adds	r6, #48	; 0x30
 80088ac:	f805 6b01 	strb.w	r6, [r5], #1
 80088b0:	ec53 2b19 	vmov	r2, r3, d9
 80088b4:	4680      	mov	r8, r0
 80088b6:	4689      	mov	r9, r1
 80088b8:	f7f8 f910 	bl	8000adc <__aeabi_dcmplt>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d164      	bne.n	800898a <_dtoa_r+0x62a>
 80088c0:	4642      	mov	r2, r8
 80088c2:	464b      	mov	r3, r9
 80088c4:	4937      	ldr	r1, [pc, #220]	; (80089a4 <_dtoa_r+0x644>)
 80088c6:	2000      	movs	r0, #0
 80088c8:	f7f7 fcde 	bl	8000288 <__aeabi_dsub>
 80088cc:	ec53 2b19 	vmov	r2, r3, d9
 80088d0:	f7f8 f904 	bl	8000adc <__aeabi_dcmplt>
 80088d4:	2800      	cmp	r0, #0
 80088d6:	f040 80b6 	bne.w	8008a46 <_dtoa_r+0x6e6>
 80088da:	9b02      	ldr	r3, [sp, #8]
 80088dc:	429d      	cmp	r5, r3
 80088de:	f43f af7c 	beq.w	80087da <_dtoa_r+0x47a>
 80088e2:	4b31      	ldr	r3, [pc, #196]	; (80089a8 <_dtoa_r+0x648>)
 80088e4:	ec51 0b19 	vmov	r0, r1, d9
 80088e8:	2200      	movs	r2, #0
 80088ea:	f7f7 fe85 	bl	80005f8 <__aeabi_dmul>
 80088ee:	4b2e      	ldr	r3, [pc, #184]	; (80089a8 <_dtoa_r+0x648>)
 80088f0:	ec41 0b19 	vmov	d9, r0, r1
 80088f4:	2200      	movs	r2, #0
 80088f6:	4640      	mov	r0, r8
 80088f8:	4649      	mov	r1, r9
 80088fa:	f7f7 fe7d 	bl	80005f8 <__aeabi_dmul>
 80088fe:	4680      	mov	r8, r0
 8008900:	4689      	mov	r9, r1
 8008902:	e7c5      	b.n	8008890 <_dtoa_r+0x530>
 8008904:	ec51 0b17 	vmov	r0, r1, d7
 8008908:	f7f7 fe76 	bl	80005f8 <__aeabi_dmul>
 800890c:	9b02      	ldr	r3, [sp, #8]
 800890e:	9d00      	ldr	r5, [sp, #0]
 8008910:	930f      	str	r3, [sp, #60]	; 0x3c
 8008912:	ec41 0b19 	vmov	d9, r0, r1
 8008916:	4649      	mov	r1, r9
 8008918:	4640      	mov	r0, r8
 800891a:	f7f8 f91d 	bl	8000b58 <__aeabi_d2iz>
 800891e:	4606      	mov	r6, r0
 8008920:	f7f7 fe00 	bl	8000524 <__aeabi_i2d>
 8008924:	3630      	adds	r6, #48	; 0x30
 8008926:	4602      	mov	r2, r0
 8008928:	460b      	mov	r3, r1
 800892a:	4640      	mov	r0, r8
 800892c:	4649      	mov	r1, r9
 800892e:	f7f7 fcab 	bl	8000288 <__aeabi_dsub>
 8008932:	f805 6b01 	strb.w	r6, [r5], #1
 8008936:	9b02      	ldr	r3, [sp, #8]
 8008938:	429d      	cmp	r5, r3
 800893a:	4680      	mov	r8, r0
 800893c:	4689      	mov	r9, r1
 800893e:	f04f 0200 	mov.w	r2, #0
 8008942:	d124      	bne.n	800898e <_dtoa_r+0x62e>
 8008944:	4b1b      	ldr	r3, [pc, #108]	; (80089b4 <_dtoa_r+0x654>)
 8008946:	ec51 0b19 	vmov	r0, r1, d9
 800894a:	f7f7 fc9f 	bl	800028c <__adddf3>
 800894e:	4602      	mov	r2, r0
 8008950:	460b      	mov	r3, r1
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f8 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800895a:	2800      	cmp	r0, #0
 800895c:	d173      	bne.n	8008a46 <_dtoa_r+0x6e6>
 800895e:	ec53 2b19 	vmov	r2, r3, d9
 8008962:	4914      	ldr	r1, [pc, #80]	; (80089b4 <_dtoa_r+0x654>)
 8008964:	2000      	movs	r0, #0
 8008966:	f7f7 fc8f 	bl	8000288 <__aeabi_dsub>
 800896a:	4602      	mov	r2, r0
 800896c:	460b      	mov	r3, r1
 800896e:	4640      	mov	r0, r8
 8008970:	4649      	mov	r1, r9
 8008972:	f7f8 f8b3 	bl	8000adc <__aeabi_dcmplt>
 8008976:	2800      	cmp	r0, #0
 8008978:	f43f af2f 	beq.w	80087da <_dtoa_r+0x47a>
 800897c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800897e:	1e6b      	subs	r3, r5, #1
 8008980:	930f      	str	r3, [sp, #60]	; 0x3c
 8008982:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008986:	2b30      	cmp	r3, #48	; 0x30
 8008988:	d0f8      	beq.n	800897c <_dtoa_r+0x61c>
 800898a:	46bb      	mov	fp, r7
 800898c:	e04a      	b.n	8008a24 <_dtoa_r+0x6c4>
 800898e:	4b06      	ldr	r3, [pc, #24]	; (80089a8 <_dtoa_r+0x648>)
 8008990:	f7f7 fe32 	bl	80005f8 <__aeabi_dmul>
 8008994:	4680      	mov	r8, r0
 8008996:	4689      	mov	r9, r1
 8008998:	e7bd      	b.n	8008916 <_dtoa_r+0x5b6>
 800899a:	bf00      	nop
 800899c:	0800a528 	.word	0x0800a528
 80089a0:	0800a500 	.word	0x0800a500
 80089a4:	3ff00000 	.word	0x3ff00000
 80089a8:	40240000 	.word	0x40240000
 80089ac:	401c0000 	.word	0x401c0000
 80089b0:	40140000 	.word	0x40140000
 80089b4:	3fe00000 	.word	0x3fe00000
 80089b8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80089bc:	9d00      	ldr	r5, [sp, #0]
 80089be:	4642      	mov	r2, r8
 80089c0:	464b      	mov	r3, r9
 80089c2:	4630      	mov	r0, r6
 80089c4:	4639      	mov	r1, r7
 80089c6:	f7f7 ff41 	bl	800084c <__aeabi_ddiv>
 80089ca:	f7f8 f8c5 	bl	8000b58 <__aeabi_d2iz>
 80089ce:	9001      	str	r0, [sp, #4]
 80089d0:	f7f7 fda8 	bl	8000524 <__aeabi_i2d>
 80089d4:	4642      	mov	r2, r8
 80089d6:	464b      	mov	r3, r9
 80089d8:	f7f7 fe0e 	bl	80005f8 <__aeabi_dmul>
 80089dc:	4602      	mov	r2, r0
 80089de:	460b      	mov	r3, r1
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f7 fc50 	bl	8000288 <__aeabi_dsub>
 80089e8:	9e01      	ldr	r6, [sp, #4]
 80089ea:	9f04      	ldr	r7, [sp, #16]
 80089ec:	3630      	adds	r6, #48	; 0x30
 80089ee:	f805 6b01 	strb.w	r6, [r5], #1
 80089f2:	9e00      	ldr	r6, [sp, #0]
 80089f4:	1bae      	subs	r6, r5, r6
 80089f6:	42b7      	cmp	r7, r6
 80089f8:	4602      	mov	r2, r0
 80089fa:	460b      	mov	r3, r1
 80089fc:	d134      	bne.n	8008a68 <_dtoa_r+0x708>
 80089fe:	f7f7 fc45 	bl	800028c <__adddf3>
 8008a02:	4642      	mov	r2, r8
 8008a04:	464b      	mov	r3, r9
 8008a06:	4606      	mov	r6, r0
 8008a08:	460f      	mov	r7, r1
 8008a0a:	f7f8 f885 	bl	8000b18 <__aeabi_dcmpgt>
 8008a0e:	b9c8      	cbnz	r0, 8008a44 <_dtoa_r+0x6e4>
 8008a10:	4642      	mov	r2, r8
 8008a12:	464b      	mov	r3, r9
 8008a14:	4630      	mov	r0, r6
 8008a16:	4639      	mov	r1, r7
 8008a18:	f7f8 f856 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a1c:	b110      	cbz	r0, 8008a24 <_dtoa_r+0x6c4>
 8008a1e:	9b01      	ldr	r3, [sp, #4]
 8008a20:	07db      	lsls	r3, r3, #31
 8008a22:	d40f      	bmi.n	8008a44 <_dtoa_r+0x6e4>
 8008a24:	4651      	mov	r1, sl
 8008a26:	4620      	mov	r0, r4
 8008a28:	f000 fbcc 	bl	80091c4 <_Bfree>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a30:	702b      	strb	r3, [r5, #0]
 8008a32:	f10b 0301 	add.w	r3, fp, #1
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	f43f ace2 	beq.w	8008404 <_dtoa_r+0xa4>
 8008a40:	601d      	str	r5, [r3, #0]
 8008a42:	e4df      	b.n	8008404 <_dtoa_r+0xa4>
 8008a44:	465f      	mov	r7, fp
 8008a46:	462b      	mov	r3, r5
 8008a48:	461d      	mov	r5, r3
 8008a4a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008a4e:	2a39      	cmp	r2, #57	; 0x39
 8008a50:	d106      	bne.n	8008a60 <_dtoa_r+0x700>
 8008a52:	9a00      	ldr	r2, [sp, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d1f7      	bne.n	8008a48 <_dtoa_r+0x6e8>
 8008a58:	9900      	ldr	r1, [sp, #0]
 8008a5a:	2230      	movs	r2, #48	; 0x30
 8008a5c:	3701      	adds	r7, #1
 8008a5e:	700a      	strb	r2, [r1, #0]
 8008a60:	781a      	ldrb	r2, [r3, #0]
 8008a62:	3201      	adds	r2, #1
 8008a64:	701a      	strb	r2, [r3, #0]
 8008a66:	e790      	b.n	800898a <_dtoa_r+0x62a>
 8008a68:	4ba3      	ldr	r3, [pc, #652]	; (8008cf8 <_dtoa_r+0x998>)
 8008a6a:	2200      	movs	r2, #0
 8008a6c:	f7f7 fdc4 	bl	80005f8 <__aeabi_dmul>
 8008a70:	2200      	movs	r2, #0
 8008a72:	2300      	movs	r3, #0
 8008a74:	4606      	mov	r6, r0
 8008a76:	460f      	mov	r7, r1
 8008a78:	f7f8 f826 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a7c:	2800      	cmp	r0, #0
 8008a7e:	d09e      	beq.n	80089be <_dtoa_r+0x65e>
 8008a80:	e7d0      	b.n	8008a24 <_dtoa_r+0x6c4>
 8008a82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a84:	2a00      	cmp	r2, #0
 8008a86:	f000 80ca 	beq.w	8008c1e <_dtoa_r+0x8be>
 8008a8a:	9a07      	ldr	r2, [sp, #28]
 8008a8c:	2a01      	cmp	r2, #1
 8008a8e:	f300 80ad 	bgt.w	8008bec <_dtoa_r+0x88c>
 8008a92:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a94:	2a00      	cmp	r2, #0
 8008a96:	f000 80a5 	beq.w	8008be4 <_dtoa_r+0x884>
 8008a9a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008a9e:	9e08      	ldr	r6, [sp, #32]
 8008aa0:	9d05      	ldr	r5, [sp, #20]
 8008aa2:	9a05      	ldr	r2, [sp, #20]
 8008aa4:	441a      	add	r2, r3
 8008aa6:	9205      	str	r2, [sp, #20]
 8008aa8:	9a06      	ldr	r2, [sp, #24]
 8008aaa:	2101      	movs	r1, #1
 8008aac:	441a      	add	r2, r3
 8008aae:	4620      	mov	r0, r4
 8008ab0:	9206      	str	r2, [sp, #24]
 8008ab2:	f000 fc3d 	bl	8009330 <__i2b>
 8008ab6:	4607      	mov	r7, r0
 8008ab8:	b165      	cbz	r5, 8008ad4 <_dtoa_r+0x774>
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dd09      	ble.n	8008ad4 <_dtoa_r+0x774>
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	9a05      	ldr	r2, [sp, #20]
 8008ac4:	bfa8      	it	ge
 8008ac6:	462b      	movge	r3, r5
 8008ac8:	1ad2      	subs	r2, r2, r3
 8008aca:	9205      	str	r2, [sp, #20]
 8008acc:	9a06      	ldr	r2, [sp, #24]
 8008ace:	1aed      	subs	r5, r5, r3
 8008ad0:	1ad3      	subs	r3, r2, r3
 8008ad2:	9306      	str	r3, [sp, #24]
 8008ad4:	9b08      	ldr	r3, [sp, #32]
 8008ad6:	b1f3      	cbz	r3, 8008b16 <_dtoa_r+0x7b6>
 8008ad8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f000 80a3 	beq.w	8008c26 <_dtoa_r+0x8c6>
 8008ae0:	2e00      	cmp	r6, #0
 8008ae2:	dd10      	ble.n	8008b06 <_dtoa_r+0x7a6>
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4632      	mov	r2, r6
 8008ae8:	4620      	mov	r0, r4
 8008aea:	f000 fce1 	bl	80094b0 <__pow5mult>
 8008aee:	4652      	mov	r2, sl
 8008af0:	4601      	mov	r1, r0
 8008af2:	4607      	mov	r7, r0
 8008af4:	4620      	mov	r0, r4
 8008af6:	f000 fc31 	bl	800935c <__multiply>
 8008afa:	4651      	mov	r1, sl
 8008afc:	4680      	mov	r8, r0
 8008afe:	4620      	mov	r0, r4
 8008b00:	f000 fb60 	bl	80091c4 <_Bfree>
 8008b04:	46c2      	mov	sl, r8
 8008b06:	9b08      	ldr	r3, [sp, #32]
 8008b08:	1b9a      	subs	r2, r3, r6
 8008b0a:	d004      	beq.n	8008b16 <_dtoa_r+0x7b6>
 8008b0c:	4651      	mov	r1, sl
 8008b0e:	4620      	mov	r0, r4
 8008b10:	f000 fcce 	bl	80094b0 <__pow5mult>
 8008b14:	4682      	mov	sl, r0
 8008b16:	2101      	movs	r1, #1
 8008b18:	4620      	mov	r0, r4
 8008b1a:	f000 fc09 	bl	8009330 <__i2b>
 8008b1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	4606      	mov	r6, r0
 8008b24:	f340 8081 	ble.w	8008c2a <_dtoa_r+0x8ca>
 8008b28:	461a      	mov	r2, r3
 8008b2a:	4601      	mov	r1, r0
 8008b2c:	4620      	mov	r0, r4
 8008b2e:	f000 fcbf 	bl	80094b0 <__pow5mult>
 8008b32:	9b07      	ldr	r3, [sp, #28]
 8008b34:	2b01      	cmp	r3, #1
 8008b36:	4606      	mov	r6, r0
 8008b38:	dd7a      	ble.n	8008c30 <_dtoa_r+0x8d0>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	6933      	ldr	r3, [r6, #16]
 8008b40:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008b44:	6918      	ldr	r0, [r3, #16]
 8008b46:	f000 fba5 	bl	8009294 <__hi0bits>
 8008b4a:	f1c0 0020 	rsb	r0, r0, #32
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	4418      	add	r0, r3
 8008b52:	f010 001f 	ands.w	r0, r0, #31
 8008b56:	f000 8094 	beq.w	8008c82 <_dtoa_r+0x922>
 8008b5a:	f1c0 0320 	rsb	r3, r0, #32
 8008b5e:	2b04      	cmp	r3, #4
 8008b60:	f340 8085 	ble.w	8008c6e <_dtoa_r+0x90e>
 8008b64:	9b05      	ldr	r3, [sp, #20]
 8008b66:	f1c0 001c 	rsb	r0, r0, #28
 8008b6a:	4403      	add	r3, r0
 8008b6c:	9305      	str	r3, [sp, #20]
 8008b6e:	9b06      	ldr	r3, [sp, #24]
 8008b70:	4403      	add	r3, r0
 8008b72:	4405      	add	r5, r0
 8008b74:	9306      	str	r3, [sp, #24]
 8008b76:	9b05      	ldr	r3, [sp, #20]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dd05      	ble.n	8008b88 <_dtoa_r+0x828>
 8008b7c:	4651      	mov	r1, sl
 8008b7e:	461a      	mov	r2, r3
 8008b80:	4620      	mov	r0, r4
 8008b82:	f000 fcef 	bl	8009564 <__lshift>
 8008b86:	4682      	mov	sl, r0
 8008b88:	9b06      	ldr	r3, [sp, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	dd05      	ble.n	8008b9a <_dtoa_r+0x83a>
 8008b8e:	4631      	mov	r1, r6
 8008b90:	461a      	mov	r2, r3
 8008b92:	4620      	mov	r0, r4
 8008b94:	f000 fce6 	bl	8009564 <__lshift>
 8008b98:	4606      	mov	r6, r0
 8008b9a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d072      	beq.n	8008c86 <_dtoa_r+0x926>
 8008ba0:	4631      	mov	r1, r6
 8008ba2:	4650      	mov	r0, sl
 8008ba4:	f000 fd4a 	bl	800963c <__mcmp>
 8008ba8:	2800      	cmp	r0, #0
 8008baa:	da6c      	bge.n	8008c86 <_dtoa_r+0x926>
 8008bac:	2300      	movs	r3, #0
 8008bae:	4651      	mov	r1, sl
 8008bb0:	220a      	movs	r2, #10
 8008bb2:	4620      	mov	r0, r4
 8008bb4:	f000 fb28 	bl	8009208 <__multadd>
 8008bb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008bba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008bbe:	4682      	mov	sl, r0
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	f000 81b0 	beq.w	8008f26 <_dtoa_r+0xbc6>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	4639      	mov	r1, r7
 8008bca:	220a      	movs	r2, #10
 8008bcc:	4620      	mov	r0, r4
 8008bce:	f000 fb1b 	bl	8009208 <__multadd>
 8008bd2:	9b01      	ldr	r3, [sp, #4]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	4607      	mov	r7, r0
 8008bd8:	f300 8096 	bgt.w	8008d08 <_dtoa_r+0x9a8>
 8008bdc:	9b07      	ldr	r3, [sp, #28]
 8008bde:	2b02      	cmp	r3, #2
 8008be0:	dc59      	bgt.n	8008c96 <_dtoa_r+0x936>
 8008be2:	e091      	b.n	8008d08 <_dtoa_r+0x9a8>
 8008be4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008be6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008bea:	e758      	b.n	8008a9e <_dtoa_r+0x73e>
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	1e5e      	subs	r6, r3, #1
 8008bf0:	9b08      	ldr	r3, [sp, #32]
 8008bf2:	42b3      	cmp	r3, r6
 8008bf4:	bfbf      	itttt	lt
 8008bf6:	9b08      	ldrlt	r3, [sp, #32]
 8008bf8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8008bfa:	9608      	strlt	r6, [sp, #32]
 8008bfc:	1af3      	sublt	r3, r6, r3
 8008bfe:	bfb4      	ite	lt
 8008c00:	18d2      	addlt	r2, r2, r3
 8008c02:	1b9e      	subge	r6, r3, r6
 8008c04:	9b04      	ldr	r3, [sp, #16]
 8008c06:	bfbc      	itt	lt
 8008c08:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8008c0a:	2600      	movlt	r6, #0
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	bfb7      	itett	lt
 8008c10:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8008c14:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8008c18:	1a9d      	sublt	r5, r3, r2
 8008c1a:	2300      	movlt	r3, #0
 8008c1c:	e741      	b.n	8008aa2 <_dtoa_r+0x742>
 8008c1e:	9e08      	ldr	r6, [sp, #32]
 8008c20:	9d05      	ldr	r5, [sp, #20]
 8008c22:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8008c24:	e748      	b.n	8008ab8 <_dtoa_r+0x758>
 8008c26:	9a08      	ldr	r2, [sp, #32]
 8008c28:	e770      	b.n	8008b0c <_dtoa_r+0x7ac>
 8008c2a:	9b07      	ldr	r3, [sp, #28]
 8008c2c:	2b01      	cmp	r3, #1
 8008c2e:	dc19      	bgt.n	8008c64 <_dtoa_r+0x904>
 8008c30:	9b02      	ldr	r3, [sp, #8]
 8008c32:	b9bb      	cbnz	r3, 8008c64 <_dtoa_r+0x904>
 8008c34:	9b03      	ldr	r3, [sp, #12]
 8008c36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c3a:	b99b      	cbnz	r3, 8008c64 <_dtoa_r+0x904>
 8008c3c:	9b03      	ldr	r3, [sp, #12]
 8008c3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c42:	0d1b      	lsrs	r3, r3, #20
 8008c44:	051b      	lsls	r3, r3, #20
 8008c46:	b183      	cbz	r3, 8008c6a <_dtoa_r+0x90a>
 8008c48:	9b05      	ldr	r3, [sp, #20]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	9305      	str	r3, [sp, #20]
 8008c4e:	9b06      	ldr	r3, [sp, #24]
 8008c50:	3301      	adds	r3, #1
 8008c52:	9306      	str	r3, [sp, #24]
 8008c54:	f04f 0801 	mov.w	r8, #1
 8008c58:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f47f af6f 	bne.w	8008b3e <_dtoa_r+0x7de>
 8008c60:	2001      	movs	r0, #1
 8008c62:	e774      	b.n	8008b4e <_dtoa_r+0x7ee>
 8008c64:	f04f 0800 	mov.w	r8, #0
 8008c68:	e7f6      	b.n	8008c58 <_dtoa_r+0x8f8>
 8008c6a:	4698      	mov	r8, r3
 8008c6c:	e7f4      	b.n	8008c58 <_dtoa_r+0x8f8>
 8008c6e:	d082      	beq.n	8008b76 <_dtoa_r+0x816>
 8008c70:	9a05      	ldr	r2, [sp, #20]
 8008c72:	331c      	adds	r3, #28
 8008c74:	441a      	add	r2, r3
 8008c76:	9205      	str	r2, [sp, #20]
 8008c78:	9a06      	ldr	r2, [sp, #24]
 8008c7a:	441a      	add	r2, r3
 8008c7c:	441d      	add	r5, r3
 8008c7e:	9206      	str	r2, [sp, #24]
 8008c80:	e779      	b.n	8008b76 <_dtoa_r+0x816>
 8008c82:	4603      	mov	r3, r0
 8008c84:	e7f4      	b.n	8008c70 <_dtoa_r+0x910>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	dc37      	bgt.n	8008cfc <_dtoa_r+0x99c>
 8008c8c:	9b07      	ldr	r3, [sp, #28]
 8008c8e:	2b02      	cmp	r3, #2
 8008c90:	dd34      	ble.n	8008cfc <_dtoa_r+0x99c>
 8008c92:	9b04      	ldr	r3, [sp, #16]
 8008c94:	9301      	str	r3, [sp, #4]
 8008c96:	9b01      	ldr	r3, [sp, #4]
 8008c98:	b963      	cbnz	r3, 8008cb4 <_dtoa_r+0x954>
 8008c9a:	4631      	mov	r1, r6
 8008c9c:	2205      	movs	r2, #5
 8008c9e:	4620      	mov	r0, r4
 8008ca0:	f000 fab2 	bl	8009208 <__multadd>
 8008ca4:	4601      	mov	r1, r0
 8008ca6:	4606      	mov	r6, r0
 8008ca8:	4650      	mov	r0, sl
 8008caa:	f000 fcc7 	bl	800963c <__mcmp>
 8008cae:	2800      	cmp	r0, #0
 8008cb0:	f73f adbb 	bgt.w	800882a <_dtoa_r+0x4ca>
 8008cb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb6:	9d00      	ldr	r5, [sp, #0]
 8008cb8:	ea6f 0b03 	mvn.w	fp, r3
 8008cbc:	f04f 0800 	mov.w	r8, #0
 8008cc0:	4631      	mov	r1, r6
 8008cc2:	4620      	mov	r0, r4
 8008cc4:	f000 fa7e 	bl	80091c4 <_Bfree>
 8008cc8:	2f00      	cmp	r7, #0
 8008cca:	f43f aeab 	beq.w	8008a24 <_dtoa_r+0x6c4>
 8008cce:	f1b8 0f00 	cmp.w	r8, #0
 8008cd2:	d005      	beq.n	8008ce0 <_dtoa_r+0x980>
 8008cd4:	45b8      	cmp	r8, r7
 8008cd6:	d003      	beq.n	8008ce0 <_dtoa_r+0x980>
 8008cd8:	4641      	mov	r1, r8
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fa72 	bl	80091c4 <_Bfree>
 8008ce0:	4639      	mov	r1, r7
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f000 fa6e 	bl	80091c4 <_Bfree>
 8008ce8:	e69c      	b.n	8008a24 <_dtoa_r+0x6c4>
 8008cea:	2600      	movs	r6, #0
 8008cec:	4637      	mov	r7, r6
 8008cee:	e7e1      	b.n	8008cb4 <_dtoa_r+0x954>
 8008cf0:	46bb      	mov	fp, r7
 8008cf2:	4637      	mov	r7, r6
 8008cf4:	e599      	b.n	800882a <_dtoa_r+0x4ca>
 8008cf6:	bf00      	nop
 8008cf8:	40240000 	.word	0x40240000
 8008cfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	f000 80c8 	beq.w	8008e94 <_dtoa_r+0xb34>
 8008d04:	9b04      	ldr	r3, [sp, #16]
 8008d06:	9301      	str	r3, [sp, #4]
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	dd05      	ble.n	8008d18 <_dtoa_r+0x9b8>
 8008d0c:	4639      	mov	r1, r7
 8008d0e:	462a      	mov	r2, r5
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 fc27 	bl	8009564 <__lshift>
 8008d16:	4607      	mov	r7, r0
 8008d18:	f1b8 0f00 	cmp.w	r8, #0
 8008d1c:	d05b      	beq.n	8008dd6 <_dtoa_r+0xa76>
 8008d1e:	6879      	ldr	r1, [r7, #4]
 8008d20:	4620      	mov	r0, r4
 8008d22:	f000 fa0f 	bl	8009144 <_Balloc>
 8008d26:	4605      	mov	r5, r0
 8008d28:	b928      	cbnz	r0, 8008d36 <_dtoa_r+0x9d6>
 8008d2a:	4b83      	ldr	r3, [pc, #524]	; (8008f38 <_dtoa_r+0xbd8>)
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8008d32:	f7ff bb2e 	b.w	8008392 <_dtoa_r+0x32>
 8008d36:	693a      	ldr	r2, [r7, #16]
 8008d38:	3202      	adds	r2, #2
 8008d3a:	0092      	lsls	r2, r2, #2
 8008d3c:	f107 010c 	add.w	r1, r7, #12
 8008d40:	300c      	adds	r0, #12
 8008d42:	f000 ffab 	bl	8009c9c <memcpy>
 8008d46:	2201      	movs	r2, #1
 8008d48:	4629      	mov	r1, r5
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f000 fc0a 	bl	8009564 <__lshift>
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	3301      	adds	r3, #1
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008d5a:	4413      	add	r3, r2
 8008d5c:	9308      	str	r3, [sp, #32]
 8008d5e:	9b02      	ldr	r3, [sp, #8]
 8008d60:	f003 0301 	and.w	r3, r3, #1
 8008d64:	46b8      	mov	r8, r7
 8008d66:	9306      	str	r3, [sp, #24]
 8008d68:	4607      	mov	r7, r0
 8008d6a:	9b04      	ldr	r3, [sp, #16]
 8008d6c:	4631      	mov	r1, r6
 8008d6e:	3b01      	subs	r3, #1
 8008d70:	4650      	mov	r0, sl
 8008d72:	9301      	str	r3, [sp, #4]
 8008d74:	f7ff fa69 	bl	800824a <quorem>
 8008d78:	4641      	mov	r1, r8
 8008d7a:	9002      	str	r0, [sp, #8]
 8008d7c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008d80:	4650      	mov	r0, sl
 8008d82:	f000 fc5b 	bl	800963c <__mcmp>
 8008d86:	463a      	mov	r2, r7
 8008d88:	9005      	str	r0, [sp, #20]
 8008d8a:	4631      	mov	r1, r6
 8008d8c:	4620      	mov	r0, r4
 8008d8e:	f000 fc71 	bl	8009674 <__mdiff>
 8008d92:	68c2      	ldr	r2, [r0, #12]
 8008d94:	4605      	mov	r5, r0
 8008d96:	bb02      	cbnz	r2, 8008dda <_dtoa_r+0xa7a>
 8008d98:	4601      	mov	r1, r0
 8008d9a:	4650      	mov	r0, sl
 8008d9c:	f000 fc4e 	bl	800963c <__mcmp>
 8008da0:	4602      	mov	r2, r0
 8008da2:	4629      	mov	r1, r5
 8008da4:	4620      	mov	r0, r4
 8008da6:	9209      	str	r2, [sp, #36]	; 0x24
 8008da8:	f000 fa0c 	bl	80091c4 <_Bfree>
 8008dac:	9b07      	ldr	r3, [sp, #28]
 8008dae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008db0:	9d04      	ldr	r5, [sp, #16]
 8008db2:	ea43 0102 	orr.w	r1, r3, r2
 8008db6:	9b06      	ldr	r3, [sp, #24]
 8008db8:	4319      	orrs	r1, r3
 8008dba:	d110      	bne.n	8008dde <_dtoa_r+0xa7e>
 8008dbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008dc0:	d029      	beq.n	8008e16 <_dtoa_r+0xab6>
 8008dc2:	9b05      	ldr	r3, [sp, #20]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	dd02      	ble.n	8008dce <_dtoa_r+0xa6e>
 8008dc8:	9b02      	ldr	r3, [sp, #8]
 8008dca:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8008dce:	9b01      	ldr	r3, [sp, #4]
 8008dd0:	f883 9000 	strb.w	r9, [r3]
 8008dd4:	e774      	b.n	8008cc0 <_dtoa_r+0x960>
 8008dd6:	4638      	mov	r0, r7
 8008dd8:	e7ba      	b.n	8008d50 <_dtoa_r+0x9f0>
 8008dda:	2201      	movs	r2, #1
 8008ddc:	e7e1      	b.n	8008da2 <_dtoa_r+0xa42>
 8008dde:	9b05      	ldr	r3, [sp, #20]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	db04      	blt.n	8008dee <_dtoa_r+0xa8e>
 8008de4:	9907      	ldr	r1, [sp, #28]
 8008de6:	430b      	orrs	r3, r1
 8008de8:	9906      	ldr	r1, [sp, #24]
 8008dea:	430b      	orrs	r3, r1
 8008dec:	d120      	bne.n	8008e30 <_dtoa_r+0xad0>
 8008dee:	2a00      	cmp	r2, #0
 8008df0:	dded      	ble.n	8008dce <_dtoa_r+0xa6e>
 8008df2:	4651      	mov	r1, sl
 8008df4:	2201      	movs	r2, #1
 8008df6:	4620      	mov	r0, r4
 8008df8:	f000 fbb4 	bl	8009564 <__lshift>
 8008dfc:	4631      	mov	r1, r6
 8008dfe:	4682      	mov	sl, r0
 8008e00:	f000 fc1c 	bl	800963c <__mcmp>
 8008e04:	2800      	cmp	r0, #0
 8008e06:	dc03      	bgt.n	8008e10 <_dtoa_r+0xab0>
 8008e08:	d1e1      	bne.n	8008dce <_dtoa_r+0xa6e>
 8008e0a:	f019 0f01 	tst.w	r9, #1
 8008e0e:	d0de      	beq.n	8008dce <_dtoa_r+0xa6e>
 8008e10:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e14:	d1d8      	bne.n	8008dc8 <_dtoa_r+0xa68>
 8008e16:	9a01      	ldr	r2, [sp, #4]
 8008e18:	2339      	movs	r3, #57	; 0x39
 8008e1a:	7013      	strb	r3, [r2, #0]
 8008e1c:	462b      	mov	r3, r5
 8008e1e:	461d      	mov	r5, r3
 8008e20:	3b01      	subs	r3, #1
 8008e22:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008e26:	2a39      	cmp	r2, #57	; 0x39
 8008e28:	d06c      	beq.n	8008f04 <_dtoa_r+0xba4>
 8008e2a:	3201      	adds	r2, #1
 8008e2c:	701a      	strb	r2, [r3, #0]
 8008e2e:	e747      	b.n	8008cc0 <_dtoa_r+0x960>
 8008e30:	2a00      	cmp	r2, #0
 8008e32:	dd07      	ble.n	8008e44 <_dtoa_r+0xae4>
 8008e34:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8008e38:	d0ed      	beq.n	8008e16 <_dtoa_r+0xab6>
 8008e3a:	9a01      	ldr	r2, [sp, #4]
 8008e3c:	f109 0301 	add.w	r3, r9, #1
 8008e40:	7013      	strb	r3, [r2, #0]
 8008e42:	e73d      	b.n	8008cc0 <_dtoa_r+0x960>
 8008e44:	9b04      	ldr	r3, [sp, #16]
 8008e46:	9a08      	ldr	r2, [sp, #32]
 8008e48:	f803 9c01 	strb.w	r9, [r3, #-1]
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d043      	beq.n	8008ed8 <_dtoa_r+0xb78>
 8008e50:	4651      	mov	r1, sl
 8008e52:	2300      	movs	r3, #0
 8008e54:	220a      	movs	r2, #10
 8008e56:	4620      	mov	r0, r4
 8008e58:	f000 f9d6 	bl	8009208 <__multadd>
 8008e5c:	45b8      	cmp	r8, r7
 8008e5e:	4682      	mov	sl, r0
 8008e60:	f04f 0300 	mov.w	r3, #0
 8008e64:	f04f 020a 	mov.w	r2, #10
 8008e68:	4641      	mov	r1, r8
 8008e6a:	4620      	mov	r0, r4
 8008e6c:	d107      	bne.n	8008e7e <_dtoa_r+0xb1e>
 8008e6e:	f000 f9cb 	bl	8009208 <__multadd>
 8008e72:	4680      	mov	r8, r0
 8008e74:	4607      	mov	r7, r0
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	e775      	b.n	8008d6a <_dtoa_r+0xa0a>
 8008e7e:	f000 f9c3 	bl	8009208 <__multadd>
 8008e82:	4639      	mov	r1, r7
 8008e84:	4680      	mov	r8, r0
 8008e86:	2300      	movs	r3, #0
 8008e88:	220a      	movs	r2, #10
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 f9bc 	bl	8009208 <__multadd>
 8008e90:	4607      	mov	r7, r0
 8008e92:	e7f0      	b.n	8008e76 <_dtoa_r+0xb16>
 8008e94:	9b04      	ldr	r3, [sp, #16]
 8008e96:	9301      	str	r3, [sp, #4]
 8008e98:	9d00      	ldr	r5, [sp, #0]
 8008e9a:	4631      	mov	r1, r6
 8008e9c:	4650      	mov	r0, sl
 8008e9e:	f7ff f9d4 	bl	800824a <quorem>
 8008ea2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8008ea6:	9b00      	ldr	r3, [sp, #0]
 8008ea8:	f805 9b01 	strb.w	r9, [r5], #1
 8008eac:	1aea      	subs	r2, r5, r3
 8008eae:	9b01      	ldr	r3, [sp, #4]
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	dd07      	ble.n	8008ec4 <_dtoa_r+0xb64>
 8008eb4:	4651      	mov	r1, sl
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	220a      	movs	r2, #10
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f000 f9a4 	bl	8009208 <__multadd>
 8008ec0:	4682      	mov	sl, r0
 8008ec2:	e7ea      	b.n	8008e9a <_dtoa_r+0xb3a>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	bfc8      	it	gt
 8008eca:	461d      	movgt	r5, r3
 8008ecc:	9b00      	ldr	r3, [sp, #0]
 8008ece:	bfd8      	it	le
 8008ed0:	2501      	movle	r5, #1
 8008ed2:	441d      	add	r5, r3
 8008ed4:	f04f 0800 	mov.w	r8, #0
 8008ed8:	4651      	mov	r1, sl
 8008eda:	2201      	movs	r2, #1
 8008edc:	4620      	mov	r0, r4
 8008ede:	f000 fb41 	bl	8009564 <__lshift>
 8008ee2:	4631      	mov	r1, r6
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	f000 fba9 	bl	800963c <__mcmp>
 8008eea:	2800      	cmp	r0, #0
 8008eec:	dc96      	bgt.n	8008e1c <_dtoa_r+0xabc>
 8008eee:	d102      	bne.n	8008ef6 <_dtoa_r+0xb96>
 8008ef0:	f019 0f01 	tst.w	r9, #1
 8008ef4:	d192      	bne.n	8008e1c <_dtoa_r+0xabc>
 8008ef6:	462b      	mov	r3, r5
 8008ef8:	461d      	mov	r5, r3
 8008efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efe:	2a30      	cmp	r2, #48	; 0x30
 8008f00:	d0fa      	beq.n	8008ef8 <_dtoa_r+0xb98>
 8008f02:	e6dd      	b.n	8008cc0 <_dtoa_r+0x960>
 8008f04:	9a00      	ldr	r2, [sp, #0]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d189      	bne.n	8008e1e <_dtoa_r+0xabe>
 8008f0a:	f10b 0b01 	add.w	fp, fp, #1
 8008f0e:	2331      	movs	r3, #49	; 0x31
 8008f10:	e796      	b.n	8008e40 <_dtoa_r+0xae0>
 8008f12:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <_dtoa_r+0xbdc>)
 8008f14:	f7ff ba99 	b.w	800844a <_dtoa_r+0xea>
 8008f18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	f47f aa6d 	bne.w	80083fa <_dtoa_r+0x9a>
 8008f20:	4b07      	ldr	r3, [pc, #28]	; (8008f40 <_dtoa_r+0xbe0>)
 8008f22:	f7ff ba92 	b.w	800844a <_dtoa_r+0xea>
 8008f26:	9b01      	ldr	r3, [sp, #4]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dcb5      	bgt.n	8008e98 <_dtoa_r+0xb38>
 8008f2c:	9b07      	ldr	r3, [sp, #28]
 8008f2e:	2b02      	cmp	r3, #2
 8008f30:	f73f aeb1 	bgt.w	8008c96 <_dtoa_r+0x936>
 8008f34:	e7b0      	b.n	8008e98 <_dtoa_r+0xb38>
 8008f36:	bf00      	nop
 8008f38:	0800a490 	.word	0x0800a490
 8008f3c:	0800a3f0 	.word	0x0800a3f0
 8008f40:	0800a414 	.word	0x0800a414

08008f44 <_free_r>:
 8008f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f46:	2900      	cmp	r1, #0
 8008f48:	d044      	beq.n	8008fd4 <_free_r+0x90>
 8008f4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f4e:	9001      	str	r0, [sp, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	f1a1 0404 	sub.w	r4, r1, #4
 8008f56:	bfb8      	it	lt
 8008f58:	18e4      	addlt	r4, r4, r3
 8008f5a:	f000 f8e7 	bl	800912c <__malloc_lock>
 8008f5e:	4a1e      	ldr	r2, [pc, #120]	; (8008fd8 <_free_r+0x94>)
 8008f60:	9801      	ldr	r0, [sp, #4]
 8008f62:	6813      	ldr	r3, [r2, #0]
 8008f64:	b933      	cbnz	r3, 8008f74 <_free_r+0x30>
 8008f66:	6063      	str	r3, [r4, #4]
 8008f68:	6014      	str	r4, [r2, #0]
 8008f6a:	b003      	add	sp, #12
 8008f6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f70:	f000 b8e2 	b.w	8009138 <__malloc_unlock>
 8008f74:	42a3      	cmp	r3, r4
 8008f76:	d908      	bls.n	8008f8a <_free_r+0x46>
 8008f78:	6825      	ldr	r5, [r4, #0]
 8008f7a:	1961      	adds	r1, r4, r5
 8008f7c:	428b      	cmp	r3, r1
 8008f7e:	bf01      	itttt	eq
 8008f80:	6819      	ldreq	r1, [r3, #0]
 8008f82:	685b      	ldreq	r3, [r3, #4]
 8008f84:	1949      	addeq	r1, r1, r5
 8008f86:	6021      	streq	r1, [r4, #0]
 8008f88:	e7ed      	b.n	8008f66 <_free_r+0x22>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x50>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x46>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1855      	adds	r5, r2, r1
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x70>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	4421      	add	r1, r4
 8008fa0:	1854      	adds	r4, r2, r1
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1e0      	bne.n	8008f6a <_free_r+0x26>
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	6053      	str	r3, [r2, #4]
 8008fae:	440c      	add	r4, r1
 8008fb0:	6014      	str	r4, [r2, #0]
 8008fb2:	e7da      	b.n	8008f6a <_free_r+0x26>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x78>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	e7d6      	b.n	8008f6a <_free_r+0x26>
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	1961      	adds	r1, r4, r5
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf04      	itt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	bf04      	itt	eq
 8008fcc:	1949      	addeq	r1, r1, r5
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	6054      	str	r4, [r2, #4]
 8008fd2:	e7ca      	b.n	8008f6a <_free_r+0x26>
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	200005b0 	.word	0x200005b0

08008fdc <malloc>:
 8008fdc:	4b02      	ldr	r3, [pc, #8]	; (8008fe8 <malloc+0xc>)
 8008fde:	4601      	mov	r1, r0
 8008fe0:	6818      	ldr	r0, [r3, #0]
 8008fe2:	f000 b823 	b.w	800902c <_malloc_r>
 8008fe6:	bf00      	nop
 8008fe8:	20000068 	.word	0x20000068

08008fec <sbrk_aligned>:
 8008fec:	b570      	push	{r4, r5, r6, lr}
 8008fee:	4e0e      	ldr	r6, [pc, #56]	; (8009028 <sbrk_aligned+0x3c>)
 8008ff0:	460c      	mov	r4, r1
 8008ff2:	6831      	ldr	r1, [r6, #0]
 8008ff4:	4605      	mov	r5, r0
 8008ff6:	b911      	cbnz	r1, 8008ffe <sbrk_aligned+0x12>
 8008ff8:	f000 fe40 	bl	8009c7c <_sbrk_r>
 8008ffc:	6030      	str	r0, [r6, #0]
 8008ffe:	4621      	mov	r1, r4
 8009000:	4628      	mov	r0, r5
 8009002:	f000 fe3b 	bl	8009c7c <_sbrk_r>
 8009006:	1c43      	adds	r3, r0, #1
 8009008:	d00a      	beq.n	8009020 <sbrk_aligned+0x34>
 800900a:	1cc4      	adds	r4, r0, #3
 800900c:	f024 0403 	bic.w	r4, r4, #3
 8009010:	42a0      	cmp	r0, r4
 8009012:	d007      	beq.n	8009024 <sbrk_aligned+0x38>
 8009014:	1a21      	subs	r1, r4, r0
 8009016:	4628      	mov	r0, r5
 8009018:	f000 fe30 	bl	8009c7c <_sbrk_r>
 800901c:	3001      	adds	r0, #1
 800901e:	d101      	bne.n	8009024 <sbrk_aligned+0x38>
 8009020:	f04f 34ff 	mov.w	r4, #4294967295
 8009024:	4620      	mov	r0, r4
 8009026:	bd70      	pop	{r4, r5, r6, pc}
 8009028:	200005b4 	.word	0x200005b4

0800902c <_malloc_r>:
 800902c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009030:	1ccd      	adds	r5, r1, #3
 8009032:	f025 0503 	bic.w	r5, r5, #3
 8009036:	3508      	adds	r5, #8
 8009038:	2d0c      	cmp	r5, #12
 800903a:	bf38      	it	cc
 800903c:	250c      	movcc	r5, #12
 800903e:	2d00      	cmp	r5, #0
 8009040:	4607      	mov	r7, r0
 8009042:	db01      	blt.n	8009048 <_malloc_r+0x1c>
 8009044:	42a9      	cmp	r1, r5
 8009046:	d905      	bls.n	8009054 <_malloc_r+0x28>
 8009048:	230c      	movs	r3, #12
 800904a:	603b      	str	r3, [r7, #0]
 800904c:	2600      	movs	r6, #0
 800904e:	4630      	mov	r0, r6
 8009050:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009054:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009128 <_malloc_r+0xfc>
 8009058:	f000 f868 	bl	800912c <__malloc_lock>
 800905c:	f8d8 3000 	ldr.w	r3, [r8]
 8009060:	461c      	mov	r4, r3
 8009062:	bb5c      	cbnz	r4, 80090bc <_malloc_r+0x90>
 8009064:	4629      	mov	r1, r5
 8009066:	4638      	mov	r0, r7
 8009068:	f7ff ffc0 	bl	8008fec <sbrk_aligned>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	4604      	mov	r4, r0
 8009070:	d155      	bne.n	800911e <_malloc_r+0xf2>
 8009072:	f8d8 4000 	ldr.w	r4, [r8]
 8009076:	4626      	mov	r6, r4
 8009078:	2e00      	cmp	r6, #0
 800907a:	d145      	bne.n	8009108 <_malloc_r+0xdc>
 800907c:	2c00      	cmp	r4, #0
 800907e:	d048      	beq.n	8009112 <_malloc_r+0xe6>
 8009080:	6823      	ldr	r3, [r4, #0]
 8009082:	4631      	mov	r1, r6
 8009084:	4638      	mov	r0, r7
 8009086:	eb04 0903 	add.w	r9, r4, r3
 800908a:	f000 fdf7 	bl	8009c7c <_sbrk_r>
 800908e:	4581      	cmp	r9, r0
 8009090:	d13f      	bne.n	8009112 <_malloc_r+0xe6>
 8009092:	6821      	ldr	r1, [r4, #0]
 8009094:	1a6d      	subs	r5, r5, r1
 8009096:	4629      	mov	r1, r5
 8009098:	4638      	mov	r0, r7
 800909a:	f7ff ffa7 	bl	8008fec <sbrk_aligned>
 800909e:	3001      	adds	r0, #1
 80090a0:	d037      	beq.n	8009112 <_malloc_r+0xe6>
 80090a2:	6823      	ldr	r3, [r4, #0]
 80090a4:	442b      	add	r3, r5
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	f8d8 3000 	ldr.w	r3, [r8]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d038      	beq.n	8009122 <_malloc_r+0xf6>
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	42a2      	cmp	r2, r4
 80090b4:	d12b      	bne.n	800910e <_malloc_r+0xe2>
 80090b6:	2200      	movs	r2, #0
 80090b8:	605a      	str	r2, [r3, #4]
 80090ba:	e00f      	b.n	80090dc <_malloc_r+0xb0>
 80090bc:	6822      	ldr	r2, [r4, #0]
 80090be:	1b52      	subs	r2, r2, r5
 80090c0:	d41f      	bmi.n	8009102 <_malloc_r+0xd6>
 80090c2:	2a0b      	cmp	r2, #11
 80090c4:	d917      	bls.n	80090f6 <_malloc_r+0xca>
 80090c6:	1961      	adds	r1, r4, r5
 80090c8:	42a3      	cmp	r3, r4
 80090ca:	6025      	str	r5, [r4, #0]
 80090cc:	bf18      	it	ne
 80090ce:	6059      	strne	r1, [r3, #4]
 80090d0:	6863      	ldr	r3, [r4, #4]
 80090d2:	bf08      	it	eq
 80090d4:	f8c8 1000 	streq.w	r1, [r8]
 80090d8:	5162      	str	r2, [r4, r5]
 80090da:	604b      	str	r3, [r1, #4]
 80090dc:	4638      	mov	r0, r7
 80090de:	f104 060b 	add.w	r6, r4, #11
 80090e2:	f000 f829 	bl	8009138 <__malloc_unlock>
 80090e6:	f026 0607 	bic.w	r6, r6, #7
 80090ea:	1d23      	adds	r3, r4, #4
 80090ec:	1af2      	subs	r2, r6, r3
 80090ee:	d0ae      	beq.n	800904e <_malloc_r+0x22>
 80090f0:	1b9b      	subs	r3, r3, r6
 80090f2:	50a3      	str	r3, [r4, r2]
 80090f4:	e7ab      	b.n	800904e <_malloc_r+0x22>
 80090f6:	42a3      	cmp	r3, r4
 80090f8:	6862      	ldr	r2, [r4, #4]
 80090fa:	d1dd      	bne.n	80090b8 <_malloc_r+0x8c>
 80090fc:	f8c8 2000 	str.w	r2, [r8]
 8009100:	e7ec      	b.n	80090dc <_malloc_r+0xb0>
 8009102:	4623      	mov	r3, r4
 8009104:	6864      	ldr	r4, [r4, #4]
 8009106:	e7ac      	b.n	8009062 <_malloc_r+0x36>
 8009108:	4634      	mov	r4, r6
 800910a:	6876      	ldr	r6, [r6, #4]
 800910c:	e7b4      	b.n	8009078 <_malloc_r+0x4c>
 800910e:	4613      	mov	r3, r2
 8009110:	e7cc      	b.n	80090ac <_malloc_r+0x80>
 8009112:	230c      	movs	r3, #12
 8009114:	603b      	str	r3, [r7, #0]
 8009116:	4638      	mov	r0, r7
 8009118:	f000 f80e 	bl	8009138 <__malloc_unlock>
 800911c:	e797      	b.n	800904e <_malloc_r+0x22>
 800911e:	6025      	str	r5, [r4, #0]
 8009120:	e7dc      	b.n	80090dc <_malloc_r+0xb0>
 8009122:	605b      	str	r3, [r3, #4]
 8009124:	deff      	udf	#255	; 0xff
 8009126:	bf00      	nop
 8009128:	200005b0 	.word	0x200005b0

0800912c <__malloc_lock>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__malloc_lock+0x8>)
 800912e:	f7ff b88a 	b.w	8008246 <__retarget_lock_acquire_recursive>
 8009132:	bf00      	nop
 8009134:	200005ac 	.word	0x200005ac

08009138 <__malloc_unlock>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__malloc_unlock+0x8>)
 800913a:	f7ff b885 	b.w	8008248 <__retarget_lock_release_recursive>
 800913e:	bf00      	nop
 8009140:	200005ac 	.word	0x200005ac

08009144 <_Balloc>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	69c6      	ldr	r6, [r0, #28]
 8009148:	4604      	mov	r4, r0
 800914a:	460d      	mov	r5, r1
 800914c:	b976      	cbnz	r6, 800916c <_Balloc+0x28>
 800914e:	2010      	movs	r0, #16
 8009150:	f7ff ff44 	bl	8008fdc <malloc>
 8009154:	4602      	mov	r2, r0
 8009156:	61e0      	str	r0, [r4, #28]
 8009158:	b920      	cbnz	r0, 8009164 <_Balloc+0x20>
 800915a:	4b18      	ldr	r3, [pc, #96]	; (80091bc <_Balloc+0x78>)
 800915c:	4818      	ldr	r0, [pc, #96]	; (80091c0 <_Balloc+0x7c>)
 800915e:	216b      	movs	r1, #107	; 0x6b
 8009160:	f000 fdaa 	bl	8009cb8 <__assert_func>
 8009164:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009168:	6006      	str	r6, [r0, #0]
 800916a:	60c6      	str	r6, [r0, #12]
 800916c:	69e6      	ldr	r6, [r4, #28]
 800916e:	68f3      	ldr	r3, [r6, #12]
 8009170:	b183      	cbz	r3, 8009194 <_Balloc+0x50>
 8009172:	69e3      	ldr	r3, [r4, #28]
 8009174:	68db      	ldr	r3, [r3, #12]
 8009176:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800917a:	b9b8      	cbnz	r0, 80091ac <_Balloc+0x68>
 800917c:	2101      	movs	r1, #1
 800917e:	fa01 f605 	lsl.w	r6, r1, r5
 8009182:	1d72      	adds	r2, r6, #5
 8009184:	0092      	lsls	r2, r2, #2
 8009186:	4620      	mov	r0, r4
 8009188:	f000 fdb4 	bl	8009cf4 <_calloc_r>
 800918c:	b160      	cbz	r0, 80091a8 <_Balloc+0x64>
 800918e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009192:	e00e      	b.n	80091b2 <_Balloc+0x6e>
 8009194:	2221      	movs	r2, #33	; 0x21
 8009196:	2104      	movs	r1, #4
 8009198:	4620      	mov	r0, r4
 800919a:	f000 fdab 	bl	8009cf4 <_calloc_r>
 800919e:	69e3      	ldr	r3, [r4, #28]
 80091a0:	60f0      	str	r0, [r6, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d1e4      	bne.n	8009172 <_Balloc+0x2e>
 80091a8:	2000      	movs	r0, #0
 80091aa:	bd70      	pop	{r4, r5, r6, pc}
 80091ac:	6802      	ldr	r2, [r0, #0]
 80091ae:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80091b2:	2300      	movs	r3, #0
 80091b4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80091b8:	e7f7      	b.n	80091aa <_Balloc+0x66>
 80091ba:	bf00      	nop
 80091bc:	0800a421 	.word	0x0800a421
 80091c0:	0800a4a1 	.word	0x0800a4a1

080091c4 <_Bfree>:
 80091c4:	b570      	push	{r4, r5, r6, lr}
 80091c6:	69c6      	ldr	r6, [r0, #28]
 80091c8:	4605      	mov	r5, r0
 80091ca:	460c      	mov	r4, r1
 80091cc:	b976      	cbnz	r6, 80091ec <_Bfree+0x28>
 80091ce:	2010      	movs	r0, #16
 80091d0:	f7ff ff04 	bl	8008fdc <malloc>
 80091d4:	4602      	mov	r2, r0
 80091d6:	61e8      	str	r0, [r5, #28]
 80091d8:	b920      	cbnz	r0, 80091e4 <_Bfree+0x20>
 80091da:	4b09      	ldr	r3, [pc, #36]	; (8009200 <_Bfree+0x3c>)
 80091dc:	4809      	ldr	r0, [pc, #36]	; (8009204 <_Bfree+0x40>)
 80091de:	218f      	movs	r1, #143	; 0x8f
 80091e0:	f000 fd6a 	bl	8009cb8 <__assert_func>
 80091e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80091e8:	6006      	str	r6, [r0, #0]
 80091ea:	60c6      	str	r6, [r0, #12]
 80091ec:	b13c      	cbz	r4, 80091fe <_Bfree+0x3a>
 80091ee:	69eb      	ldr	r3, [r5, #28]
 80091f0:	6862      	ldr	r2, [r4, #4]
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80091f8:	6021      	str	r1, [r4, #0]
 80091fa:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80091fe:	bd70      	pop	{r4, r5, r6, pc}
 8009200:	0800a421 	.word	0x0800a421
 8009204:	0800a4a1 	.word	0x0800a4a1

08009208 <__multadd>:
 8009208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800920c:	690d      	ldr	r5, [r1, #16]
 800920e:	4607      	mov	r7, r0
 8009210:	460c      	mov	r4, r1
 8009212:	461e      	mov	r6, r3
 8009214:	f101 0c14 	add.w	ip, r1, #20
 8009218:	2000      	movs	r0, #0
 800921a:	f8dc 3000 	ldr.w	r3, [ip]
 800921e:	b299      	uxth	r1, r3
 8009220:	fb02 6101 	mla	r1, r2, r1, r6
 8009224:	0c1e      	lsrs	r6, r3, #16
 8009226:	0c0b      	lsrs	r3, r1, #16
 8009228:	fb02 3306 	mla	r3, r2, r6, r3
 800922c:	b289      	uxth	r1, r1
 800922e:	3001      	adds	r0, #1
 8009230:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009234:	4285      	cmp	r5, r0
 8009236:	f84c 1b04 	str.w	r1, [ip], #4
 800923a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800923e:	dcec      	bgt.n	800921a <__multadd+0x12>
 8009240:	b30e      	cbz	r6, 8009286 <__multadd+0x7e>
 8009242:	68a3      	ldr	r3, [r4, #8]
 8009244:	42ab      	cmp	r3, r5
 8009246:	dc19      	bgt.n	800927c <__multadd+0x74>
 8009248:	6861      	ldr	r1, [r4, #4]
 800924a:	4638      	mov	r0, r7
 800924c:	3101      	adds	r1, #1
 800924e:	f7ff ff79 	bl	8009144 <_Balloc>
 8009252:	4680      	mov	r8, r0
 8009254:	b928      	cbnz	r0, 8009262 <__multadd+0x5a>
 8009256:	4602      	mov	r2, r0
 8009258:	4b0c      	ldr	r3, [pc, #48]	; (800928c <__multadd+0x84>)
 800925a:	480d      	ldr	r0, [pc, #52]	; (8009290 <__multadd+0x88>)
 800925c:	21ba      	movs	r1, #186	; 0xba
 800925e:	f000 fd2b 	bl	8009cb8 <__assert_func>
 8009262:	6922      	ldr	r2, [r4, #16]
 8009264:	3202      	adds	r2, #2
 8009266:	f104 010c 	add.w	r1, r4, #12
 800926a:	0092      	lsls	r2, r2, #2
 800926c:	300c      	adds	r0, #12
 800926e:	f000 fd15 	bl	8009c9c <memcpy>
 8009272:	4621      	mov	r1, r4
 8009274:	4638      	mov	r0, r7
 8009276:	f7ff ffa5 	bl	80091c4 <_Bfree>
 800927a:	4644      	mov	r4, r8
 800927c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009280:	3501      	adds	r5, #1
 8009282:	615e      	str	r6, [r3, #20]
 8009284:	6125      	str	r5, [r4, #16]
 8009286:	4620      	mov	r0, r4
 8009288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800928c:	0800a490 	.word	0x0800a490
 8009290:	0800a4a1 	.word	0x0800a4a1

08009294 <__hi0bits>:
 8009294:	0c03      	lsrs	r3, r0, #16
 8009296:	041b      	lsls	r3, r3, #16
 8009298:	b9d3      	cbnz	r3, 80092d0 <__hi0bits+0x3c>
 800929a:	0400      	lsls	r0, r0, #16
 800929c:	2310      	movs	r3, #16
 800929e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80092a2:	bf04      	itt	eq
 80092a4:	0200      	lsleq	r0, r0, #8
 80092a6:	3308      	addeq	r3, #8
 80092a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80092ac:	bf04      	itt	eq
 80092ae:	0100      	lsleq	r0, r0, #4
 80092b0:	3304      	addeq	r3, #4
 80092b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80092b6:	bf04      	itt	eq
 80092b8:	0080      	lsleq	r0, r0, #2
 80092ba:	3302      	addeq	r3, #2
 80092bc:	2800      	cmp	r0, #0
 80092be:	db05      	blt.n	80092cc <__hi0bits+0x38>
 80092c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80092c4:	f103 0301 	add.w	r3, r3, #1
 80092c8:	bf08      	it	eq
 80092ca:	2320      	moveq	r3, #32
 80092cc:	4618      	mov	r0, r3
 80092ce:	4770      	bx	lr
 80092d0:	2300      	movs	r3, #0
 80092d2:	e7e4      	b.n	800929e <__hi0bits+0xa>

080092d4 <__lo0bits>:
 80092d4:	6803      	ldr	r3, [r0, #0]
 80092d6:	f013 0207 	ands.w	r2, r3, #7
 80092da:	d00c      	beq.n	80092f6 <__lo0bits+0x22>
 80092dc:	07d9      	lsls	r1, r3, #31
 80092de:	d422      	bmi.n	8009326 <__lo0bits+0x52>
 80092e0:	079a      	lsls	r2, r3, #30
 80092e2:	bf49      	itett	mi
 80092e4:	085b      	lsrmi	r3, r3, #1
 80092e6:	089b      	lsrpl	r3, r3, #2
 80092e8:	6003      	strmi	r3, [r0, #0]
 80092ea:	2201      	movmi	r2, #1
 80092ec:	bf5c      	itt	pl
 80092ee:	6003      	strpl	r3, [r0, #0]
 80092f0:	2202      	movpl	r2, #2
 80092f2:	4610      	mov	r0, r2
 80092f4:	4770      	bx	lr
 80092f6:	b299      	uxth	r1, r3
 80092f8:	b909      	cbnz	r1, 80092fe <__lo0bits+0x2a>
 80092fa:	0c1b      	lsrs	r3, r3, #16
 80092fc:	2210      	movs	r2, #16
 80092fe:	b2d9      	uxtb	r1, r3
 8009300:	b909      	cbnz	r1, 8009306 <__lo0bits+0x32>
 8009302:	3208      	adds	r2, #8
 8009304:	0a1b      	lsrs	r3, r3, #8
 8009306:	0719      	lsls	r1, r3, #28
 8009308:	bf04      	itt	eq
 800930a:	091b      	lsreq	r3, r3, #4
 800930c:	3204      	addeq	r2, #4
 800930e:	0799      	lsls	r1, r3, #30
 8009310:	bf04      	itt	eq
 8009312:	089b      	lsreq	r3, r3, #2
 8009314:	3202      	addeq	r2, #2
 8009316:	07d9      	lsls	r1, r3, #31
 8009318:	d403      	bmi.n	8009322 <__lo0bits+0x4e>
 800931a:	085b      	lsrs	r3, r3, #1
 800931c:	f102 0201 	add.w	r2, r2, #1
 8009320:	d003      	beq.n	800932a <__lo0bits+0x56>
 8009322:	6003      	str	r3, [r0, #0]
 8009324:	e7e5      	b.n	80092f2 <__lo0bits+0x1e>
 8009326:	2200      	movs	r2, #0
 8009328:	e7e3      	b.n	80092f2 <__lo0bits+0x1e>
 800932a:	2220      	movs	r2, #32
 800932c:	e7e1      	b.n	80092f2 <__lo0bits+0x1e>
	...

08009330 <__i2b>:
 8009330:	b510      	push	{r4, lr}
 8009332:	460c      	mov	r4, r1
 8009334:	2101      	movs	r1, #1
 8009336:	f7ff ff05 	bl	8009144 <_Balloc>
 800933a:	4602      	mov	r2, r0
 800933c:	b928      	cbnz	r0, 800934a <__i2b+0x1a>
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <__i2b+0x24>)
 8009340:	4805      	ldr	r0, [pc, #20]	; (8009358 <__i2b+0x28>)
 8009342:	f240 1145 	movw	r1, #325	; 0x145
 8009346:	f000 fcb7 	bl	8009cb8 <__assert_func>
 800934a:	2301      	movs	r3, #1
 800934c:	6144      	str	r4, [r0, #20]
 800934e:	6103      	str	r3, [r0, #16]
 8009350:	bd10      	pop	{r4, pc}
 8009352:	bf00      	nop
 8009354:	0800a490 	.word	0x0800a490
 8009358:	0800a4a1 	.word	0x0800a4a1

0800935c <__multiply>:
 800935c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009360:	4691      	mov	r9, r2
 8009362:	690a      	ldr	r2, [r1, #16]
 8009364:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009368:	429a      	cmp	r2, r3
 800936a:	bfb8      	it	lt
 800936c:	460b      	movlt	r3, r1
 800936e:	460c      	mov	r4, r1
 8009370:	bfbc      	itt	lt
 8009372:	464c      	movlt	r4, r9
 8009374:	4699      	movlt	r9, r3
 8009376:	6927      	ldr	r7, [r4, #16]
 8009378:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800937c:	68a3      	ldr	r3, [r4, #8]
 800937e:	6861      	ldr	r1, [r4, #4]
 8009380:	eb07 060a 	add.w	r6, r7, sl
 8009384:	42b3      	cmp	r3, r6
 8009386:	b085      	sub	sp, #20
 8009388:	bfb8      	it	lt
 800938a:	3101      	addlt	r1, #1
 800938c:	f7ff feda 	bl	8009144 <_Balloc>
 8009390:	b930      	cbnz	r0, 80093a0 <__multiply+0x44>
 8009392:	4602      	mov	r2, r0
 8009394:	4b44      	ldr	r3, [pc, #272]	; (80094a8 <__multiply+0x14c>)
 8009396:	4845      	ldr	r0, [pc, #276]	; (80094ac <__multiply+0x150>)
 8009398:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800939c:	f000 fc8c 	bl	8009cb8 <__assert_func>
 80093a0:	f100 0514 	add.w	r5, r0, #20
 80093a4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80093a8:	462b      	mov	r3, r5
 80093aa:	2200      	movs	r2, #0
 80093ac:	4543      	cmp	r3, r8
 80093ae:	d321      	bcc.n	80093f4 <__multiply+0x98>
 80093b0:	f104 0314 	add.w	r3, r4, #20
 80093b4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80093b8:	f109 0314 	add.w	r3, r9, #20
 80093bc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80093c0:	9202      	str	r2, [sp, #8]
 80093c2:	1b3a      	subs	r2, r7, r4
 80093c4:	3a15      	subs	r2, #21
 80093c6:	f022 0203 	bic.w	r2, r2, #3
 80093ca:	3204      	adds	r2, #4
 80093cc:	f104 0115 	add.w	r1, r4, #21
 80093d0:	428f      	cmp	r7, r1
 80093d2:	bf38      	it	cc
 80093d4:	2204      	movcc	r2, #4
 80093d6:	9201      	str	r2, [sp, #4]
 80093d8:	9a02      	ldr	r2, [sp, #8]
 80093da:	9303      	str	r3, [sp, #12]
 80093dc:	429a      	cmp	r2, r3
 80093de:	d80c      	bhi.n	80093fa <__multiply+0x9e>
 80093e0:	2e00      	cmp	r6, #0
 80093e2:	dd03      	ble.n	80093ec <__multiply+0x90>
 80093e4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d05b      	beq.n	80094a4 <__multiply+0x148>
 80093ec:	6106      	str	r6, [r0, #16]
 80093ee:	b005      	add	sp, #20
 80093f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f4:	f843 2b04 	str.w	r2, [r3], #4
 80093f8:	e7d8      	b.n	80093ac <__multiply+0x50>
 80093fa:	f8b3 a000 	ldrh.w	sl, [r3]
 80093fe:	f1ba 0f00 	cmp.w	sl, #0
 8009402:	d024      	beq.n	800944e <__multiply+0xf2>
 8009404:	f104 0e14 	add.w	lr, r4, #20
 8009408:	46a9      	mov	r9, r5
 800940a:	f04f 0c00 	mov.w	ip, #0
 800940e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009412:	f8d9 1000 	ldr.w	r1, [r9]
 8009416:	fa1f fb82 	uxth.w	fp, r2
 800941a:	b289      	uxth	r1, r1
 800941c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009420:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009424:	f8d9 2000 	ldr.w	r2, [r9]
 8009428:	4461      	add	r1, ip
 800942a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800942e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009432:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009436:	b289      	uxth	r1, r1
 8009438:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800943c:	4577      	cmp	r7, lr
 800943e:	f849 1b04 	str.w	r1, [r9], #4
 8009442:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009446:	d8e2      	bhi.n	800940e <__multiply+0xb2>
 8009448:	9a01      	ldr	r2, [sp, #4]
 800944a:	f845 c002 	str.w	ip, [r5, r2]
 800944e:	9a03      	ldr	r2, [sp, #12]
 8009450:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009454:	3304      	adds	r3, #4
 8009456:	f1b9 0f00 	cmp.w	r9, #0
 800945a:	d021      	beq.n	80094a0 <__multiply+0x144>
 800945c:	6829      	ldr	r1, [r5, #0]
 800945e:	f104 0c14 	add.w	ip, r4, #20
 8009462:	46ae      	mov	lr, r5
 8009464:	f04f 0a00 	mov.w	sl, #0
 8009468:	f8bc b000 	ldrh.w	fp, [ip]
 800946c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009470:	fb09 220b 	mla	r2, r9, fp, r2
 8009474:	4452      	add	r2, sl
 8009476:	b289      	uxth	r1, r1
 8009478:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800947c:	f84e 1b04 	str.w	r1, [lr], #4
 8009480:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009484:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009488:	f8be 1000 	ldrh.w	r1, [lr]
 800948c:	fb09 110a 	mla	r1, r9, sl, r1
 8009490:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009494:	4567      	cmp	r7, ip
 8009496:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800949a:	d8e5      	bhi.n	8009468 <__multiply+0x10c>
 800949c:	9a01      	ldr	r2, [sp, #4]
 800949e:	50a9      	str	r1, [r5, r2]
 80094a0:	3504      	adds	r5, #4
 80094a2:	e799      	b.n	80093d8 <__multiply+0x7c>
 80094a4:	3e01      	subs	r6, #1
 80094a6:	e79b      	b.n	80093e0 <__multiply+0x84>
 80094a8:	0800a490 	.word	0x0800a490
 80094ac:	0800a4a1 	.word	0x0800a4a1

080094b0 <__pow5mult>:
 80094b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b4:	4615      	mov	r5, r2
 80094b6:	f012 0203 	ands.w	r2, r2, #3
 80094ba:	4606      	mov	r6, r0
 80094bc:	460f      	mov	r7, r1
 80094be:	d007      	beq.n	80094d0 <__pow5mult+0x20>
 80094c0:	4c25      	ldr	r4, [pc, #148]	; (8009558 <__pow5mult+0xa8>)
 80094c2:	3a01      	subs	r2, #1
 80094c4:	2300      	movs	r3, #0
 80094c6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80094ca:	f7ff fe9d 	bl	8009208 <__multadd>
 80094ce:	4607      	mov	r7, r0
 80094d0:	10ad      	asrs	r5, r5, #2
 80094d2:	d03d      	beq.n	8009550 <__pow5mult+0xa0>
 80094d4:	69f4      	ldr	r4, [r6, #28]
 80094d6:	b97c      	cbnz	r4, 80094f8 <__pow5mult+0x48>
 80094d8:	2010      	movs	r0, #16
 80094da:	f7ff fd7f 	bl	8008fdc <malloc>
 80094de:	4602      	mov	r2, r0
 80094e0:	61f0      	str	r0, [r6, #28]
 80094e2:	b928      	cbnz	r0, 80094f0 <__pow5mult+0x40>
 80094e4:	4b1d      	ldr	r3, [pc, #116]	; (800955c <__pow5mult+0xac>)
 80094e6:	481e      	ldr	r0, [pc, #120]	; (8009560 <__pow5mult+0xb0>)
 80094e8:	f240 11b3 	movw	r1, #435	; 0x1b3
 80094ec:	f000 fbe4 	bl	8009cb8 <__assert_func>
 80094f0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80094f4:	6004      	str	r4, [r0, #0]
 80094f6:	60c4      	str	r4, [r0, #12]
 80094f8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80094fc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009500:	b94c      	cbnz	r4, 8009516 <__pow5mult+0x66>
 8009502:	f240 2171 	movw	r1, #625	; 0x271
 8009506:	4630      	mov	r0, r6
 8009508:	f7ff ff12 	bl	8009330 <__i2b>
 800950c:	2300      	movs	r3, #0
 800950e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009512:	4604      	mov	r4, r0
 8009514:	6003      	str	r3, [r0, #0]
 8009516:	f04f 0900 	mov.w	r9, #0
 800951a:	07eb      	lsls	r3, r5, #31
 800951c:	d50a      	bpl.n	8009534 <__pow5mult+0x84>
 800951e:	4639      	mov	r1, r7
 8009520:	4622      	mov	r2, r4
 8009522:	4630      	mov	r0, r6
 8009524:	f7ff ff1a 	bl	800935c <__multiply>
 8009528:	4639      	mov	r1, r7
 800952a:	4680      	mov	r8, r0
 800952c:	4630      	mov	r0, r6
 800952e:	f7ff fe49 	bl	80091c4 <_Bfree>
 8009532:	4647      	mov	r7, r8
 8009534:	106d      	asrs	r5, r5, #1
 8009536:	d00b      	beq.n	8009550 <__pow5mult+0xa0>
 8009538:	6820      	ldr	r0, [r4, #0]
 800953a:	b938      	cbnz	r0, 800954c <__pow5mult+0x9c>
 800953c:	4622      	mov	r2, r4
 800953e:	4621      	mov	r1, r4
 8009540:	4630      	mov	r0, r6
 8009542:	f7ff ff0b 	bl	800935c <__multiply>
 8009546:	6020      	str	r0, [r4, #0]
 8009548:	f8c0 9000 	str.w	r9, [r0]
 800954c:	4604      	mov	r4, r0
 800954e:	e7e4      	b.n	800951a <__pow5mult+0x6a>
 8009550:	4638      	mov	r0, r7
 8009552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009556:	bf00      	nop
 8009558:	0800a5f0 	.word	0x0800a5f0
 800955c:	0800a421 	.word	0x0800a421
 8009560:	0800a4a1 	.word	0x0800a4a1

08009564 <__lshift>:
 8009564:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009568:	460c      	mov	r4, r1
 800956a:	6849      	ldr	r1, [r1, #4]
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009572:	68a3      	ldr	r3, [r4, #8]
 8009574:	4607      	mov	r7, r0
 8009576:	4691      	mov	r9, r2
 8009578:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800957c:	f108 0601 	add.w	r6, r8, #1
 8009580:	42b3      	cmp	r3, r6
 8009582:	db0b      	blt.n	800959c <__lshift+0x38>
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff fddd 	bl	8009144 <_Balloc>
 800958a:	4605      	mov	r5, r0
 800958c:	b948      	cbnz	r0, 80095a2 <__lshift+0x3e>
 800958e:	4602      	mov	r2, r0
 8009590:	4b28      	ldr	r3, [pc, #160]	; (8009634 <__lshift+0xd0>)
 8009592:	4829      	ldr	r0, [pc, #164]	; (8009638 <__lshift+0xd4>)
 8009594:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009598:	f000 fb8e 	bl	8009cb8 <__assert_func>
 800959c:	3101      	adds	r1, #1
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	e7ee      	b.n	8009580 <__lshift+0x1c>
 80095a2:	2300      	movs	r3, #0
 80095a4:	f100 0114 	add.w	r1, r0, #20
 80095a8:	f100 0210 	add.w	r2, r0, #16
 80095ac:	4618      	mov	r0, r3
 80095ae:	4553      	cmp	r3, sl
 80095b0:	db33      	blt.n	800961a <__lshift+0xb6>
 80095b2:	6920      	ldr	r0, [r4, #16]
 80095b4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80095b8:	f104 0314 	add.w	r3, r4, #20
 80095bc:	f019 091f 	ands.w	r9, r9, #31
 80095c0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80095c4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80095c8:	d02b      	beq.n	8009622 <__lshift+0xbe>
 80095ca:	f1c9 0e20 	rsb	lr, r9, #32
 80095ce:	468a      	mov	sl, r1
 80095d0:	2200      	movs	r2, #0
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	fa00 f009 	lsl.w	r0, r0, r9
 80095d8:	4310      	orrs	r0, r2
 80095da:	f84a 0b04 	str.w	r0, [sl], #4
 80095de:	f853 2b04 	ldr.w	r2, [r3], #4
 80095e2:	459c      	cmp	ip, r3
 80095e4:	fa22 f20e 	lsr.w	r2, r2, lr
 80095e8:	d8f3      	bhi.n	80095d2 <__lshift+0x6e>
 80095ea:	ebac 0304 	sub.w	r3, ip, r4
 80095ee:	3b15      	subs	r3, #21
 80095f0:	f023 0303 	bic.w	r3, r3, #3
 80095f4:	3304      	adds	r3, #4
 80095f6:	f104 0015 	add.w	r0, r4, #21
 80095fa:	4584      	cmp	ip, r0
 80095fc:	bf38      	it	cc
 80095fe:	2304      	movcc	r3, #4
 8009600:	50ca      	str	r2, [r1, r3]
 8009602:	b10a      	cbz	r2, 8009608 <__lshift+0xa4>
 8009604:	f108 0602 	add.w	r6, r8, #2
 8009608:	3e01      	subs	r6, #1
 800960a:	4638      	mov	r0, r7
 800960c:	612e      	str	r6, [r5, #16]
 800960e:	4621      	mov	r1, r4
 8009610:	f7ff fdd8 	bl	80091c4 <_Bfree>
 8009614:	4628      	mov	r0, r5
 8009616:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800961a:	f842 0f04 	str.w	r0, [r2, #4]!
 800961e:	3301      	adds	r3, #1
 8009620:	e7c5      	b.n	80095ae <__lshift+0x4a>
 8009622:	3904      	subs	r1, #4
 8009624:	f853 2b04 	ldr.w	r2, [r3], #4
 8009628:	f841 2f04 	str.w	r2, [r1, #4]!
 800962c:	459c      	cmp	ip, r3
 800962e:	d8f9      	bhi.n	8009624 <__lshift+0xc0>
 8009630:	e7ea      	b.n	8009608 <__lshift+0xa4>
 8009632:	bf00      	nop
 8009634:	0800a490 	.word	0x0800a490
 8009638:	0800a4a1 	.word	0x0800a4a1

0800963c <__mcmp>:
 800963c:	b530      	push	{r4, r5, lr}
 800963e:	6902      	ldr	r2, [r0, #16]
 8009640:	690c      	ldr	r4, [r1, #16]
 8009642:	1b12      	subs	r2, r2, r4
 8009644:	d10e      	bne.n	8009664 <__mcmp+0x28>
 8009646:	f100 0314 	add.w	r3, r0, #20
 800964a:	3114      	adds	r1, #20
 800964c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009650:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009654:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009658:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800965c:	42a5      	cmp	r5, r4
 800965e:	d003      	beq.n	8009668 <__mcmp+0x2c>
 8009660:	d305      	bcc.n	800966e <__mcmp+0x32>
 8009662:	2201      	movs	r2, #1
 8009664:	4610      	mov	r0, r2
 8009666:	bd30      	pop	{r4, r5, pc}
 8009668:	4283      	cmp	r3, r0
 800966a:	d3f3      	bcc.n	8009654 <__mcmp+0x18>
 800966c:	e7fa      	b.n	8009664 <__mcmp+0x28>
 800966e:	f04f 32ff 	mov.w	r2, #4294967295
 8009672:	e7f7      	b.n	8009664 <__mcmp+0x28>

08009674 <__mdiff>:
 8009674:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	460c      	mov	r4, r1
 800967a:	4606      	mov	r6, r0
 800967c:	4611      	mov	r1, r2
 800967e:	4620      	mov	r0, r4
 8009680:	4690      	mov	r8, r2
 8009682:	f7ff ffdb 	bl	800963c <__mcmp>
 8009686:	1e05      	subs	r5, r0, #0
 8009688:	d110      	bne.n	80096ac <__mdiff+0x38>
 800968a:	4629      	mov	r1, r5
 800968c:	4630      	mov	r0, r6
 800968e:	f7ff fd59 	bl	8009144 <_Balloc>
 8009692:	b930      	cbnz	r0, 80096a2 <__mdiff+0x2e>
 8009694:	4b3a      	ldr	r3, [pc, #232]	; (8009780 <__mdiff+0x10c>)
 8009696:	4602      	mov	r2, r0
 8009698:	f240 2137 	movw	r1, #567	; 0x237
 800969c:	4839      	ldr	r0, [pc, #228]	; (8009784 <__mdiff+0x110>)
 800969e:	f000 fb0b 	bl	8009cb8 <__assert_func>
 80096a2:	2301      	movs	r3, #1
 80096a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80096a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ac:	bfa4      	itt	ge
 80096ae:	4643      	movge	r3, r8
 80096b0:	46a0      	movge	r8, r4
 80096b2:	4630      	mov	r0, r6
 80096b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80096b8:	bfa6      	itte	ge
 80096ba:	461c      	movge	r4, r3
 80096bc:	2500      	movge	r5, #0
 80096be:	2501      	movlt	r5, #1
 80096c0:	f7ff fd40 	bl	8009144 <_Balloc>
 80096c4:	b920      	cbnz	r0, 80096d0 <__mdiff+0x5c>
 80096c6:	4b2e      	ldr	r3, [pc, #184]	; (8009780 <__mdiff+0x10c>)
 80096c8:	4602      	mov	r2, r0
 80096ca:	f240 2145 	movw	r1, #581	; 0x245
 80096ce:	e7e5      	b.n	800969c <__mdiff+0x28>
 80096d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80096d4:	6926      	ldr	r6, [r4, #16]
 80096d6:	60c5      	str	r5, [r0, #12]
 80096d8:	f104 0914 	add.w	r9, r4, #20
 80096dc:	f108 0514 	add.w	r5, r8, #20
 80096e0:	f100 0e14 	add.w	lr, r0, #20
 80096e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80096e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80096ec:	f108 0210 	add.w	r2, r8, #16
 80096f0:	46f2      	mov	sl, lr
 80096f2:	2100      	movs	r1, #0
 80096f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80096f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80096fc:	fa11 f88b 	uxtah	r8, r1, fp
 8009700:	b299      	uxth	r1, r3
 8009702:	0c1b      	lsrs	r3, r3, #16
 8009704:	eba8 0801 	sub.w	r8, r8, r1
 8009708:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800970c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009710:	fa1f f888 	uxth.w	r8, r8
 8009714:	1419      	asrs	r1, r3, #16
 8009716:	454e      	cmp	r6, r9
 8009718:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800971c:	f84a 3b04 	str.w	r3, [sl], #4
 8009720:	d8e8      	bhi.n	80096f4 <__mdiff+0x80>
 8009722:	1b33      	subs	r3, r6, r4
 8009724:	3b15      	subs	r3, #21
 8009726:	f023 0303 	bic.w	r3, r3, #3
 800972a:	3304      	adds	r3, #4
 800972c:	3415      	adds	r4, #21
 800972e:	42a6      	cmp	r6, r4
 8009730:	bf38      	it	cc
 8009732:	2304      	movcc	r3, #4
 8009734:	441d      	add	r5, r3
 8009736:	4473      	add	r3, lr
 8009738:	469e      	mov	lr, r3
 800973a:	462e      	mov	r6, r5
 800973c:	4566      	cmp	r6, ip
 800973e:	d30e      	bcc.n	800975e <__mdiff+0xea>
 8009740:	f10c 0203 	add.w	r2, ip, #3
 8009744:	1b52      	subs	r2, r2, r5
 8009746:	f022 0203 	bic.w	r2, r2, #3
 800974a:	3d03      	subs	r5, #3
 800974c:	45ac      	cmp	ip, r5
 800974e:	bf38      	it	cc
 8009750:	2200      	movcc	r2, #0
 8009752:	4413      	add	r3, r2
 8009754:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009758:	b17a      	cbz	r2, 800977a <__mdiff+0x106>
 800975a:	6107      	str	r7, [r0, #16]
 800975c:	e7a4      	b.n	80096a8 <__mdiff+0x34>
 800975e:	f856 8b04 	ldr.w	r8, [r6], #4
 8009762:	fa11 f288 	uxtah	r2, r1, r8
 8009766:	1414      	asrs	r4, r2, #16
 8009768:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800976c:	b292      	uxth	r2, r2
 800976e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009772:	f84e 2b04 	str.w	r2, [lr], #4
 8009776:	1421      	asrs	r1, r4, #16
 8009778:	e7e0      	b.n	800973c <__mdiff+0xc8>
 800977a:	3f01      	subs	r7, #1
 800977c:	e7ea      	b.n	8009754 <__mdiff+0xe0>
 800977e:	bf00      	nop
 8009780:	0800a490 	.word	0x0800a490
 8009784:	0800a4a1 	.word	0x0800a4a1

08009788 <__d2b>:
 8009788:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800978c:	460f      	mov	r7, r1
 800978e:	2101      	movs	r1, #1
 8009790:	ec59 8b10 	vmov	r8, r9, d0
 8009794:	4616      	mov	r6, r2
 8009796:	f7ff fcd5 	bl	8009144 <_Balloc>
 800979a:	4604      	mov	r4, r0
 800979c:	b930      	cbnz	r0, 80097ac <__d2b+0x24>
 800979e:	4602      	mov	r2, r0
 80097a0:	4b24      	ldr	r3, [pc, #144]	; (8009834 <__d2b+0xac>)
 80097a2:	4825      	ldr	r0, [pc, #148]	; (8009838 <__d2b+0xb0>)
 80097a4:	f240 310f 	movw	r1, #783	; 0x30f
 80097a8:	f000 fa86 	bl	8009cb8 <__assert_func>
 80097ac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80097b0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80097b4:	bb2d      	cbnz	r5, 8009802 <__d2b+0x7a>
 80097b6:	9301      	str	r3, [sp, #4]
 80097b8:	f1b8 0300 	subs.w	r3, r8, #0
 80097bc:	d026      	beq.n	800980c <__d2b+0x84>
 80097be:	4668      	mov	r0, sp
 80097c0:	9300      	str	r3, [sp, #0]
 80097c2:	f7ff fd87 	bl	80092d4 <__lo0bits>
 80097c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80097ca:	b1e8      	cbz	r0, 8009808 <__d2b+0x80>
 80097cc:	f1c0 0320 	rsb	r3, r0, #32
 80097d0:	fa02 f303 	lsl.w	r3, r2, r3
 80097d4:	430b      	orrs	r3, r1
 80097d6:	40c2      	lsrs	r2, r0
 80097d8:	6163      	str	r3, [r4, #20]
 80097da:	9201      	str	r2, [sp, #4]
 80097dc:	9b01      	ldr	r3, [sp, #4]
 80097de:	61a3      	str	r3, [r4, #24]
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	bf14      	ite	ne
 80097e4:	2202      	movne	r2, #2
 80097e6:	2201      	moveq	r2, #1
 80097e8:	6122      	str	r2, [r4, #16]
 80097ea:	b1bd      	cbz	r5, 800981c <__d2b+0x94>
 80097ec:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80097f0:	4405      	add	r5, r0
 80097f2:	603d      	str	r5, [r7, #0]
 80097f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80097f8:	6030      	str	r0, [r6, #0]
 80097fa:	4620      	mov	r0, r4
 80097fc:	b003      	add	sp, #12
 80097fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009802:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009806:	e7d6      	b.n	80097b6 <__d2b+0x2e>
 8009808:	6161      	str	r1, [r4, #20]
 800980a:	e7e7      	b.n	80097dc <__d2b+0x54>
 800980c:	a801      	add	r0, sp, #4
 800980e:	f7ff fd61 	bl	80092d4 <__lo0bits>
 8009812:	9b01      	ldr	r3, [sp, #4]
 8009814:	6163      	str	r3, [r4, #20]
 8009816:	3020      	adds	r0, #32
 8009818:	2201      	movs	r2, #1
 800981a:	e7e5      	b.n	80097e8 <__d2b+0x60>
 800981c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009820:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009824:	6038      	str	r0, [r7, #0]
 8009826:	6918      	ldr	r0, [r3, #16]
 8009828:	f7ff fd34 	bl	8009294 <__hi0bits>
 800982c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009830:	e7e2      	b.n	80097f8 <__d2b+0x70>
 8009832:	bf00      	nop
 8009834:	0800a490 	.word	0x0800a490
 8009838:	0800a4a1 	.word	0x0800a4a1

0800983c <__ssputs_r>:
 800983c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009840:	688e      	ldr	r6, [r1, #8]
 8009842:	461f      	mov	r7, r3
 8009844:	42be      	cmp	r6, r7
 8009846:	680b      	ldr	r3, [r1, #0]
 8009848:	4682      	mov	sl, r0
 800984a:	460c      	mov	r4, r1
 800984c:	4690      	mov	r8, r2
 800984e:	d82c      	bhi.n	80098aa <__ssputs_r+0x6e>
 8009850:	898a      	ldrh	r2, [r1, #12]
 8009852:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009856:	d026      	beq.n	80098a6 <__ssputs_r+0x6a>
 8009858:	6965      	ldr	r5, [r4, #20]
 800985a:	6909      	ldr	r1, [r1, #16]
 800985c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009860:	eba3 0901 	sub.w	r9, r3, r1
 8009864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009868:	1c7b      	adds	r3, r7, #1
 800986a:	444b      	add	r3, r9
 800986c:	106d      	asrs	r5, r5, #1
 800986e:	429d      	cmp	r5, r3
 8009870:	bf38      	it	cc
 8009872:	461d      	movcc	r5, r3
 8009874:	0553      	lsls	r3, r2, #21
 8009876:	d527      	bpl.n	80098c8 <__ssputs_r+0x8c>
 8009878:	4629      	mov	r1, r5
 800987a:	f7ff fbd7 	bl	800902c <_malloc_r>
 800987e:	4606      	mov	r6, r0
 8009880:	b360      	cbz	r0, 80098dc <__ssputs_r+0xa0>
 8009882:	6921      	ldr	r1, [r4, #16]
 8009884:	464a      	mov	r2, r9
 8009886:	f000 fa09 	bl	8009c9c <memcpy>
 800988a:	89a3      	ldrh	r3, [r4, #12]
 800988c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009894:	81a3      	strh	r3, [r4, #12]
 8009896:	6126      	str	r6, [r4, #16]
 8009898:	6165      	str	r5, [r4, #20]
 800989a:	444e      	add	r6, r9
 800989c:	eba5 0509 	sub.w	r5, r5, r9
 80098a0:	6026      	str	r6, [r4, #0]
 80098a2:	60a5      	str	r5, [r4, #8]
 80098a4:	463e      	mov	r6, r7
 80098a6:	42be      	cmp	r6, r7
 80098a8:	d900      	bls.n	80098ac <__ssputs_r+0x70>
 80098aa:	463e      	mov	r6, r7
 80098ac:	6820      	ldr	r0, [r4, #0]
 80098ae:	4632      	mov	r2, r6
 80098b0:	4641      	mov	r1, r8
 80098b2:	f000 f9c9 	bl	8009c48 <memmove>
 80098b6:	68a3      	ldr	r3, [r4, #8]
 80098b8:	1b9b      	subs	r3, r3, r6
 80098ba:	60a3      	str	r3, [r4, #8]
 80098bc:	6823      	ldr	r3, [r4, #0]
 80098be:	4433      	add	r3, r6
 80098c0:	6023      	str	r3, [r4, #0]
 80098c2:	2000      	movs	r0, #0
 80098c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80098c8:	462a      	mov	r2, r5
 80098ca:	f000 fa3b 	bl	8009d44 <_realloc_r>
 80098ce:	4606      	mov	r6, r0
 80098d0:	2800      	cmp	r0, #0
 80098d2:	d1e0      	bne.n	8009896 <__ssputs_r+0x5a>
 80098d4:	6921      	ldr	r1, [r4, #16]
 80098d6:	4650      	mov	r0, sl
 80098d8:	f7ff fb34 	bl	8008f44 <_free_r>
 80098dc:	230c      	movs	r3, #12
 80098de:	f8ca 3000 	str.w	r3, [sl]
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80098e8:	81a3      	strh	r3, [r4, #12]
 80098ea:	f04f 30ff 	mov.w	r0, #4294967295
 80098ee:	e7e9      	b.n	80098c4 <__ssputs_r+0x88>

080098f0 <_svfiprintf_r>:
 80098f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098f4:	4698      	mov	r8, r3
 80098f6:	898b      	ldrh	r3, [r1, #12]
 80098f8:	061b      	lsls	r3, r3, #24
 80098fa:	b09d      	sub	sp, #116	; 0x74
 80098fc:	4607      	mov	r7, r0
 80098fe:	460d      	mov	r5, r1
 8009900:	4614      	mov	r4, r2
 8009902:	d50e      	bpl.n	8009922 <_svfiprintf_r+0x32>
 8009904:	690b      	ldr	r3, [r1, #16]
 8009906:	b963      	cbnz	r3, 8009922 <_svfiprintf_r+0x32>
 8009908:	2140      	movs	r1, #64	; 0x40
 800990a:	f7ff fb8f 	bl	800902c <_malloc_r>
 800990e:	6028      	str	r0, [r5, #0]
 8009910:	6128      	str	r0, [r5, #16]
 8009912:	b920      	cbnz	r0, 800991e <_svfiprintf_r+0x2e>
 8009914:	230c      	movs	r3, #12
 8009916:	603b      	str	r3, [r7, #0]
 8009918:	f04f 30ff 	mov.w	r0, #4294967295
 800991c:	e0d0      	b.n	8009ac0 <_svfiprintf_r+0x1d0>
 800991e:	2340      	movs	r3, #64	; 0x40
 8009920:	616b      	str	r3, [r5, #20]
 8009922:	2300      	movs	r3, #0
 8009924:	9309      	str	r3, [sp, #36]	; 0x24
 8009926:	2320      	movs	r3, #32
 8009928:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800992c:	f8cd 800c 	str.w	r8, [sp, #12]
 8009930:	2330      	movs	r3, #48	; 0x30
 8009932:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009ad8 <_svfiprintf_r+0x1e8>
 8009936:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800993a:	f04f 0901 	mov.w	r9, #1
 800993e:	4623      	mov	r3, r4
 8009940:	469a      	mov	sl, r3
 8009942:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009946:	b10a      	cbz	r2, 800994c <_svfiprintf_r+0x5c>
 8009948:	2a25      	cmp	r2, #37	; 0x25
 800994a:	d1f9      	bne.n	8009940 <_svfiprintf_r+0x50>
 800994c:	ebba 0b04 	subs.w	fp, sl, r4
 8009950:	d00b      	beq.n	800996a <_svfiprintf_r+0x7a>
 8009952:	465b      	mov	r3, fp
 8009954:	4622      	mov	r2, r4
 8009956:	4629      	mov	r1, r5
 8009958:	4638      	mov	r0, r7
 800995a:	f7ff ff6f 	bl	800983c <__ssputs_r>
 800995e:	3001      	adds	r0, #1
 8009960:	f000 80a9 	beq.w	8009ab6 <_svfiprintf_r+0x1c6>
 8009964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009966:	445a      	add	r2, fp
 8009968:	9209      	str	r2, [sp, #36]	; 0x24
 800996a:	f89a 3000 	ldrb.w	r3, [sl]
 800996e:	2b00      	cmp	r3, #0
 8009970:	f000 80a1 	beq.w	8009ab6 <_svfiprintf_r+0x1c6>
 8009974:	2300      	movs	r3, #0
 8009976:	f04f 32ff 	mov.w	r2, #4294967295
 800997a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800997e:	f10a 0a01 	add.w	sl, sl, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	9307      	str	r3, [sp, #28]
 8009986:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800998a:	931a      	str	r3, [sp, #104]	; 0x68
 800998c:	4654      	mov	r4, sl
 800998e:	2205      	movs	r2, #5
 8009990:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009994:	4850      	ldr	r0, [pc, #320]	; (8009ad8 <_svfiprintf_r+0x1e8>)
 8009996:	f7f6 fc1b 	bl	80001d0 <memchr>
 800999a:	9a04      	ldr	r2, [sp, #16]
 800999c:	b9d8      	cbnz	r0, 80099d6 <_svfiprintf_r+0xe6>
 800999e:	06d0      	lsls	r0, r2, #27
 80099a0:	bf44      	itt	mi
 80099a2:	2320      	movmi	r3, #32
 80099a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099a8:	0711      	lsls	r1, r2, #28
 80099aa:	bf44      	itt	mi
 80099ac:	232b      	movmi	r3, #43	; 0x2b
 80099ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099b2:	f89a 3000 	ldrb.w	r3, [sl]
 80099b6:	2b2a      	cmp	r3, #42	; 0x2a
 80099b8:	d015      	beq.n	80099e6 <_svfiprintf_r+0xf6>
 80099ba:	9a07      	ldr	r2, [sp, #28]
 80099bc:	4654      	mov	r4, sl
 80099be:	2000      	movs	r0, #0
 80099c0:	f04f 0c0a 	mov.w	ip, #10
 80099c4:	4621      	mov	r1, r4
 80099c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80099ca:	3b30      	subs	r3, #48	; 0x30
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	d94d      	bls.n	8009a6c <_svfiprintf_r+0x17c>
 80099d0:	b1b0      	cbz	r0, 8009a00 <_svfiprintf_r+0x110>
 80099d2:	9207      	str	r2, [sp, #28]
 80099d4:	e014      	b.n	8009a00 <_svfiprintf_r+0x110>
 80099d6:	eba0 0308 	sub.w	r3, r0, r8
 80099da:	fa09 f303 	lsl.w	r3, r9, r3
 80099de:	4313      	orrs	r3, r2
 80099e0:	9304      	str	r3, [sp, #16]
 80099e2:	46a2      	mov	sl, r4
 80099e4:	e7d2      	b.n	800998c <_svfiprintf_r+0x9c>
 80099e6:	9b03      	ldr	r3, [sp, #12]
 80099e8:	1d19      	adds	r1, r3, #4
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	9103      	str	r1, [sp, #12]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	bfbb      	ittet	lt
 80099f2:	425b      	neglt	r3, r3
 80099f4:	f042 0202 	orrlt.w	r2, r2, #2
 80099f8:	9307      	strge	r3, [sp, #28]
 80099fa:	9307      	strlt	r3, [sp, #28]
 80099fc:	bfb8      	it	lt
 80099fe:	9204      	strlt	r2, [sp, #16]
 8009a00:	7823      	ldrb	r3, [r4, #0]
 8009a02:	2b2e      	cmp	r3, #46	; 0x2e
 8009a04:	d10c      	bne.n	8009a20 <_svfiprintf_r+0x130>
 8009a06:	7863      	ldrb	r3, [r4, #1]
 8009a08:	2b2a      	cmp	r3, #42	; 0x2a
 8009a0a:	d134      	bne.n	8009a76 <_svfiprintf_r+0x186>
 8009a0c:	9b03      	ldr	r3, [sp, #12]
 8009a0e:	1d1a      	adds	r2, r3, #4
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	9203      	str	r2, [sp, #12]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	bfb8      	it	lt
 8009a18:	f04f 33ff 	movlt.w	r3, #4294967295
 8009a1c:	3402      	adds	r4, #2
 8009a1e:	9305      	str	r3, [sp, #20]
 8009a20:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009ae8 <_svfiprintf_r+0x1f8>
 8009a24:	7821      	ldrb	r1, [r4, #0]
 8009a26:	2203      	movs	r2, #3
 8009a28:	4650      	mov	r0, sl
 8009a2a:	f7f6 fbd1 	bl	80001d0 <memchr>
 8009a2e:	b138      	cbz	r0, 8009a40 <_svfiprintf_r+0x150>
 8009a30:	9b04      	ldr	r3, [sp, #16]
 8009a32:	eba0 000a 	sub.w	r0, r0, sl
 8009a36:	2240      	movs	r2, #64	; 0x40
 8009a38:	4082      	lsls	r2, r0
 8009a3a:	4313      	orrs	r3, r2
 8009a3c:	3401      	adds	r4, #1
 8009a3e:	9304      	str	r3, [sp, #16]
 8009a40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a44:	4825      	ldr	r0, [pc, #148]	; (8009adc <_svfiprintf_r+0x1ec>)
 8009a46:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a4a:	2206      	movs	r2, #6
 8009a4c:	f7f6 fbc0 	bl	80001d0 <memchr>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d038      	beq.n	8009ac6 <_svfiprintf_r+0x1d6>
 8009a54:	4b22      	ldr	r3, [pc, #136]	; (8009ae0 <_svfiprintf_r+0x1f0>)
 8009a56:	bb1b      	cbnz	r3, 8009aa0 <_svfiprintf_r+0x1b0>
 8009a58:	9b03      	ldr	r3, [sp, #12]
 8009a5a:	3307      	adds	r3, #7
 8009a5c:	f023 0307 	bic.w	r3, r3, #7
 8009a60:	3308      	adds	r3, #8
 8009a62:	9303      	str	r3, [sp, #12]
 8009a64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a66:	4433      	add	r3, r6
 8009a68:	9309      	str	r3, [sp, #36]	; 0x24
 8009a6a:	e768      	b.n	800993e <_svfiprintf_r+0x4e>
 8009a6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009a70:	460c      	mov	r4, r1
 8009a72:	2001      	movs	r0, #1
 8009a74:	e7a6      	b.n	80099c4 <_svfiprintf_r+0xd4>
 8009a76:	2300      	movs	r3, #0
 8009a78:	3401      	adds	r4, #1
 8009a7a:	9305      	str	r3, [sp, #20]
 8009a7c:	4619      	mov	r1, r3
 8009a7e:	f04f 0c0a 	mov.w	ip, #10
 8009a82:	4620      	mov	r0, r4
 8009a84:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009a88:	3a30      	subs	r2, #48	; 0x30
 8009a8a:	2a09      	cmp	r2, #9
 8009a8c:	d903      	bls.n	8009a96 <_svfiprintf_r+0x1a6>
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d0c6      	beq.n	8009a20 <_svfiprintf_r+0x130>
 8009a92:	9105      	str	r1, [sp, #20]
 8009a94:	e7c4      	b.n	8009a20 <_svfiprintf_r+0x130>
 8009a96:	fb0c 2101 	mla	r1, ip, r1, r2
 8009a9a:	4604      	mov	r4, r0
 8009a9c:	2301      	movs	r3, #1
 8009a9e:	e7f0      	b.n	8009a82 <_svfiprintf_r+0x192>
 8009aa0:	ab03      	add	r3, sp, #12
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	462a      	mov	r2, r5
 8009aa6:	4b0f      	ldr	r3, [pc, #60]	; (8009ae4 <_svfiprintf_r+0x1f4>)
 8009aa8:	a904      	add	r1, sp, #16
 8009aaa:	4638      	mov	r0, r7
 8009aac:	f7fd fe62 	bl	8007774 <_printf_float>
 8009ab0:	1c42      	adds	r2, r0, #1
 8009ab2:	4606      	mov	r6, r0
 8009ab4:	d1d6      	bne.n	8009a64 <_svfiprintf_r+0x174>
 8009ab6:	89ab      	ldrh	r3, [r5, #12]
 8009ab8:	065b      	lsls	r3, r3, #25
 8009aba:	f53f af2d 	bmi.w	8009918 <_svfiprintf_r+0x28>
 8009abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009ac0:	b01d      	add	sp, #116	; 0x74
 8009ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac6:	ab03      	add	r3, sp, #12
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	462a      	mov	r2, r5
 8009acc:	4b05      	ldr	r3, [pc, #20]	; (8009ae4 <_svfiprintf_r+0x1f4>)
 8009ace:	a904      	add	r1, sp, #16
 8009ad0:	4638      	mov	r0, r7
 8009ad2:	f7fe f8f3 	bl	8007cbc <_printf_i>
 8009ad6:	e7eb      	b.n	8009ab0 <_svfiprintf_r+0x1c0>
 8009ad8:	0800a5fc 	.word	0x0800a5fc
 8009adc:	0800a606 	.word	0x0800a606
 8009ae0:	08007775 	.word	0x08007775
 8009ae4:	0800983d 	.word	0x0800983d
 8009ae8:	0800a602 	.word	0x0800a602

08009aec <__sflush_r>:
 8009aec:	898a      	ldrh	r2, [r1, #12]
 8009aee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009af2:	4605      	mov	r5, r0
 8009af4:	0710      	lsls	r0, r2, #28
 8009af6:	460c      	mov	r4, r1
 8009af8:	d458      	bmi.n	8009bac <__sflush_r+0xc0>
 8009afa:	684b      	ldr	r3, [r1, #4]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	dc05      	bgt.n	8009b0c <__sflush_r+0x20>
 8009b00:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	dc02      	bgt.n	8009b0c <__sflush_r+0x20>
 8009b06:	2000      	movs	r0, #0
 8009b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b0c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b0e:	2e00      	cmp	r6, #0
 8009b10:	d0f9      	beq.n	8009b06 <__sflush_r+0x1a>
 8009b12:	2300      	movs	r3, #0
 8009b14:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009b18:	682f      	ldr	r7, [r5, #0]
 8009b1a:	6a21      	ldr	r1, [r4, #32]
 8009b1c:	602b      	str	r3, [r5, #0]
 8009b1e:	d032      	beq.n	8009b86 <__sflush_r+0x9a>
 8009b20:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009b22:	89a3      	ldrh	r3, [r4, #12]
 8009b24:	075a      	lsls	r2, r3, #29
 8009b26:	d505      	bpl.n	8009b34 <__sflush_r+0x48>
 8009b28:	6863      	ldr	r3, [r4, #4]
 8009b2a:	1ac0      	subs	r0, r0, r3
 8009b2c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009b2e:	b10b      	cbz	r3, 8009b34 <__sflush_r+0x48>
 8009b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009b32:	1ac0      	subs	r0, r0, r3
 8009b34:	2300      	movs	r3, #0
 8009b36:	4602      	mov	r2, r0
 8009b38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009b3a:	6a21      	ldr	r1, [r4, #32]
 8009b3c:	4628      	mov	r0, r5
 8009b3e:	47b0      	blx	r6
 8009b40:	1c43      	adds	r3, r0, #1
 8009b42:	89a3      	ldrh	r3, [r4, #12]
 8009b44:	d106      	bne.n	8009b54 <__sflush_r+0x68>
 8009b46:	6829      	ldr	r1, [r5, #0]
 8009b48:	291d      	cmp	r1, #29
 8009b4a:	d82b      	bhi.n	8009ba4 <__sflush_r+0xb8>
 8009b4c:	4a29      	ldr	r2, [pc, #164]	; (8009bf4 <__sflush_r+0x108>)
 8009b4e:	410a      	asrs	r2, r1
 8009b50:	07d6      	lsls	r6, r2, #31
 8009b52:	d427      	bmi.n	8009ba4 <__sflush_r+0xb8>
 8009b54:	2200      	movs	r2, #0
 8009b56:	6062      	str	r2, [r4, #4]
 8009b58:	04d9      	lsls	r1, r3, #19
 8009b5a:	6922      	ldr	r2, [r4, #16]
 8009b5c:	6022      	str	r2, [r4, #0]
 8009b5e:	d504      	bpl.n	8009b6a <__sflush_r+0x7e>
 8009b60:	1c42      	adds	r2, r0, #1
 8009b62:	d101      	bne.n	8009b68 <__sflush_r+0x7c>
 8009b64:	682b      	ldr	r3, [r5, #0]
 8009b66:	b903      	cbnz	r3, 8009b6a <__sflush_r+0x7e>
 8009b68:	6560      	str	r0, [r4, #84]	; 0x54
 8009b6a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009b6c:	602f      	str	r7, [r5, #0]
 8009b6e:	2900      	cmp	r1, #0
 8009b70:	d0c9      	beq.n	8009b06 <__sflush_r+0x1a>
 8009b72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009b76:	4299      	cmp	r1, r3
 8009b78:	d002      	beq.n	8009b80 <__sflush_r+0x94>
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	f7ff f9e2 	bl	8008f44 <_free_r>
 8009b80:	2000      	movs	r0, #0
 8009b82:	6360      	str	r0, [r4, #52]	; 0x34
 8009b84:	e7c0      	b.n	8009b08 <__sflush_r+0x1c>
 8009b86:	2301      	movs	r3, #1
 8009b88:	4628      	mov	r0, r5
 8009b8a:	47b0      	blx	r6
 8009b8c:	1c41      	adds	r1, r0, #1
 8009b8e:	d1c8      	bne.n	8009b22 <__sflush_r+0x36>
 8009b90:	682b      	ldr	r3, [r5, #0]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d0c5      	beq.n	8009b22 <__sflush_r+0x36>
 8009b96:	2b1d      	cmp	r3, #29
 8009b98:	d001      	beq.n	8009b9e <__sflush_r+0xb2>
 8009b9a:	2b16      	cmp	r3, #22
 8009b9c:	d101      	bne.n	8009ba2 <__sflush_r+0xb6>
 8009b9e:	602f      	str	r7, [r5, #0]
 8009ba0:	e7b1      	b.n	8009b06 <__sflush_r+0x1a>
 8009ba2:	89a3      	ldrh	r3, [r4, #12]
 8009ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ba8:	81a3      	strh	r3, [r4, #12]
 8009baa:	e7ad      	b.n	8009b08 <__sflush_r+0x1c>
 8009bac:	690f      	ldr	r7, [r1, #16]
 8009bae:	2f00      	cmp	r7, #0
 8009bb0:	d0a9      	beq.n	8009b06 <__sflush_r+0x1a>
 8009bb2:	0793      	lsls	r3, r2, #30
 8009bb4:	680e      	ldr	r6, [r1, #0]
 8009bb6:	bf08      	it	eq
 8009bb8:	694b      	ldreq	r3, [r1, #20]
 8009bba:	600f      	str	r7, [r1, #0]
 8009bbc:	bf18      	it	ne
 8009bbe:	2300      	movne	r3, #0
 8009bc0:	eba6 0807 	sub.w	r8, r6, r7
 8009bc4:	608b      	str	r3, [r1, #8]
 8009bc6:	f1b8 0f00 	cmp.w	r8, #0
 8009bca:	dd9c      	ble.n	8009b06 <__sflush_r+0x1a>
 8009bcc:	6a21      	ldr	r1, [r4, #32]
 8009bce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009bd0:	4643      	mov	r3, r8
 8009bd2:	463a      	mov	r2, r7
 8009bd4:	4628      	mov	r0, r5
 8009bd6:	47b0      	blx	r6
 8009bd8:	2800      	cmp	r0, #0
 8009bda:	dc06      	bgt.n	8009bea <__sflush_r+0xfe>
 8009bdc:	89a3      	ldrh	r3, [r4, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009be2:	81a3      	strh	r3, [r4, #12]
 8009be4:	f04f 30ff 	mov.w	r0, #4294967295
 8009be8:	e78e      	b.n	8009b08 <__sflush_r+0x1c>
 8009bea:	4407      	add	r7, r0
 8009bec:	eba8 0800 	sub.w	r8, r8, r0
 8009bf0:	e7e9      	b.n	8009bc6 <__sflush_r+0xda>
 8009bf2:	bf00      	nop
 8009bf4:	dfbffffe 	.word	0xdfbffffe

08009bf8 <_fflush_r>:
 8009bf8:	b538      	push	{r3, r4, r5, lr}
 8009bfa:	690b      	ldr	r3, [r1, #16]
 8009bfc:	4605      	mov	r5, r0
 8009bfe:	460c      	mov	r4, r1
 8009c00:	b913      	cbnz	r3, 8009c08 <_fflush_r+0x10>
 8009c02:	2500      	movs	r5, #0
 8009c04:	4628      	mov	r0, r5
 8009c06:	bd38      	pop	{r3, r4, r5, pc}
 8009c08:	b118      	cbz	r0, 8009c12 <_fflush_r+0x1a>
 8009c0a:	6a03      	ldr	r3, [r0, #32]
 8009c0c:	b90b      	cbnz	r3, 8009c12 <_fflush_r+0x1a>
 8009c0e:	f7fe fa03 	bl	8008018 <__sinit>
 8009c12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0f3      	beq.n	8009c02 <_fflush_r+0xa>
 8009c1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009c1c:	07d0      	lsls	r0, r2, #31
 8009c1e:	d404      	bmi.n	8009c2a <_fflush_r+0x32>
 8009c20:	0599      	lsls	r1, r3, #22
 8009c22:	d402      	bmi.n	8009c2a <_fflush_r+0x32>
 8009c24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c26:	f7fe fb0e 	bl	8008246 <__retarget_lock_acquire_recursive>
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	4621      	mov	r1, r4
 8009c2e:	f7ff ff5d 	bl	8009aec <__sflush_r>
 8009c32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c34:	07da      	lsls	r2, r3, #31
 8009c36:	4605      	mov	r5, r0
 8009c38:	d4e4      	bmi.n	8009c04 <_fflush_r+0xc>
 8009c3a:	89a3      	ldrh	r3, [r4, #12]
 8009c3c:	059b      	lsls	r3, r3, #22
 8009c3e:	d4e1      	bmi.n	8009c04 <_fflush_r+0xc>
 8009c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c42:	f7fe fb01 	bl	8008248 <__retarget_lock_release_recursive>
 8009c46:	e7dd      	b.n	8009c04 <_fflush_r+0xc>

08009c48 <memmove>:
 8009c48:	4288      	cmp	r0, r1
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	eb01 0402 	add.w	r4, r1, r2
 8009c50:	d902      	bls.n	8009c58 <memmove+0x10>
 8009c52:	4284      	cmp	r4, r0
 8009c54:	4623      	mov	r3, r4
 8009c56:	d807      	bhi.n	8009c68 <memmove+0x20>
 8009c58:	1e43      	subs	r3, r0, #1
 8009c5a:	42a1      	cmp	r1, r4
 8009c5c:	d008      	beq.n	8009c70 <memmove+0x28>
 8009c5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009c62:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009c66:	e7f8      	b.n	8009c5a <memmove+0x12>
 8009c68:	4402      	add	r2, r0
 8009c6a:	4601      	mov	r1, r0
 8009c6c:	428a      	cmp	r2, r1
 8009c6e:	d100      	bne.n	8009c72 <memmove+0x2a>
 8009c70:	bd10      	pop	{r4, pc}
 8009c72:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009c76:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009c7a:	e7f7      	b.n	8009c6c <memmove+0x24>

08009c7c <_sbrk_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	; (8009c98 <_sbrk_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f7 ffdc 	bl	8001c44 <_sbrk>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_sbrk_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_sbrk_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	200005a8 	.word	0x200005a8

08009c9c <memcpy>:
 8009c9c:	440a      	add	r2, r1
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8009ca4:	d100      	bne.n	8009ca8 <memcpy+0xc>
 8009ca6:	4770      	bx	lr
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cb2:	4291      	cmp	r1, r2
 8009cb4:	d1f9      	bne.n	8009caa <memcpy+0xe>
 8009cb6:	bd10      	pop	{r4, pc}

08009cb8 <__assert_func>:
 8009cb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009cba:	4614      	mov	r4, r2
 8009cbc:	461a      	mov	r2, r3
 8009cbe:	4b09      	ldr	r3, [pc, #36]	; (8009ce4 <__assert_func+0x2c>)
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	4605      	mov	r5, r0
 8009cc4:	68d8      	ldr	r0, [r3, #12]
 8009cc6:	b14c      	cbz	r4, 8009cdc <__assert_func+0x24>
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <__assert_func+0x30>)
 8009cca:	9100      	str	r1, [sp, #0]
 8009ccc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cd0:	4906      	ldr	r1, [pc, #24]	; (8009cec <__assert_func+0x34>)
 8009cd2:	462b      	mov	r3, r5
 8009cd4:	f000 f872 	bl	8009dbc <fiprintf>
 8009cd8:	f000 f882 	bl	8009de0 <abort>
 8009cdc:	4b04      	ldr	r3, [pc, #16]	; (8009cf0 <__assert_func+0x38>)
 8009cde:	461c      	mov	r4, r3
 8009ce0:	e7f3      	b.n	8009cca <__assert_func+0x12>
 8009ce2:	bf00      	nop
 8009ce4:	20000068 	.word	0x20000068
 8009ce8:	0800a617 	.word	0x0800a617
 8009cec:	0800a624 	.word	0x0800a624
 8009cf0:	0800a652 	.word	0x0800a652

08009cf4 <_calloc_r>:
 8009cf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009cf6:	fba1 2402 	umull	r2, r4, r1, r2
 8009cfa:	b94c      	cbnz	r4, 8009d10 <_calloc_r+0x1c>
 8009cfc:	4611      	mov	r1, r2
 8009cfe:	9201      	str	r2, [sp, #4]
 8009d00:	f7ff f994 	bl	800902c <_malloc_r>
 8009d04:	9a01      	ldr	r2, [sp, #4]
 8009d06:	4605      	mov	r5, r0
 8009d08:	b930      	cbnz	r0, 8009d18 <_calloc_r+0x24>
 8009d0a:	4628      	mov	r0, r5
 8009d0c:	b003      	add	sp, #12
 8009d0e:	bd30      	pop	{r4, r5, pc}
 8009d10:	220c      	movs	r2, #12
 8009d12:	6002      	str	r2, [r0, #0]
 8009d14:	2500      	movs	r5, #0
 8009d16:	e7f8      	b.n	8009d0a <_calloc_r+0x16>
 8009d18:	4621      	mov	r1, r4
 8009d1a:	f7fe fa16 	bl	800814a <memset>
 8009d1e:	e7f4      	b.n	8009d0a <_calloc_r+0x16>

08009d20 <__ascii_mbtowc>:
 8009d20:	b082      	sub	sp, #8
 8009d22:	b901      	cbnz	r1, 8009d26 <__ascii_mbtowc+0x6>
 8009d24:	a901      	add	r1, sp, #4
 8009d26:	b142      	cbz	r2, 8009d3a <__ascii_mbtowc+0x1a>
 8009d28:	b14b      	cbz	r3, 8009d3e <__ascii_mbtowc+0x1e>
 8009d2a:	7813      	ldrb	r3, [r2, #0]
 8009d2c:	600b      	str	r3, [r1, #0]
 8009d2e:	7812      	ldrb	r2, [r2, #0]
 8009d30:	1e10      	subs	r0, r2, #0
 8009d32:	bf18      	it	ne
 8009d34:	2001      	movne	r0, #1
 8009d36:	b002      	add	sp, #8
 8009d38:	4770      	bx	lr
 8009d3a:	4610      	mov	r0, r2
 8009d3c:	e7fb      	b.n	8009d36 <__ascii_mbtowc+0x16>
 8009d3e:	f06f 0001 	mvn.w	r0, #1
 8009d42:	e7f8      	b.n	8009d36 <__ascii_mbtowc+0x16>

08009d44 <_realloc_r>:
 8009d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d48:	4680      	mov	r8, r0
 8009d4a:	4614      	mov	r4, r2
 8009d4c:	460e      	mov	r6, r1
 8009d4e:	b921      	cbnz	r1, 8009d5a <_realloc_r+0x16>
 8009d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d54:	4611      	mov	r1, r2
 8009d56:	f7ff b969 	b.w	800902c <_malloc_r>
 8009d5a:	b92a      	cbnz	r2, 8009d68 <_realloc_r+0x24>
 8009d5c:	f7ff f8f2 	bl	8008f44 <_free_r>
 8009d60:	4625      	mov	r5, r4
 8009d62:	4628      	mov	r0, r5
 8009d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d68:	f000 f841 	bl	8009dee <_malloc_usable_size_r>
 8009d6c:	4284      	cmp	r4, r0
 8009d6e:	4607      	mov	r7, r0
 8009d70:	d802      	bhi.n	8009d78 <_realloc_r+0x34>
 8009d72:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d76:	d812      	bhi.n	8009d9e <_realloc_r+0x5a>
 8009d78:	4621      	mov	r1, r4
 8009d7a:	4640      	mov	r0, r8
 8009d7c:	f7ff f956 	bl	800902c <_malloc_r>
 8009d80:	4605      	mov	r5, r0
 8009d82:	2800      	cmp	r0, #0
 8009d84:	d0ed      	beq.n	8009d62 <_realloc_r+0x1e>
 8009d86:	42bc      	cmp	r4, r7
 8009d88:	4622      	mov	r2, r4
 8009d8a:	4631      	mov	r1, r6
 8009d8c:	bf28      	it	cs
 8009d8e:	463a      	movcs	r2, r7
 8009d90:	f7ff ff84 	bl	8009c9c <memcpy>
 8009d94:	4631      	mov	r1, r6
 8009d96:	4640      	mov	r0, r8
 8009d98:	f7ff f8d4 	bl	8008f44 <_free_r>
 8009d9c:	e7e1      	b.n	8009d62 <_realloc_r+0x1e>
 8009d9e:	4635      	mov	r5, r6
 8009da0:	e7df      	b.n	8009d62 <_realloc_r+0x1e>

08009da2 <__ascii_wctomb>:
 8009da2:	b149      	cbz	r1, 8009db8 <__ascii_wctomb+0x16>
 8009da4:	2aff      	cmp	r2, #255	; 0xff
 8009da6:	bf85      	ittet	hi
 8009da8:	238a      	movhi	r3, #138	; 0x8a
 8009daa:	6003      	strhi	r3, [r0, #0]
 8009dac:	700a      	strbls	r2, [r1, #0]
 8009dae:	f04f 30ff 	movhi.w	r0, #4294967295
 8009db2:	bf98      	it	ls
 8009db4:	2001      	movls	r0, #1
 8009db6:	4770      	bx	lr
 8009db8:	4608      	mov	r0, r1
 8009dba:	4770      	bx	lr

08009dbc <fiprintf>:
 8009dbc:	b40e      	push	{r1, r2, r3}
 8009dbe:	b503      	push	{r0, r1, lr}
 8009dc0:	4601      	mov	r1, r0
 8009dc2:	ab03      	add	r3, sp, #12
 8009dc4:	4805      	ldr	r0, [pc, #20]	; (8009ddc <fiprintf+0x20>)
 8009dc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dca:	6800      	ldr	r0, [r0, #0]
 8009dcc:	9301      	str	r3, [sp, #4]
 8009dce:	f000 f83f 	bl	8009e50 <_vfiprintf_r>
 8009dd2:	b002      	add	sp, #8
 8009dd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dd8:	b003      	add	sp, #12
 8009dda:	4770      	bx	lr
 8009ddc:	20000068 	.word	0x20000068

08009de0 <abort>:
 8009de0:	b508      	push	{r3, lr}
 8009de2:	2006      	movs	r0, #6
 8009de4:	f000 fa0c 	bl	800a200 <raise>
 8009de8:	2001      	movs	r0, #1
 8009dea:	f7f7 feb3 	bl	8001b54 <_exit>

08009dee <_malloc_usable_size_r>:
 8009dee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009df2:	1f18      	subs	r0, r3, #4
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	bfbc      	itt	lt
 8009df8:	580b      	ldrlt	r3, [r1, r0]
 8009dfa:	18c0      	addlt	r0, r0, r3
 8009dfc:	4770      	bx	lr

08009dfe <__sfputc_r>:
 8009dfe:	6893      	ldr	r3, [r2, #8]
 8009e00:	3b01      	subs	r3, #1
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	b410      	push	{r4}
 8009e06:	6093      	str	r3, [r2, #8]
 8009e08:	da08      	bge.n	8009e1c <__sfputc_r+0x1e>
 8009e0a:	6994      	ldr	r4, [r2, #24]
 8009e0c:	42a3      	cmp	r3, r4
 8009e0e:	db01      	blt.n	8009e14 <__sfputc_r+0x16>
 8009e10:	290a      	cmp	r1, #10
 8009e12:	d103      	bne.n	8009e1c <__sfputc_r+0x1e>
 8009e14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e18:	f000 b934 	b.w	800a084 <__swbuf_r>
 8009e1c:	6813      	ldr	r3, [r2, #0]
 8009e1e:	1c58      	adds	r0, r3, #1
 8009e20:	6010      	str	r0, [r2, #0]
 8009e22:	7019      	strb	r1, [r3, #0]
 8009e24:	4608      	mov	r0, r1
 8009e26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <__sfputs_r>:
 8009e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	4614      	mov	r4, r2
 8009e34:	18d5      	adds	r5, r2, r3
 8009e36:	42ac      	cmp	r4, r5
 8009e38:	d101      	bne.n	8009e3e <__sfputs_r+0x12>
 8009e3a:	2000      	movs	r0, #0
 8009e3c:	e007      	b.n	8009e4e <__sfputs_r+0x22>
 8009e3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e42:	463a      	mov	r2, r7
 8009e44:	4630      	mov	r0, r6
 8009e46:	f7ff ffda 	bl	8009dfe <__sfputc_r>
 8009e4a:	1c43      	adds	r3, r0, #1
 8009e4c:	d1f3      	bne.n	8009e36 <__sfputs_r+0xa>
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e50 <_vfiprintf_r>:
 8009e50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e54:	460d      	mov	r5, r1
 8009e56:	b09d      	sub	sp, #116	; 0x74
 8009e58:	4614      	mov	r4, r2
 8009e5a:	4698      	mov	r8, r3
 8009e5c:	4606      	mov	r6, r0
 8009e5e:	b118      	cbz	r0, 8009e68 <_vfiprintf_r+0x18>
 8009e60:	6a03      	ldr	r3, [r0, #32]
 8009e62:	b90b      	cbnz	r3, 8009e68 <_vfiprintf_r+0x18>
 8009e64:	f7fe f8d8 	bl	8008018 <__sinit>
 8009e68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e6a:	07d9      	lsls	r1, r3, #31
 8009e6c:	d405      	bmi.n	8009e7a <_vfiprintf_r+0x2a>
 8009e6e:	89ab      	ldrh	r3, [r5, #12]
 8009e70:	059a      	lsls	r2, r3, #22
 8009e72:	d402      	bmi.n	8009e7a <_vfiprintf_r+0x2a>
 8009e74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e76:	f7fe f9e6 	bl	8008246 <__retarget_lock_acquire_recursive>
 8009e7a:	89ab      	ldrh	r3, [r5, #12]
 8009e7c:	071b      	lsls	r3, r3, #28
 8009e7e:	d501      	bpl.n	8009e84 <_vfiprintf_r+0x34>
 8009e80:	692b      	ldr	r3, [r5, #16]
 8009e82:	b99b      	cbnz	r3, 8009eac <_vfiprintf_r+0x5c>
 8009e84:	4629      	mov	r1, r5
 8009e86:	4630      	mov	r0, r6
 8009e88:	f000 f93a 	bl	800a100 <__swsetup_r>
 8009e8c:	b170      	cbz	r0, 8009eac <_vfiprintf_r+0x5c>
 8009e8e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e90:	07dc      	lsls	r4, r3, #31
 8009e92:	d504      	bpl.n	8009e9e <_vfiprintf_r+0x4e>
 8009e94:	f04f 30ff 	mov.w	r0, #4294967295
 8009e98:	b01d      	add	sp, #116	; 0x74
 8009e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e9e:	89ab      	ldrh	r3, [r5, #12]
 8009ea0:	0598      	lsls	r0, r3, #22
 8009ea2:	d4f7      	bmi.n	8009e94 <_vfiprintf_r+0x44>
 8009ea4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009ea6:	f7fe f9cf 	bl	8008248 <__retarget_lock_release_recursive>
 8009eaa:	e7f3      	b.n	8009e94 <_vfiprintf_r+0x44>
 8009eac:	2300      	movs	r3, #0
 8009eae:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb0:	2320      	movs	r3, #32
 8009eb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009eb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8009eba:	2330      	movs	r3, #48	; 0x30
 8009ebc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a070 <_vfiprintf_r+0x220>
 8009ec0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ec4:	f04f 0901 	mov.w	r9, #1
 8009ec8:	4623      	mov	r3, r4
 8009eca:	469a      	mov	sl, r3
 8009ecc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ed0:	b10a      	cbz	r2, 8009ed6 <_vfiprintf_r+0x86>
 8009ed2:	2a25      	cmp	r2, #37	; 0x25
 8009ed4:	d1f9      	bne.n	8009eca <_vfiprintf_r+0x7a>
 8009ed6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eda:	d00b      	beq.n	8009ef4 <_vfiprintf_r+0xa4>
 8009edc:	465b      	mov	r3, fp
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4629      	mov	r1, r5
 8009ee2:	4630      	mov	r0, r6
 8009ee4:	f7ff ffa2 	bl	8009e2c <__sfputs_r>
 8009ee8:	3001      	adds	r0, #1
 8009eea:	f000 80a9 	beq.w	800a040 <_vfiprintf_r+0x1f0>
 8009eee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ef0:	445a      	add	r2, fp
 8009ef2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ef4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	f000 80a1 	beq.w	800a040 <_vfiprintf_r+0x1f0>
 8009efe:	2300      	movs	r3, #0
 8009f00:	f04f 32ff 	mov.w	r2, #4294967295
 8009f04:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f08:	f10a 0a01 	add.w	sl, sl, #1
 8009f0c:	9304      	str	r3, [sp, #16]
 8009f0e:	9307      	str	r3, [sp, #28]
 8009f10:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009f14:	931a      	str	r3, [sp, #104]	; 0x68
 8009f16:	4654      	mov	r4, sl
 8009f18:	2205      	movs	r2, #5
 8009f1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f1e:	4854      	ldr	r0, [pc, #336]	; (800a070 <_vfiprintf_r+0x220>)
 8009f20:	f7f6 f956 	bl	80001d0 <memchr>
 8009f24:	9a04      	ldr	r2, [sp, #16]
 8009f26:	b9d8      	cbnz	r0, 8009f60 <_vfiprintf_r+0x110>
 8009f28:	06d1      	lsls	r1, r2, #27
 8009f2a:	bf44      	itt	mi
 8009f2c:	2320      	movmi	r3, #32
 8009f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f32:	0713      	lsls	r3, r2, #28
 8009f34:	bf44      	itt	mi
 8009f36:	232b      	movmi	r3, #43	; 0x2b
 8009f38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f3c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f40:	2b2a      	cmp	r3, #42	; 0x2a
 8009f42:	d015      	beq.n	8009f70 <_vfiprintf_r+0x120>
 8009f44:	9a07      	ldr	r2, [sp, #28]
 8009f46:	4654      	mov	r4, sl
 8009f48:	2000      	movs	r0, #0
 8009f4a:	f04f 0c0a 	mov.w	ip, #10
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f54:	3b30      	subs	r3, #48	; 0x30
 8009f56:	2b09      	cmp	r3, #9
 8009f58:	d94d      	bls.n	8009ff6 <_vfiprintf_r+0x1a6>
 8009f5a:	b1b0      	cbz	r0, 8009f8a <_vfiprintf_r+0x13a>
 8009f5c:	9207      	str	r2, [sp, #28]
 8009f5e:	e014      	b.n	8009f8a <_vfiprintf_r+0x13a>
 8009f60:	eba0 0308 	sub.w	r3, r0, r8
 8009f64:	fa09 f303 	lsl.w	r3, r9, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	9304      	str	r3, [sp, #16]
 8009f6c:	46a2      	mov	sl, r4
 8009f6e:	e7d2      	b.n	8009f16 <_vfiprintf_r+0xc6>
 8009f70:	9b03      	ldr	r3, [sp, #12]
 8009f72:	1d19      	adds	r1, r3, #4
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	9103      	str	r1, [sp, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	bfbb      	ittet	lt
 8009f7c:	425b      	neglt	r3, r3
 8009f7e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f82:	9307      	strge	r3, [sp, #28]
 8009f84:	9307      	strlt	r3, [sp, #28]
 8009f86:	bfb8      	it	lt
 8009f88:	9204      	strlt	r2, [sp, #16]
 8009f8a:	7823      	ldrb	r3, [r4, #0]
 8009f8c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f8e:	d10c      	bne.n	8009faa <_vfiprintf_r+0x15a>
 8009f90:	7863      	ldrb	r3, [r4, #1]
 8009f92:	2b2a      	cmp	r3, #42	; 0x2a
 8009f94:	d134      	bne.n	800a000 <_vfiprintf_r+0x1b0>
 8009f96:	9b03      	ldr	r3, [sp, #12]
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	9203      	str	r2, [sp, #12]
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	bfb8      	it	lt
 8009fa2:	f04f 33ff 	movlt.w	r3, #4294967295
 8009fa6:	3402      	adds	r4, #2
 8009fa8:	9305      	str	r3, [sp, #20]
 8009faa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a080 <_vfiprintf_r+0x230>
 8009fae:	7821      	ldrb	r1, [r4, #0]
 8009fb0:	2203      	movs	r2, #3
 8009fb2:	4650      	mov	r0, sl
 8009fb4:	f7f6 f90c 	bl	80001d0 <memchr>
 8009fb8:	b138      	cbz	r0, 8009fca <_vfiprintf_r+0x17a>
 8009fba:	9b04      	ldr	r3, [sp, #16]
 8009fbc:	eba0 000a 	sub.w	r0, r0, sl
 8009fc0:	2240      	movs	r2, #64	; 0x40
 8009fc2:	4082      	lsls	r2, r0
 8009fc4:	4313      	orrs	r3, r2
 8009fc6:	3401      	adds	r4, #1
 8009fc8:	9304      	str	r3, [sp, #16]
 8009fca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fce:	4829      	ldr	r0, [pc, #164]	; (800a074 <_vfiprintf_r+0x224>)
 8009fd0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fd4:	2206      	movs	r2, #6
 8009fd6:	f7f6 f8fb 	bl	80001d0 <memchr>
 8009fda:	2800      	cmp	r0, #0
 8009fdc:	d03f      	beq.n	800a05e <_vfiprintf_r+0x20e>
 8009fde:	4b26      	ldr	r3, [pc, #152]	; (800a078 <_vfiprintf_r+0x228>)
 8009fe0:	bb1b      	cbnz	r3, 800a02a <_vfiprintf_r+0x1da>
 8009fe2:	9b03      	ldr	r3, [sp, #12]
 8009fe4:	3307      	adds	r3, #7
 8009fe6:	f023 0307 	bic.w	r3, r3, #7
 8009fea:	3308      	adds	r3, #8
 8009fec:	9303      	str	r3, [sp, #12]
 8009fee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ff0:	443b      	add	r3, r7
 8009ff2:	9309      	str	r3, [sp, #36]	; 0x24
 8009ff4:	e768      	b.n	8009ec8 <_vfiprintf_r+0x78>
 8009ff6:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ffa:	460c      	mov	r4, r1
 8009ffc:	2001      	movs	r0, #1
 8009ffe:	e7a6      	b.n	8009f4e <_vfiprintf_r+0xfe>
 800a000:	2300      	movs	r3, #0
 800a002:	3401      	adds	r4, #1
 800a004:	9305      	str	r3, [sp, #20]
 800a006:	4619      	mov	r1, r3
 800a008:	f04f 0c0a 	mov.w	ip, #10
 800a00c:	4620      	mov	r0, r4
 800a00e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a012:	3a30      	subs	r2, #48	; 0x30
 800a014:	2a09      	cmp	r2, #9
 800a016:	d903      	bls.n	800a020 <_vfiprintf_r+0x1d0>
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d0c6      	beq.n	8009faa <_vfiprintf_r+0x15a>
 800a01c:	9105      	str	r1, [sp, #20]
 800a01e:	e7c4      	b.n	8009faa <_vfiprintf_r+0x15a>
 800a020:	fb0c 2101 	mla	r1, ip, r1, r2
 800a024:	4604      	mov	r4, r0
 800a026:	2301      	movs	r3, #1
 800a028:	e7f0      	b.n	800a00c <_vfiprintf_r+0x1bc>
 800a02a:	ab03      	add	r3, sp, #12
 800a02c:	9300      	str	r3, [sp, #0]
 800a02e:	462a      	mov	r2, r5
 800a030:	4b12      	ldr	r3, [pc, #72]	; (800a07c <_vfiprintf_r+0x22c>)
 800a032:	a904      	add	r1, sp, #16
 800a034:	4630      	mov	r0, r6
 800a036:	f7fd fb9d 	bl	8007774 <_printf_float>
 800a03a:	4607      	mov	r7, r0
 800a03c:	1c78      	adds	r0, r7, #1
 800a03e:	d1d6      	bne.n	8009fee <_vfiprintf_r+0x19e>
 800a040:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a042:	07d9      	lsls	r1, r3, #31
 800a044:	d405      	bmi.n	800a052 <_vfiprintf_r+0x202>
 800a046:	89ab      	ldrh	r3, [r5, #12]
 800a048:	059a      	lsls	r2, r3, #22
 800a04a:	d402      	bmi.n	800a052 <_vfiprintf_r+0x202>
 800a04c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a04e:	f7fe f8fb 	bl	8008248 <__retarget_lock_release_recursive>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	065b      	lsls	r3, r3, #25
 800a056:	f53f af1d 	bmi.w	8009e94 <_vfiprintf_r+0x44>
 800a05a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a05c:	e71c      	b.n	8009e98 <_vfiprintf_r+0x48>
 800a05e:	ab03      	add	r3, sp, #12
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	462a      	mov	r2, r5
 800a064:	4b05      	ldr	r3, [pc, #20]	; (800a07c <_vfiprintf_r+0x22c>)
 800a066:	a904      	add	r1, sp, #16
 800a068:	4630      	mov	r0, r6
 800a06a:	f7fd fe27 	bl	8007cbc <_printf_i>
 800a06e:	e7e4      	b.n	800a03a <_vfiprintf_r+0x1ea>
 800a070:	0800a5fc 	.word	0x0800a5fc
 800a074:	0800a606 	.word	0x0800a606
 800a078:	08007775 	.word	0x08007775
 800a07c:	08009e2d 	.word	0x08009e2d
 800a080:	0800a602 	.word	0x0800a602

0800a084 <__swbuf_r>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	460e      	mov	r6, r1
 800a088:	4614      	mov	r4, r2
 800a08a:	4605      	mov	r5, r0
 800a08c:	b118      	cbz	r0, 800a096 <__swbuf_r+0x12>
 800a08e:	6a03      	ldr	r3, [r0, #32]
 800a090:	b90b      	cbnz	r3, 800a096 <__swbuf_r+0x12>
 800a092:	f7fd ffc1 	bl	8008018 <__sinit>
 800a096:	69a3      	ldr	r3, [r4, #24]
 800a098:	60a3      	str	r3, [r4, #8]
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	071a      	lsls	r2, r3, #28
 800a09e:	d525      	bpl.n	800a0ec <__swbuf_r+0x68>
 800a0a0:	6923      	ldr	r3, [r4, #16]
 800a0a2:	b31b      	cbz	r3, 800a0ec <__swbuf_r+0x68>
 800a0a4:	6823      	ldr	r3, [r4, #0]
 800a0a6:	6922      	ldr	r2, [r4, #16]
 800a0a8:	1a98      	subs	r0, r3, r2
 800a0aa:	6963      	ldr	r3, [r4, #20]
 800a0ac:	b2f6      	uxtb	r6, r6
 800a0ae:	4283      	cmp	r3, r0
 800a0b0:	4637      	mov	r7, r6
 800a0b2:	dc04      	bgt.n	800a0be <__swbuf_r+0x3a>
 800a0b4:	4621      	mov	r1, r4
 800a0b6:	4628      	mov	r0, r5
 800a0b8:	f7ff fd9e 	bl	8009bf8 <_fflush_r>
 800a0bc:	b9e0      	cbnz	r0, 800a0f8 <__swbuf_r+0x74>
 800a0be:	68a3      	ldr	r3, [r4, #8]
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	60a3      	str	r3, [r4, #8]
 800a0c4:	6823      	ldr	r3, [r4, #0]
 800a0c6:	1c5a      	adds	r2, r3, #1
 800a0c8:	6022      	str	r2, [r4, #0]
 800a0ca:	701e      	strb	r6, [r3, #0]
 800a0cc:	6962      	ldr	r2, [r4, #20]
 800a0ce:	1c43      	adds	r3, r0, #1
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d004      	beq.n	800a0de <__swbuf_r+0x5a>
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	07db      	lsls	r3, r3, #31
 800a0d8:	d506      	bpl.n	800a0e8 <__swbuf_r+0x64>
 800a0da:	2e0a      	cmp	r6, #10
 800a0dc:	d104      	bne.n	800a0e8 <__swbuf_r+0x64>
 800a0de:	4621      	mov	r1, r4
 800a0e0:	4628      	mov	r0, r5
 800a0e2:	f7ff fd89 	bl	8009bf8 <_fflush_r>
 800a0e6:	b938      	cbnz	r0, 800a0f8 <__swbuf_r+0x74>
 800a0e8:	4638      	mov	r0, r7
 800a0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0ec:	4621      	mov	r1, r4
 800a0ee:	4628      	mov	r0, r5
 800a0f0:	f000 f806 	bl	800a100 <__swsetup_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	d0d5      	beq.n	800a0a4 <__swbuf_r+0x20>
 800a0f8:	f04f 37ff 	mov.w	r7, #4294967295
 800a0fc:	e7f4      	b.n	800a0e8 <__swbuf_r+0x64>
	...

0800a100 <__swsetup_r>:
 800a100:	b538      	push	{r3, r4, r5, lr}
 800a102:	4b2a      	ldr	r3, [pc, #168]	; (800a1ac <__swsetup_r+0xac>)
 800a104:	4605      	mov	r5, r0
 800a106:	6818      	ldr	r0, [r3, #0]
 800a108:	460c      	mov	r4, r1
 800a10a:	b118      	cbz	r0, 800a114 <__swsetup_r+0x14>
 800a10c:	6a03      	ldr	r3, [r0, #32]
 800a10e:	b90b      	cbnz	r3, 800a114 <__swsetup_r+0x14>
 800a110:	f7fd ff82 	bl	8008018 <__sinit>
 800a114:	89a3      	ldrh	r3, [r4, #12]
 800a116:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a11a:	0718      	lsls	r0, r3, #28
 800a11c:	d422      	bmi.n	800a164 <__swsetup_r+0x64>
 800a11e:	06d9      	lsls	r1, r3, #27
 800a120:	d407      	bmi.n	800a132 <__swsetup_r+0x32>
 800a122:	2309      	movs	r3, #9
 800a124:	602b      	str	r3, [r5, #0]
 800a126:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a12a:	81a3      	strh	r3, [r4, #12]
 800a12c:	f04f 30ff 	mov.w	r0, #4294967295
 800a130:	e034      	b.n	800a19c <__swsetup_r+0x9c>
 800a132:	0758      	lsls	r0, r3, #29
 800a134:	d512      	bpl.n	800a15c <__swsetup_r+0x5c>
 800a136:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a138:	b141      	cbz	r1, 800a14c <__swsetup_r+0x4c>
 800a13a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a13e:	4299      	cmp	r1, r3
 800a140:	d002      	beq.n	800a148 <__swsetup_r+0x48>
 800a142:	4628      	mov	r0, r5
 800a144:	f7fe fefe 	bl	8008f44 <_free_r>
 800a148:	2300      	movs	r3, #0
 800a14a:	6363      	str	r3, [r4, #52]	; 0x34
 800a14c:	89a3      	ldrh	r3, [r4, #12]
 800a14e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	2300      	movs	r3, #0
 800a156:	6063      	str	r3, [r4, #4]
 800a158:	6923      	ldr	r3, [r4, #16]
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	f043 0308 	orr.w	r3, r3, #8
 800a162:	81a3      	strh	r3, [r4, #12]
 800a164:	6923      	ldr	r3, [r4, #16]
 800a166:	b94b      	cbnz	r3, 800a17c <__swsetup_r+0x7c>
 800a168:	89a3      	ldrh	r3, [r4, #12]
 800a16a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a16e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a172:	d003      	beq.n	800a17c <__swsetup_r+0x7c>
 800a174:	4621      	mov	r1, r4
 800a176:	4628      	mov	r0, r5
 800a178:	f000 f884 	bl	800a284 <__smakebuf_r>
 800a17c:	89a0      	ldrh	r0, [r4, #12]
 800a17e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a182:	f010 0301 	ands.w	r3, r0, #1
 800a186:	d00a      	beq.n	800a19e <__swsetup_r+0x9e>
 800a188:	2300      	movs	r3, #0
 800a18a:	60a3      	str	r3, [r4, #8]
 800a18c:	6963      	ldr	r3, [r4, #20]
 800a18e:	425b      	negs	r3, r3
 800a190:	61a3      	str	r3, [r4, #24]
 800a192:	6923      	ldr	r3, [r4, #16]
 800a194:	b943      	cbnz	r3, 800a1a8 <__swsetup_r+0xa8>
 800a196:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a19a:	d1c4      	bne.n	800a126 <__swsetup_r+0x26>
 800a19c:	bd38      	pop	{r3, r4, r5, pc}
 800a19e:	0781      	lsls	r1, r0, #30
 800a1a0:	bf58      	it	pl
 800a1a2:	6963      	ldrpl	r3, [r4, #20]
 800a1a4:	60a3      	str	r3, [r4, #8]
 800a1a6:	e7f4      	b.n	800a192 <__swsetup_r+0x92>
 800a1a8:	2000      	movs	r0, #0
 800a1aa:	e7f7      	b.n	800a19c <__swsetup_r+0x9c>
 800a1ac:	20000068 	.word	0x20000068

0800a1b0 <_raise_r>:
 800a1b0:	291f      	cmp	r1, #31
 800a1b2:	b538      	push	{r3, r4, r5, lr}
 800a1b4:	4604      	mov	r4, r0
 800a1b6:	460d      	mov	r5, r1
 800a1b8:	d904      	bls.n	800a1c4 <_raise_r+0x14>
 800a1ba:	2316      	movs	r3, #22
 800a1bc:	6003      	str	r3, [r0, #0]
 800a1be:	f04f 30ff 	mov.w	r0, #4294967295
 800a1c2:	bd38      	pop	{r3, r4, r5, pc}
 800a1c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800a1c6:	b112      	cbz	r2, 800a1ce <_raise_r+0x1e>
 800a1c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a1cc:	b94b      	cbnz	r3, 800a1e2 <_raise_r+0x32>
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 f830 	bl	800a234 <_getpid_r>
 800a1d4:	462a      	mov	r2, r5
 800a1d6:	4601      	mov	r1, r0
 800a1d8:	4620      	mov	r0, r4
 800a1da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a1de:	f000 b817 	b.w	800a210 <_kill_r>
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d00a      	beq.n	800a1fc <_raise_r+0x4c>
 800a1e6:	1c59      	adds	r1, r3, #1
 800a1e8:	d103      	bne.n	800a1f2 <_raise_r+0x42>
 800a1ea:	2316      	movs	r3, #22
 800a1ec:	6003      	str	r3, [r0, #0]
 800a1ee:	2001      	movs	r0, #1
 800a1f0:	e7e7      	b.n	800a1c2 <_raise_r+0x12>
 800a1f2:	2400      	movs	r4, #0
 800a1f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	4798      	blx	r3
 800a1fc:	2000      	movs	r0, #0
 800a1fe:	e7e0      	b.n	800a1c2 <_raise_r+0x12>

0800a200 <raise>:
 800a200:	4b02      	ldr	r3, [pc, #8]	; (800a20c <raise+0xc>)
 800a202:	4601      	mov	r1, r0
 800a204:	6818      	ldr	r0, [r3, #0]
 800a206:	f7ff bfd3 	b.w	800a1b0 <_raise_r>
 800a20a:	bf00      	nop
 800a20c:	20000068 	.word	0x20000068

0800a210 <_kill_r>:
 800a210:	b538      	push	{r3, r4, r5, lr}
 800a212:	4d07      	ldr	r5, [pc, #28]	; (800a230 <_kill_r+0x20>)
 800a214:	2300      	movs	r3, #0
 800a216:	4604      	mov	r4, r0
 800a218:	4608      	mov	r0, r1
 800a21a:	4611      	mov	r1, r2
 800a21c:	602b      	str	r3, [r5, #0]
 800a21e:	f7f7 fc89 	bl	8001b34 <_kill>
 800a222:	1c43      	adds	r3, r0, #1
 800a224:	d102      	bne.n	800a22c <_kill_r+0x1c>
 800a226:	682b      	ldr	r3, [r5, #0]
 800a228:	b103      	cbz	r3, 800a22c <_kill_r+0x1c>
 800a22a:	6023      	str	r3, [r4, #0]
 800a22c:	bd38      	pop	{r3, r4, r5, pc}
 800a22e:	bf00      	nop
 800a230:	200005a8 	.word	0x200005a8

0800a234 <_getpid_r>:
 800a234:	f7f7 bc76 	b.w	8001b24 <_getpid>

0800a238 <__swhatbuf_r>:
 800a238:	b570      	push	{r4, r5, r6, lr}
 800a23a:	460c      	mov	r4, r1
 800a23c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a240:	2900      	cmp	r1, #0
 800a242:	b096      	sub	sp, #88	; 0x58
 800a244:	4615      	mov	r5, r2
 800a246:	461e      	mov	r6, r3
 800a248:	da0d      	bge.n	800a266 <__swhatbuf_r+0x2e>
 800a24a:	89a3      	ldrh	r3, [r4, #12]
 800a24c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800a250:	f04f 0100 	mov.w	r1, #0
 800a254:	bf0c      	ite	eq
 800a256:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800a25a:	2340      	movne	r3, #64	; 0x40
 800a25c:	2000      	movs	r0, #0
 800a25e:	6031      	str	r1, [r6, #0]
 800a260:	602b      	str	r3, [r5, #0]
 800a262:	b016      	add	sp, #88	; 0x58
 800a264:	bd70      	pop	{r4, r5, r6, pc}
 800a266:	466a      	mov	r2, sp
 800a268:	f000 f848 	bl	800a2fc <_fstat_r>
 800a26c:	2800      	cmp	r0, #0
 800a26e:	dbec      	blt.n	800a24a <__swhatbuf_r+0x12>
 800a270:	9901      	ldr	r1, [sp, #4]
 800a272:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800a276:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800a27a:	4259      	negs	r1, r3
 800a27c:	4159      	adcs	r1, r3
 800a27e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a282:	e7eb      	b.n	800a25c <__swhatbuf_r+0x24>

0800a284 <__smakebuf_r>:
 800a284:	898b      	ldrh	r3, [r1, #12]
 800a286:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a288:	079d      	lsls	r5, r3, #30
 800a28a:	4606      	mov	r6, r0
 800a28c:	460c      	mov	r4, r1
 800a28e:	d507      	bpl.n	800a2a0 <__smakebuf_r+0x1c>
 800a290:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a294:	6023      	str	r3, [r4, #0]
 800a296:	6123      	str	r3, [r4, #16]
 800a298:	2301      	movs	r3, #1
 800a29a:	6163      	str	r3, [r4, #20]
 800a29c:	b002      	add	sp, #8
 800a29e:	bd70      	pop	{r4, r5, r6, pc}
 800a2a0:	ab01      	add	r3, sp, #4
 800a2a2:	466a      	mov	r2, sp
 800a2a4:	f7ff ffc8 	bl	800a238 <__swhatbuf_r>
 800a2a8:	9900      	ldr	r1, [sp, #0]
 800a2aa:	4605      	mov	r5, r0
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	f7fe febd 	bl	800902c <_malloc_r>
 800a2b2:	b948      	cbnz	r0, 800a2c8 <__smakebuf_r+0x44>
 800a2b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2b8:	059a      	lsls	r2, r3, #22
 800a2ba:	d4ef      	bmi.n	800a29c <__smakebuf_r+0x18>
 800a2bc:	f023 0303 	bic.w	r3, r3, #3
 800a2c0:	f043 0302 	orr.w	r3, r3, #2
 800a2c4:	81a3      	strh	r3, [r4, #12]
 800a2c6:	e7e3      	b.n	800a290 <__smakebuf_r+0xc>
 800a2c8:	89a3      	ldrh	r3, [r4, #12]
 800a2ca:	6020      	str	r0, [r4, #0]
 800a2cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d0:	81a3      	strh	r3, [r4, #12]
 800a2d2:	9b00      	ldr	r3, [sp, #0]
 800a2d4:	6163      	str	r3, [r4, #20]
 800a2d6:	9b01      	ldr	r3, [sp, #4]
 800a2d8:	6120      	str	r0, [r4, #16]
 800a2da:	b15b      	cbz	r3, 800a2f4 <__smakebuf_r+0x70>
 800a2dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a2e0:	4630      	mov	r0, r6
 800a2e2:	f000 f81d 	bl	800a320 <_isatty_r>
 800a2e6:	b128      	cbz	r0, 800a2f4 <__smakebuf_r+0x70>
 800a2e8:	89a3      	ldrh	r3, [r4, #12]
 800a2ea:	f023 0303 	bic.w	r3, r3, #3
 800a2ee:	f043 0301 	orr.w	r3, r3, #1
 800a2f2:	81a3      	strh	r3, [r4, #12]
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	431d      	orrs	r5, r3
 800a2f8:	81a5      	strh	r5, [r4, #12]
 800a2fa:	e7cf      	b.n	800a29c <__smakebuf_r+0x18>

0800a2fc <_fstat_r>:
 800a2fc:	b538      	push	{r3, r4, r5, lr}
 800a2fe:	4d07      	ldr	r5, [pc, #28]	; (800a31c <_fstat_r+0x20>)
 800a300:	2300      	movs	r3, #0
 800a302:	4604      	mov	r4, r0
 800a304:	4608      	mov	r0, r1
 800a306:	4611      	mov	r1, r2
 800a308:	602b      	str	r3, [r5, #0]
 800a30a:	f7f7 fc72 	bl	8001bf2 <_fstat>
 800a30e:	1c43      	adds	r3, r0, #1
 800a310:	d102      	bne.n	800a318 <_fstat_r+0x1c>
 800a312:	682b      	ldr	r3, [r5, #0]
 800a314:	b103      	cbz	r3, 800a318 <_fstat_r+0x1c>
 800a316:	6023      	str	r3, [r4, #0]
 800a318:	bd38      	pop	{r3, r4, r5, pc}
 800a31a:	bf00      	nop
 800a31c:	200005a8 	.word	0x200005a8

0800a320 <_isatty_r>:
 800a320:	b538      	push	{r3, r4, r5, lr}
 800a322:	4d06      	ldr	r5, [pc, #24]	; (800a33c <_isatty_r+0x1c>)
 800a324:	2300      	movs	r3, #0
 800a326:	4604      	mov	r4, r0
 800a328:	4608      	mov	r0, r1
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	f7f7 fc71 	bl	8001c12 <_isatty>
 800a330:	1c43      	adds	r3, r0, #1
 800a332:	d102      	bne.n	800a33a <_isatty_r+0x1a>
 800a334:	682b      	ldr	r3, [r5, #0]
 800a336:	b103      	cbz	r3, 800a33a <_isatty_r+0x1a>
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	200005a8 	.word	0x200005a8

0800a340 <_init>:
 800a340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a342:	bf00      	nop
 800a344:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a346:	bc08      	pop	{r3}
 800a348:	469e      	mov	lr, r3
 800a34a:	4770      	bx	lr

0800a34c <_fini>:
 800a34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a34e:	bf00      	nop
 800a350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a352:	bc08      	pop	{r3}
 800a354:	469e      	mov	lr, r3
 800a356:	4770      	bx	lr
