
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab28  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  0800acb8  0800acb8  0001acb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b0e4  0800b0e4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800b0e4  0800b0e4  0001b0e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b0ec  0800b0ec  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b0ec  0800b0ec  0001b0ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b0f0  0800b0f0  0001b0f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800b0f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000044c  200001e0  0800b2d4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000062c  0800b2d4  0002062c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001989d  00000000  00000000  00020253  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000345f  00000000  00000000  00039af0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0003cf50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000011f6  00000000  00000000  0003e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f21  00000000  00000000  0003f856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bfe9  00000000  00000000  00064777  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e197f  00000000  00000000  00080760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000073b4  00000000  00000000  001620e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00169494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800aca0 	.word	0x0800aca0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	0800aca0 	.word	0x0800aca0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <HAL_ADC_ConvCpltCallback>:
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	bf00      	nop
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	20000218 	.word	0x20000218

08000ec4 <HSB_ReadCurrentModule>:
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	6039      	str	r1, [r7, #0]
 8000ece:	4b36      	ldr	r3, [pc, #216]	; (8000fa8 <HSB_ReadCurrentModule+0xe4>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	461a      	mov	r2, r3
 8000ed4:	4935      	ldr	r1, [pc, #212]	; (8000fac <HSB_ReadCurrentModule+0xe8>)
 8000ed6:	4836      	ldr	r0, [pc, #216]	; (8000fb0 <HSB_ReadCurrentModule+0xec>)
 8000ed8:	f001 fbb6 	bl	8002648 <HAL_ADC_Start_DMA>
 8000edc:	bf00      	nop
 8000ede:	4b35      	ldr	r3, [pc, #212]	; (8000fb4 <HSB_ReadCurrentModule+0xf0>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d0fb      	beq.n	8000ede <HSB_ReadCurrentModule+0x1a>
 8000ee6:	4b33      	ldr	r3, [pc, #204]	; (8000fb4 <HSB_ReadCurrentModule+0xf0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	4b2f      	ldr	r3, [pc, #188]	; (8000fac <HSB_ReadCurrentModule+0xe8>)
 8000eee:	881a      	ldrh	r2, [r3, #0]
 8000ef0:	4b31      	ldr	r3, [pc, #196]	; (8000fb8 <HSB_ReadCurrentModule+0xf4>)
 8000ef2:	801a      	strh	r2, [r3, #0]
 8000ef4:	4b30      	ldr	r3, [pc, #192]	; (8000fb8 <HSB_ReadCurrentModule+0xf4>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f00:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8000fbc <HSB_ReadCurrentModule+0xf8>
 8000f04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f08:	4b2d      	ldr	r3, [pc, #180]	; (8000fc0 <HSB_ReadCurrentModule+0xfc>)
 8000f0a:	edc3 7a00 	vstr	s15, [r3]
 8000f0e:	4b2c      	ldr	r3, [pc, #176]	; (8000fc0 <HSB_ReadCurrentModule+0xfc>)
 8000f10:	edd3 7a00 	vldr	s15, [r3]
 8000f14:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8000fc4 <HSB_ReadCurrentModule+0x100>
 8000f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f1c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8000fc8 <HSB_ReadCurrentModule+0x104>
 8000f20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f24:	4b29      	ldr	r3, [pc, #164]	; (8000fcc <HSB_ReadCurrentModule+0x108>)
 8000f26:	edc3 7a00 	vstr	s15, [r3]
 8000f2a:	4b28      	ldr	r3, [pc, #160]	; (8000fcc <HSB_ReadCurrentModule+0x108>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f7ff fb0a 	bl	8000548 <__aeabi_f2d>
 8000f34:	4602      	mov	r2, r0
 8000f36:	460b      	mov	r3, r1
 8000f38:	4825      	ldr	r0, [pc, #148]	; (8000fd0 <HSB_ReadCurrentModule+0x10c>)
 8000f3a:	f000 f863 	bl	8001004 <HSB_DebugPrint>
 8000f3e:	4b1b      	ldr	r3, [pc, #108]	; (8000fac <HSB_ReadCurrentModule+0xe8>)
 8000f40:	885a      	ldrh	r2, [r3, #2]
 8000f42:	4b24      	ldr	r3, [pc, #144]	; (8000fd4 <HSB_ReadCurrentModule+0x110>)
 8000f44:	801a      	strh	r2, [r3, #0]
 8000f46:	4b23      	ldr	r3, [pc, #140]	; (8000fd4 <HSB_ReadCurrentModule+0x110>)
 8000f48:	881b      	ldrh	r3, [r3, #0]
 8000f4a:	ee07 3a90 	vmov	s15, r3
 8000f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f52:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8000fbc <HSB_ReadCurrentModule+0xf8>
 8000f56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f5a:	4b1f      	ldr	r3, [pc, #124]	; (8000fd8 <HSB_ReadCurrentModule+0x114>)
 8000f5c:	edc3 7a00 	vstr	s15, [r3]
 8000f60:	4b1d      	ldr	r3, [pc, #116]	; (8000fd8 <HSB_ReadCurrentModule+0x114>)
 8000f62:	edd3 7a00 	vldr	s15, [r3]
 8000f66:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8000fc4 <HSB_ReadCurrentModule+0x100>
 8000f6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f6e:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000fc8 <HSB_ReadCurrentModule+0x104>
 8000f72:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HSB_ReadCurrentModule+0x118>)
 8000f78:	edc3 7a00 	vstr	s15, [r3]
 8000f7c:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HSB_ReadCurrentModule+0x118>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff fae1 	bl	8000548 <__aeabi_f2d>
 8000f86:	4602      	mov	r2, r0
 8000f88:	460b      	mov	r3, r1
 8000f8a:	4815      	ldr	r0, [pc, #84]	; (8000fe0 <HSB_ReadCurrentModule+0x11c>)
 8000f8c:	f000 f83a 	bl	8001004 <HSB_DebugPrint>
 8000f90:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <HSB_ReadCurrentModule+0x108>)
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HSB_ReadCurrentModule+0x118>)
 8000f9a:	681a      	ldr	r2, [r3, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	20000214 	.word	0x20000214
 8000fb0:	2000023c 	.word	0x2000023c
 8000fb4:	20000218 	.word	0x20000218
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	3f4e4000 	.word	0x3f4e4000
 8000fc0:	20000204 	.word	0x20000204
 8000fc4:	43a10000 	.word	0x43a10000
 8000fc8:	40726c9b 	.word	0x40726c9b
 8000fcc:	200001fc 	.word	0x200001fc
 8000fd0:	0800acb8 	.word	0x0800acb8
 8000fd4:	2000020c 	.word	0x2000020c
 8000fd8:	20000210 	.word	0x20000210
 8000fdc:	20000208 	.word	0x20000208
 8000fe0:	0800ace0 	.word	0x0800ace0

08000fe4 <HSB_DebugPrint_Init>:
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	4603      	mov	r3, r0
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <HSB_DebugPrint_Init+0x1c>)
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	7013      	strb	r3, [r2, #0]
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	20000004 	.word	0x20000004

08001004 <HSB_DebugPrint>:
 8001004:	b40f      	push	{r0, r1, r2, r3}
 8001006:	b580      	push	{r7, lr}
 8001008:	af00      	add	r7, sp, #0
 800100a:	4b0c      	ldr	r3, [pc, #48]	; (800103c <HSB_DebugPrint+0x38>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d00e      	beq.n	8001030 <HSB_DebugPrint+0x2c>
 8001012:	68b9      	ldr	r1, [r7, #8]
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <HSB_DebugPrint+0x3c>)
 8001016:	f007 fce7 	bl	80089e8 <siprintf>
 800101a:	4809      	ldr	r0, [pc, #36]	; (8001040 <HSB_DebugPrint+0x3c>)
 800101c:	f7ff f928 	bl	8000270 <strlen>
 8001020:	4603      	mov	r3, r0
 8001022:	b29a      	uxth	r2, r3
 8001024:	f04f 33ff 	mov.w	r3, #4294967295
 8001028:	4905      	ldr	r1, [pc, #20]	; (8001040 <HSB_DebugPrint+0x3c>)
 800102a:	4806      	ldr	r0, [pc, #24]	; (8001044 <HSB_DebugPrint+0x40>)
 800102c:	f006 fae8 	bl	8007600 <HAL_UART_Transmit>
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001038:	b004      	add	sp, #16
 800103a:	4770      	bx	lr
 800103c:	20000004 	.word	0x20000004
 8001040:	2000021c 	.word	0x2000021c
 8001044:	20000440 	.word	0x20000440

08001048 <HSB_VoltageModule_Init>:
uint16_t ADCData;
uint16_t MSB = 0;
uint16_t LSB = 0;
uint8_t RX_Buffer [3] = "A"; // Receive buffer i2c

void HSB_VoltageModule_Init(uint8_t adress){
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	4603      	mov	r3, r0
 8001050:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	005b      	lsls	r3, r3, #1
 8001056:	b2da      	uxtb	r2, r3
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <HSB_VoltageModule_Init+0x20>)
 800105a:	701a      	strb	r2, [r3, #0]
}
 800105c:	bf00      	nop
 800105e:	370c      	adds	r7, #12
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr
 8001068:	20000005 	.word	0x20000005

0800106c <HSB_ReadMCP3427>:

uint16_t HSB_ReadMCP3427(int channel){
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af02      	add	r7, sp, #8
 8001072:	6078      	str	r0, [r7, #4]

	uint8_t read = 0;
 8001074:	2300      	movs	r3, #0
 8001076:	73fb      	strb	r3, [r7, #15]
	if(channel == 0){
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d103      	bne.n	8001086 <HSB_ReadMCP3427+0x1a>
		read = readCH1;
 800107e:	4b1f      	ldr	r3, [pc, #124]	; (80010fc <HSB_ReadMCP3427+0x90>)
 8001080:	781b      	ldrb	r3, [r3, #0]
 8001082:	73fb      	strb	r3, [r7, #15]
 8001084:	e002      	b.n	800108c <HSB_ReadMCP3427+0x20>
	}else{
		read = readCH2;
 8001086:	4b1e      	ldr	r3, [pc, #120]	; (8001100 <HSB_ReadMCP3427+0x94>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	73fb      	strb	r3, [r7, #15]
	}
	HAL_I2C_Master_Transmit(&hi2c1,i2cAddress,&read,1,1000); //Sending in Blocking mode
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <HSB_ReadMCP3427+0x98>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	b299      	uxth	r1, r3
 8001092:	f107 020f 	add.w	r2, r7, #15
 8001096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	481a      	ldr	r0, [pc, #104]	; (8001108 <HSB_ReadMCP3427+0x9c>)
 80010a0:	f002 fed8 	bl	8003e54 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80010a4:	200a      	movs	r0, #10
 80010a6:	f000 ffa1 	bl	8001fec <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, i2cAddress, RX_Buffer, 3,1000);
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <HSB_ReadMCP3427+0x98>)
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	b299      	uxth	r1, r3
 80010b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010b4:	9300      	str	r3, [sp, #0]
 80010b6:	2303      	movs	r3, #3
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <HSB_ReadMCP3427+0xa0>)
 80010ba:	4813      	ldr	r0, [pc, #76]	; (8001108 <HSB_ReadMCP3427+0x9c>)
 80010bc:	f002 ffe2 	bl	8004084 <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 80010c0:	200a      	movs	r0, #10
 80010c2:	f000 ff93 	bl	8001fec <HAL_Delay>
	MSB = (uint16_t)RX_Buffer[0] * 0x100;
 80010c6:	4b11      	ldr	r3, [pc, #68]	; (800110c <HSB_ReadMCP3427+0xa0>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	021b      	lsls	r3, r3, #8
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	4b0f      	ldr	r3, [pc, #60]	; (8001110 <HSB_ReadMCP3427+0xa4>)
 80010d2:	801a      	strh	r2, [r3, #0]
	LSB = (uint16_t)RX_Buffer[1];
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <HSB_ReadMCP3427+0xa0>)
 80010d6:	785b      	ldrb	r3, [r3, #1]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	4b0e      	ldr	r3, [pc, #56]	; (8001114 <HSB_ReadMCP3427+0xa8>)
 80010dc:	801a      	strh	r2, [r3, #0]
	ADCData = MSB + LSB;
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HSB_ReadMCP3427+0xa4>)
 80010e0:	881a      	ldrh	r2, [r3, #0]
 80010e2:	4b0c      	ldr	r3, [pc, #48]	; (8001114 <HSB_ReadMCP3427+0xa8>)
 80010e4:	881b      	ldrh	r3, [r3, #0]
 80010e6:	4413      	add	r3, r2
 80010e8:	b29a      	uxth	r2, r3
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <HSB_ReadMCP3427+0xac>)
 80010ec:	801a      	strh	r2, [r3, #0]
	return ADCData;
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HSB_ReadMCP3427+0xac>)
 80010f0:	881b      	ldrh	r3, [r3, #0]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3710      	adds	r7, #16
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000006 	.word	0x20000006
 8001100:	20000007 	.word	0x20000007
 8001104:	20000005 	.word	0x20000005
 8001108:	20000310 	.word	0x20000310
 800110c:	20000008 	.word	0x20000008
 8001110:	20000236 	.word	0x20000236
 8001114:	20000238 	.word	0x20000238
 8001118:	20000234 	.word	0x20000234

0800111c <HSB_VoltageModule>:


void HSB_VoltageModule(float* E, float* F){
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
	adcRawE = HSB_ReadMCP3427(0);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ffa0 	bl	800106c <HSB_ReadMCP3427>
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	4b25      	ldr	r3, [pc, #148]	; (80011c8 <HSB_VoltageModule+0xac>)
 8001132:	801a      	strh	r2, [r3, #0]
	float adcVoltageE = adcRawE * ADCFactor;
 8001134:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <HSB_VoltageModule+0xac>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	ee07 3a90 	vmov	s15, r3
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001140:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80011cc <HSB_VoltageModule+0xb0>
 8001144:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001148:	edc7 7a05 	vstr	s15, [r7, #20]
	float resultE = adcVoltageE * converionFactor;
 800114c:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80011d0 <HSB_VoltageModule+0xb4>
 8001150:	edd7 7a05 	vldr	s15, [r7, #20]
 8001154:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001158:	edc7 7a04 	vstr	s15, [r7, #16]
	HSB_DebugPrint("Voltage Module\n\rValue E %.2f\n\r", resultE);
 800115c:	6938      	ldr	r0, [r7, #16]
 800115e:	f7ff f9f3 	bl	8000548 <__aeabi_f2d>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <HSB_VoltageModule+0xb8>)
 8001168:	f7ff ff4c 	bl	8001004 <HSB_DebugPrint>

	adcRawF = HSB_ReadMCP3427(1);
 800116c:	2001      	movs	r0, #1
 800116e:	f7ff ff7d 	bl	800106c <HSB_ReadMCP3427>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HSB_VoltageModule+0xbc>)
 8001178:	801a      	strh	r2, [r3, #0]
	float adcVoltageF = adcRawF * ADCFactor;
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HSB_VoltageModule+0xbc>)
 800117c:	881b      	ldrh	r3, [r3, #0]
 800117e:	ee07 3a90 	vmov	s15, r3
 8001182:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001186:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80011cc <HSB_VoltageModule+0xb0>
 800118a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800118e:	edc7 7a03 	vstr	s15, [r7, #12]
	float resultF = adcVoltageF * converionFactor;
 8001192:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80011d0 <HSB_VoltageModule+0xb4>
 8001196:	edd7 7a03 	vldr	s15, [r7, #12]
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	edc7 7a02 	vstr	s15, [r7, #8]
	HSB_DebugPrint("Voltage Module\n\rValue E %.2f\n\r", resultF);
 80011a2:	68b8      	ldr	r0, [r7, #8]
 80011a4:	f7ff f9d0 	bl	8000548 <__aeabi_f2d>
 80011a8:	4602      	mov	r2, r0
 80011aa:	460b      	mov	r3, r1
 80011ac:	4809      	ldr	r0, [pc, #36]	; (80011d4 <HSB_VoltageModule+0xb8>)
 80011ae:	f7ff ff29 	bl	8001004 <HSB_DebugPrint>

	*E = resultE;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	601a      	str	r2, [r3, #0]
	*F = resultF;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	68ba      	ldr	r2, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
}
 80011be:	bf00      	nop
 80011c0:	3718      	adds	r7, #24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000230 	.word	0x20000230
 80011cc:	38533333 	.word	0x38533333
 80011d0:	41aded09 	.word	0x41aded09
 80011d4:	0800ad08 	.word	0x0800ad08
 80011d8:	20000232 	.word	0x20000232

080011dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011e0:	f000 fe8f 	bl	8001f02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011e4:	f000 f82c 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e8:	f000 fa3a 	bl	8001660 <MX_GPIO_Init>
  MX_DMA_Init();
 80011ec:	f000 fa0a 	bl	8001604 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011f0:	f000 f9d8 	bl	80015a4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80011f4:	f000 f886 	bl	8001304 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011f8:	f000 f91e 	bl	8001438 <MX_I2C1_Init>
  MX_CAN1_Init();
 80011fc:	f000 f8e6 	bl	80013cc <MX_CAN1_Init>
  MX_TIM2_Init();
 8001200:	f000 f95a 	bl	80014b8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff feed 	bl	8000fe4 <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 800120a:	2068      	movs	r0, #104	; 0x68
 800120c:	f7ff ff1c 	bl	8001048 <HSB_VoltageModule_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  MX_ADC1_Init();
 8001210:	f000 f878 	bl	8001304 <MX_ADC1_Init>
	  HSB_ReadCurrentModule(&CurrentE, &CurrentF);
 8001214:	4906      	ldr	r1, [pc, #24]	; (8001230 <main+0x54>)
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <main+0x58>)
 8001218:	f7ff fe54 	bl	8000ec4 <HSB_ReadCurrentModule>
	  HSB_VoltageModule(&VoltageE, &VoltageF);
 800121c:	4906      	ldr	r1, [pc, #24]	; (8001238 <main+0x5c>)
 800121e:	4807      	ldr	r0, [pc, #28]	; (800123c <main+0x60>)
 8001220:	f7ff ff7c 	bl	800111c <HSB_VoltageModule>

	  HAL_Delay(1000);
 8001224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001228:	f000 fee0 	bl	8001fec <HAL_Delay>
	  MX_ADC1_Init();
 800122c:	e7f0      	b.n	8001210 <main+0x34>
 800122e:	bf00      	nop
 8001230:	200004cc 	.word	0x200004cc
 8001234:	200004c8 	.word	0x200004c8
 8001238:	200004d4 	.word	0x200004d4
 800123c:	200004d0 	.word	0x200004d0

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2244      	movs	r2, #68	; 0x44
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f007 fc2d 	bl	8008aae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001266:	f004 f8d1 	bl	800540c <HAL_PWREx_ControlVoltageScaling>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001270:	f000 fa58 	bl	8001724 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001274:	f004 f8ac 	bl	80053d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <SystemClock_Config+0xc0>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <SystemClock_Config+0xc0>)
 8001280:	f023 0318 	bic.w	r3, r3, #24
 8001284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001288:	2314      	movs	r3, #20
 800128a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80012a8:	2310      	movs	r3, #16
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ac:	2307      	movs	r3, #7
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4618      	mov	r0, r3
 80012be:	f004 f8fb 	bl	80054b8 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012c8:	f000 fa2c 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2303      	movs	r3, #3
 80012d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fcfb 	bl	8005ce0 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012f0:	f000 fa18 	bl	8001724 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012f4:	f005 f90e 	bl	8006514 <HAL_RCCEx_EnableMSIPLLMode>
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000

08001304 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b086      	sub	sp, #24
 8001308:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800130a:	463b      	mov	r3, r7
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800131a:	4b29      	ldr	r3, [pc, #164]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800131c:	4a29      	ldr	r2, [pc, #164]	; (80013c4 <MX_ADC1_Init+0xc0>)
 800131e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001326:	4b26      	ldr	r3, [pc, #152]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800132c:	4b24      	ldr	r3, [pc, #144]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001332:	4b23      	ldr	r3, [pc, #140]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001334:	2201      	movs	r2, #1
 8001336:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001338:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800133a:	2204      	movs	r2, #4
 800133c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001340:	2200      	movs	r2, #0
 8001342:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001344:	4b1e      	ldr	r3, [pc, #120]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001346:	2200      	movs	r2, #0
 8001348:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 800134a:	4b1d      	ldr	r3, [pc, #116]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800134c:	2202      	movs	r2, #2
 800134e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001350:	4b1b      	ldr	r3, [pc, #108]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001352:	2200      	movs	r2, #0
 8001354:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800135a:	2200      	movs	r2, #0
 800135c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800135e:	4b18      	ldr	r3, [pc, #96]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001360:	2200      	movs	r2, #0
 8001362:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001364:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001366:	2200      	movs	r2, #0
 8001368:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001372:	4b13      	ldr	r3, [pc, #76]	; (80013c0 <MX_ADC1_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800137a:	4811      	ldr	r0, [pc, #68]	; (80013c0 <MX_ADC1_Init+0xbc>)
 800137c:	f001 f822 	bl	80023c4 <HAL_ADC_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001386:	f000 f9cd 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <MX_ADC1_Init+0xc4>)
 800138c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800138e:	2306      	movs	r3, #6
 8001390:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001392:	2300      	movs	r3, #0
 8001394:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001396:	237f      	movs	r3, #127	; 0x7f
 8001398:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800139a:	2304      	movs	r3, #4
 800139c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800139e:	2300      	movs	r3, #0
 80013a0:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a2:	463b      	mov	r3, r7
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	; (80013c0 <MX_ADC1_Init+0xbc>)
 80013a8:	f001 f9e6 	bl	8002778 <HAL_ADC_ConfigChannel>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80013b2:	f000 f9b7 	bl	8001724 <Error_Handler>
//  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3718      	adds	r7, #24
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000023c 	.word	0x2000023c
 80013c4:	50040000 	.word	0x50040000
 80013c8:	14f00020 	.word	0x14f00020

080013cc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013d0:	4b17      	ldr	r3, [pc, #92]	; (8001430 <MX_CAN1_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	; (8001434 <MX_CAN1_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80013d6:	4b16      	ldr	r3, [pc, #88]	; (8001430 <MX_CAN1_Init+0x64>)
 80013d8:	2208      	movs	r2, #8
 80013da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013dc:	4b14      	ldr	r3, [pc, #80]	; (8001430 <MX_CAN1_Init+0x64>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013e2:	4b13      	ldr	r3, [pc, #76]	; (8001430 <MX_CAN1_Init+0x64>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 80013e8:	4b11      	ldr	r3, [pc, #68]	; (8001430 <MX_CAN1_Init+0x64>)
 80013ea:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80013ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	; (8001430 <MX_CAN1_Init+0x64>)
 80013f2:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 80013f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013f8:	4b0d      	ldr	r3, [pc, #52]	; (8001430 <MX_CAN1_Init+0x64>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	; (8001430 <MX_CAN1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <MX_CAN1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	; (8001430 <MX_CAN1_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <MX_CAN1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <MX_CAN1_Init+0x64>)
 8001418:	2200      	movs	r2, #0
 800141a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	; (8001430 <MX_CAN1_Init+0x64>)
 800141e:	f001 fea7 	bl	8003170 <HAL_CAN_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 f97c 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200002e8 	.word	0x200002e8
 8001434:	40006400 	.word	0x40006400

08001438 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_I2C1_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_I2C1_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_I2C1_Init+0x74>)
 8001444:	4a1b      	ldr	r2, [pc, #108]	; (80014b4 <MX_I2C1_Init+0x7c>)
 8001446:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001448:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_I2C1_Init+0x74>)
 800144a:	2200      	movs	r2, #0
 800144c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_I2C1_Init+0x74>)
 8001450:	2201      	movs	r2, #1
 8001452:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_I2C1_Init+0x74>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800145a:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_I2C1_Init+0x74>)
 800145c:	2200      	movs	r2, #0
 800145e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <MX_I2C1_Init+0x74>)
 8001462:	2200      	movs	r2, #0
 8001464:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001466:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_I2C1_Init+0x74>)
 8001468:	2200      	movs	r2, #0
 800146a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_I2C1_Init+0x74>)
 800146e:	2200      	movs	r2, #0
 8001470:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001472:	480e      	ldr	r0, [pc, #56]	; (80014ac <MX_I2C1_Init+0x74>)
 8001474:	f002 fc52 	bl	8003d1c <HAL_I2C_Init>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d001      	beq.n	8001482 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800147e:	f000 f951 	bl	8001724 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001482:	2100      	movs	r1, #0
 8001484:	4809      	ldr	r0, [pc, #36]	; (80014ac <MX_I2C1_Init+0x74>)
 8001486:	f003 ff0b 	bl	80052a0 <HAL_I2CEx_ConfigAnalogFilter>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001490:	f000 f948 	bl	8001724 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001494:	2100      	movs	r1, #0
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_I2C1_Init+0x74>)
 8001498:	f003 ff4d 	bl	8005336 <HAL_I2CEx_ConfigDigitalFilter>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f000 f93f 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	20000310 	.word	0x20000310
 80014b0:	40005400 	.word	0x40005400
 80014b4:	00707cbb 	.word	0x00707cbb

080014b8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08e      	sub	sp, #56	; 0x38
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014cc:	f107 031c 	add.w	r3, r7, #28
 80014d0:	2200      	movs	r2, #0
 80014d2:	601a      	str	r2, [r3, #0]
 80014d4:	605a      	str	r2, [r3, #4]
 80014d6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
 80014e4:	611a      	str	r2, [r3, #16]
 80014e6:	615a      	str	r2, [r3, #20]
 80014e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 80014f2:	4b2b      	ldr	r3, [pc, #172]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014f4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 80014f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b29      	ldr	r3, [pc, #164]	; (80015a0 <MX_TIM2_Init+0xe8>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001502:	220a      	movs	r2, #10
 8001504:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001506:	4b26      	ldr	r3, [pc, #152]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001508:	2200      	movs	r2, #0
 800150a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150c:	4b24      	ldr	r3, [pc, #144]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800150e:	2200      	movs	r2, #0
 8001510:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001512:	4823      	ldr	r0, [pc, #140]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001514:	f005 f900 	bl	8006718 <HAL_TIM_Base_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800151e:	f000 f901 	bl	8001724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001522:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001528:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800152c:	4619      	mov	r1, r3
 800152e:	481c      	ldr	r0, [pc, #112]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001530:	f005 fb26 	bl	8006b80 <HAL_TIM_ConfigClockSource>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800153a:	f000 f8f3 	bl	8001724 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001540:	f005 f941 	bl	80067c6 <HAL_TIM_OC_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800154a:	f000 f8eb 	bl	8001724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001552:	2300      	movs	r3, #0
 8001554:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001556:	f107 031c 	add.w	r3, r7, #28
 800155a:	4619      	mov	r1, r3
 800155c:	4810      	ldr	r0, [pc, #64]	; (80015a0 <MX_TIM2_Init+0xe8>)
 800155e:	f005 ff7d 	bl	800745c <HAL_TIMEx_MasterConfigSynchronization>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001568:	f000 f8dc 	bl	8001724 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 800156c:	2350      	movs	r3, #80	; 0x50
 800156e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001570:	2300      	movs	r3, #0
 8001572:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001578:	2300      	movs	r3, #0
 800157a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	4619      	mov	r1, r3
 8001582:	4807      	ldr	r0, [pc, #28]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001584:	f005 fa82 	bl	8006a8c <HAL_TIM_OC_ConfigChannel>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800158e:	f000 f8c9 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001592:	4803      	ldr	r0, [pc, #12]	; (80015a0 <MX_TIM2_Init+0xe8>)
 8001594:	f000 fab0 	bl	8001af8 <HAL_TIM_MspPostInit>

}
 8001598:	bf00      	nop
 800159a:	3738      	adds	r7, #56	; 0x38
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	200003f4 	.word	0x200003f4

080015a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015a8:	4b14      	ldr	r3, [pc, #80]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015aa:	4a15      	ldr	r2, [pc, #84]	; (8001600 <MX_USART2_UART_Init+0x5c>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015ae:	4b13      	ldr	r3, [pc, #76]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b11      	ldr	r3, [pc, #68]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0f      	ldr	r3, [pc, #60]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b0c      	ldr	r3, [pc, #48]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015da:	4b08      	ldr	r3, [pc, #32]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015e6:	4805      	ldr	r0, [pc, #20]	; (80015fc <MX_USART2_UART_Init+0x58>)
 80015e8:	f005 ffbc 	bl	8007564 <HAL_UART_Init>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80015f2:	f000 f897 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	20000440 	.word	0x20000440
 8001600:	40004400 	.word	0x40004400

08001604 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800160a:	4b14      	ldr	r3, [pc, #80]	; (800165c <MX_DMA_Init+0x58>)
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	4a13      	ldr	r2, [pc, #76]	; (800165c <MX_DMA_Init+0x58>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6493      	str	r3, [r2, #72]	; 0x48
 8001616:	4b11      	ldr	r3, [pc, #68]	; (800165c <MX_DMA_Init+0x58>)
 8001618:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2100      	movs	r1, #0
 8001626:	200b      	movs	r0, #11
 8001628:	f001 ff79 	bl	800351e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800162c:	200b      	movs	r0, #11
 800162e:	f001 ff92 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2010      	movs	r0, #16
 8001638:	f001 ff71 	bl	800351e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800163c:	2010      	movs	r0, #16
 800163e:	f001 ff8a 	bl	8003556 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2011      	movs	r0, #17
 8001648:	f001 ff69 	bl	800351e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800164c:	2011      	movs	r0, #17
 800164e:	f001 ff82 	bl	8003556 <HAL_NVIC_EnableIRQ>

}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40021000 	.word	0x40021000

08001660 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	2200      	movs	r2, #0
 800166c:	601a      	str	r2, [r3, #0]
 800166e:	605a      	str	r2, [r3, #4]
 8001670:	609a      	str	r2, [r3, #8]
 8001672:	60da      	str	r2, [r3, #12]
 8001674:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001676:	4b24      	ldr	r3, [pc, #144]	; (8001708 <MX_GPIO_Init+0xa8>)
 8001678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <MX_GPIO_Init+0xa8>)
 800167c:	f043 0304 	orr.w	r3, r3, #4
 8001680:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001682:	4b21      	ldr	r3, [pc, #132]	; (8001708 <MX_GPIO_Init+0xa8>)
 8001684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001686:	f003 0304 	and.w	r3, r3, #4
 800168a:	60bb      	str	r3, [r7, #8]
 800168c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	4b1e      	ldr	r3, [pc, #120]	; (8001708 <MX_GPIO_Init+0xa8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a1d      	ldr	r2, [pc, #116]	; (8001708 <MX_GPIO_Init+0xa8>)
 8001694:	f043 0301 	orr.w	r3, r3, #1
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b1b      	ldr	r3, [pc, #108]	; (8001708 <MX_GPIO_Init+0xa8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0301 	and.w	r3, r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016a6:	4b18      	ldr	r3, [pc, #96]	; (8001708 <MX_GPIO_Init+0xa8>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a17      	ldr	r2, [pc, #92]	; (8001708 <MX_GPIO_Init+0xa8>)
 80016ac:	f043 0302 	orr.w	r3, r3, #2
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <MX_GPIO_Init+0xa8>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0302 	and.w	r3, r3, #2
 80016ba:	603b      	str	r3, [r7, #0]
 80016bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80016be:	2200      	movs	r2, #0
 80016c0:	2108      	movs	r1, #8
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <MX_GPIO_Init+0xac>)
 80016c4:	f002 fb12 	bl	8003cec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BTN1_Pin BTN2_Pin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80016c8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016d6:	f107 030c 	add.w	r3, r7, #12
 80016da:	4619      	mov	r1, r3
 80016dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e0:	f002 f99a 	bl	8003a18 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80016e4:	2308      	movs	r3, #8
 80016e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e8:	2301      	movs	r3, #1
 80016ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	4619      	mov	r1, r3
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_GPIO_Init+0xac>)
 80016fc:	f002 f98c 	bl	8003a18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001700:	bf00      	nop
 8001702:	3720      	adds	r7, #32
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40021000 	.word	0x40021000
 800170c:	48000400 	.word	0x48000400

08001710 <HAL_TIM_PeriodElapsedCallback>:
	  Error_Handler ();
	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b480      	push	{r7}
 8001712:	b083      	sub	sp, #12
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
	//function to run on interval interupt
}
 8001718:	bf00      	nop
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	e7fe      	b.n	800172c <Error_Handler+0x8>
	...

08001730 <HAL_MspInit>:
 8001730:	b480      	push	{r7}
 8001732:	b083      	sub	sp, #12
 8001734:	af00      	add	r7, sp, #0
 8001736:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <HAL_MspInit+0x44>)
 8001738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800173a:	4a0e      	ldr	r2, [pc, #56]	; (8001774 <HAL_MspInit+0x44>)
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	6613      	str	r3, [r2, #96]	; 0x60
 8001742:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <HAL_MspInit+0x44>)
 8001744:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001746:	f003 0301 	and.w	r3, r3, #1
 800174a:	607b      	str	r3, [r7, #4]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	4b09      	ldr	r3, [pc, #36]	; (8001774 <HAL_MspInit+0x44>)
 8001750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001752:	4a08      	ldr	r2, [pc, #32]	; (8001774 <HAL_MspInit+0x44>)
 8001754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001758:	6593      	str	r3, [r2, #88]	; 0x58
 800175a:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_MspInit+0x44>)
 800175c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800175e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001762:	603b      	str	r3, [r7, #0]
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	bf00      	nop
 8001768:	370c      	adds	r7, #12
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_ADC_MspInit>:
 8001778:	b580      	push	{r7, lr}
 800177a:	b09e      	sub	sp, #120	; 0x78
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
 8001790:	f107 0310 	add.w	r3, r7, #16
 8001794:	2254      	movs	r2, #84	; 0x54
 8001796:	2100      	movs	r1, #0
 8001798:	4618      	mov	r0, r3
 800179a:	f007 f988 	bl	8008aae <memset>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a3b      	ldr	r2, [pc, #236]	; (8001890 <HAL_ADC_MspInit+0x118>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d16e      	bne.n	8001886 <HAL_ADC_MspInit+0x10e>
 80017a8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80017b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80017b4:	2301      	movs	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	2301      	movs	r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	2310      	movs	r3, #16
 80017be:	61fb      	str	r3, [r7, #28]
 80017c0:	2307      	movs	r3, #7
 80017c2:	623b      	str	r3, [r7, #32]
 80017c4:	2302      	movs	r3, #2
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
 80017c8:	2302      	movs	r3, #2
 80017ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80017cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80017d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017d2:	f107 0310 	add.w	r3, r7, #16
 80017d6:	4618      	mov	r0, r3
 80017d8:	f004 fca6 	bl	8006128 <HAL_RCCEx_PeriphCLKConfig>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <HAL_ADC_MspInit+0x6e>
 80017e2:	f7ff ff9f 	bl	8001724 <Error_Handler>
 80017e6:	4b2b      	ldr	r3, [pc, #172]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ea:	4a2a      	ldr	r2, [pc, #168]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 80017ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017f2:	4b28      	ldr	r3, [pc, #160]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 80017f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	4b25      	ldr	r3, [pc, #148]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 8001800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001802:	4a24      	ldr	r2, [pc, #144]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	64d3      	str	r3, [r2, #76]	; 0x4c
 800180a:	4b22      	ldr	r3, [pc, #136]	; (8001894 <HAL_ADC_MspInit+0x11c>)
 800180c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	2303      	movs	r3, #3
 8001818:	667b      	str	r3, [r7, #100]	; 0x64
 800181a:	230b      	movs	r3, #11
 800181c:	66bb      	str	r3, [r7, #104]	; 0x68
 800181e:	2300      	movs	r3, #0
 8001820:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001822:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001826:	4619      	mov	r1, r3
 8001828:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800182c:	f002 f8f4 	bl	8003a18 <HAL_GPIO_Init>
 8001830:	4b19      	ldr	r3, [pc, #100]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001832:	4a1a      	ldr	r2, [pc, #104]	; (800189c <HAL_ADC_MspInit+0x124>)
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b18      	ldr	r3, [pc, #96]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001838:	2200      	movs	r2, #0
 800183a:	605a      	str	r2, [r3, #4]
 800183c:	4b16      	ldr	r3, [pc, #88]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800184a:	2280      	movs	r2, #128	; 0x80
 800184c:	611a      	str	r2, [r3, #16]
 800184e:	4b12      	ldr	r3, [pc, #72]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001850:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001854:	615a      	str	r2, [r3, #20]
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001858:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800185c:	619a      	str	r2, [r3, #24]
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001860:	2200      	movs	r2, #0
 8001862:	61da      	str	r2, [r3, #28]
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001866:	2200      	movs	r2, #0
 8001868:	621a      	str	r2, [r3, #32]
 800186a:	480b      	ldr	r0, [pc, #44]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800186c:	f001 fe8e 	bl	800358c <HAL_DMA_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <HAL_ADC_MspInit+0x102>
 8001876:	f7ff ff55 	bl	8001724 <Error_Handler>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a06      	ldr	r2, [pc, #24]	; (8001898 <HAL_ADC_MspInit+0x120>)
 800187e:	64da      	str	r2, [r3, #76]	; 0x4c
 8001880:	4a05      	ldr	r2, [pc, #20]	; (8001898 <HAL_ADC_MspInit+0x120>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6293      	str	r3, [r2, #40]	; 0x28
 8001886:	bf00      	nop
 8001888:	3778      	adds	r7, #120	; 0x78
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	50040000 	.word	0x50040000
 8001894:	40021000 	.word	0x40021000
 8001898:	200002a0 	.word	0x200002a0
 800189c:	40020008 	.word	0x40020008

080018a0 <HAL_CAN_MspInit>:
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08a      	sub	sp, #40	; 0x28
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a18      	ldr	r2, [pc, #96]	; (8001920 <HAL_CAN_MspInit+0x80>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d129      	bne.n	8001916 <HAL_CAN_MspInit+0x76>
 80018c2:	4b18      	ldr	r3, [pc, #96]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c6:	4a17      	ldr	r2, [pc, #92]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80018cc:	6593      	str	r3, [r2, #88]	; 0x58
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018d6:	613b      	str	r3, [r7, #16]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4b12      	ldr	r3, [pc, #72]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018de:	4a11      	ldr	r2, [pc, #68]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018e6:	4b0f      	ldr	r3, [pc, #60]	; (8001924 <HAL_CAN_MspInit+0x84>)
 80018e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018ea:	f003 0301 	and.w	r3, r3, #1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	2302      	movs	r3, #2
 80018fa:	61bb      	str	r3, [r7, #24]
 80018fc:	2300      	movs	r3, #0
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	2303      	movs	r3, #3
 8001902:	623b      	str	r3, [r7, #32]
 8001904:	2309      	movs	r3, #9
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	f107 0314 	add.w	r3, r7, #20
 800190c:	4619      	mov	r1, r3
 800190e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001912:	f002 f881 	bl	8003a18 <HAL_GPIO_Init>
 8001916:	bf00      	nop
 8001918:	3728      	adds	r7, #40	; 0x28
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	40006400 	.word	0x40006400
 8001924:	40021000 	.word	0x40021000

08001928 <HAL_I2C_MspInit>:
 8001928:	b580      	push	{r7, lr}
 800192a:	b09e      	sub	sp, #120	; 0x78
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
 8001940:	f107 0310 	add.w	r3, r7, #16
 8001944:	2254      	movs	r2, #84	; 0x54
 8001946:	2100      	movs	r1, #0
 8001948:	4618      	mov	r0, r3
 800194a:	f007 f8b0 	bl	8008aae <memset>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a50      	ldr	r2, [pc, #320]	; (8001a94 <HAL_I2C_MspInit+0x16c>)
 8001954:	4293      	cmp	r3, r2
 8001956:	f040 8098 	bne.w	8001a8a <HAL_I2C_MspInit+0x162>
 800195a:	2340      	movs	r3, #64	; 0x40
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	2300      	movs	r3, #0
 8001960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4618      	mov	r0, r3
 8001968:	f004 fbde 	bl	8006128 <HAL_RCCEx_PeriphCLKConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <HAL_I2C_MspInit+0x4e>
 8001972:	f7ff fed7 	bl	8001724 <Error_Handler>
 8001976:	4b48      	ldr	r3, [pc, #288]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 8001978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800197a:	4a47      	ldr	r2, [pc, #284]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 800197c:	f043 0302 	orr.w	r3, r3, #2
 8001980:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001982:	4b45      	ldr	r3, [pc, #276]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 8001984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001986:	f003 0302 	and.w	r3, r3, #2
 800198a:	60fb      	str	r3, [r7, #12]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	23c0      	movs	r3, #192	; 0xc0
 8001990:	667b      	str	r3, [r7, #100]	; 0x64
 8001992:	2312      	movs	r3, #18
 8001994:	66bb      	str	r3, [r7, #104]	; 0x68
 8001996:	2301      	movs	r3, #1
 8001998:	66fb      	str	r3, [r7, #108]	; 0x6c
 800199a:	2303      	movs	r3, #3
 800199c:	673b      	str	r3, [r7, #112]	; 0x70
 800199e:	2304      	movs	r3, #4
 80019a0:	677b      	str	r3, [r7, #116]	; 0x74
 80019a2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80019a6:	4619      	mov	r1, r3
 80019a8:	483c      	ldr	r0, [pc, #240]	; (8001a9c <HAL_I2C_MspInit+0x174>)
 80019aa:	f002 f835 	bl	8003a18 <HAL_GPIO_Init>
 80019ae:	4b3a      	ldr	r3, [pc, #232]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 80019b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b2:	4a39      	ldr	r2, [pc, #228]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 80019b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80019b8:	6593      	str	r3, [r2, #88]	; 0x58
 80019ba:	4b37      	ldr	r3, [pc, #220]	; (8001a98 <HAL_I2C_MspInit+0x170>)
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c2:	60bb      	str	r3, [r7, #8]
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	4b36      	ldr	r3, [pc, #216]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019c8:	4a36      	ldr	r2, [pc, #216]	; (8001aa4 <HAL_I2C_MspInit+0x17c>)
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	4b34      	ldr	r3, [pc, #208]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019ce:	2203      	movs	r2, #3
 80019d0:	605a      	str	r2, [r3, #4]
 80019d2:	4b33      	ldr	r3, [pc, #204]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
 80019d8:	4b31      	ldr	r3, [pc, #196]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
 80019de:	4b30      	ldr	r3, [pc, #192]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019e0:	2280      	movs	r2, #128	; 0x80
 80019e2:	611a      	str	r2, [r3, #16]
 80019e4:	4b2e      	ldr	r3, [pc, #184]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	615a      	str	r2, [r3, #20]
 80019ea:	4b2d      	ldr	r3, [pc, #180]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
 80019f0:	4b2b      	ldr	r3, [pc, #172]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
 80019f6:	4b2a      	ldr	r3, [pc, #168]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
 80019fc:	4828      	ldr	r0, [pc, #160]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 80019fe:	f001 fdc5 	bl	800358c <HAL_DMA_Init>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <HAL_I2C_MspInit+0xe4>
 8001a08:	f7ff fe8c 	bl	8001724 <Error_Handler>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4a24      	ldr	r2, [pc, #144]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 8001a10:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a12:	4a23      	ldr	r2, [pc, #140]	; (8001aa0 <HAL_I2C_MspInit+0x178>)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6293      	str	r3, [r2, #40]	; 0x28
 8001a18:	4b23      	ldr	r3, [pc, #140]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a1a:	4a24      	ldr	r2, [pc, #144]	; (8001aac <HAL_I2C_MspInit+0x184>)
 8001a1c:	601a      	str	r2, [r3, #0]
 8001a1e:	4b22      	ldr	r3, [pc, #136]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a20:	2203      	movs	r2, #3
 8001a22:	605a      	str	r2, [r3, #4]
 8001a24:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a26:	2210      	movs	r2, #16
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	4b1f      	ldr	r3, [pc, #124]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
 8001a30:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a32:	2280      	movs	r2, #128	; 0x80
 8001a34:	611a      	str	r2, [r3, #16]
 8001a36:	4b1c      	ldr	r3, [pc, #112]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	615a      	str	r2, [r3, #20]
 8001a3c:	4b1a      	ldr	r3, [pc, #104]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	619a      	str	r2, [r3, #24]
 8001a42:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	61da      	str	r2, [r3, #28]
 8001a48:	4b17      	ldr	r3, [pc, #92]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	621a      	str	r2, [r3, #32]
 8001a4e:	4816      	ldr	r0, [pc, #88]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a50:	f001 fd9c 	bl	800358c <HAL_DMA_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <HAL_I2C_MspInit+0x136>
 8001a5a:	f7ff fe63 	bl	8001724 <Error_Handler>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a62:	639a      	str	r2, [r3, #56]	; 0x38
 8001a64:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <HAL_I2C_MspInit+0x180>)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6293      	str	r3, [r2, #40]	; 0x28
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	201f      	movs	r0, #31
 8001a70:	f001 fd55 	bl	800351e <HAL_NVIC_SetPriority>
 8001a74:	201f      	movs	r0, #31
 8001a76:	f001 fd6e 	bl	8003556 <HAL_NVIC_EnableIRQ>
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	2100      	movs	r1, #0
 8001a7e:	2020      	movs	r0, #32
 8001a80:	f001 fd4d 	bl	800351e <HAL_NVIC_SetPriority>
 8001a84:	2020      	movs	r0, #32
 8001a86:	f001 fd66 	bl	8003556 <HAL_NVIC_EnableIRQ>
 8001a8a:	bf00      	nop
 8001a8c:	3778      	adds	r7, #120	; 0x78
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	40005400 	.word	0x40005400
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	48000400 	.word	0x48000400
 8001aa0:	20000364 	.word	0x20000364
 8001aa4:	40020080 	.word	0x40020080
 8001aa8:	200003ac 	.word	0x200003ac
 8001aac:	4002006c 	.word	0x4002006c

08001ab0 <HAL_TIM_Base_MspInit>:
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b084      	sub	sp, #16
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ac0:	d113      	bne.n	8001aea <HAL_TIM_Base_MspInit+0x3a>
 8001ac2:	4b0c      	ldr	r3, [pc, #48]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac6:	4a0b      	ldr	r2, [pc, #44]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	6593      	str	r3, [r2, #88]	; 0x58
 8001ace:	4b09      	ldr	r3, [pc, #36]	; (8001af4 <HAL_TIM_Base_MspInit+0x44>)
 8001ad0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	201c      	movs	r0, #28
 8001ae0:	f001 fd1d 	bl	800351e <HAL_NVIC_SetPriority>
 8001ae4:	201c      	movs	r0, #28
 8001ae6:	f001 fd36 	bl	8003556 <HAL_NVIC_EnableIRQ>
 8001aea:	bf00      	nop
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	40021000 	.word	0x40021000

08001af8 <HAL_TIM_MspPostInit>:
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
 8001b0c:	60da      	str	r2, [r3, #12]
 8001b0e:	611a      	str	r2, [r3, #16]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b18:	d11c      	bne.n	8001b54 <HAL_TIM_MspPostInit+0x5c>
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b1e:	4a0f      	ldr	r2, [pc, #60]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <HAL_TIM_MspPostInit+0x64>)
 8001b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b2a:	f003 0301 	and.w	r3, r3, #1
 8001b2e:	60bb      	str	r3, [r7, #8]
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	2320      	movs	r3, #32
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	2302      	movs	r3, #2
 8001b38:	613b      	str	r3, [r7, #16]
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	617b      	str	r3, [r7, #20]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
 8001b42:	2301      	movs	r3, #1
 8001b44:	61fb      	str	r3, [r7, #28]
 8001b46:	f107 030c 	add.w	r3, r7, #12
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b50:	f001 ff62 	bl	8003a18 <HAL_GPIO_Init>
 8001b54:	bf00      	nop
 8001b56:	3720      	adds	r7, #32
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	40021000 	.word	0x40021000

08001b60 <HAL_UART_MspInit>:
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09e      	sub	sp, #120	; 0x78
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	601a      	str	r2, [r3, #0]
 8001b70:	605a      	str	r2, [r3, #4]
 8001b72:	609a      	str	r2, [r3, #8]
 8001b74:	60da      	str	r2, [r3, #12]
 8001b76:	611a      	str	r2, [r3, #16]
 8001b78:	f107 0310 	add.w	r3, r7, #16
 8001b7c:	2254      	movs	r2, #84	; 0x54
 8001b7e:	2100      	movs	r1, #0
 8001b80:	4618      	mov	r0, r3
 8001b82:	f006 ff94 	bl	8008aae <memset>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a28      	ldr	r2, [pc, #160]	; (8001c2c <HAL_UART_MspInit+0xcc>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d148      	bne.n	8001c22 <HAL_UART_MspInit+0xc2>
 8001b90:	2302      	movs	r3, #2
 8001b92:	613b      	str	r3, [r7, #16]
 8001b94:	2300      	movs	r3, #0
 8001b96:	637b      	str	r3, [r7, #52]	; 0x34
 8001b98:	f107 0310 	add.w	r3, r7, #16
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f004 fac3 	bl	8006128 <HAL_RCCEx_PeriphCLKConfig>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_UART_MspInit+0x4c>
 8001ba8:	f7ff fdbc 	bl	8001724 <Error_Handler>
 8001bac:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bb2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bb6:	6593      	str	r3, [r2, #88]	; 0x58
 8001bb8:	4b1d      	ldr	r3, [pc, #116]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	4b1a      	ldr	r3, [pc, #104]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc8:	4a19      	ldr	r2, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bca:	f043 0301 	orr.w	r3, r3, #1
 8001bce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0xd0>)
 8001bd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bd4:	f003 0301 	and.w	r3, r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2304      	movs	r3, #4
 8001bde:	667b      	str	r3, [r7, #100]	; 0x64
 8001be0:	2302      	movs	r3, #2
 8001be2:	66bb      	str	r3, [r7, #104]	; 0x68
 8001be4:	2300      	movs	r3, #0
 8001be6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001be8:	2303      	movs	r3, #3
 8001bea:	673b      	str	r3, [r7, #112]	; 0x70
 8001bec:	2307      	movs	r3, #7
 8001bee:	677b      	str	r3, [r7, #116]	; 0x74
 8001bf0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001bfa:	f001 ff0d 	bl	8003a18 <HAL_GPIO_Init>
 8001bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c02:	667b      	str	r3, [r7, #100]	; 0x64
 8001c04:	2302      	movs	r3, #2
 8001c06:	66bb      	str	r3, [r7, #104]	; 0x68
 8001c08:	2300      	movs	r3, #0
 8001c0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	673b      	str	r3, [r7, #112]	; 0x70
 8001c10:	2303      	movs	r3, #3
 8001c12:	677b      	str	r3, [r7, #116]	; 0x74
 8001c14:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001c1e:	f001 fefb 	bl	8003a18 <HAL_GPIO_Init>
 8001c22:	bf00      	nop
 8001c24:	3778      	adds	r7, #120	; 0x78
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	40004400 	.word	0x40004400
 8001c30:	40021000 	.word	0x40021000

08001c34 <NMI_Handler>:
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	e7fe      	b.n	8001c38 <NMI_Handler+0x4>

08001c3a <HardFault_Handler>:
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0x4>

08001c46 <BusFault_Handler>:
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c52 <SVC_Handler>:
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DebugMon_Handler>:
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	f000 f994 	bl	8001fac <HAL_IncTick>
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DMA1_Channel1_IRQHandler>:
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <DMA1_Channel1_IRQHandler+0x10>)
 8001c8e:	f001 fdd6 	bl	800383e <HAL_DMA_IRQHandler>
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	200002a0 	.word	0x200002a0

08001c9c <DMA1_Channel6_IRQHandler>:
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA1_Channel6_IRQHandler+0x10>)
 8001ca2:	f001 fdcc 	bl	800383e <HAL_DMA_IRQHandler>
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	200003ac 	.word	0x200003ac

08001cb0 <DMA1_Channel7_IRQHandler>:
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <DMA1_Channel7_IRQHandler+0x10>)
 8001cb6:	f001 fdc2 	bl	800383e <HAL_DMA_IRQHandler>
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20000364 	.word	0x20000364

08001cc4 <TIM2_IRQHandler>:
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM2_IRQHandler+0x10>)
 8001cca:	f004 fddd 	bl	8006888 <HAL_TIM_IRQHandler>
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200003f4 	.word	0x200003f4

08001cd8 <I2C1_EV_IRQHandler>:
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <I2C1_EV_IRQHandler+0x10>)
 8001cde:	f002 fac7 	bl	8004270 <HAL_I2C_EV_IRQHandler>
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000310 	.word	0x20000310

08001cec <I2C1_ER_IRQHandler>:
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	4802      	ldr	r0, [pc, #8]	; (8001cfc <I2C1_ER_IRQHandler+0x10>)
 8001cf2:	f002 fad7 	bl	80042a4 <HAL_I2C_ER_IRQHandler>
 8001cf6:	bf00      	nop
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	20000310 	.word	0x20000310

08001d00 <_getpid>:
 8001d00:	b480      	push	{r7}
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	2301      	movs	r3, #1
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_kill>:
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
 8001d1a:	f006 ff1b 	bl	8008b54 <__errno>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2216      	movs	r2, #22
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	f04f 33ff 	mov.w	r3, #4294967295
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <_exit>:
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b082      	sub	sp, #8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	f04f 31ff 	mov.w	r1, #4294967295
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ffe7 	bl	8001d10 <_kill>
 8001d42:	e7fe      	b.n	8001d42 <_exit+0x12>

08001d44 <_read>:
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	607a      	str	r2, [r7, #4]
 8001d50:	2300      	movs	r3, #0
 8001d52:	617b      	str	r3, [r7, #20]
 8001d54:	e00a      	b.n	8001d6c <_read+0x28>
 8001d56:	f3af 8000 	nop.w
 8001d5a:	4601      	mov	r1, r0
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	1c5a      	adds	r2, r3, #1
 8001d60:	60ba      	str	r2, [r7, #8]
 8001d62:	b2ca      	uxtb	r2, r1
 8001d64:	701a      	strb	r2, [r3, #0]
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf0      	blt.n	8001d56 <_read+0x12>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_write>:
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b086      	sub	sp, #24
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	60f8      	str	r0, [r7, #12]
 8001d86:	60b9      	str	r1, [r7, #8]
 8001d88:	607a      	str	r2, [r7, #4]
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	617b      	str	r3, [r7, #20]
 8001d8e:	e009      	b.n	8001da4 <_write+0x26>
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	1c5a      	adds	r2, r3, #1
 8001d94:	60ba      	str	r2, [r7, #8]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f3af 8000 	nop.w
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
 8001da4:	697a      	ldr	r2, [r7, #20]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	429a      	cmp	r2, r3
 8001daa:	dbf1      	blt.n	8001d90 <_write+0x12>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <_close>:
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
 8001dbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <_fstat>:
 8001dce:	b480      	push	{r7}
 8001dd0:	b083      	sub	sp, #12
 8001dd2:	af00      	add	r7, sp, #0
 8001dd4:	6078      	str	r0, [r7, #4]
 8001dd6:	6039      	str	r1, [r7, #0]
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	2300      	movs	r3, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	370c      	adds	r7, #12
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <_isatty>:
 8001dee:	b480      	push	{r7}
 8001df0:	b083      	sub	sp, #12
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	2301      	movs	r3, #1
 8001df8:	4618      	mov	r0, r3
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <_lseek>:
 8001e04:	b480      	push	{r7}
 8001e06:	b085      	sub	sp, #20
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	60b9      	str	r1, [r7, #8]
 8001e0e:	607a      	str	r2, [r7, #4]
 8001e10:	2300      	movs	r3, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	3714      	adds	r7, #20
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
	...

08001e20 <_sbrk>:
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b086      	sub	sp, #24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	4a14      	ldr	r2, [pc, #80]	; (8001e7c <_sbrk+0x5c>)
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <_sbrk+0x60>)
 8001e2c:	1ad3      	subs	r3, r2, r3
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <_sbrk+0x64>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <_sbrk+0x22>
 8001e3c:	4b11      	ldr	r3, [pc, #68]	; (8001e84 <_sbrk+0x64>)
 8001e3e:	4a12      	ldr	r2, [pc, #72]	; (8001e88 <_sbrk+0x68>)
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	4b10      	ldr	r3, [pc, #64]	; (8001e84 <_sbrk+0x64>)
 8001e44:	681a      	ldr	r2, [r3, #0]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d207      	bcs.n	8001e60 <_sbrk+0x40>
 8001e50:	f006 fe80 	bl	8008b54 <__errno>
 8001e54:	4603      	mov	r3, r0
 8001e56:	220c      	movs	r2, #12
 8001e58:	601a      	str	r2, [r3, #0]
 8001e5a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e5e:	e009      	b.n	8001e74 <_sbrk+0x54>
 8001e60:	4b08      	ldr	r3, [pc, #32]	; (8001e84 <_sbrk+0x64>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	60fb      	str	r3, [r7, #12]
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <_sbrk+0x64>)
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4413      	add	r3, r2
 8001e6e:	4a05      	ldr	r2, [pc, #20]	; (8001e84 <_sbrk+0x64>)
 8001e70:	6013      	str	r3, [r2, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4618      	mov	r0, r3
 8001e76:	3718      	adds	r7, #24
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	20010000 	.word	0x20010000
 8001e80:	00000400 	.word	0x00000400
 8001e84:	200004d8 	.word	0x200004d8
 8001e88:	20000630 	.word	0x20000630

08001e8c <SystemInit>:
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
 8001e90:	4b06      	ldr	r3, [pc, #24]	; (8001eac <SystemInit+0x20>)
 8001e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e96:	4a05      	ldr	r2, [pc, #20]	; (8001eac <SystemInit+0x20>)
 8001e98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	e000ed00 	.word	0xe000ed00

08001eb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ee8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001eb4:	f7ff ffea 	bl	8001e8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001eb8:	480c      	ldr	r0, [pc, #48]	; (8001eec <LoopForever+0x6>)
  ldr r1, =_edata
 8001eba:	490d      	ldr	r1, [pc, #52]	; (8001ef0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ebc:	4a0d      	ldr	r2, [pc, #52]	; (8001ef4 <LoopForever+0xe>)
  movs r3, #0
 8001ebe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ec0:	e002      	b.n	8001ec8 <LoopCopyDataInit>

08001ec2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ec2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ec4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ec6:	3304      	adds	r3, #4

08001ec8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ec8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ecc:	d3f9      	bcc.n	8001ec2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ed0:	4c0a      	ldr	r4, [pc, #40]	; (8001efc <LoopForever+0x16>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ed4:	e001      	b.n	8001eda <LoopFillZerobss>

08001ed6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ed6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ed8:	3204      	adds	r2, #4

08001eda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001edc:	d3fb      	bcc.n	8001ed6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ede:	f006 fe3f 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ee2:	f7ff f97b 	bl	80011dc <main>

08001ee6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ee6:	e7fe      	b.n	8001ee6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ee8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ef0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001ef4:	0800b0f4 	.word	0x0800b0f4
  ldr r2, =_sbss
 8001ef8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001efc:	2000062c 	.word	0x2000062c

08001f00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f00:	e7fe      	b.n	8001f00 <ADC1_IRQHandler>

08001f02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b082      	sub	sp, #8
 8001f06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f0c:	2003      	movs	r0, #3
 8001f0e:	f001 fafb 	bl	8003508 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f12:	2000      	movs	r0, #0
 8001f14:	f000 f80e 	bl	8001f34 <HAL_InitTick>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d002      	beq.n	8001f24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	71fb      	strb	r3, [r7, #7]
 8001f22:	e001      	b.n	8001f28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f24:	f7ff fc04 	bl	8001730 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f28:	79fb      	ldrb	r3, [r7, #7]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
	...

08001f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <HAL_InitTick+0x6c>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d023      	beq.n	8001f90 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001f48:	4b16      	ldr	r3, [pc, #88]	; (8001fa4 <HAL_InitTick+0x70>)
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <HAL_InitTick+0x6c>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	4619      	mov	r1, r3
 8001f52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f001 fb07 	bl	8003572 <HAL_SYSTICK_Config>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2b0f      	cmp	r3, #15
 8001f6e:	d809      	bhi.n	8001f84 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f70:	2200      	movs	r2, #0
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	f04f 30ff 	mov.w	r0, #4294967295
 8001f78:	f001 fad1 	bl	800351e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f7c:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_InitTick+0x74>)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6013      	str	r3, [r2, #0]
 8001f82:	e007      	b.n	8001f94 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001f84:	2301      	movs	r3, #1
 8001f86:	73fb      	strb	r3, [r7, #15]
 8001f88:	e004      	b.n	8001f94 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	73fb      	strb	r3, [r7, #15]
 8001f8e:	e001      	b.n	8001f94 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	20000014 	.word	0x20000014
 8001fa4:	2000000c 	.word	0x2000000c
 8001fa8:	20000010 	.word	0x20000010

08001fac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001fb0:	4b06      	ldr	r3, [pc, #24]	; (8001fcc <HAL_IncTick+0x20>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	461a      	mov	r2, r3
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4413      	add	r3, r2
 8001fbc:	4a04      	ldr	r2, [pc, #16]	; (8001fd0 <HAL_IncTick+0x24>)
 8001fbe:	6013      	str	r3, [r2, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
 8001fca:	bf00      	nop
 8001fcc:	20000014 	.word	0x20000014
 8001fd0:	200004dc 	.word	0x200004dc

08001fd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fd8:	4b03      	ldr	r3, [pc, #12]	; (8001fe8 <HAL_GetTick+0x14>)
 8001fda:	681b      	ldr	r3, [r3, #0]
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	200004dc 	.word	0x200004dc

08001fec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b084      	sub	sp, #16
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff ffee 	bl	8001fd4 <HAL_GetTick>
 8001ff8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002004:	d005      	beq.n	8002012 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_Delay+0x44>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	461a      	mov	r2, r3
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	4413      	add	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002012:	bf00      	nop
 8002014:	f7ff ffde 	bl	8001fd4 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	68fa      	ldr	r2, [r7, #12]
 8002020:	429a      	cmp	r2, r3
 8002022:	d8f7      	bhi.n	8002014 <HAL_Delay+0x28>
  {
  }
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	20000014 	.word	0x20000014

08002034 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
 800203c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	609a      	str	r2, [r3, #8]
}
 800204e:	bf00      	nop
 8002050:	370c      	adds	r7, #12
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr

0800205a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800205a:	b480      	push	{r7}
 800205c:	b083      	sub	sp, #12
 800205e:	af00      	add	r7, sp, #0
 8002060:	6078      	str	r0, [r7, #4]
 8002062:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	609a      	str	r2, [r3, #8]
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002080:	b480      	push	{r7}
 8002082:	b083      	sub	sp, #12
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800209c:	b480      	push	{r7}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	60f8      	str	r0, [r7, #12]
 80020a4:	60b9      	str	r1, [r7, #8]
 80020a6:	607a      	str	r2, [r7, #4]
 80020a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	3360      	adds	r3, #96	; 0x60
 80020ae:	461a      	mov	r2, r3
 80020b0:	68bb      	ldr	r3, [r7, #8]
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <LL_ADC_SetOffset+0x44>)
 80020be:	4013      	ands	r3, r2
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80020d4:	bf00      	nop
 80020d6:	371c      	adds	r7, #28
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	03fff000 	.word	0x03fff000

080020e4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3360      	adds	r3, #96	; 0x60
 80020f2:	461a      	mov	r2, r3
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	4413      	add	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002104:	4618      	mov	r0, r3
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr

08002110 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002110:	b480      	push	{r7}
 8002112:	b087      	sub	sp, #28
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	3360      	adds	r3, #96	; 0x60
 8002120:	461a      	mov	r2, r3
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	431a      	orrs	r2, r3
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800213a:	bf00      	nop
 800213c:	371c      	adds	r7, #28
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800215e:	2300      	movs	r3, #0
}
 8002160:	4618      	mov	r0, r3
 8002162:	370c      	adds	r7, #12
 8002164:	46bd      	mov	sp, r7
 8002166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216a:	4770      	bx	lr

0800216c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800216c:	b480      	push	{r7}
 800216e:	b087      	sub	sp, #28
 8002170:	af00      	add	r7, sp, #0
 8002172:	60f8      	str	r0, [r7, #12]
 8002174:	60b9      	str	r1, [r7, #8]
 8002176:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	3330      	adds	r3, #48	; 0x30
 800217c:	461a      	mov	r2, r3
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	f003 030c 	and.w	r3, r3, #12
 8002188:	4413      	add	r3, r2
 800218a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800218c:	697b      	ldr	r3, [r7, #20]
 800218e:	681a      	ldr	r2, [r3, #0]
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	f003 031f 	and.w	r3, r3, #31
 8002196:	211f      	movs	r1, #31
 8002198:	fa01 f303 	lsl.w	r3, r1, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	401a      	ands	r2, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	0e9b      	lsrs	r3, r3, #26
 80021a4:	f003 011f 	and.w	r1, r3, #31
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	f003 031f 	and.w	r3, r3, #31
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	431a      	orrs	r2, r3
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80021b8:	bf00      	nop
 80021ba:	371c      	adds	r7, #28
 80021bc:	46bd      	mov	sp, r7
 80021be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c2:	4770      	bx	lr

080021c4 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b087      	sub	sp, #28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	3314      	adds	r3, #20
 80021d4:	461a      	mov	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	0e5b      	lsrs	r3, r3, #25
 80021da:	009b      	lsls	r3, r3, #2
 80021dc:	f003 0304 	and.w	r3, r3, #4
 80021e0:	4413      	add	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	0d1b      	lsrs	r3, r3, #20
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2107      	movs	r1, #7
 80021f2:	fa01 f303 	lsl.w	r3, r1, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	401a      	ands	r2, r3
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	0d1b      	lsrs	r3, r3, #20
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	6879      	ldr	r1, [r7, #4]
 8002204:	fa01 f303 	lsl.w	r3, r1, r3
 8002208:	431a      	orrs	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800220e:	bf00      	nop
 8002210:	371c      	adds	r7, #28
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
	...

0800221c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002234:	43db      	mvns	r3, r3
 8002236:	401a      	ands	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f003 0318 	and.w	r3, r3, #24
 800223e:	4908      	ldr	r1, [pc, #32]	; (8002260 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002240:	40d9      	lsrs	r1, r3
 8002242:	68bb      	ldr	r3, [r7, #8]
 8002244:	400b      	ands	r3, r1
 8002246:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800224a:	431a      	orrs	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002252:	bf00      	nop
 8002254:	3714      	adds	r7, #20
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	0007ffff 	.word	0x0007ffff

08002264 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002274:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6093      	str	r3, [r2, #8]
}
 800227c:	bf00      	nop
 800227e:	370c      	adds	r7, #12
 8002280:	46bd      	mov	sp, r7
 8002282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002286:	4770      	bx	lr

08002288 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002298:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800229c:	d101      	bne.n	80022a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022a2:	2300      	movs	r3, #0
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022ec:	d101      	bne.n	80022f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022ee:	2301      	movs	r3, #1
 80022f0:	e000      	b.n	80022f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022f2:	2300      	movs	r3, #0
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	370c      	adds	r7, #12
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	689b      	ldr	r3, [r3, #8]
 800230c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002310:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	f003 0301 	and.w	r3, r3, #1
 8002338:	2b01      	cmp	r3, #1
 800233a:	d101      	bne.n	8002340 <LL_ADC_IsEnabled+0x18>
 800233c:	2301      	movs	r3, #1
 800233e:	e000      	b.n	8002342 <LL_ADC_IsEnabled+0x1a>
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800234e:	b480      	push	{r7}
 8002350:	b083      	sub	sp, #12
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800235e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002362:	f043 0204 	orr.w	r2, r3, #4
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002376:	b480      	push	{r7}
 8002378:	b083      	sub	sp, #12
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b04      	cmp	r3, #4
 8002388:	d101      	bne.n	800238e <LL_ADC_REG_IsConversionOngoing+0x18>
 800238a:	2301      	movs	r3, #1
 800238c:	e000      	b.n	8002390 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	370c      	adds	r7, #12
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	f003 0308 	and.w	r3, r3, #8
 80023ac:	2b08      	cmp	r3, #8
 80023ae:	d101      	bne.n	80023b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80023b0:	2301      	movs	r3, #1
 80023b2:	e000      	b.n	80023b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80023b4:	2300      	movs	r3, #0
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023cc:	2300      	movs	r3, #0
 80023ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e126      	b.n	800262c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff f9c3 	bl	8001778 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2200      	movs	r2, #0
 80023f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff3f 	bl	8002288 <LL_ADC_IsDeepPowerDownEnabled>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff25 	bl	8002264 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4618      	mov	r0, r3
 8002420:	f7ff ff5a 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d115      	bne.n	8002456 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff ff3e 	bl	80022b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002434:	4b7f      	ldr	r3, [pc, #508]	; (8002634 <HAL_ADC_Init+0x270>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	099b      	lsrs	r3, r3, #6
 800243a:	4a7f      	ldr	r2, [pc, #508]	; (8002638 <HAL_ADC_Init+0x274>)
 800243c:	fba2 2303 	umull	r2, r3, r2, r3
 8002440:	099b      	lsrs	r3, r3, #6
 8002442:	3301      	adds	r3, #1
 8002444:	005b      	lsls	r3, r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002448:	e002      	b.n	8002450 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b01      	subs	r3, #1
 800244e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1f9      	bne.n	800244a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff ff3c 	bl	80022d8 <LL_ADC_IsInternalRegulatorEnabled>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800246a:	f043 0210 	orr.w	r2, r3, #16
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	f043 0201 	orr.w	r2, r3, #1
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff75 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800248c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	2b00      	cmp	r3, #0
 8002498:	f040 80bf 	bne.w	800261a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f040 80bb 	bne.w	800261a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80024ac:	f043 0202 	orr.w	r2, r3, #2
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff35 	bl	8002328 <LL_ADC_IsEnabled>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d10b      	bne.n	80024dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80024c4:	485d      	ldr	r0, [pc, #372]	; (800263c <HAL_ADC_Init+0x278>)
 80024c6:	f7ff ff2f 	bl	8002328 <LL_ADC_IsEnabled>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d105      	bne.n	80024dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	4619      	mov	r1, r3
 80024d6:	485a      	ldr	r0, [pc, #360]	; (8002640 <HAL_ADC_Init+0x27c>)
 80024d8:	f7ff fdac 	bl	8002034 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	7e5b      	ldrb	r3, [r3, #25]
 80024e0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024e6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80024ec:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80024f2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024fa:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002506:	2b01      	cmp	r3, #1
 8002508:	d106      	bne.n	8002518 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800250e:	3b01      	subs	r3, #1
 8002510:	045b      	lsls	r3, r3, #17
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	2b00      	cmp	r3, #0
 800251e:	d009      	beq.n	8002534 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002524:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	68da      	ldr	r2, [r3, #12]
 800253a:	4b42      	ldr	r3, [pc, #264]	; (8002644 <HAL_ADC_Init+0x280>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6812      	ldr	r2, [r2, #0]
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	430b      	orrs	r3, r1
 8002546:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff25 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 8002552:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d13d      	bne.n	80025d6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d13a      	bne.n	80025d6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002564:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800256c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800256e:	4313      	orrs	r3, r2
 8002570:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800257c:	f023 0302 	bic.w	r3, r3, #2
 8002580:	687a      	ldr	r2, [r7, #4]
 8002582:	6812      	ldr	r2, [r2, #0]
 8002584:	69b9      	ldr	r1, [r7, #24]
 8002586:	430b      	orrs	r3, r1
 8002588:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002590:	2b01      	cmp	r3, #1
 8002592:	d118      	bne.n	80025c6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800259e:	f023 0304 	bic.w	r3, r3, #4
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80025b0:	4311      	orrs	r1, r2
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80025b6:	430a      	orrs	r2, r1
 80025b8:	431a      	orrs	r2, r3
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f042 0201 	orr.w	r2, r2, #1
 80025c2:	611a      	str	r2, [r3, #16]
 80025c4:	e007      	b.n	80025d6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	691a      	ldr	r2, [r3, #16]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f022 0201 	bic.w	r2, r2, #1
 80025d4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	691b      	ldr	r3, [r3, #16]
 80025da:	2b01      	cmp	r3, #1
 80025dc:	d10c      	bne.n	80025f8 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e4:	f023 010f 	bic.w	r1, r3, #15
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	1e5a      	subs	r2, r3, #1
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	430a      	orrs	r2, r1
 80025f4:	631a      	str	r2, [r3, #48]	; 0x30
 80025f6:	e007      	b.n	8002608 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 020f 	bic.w	r2, r2, #15
 8002606:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260c:	f023 0303 	bic.w	r3, r3, #3
 8002610:	f043 0201 	orr.w	r2, r3, #1
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	655a      	str	r2, [r3, #84]	; 0x54
 8002618:	e007      	b.n	800262a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0210 	orr.w	r2, r3, #16
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800262a:	7ffb      	ldrb	r3, [r7, #31]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3720      	adds	r7, #32
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}
 8002634:	2000000c 	.word	0x2000000c
 8002638:	053e2d63 	.word	0x053e2d63
 800263c:	50040000 	.word	0x50040000
 8002640:	50040300 	.word	0x50040300
 8002644:	fff0c007 	.word	0xfff0c007

08002648 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4618      	mov	r0, r3
 800265a:	f7ff fe8c 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800265e:	4603      	mov	r3, r0
 8002660:	2b00      	cmp	r3, #0
 8002662:	d167      	bne.n	8002734 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADC_Start_DMA+0x2a>
 800266e:	2302      	movs	r3, #2
 8002670:	e063      	b.n	800273a <HAL_ADC_Start_DMA+0xf2>
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f000 fc5e 	bl	8002f3c <ADC_Enable>
 8002680:	4603      	mov	r3, r0
 8002682:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002684:	7dfb      	ldrb	r3, [r7, #23]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d14f      	bne.n	800272a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800268e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002692:	f023 0301 	bic.w	r3, r3, #1
 8002696:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ae:	f023 0206 	bic.w	r2, r3, #6
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	659a      	str	r2, [r3, #88]	; 0x58
 80026b6:	e002      	b.n	80026be <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2200      	movs	r2, #0
 80026bc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c2:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_ADC_Start_DMA+0xfc>)
 80026c4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026ca:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_ADC_Start_DMA+0x100>)
 80026cc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_ADC_Start_DMA+0x104>)
 80026d4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	221c      	movs	r2, #28
 80026dc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0210 	orr.w	r2, r2, #16
 80026f4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f042 0201 	orr.w	r2, r2, #1
 8002704:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	3340      	adds	r3, #64	; 0x40
 8002710:	4619      	mov	r1, r3
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	f000 fff1 	bl	80036fc <HAL_DMA_Start_IT>
 800271a:	4603      	mov	r3, r0
 800271c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7ff fe13 	bl	800234e <LL_ADC_REG_StartConversion>
 8002728:	e006      	b.n	8002738 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002732:	e001      	b.n	8002738 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002734:	2302      	movs	r3, #2
 8002736:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002738:	7dfb      	ldrb	r3, [r7, #23]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3718      	adds	r7, #24
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	08003049 	.word	0x08003049
 8002748:	08003121 	.word	0x08003121
 800274c:	0800313d 	.word	0x0800313d

08002750 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b0b6      	sub	sp, #216	; 0xd8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002782:	2300      	movs	r3, #0
 8002784:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002788:	2300      	movs	r3, #0
 800278a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002792:	2b01      	cmp	r3, #1
 8002794:	d101      	bne.n	800279a <HAL_ADC_ConfigChannel+0x22>
 8002796:	2302      	movs	r3, #2
 8002798:	e3bb      	b.n	8002f12 <HAL_ADC_ConfigChannel+0x79a>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2201      	movs	r2, #1
 800279e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fde5 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f040 83a0 	bne.w	8002ef4 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	685b      	ldr	r3, [r3, #4]
 80027b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	2b05      	cmp	r3, #5
 80027c2:	d824      	bhi.n	800280e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	3b02      	subs	r3, #2
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d81b      	bhi.n	8002806 <HAL_ADC_ConfigChannel+0x8e>
 80027ce:	a201      	add	r2, pc, #4	; (adr r2, 80027d4 <HAL_ADC_ConfigChannel+0x5c>)
 80027d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d4:	080027e5 	.word	0x080027e5
 80027d8:	080027ed 	.word	0x080027ed
 80027dc:	080027f5 	.word	0x080027f5
 80027e0:	080027fd 	.word	0x080027fd
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 80027e4:	230c      	movs	r3, #12
 80027e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027ea:	e010      	b.n	800280e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 80027ec:	2312      	movs	r3, #18
 80027ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027f2:	e00c      	b.n	800280e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 80027f4:	2318      	movs	r3, #24
 80027f6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80027fa:	e008      	b.n	800280e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 80027fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002800:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002804:	e003      	b.n	800280e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002806:	2306      	movs	r3, #6
 8002808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800280c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6818      	ldr	r0, [r3, #0]
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	461a      	mov	r2, r3
 8002818:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800281c:	f7ff fca6 	bl	800216c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff fda6 	bl	8002376 <LL_ADC_REG_IsConversionOngoing>
 800282a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4618      	mov	r0, r3
 8002834:	f7ff fdb2 	bl	800239c <LL_ADC_INJ_IsConversionOngoing>
 8002838:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800283c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 81a4 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002846:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 819f 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6819      	ldr	r1, [r3, #0]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	461a      	mov	r2, r3
 800285e:	f7ff fcb1 	bl	80021c4 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	695a      	ldr	r2, [r3, #20]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	68db      	ldr	r3, [r3, #12]
 800286c:	08db      	lsrs	r3, r3, #3
 800286e:	f003 0303 	and.w	r3, r3, #3
 8002872:	005b      	lsls	r3, r3, #1
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	2b04      	cmp	r3, #4
 8002882:	d00a      	beq.n	800289a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6818      	ldr	r0, [r3, #0]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	6919      	ldr	r1, [r3, #16]
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002894:	f7ff fc02 	bl	800209c <LL_ADC_SetOffset>
 8002898:	e179      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	2100      	movs	r1, #0
 80028a0:	4618      	mov	r0, r3
 80028a2:	f7ff fc1f 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80028a6:	4603      	mov	r3, r0
 80028a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <HAL_ADC_ConfigChannel+0x14e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	2100      	movs	r1, #0
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fc14 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80028bc:	4603      	mov	r3, r0
 80028be:	0e9b      	lsrs	r3, r3, #26
 80028c0:	f003 021f 	and.w	r2, r3, #31
 80028c4:	e01e      	b.n	8002904 <HAL_ADC_ConfigChannel+0x18c>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2100      	movs	r1, #0
 80028cc:	4618      	mov	r0, r3
 80028ce:	f7ff fc09 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 80028d2:	4603      	mov	r3, r0
 80028d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80028dc:	fa93 f3a3 	rbit	r3, r3
 80028e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80028e8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028ec:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 80028f4:	2320      	movs	r3, #32
 80028f6:	e004      	b.n	8002902 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 80028f8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028fc:	fab3 f383 	clz	r3, r3
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290c:	2b00      	cmp	r3, #0
 800290e:	d105      	bne.n	800291c <HAL_ADC_ConfigChannel+0x1a4>
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	0e9b      	lsrs	r3, r3, #26
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	e018      	b.n	800294e <HAL_ADC_ConfigChannel+0x1d6>
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002928:	fa93 f3a3 	rbit	r3, r3
 800292c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8002930:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002934:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8002938:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d101      	bne.n	8002944 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8002940:	2320      	movs	r3, #32
 8002942:	e004      	b.n	800294e <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8002944:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002948:	fab3 f383 	clz	r3, r3
 800294c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800294e:	429a      	cmp	r2, r3
 8002950:	d106      	bne.n	8002960 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2200      	movs	r2, #0
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fbd8 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2101      	movs	r1, #1
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fbbc 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 800296c:	4603      	mov	r3, r0
 800296e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10a      	bne.n	800298c <HAL_ADC_ConfigChannel+0x214>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2101      	movs	r1, #1
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff fbb1 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002982:	4603      	mov	r3, r0
 8002984:	0e9b      	lsrs	r3, r3, #26
 8002986:	f003 021f 	and.w	r2, r3, #31
 800298a:	e01e      	b.n	80029ca <HAL_ADC_ConfigChannel+0x252>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	2101      	movs	r1, #1
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fba6 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002998:	4603      	mov	r3, r0
 800299a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80029a2:	fa93 f3a3 	rbit	r3, r3
 80029a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 80029aa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80029ae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 80029b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d101      	bne.n	80029be <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 80029ba:	2320      	movs	r3, #32
 80029bc:	e004      	b.n	80029c8 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 80029be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80029c2:	fab3 f383 	clz	r3, r3
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d105      	bne.n	80029e2 <HAL_ADC_ConfigChannel+0x26a>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	0e9b      	lsrs	r3, r3, #26
 80029dc:	f003 031f 	and.w	r3, r3, #31
 80029e0:	e018      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x29c>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80029ee:	fa93 f3a3 	rbit	r3, r3
 80029f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 80029f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80029fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 80029fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d101      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002a06:	2320      	movs	r3, #32
 8002a08:	e004      	b.n	8002a14 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002a0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002a0e:	fab3 f383 	clz	r3, r3
 8002a12:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a14:	429a      	cmp	r2, r3
 8002a16:	d106      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f7ff fb75 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	2102      	movs	r1, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f7ff fb59 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a32:	4603      	mov	r3, r0
 8002a34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10a      	bne.n	8002a52 <HAL_ADC_ConfigChannel+0x2da>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2102      	movs	r1, #2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff fb4e 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	0e9b      	lsrs	r3, r3, #26
 8002a4c:	f003 021f 	and.w	r2, r3, #31
 8002a50:	e01e      	b.n	8002a90 <HAL_ADC_ConfigChannel+0x318>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2102      	movs	r1, #2
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f7ff fb43 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002a68:	fa93 f3a3 	rbit	r3, r3
 8002a6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8002a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002a74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d101      	bne.n	8002a84 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8002a80:	2320      	movs	r3, #32
 8002a82:	e004      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a88:	fab3 f383 	clz	r3, r3
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_ADC_ConfigChannel+0x330>
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	0e9b      	lsrs	r3, r3, #26
 8002aa2:	f003 031f 	and.w	r3, r3, #31
 8002aa6:	e014      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x35a>
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002ab6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ab8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002abc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e004      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fb16 	bl	8002110 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2103      	movs	r1, #3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fafa 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x398>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2103      	movs	r1, #3
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff faef 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 021f 	and.w	r2, r3, #31
 8002b0e:	e017      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3c8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2103      	movs	r1, #3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fae4 	bl	80020e4 <LL_ADC_GetOffsetChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002b2a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002b2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x3e0>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	e011      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x404>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002b66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002b68:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e003      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002b74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2103      	movs	r1, #3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff fac1 	bl	8002110 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff fbc8 	bl	8002328 <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8140 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff fb35 	bl	800221c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a8f      	ldr	r2, [pc, #572]	; (8002df4 <HAL_ADC_ConfigChannel+0x67c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	f040 8131 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x46e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	bf94      	ite	ls
 8002bde:	2301      	movls	r3, #1
 8002be0:	2300      	movhi	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e019      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4a2>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002bf8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002c02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d079      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x4c2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	3301      	adds	r3, #1
 8002c32:	069b      	lsls	r3, r3, #26
 8002c34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c38:	e015      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x4ee>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c4a:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002c4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002c56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x50e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	e017      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x53e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c96:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002c98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002ca2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x564>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	051b      	lsls	r3, r3, #20
 8002cda:	e018      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x596>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cec:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	e081      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x5b6>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	3301      	adds	r3, #1
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d2c:	e015      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x5e2>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002d4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x602>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	e017      	b.n	8002daa <HAL_ADC_ConfigChannel+0x632>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	61bb      	str	r3, [r7, #24]
  return result;
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002d96:	6a3b      	ldr	r3, [r7, #32]
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	ea42 0103 	orr.w	r1, r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x65e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b1e      	subs	r3, #30
 8002dce:	051b      	lsls	r3, r3, #20
 8002dd0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002dd4:	e01e      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x69c>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	60fb      	str	r3, [r7, #12]
  return result;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e006      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x688>
 8002df2:	bf00      	nop
 8002df4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b1e      	subs	r3, #30
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7ff f9d2 	bl	80021c4 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_ADC_ConfigChannel+0x7a4>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d06c      	beq.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e2c:	483c      	ldr	r0, [pc, #240]	; (8002f20 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e2e:	f7ff f927 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002e32:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3a      	ldr	r2, [pc, #232]	; (8002f24 <HAL_ADC_ConfigChannel+0x7ac>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d127      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d121      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a35      	ldr	r2, [pc, #212]	; (8002f28 <HAL_ADC_ConfigChannel+0x7b0>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d157      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e5a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002e5e:	4619      	mov	r1, r3
 8002e60:	482f      	ldr	r0, [pc, #188]	; (8002f20 <HAL_ADC_ConfigChannel+0x7a8>)
 8002e62:	f7ff f8fa 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e66:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_ADC_ConfigChannel+0x7b4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	4a30      	ldr	r2, [pc, #192]	; (8002f30 <HAL_ADC_ConfigChannel+0x7b8>)
 8002e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	1c5a      	adds	r2, r3, #1
 8002e76:	4613      	mov	r3, r2
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	4413      	add	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e80:	e002      	b.n	8002e88 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3b01      	subs	r3, #1
 8002e86:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f9      	bne.n	8002e82 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e8e:	e03a      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a27      	ldr	r2, [pc, #156]	; (8002f34 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d113      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e9a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d10d      	bne.n	8002ec2 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1f      	ldr	r2, [pc, #124]	; (8002f28 <HAL_ADC_ConfigChannel+0x7b0>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d12a      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eb0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002eb8:	4619      	mov	r1, r3
 8002eba:	4819      	ldr	r0, [pc, #100]	; (8002f20 <HAL_ADC_ConfigChannel+0x7a8>)
 8002ebc:	f7ff f8cd 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002ec0:	e021      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a1c      	ldr	r2, [pc, #112]	; (8002f38 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d11c      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ed0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d116      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a12      	ldr	r2, [pc, #72]	; (8002f28 <HAL_ADC_ConfigChannel+0x7b0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d111      	bne.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ee2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ee6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002eea:	4619      	mov	r1, r3
 8002eec:	480c      	ldr	r0, [pc, #48]	; (8002f20 <HAL_ADC_ConfigChannel+0x7a8>)
 8002eee:	f7ff f8b4 	bl	800205a <LL_ADC_SetCommonPathInternalCh>
 8002ef2:	e008      	b.n	8002f06 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef8:	f043 0220 	orr.w	r2, r3, #32
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002f0e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	37d8      	adds	r7, #216	; 0xd8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	80080000 	.word	0x80080000
 8002f20:	50040300 	.word	0x50040300
 8002f24:	c7520000 	.word	0xc7520000
 8002f28:	50040000 	.word	0x50040000
 8002f2c:	2000000c 	.word	0x2000000c
 8002f30:	053e2d63 	.word	0x053e2d63
 8002f34:	cb840000 	.word	0xcb840000
 8002f38:	80000001 	.word	0x80000001

08002f3c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f44:	2300      	movs	r3, #0
 8002f46:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f7ff f9eb 	bl	8002328 <LL_ADC_IsEnabled>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d169      	bne.n	800302c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689a      	ldr	r2, [r3, #8]
 8002f5e:	4b36      	ldr	r3, [pc, #216]	; (8003038 <ADC_Enable+0xfc>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00d      	beq.n	8002f82 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f6a:	f043 0210 	orr.w	r2, r3, #16
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f76:	f043 0201 	orr.w	r2, r3, #1
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e055      	b.n	800302e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7ff f9ba 	bl	8002300 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f8c:	482b      	ldr	r0, [pc, #172]	; (800303c <ADC_Enable+0x100>)
 8002f8e:	f7ff f877 	bl	8002080 <LL_ADC_GetCommonPathInternalCh>
 8002f92:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002f94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f9c:	4b28      	ldr	r3, [pc, #160]	; (8003040 <ADC_Enable+0x104>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	099b      	lsrs	r3, r3, #6
 8002fa2:	4a28      	ldr	r2, [pc, #160]	; (8003044 <ADC_Enable+0x108>)
 8002fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa8:	099b      	lsrs	r3, r3, #6
 8002faa:	1c5a      	adds	r2, r3, #1
 8002fac:	4613      	mov	r3, r2
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	4413      	add	r3, r2
 8002fb2:	009b      	lsls	r3, r3, #2
 8002fb4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fb6:	e002      	b.n	8002fbe <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1f9      	bne.n	8002fb8 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fc4:	f7ff f806 	bl	8001fd4 <HAL_GetTick>
 8002fc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fca:	e028      	b.n	800301e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7ff f9a9 	bl	8002328 <LL_ADC_IsEnabled>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d104      	bne.n	8002fe6 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	f7ff f98d 	bl	8002300 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002fe6:	f7fe fff5 	bl	8001fd4 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d914      	bls.n	800301e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d00d      	beq.n	800301e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003006:	f043 0210 	orr.w	r2, r3, #16
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003012:	f043 0201 	orr.w	r2, r3, #1
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e007      	b.n	800302e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d1cf      	bne.n	8002fcc <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800302c:	2300      	movs	r3, #0
}
 800302e:	4618      	mov	r0, r3
 8003030:	3710      	adds	r7, #16
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	8000003f 	.word	0x8000003f
 800303c:	50040300 	.word	0x50040300
 8003040:	2000000c 	.word	0x2000000c
 8003044:	053e2d63 	.word	0x053e2d63

08003048 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003054:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800305a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800305e:	2b00      	cmp	r3, #0
 8003060:	d14b      	bne.n	80030fa <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003066:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4618      	mov	r0, r3
 8003082:	f7ff f860 	bl	8002146 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003086:	4603      	mov	r3, r0
 8003088:	2b00      	cmp	r3, #0
 800308a:	d032      	beq.n	80030f2 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68db      	ldr	r3, [r3, #12]
 8003092:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d12b      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800309e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030aa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11f      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	f043 0201 	orr.w	r2, r3, #1
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	655a      	str	r2, [r3, #84]	; 0x54
 80030be:	e018      	b.n	80030f2 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d111      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d105      	bne.n	80030f2 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	f043 0201 	orr.w	r2, r3, #1
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f7fd fed6 	bl	8000ea4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80030f8:	e00e      	b.n	8003118 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fe:	f003 0310 	and.w	r3, r3, #16
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003106:	68f8      	ldr	r0, [r7, #12]
 8003108:	f7ff fb2c 	bl	8002764 <HAL_ADC_ErrorCallback>
}
 800310c:	e004      	b.n	8003118 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	4798      	blx	r3
}
 8003118:	bf00      	nop
 800311a:	3710      	adds	r7, #16
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}

08003120 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800312e:	68f8      	ldr	r0, [r7, #12]
 8003130:	f7ff fb0e 	bl	8002750 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003134:	bf00      	nop
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003148:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800314e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800315a:	f043 0204 	orr.w	r2, r3, #4
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003162:	68f8      	ldr	r0, [r7, #12]
 8003164:	f7ff fafe 	bl	8002764 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003168:	bf00      	nop
 800316a:	3710      	adds	r7, #16
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d101      	bne.n	8003182 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e0ed      	b.n	800335e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d102      	bne.n	8003194 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7fe fb86 	bl	80018a0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f042 0201 	orr.w	r2, r2, #1
 80031a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031a4:	f7fe ff16 	bl	8001fd4 <HAL_GetTick>
 80031a8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031aa:	e012      	b.n	80031d2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031ac:	f7fe ff12 	bl	8001fd4 <HAL_GetTick>
 80031b0:	4602      	mov	r2, r0
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	1ad3      	subs	r3, r2, r3
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d90b      	bls.n	80031d2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2205      	movs	r2, #5
 80031ca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e0c5      	b.n	800335e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0e5      	beq.n	80031ac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f022 0202 	bic.w	r2, r2, #2
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031f0:	f7fe fef0 	bl	8001fd4 <HAL_GetTick>
 80031f4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80031f6:	e012      	b.n	800321e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80031f8:	f7fe feec 	bl	8001fd4 <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b0a      	cmp	r3, #10
 8003204:	d90b      	bls.n	800321e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2205      	movs	r2, #5
 8003216:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e09f      	b.n	800335e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1e5      	bne.n	80031f8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e1b      	ldrb	r3, [r3, #24]
 8003230:	2b01      	cmp	r3, #1
 8003232:	d108      	bne.n	8003246 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003242:	601a      	str	r2, [r3, #0]
 8003244:	e007      	b.n	8003256 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	7e5b      	ldrb	r3, [r3, #25]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d108      	bne.n	8003270 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	681a      	ldr	r2, [r3, #0]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800326c:	601a      	str	r2, [r3, #0]
 800326e:	e007      	b.n	8003280 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800327e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7e9b      	ldrb	r3, [r3, #26]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d108      	bne.n	800329a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f042 0220 	orr.w	r2, r2, #32
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	e007      	b.n	80032aa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0220 	bic.w	r2, r2, #32
 80032a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	7edb      	ldrb	r3, [r3, #27]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d108      	bne.n	80032c4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0210 	bic.w	r2, r2, #16
 80032c0:	601a      	str	r2, [r3, #0]
 80032c2:	e007      	b.n	80032d4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f042 0210 	orr.w	r2, r2, #16
 80032d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	7f1b      	ldrb	r3, [r3, #28]
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d108      	bne.n	80032ee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0208 	orr.w	r2, r2, #8
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e007      	b.n	80032fe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0208 	bic.w	r2, r2, #8
 80032fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	7f5b      	ldrb	r3, [r3, #29]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d108      	bne.n	8003318 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0204 	orr.w	r2, r2, #4
 8003314:	601a      	str	r2, [r3, #0]
 8003316:	e007      	b.n	8003328 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f022 0204 	bic.w	r2, r2, #4
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689a      	ldr	r2, [r3, #8]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	431a      	orrs	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	ea42 0103 	orr.w	r1, r2, r3
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	1e5a      	subs	r2, r3, #1
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	430a      	orrs	r2, r1
 800334c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	2200      	movs	r2, #0
 8003352:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3710      	adds	r7, #16
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
	...

08003368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b480      	push	{r7}
 800336a:	b085      	sub	sp, #20
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f003 0307 	and.w	r3, r3, #7
 8003376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003378:	4b0c      	ldr	r3, [pc, #48]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003384:	4013      	ands	r3, r2
 8003386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800339a:	4a04      	ldr	r2, [pc, #16]	; (80033ac <__NVIC_SetPriorityGrouping+0x44>)
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	60d3      	str	r3, [r2, #12]
}
 80033a0:	bf00      	nop
 80033a2:	3714      	adds	r7, #20
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr
 80033ac:	e000ed00 	.word	0xe000ed00

080033b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033b4:	4b04      	ldr	r3, [pc, #16]	; (80033c8 <__NVIC_GetPriorityGrouping+0x18>)
 80033b6:	68db      	ldr	r3, [r3, #12]
 80033b8:	0a1b      	lsrs	r3, r3, #8
 80033ba:	f003 0307 	and.w	r3, r3, #7
}
 80033be:	4618      	mov	r0, r3
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	e000ed00 	.word	0xe000ed00

080033cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	db0b      	blt.n	80033f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	f003 021f 	and.w	r2, r3, #31
 80033e4:	4907      	ldr	r1, [pc, #28]	; (8003404 <__NVIC_EnableIRQ+0x38>)
 80033e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ea:	095b      	lsrs	r3, r3, #5
 80033ec:	2001      	movs	r0, #1
 80033ee:	fa00 f202 	lsl.w	r2, r0, r2
 80033f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	e000e100 	.word	0xe000e100

08003408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	4603      	mov	r3, r0
 8003410:	6039      	str	r1, [r7, #0]
 8003412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	db0a      	blt.n	8003432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	b2da      	uxtb	r2, r3
 8003420:	490c      	ldr	r1, [pc, #48]	; (8003454 <__NVIC_SetPriority+0x4c>)
 8003422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	b2d2      	uxtb	r2, r2
 800342a:	440b      	add	r3, r1
 800342c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003430:	e00a      	b.n	8003448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	b2da      	uxtb	r2, r3
 8003436:	4908      	ldr	r1, [pc, #32]	; (8003458 <__NVIC_SetPriority+0x50>)
 8003438:	79fb      	ldrb	r3, [r7, #7]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	3b04      	subs	r3, #4
 8003440:	0112      	lsls	r2, r2, #4
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	440b      	add	r3, r1
 8003446:	761a      	strb	r2, [r3, #24]
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003452:	4770      	bx	lr
 8003454:	e000e100 	.word	0xe000e100
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800345c:	b480      	push	{r7}
 800345e:	b089      	sub	sp, #36	; 0x24
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f003 0307 	and.w	r3, r3, #7
 800346e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	f1c3 0307 	rsb	r3, r3, #7
 8003476:	2b04      	cmp	r3, #4
 8003478:	bf28      	it	cs
 800347a:	2304      	movcs	r3, #4
 800347c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	3304      	adds	r3, #4
 8003482:	2b06      	cmp	r3, #6
 8003484:	d902      	bls.n	800348c <NVIC_EncodePriority+0x30>
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3b03      	subs	r3, #3
 800348a:	e000      	b.n	800348e <NVIC_EncodePriority+0x32>
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003490:	f04f 32ff 	mov.w	r2, #4294967295
 8003494:	69bb      	ldr	r3, [r7, #24]
 8003496:	fa02 f303 	lsl.w	r3, r2, r3
 800349a:	43da      	mvns	r2, r3
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	401a      	ands	r2, r3
 80034a0:	697b      	ldr	r3, [r7, #20]
 80034a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034a4:	f04f 31ff 	mov.w	r1, #4294967295
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	fa01 f303 	lsl.w	r3, r1, r3
 80034ae:	43d9      	mvns	r1, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b4:	4313      	orrs	r3, r2
         );
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3724      	adds	r7, #36	; 0x24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
	...

080034c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034d4:	d301      	bcc.n	80034da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034d6:	2301      	movs	r3, #1
 80034d8:	e00f      	b.n	80034fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034da:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <SysTick_Config+0x40>)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	3b01      	subs	r3, #1
 80034e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034e2:	210f      	movs	r1, #15
 80034e4:	f04f 30ff 	mov.w	r0, #4294967295
 80034e8:	f7ff ff8e 	bl	8003408 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034ec:	4b05      	ldr	r3, [pc, #20]	; (8003504 <SysTick_Config+0x40>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034f2:	4b04      	ldr	r3, [pc, #16]	; (8003504 <SysTick_Config+0x40>)
 80034f4:	2207      	movs	r2, #7
 80034f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3708      	adds	r7, #8
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	e000e010 	.word	0xe000e010

08003508 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f7ff ff29 	bl	8003368 <__NVIC_SetPriorityGrouping>
}
 8003516:	bf00      	nop
 8003518:	3708      	adds	r7, #8
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}

0800351e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b086      	sub	sp, #24
 8003522:	af00      	add	r7, sp, #0
 8003524:	4603      	mov	r3, r0
 8003526:	60b9      	str	r1, [r7, #8]
 8003528:	607a      	str	r2, [r7, #4]
 800352a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800352c:	2300      	movs	r3, #0
 800352e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003530:	f7ff ff3e 	bl	80033b0 <__NVIC_GetPriorityGrouping>
 8003534:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	68b9      	ldr	r1, [r7, #8]
 800353a:	6978      	ldr	r0, [r7, #20]
 800353c:	f7ff ff8e 	bl	800345c <NVIC_EncodePriority>
 8003540:	4602      	mov	r2, r0
 8003542:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff ff5d 	bl	8003408 <__NVIC_SetPriority>
}
 800354e:	bf00      	nop
 8003550:	3718      	adds	r7, #24
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003556:	b580      	push	{r7, lr}
 8003558:	b082      	sub	sp, #8
 800355a:	af00      	add	r7, sp, #0
 800355c:	4603      	mov	r3, r0
 800355e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003560:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003564:	4618      	mov	r0, r3
 8003566:	f7ff ff31 	bl	80033cc <__NVIC_EnableIRQ>
}
 800356a:	bf00      	nop
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b082      	sub	sp, #8
 8003576:	af00      	add	r7, sp, #0
 8003578:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f7ff ffa2 	bl	80034c4 <SysTick_Config>
 8003580:	4603      	mov	r3, r0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d101      	bne.n	800359e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e098      	b.n	80036d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b4d      	ldr	r3, [pc, #308]	; (80036dc <HAL_DMA_Init+0x150>)
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d80f      	bhi.n	80035ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	461a      	mov	r2, r3
 80035b0:	4b4b      	ldr	r3, [pc, #300]	; (80036e0 <HAL_DMA_Init+0x154>)
 80035b2:	4413      	add	r3, r2
 80035b4:	4a4b      	ldr	r2, [pc, #300]	; (80036e4 <HAL_DMA_Init+0x158>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	091b      	lsrs	r3, r3, #4
 80035bc:	009a      	lsls	r2, r3, #2
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a48      	ldr	r2, [pc, #288]	; (80036e8 <HAL_DMA_Init+0x15c>)
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
 80035c8:	e00e      	b.n	80035e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	461a      	mov	r2, r3
 80035d0:	4b46      	ldr	r3, [pc, #280]	; (80036ec <HAL_DMA_Init+0x160>)
 80035d2:	4413      	add	r3, r2
 80035d4:	4a43      	ldr	r2, [pc, #268]	; (80036e4 <HAL_DMA_Init+0x158>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	091b      	lsrs	r3, r3, #4
 80035dc:	009a      	lsls	r2, r3, #2
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a42      	ldr	r2, [pc, #264]	; (80036f0 <HAL_DMA_Init+0x164>)
 80035e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2202      	movs	r2, #2
 80035ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800360c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003618:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003624:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800362c:	68fa      	ldr	r2, [r7, #12]
 800362e:	4313      	orrs	r3, r2
 8003630:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	68fa      	ldr	r2, [r7, #12]
 8003638:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003642:	d039      	beq.n	80036b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <HAL_DMA_Init+0x15c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d11a      	bne.n	8003684 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800364e:	4b29      	ldr	r3, [pc, #164]	; (80036f4 <HAL_DMA_Init+0x168>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 031c 	and.w	r3, r3, #28
 800365a:	210f      	movs	r1, #15
 800365c:	fa01 f303 	lsl.w	r3, r1, r3
 8003660:	43db      	mvns	r3, r3
 8003662:	4924      	ldr	r1, [pc, #144]	; (80036f4 <HAL_DMA_Init+0x168>)
 8003664:	4013      	ands	r3, r2
 8003666:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003668:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <HAL_DMA_Init+0x168>)
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6859      	ldr	r1, [r3, #4]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003674:	f003 031c 	and.w	r3, r3, #28
 8003678:	fa01 f303 	lsl.w	r3, r1, r3
 800367c:	491d      	ldr	r1, [pc, #116]	; (80036f4 <HAL_DMA_Init+0x168>)
 800367e:	4313      	orrs	r3, r2
 8003680:	600b      	str	r3, [r1, #0]
 8003682:	e019      	b.n	80036b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8003684:	4b1c      	ldr	r3, [pc, #112]	; (80036f8 <HAL_DMA_Init+0x16c>)
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800368c:	f003 031c 	and.w	r3, r3, #28
 8003690:	210f      	movs	r1, #15
 8003692:	fa01 f303 	lsl.w	r3, r1, r3
 8003696:	43db      	mvns	r3, r3
 8003698:	4917      	ldr	r1, [pc, #92]	; (80036f8 <HAL_DMA_Init+0x16c>)
 800369a:	4013      	ands	r3, r2
 800369c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800369e:	4b16      	ldr	r3, [pc, #88]	; (80036f8 <HAL_DMA_Init+0x16c>)
 80036a0:	681a      	ldr	r2, [r3, #0]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6859      	ldr	r1, [r3, #4]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036aa:	f003 031c 	and.w	r3, r3, #28
 80036ae:	fa01 f303 	lsl.w	r3, r1, r3
 80036b2:	4911      	ldr	r1, [pc, #68]	; (80036f8 <HAL_DMA_Init+0x16c>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80036ce:	2300      	movs	r3, #0
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3714      	adds	r7, #20
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr
 80036dc:	40020407 	.word	0x40020407
 80036e0:	bffdfff8 	.word	0xbffdfff8
 80036e4:	cccccccd 	.word	0xcccccccd
 80036e8:	40020000 	.word	0x40020000
 80036ec:	bffdfbf8 	.word	0xbffdfbf8
 80036f0:	40020400 	.word	0x40020400
 80036f4:	400200a8 	.word	0x400200a8
 80036f8:	400204a8 	.word	0x400204a8

080036fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b086      	sub	sp, #24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
 8003708:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800370a:	2300      	movs	r3, #0
 800370c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003714:	2b01      	cmp	r3, #1
 8003716:	d101      	bne.n	800371c <HAL_DMA_Start_IT+0x20>
 8003718:	2302      	movs	r3, #2
 800371a:	e04b      	b.n	80037b4 <HAL_DMA_Start_IT+0xb8>
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800372a:	b2db      	uxtb	r3, r3
 800372c:	2b01      	cmp	r3, #1
 800372e:	d13a      	bne.n	80037a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	2202      	movs	r2, #2
 8003734:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	2200      	movs	r2, #0
 800373c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0201 	bic.w	r2, r2, #1
 800374c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f92f 	bl	80039b8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800375e:	2b00      	cmp	r3, #0
 8003760:	d008      	beq.n	8003774 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681a      	ldr	r2, [r3, #0]
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f042 020e 	orr.w	r2, r2, #14
 8003770:	601a      	str	r2, [r3, #0]
 8003772:	e00f      	b.n	8003794 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f022 0204 	bic.w	r2, r2, #4
 8003782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681a      	ldr	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 020a 	orr.w	r2, r2, #10
 8003792:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	601a      	str	r2, [r3, #0]
 80037a4:	e005      	b.n	80037b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037ae:	2302      	movs	r3, #2
 80037b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3718      	adds	r7, #24
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d005      	beq.n	80037e0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2204      	movs	r2, #4
 80037d8:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
 80037de:	e029      	b.n	8003834 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 020e 	bic.w	r2, r2, #14
 80037ee:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f022 0201 	bic.w	r2, r2, #1
 80037fe:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003804:	f003 021c 	and.w	r2, r3, #28
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2101      	movs	r1, #1
 800380e:	fa01 f202 	lsl.w	r2, r1, r2
 8003812:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2200      	movs	r2, #0
 8003820:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	2b00      	cmp	r3, #0
 800382a:	d003      	beq.n	8003834 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
    }
  }
  return status;
 8003834:	7bfb      	ldrb	r3, [r7, #15]
}
 8003836:	4618      	mov	r0, r3
 8003838:	3710      	adds	r7, #16
 800383a:	46bd      	mov	sp, r7
 800383c:	bd80      	pop	{r7, pc}

0800383e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800383e:	b580      	push	{r7, lr}
 8003840:	b084      	sub	sp, #16
 8003842:	af00      	add	r7, sp, #0
 8003844:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800385a:	f003 031c 	and.w	r3, r3, #28
 800385e:	2204      	movs	r2, #4
 8003860:	409a      	lsls	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	4013      	ands	r3, r2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d026      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x7a>
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	f003 0304 	and.w	r3, r3, #4
 8003870:	2b00      	cmp	r3, #0
 8003872:	d021      	beq.n	80038b8 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0320 	and.w	r3, r3, #32
 800387e:	2b00      	cmp	r3, #0
 8003880:	d107      	bne.n	8003892 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f022 0204 	bic.w	r2, r2, #4
 8003890:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003896:	f003 021c 	and.w	r2, r3, #28
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2104      	movs	r1, #4
 80038a0:	fa01 f202 	lsl.w	r2, r1, r2
 80038a4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d071      	beq.n	8003992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80038b6:	e06c      	b.n	8003992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	f003 031c 	and.w	r3, r3, #28
 80038c0:	2202      	movs	r2, #2
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d02e      	beq.n	800392a <HAL_DMA_IRQHandler+0xec>
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	f003 0302 	and.w	r3, r3, #2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d029      	beq.n	800392a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0320 	and.w	r3, r3, #32
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d10b      	bne.n	80038fc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f022 020a 	bic.w	r2, r2, #10
 80038f2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2201      	movs	r2, #1
 80038f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003900:	f003 021c 	and.w	r2, r3, #28
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2102      	movs	r1, #2
 800390a:	fa01 f202 	lsl.w	r2, r1, r2
 800390e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2200      	movs	r2, #0
 8003914:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800391c:	2b00      	cmp	r3, #0
 800391e:	d038      	beq.n	8003992 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003928:	e033      	b.n	8003992 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800392e:	f003 031c 	and.w	r3, r3, #28
 8003932:	2208      	movs	r2, #8
 8003934:	409a      	lsls	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d02a      	beq.n	8003994 <HAL_DMA_IRQHandler+0x156>
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	f003 0308 	and.w	r3, r3, #8
 8003944:	2b00      	cmp	r3, #0
 8003946:	d025      	beq.n	8003994 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f022 020e 	bic.w	r2, r2, #14
 8003956:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800395c:	f003 021c 	and.w	r2, r3, #28
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	2101      	movs	r1, #1
 8003966:	fa01 f202 	lsl.w	r2, r1, r2
 800396a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003986:	2b00      	cmp	r3, #0
 8003988:	d004      	beq.n	8003994 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003992:	bf00      	nop
 8003994:	bf00      	nop
}
 8003996:	3710      	adds	r7, #16
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80039aa:	b2db      	uxtb	r3, r3
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b085      	sub	sp, #20
 80039bc:	af00      	add	r7, sp, #0
 80039be:	60f8      	str	r0, [r7, #12]
 80039c0:	60b9      	str	r1, [r7, #8]
 80039c2:	607a      	str	r2, [r7, #4]
 80039c4:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ca:	f003 021c 	and.w	r2, r3, #28
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	2101      	movs	r1, #1
 80039d4:	fa01 f202 	lsl.w	r2, r1, r2
 80039d8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	683a      	ldr	r2, [r7, #0]
 80039e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	689b      	ldr	r3, [r3, #8]
 80039e6:	2b10      	cmp	r3, #16
 80039e8:	d108      	bne.n	80039fc <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	68ba      	ldr	r2, [r7, #8]
 80039f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039fa:	e007      	b.n	8003a0c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68ba      	ldr	r2, [r7, #8]
 8003a02:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	687a      	ldr	r2, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
}
 8003a0c:	bf00      	nop
 8003a0e:	3714      	adds	r7, #20
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a26:	e148      	b.n	8003cba <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	2101      	movs	r1, #1
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	fa01 f303 	lsl.w	r3, r1, r3
 8003a34:	4013      	ands	r3, r2
 8003a36:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 813a 	beq.w	8003cb4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f003 0303 	and.w	r3, r3, #3
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d005      	beq.n	8003a58 <HAL_GPIO_Init+0x40>
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f003 0303 	and.w	r3, r3, #3
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d130      	bne.n	8003aba <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	2203      	movs	r2, #3
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	43db      	mvns	r3, r3
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	68da      	ldr	r2, [r3, #12]
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	005b      	lsls	r3, r3, #1
 8003a78:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7c:	693a      	ldr	r2, [r7, #16]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003a8e:	2201      	movs	r2, #1
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	fa02 f303 	lsl.w	r3, r2, r3
 8003a96:	43db      	mvns	r3, r3
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	4013      	ands	r3, r2
 8003a9c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	091b      	lsrs	r3, r3, #4
 8003aa4:	f003 0201 	and.w	r2, r3, #1
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	693a      	ldr	r2, [r7, #16]
 8003ab8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	f003 0303 	and.w	r3, r3, #3
 8003ac2:	2b03      	cmp	r3, #3
 8003ac4:	d017      	beq.n	8003af6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	2203      	movs	r2, #3
 8003ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad6:	43db      	mvns	r3, r3
 8003ad8:	693a      	ldr	r2, [r7, #16]
 8003ada:	4013      	ands	r3, r2
 8003adc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	697b      	ldr	r3, [r7, #20]
 8003ae4:	005b      	lsls	r3, r3, #1
 8003ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	693a      	ldr	r2, [r7, #16]
 8003af4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b02      	cmp	r3, #2
 8003b00:	d123      	bne.n	8003b4a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	08da      	lsrs	r2, r3, #3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	3208      	adds	r2, #8
 8003b0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b0e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	220f      	movs	r2, #15
 8003b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1e:	43db      	mvns	r3, r3
 8003b20:	693a      	ldr	r2, [r7, #16]
 8003b22:	4013      	ands	r3, r2
 8003b24:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	691a      	ldr	r2, [r3, #16]
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	fa02 f303 	lsl.w	r3, r2, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003b3c:	697b      	ldr	r3, [r7, #20]
 8003b3e:	08da      	lsrs	r2, r3, #3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	3208      	adds	r2, #8
 8003b44:	6939      	ldr	r1, [r7, #16]
 8003b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	2203      	movs	r2, #3
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	4013      	ands	r3, r2
 8003b60:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f003 0203 	and.w	r2, r3, #3
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	005b      	lsls	r3, r3, #1
 8003b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b72:	693a      	ldr	r2, [r7, #16]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 8094 	beq.w	8003cb4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b8c:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b90:	4a51      	ldr	r2, [pc, #324]	; (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b92:	f043 0301 	orr.w	r3, r3, #1
 8003b96:	6613      	str	r3, [r2, #96]	; 0x60
 8003b98:	4b4f      	ldr	r3, [pc, #316]	; (8003cd8 <HAL_GPIO_Init+0x2c0>)
 8003b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b9c:	f003 0301 	and.w	r3, r3, #1
 8003ba0:	60bb      	str	r3, [r7, #8]
 8003ba2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003ba4:	4a4d      	ldr	r2, [pc, #308]	; (8003cdc <HAL_GPIO_Init+0x2c4>)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	089b      	lsrs	r3, r3, #2
 8003baa:	3302      	adds	r3, #2
 8003bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	f003 0303 	and.w	r3, r3, #3
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	220f      	movs	r2, #15
 8003bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc0:	43db      	mvns	r3, r3
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003bce:	d00d      	beq.n	8003bec <HAL_GPIO_Init+0x1d4>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a43      	ldr	r2, [pc, #268]	; (8003ce0 <HAL_GPIO_Init+0x2c8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <HAL_GPIO_Init+0x1d0>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a42      	ldr	r2, [pc, #264]	; (8003ce4 <HAL_GPIO_Init+0x2cc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d101      	bne.n	8003be4 <HAL_GPIO_Init+0x1cc>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e004      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003be4:	2307      	movs	r3, #7
 8003be6:	e002      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_GPIO_Init+0x1d6>
 8003bec:	2300      	movs	r3, #0
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	f002 0203 	and.w	r2, r2, #3
 8003bf4:	0092      	lsls	r2, r2, #2
 8003bf6:	4093      	lsls	r3, r2
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003bfe:	4937      	ldr	r1, [pc, #220]	; (8003cdc <HAL_GPIO_Init+0x2c4>)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	089b      	lsrs	r3, r3, #2
 8003c04:	3302      	adds	r3, #2
 8003c06:	693a      	ldr	r2, [r7, #16]
 8003c08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c0c:	4b36      	ldr	r3, [pc, #216]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c30:	4a2d      	ldr	r2, [pc, #180]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c36:	4b2c      	ldr	r3, [pc, #176]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c38:	68db      	ldr	r3, [r3, #12]
 8003c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4013      	ands	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003c5a:	4a23      	ldr	r2, [pc, #140]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003c60:	4b21      	ldr	r3, [pc, #132]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003c84:	4a18      	ldr	r2, [pc, #96]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003c8a:	4b17      	ldr	r3, [pc, #92]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	43db      	mvns	r3, r3
 8003c94:	693a      	ldr	r2, [r7, #16]
 8003c96:	4013      	ands	r3, r2
 8003c98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d003      	beq.n	8003cae <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003cae:	4a0e      	ldr	r2, [pc, #56]	; (8003ce8 <HAL_GPIO_Init+0x2d0>)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	3301      	adds	r3, #1
 8003cb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f47f aeaf 	bne.w	8003a28 <HAL_GPIO_Init+0x10>
  }
}
 8003cca:	bf00      	nop
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr
 8003cd8:	40021000 	.word	0x40021000
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	48000400 	.word	0x48000400
 8003ce4:	48000800 	.word	0x48000800
 8003ce8:	40010400 	.word	0x40010400

08003cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	807b      	strh	r3, [r7, #2]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cfc:	787b      	ldrb	r3, [r7, #1]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d02:	887a      	ldrh	r2, [r7, #2]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d08:	e002      	b.n	8003d10 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d0a:	887a      	ldrh	r2, [r7, #2]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b082      	sub	sp, #8
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e08d      	b.n	8003e4a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d106      	bne.n	8003d48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f7fd fdf0 	bl	8001928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2224      	movs	r2, #36	; 0x24
 8003d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	681a      	ldr	r2, [r3, #0]
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f022 0201 	bic.w	r2, r2, #1
 8003d5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d107      	bne.n	8003d96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	689a      	ldr	r2, [r3, #8]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	e006      	b.n	8003da4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689a      	ldr	r2, [r3, #8]
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003da2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	68db      	ldr	r3, [r3, #12]
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d108      	bne.n	8003dbe <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	685a      	ldr	r2, [r3, #4]
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dba:	605a      	str	r2, [r3, #4]
 8003dbc:	e007      	b.n	8003dce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685a      	ldr	r2, [r3, #4]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dcc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6812      	ldr	r2, [r2, #0]
 8003dd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ddc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003de0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68da      	ldr	r2, [r3, #12]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003df0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	691a      	ldr	r2, [r3, #16]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
 8003dfa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	69d9      	ldr	r1, [r3, #28]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1a      	ldr	r2, [r3, #32]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	430a      	orrs	r2, r1
 8003e1a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f042 0201 	orr.w	r2, r2, #1
 8003e2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2220      	movs	r2, #32
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e48:	2300      	movs	r3, #0
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3708      	adds	r7, #8
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
	...

08003e54 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b088      	sub	sp, #32
 8003e58:	af02      	add	r7, sp, #8
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	607a      	str	r2, [r7, #4]
 8003e5e:	461a      	mov	r2, r3
 8003e60:	460b      	mov	r3, r1
 8003e62:	817b      	strh	r3, [r7, #10]
 8003e64:	4613      	mov	r3, r2
 8003e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	2b20      	cmp	r3, #32
 8003e72:	f040 80fd 	bne.w	8004070 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d101      	bne.n	8003e84 <HAL_I2C_Master_Transmit+0x30>
 8003e80:	2302      	movs	r3, #2
 8003e82:	e0f6      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e8c:	f7fe f8a2 	bl	8001fd4 <HAL_GetTick>
 8003e90:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2319      	movs	r3, #25
 8003e98:	2201      	movs	r2, #1
 8003e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f000 ff33 	bl	8004d0a <I2C_WaitOnFlagUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d001      	beq.n	8003eae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e0e1      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2221      	movs	r2, #33	; 0x21
 8003eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2210      	movs	r2, #16
 8003eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	687a      	ldr	r2, [r7, #4]
 8003ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	893a      	ldrh	r2, [r7, #8]
 8003ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	2bff      	cmp	r3, #255	; 0xff
 8003ede:	d906      	bls.n	8003eee <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	22ff      	movs	r2, #255	; 0xff
 8003ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003ee6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e007      	b.n	8003efe <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003ef8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003efc:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d024      	beq.n	8003f50 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0a:	781a      	ldrb	r2, [r3, #0]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	3b01      	subs	r3, #1
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	b2da      	uxtb	r2, r3
 8003f40:	8979      	ldrh	r1, [r7, #10]
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <HAL_I2C_Master_Transmit+0x228>)
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	68f8      	ldr	r0, [r7, #12]
 8003f4a:	f001 f919 	bl	8005180 <I2C_TransferConfig>
 8003f4e:	e066      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f54:	b2da      	uxtb	r2, r3
 8003f56:	8979      	ldrh	r1, [r7, #10]
 8003f58:	4b48      	ldr	r3, [pc, #288]	; (800407c <HAL_I2C_Master_Transmit+0x228>)
 8003f5a:	9300      	str	r3, [sp, #0]
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f001 f90e 	bl	8005180 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003f64:	e05b      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	6a39      	ldr	r1, [r7, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 ff1c 	bl	8004da8 <I2C_WaitOnTXISFlagUntilTimeout>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e07b      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7e:	781a      	ldrb	r2, [r3, #0]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f94:	b29b      	uxth	r3, r3
 8003f96:	3b01      	subs	r3, #1
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d034      	beq.n	800401e <HAL_I2C_Master_Transmit+0x1ca>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d130      	bne.n	800401e <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	9300      	str	r3, [sp, #0]
 8003fc0:	6a3b      	ldr	r3, [r7, #32]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	2180      	movs	r1, #128	; 0x80
 8003fc6:	68f8      	ldr	r0, [r7, #12]
 8003fc8:	f000 fe9f 	bl	8004d0a <I2C_WaitOnFlagUntilTimeout>
 8003fcc:	4603      	mov	r3, r0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d001      	beq.n	8003fd6 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e04d      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fda:	b29b      	uxth	r3, r3
 8003fdc:	2bff      	cmp	r3, #255	; 0xff
 8003fde:	d90e      	bls.n	8003ffe <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	22ff      	movs	r2, #255	; 0xff
 8003fe4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	8979      	ldrh	r1, [r7, #10]
 8003fee:	2300      	movs	r3, #0
 8003ff0:	9300      	str	r3, [sp, #0]
 8003ff2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	f001 f8c2 	bl	8005180 <I2C_TransferConfig>
 8003ffc:	e00f      	b.n	800401e <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004002:	b29a      	uxth	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800400c:	b2da      	uxtb	r2, r3
 800400e:	8979      	ldrh	r1, [r7, #10]
 8004010:	2300      	movs	r3, #0
 8004012:	9300      	str	r3, [sp, #0]
 8004014:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f001 f8b1 	bl	8005180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004022:	b29b      	uxth	r3, r3
 8004024:	2b00      	cmp	r3, #0
 8004026:	d19e      	bne.n	8003f66 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	6a39      	ldr	r1, [r7, #32]
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 ff02 	bl	8004e36 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d001      	beq.n	800403c <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e01a      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2220      	movs	r2, #32
 8004042:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6859      	ldr	r1, [r3, #4]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681a      	ldr	r2, [r3, #0]
 800404e:	4b0c      	ldr	r3, [pc, #48]	; (8004080 <HAL_I2C_Master_Transmit+0x22c>)
 8004050:	400b      	ands	r3, r1
 8004052:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2220      	movs	r2, #32
 8004058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800406c:	2300      	movs	r3, #0
 800406e:	e000      	b.n	8004072 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004070:	2302      	movs	r3, #2
  }
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	80002000 	.word	0x80002000
 8004080:	fe00e800 	.word	0xfe00e800

08004084 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b088      	sub	sp, #32
 8004088:	af02      	add	r7, sp, #8
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	607a      	str	r2, [r7, #4]
 800408e:	461a      	mov	r2, r3
 8004090:	460b      	mov	r3, r1
 8004092:	817b      	strh	r3, [r7, #10]
 8004094:	4613      	mov	r3, r2
 8004096:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800409e:	b2db      	uxtb	r3, r3
 80040a0:	2b20      	cmp	r3, #32
 80040a2:	f040 80db 	bne.w	800425c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_I2C_Master_Receive+0x30>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e0d4      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80040bc:	f7fd ff8a 	bl	8001fd4 <HAL_GetTick>
 80040c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	9300      	str	r3, [sp, #0]
 80040c6:	2319      	movs	r3, #25
 80040c8:	2201      	movs	r2, #1
 80040ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f000 fe1b 	bl	8004d0a <I2C_WaitOnFlagUntilTimeout>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d001      	beq.n	80040de <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e0bf      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2222      	movs	r2, #34	; 0x22
 80040e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2210      	movs	r2, #16
 80040ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2200      	movs	r2, #0
 80040f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	893a      	ldrh	r2, [r7, #8]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800410a:	b29b      	uxth	r3, r3
 800410c:	2bff      	cmp	r3, #255	; 0xff
 800410e:	d90e      	bls.n	800412e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	22ff      	movs	r2, #255	; 0xff
 8004114:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800411a:	b2da      	uxtb	r2, r3
 800411c:	8979      	ldrh	r1, [r7, #10]
 800411e:	4b52      	ldr	r3, [pc, #328]	; (8004268 <HAL_I2C_Master_Receive+0x1e4>)
 8004120:	9300      	str	r3, [sp, #0]
 8004122:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004126:	68f8      	ldr	r0, [r7, #12]
 8004128:	f001 f82a 	bl	8005180 <I2C_TransferConfig>
 800412c:	e06d      	b.n	800420a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800413c:	b2da      	uxtb	r2, r3
 800413e:	8979      	ldrh	r1, [r7, #10]
 8004140:	4b49      	ldr	r3, [pc, #292]	; (8004268 <HAL_I2C_Master_Receive+0x1e4>)
 8004142:	9300      	str	r3, [sp, #0]
 8004144:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004148:	68f8      	ldr	r0, [r7, #12]
 800414a:	f001 f819 	bl	8005180 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800414e:	e05c      	b.n	800420a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	6a39      	ldr	r1, [r7, #32]
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 feb1 	bl	8004ebc <I2C_WaitOnRXNEFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d001      	beq.n	8004164 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004160:	2301      	movs	r3, #1
 8004162:	e07c      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	d034      	beq.n	800420a <HAL_I2C_Master_Receive+0x186>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d130      	bne.n	800420a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	9300      	str	r3, [sp, #0]
 80041ac:	6a3b      	ldr	r3, [r7, #32]
 80041ae:	2200      	movs	r2, #0
 80041b0:	2180      	movs	r1, #128	; 0x80
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 fda9 	bl	8004d0a <I2C_WaitOnFlagUntilTimeout>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e04d      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2bff      	cmp	r3, #255	; 0xff
 80041ca:	d90e      	bls.n	80041ea <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	22ff      	movs	r2, #255	; 0xff
 80041d0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	8979      	ldrh	r1, [r7, #10]
 80041da:	2300      	movs	r3, #0
 80041dc:	9300      	str	r3, [sp, #0]
 80041de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e2:	68f8      	ldr	r0, [r7, #12]
 80041e4:	f000 ffcc 	bl	8005180 <I2C_TransferConfig>
 80041e8:	e00f      	b.n	800420a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	8979      	ldrh	r1, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	9300      	str	r3, [sp, #0]
 8004200:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004204:	68f8      	ldr	r0, [r7, #12]
 8004206:	f000 ffbb 	bl	8005180 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800420e:	b29b      	uxth	r3, r3
 8004210:	2b00      	cmp	r3, #0
 8004212:	d19d      	bne.n	8004150 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	6a39      	ldr	r1, [r7, #32]
 8004218:	68f8      	ldr	r0, [r7, #12]
 800421a:	f000 fe0c 	bl	8004e36 <I2C_WaitOnSTOPFlagUntilTimeout>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e01a      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	2220      	movs	r2, #32
 800422e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	4b0c      	ldr	r3, [pc, #48]	; (800426c <HAL_I2C_Master_Receive+0x1e8>)
 800423c:	400b      	ands	r3, r1
 800423e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3718      	adds	r7, #24
 8004262:	46bd      	mov	sp, r7
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	80002400 	.word	0x80002400
 800426c:	fe00e800 	.word	0xfe00e800

08004270 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	4798      	blx	r3
  }
}
 800429c:	bf00      	nop
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b086      	sub	sp, #24
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00f      	beq.n	80042e6 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00a      	beq.n	80042e6 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	f043 0201 	orr.w	r2, r3, #1
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042e4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00f      	beq.n	8004310 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	f043 0208 	orr.w	r2, r3, #8
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800430e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004316:	2b00      	cmp	r3, #0
 8004318:	d00f      	beq.n	800433a <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004328:	f043 0202 	orr.w	r2, r3, #2
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004338:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433e:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f003 030b 	and.w	r3, r3, #11
 8004346:	2b00      	cmp	r3, #0
 8004348:	d003      	beq.n	8004352 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800434a:	68f9      	ldr	r1, [r7, #12]
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 fb83 	bl	8004a58 <I2C_ITError>
  }
}
 8004352:	bf00      	nop
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}

0800435a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800435a:	b480      	push	{r7}
 800435c:	b083      	sub	sp, #12
 800435e:	af00      	add	r7, sp, #0
 8004360:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004362:	bf00      	nop
 8004364:	370c      	adds	r7, #12
 8004366:	46bd      	mov	sp, r7
 8004368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436c:	4770      	bx	lr

0800436e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800436e:	b480      	push	{r7}
 8004370:	b083      	sub	sp, #12
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004376:	bf00      	nop
 8004378:	370c      	adds	r7, #12
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr

08004382 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
 800438a:	460b      	mov	r3, r1
 800438c:	70fb      	strb	r3, [r7, #3]
 800438e:	4613      	mov	r3, r2
 8004390:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004392:	bf00      	nop
 8004394:	370c      	adds	r7, #12
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800439e:	b480      	push	{r7}
 80043a0:	b083      	sub	sp, #12
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80043a6:	bf00      	nop
 80043a8:	370c      	adds	r7, #12
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr

080043b2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80043b2:	b480      	push	{r7}
 80043b4:	b083      	sub	sp, #12
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b083      	sub	sp, #12
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80043ce:	bf00      	nop
 80043d0:	370c      	adds	r7, #12
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr

080043da <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b086      	sub	sp, #24
 80043de:	af00      	add	r7, sp, #0
 80043e0:	60f8      	str	r0, [r7, #12]
 80043e2:	60b9      	str	r1, [r7, #8]
 80043e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ea:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d101      	bne.n	80043fe <I2C_Slave_ISR_IT+0x24>
 80043fa:	2302      	movs	r3, #2
 80043fc:	e0e1      	b.n	80045c2 <I2C_Slave_ISR_IT+0x1e8>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	f003 0320 	and.w	r3, r3, #32
 800440c:	2b00      	cmp	r3, #0
 800440e:	d008      	beq.n	8004422 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8004416:	2b00      	cmp	r3, #0
 8004418:	d003      	beq.n	8004422 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800441a:	6939      	ldr	r1, [r7, #16]
 800441c:	68f8      	ldr	r0, [r7, #12]
 800441e:	f000 f9b5 	bl	800478c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b00      	cmp	r3, #0
 800442a:	d04b      	beq.n	80044c4 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8004432:	2b00      	cmp	r3, #0
 8004434:	d046      	beq.n	80044c4 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800443a:	b29b      	uxth	r3, r3
 800443c:	2b00      	cmp	r3, #0
 800443e:	d128      	bne.n	8004492 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004446:	b2db      	uxtb	r3, r3
 8004448:	2b28      	cmp	r3, #40	; 0x28
 800444a:	d108      	bne.n	800445e <I2C_Slave_ISR_IT+0x84>
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004452:	d104      	bne.n	800445e <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8004454:	6939      	ldr	r1, [r7, #16]
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 faaa 	bl	80049b0 <I2C_ITListenCplt>
 800445c:	e031      	b.n	80044c2 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004464:	b2db      	uxtb	r3, r3
 8004466:	2b29      	cmp	r3, #41	; 0x29
 8004468:	d10e      	bne.n	8004488 <I2C_Slave_ISR_IT+0xae>
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004470:	d00a      	beq.n	8004488 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fc03 	bl	8004c86 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 f926 	bl	80046d2 <I2C_ITSlaveSeqCplt>
 8004486:	e01c      	b.n	80044c2 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2210      	movs	r2, #16
 800448e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004490:	e08f      	b.n	80045b2 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2210      	movs	r2, #16
 8004498:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f043 0204 	orr.w	r2, r3, #4
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d003      	beq.n	80044b4 <I2C_Slave_ISR_IT+0xda>
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80044b2:	d17e      	bne.n	80045b2 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044b8:	4619      	mov	r1, r3
 80044ba:	68f8      	ldr	r0, [r7, #12]
 80044bc:	f000 facc 	bl	8004a58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80044c0:	e077      	b.n	80045b2 <I2C_Slave_ISR_IT+0x1d8>
 80044c2:	e076      	b.n	80045b2 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d02f      	beq.n	800452e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d02a      	beq.n	800452e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d018      	beq.n	8004514 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ec:	b2d2      	uxtb	r2, r2
 80044ee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	1c5a      	adds	r2, r3, #1
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29a      	uxth	r2, r3
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800450a:	b29b      	uxth	r3, r3
 800450c:	3b01      	subs	r3, #1
 800450e:	b29a      	uxth	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004518:	b29b      	uxth	r3, r3
 800451a:	2b00      	cmp	r3, #0
 800451c:	d14b      	bne.n	80045b6 <I2C_Slave_ISR_IT+0x1dc>
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004524:	d047      	beq.n	80045b6 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8004526:	68f8      	ldr	r0, [r7, #12]
 8004528:	f000 f8d3 	bl	80046d2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800452c:	e043      	b.n	80045b6 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800452e:	693b      	ldr	r3, [r7, #16]
 8004530:	f003 0308 	and.w	r3, r3, #8
 8004534:	2b00      	cmp	r3, #0
 8004536:	d009      	beq.n	800454c <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8004542:	6939      	ldr	r1, [r7, #16]
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f000 f840 	bl	80045ca <I2C_ITAddrCplt>
 800454a:	e035      	b.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	2b00      	cmp	r3, #0
 8004554:	d030      	beq.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02b      	beq.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d018      	beq.n	800459c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	781a      	ldrb	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	1c5a      	adds	r2, r3, #1
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29b      	uxth	r3, r3
 8004586:	3b01      	subs	r3, #1
 8004588:	b29a      	uxth	r2, r3
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004592:	3b01      	subs	r3, #1
 8004594:	b29a      	uxth	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	851a      	strh	r2, [r3, #40]	; 0x28
 800459a:	e00d      	b.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80045a2:	d002      	beq.n	80045aa <I2C_Slave_ISR_IT+0x1d0>
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d106      	bne.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80045aa:	68f8      	ldr	r0, [r7, #12]
 80045ac:	f000 f891 	bl	80046d2 <I2C_ITSlaveSeqCplt>
 80045b0:	e002      	b.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 80045b6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3718      	adds	r7, #24
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b084      	sub	sp, #16
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80045e0:	2b28      	cmp	r3, #40	; 0x28
 80045e2:	d16a      	bne.n	80046ba <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	0c1b      	lsrs	r3, r3, #16
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	0c1b      	lsrs	r3, r3, #16
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8004602:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	b29b      	uxth	r3, r3
 800460c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004610:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	b29b      	uxth	r3, r3
 800461a:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800461e:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	2b02      	cmp	r3, #2
 8004626:	d138      	bne.n	800469a <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004628:	897b      	ldrh	r3, [r7, #10]
 800462a:	09db      	lsrs	r3, r3, #7
 800462c:	b29a      	uxth	r2, r3
 800462e:	89bb      	ldrh	r3, [r7, #12]
 8004630:	4053      	eors	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	f003 0306 	and.w	r3, r3, #6
 8004638:	2b00      	cmp	r3, #0
 800463a:	d11c      	bne.n	8004676 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800463c:	897b      	ldrh	r3, [r7, #10]
 800463e:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800464e:	2b02      	cmp	r3, #2
 8004650:	d13b      	bne.n	80046ca <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	2208      	movs	r2, #8
 800465e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004668:	89ba      	ldrh	r2, [r7, #12]
 800466a:	7bfb      	ldrb	r3, [r7, #15]
 800466c:	4619      	mov	r1, r3
 800466e:	6878      	ldr	r0, [r7, #4]
 8004670:	f7ff fe87 	bl	8004382 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004674:	e029      	b.n	80046ca <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8004676:	893b      	ldrh	r3, [r7, #8]
 8004678:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800467a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 fdb0 	bl	80051e4 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800468c:	89ba      	ldrh	r2, [r7, #12]
 800468e:	7bfb      	ldrb	r3, [r7, #15]
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff fe75 	bl	8004382 <HAL_I2C_AddrCallback>
}
 8004698:	e017      	b.n	80046ca <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800469a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fda0 	bl	80051e4 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80046ac:	89ba      	ldrh	r2, [r7, #12]
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	4619      	mov	r1, r3
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f7ff fe65 	bl	8004382 <HAL_I2C_AddrCallback>
}
 80046b8:	e007      	b.n	80046ca <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	2208      	movs	r2, #8
 80046c0:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80046ca:	bf00      	nop
 80046cc:	3710      	adds	r7, #16
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b084      	sub	sp, #16
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d008      	beq.n	8004706 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	e00c      	b.n	8004720 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d007      	beq.n	8004720 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800471e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b29      	cmp	r3, #41	; 0x29
 800472a:	d112      	bne.n	8004752 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2228      	movs	r2, #40	; 0x28
 8004730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2221      	movs	r2, #33	; 0x21
 8004738:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800473a:	2101      	movs	r1, #1
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 fd51 	bl	80051e4 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800474a:	6878      	ldr	r0, [r7, #4]
 800474c:	f7ff fe05 	bl	800435a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004750:	e017      	b.n	8004782 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b2a      	cmp	r3, #42	; 0x2a
 800475c:	d111      	bne.n	8004782 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2228      	movs	r2, #40	; 0x28
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2222      	movs	r2, #34	; 0x22
 800476a:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800476c:	2102      	movs	r1, #2
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f000 fd38 	bl	80051e4 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7ff fdf6 	bl	800436e <HAL_I2C_SlaveRxCpltCallback>
}
 8004782:	bf00      	nop
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
	...

0800478c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b086      	sub	sp, #24
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047a8:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2220      	movs	r2, #32
 80047b0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80047b2:	7bfb      	ldrb	r3, [r7, #15]
 80047b4:	2b21      	cmp	r3, #33	; 0x21
 80047b6:	d002      	beq.n	80047be <I2C_ITSlaveCplt+0x32>
 80047b8:	7bfb      	ldrb	r3, [r7, #15]
 80047ba:	2b29      	cmp	r3, #41	; 0x29
 80047bc:	d108      	bne.n	80047d0 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80047be:	f248 0101 	movw	r1, #32769	; 0x8001
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 fd0e 	bl	80051e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
 80047ce:	e019      	b.n	8004804 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	d002      	beq.n	80047dc <I2C_ITSlaveCplt+0x50>
 80047d6:	7bfb      	ldrb	r3, [r7, #15]
 80047d8:	2b2a      	cmp	r3, #42	; 0x2a
 80047da:	d108      	bne.n	80047ee <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80047dc:	f248 0102 	movw	r1, #32770	; 0x8002
 80047e0:	6878      	ldr	r0, [r7, #4]
 80047e2:	f000 fcff 	bl	80051e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2222      	movs	r2, #34	; 0x22
 80047ea:	631a      	str	r2, [r3, #48]	; 0x30
 80047ec:	e00a      	b.n	8004804 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80047ee:	7bfb      	ldrb	r3, [r7, #15]
 80047f0:	2b28      	cmp	r3, #40	; 0x28
 80047f2:	d107      	bne.n	8004804 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80047f4:	f248 0103 	movw	r1, #32771	; 0x8003
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f000 fcf3 	bl	80051e4 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685a      	ldr	r2, [r3, #4]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004812:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	6859      	ldr	r1, [r3, #4]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	4b62      	ldr	r3, [pc, #392]	; (80049a8 <I2C_ITSlaveCplt+0x21c>)
 8004820:	400b      	ands	r3, r1
 8004822:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f000 fa2e 	bl	8004c86 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d013      	beq.n	800485c <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	681a      	ldr	r2, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004842:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004848:	2b00      	cmp	r3, #0
 800484a:	d01f      	beq.n	800488c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	b29a      	uxth	r2, r3
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	855a      	strh	r2, [r3, #42]	; 0x2a
 800485a:	e017      	b.n	800488c <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004862:	2b00      	cmp	r3, #0
 8004864:	d012      	beq.n	800488c <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004874:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	b29a      	uxth	r2, r3
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f003 0304 	and.w	r3, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d020      	beq.n	80048d8 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 0304 	bic.w	r3, r3, #4
 800489c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	b2d2      	uxtb	r2, r2
 80048aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b0:	1c5a      	adds	r2, r3, #1
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00c      	beq.n	80048d8 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048c2:	3b01      	subs	r3, #1
 80048c4:	b29a      	uxth	r2, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	3b01      	subs	r3, #1
 80048d2:	b29a      	uxth	r2, r3
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048e6:	f043 0204 	orr.w	r2, r3, #4
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004908:	4619      	mov	r1, r3
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 f8a4 	bl	8004a58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b28      	cmp	r3, #40	; 0x28
 800491a:	d141      	bne.n	80049a0 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800491c:	6979      	ldr	r1, [r7, #20]
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 f846 	bl	80049b0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004924:	e03c      	b.n	80049a0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800492a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800492e:	d014      	beq.n	800495a <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8004930:	6878      	ldr	r0, [r7, #4]
 8004932:	f7ff fece 	bl	80046d2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a1c      	ldr	r2, [pc, #112]	; (80049ac <I2C_ITSlaveCplt+0x220>)
 800493a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2220      	movs	r2, #32
 8004940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7ff fd23 	bl	800439e <HAL_I2C_ListenCpltCallback>
}
 8004958:	e022      	b.n	80049a0 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004960:	b2db      	uxtb	r3, r3
 8004962:	2b22      	cmp	r3, #34	; 0x22
 8004964:	d10e      	bne.n	8004984 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff fcf6 	bl	800436e <HAL_I2C_SlaveRxCpltCallback>
}
 8004982:	e00d      	b.n	80049a0 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2220      	movs	r2, #32
 8004988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7ff fcdd 	bl	800435a <HAL_I2C_SlaveTxCpltCallback>
}
 80049a0:	bf00      	nop
 80049a2:	3718      	adds	r7, #24
 80049a4:	46bd      	mov	sp, r7
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	fe00e800 	.word	0xfe00e800
 80049ac:	ffff0000 	.word	0xffff0000

080049b0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a25      	ldr	r2, [pc, #148]	; (8004a54 <I2C_ITListenCplt+0xa4>)
 80049be:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2200      	movs	r2, #0
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2220      	movs	r2, #32
 80049ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2200      	movs	r2, #0
 80049d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2200      	movs	r2, #0
 80049da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	f003 0304 	and.w	r3, r3, #4
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d022      	beq.n	8004a2c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f0:	b2d2      	uxtb	r2, r2
 80049f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	1c5a      	adds	r2, r3, #1
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d012      	beq.n	8004a2c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	b29a      	uxth	r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29a      	uxth	r2, r3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a24:	f043 0204 	orr.w	r2, r3, #4
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a2c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fbd7 	bl	80051e4 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f7ff fca9 	bl	800439e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8004a4c:	bf00      	nop
 8004a4e:	3708      	adds	r7, #8
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bd80      	pop	{r7, pc}
 8004a54:	ffff0000 	.word	0xffff0000

08004a58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a68:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4a6d      	ldr	r2, [pc, #436]	; (8004c2c <I2C_ITError+0x1d4>)
 8004a76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	431a      	orrs	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004a8a:	7bfb      	ldrb	r3, [r7, #15]
 8004a8c:	2b28      	cmp	r3, #40	; 0x28
 8004a8e:	d005      	beq.n	8004a9c <I2C_ITError+0x44>
 8004a90:	7bfb      	ldrb	r3, [r7, #15]
 8004a92:	2b29      	cmp	r3, #41	; 0x29
 8004a94:	d002      	beq.n	8004a9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9a:	d10b      	bne.n	8004ab4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004a9c:	2103      	movs	r1, #3
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fba0 	bl	80051e4 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2228      	movs	r2, #40	; 0x28
 8004aa8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a60      	ldr	r2, [pc, #384]	; (8004c30 <I2C_ITError+0x1d8>)
 8004ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ab2:	e030      	b.n	8004b16 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004ab4:	f248 0103 	movw	r1, #32771	; 0x8003
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 fb93 	bl	80051e4 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f8e1 	bl	8004c86 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aca:	b2db      	uxtb	r3, r3
 8004acc:	2b60      	cmp	r3, #96	; 0x60
 8004ace:	d01f      	beq.n	8004b10 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f003 0320 	and.w	r3, r3, #32
 8004ae2:	2b20      	cmp	r3, #32
 8004ae4:	d114      	bne.n	8004b10 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	f003 0310 	and.w	r3, r3, #16
 8004af0:	2b10      	cmp	r3, #16
 8004af2:	d109      	bne.n	8004b08 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2210      	movs	r2, #16
 8004afa:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b00:	f043 0204 	orr.w	r2, r3, #4
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2220      	movs	r2, #32
 8004b0e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d039      	beq.n	8004b98 <I2C_ITError+0x140>
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b11      	cmp	r3, #17
 8004b28:	d002      	beq.n	8004b30 <I2C_ITError+0xd8>
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	2b21      	cmp	r3, #33	; 0x21
 8004b2e:	d133      	bne.n	8004b98 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b3e:	d107      	bne.n	8004b50 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b4e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7fe ff21 	bl	800399c <HAL_DMA_GetState>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d017      	beq.n	8004b90 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b64:	4a33      	ldr	r2, [pc, #204]	; (8004c34 <I2C_ITError+0x1dc>)
 8004b66:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b74:	4618      	mov	r0, r3
 8004b76:	f7fe fe21 	bl	80037bc <HAL_DMA_Abort_IT>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d04d      	beq.n	8004c1c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b8e:	e045      	b.n	8004c1c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f000 f851 	bl	8004c38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b96:	e041      	b.n	8004c1c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d039      	beq.n	8004c14 <I2C_ITError+0x1bc>
 8004ba0:	68bb      	ldr	r3, [r7, #8]
 8004ba2:	2b12      	cmp	r3, #18
 8004ba4:	d002      	beq.n	8004bac <I2C_ITError+0x154>
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	2b22      	cmp	r3, #34	; 0x22
 8004baa:	d133      	bne.n	8004c14 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bba:	d107      	bne.n	8004bcc <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	f7fe fee3 	bl	800399c <HAL_DMA_GetState>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b01      	cmp	r3, #1
 8004bda:	d017      	beq.n	8004c0c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004be0:	4a14      	ldr	r2, [pc, #80]	; (8004c34 <I2C_ITError+0x1dc>)
 8004be2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f7fe fde3 	bl	80037bc <HAL_DMA_Abort_IT>
 8004bf6:	4603      	mov	r3, r0
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d011      	beq.n	8004c20 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c06:	4610      	mov	r0, r2
 8004c08:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c0a:	e009      	b.n	8004c20 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f813 	bl	8004c38 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c12:	e005      	b.n	8004c20 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 f80f 	bl	8004c38 <I2C_TreatErrorCallback>
  }
}
 8004c1a:	e002      	b.n	8004c22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004c20:	bf00      	nop
}
 8004c22:	bf00      	nop
 8004c24:	3710      	adds	r7, #16
 8004c26:	46bd      	mov	sp, r7
 8004c28:	bd80      	pop	{r7, pc}
 8004c2a:	bf00      	nop
 8004c2c:	ffff0000 	.word	0xffff0000
 8004c30:	080043db 	.word	0x080043db
 8004c34:	08004ccf 	.word	0x08004ccf

08004c38 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004c46:	b2db      	uxtb	r3, r3
 8004c48:	2b60      	cmp	r3, #96	; 0x60
 8004c4a:	d10e      	bne.n	8004c6a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2220      	movs	r2, #32
 8004c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fbaf 	bl	80043c6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004c68:	e009      	b.n	8004c7e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fb9a 	bl	80043b2 <HAL_I2C_ErrorCallback>
}
 8004c7e:	bf00      	nop
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004c86:	b480      	push	{r7}
 8004c88:	b083      	sub	sp, #12
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 0302 	and.w	r3, r3, #2
 8004c98:	2b02      	cmp	r3, #2
 8004c9a:	d103      	bne.n	8004ca4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	f003 0301 	and.w	r3, r3, #1
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d007      	beq.n	8004cc2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	699a      	ldr	r2, [r3, #24]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0201 	orr.w	r2, r2, #1
 8004cc0:	619a      	str	r2, [r3, #24]
  }
}
 8004cc2:	bf00      	nop
 8004cc4:	370c      	adds	r7, #12
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ccc:	4770      	bx	lr

08004cce <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d003      	beq.n	8004cec <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ce8:	2200      	movs	r2, #0
 8004cea:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f7ff ff9b 	bl	8004c38 <I2C_TreatErrorCallback>
}
 8004d02:	bf00      	nop
 8004d04:	3710      	adds	r7, #16
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}

08004d0a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004d0a:	b580      	push	{r7, lr}
 8004d0c:	b084      	sub	sp, #16
 8004d0e:	af00      	add	r7, sp, #0
 8004d10:	60f8      	str	r0, [r7, #12]
 8004d12:	60b9      	str	r1, [r7, #8]
 8004d14:	603b      	str	r3, [r7, #0]
 8004d16:	4613      	mov	r3, r2
 8004d18:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d1a:	e031      	b.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d22:	d02d      	beq.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d24:	f7fd f956 	bl	8001fd4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d302      	bcc.n	8004d3a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d122      	bne.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	699a      	ldr	r2, [r3, #24]
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	4013      	ands	r3, r2
 8004d44:	68ba      	ldr	r2, [r7, #8]
 8004d46:	429a      	cmp	r2, r3
 8004d48:	bf0c      	ite	eq
 8004d4a:	2301      	moveq	r3, #1
 8004d4c:	2300      	movne	r3, #0
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	461a      	mov	r2, r3
 8004d52:	79fb      	ldrb	r3, [r7, #7]
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d113      	bne.n	8004d80 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5c:	f043 0220 	orr.w	r2, r3, #32
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e00f      	b.n	8004da0 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	4013      	ands	r3, r2
 8004d8a:	68ba      	ldr	r2, [r7, #8]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	bf0c      	ite	eq
 8004d90:	2301      	moveq	r3, #1
 8004d92:	2300      	movne	r3, #0
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	461a      	mov	r2, r3
 8004d98:	79fb      	ldrb	r3, [r7, #7]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d0be      	beq.n	8004d1c <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b084      	sub	sp, #16
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004db4:	e033      	b.n	8004e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004db6:	687a      	ldr	r2, [r7, #4]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	68f8      	ldr	r0, [r7, #12]
 8004dbc:	f000 f900 	bl	8004fc0 <I2C_IsErrorOccurred>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d001      	beq.n	8004dca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e031      	b.n	8004e2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d025      	beq.n	8004e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dd2:	f7fd f8ff 	bl	8001fd4 <HAL_GetTick>
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	1ad3      	subs	r3, r2, r3
 8004ddc:	68ba      	ldr	r2, [r7, #8]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d302      	bcc.n	8004de8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004de2:	68bb      	ldr	r3, [r7, #8]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d11a      	bne.n	8004e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b02      	cmp	r3, #2
 8004df4:	d013      	beq.n	8004e1e <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dfa:	f043 0220 	orr.w	r2, r3, #32
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e007      	b.n	8004e2e <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	699b      	ldr	r3, [r3, #24]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b02      	cmp	r3, #2
 8004e2a:	d1c4      	bne.n	8004db6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b084      	sub	sp, #16
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	60f8      	str	r0, [r7, #12]
 8004e3e:	60b9      	str	r1, [r7, #8]
 8004e40:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e42:	e02f      	b.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	68b9      	ldr	r1, [r7, #8]
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f8b9 	bl	8004fc0 <I2C_IsErrorOccurred>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d001      	beq.n	8004e58 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e02d      	b.n	8004eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e58:	f7fd f8bc 	bl	8001fd4 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d11a      	bne.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	699b      	ldr	r3, [r3, #24]
 8004e74:	f003 0320 	and.w	r3, r3, #32
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d013      	beq.n	8004ea4 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e80:	f043 0220 	orr.w	r2, r3, #32
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e007      	b.n	8004eb4 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	f003 0320 	and.w	r3, r3, #32
 8004eae:	2b20      	cmp	r3, #32
 8004eb0:	d1c8      	bne.n	8004e44 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3710      	adds	r7, #16
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b084      	sub	sp, #16
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ec8:	e06b      	b.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f000 f876 	bl	8004fc0 <I2C_IsErrorOccurred>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	e069      	b.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	699b      	ldr	r3, [r3, #24]
 8004ee4:	f003 0320 	and.w	r3, r3, #32
 8004ee8:	2b20      	cmp	r3, #32
 8004eea:	d138      	bne.n	8004f5e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d105      	bne.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d001      	beq.n	8004f06 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004f02:	2300      	movs	r3, #0
 8004f04:	e055      	b.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	f003 0310 	and.w	r3, r3, #16
 8004f10:	2b10      	cmp	r3, #16
 8004f12:	d107      	bne.n	8004f24 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2210      	movs	r2, #16
 8004f1a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2204      	movs	r2, #4
 8004f20:	645a      	str	r2, [r3, #68]	; 0x44
 8004f22:	e002      	b.n	8004f2a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	2220      	movs	r2, #32
 8004f30:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	6859      	ldr	r1, [r3, #4]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	4b1f      	ldr	r3, [pc, #124]	; (8004fbc <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004f3e:	400b      	ands	r3, r1
 8004f40:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	2220      	movs	r2, #32
 8004f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2200      	movs	r2, #0
 8004f4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e029      	b.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f5e:	f7fd f839 	bl	8001fd4 <HAL_GetTick>
 8004f62:	4602      	mov	r2, r0
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	1ad3      	subs	r3, r2, r3
 8004f68:	68ba      	ldr	r2, [r7, #8]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d302      	bcc.n	8004f74 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d116      	bne.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	699b      	ldr	r3, [r3, #24]
 8004f7a:	f003 0304 	and.w	r3, r3, #4
 8004f7e:	2b04      	cmp	r3, #4
 8004f80:	d00f      	beq.n	8004fa2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f86:	f043 0220 	orr.w	r2, r3, #32
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2220      	movs	r2, #32
 8004f92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	2200      	movs	r2, #0
 8004f9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e007      	b.n	8004fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f003 0304 	and.w	r3, r3, #4
 8004fac:	2b04      	cmp	r3, #4
 8004fae:	d18c      	bne.n	8004eca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	3710      	adds	r7, #16
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	bf00      	nop
 8004fbc:	fe00e800 	.word	0xfe00e800

08004fc0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b08a      	sub	sp, #40	; 0x28
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	60f8      	str	r0, [r7, #12]
 8004fc8:	60b9      	str	r1, [r7, #8]
 8004fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	699b      	ldr	r3, [r3, #24]
 8004fd8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	f003 0310 	and.w	r3, r3, #16
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d068      	beq.n	80050be <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2210      	movs	r2, #16
 8004ff2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004ff4:	e049      	b.n	800508a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ffc:	d045      	beq.n	800508a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004ffe:	f7fc ffe9 	bl	8001fd4 <HAL_GetTick>
 8005002:	4602      	mov	r2, r0
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	429a      	cmp	r2, r3
 800500c:	d302      	bcc.n	8005014 <I2C_IsErrorOccurred+0x54>
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d13a      	bne.n	800508a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800501e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005026:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005032:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005036:	d121      	bne.n	800507c <I2C_IsErrorOccurred+0xbc>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800503e:	d01d      	beq.n	800507c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8005040:	7cfb      	ldrb	r3, [r7, #19]
 8005042:	2b20      	cmp	r3, #32
 8005044:	d01a      	beq.n	800507c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	685a      	ldr	r2, [r3, #4]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005054:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8005056:	f7fc ffbd 	bl	8001fd4 <HAL_GetTick>
 800505a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800505c:	e00e      	b.n	800507c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800505e:	f7fc ffb9 	bl	8001fd4 <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b19      	cmp	r3, #25
 800506a:	d907      	bls.n	800507c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800506c:	6a3b      	ldr	r3, [r7, #32]
 800506e:	f043 0320 	orr.w	r3, r3, #32
 8005072:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800507a:	e006      	b.n	800508a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f003 0320 	and.w	r3, r3, #32
 8005086:	2b20      	cmp	r3, #32
 8005088:	d1e9      	bne.n	800505e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	699b      	ldr	r3, [r3, #24]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b20      	cmp	r3, #32
 8005096:	d003      	beq.n	80050a0 <I2C_IsErrorOccurred+0xe0>
 8005098:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800509c:	2b00      	cmp	r3, #0
 800509e:	d0aa      	beq.n	8004ff6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80050a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d103      	bne.n	80050b0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2220      	movs	r2, #32
 80050ae:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f043 0304 	orr.w	r3, r3, #4
 80050b6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050e0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80050e2:	2301      	movs	r3, #1
 80050e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00b      	beq.n	800510a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f043 0308 	orr.w	r3, r3, #8
 80050f8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005102:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005104:	2301      	movs	r3, #1
 8005106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00b      	beq.n	800512c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	f043 0302 	orr.w	r3, r3, #2
 800511a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005124:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800512c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005130:	2b00      	cmp	r3, #0
 8005132:	d01c      	beq.n	800516e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005134:	68f8      	ldr	r0, [r7, #12]
 8005136:	f7ff fda6 	bl	8004c86 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6859      	ldr	r1, [r3, #4]
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	4b0d      	ldr	r3, [pc, #52]	; (800517c <I2C_IsErrorOccurred+0x1bc>)
 8005146:	400b      	ands	r3, r1
 8005148:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800514e:	6a3b      	ldr	r3, [r7, #32]
 8005150:	431a      	orrs	r2, r3
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2220      	movs	r2, #32
 800515a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2200      	movs	r2, #0
 8005162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800516e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	; 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	fe00e800 	.word	0xfe00e800

08005180 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8005180:	b480      	push	{r7}
 8005182:	b087      	sub	sp, #28
 8005184:	af00      	add	r7, sp, #0
 8005186:	60f8      	str	r0, [r7, #12]
 8005188:	607b      	str	r3, [r7, #4]
 800518a:	460b      	mov	r3, r1
 800518c:	817b      	strh	r3, [r7, #10]
 800518e:	4613      	mov	r3, r2
 8005190:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8005192:	897b      	ldrh	r3, [r7, #10]
 8005194:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8005198:	7a7b      	ldrb	r3, [r7, #9]
 800519a:	041b      	lsls	r3, r3, #16
 800519c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051a0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80051ae:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	6a3b      	ldr	r3, [r7, #32]
 80051b8:	0d5b      	lsrs	r3, r3, #21
 80051ba:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80051be:	4b08      	ldr	r3, [pc, #32]	; (80051e0 <I2C_TransferConfig+0x60>)
 80051c0:	430b      	orrs	r3, r1
 80051c2:	43db      	mvns	r3, r3
 80051c4:	ea02 0103 	and.w	r1, r2, r3
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	430a      	orrs	r2, r1
 80051d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80051d2:	bf00      	nop
 80051d4:	371c      	adds	r7, #28
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	03ff63ff 	.word	0x03ff63ff

080051e4 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	460b      	mov	r3, r1
 80051ee:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80051f0:	2300      	movs	r3, #0
 80051f2:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80051f4:	887b      	ldrh	r3, [r7, #2]
 80051f6:	f003 0301 	and.w	r3, r3, #1
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00f      	beq.n	800521e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8005204:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800520c:	b2db      	uxtb	r3, r3
 800520e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005212:	2b28      	cmp	r3, #40	; 0x28
 8005214:	d003      	beq.n	800521e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800521c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800521e:	887b      	ldrh	r3, [r7, #2]
 8005220:	f003 0302 	and.w	r3, r3, #2
 8005224:	2b00      	cmp	r3, #0
 8005226:	d00f      	beq.n	8005248 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800522e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800523c:	2b28      	cmp	r3, #40	; 0x28
 800523e:	d003      	beq.n	8005248 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8005246:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8005248:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800524c:	2b00      	cmp	r3, #0
 800524e:	da03      	bge.n	8005258 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8005256:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8005258:	887b      	ldrh	r3, [r7, #2]
 800525a:	2b10      	cmp	r3, #16
 800525c:	d103      	bne.n	8005266 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8005264:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8005266:	887b      	ldrh	r3, [r7, #2]
 8005268:	2b20      	cmp	r3, #32
 800526a:	d103      	bne.n	8005274 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f043 0320 	orr.w	r3, r3, #32
 8005272:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8005274:	887b      	ldrh	r3, [r7, #2]
 8005276:	2b40      	cmp	r3, #64	; 0x40
 8005278:	d103      	bne.n	8005282 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005280:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6819      	ldr	r1, [r3, #0]
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	43da      	mvns	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	400a      	ands	r2, r1
 8005292:	601a      	str	r2, [r3, #0]
}
 8005294:	bf00      	nop
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b20      	cmp	r3, #32
 80052b4:	d138      	bne.n	8005328 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e032      	b.n	800532a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2224      	movs	r2, #36	; 0x24
 80052d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681a      	ldr	r2, [r3, #0]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f022 0201 	bic.w	r2, r2, #1
 80052e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	681a      	ldr	r2, [r3, #0]
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80052f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	6819      	ldr	r1, [r3, #0]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	683a      	ldr	r2, [r7, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f042 0201 	orr.w	r2, r2, #1
 8005312:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	370c      	adds	r7, #12
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr

08005336 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005336:	b480      	push	{r7}
 8005338:	b085      	sub	sp, #20
 800533a:	af00      	add	r7, sp, #0
 800533c:	6078      	str	r0, [r7, #4]
 800533e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2b20      	cmp	r3, #32
 800534a:	d139      	bne.n	80053c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8005356:	2302      	movs	r3, #2
 8005358:	e033      	b.n	80053c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2201      	movs	r2, #1
 800535e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2224      	movs	r2, #36	; 0x24
 8005366:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f022 0201 	bic.w	r2, r2, #1
 8005378:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005388:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	021b      	lsls	r3, r3, #8
 800538e:	68fa      	ldr	r2, [r7, #12]
 8005390:	4313      	orrs	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	68fa      	ldr	r2, [r7, #12]
 800539a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80053bc:	2300      	movs	r3, #0
 80053be:	e000      	b.n	80053c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80053c0:	2302      	movs	r3, #2
  }
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a04      	ldr	r2, [pc, #16]	; (80053ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80053de:	6013      	str	r3, [r2, #0]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40007000 	.word	0x40007000

080053f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80053f0:	b480      	push	{r7}
 80053f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80053f4:	4b04      	ldr	r3, [pc, #16]	; (8005408 <HAL_PWREx_GetVoltageRange+0x18>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	46bd      	mov	sp, r7
 8005400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005404:	4770      	bx	lr
 8005406:	bf00      	nop
 8005408:	40007000 	.word	0x40007000

0800540c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800541a:	d130      	bne.n	800547e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800541c:	4b23      	ldr	r3, [pc, #140]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005424:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005428:	d038      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005432:	4a1e      	ldr	r2, [pc, #120]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005434:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005438:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800543a:	4b1d      	ldr	r3, [pc, #116]	; (80054b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	2232      	movs	r2, #50	; 0x32
 8005440:	fb02 f303 	mul.w	r3, r2, r3
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	0c9b      	lsrs	r3, r3, #18
 800544c:	3301      	adds	r3, #1
 800544e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005450:	e002      	b.n	8005458 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	3b01      	subs	r3, #1
 8005456:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005458:	4b14      	ldr	r3, [pc, #80]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800545a:	695b      	ldr	r3, [r3, #20]
 800545c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005460:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005464:	d102      	bne.n	800546c <HAL_PWREx_ControlVoltageScaling+0x60>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d1f2      	bne.n	8005452 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005478:	d110      	bne.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e00f      	b.n	800549e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800547e:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800548a:	d007      	beq.n	800549c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005494:	4a05      	ldr	r2, [pc, #20]	; (80054ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005496:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800549a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40007000 	.word	0x40007000
 80054b0:	2000000c 	.word	0x2000000c
 80054b4:	431bde83 	.word	0x431bde83

080054b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b088      	sub	sp, #32
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d102      	bne.n	80054cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	f000 bc02 	b.w	8005cd0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054cc:	4b96      	ldr	r3, [pc, #600]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80054ce:	689b      	ldr	r3, [r3, #8]
 80054d0:	f003 030c 	and.w	r3, r3, #12
 80054d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054d6:	4b94      	ldr	r3, [pc, #592]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0303 	and.w	r3, r3, #3
 80054de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0310 	and.w	r3, r3, #16
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	f000 80e4 	beq.w	80056b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d007      	beq.n	8005504 <HAL_RCC_OscConfig+0x4c>
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	2b0c      	cmp	r3, #12
 80054f8:	f040 808b 	bne.w	8005612 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	2b01      	cmp	r3, #1
 8005500:	f040 8087 	bne.w	8005612 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005504:	4b88      	ldr	r3, [pc, #544]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 0302 	and.w	r3, r3, #2
 800550c:	2b00      	cmp	r3, #0
 800550e:	d005      	beq.n	800551c <HAL_RCC_OscConfig+0x64>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d101      	bne.n	800551c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e3d9      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6a1a      	ldr	r2, [r3, #32]
 8005520:	4b81      	ldr	r3, [pc, #516]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f003 0308 	and.w	r3, r3, #8
 8005528:	2b00      	cmp	r3, #0
 800552a:	d004      	beq.n	8005536 <HAL_RCC_OscConfig+0x7e>
 800552c:	4b7e      	ldr	r3, [pc, #504]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005534:	e005      	b.n	8005542 <HAL_RCC_OscConfig+0x8a>
 8005536:	4b7c      	ldr	r3, [pc, #496]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005542:	4293      	cmp	r3, r2
 8005544:	d223      	bcs.n	800558e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1b      	ldr	r3, [r3, #32]
 800554a:	4618      	mov	r0, r3
 800554c:	f000 fd8c 	bl	8006068 <RCC_SetFlashLatencyFromMSIRange>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d001      	beq.n	800555a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e3ba      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800555a:	4b73      	ldr	r3, [pc, #460]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a72      	ldr	r2, [pc, #456]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005560:	f043 0308 	orr.w	r3, r3, #8
 8005564:	6013      	str	r3, [r2, #0]
 8005566:	4b70      	ldr	r3, [pc, #448]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	496d      	ldr	r1, [pc, #436]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005574:	4313      	orrs	r3, r2
 8005576:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005578:	4b6b      	ldr	r3, [pc, #428]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	69db      	ldr	r3, [r3, #28]
 8005584:	021b      	lsls	r3, r3, #8
 8005586:	4968      	ldr	r1, [pc, #416]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005588:	4313      	orrs	r3, r2
 800558a:	604b      	str	r3, [r1, #4]
 800558c:	e025      	b.n	80055da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800558e:	4b66      	ldr	r3, [pc, #408]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a65      	ldr	r2, [pc, #404]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005594:	f043 0308 	orr.w	r3, r3, #8
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	4b63      	ldr	r3, [pc, #396]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	4960      	ldr	r1, [pc, #384]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055ac:	4b5e      	ldr	r3, [pc, #376]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	021b      	lsls	r3, r3, #8
 80055ba:	495b      	ldr	r1, [pc, #364]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055bc:	4313      	orrs	r3, r2
 80055be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80055c0:	69bb      	ldr	r3, [r7, #24]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d109      	bne.n	80055da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6a1b      	ldr	r3, [r3, #32]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 fd4c 	bl	8006068 <RCC_SetFlashLatencyFromMSIRange>
 80055d0:	4603      	mov	r3, r0
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e37a      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80055da:	f000 fc81 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 80055de:	4602      	mov	r2, r0
 80055e0:	4b51      	ldr	r3, [pc, #324]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	091b      	lsrs	r3, r3, #4
 80055e6:	f003 030f 	and.w	r3, r3, #15
 80055ea:	4950      	ldr	r1, [pc, #320]	; (800572c <HAL_RCC_OscConfig+0x274>)
 80055ec:	5ccb      	ldrb	r3, [r1, r3]
 80055ee:	f003 031f 	and.w	r3, r3, #31
 80055f2:	fa22 f303 	lsr.w	r3, r2, r3
 80055f6:	4a4e      	ldr	r2, [pc, #312]	; (8005730 <HAL_RCC_OscConfig+0x278>)
 80055f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80055fa:	4b4e      	ldr	r3, [pc, #312]	; (8005734 <HAL_RCC_OscConfig+0x27c>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4618      	mov	r0, r3
 8005600:	f7fc fc98 	bl	8001f34 <HAL_InitTick>
 8005604:	4603      	mov	r3, r0
 8005606:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005608:	7bfb      	ldrb	r3, [r7, #15]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d052      	beq.n	80056b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800560e:	7bfb      	ldrb	r3, [r7, #15]
 8005610:	e35e      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	699b      	ldr	r3, [r3, #24]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d032      	beq.n	8005680 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800561a:	4b43      	ldr	r3, [pc, #268]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a42      	ldr	r2, [pc, #264]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005620:	f043 0301 	orr.w	r3, r3, #1
 8005624:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005626:	f7fc fcd5 	bl	8001fd4 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800562e:	f7fc fcd1 	bl	8001fd4 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e347      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005640:	4b39      	ldr	r3, [pc, #228]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800564c:	4b36      	ldr	r3, [pc, #216]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4a35      	ldr	r2, [pc, #212]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005652:	f043 0308 	orr.w	r3, r3, #8
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	4b33      	ldr	r3, [pc, #204]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a1b      	ldr	r3, [r3, #32]
 8005664:	4930      	ldr	r1, [pc, #192]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800566a:	4b2f      	ldr	r3, [pc, #188]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	69db      	ldr	r3, [r3, #28]
 8005676:	021b      	lsls	r3, r3, #8
 8005678:	492b      	ldr	r1, [pc, #172]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800567a:	4313      	orrs	r3, r2
 800567c:	604b      	str	r3, [r1, #4]
 800567e:	e01a      	b.n	80056b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005680:	4b29      	ldr	r3, [pc, #164]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	4a28      	ldr	r2, [pc, #160]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005686:	f023 0301 	bic.w	r3, r3, #1
 800568a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800568c:	f7fc fca2 	bl	8001fd4 <HAL_GetTick>
 8005690:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005692:	e008      	b.n	80056a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005694:	f7fc fc9e 	bl	8001fd4 <HAL_GetTick>
 8005698:	4602      	mov	r2, r0
 800569a:	693b      	ldr	r3, [r7, #16]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	2b02      	cmp	r3, #2
 80056a0:	d901      	bls.n	80056a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80056a2:	2303      	movs	r3, #3
 80056a4:	e314      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80056a6:	4b20      	ldr	r3, [pc, #128]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0302 	and.w	r3, r3, #2
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d1f0      	bne.n	8005694 <HAL_RCC_OscConfig+0x1dc>
 80056b2:	e000      	b.n	80056b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0301 	and.w	r3, r3, #1
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d073      	beq.n	80057aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80056c2:	69bb      	ldr	r3, [r7, #24]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d005      	beq.n	80056d4 <HAL_RCC_OscConfig+0x21c>
 80056c8:	69bb      	ldr	r3, [r7, #24]
 80056ca:	2b0c      	cmp	r3, #12
 80056cc:	d10e      	bne.n	80056ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b03      	cmp	r3, #3
 80056d2:	d10b      	bne.n	80056ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056d4:	4b14      	ldr	r3, [pc, #80]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d063      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d15f      	bne.n	80057a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e2f1      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056f4:	d106      	bne.n	8005704 <HAL_RCC_OscConfig+0x24c>
 80056f6:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4a0b      	ldr	r2, [pc, #44]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 80056fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005700:	6013      	str	r3, [r2, #0]
 8005702:	e025      	b.n	8005750 <HAL_RCC_OscConfig+0x298>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800570c:	d114      	bne.n	8005738 <HAL_RCC_OscConfig+0x280>
 800570e:	4b06      	ldr	r3, [pc, #24]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4a05      	ldr	r2, [pc, #20]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005718:	6013      	str	r3, [r2, #0]
 800571a:	4b03      	ldr	r3, [pc, #12]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a02      	ldr	r2, [pc, #8]	; (8005728 <HAL_RCC_OscConfig+0x270>)
 8005720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005724:	6013      	str	r3, [r2, #0]
 8005726:	e013      	b.n	8005750 <HAL_RCC_OscConfig+0x298>
 8005728:	40021000 	.word	0x40021000
 800572c:	0800ad28 	.word	0x0800ad28
 8005730:	2000000c 	.word	0x2000000c
 8005734:	20000010 	.word	0x20000010
 8005738:	4ba0      	ldr	r3, [pc, #640]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a9f      	ldr	r2, [pc, #636]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800573e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005742:	6013      	str	r3, [r2, #0]
 8005744:	4b9d      	ldr	r3, [pc, #628]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a9c      	ldr	r2, [pc, #624]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d013      	beq.n	8005780 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005758:	f7fc fc3c 	bl	8001fd4 <HAL_GetTick>
 800575c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800575e:	e008      	b.n	8005772 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005760:	f7fc fc38 	bl	8001fd4 <HAL_GetTick>
 8005764:	4602      	mov	r2, r0
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	1ad3      	subs	r3, r2, r3
 800576a:	2b64      	cmp	r3, #100	; 0x64
 800576c:	d901      	bls.n	8005772 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800576e:	2303      	movs	r3, #3
 8005770:	e2ae      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005772:	4b92      	ldr	r3, [pc, #584]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d0f0      	beq.n	8005760 <HAL_RCC_OscConfig+0x2a8>
 800577e:	e014      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fc fc28 	bl	8001fd4 <HAL_GetTick>
 8005784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7fc fc24 	bl	8001fd4 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e29a      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800579a:	4b88      	ldr	r3, [pc, #544]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1f0      	bne.n	8005788 <HAL_RCC_OscConfig+0x2d0>
 80057a6:	e000      	b.n	80057aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0302 	and.w	r3, r3, #2
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d060      	beq.n	8005878 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80057b6:	69bb      	ldr	r3, [r7, #24]
 80057b8:	2b04      	cmp	r3, #4
 80057ba:	d005      	beq.n	80057c8 <HAL_RCC_OscConfig+0x310>
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d119      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d116      	bne.n	80057f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057c8:	4b7c      	ldr	r3, [pc, #496]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d005      	beq.n	80057e0 <HAL_RCC_OscConfig+0x328>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d101      	bne.n	80057e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80057dc:	2301      	movs	r3, #1
 80057de:	e277      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057e0:	4b76      	ldr	r3, [pc, #472]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	691b      	ldr	r3, [r3, #16]
 80057ec:	061b      	lsls	r3, r3, #24
 80057ee:	4973      	ldr	r1, [pc, #460]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80057f0:	4313      	orrs	r3, r2
 80057f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057f4:	e040      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d023      	beq.n	8005846 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80057fe:	4b6f      	ldr	r3, [pc, #444]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6e      	ldr	r2, [pc, #440]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005808:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800580a:	f7fc fbe3 	bl	8001fd4 <HAL_GetTick>
 800580e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005810:	e008      	b.n	8005824 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005812:	f7fc fbdf 	bl	8001fd4 <HAL_GetTick>
 8005816:	4602      	mov	r2, r0
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	2b02      	cmp	r3, #2
 800581e:	d901      	bls.n	8005824 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005820:	2303      	movs	r3, #3
 8005822:	e255      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005824:	4b65      	ldr	r3, [pc, #404]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800582c:	2b00      	cmp	r3, #0
 800582e:	d0f0      	beq.n	8005812 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005830:	4b62      	ldr	r3, [pc, #392]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	061b      	lsls	r3, r3, #24
 800583e:	495f      	ldr	r1, [pc, #380]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005840:	4313      	orrs	r3, r2
 8005842:	604b      	str	r3, [r1, #4]
 8005844:	e018      	b.n	8005878 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005846:	4b5d      	ldr	r3, [pc, #372]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a5c      	ldr	r2, [pc, #368]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800584c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005850:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005852:	f7fc fbbf 	bl	8001fd4 <HAL_GetTick>
 8005856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005858:	e008      	b.n	800586c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800585a:	f7fc fbbb 	bl	8001fd4 <HAL_GetTick>
 800585e:	4602      	mov	r2, r0
 8005860:	693b      	ldr	r3, [r7, #16]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	2b02      	cmp	r3, #2
 8005866:	d901      	bls.n	800586c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005868:	2303      	movs	r3, #3
 800586a:	e231      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800586c:	4b53      	ldr	r3, [pc, #332]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1f0      	bne.n	800585a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d03c      	beq.n	80058fe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01c      	beq.n	80058c6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800588c:	4b4b      	ldr	r3, [pc, #300]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800588e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005892:	4a4a      	ldr	r2, [pc, #296]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005894:	f043 0301 	orr.w	r3, r3, #1
 8005898:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800589c:	f7fc fb9a 	bl	8001fd4 <HAL_GetTick>
 80058a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058a2:	e008      	b.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058a4:	f7fc fb96 	bl	8001fd4 <HAL_GetTick>
 80058a8:	4602      	mov	r2, r0
 80058aa:	693b      	ldr	r3, [r7, #16]
 80058ac:	1ad3      	subs	r3, r2, r3
 80058ae:	2b02      	cmp	r3, #2
 80058b0:	d901      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80058b2:	2303      	movs	r3, #3
 80058b4:	e20c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80058b6:	4b41      	ldr	r3, [pc, #260]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0ef      	beq.n	80058a4 <HAL_RCC_OscConfig+0x3ec>
 80058c4:	e01b      	b.n	80058fe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80058c6:	4b3d      	ldr	r3, [pc, #244]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058cc:	4a3b      	ldr	r2, [pc, #236]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058ce:	f023 0301 	bic.w	r3, r3, #1
 80058d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058d6:	f7fc fb7d 	bl	8001fd4 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058de:	f7fc fb79 	bl	8001fd4 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e1ef      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80058f0:	4b32      	ldr	r3, [pc, #200]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80058f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80058f6:	f003 0302 	and.w	r3, r3, #2
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1ef      	bne.n	80058de <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f003 0304 	and.w	r3, r3, #4
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 80a6 	beq.w	8005a58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800590c:	2300      	movs	r3, #0
 800590e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005914:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10d      	bne.n	8005938 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800591c:	4b27      	ldr	r3, [pc, #156]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005920:	4a26      	ldr	r2, [pc, #152]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005926:	6593      	str	r3, [r2, #88]	; 0x58
 8005928:	4b24      	ldr	r3, [pc, #144]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005930:	60bb      	str	r3, [r7, #8]
 8005932:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005934:	2301      	movs	r3, #1
 8005936:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005938:	4b21      	ldr	r3, [pc, #132]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005940:	2b00      	cmp	r3, #0
 8005942:	d118      	bne.n	8005976 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005944:	4b1e      	ldr	r3, [pc, #120]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800594a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800594e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005950:	f7fc fb40 	bl	8001fd4 <HAL_GetTick>
 8005954:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005956:	e008      	b.n	800596a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005958:	f7fc fb3c 	bl	8001fd4 <HAL_GetTick>
 800595c:	4602      	mov	r2, r0
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	1ad3      	subs	r3, r2, r3
 8005962:	2b02      	cmp	r3, #2
 8005964:	d901      	bls.n	800596a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e1b2      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800596a:	4b15      	ldr	r3, [pc, #84]	; (80059c0 <HAL_RCC_OscConfig+0x508>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d0f0      	beq.n	8005958 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d108      	bne.n	8005990 <HAL_RCC_OscConfig+0x4d8>
 800597e:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 8005986:	f043 0301 	orr.w	r3, r3, #1
 800598a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800598e:	e029      	b.n	80059e4 <HAL_RCC_OscConfig+0x52c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	2b05      	cmp	r3, #5
 8005996:	d115      	bne.n	80059c4 <HAL_RCC_OscConfig+0x50c>
 8005998:	4b08      	ldr	r3, [pc, #32]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 800599a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800599e:	4a07      	ldr	r2, [pc, #28]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059a0:	f043 0304 	orr.w	r3, r3, #4
 80059a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059a8:	4b04      	ldr	r3, [pc, #16]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	4a03      	ldr	r2, [pc, #12]	; (80059bc <HAL_RCC_OscConfig+0x504>)
 80059b0:	f043 0301 	orr.w	r3, r3, #1
 80059b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059b8:	e014      	b.n	80059e4 <HAL_RCC_OscConfig+0x52c>
 80059ba:	bf00      	nop
 80059bc:	40021000 	.word	0x40021000
 80059c0:	40007000 	.word	0x40007000
 80059c4:	4b9a      	ldr	r3, [pc, #616]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 80059c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ca:	4a99      	ldr	r2, [pc, #612]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 80059cc:	f023 0301 	bic.w	r3, r3, #1
 80059d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059d4:	4b96      	ldr	r3, [pc, #600]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 80059d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059da:	4a95      	ldr	r2, [pc, #596]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 80059dc:	f023 0304 	bic.w	r3, r3, #4
 80059e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d016      	beq.n	8005a1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059ec:	f7fc faf2 	bl	8001fd4 <HAL_GetTick>
 80059f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80059f2:	e00a      	b.n	8005a0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059f4:	f7fc faee 	bl	8001fd4 <HAL_GetTick>
 80059f8:	4602      	mov	r2, r0
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d901      	bls.n	8005a0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005a06:	2303      	movs	r3, #3
 8005a08:	e162      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a0a:	4b89      	ldr	r3, [pc, #548]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a10:	f003 0302 	and.w	r3, r3, #2
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d0ed      	beq.n	80059f4 <HAL_RCC_OscConfig+0x53c>
 8005a18:	e015      	b.n	8005a46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a1a:	f7fc fadb 	bl	8001fd4 <HAL_GetTick>
 8005a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a20:	e00a      	b.n	8005a38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a22:	f7fc fad7 	bl	8001fd4 <HAL_GetTick>
 8005a26:	4602      	mov	r2, r0
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	1ad3      	subs	r3, r2, r3
 8005a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e14b      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005a38:	4b7d      	ldr	r3, [pc, #500]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a3e:	f003 0302 	and.w	r3, r3, #2
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1ed      	bne.n	8005a22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a46:	7ffb      	ldrb	r3, [r7, #31]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d105      	bne.n	8005a58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a4c:	4b78      	ldr	r3, [pc, #480]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a50:	4a77      	ldr	r2, [pc, #476]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f003 0320 	and.w	r3, r3, #32
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d03c      	beq.n	8005ade <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01c      	beq.n	8005aa6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a6c:	4b70      	ldr	r3, [pc, #448]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a72:	4a6f      	ldr	r2, [pc, #444]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a74:	f043 0301 	orr.w	r3, r3, #1
 8005a78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a7c:	f7fc faaa 	bl	8001fd4 <HAL_GetTick>
 8005a80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a82:	e008      	b.n	8005a96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005a84:	f7fc faa6 	bl	8001fd4 <HAL_GetTick>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	1ad3      	subs	r3, r2, r3
 8005a8e:	2b02      	cmp	r3, #2
 8005a90:	d901      	bls.n	8005a96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005a92:	2303      	movs	r3, #3
 8005a94:	e11c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005a96:	4b66      	ldr	r3, [pc, #408]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005a98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005a9c:	f003 0302 	and.w	r3, r3, #2
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d0ef      	beq.n	8005a84 <HAL_RCC_OscConfig+0x5cc>
 8005aa4:	e01b      	b.n	8005ade <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005aa6:	4b62      	ldr	r3, [pc, #392]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005aa8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aac:	4a60      	ldr	r2, [pc, #384]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ab6:	f7fc fa8d 	bl	8001fd4 <HAL_GetTick>
 8005aba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005abc:	e008      	b.n	8005ad0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005abe:	f7fc fa89 	bl	8001fd4 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e0ff      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005ad0:	4b57      	ldr	r3, [pc, #348]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005ad2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1ef      	bne.n	8005abe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	f000 80f3 	beq.w	8005cce <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aec:	2b02      	cmp	r3, #2
 8005aee:	f040 80c9 	bne.w	8005c84 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005af2:	4b4f      	ldr	r3, [pc, #316]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 0203 	and.w	r2, r3, #3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b02:	429a      	cmp	r2, r3
 8005b04:	d12c      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b10:	3b01      	subs	r3, #1
 8005b12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d123      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b24:	429a      	cmp	r2, r3
 8005b26:	d11b      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d113      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b38:	697b      	ldr	r3, [r7, #20]
 8005b3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b42:	085b      	lsrs	r3, r3, #1
 8005b44:	3b01      	subs	r3, #1
 8005b46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d109      	bne.n	8005b60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b56:	085b      	lsrs	r3, r3, #1
 8005b58:	3b01      	subs	r3, #1
 8005b5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d06b      	beq.n	8005c38 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b0c      	cmp	r3, #12
 8005b64:	d062      	beq.n	8005c2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005b66:	4b32      	ldr	r3, [pc, #200]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d001      	beq.n	8005b76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	e0ac      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005b76:	4b2e      	ldr	r3, [pc, #184]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a2d      	ldr	r2, [pc, #180]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005b7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005b80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005b82:	f7fc fa27 	bl	8001fd4 <HAL_GetTick>
 8005b86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b88:	e008      	b.n	8005b9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b8a:	f7fc fa23 	bl	8001fd4 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d901      	bls.n	8005b9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	e099      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b9c:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d1f0      	bne.n	8005b8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005ba8:	4b21      	ldr	r3, [pc, #132]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005baa:	68da      	ldr	r2, [r3, #12]
 8005bac:	4b21      	ldr	r3, [pc, #132]	; (8005c34 <HAL_RCC_OscConfig+0x77c>)
 8005bae:	4013      	ands	r3, r2
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005bb4:	687a      	ldr	r2, [r7, #4]
 8005bb6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005bb8:	3a01      	subs	r2, #1
 8005bba:	0112      	lsls	r2, r2, #4
 8005bbc:	4311      	orrs	r1, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005bc2:	0212      	lsls	r2, r2, #8
 8005bc4:	4311      	orrs	r1, r2
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005bca:	0852      	lsrs	r2, r2, #1
 8005bcc:	3a01      	subs	r2, #1
 8005bce:	0552      	lsls	r2, r2, #21
 8005bd0:	4311      	orrs	r1, r2
 8005bd2:	687a      	ldr	r2, [r7, #4]
 8005bd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005bd6:	0852      	lsrs	r2, r2, #1
 8005bd8:	3a01      	subs	r2, #1
 8005bda:	0652      	lsls	r2, r2, #25
 8005bdc:	4311      	orrs	r1, r2
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005be2:	06d2      	lsls	r2, r2, #27
 8005be4:	430a      	orrs	r2, r1
 8005be6:	4912      	ldr	r1, [pc, #72]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005bec:	4b10      	ldr	r3, [pc, #64]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a0f      	ldr	r2, [pc, #60]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bf2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005bf6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005bf8:	4b0d      	ldr	r3, [pc, #52]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bfa:	68db      	ldr	r3, [r3, #12]
 8005bfc:	4a0c      	ldr	r2, [pc, #48]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005bfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005c04:	f7fc f9e6 	bl	8001fd4 <HAL_GetTick>
 8005c08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c0a:	e008      	b.n	8005c1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c0c:	f7fc f9e2 	bl	8001fd4 <HAL_GetTick>
 8005c10:	4602      	mov	r2, r0
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	1ad3      	subs	r3, r2, r3
 8005c16:	2b02      	cmp	r3, #2
 8005c18:	d901      	bls.n	8005c1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005c1a:	2303      	movs	r3, #3
 8005c1c:	e058      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c1e:	4b04      	ldr	r3, [pc, #16]	; (8005c30 <HAL_RCC_OscConfig+0x778>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d0f0      	beq.n	8005c0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c2a:	e050      	b.n	8005cce <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e04f      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
 8005c30:	40021000 	.word	0x40021000
 8005c34:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c38:	4b27      	ldr	r3, [pc, #156]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d144      	bne.n	8005cce <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005c44:	4b24      	ldr	r3, [pc, #144]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a23      	ldr	r2, [pc, #140]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c4a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005c50:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	4a20      	ldr	r2, [pc, #128]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005c5a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005c5c:	f7fc f9ba 	bl	8001fd4 <HAL_GetTick>
 8005c60:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c62:	e008      	b.n	8005c76 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c64:	f7fc f9b6 	bl	8001fd4 <HAL_GetTick>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	1ad3      	subs	r3, r2, r3
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d901      	bls.n	8005c76 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8005c72:	2303      	movs	r3, #3
 8005c74:	e02c      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c76:	4b18      	ldr	r3, [pc, #96]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d0f0      	beq.n	8005c64 <HAL_RCC_OscConfig+0x7ac>
 8005c82:	e024      	b.n	8005cce <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005c84:	69bb      	ldr	r3, [r7, #24]
 8005c86:	2b0c      	cmp	r3, #12
 8005c88:	d01f      	beq.n	8005cca <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c8a:	4b13      	ldr	r3, [pc, #76]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a12      	ldr	r2, [pc, #72]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005c90:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c96:	f7fc f99d 	bl	8001fd4 <HAL_GetTick>
 8005c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c9e:	f7fc f999 	bl	8001fd4 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b02      	cmp	r3, #2
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e00f      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005cb0:	4b09      	ldr	r3, [pc, #36]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1f0      	bne.n	8005c9e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005cbc:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	4905      	ldr	r1, [pc, #20]	; (8005cd8 <HAL_RCC_OscConfig+0x820>)
 8005cc2:	4b06      	ldr	r3, [pc, #24]	; (8005cdc <HAL_RCC_OscConfig+0x824>)
 8005cc4:	4013      	ands	r3, r2
 8005cc6:	60cb      	str	r3, [r1, #12]
 8005cc8:	e001      	b.n	8005cce <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3720      	adds	r7, #32
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	feeefffc 	.word	0xfeeefffc

08005ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b084      	sub	sp, #16
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
 8005ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0e7      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005cf4:	4b75      	ldr	r3, [pc, #468]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 0307 	and.w	r3, r3, #7
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d910      	bls.n	8005d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d02:	4b72      	ldr	r3, [pc, #456]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f023 0207 	bic.w	r2, r3, #7
 8005d0a:	4970      	ldr	r1, [pc, #448]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d12:	4b6e      	ldr	r3, [pc, #440]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f003 0307 	and.w	r3, r3, #7
 8005d1a:	683a      	ldr	r2, [r7, #0]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d001      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0cf      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0302 	and.w	r3, r3, #2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d010      	beq.n	8005d52 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	689a      	ldr	r2, [r3, #8]
 8005d34:	4b66      	ldr	r3, [pc, #408]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d36:	689b      	ldr	r3, [r3, #8]
 8005d38:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005d3c:	429a      	cmp	r2, r3
 8005d3e:	d908      	bls.n	8005d52 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b63      	ldr	r3, [pc, #396]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4960      	ldr	r1, [pc, #384]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0301 	and.w	r3, r3, #1
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04c      	beq.n	8005df8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d107      	bne.n	8005d76 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005d66:	4b5a      	ldr	r3, [pc, #360]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d121      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e0a6      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	2b02      	cmp	r3, #2
 8005d7c:	d107      	bne.n	8005d8e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d7e:	4b54      	ldr	r3, [pc, #336]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d115      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	e09a      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d107      	bne.n	8005da6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005d96:	4b4e      	ldr	r3, [pc, #312]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	f003 0302 	and.w	r3, r3, #2
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d109      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005da2:	2301      	movs	r3, #1
 8005da4:	e08e      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005da6:	4b4a      	ldr	r3, [pc, #296]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d101      	bne.n	8005db6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005db2:	2301      	movs	r3, #1
 8005db4:	e086      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005db6:	4b46      	ldr	r3, [pc, #280]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f023 0203 	bic.w	r2, r3, #3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	685b      	ldr	r3, [r3, #4]
 8005dc2:	4943      	ldr	r1, [pc, #268]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005dc8:	f7fc f904 	bl	8001fd4 <HAL_GetTick>
 8005dcc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005dce:	e00a      	b.n	8005de6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005dd0:	f7fc f900 	bl	8001fd4 <HAL_GetTick>
 8005dd4:	4602      	mov	r2, r0
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d901      	bls.n	8005de6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005de2:	2303      	movs	r3, #3
 8005de4:	e06e      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005de6:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f003 020c 	and.w	r2, r3, #12
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	009b      	lsls	r3, r3, #2
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d1eb      	bne.n	8005dd0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d010      	beq.n	8005e26 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	689a      	ldr	r2, [r3, #8]
 8005e08:	4b31      	ldr	r3, [pc, #196]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d208      	bcs.n	8005e26 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005e14:	4b2e      	ldr	r3, [pc, #184]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	492b      	ldr	r1, [pc, #172]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e22:	4313      	orrs	r3, r2
 8005e24:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e26:	4b29      	ldr	r3, [pc, #164]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d210      	bcs.n	8005e56 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e34:	4b25      	ldr	r3, [pc, #148]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 0207 	bic.w	r2, r3, #7
 8005e3c:	4923      	ldr	r1, [pc, #140]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e44:	4b21      	ldr	r3, [pc, #132]	; (8005ecc <HAL_RCC_ClockConfig+0x1ec>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	683a      	ldr	r2, [r7, #0]
 8005e4e:	429a      	cmp	r2, r3
 8005e50:	d001      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005e52:	2301      	movs	r3, #1
 8005e54:	e036      	b.n	8005ec4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d008      	beq.n	8005e74 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e62:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	4918      	ldr	r1, [pc, #96]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e70:	4313      	orrs	r3, r2
 8005e72:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 0308 	and.w	r3, r3, #8
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d009      	beq.n	8005e94 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e80:	4b13      	ldr	r3, [pc, #76]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	00db      	lsls	r3, r3, #3
 8005e8e:	4910      	ldr	r1, [pc, #64]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e90:	4313      	orrs	r3, r2
 8005e92:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005e94:	f000 f824 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	4b0d      	ldr	r3, [pc, #52]	; (8005ed0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	091b      	lsrs	r3, r3, #4
 8005ea0:	f003 030f 	and.w	r3, r3, #15
 8005ea4:	490b      	ldr	r1, [pc, #44]	; (8005ed4 <HAL_RCC_ClockConfig+0x1f4>)
 8005ea6:	5ccb      	ldrb	r3, [r1, r3]
 8005ea8:	f003 031f 	and.w	r3, r3, #31
 8005eac:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb0:	4a09      	ldr	r2, [pc, #36]	; (8005ed8 <HAL_RCC_ClockConfig+0x1f8>)
 8005eb2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005eb4:	4b09      	ldr	r3, [pc, #36]	; (8005edc <HAL_RCC_ClockConfig+0x1fc>)
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4618      	mov	r0, r3
 8005eba:	f7fc f83b 	bl	8001f34 <HAL_InitTick>
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	72fb      	strb	r3, [r7, #11]

  return status;
 8005ec2:	7afb      	ldrb	r3, [r7, #11]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3710      	adds	r7, #16
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}
 8005ecc:	40022000 	.word	0x40022000
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	0800ad28 	.word	0x0800ad28
 8005ed8:	2000000c 	.word	0x2000000c
 8005edc:	20000010 	.word	0x20000010

08005ee0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b089      	sub	sp, #36	; 0x24
 8005ee4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	61fb      	str	r3, [r7, #28]
 8005eea:	2300      	movs	r3, #0
 8005eec:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eee:	4b3e      	ldr	r3, [pc, #248]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ef8:	4b3b      	ldr	r3, [pc, #236]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005efa:	68db      	ldr	r3, [r3, #12]
 8005efc:	f003 0303 	and.w	r3, r3, #3
 8005f00:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d005      	beq.n	8005f14 <HAL_RCC_GetSysClockFreq+0x34>
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2b0c      	cmp	r3, #12
 8005f0c:	d121      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d11e      	bne.n	8005f52 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005f14:	4b34      	ldr	r3, [pc, #208]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f003 0308 	and.w	r3, r3, #8
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d107      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005f20:	4b31      	ldr	r3, [pc, #196]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005f26:	0a1b      	lsrs	r3, r3, #8
 8005f28:	f003 030f 	and.w	r3, r3, #15
 8005f2c:	61fb      	str	r3, [r7, #28]
 8005f2e:	e005      	b.n	8005f3c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005f30:	4b2d      	ldr	r3, [pc, #180]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	091b      	lsrs	r3, r3, #4
 8005f36:	f003 030f 	and.w	r3, r3, #15
 8005f3a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <HAL_RCC_GetSysClockFreq+0x10c>)
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f44:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d10d      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005f50:	e00a      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005f52:	693b      	ldr	r3, [r7, #16]
 8005f54:	2b04      	cmp	r3, #4
 8005f56:	d102      	bne.n	8005f5e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f58:	4b25      	ldr	r3, [pc, #148]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f5a:	61bb      	str	r3, [r7, #24]
 8005f5c:	e004      	b.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	2b08      	cmp	r3, #8
 8005f62:	d101      	bne.n	8005f68 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f64:	4b23      	ldr	r3, [pc, #140]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f66:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005f68:	693b      	ldr	r3, [r7, #16]
 8005f6a:	2b0c      	cmp	r3, #12
 8005f6c:	d134      	bne.n	8005fd8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f003 0303 	and.w	r3, r3, #3
 8005f76:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d003      	beq.n	8005f86 <HAL_RCC_GetSysClockFreq+0xa6>
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2b03      	cmp	r3, #3
 8005f82:	d003      	beq.n	8005f8c <HAL_RCC_GetSysClockFreq+0xac>
 8005f84:	e005      	b.n	8005f92 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005f86:	4b1a      	ldr	r3, [pc, #104]	; (8005ff0 <HAL_RCC_GetSysClockFreq+0x110>)
 8005f88:	617b      	str	r3, [r7, #20]
      break;
 8005f8a:	e005      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005f8c:	4b19      	ldr	r3, [pc, #100]	; (8005ff4 <HAL_RCC_GetSysClockFreq+0x114>)
 8005f8e:	617b      	str	r3, [r7, #20]
      break;
 8005f90:	e002      	b.n	8005f98 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005f92:	69fb      	ldr	r3, [r7, #28]
 8005f94:	617b      	str	r3, [r7, #20]
      break;
 8005f96:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f98:	4b13      	ldr	r3, [pc, #76]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005f9a:	68db      	ldr	r3, [r3, #12]
 8005f9c:	091b      	lsrs	r3, r3, #4
 8005f9e:	f003 0307 	and.w	r3, r3, #7
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005fa6:	4b10      	ldr	r3, [pc, #64]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fa8:	68db      	ldr	r3, [r3, #12]
 8005faa:	0a1b      	lsrs	r3, r3, #8
 8005fac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	fb03 f202 	mul.w	r2, r3, r2
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fbe:	4b0a      	ldr	r3, [pc, #40]	; (8005fe8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	0e5b      	lsrs	r3, r3, #25
 8005fc4:	f003 0303 	and.w	r3, r3, #3
 8005fc8:	3301      	adds	r3, #1
 8005fca:	005b      	lsls	r3, r3, #1
 8005fcc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005fce:	697a      	ldr	r2, [r7, #20]
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005fd8:	69bb      	ldr	r3, [r7, #24]
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3724      	adds	r7, #36	; 0x24
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	40021000 	.word	0x40021000
 8005fec:	0800ad40 	.word	0x0800ad40
 8005ff0:	00f42400 	.word	0x00f42400
 8005ff4:	007a1200 	.word	0x007a1200

08005ff8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005ffc:	4b03      	ldr	r3, [pc, #12]	; (800600c <HAL_RCC_GetHCLKFreq+0x14>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
}
 8006000:	4618      	mov	r0, r3
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2000000c 	.word	0x2000000c

08006010 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006014:	f7ff fff0 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006018:	4602      	mov	r2, r0
 800601a:	4b06      	ldr	r3, [pc, #24]	; (8006034 <HAL_RCC_GetPCLK1Freq+0x24>)
 800601c:	689b      	ldr	r3, [r3, #8]
 800601e:	0a1b      	lsrs	r3, r3, #8
 8006020:	f003 0307 	and.w	r3, r3, #7
 8006024:	4904      	ldr	r1, [pc, #16]	; (8006038 <HAL_RCC_GetPCLK1Freq+0x28>)
 8006026:	5ccb      	ldrb	r3, [r1, r3]
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40021000 	.word	0x40021000
 8006038:	0800ad38 	.word	0x0800ad38

0800603c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006040:	f7ff ffda 	bl	8005ff8 <HAL_RCC_GetHCLKFreq>
 8006044:	4602      	mov	r2, r0
 8006046:	4b06      	ldr	r3, [pc, #24]	; (8006060 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	0adb      	lsrs	r3, r3, #11
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	4904      	ldr	r1, [pc, #16]	; (8006064 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006052:	5ccb      	ldrb	r3, [r1, r3]
 8006054:	f003 031f 	and.w	r3, r3, #31
 8006058:	fa22 f303 	lsr.w	r3, r2, r3
}
 800605c:	4618      	mov	r0, r3
 800605e:	bd80      	pop	{r7, pc}
 8006060:	40021000 	.word	0x40021000
 8006064:	0800ad38 	.word	0x0800ad38

08006068 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006074:	4b2a      	ldr	r3, [pc, #168]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800607c:	2b00      	cmp	r3, #0
 800607e:	d003      	beq.n	8006088 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006080:	f7ff f9b6 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 8006084:	6178      	str	r0, [r7, #20]
 8006086:	e014      	b.n	80060b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006088:	4b25      	ldr	r3, [pc, #148]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800608a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800608c:	4a24      	ldr	r2, [pc, #144]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800608e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006092:	6593      	str	r3, [r2, #88]	; 0x58
 8006094:	4b22      	ldr	r3, [pc, #136]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8006096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800609c:	60fb      	str	r3, [r7, #12]
 800609e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80060a0:	f7ff f9a6 	bl	80053f0 <HAL_PWREx_GetVoltageRange>
 80060a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060aa:	4a1d      	ldr	r2, [pc, #116]	; (8006120 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80060ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80060b8:	d10b      	bne.n	80060d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2b80      	cmp	r3, #128	; 0x80
 80060be:	d919      	bls.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2ba0      	cmp	r3, #160	; 0xa0
 80060c4:	d902      	bls.n	80060cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060c6:	2302      	movs	r3, #2
 80060c8:	613b      	str	r3, [r7, #16]
 80060ca:	e013      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060cc:	2301      	movs	r3, #1
 80060ce:	613b      	str	r3, [r7, #16]
 80060d0:	e010      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2b80      	cmp	r3, #128	; 0x80
 80060d6:	d902      	bls.n	80060de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80060d8:	2303      	movs	r3, #3
 80060da:	613b      	str	r3, [r7, #16]
 80060dc:	e00a      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2b80      	cmp	r3, #128	; 0x80
 80060e2:	d102      	bne.n	80060ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80060e4:	2302      	movs	r3, #2
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	e004      	b.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b70      	cmp	r3, #112	; 0x70
 80060ee:	d101      	bne.n	80060f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80060f0:	2301      	movs	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80060f4:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f023 0207 	bic.w	r2, r3, #7
 80060fc:	4909      	ldr	r1, [pc, #36]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	4313      	orrs	r3, r2
 8006102:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8006104:	4b07      	ldr	r3, [pc, #28]	; (8006124 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f003 0307 	and.w	r3, r3, #7
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	429a      	cmp	r2, r3
 8006110:	d001      	beq.n	8006116 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	40021000 	.word	0x40021000
 8006124:	40022000 	.word	0x40022000

08006128 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b086      	sub	sp, #24
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006130:	2300      	movs	r3, #0
 8006132:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006134:	2300      	movs	r3, #0
 8006136:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006140:	2b00      	cmp	r3, #0
 8006142:	d031      	beq.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006148:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800614c:	d01a      	beq.n	8006184 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800614e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8006152:	d814      	bhi.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8006154:	2b00      	cmp	r3, #0
 8006156:	d009      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006158:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800615c:	d10f      	bne.n	800617e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800615e:	4b5d      	ldr	r3, [pc, #372]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	4a5c      	ldr	r2, [pc, #368]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006164:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006168:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800616a:	e00c      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	2100      	movs	r1, #0
 8006172:	4618      	mov	r0, r3
 8006174:	f000 f9de 	bl	8006534 <RCCEx_PLLSAI1_Config>
 8006178:	4603      	mov	r3, r0
 800617a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800617c:	e003      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	74fb      	strb	r3, [r7, #19]
      break;
 8006182:	e000      	b.n	8006186 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8006184:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006186:	7cfb      	ldrb	r3, [r7, #19]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10b      	bne.n	80061a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800618c:	4b51      	ldr	r3, [pc, #324]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800618e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006192:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619a:	494e      	ldr	r1, [pc, #312]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800619c:	4313      	orrs	r3, r2
 800619e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80061a2:	e001      	b.n	80061a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061a4:	7cfb      	ldrb	r3, [r7, #19]
 80061a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 809e 	beq.w	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80061b6:	2300      	movs	r3, #0
 80061b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80061ba:	4b46      	ldr	r3, [pc, #280]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d101      	bne.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80061c6:	2301      	movs	r3, #1
 80061c8:	e000      	b.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80061ca:	2300      	movs	r3, #0
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d00d      	beq.n	80061ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061d0:	4b40      	ldr	r3, [pc, #256]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061d4:	4a3f      	ldr	r2, [pc, #252]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80061da:	6593      	str	r3, [r2, #88]	; 0x58
 80061dc:	4b3d      	ldr	r3, [pc, #244]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80061de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061e4:	60bb      	str	r3, [r7, #8]
 80061e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061e8:	2301      	movs	r3, #1
 80061ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80061ec:	4b3a      	ldr	r3, [pc, #232]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4a39      	ldr	r2, [pc, #228]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80061f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80061f8:	f7fb feec 	bl	8001fd4 <HAL_GetTick>
 80061fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80061fe:	e009      	b.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006200:	f7fb fee8 	bl	8001fd4 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d902      	bls.n	8006214 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	74fb      	strb	r3, [r7, #19]
        break;
 8006212:	e005      	b.n	8006220 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006214:	4b30      	ldr	r3, [pc, #192]	; (80062d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800621c:	2b00      	cmp	r3, #0
 800621e:	d0ef      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d15a      	bne.n	80062dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006226:	4b2b      	ldr	r3, [pc, #172]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800622c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006230:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d01e      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	429a      	cmp	r2, r3
 8006240:	d019      	beq.n	8006276 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006242:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006248:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800624e:	4b21      	ldr	r3, [pc, #132]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006254:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800625e:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006264:	4a1b      	ldr	r2, [pc, #108]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006266:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800626e:	4a19      	ldr	r2, [pc, #100]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	f003 0301 	and.w	r3, r3, #1
 800627c:	2b00      	cmp	r3, #0
 800627e:	d016      	beq.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006280:	f7fb fea8 	bl	8001fd4 <HAL_GetTick>
 8006284:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006286:	e00b      	b.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006288:	f7fb fea4 	bl	8001fd4 <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	f241 3288 	movw	r2, #5000	; 0x1388
 8006296:	4293      	cmp	r3, r2
 8006298:	d902      	bls.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	74fb      	strb	r3, [r7, #19]
            break;
 800629e:	e006      	b.n	80062ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80062a0:	4b0c      	ldr	r3, [pc, #48]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d0ec      	beq.n	8006288 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80062ae:	7cfb      	ldrb	r3, [r7, #19]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10b      	bne.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062c2:	4904      	ldr	r1, [pc, #16]	; (80062d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80062c4:	4313      	orrs	r3, r2
 80062c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80062ca:	e009      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80062cc:	7cfb      	ldrb	r3, [r7, #19]
 80062ce:	74bb      	strb	r3, [r7, #18]
 80062d0:	e006      	b.n	80062e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80062d2:	bf00      	nop
 80062d4:	40021000 	.word	0x40021000
 80062d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062dc:	7cfb      	ldrb	r3, [r7, #19]
 80062de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80062e0:	7c7b      	ldrb	r3, [r7, #17]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d105      	bne.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062e6:	4b8a      	ldr	r3, [pc, #552]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ea:	4a89      	ldr	r2, [pc, #548]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80062ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80062f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0301 	and.w	r3, r3, #1
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00a      	beq.n	8006314 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80062fe:	4b84      	ldr	r3, [pc, #528]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006304:	f023 0203 	bic.w	r2, r3, #3
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	4980      	ldr	r1, [pc, #512]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800630e:	4313      	orrs	r3, r2
 8006310:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f003 0302 	and.w	r3, r3, #2
 800631c:	2b00      	cmp	r3, #0
 800631e:	d00a      	beq.n	8006336 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006320:	4b7b      	ldr	r3, [pc, #492]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006326:	f023 020c 	bic.w	r2, r3, #12
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800632e:	4978      	ldr	r1, [pc, #480]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006330:	4313      	orrs	r3, r2
 8006332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f003 0320 	and.w	r3, r3, #32
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00a      	beq.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006342:	4b73      	ldr	r3, [pc, #460]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006344:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006348:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006350:	496f      	ldr	r1, [pc, #444]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006352:	4313      	orrs	r3, r2
 8006354:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006360:	2b00      	cmp	r3, #0
 8006362:	d00a      	beq.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006364:	4b6a      	ldr	r3, [pc, #424]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800636a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006372:	4967      	ldr	r1, [pc, #412]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006374:	4313      	orrs	r3, r2
 8006376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006382:	2b00      	cmp	r3, #0
 8006384:	d00a      	beq.n	800639c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006386:	4b62      	ldr	r3, [pc, #392]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006388:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800638c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006394:	495e      	ldr	r1, [pc, #376]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006396:	4313      	orrs	r3, r2
 8006398:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d00a      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80063a8:	4b59      	ldr	r3, [pc, #356]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	4956      	ldr	r1, [pc, #344]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063b8:	4313      	orrs	r3, r2
 80063ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80063ca:	4b51      	ldr	r3, [pc, #324]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063d8:	494d      	ldr	r1, [pc, #308]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d028      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80063ec:	4b48      	ldr	r3, [pc, #288]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063fa:	4945      	ldr	r1, [pc, #276]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80063fc:	4313      	orrs	r3, r2
 80063fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006406:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800640a:	d106      	bne.n	800641a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800640c:	4b40      	ldr	r3, [pc, #256]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	4a3f      	ldr	r2, [pc, #252]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006412:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006416:	60d3      	str	r3, [r2, #12]
 8006418:	e011      	b.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006422:	d10c      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	3304      	adds	r3, #4
 8006428:	2101      	movs	r1, #1
 800642a:	4618      	mov	r0, r3
 800642c:	f000 f882 	bl	8006534 <RCCEx_PLLSAI1_Config>
 8006430:	4603      	mov	r3, r0
 8006432:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8006434:	7cfb      	ldrb	r3, [r7, #19]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d001      	beq.n	800643e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800643a:	7cfb      	ldrb	r3, [r7, #19]
 800643c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006446:	2b00      	cmp	r3, #0
 8006448:	d028      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800644a:	4b31      	ldr	r3, [pc, #196]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006450:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006458:	492d      	ldr	r1, [pc, #180]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006464:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006468:	d106      	bne.n	8006478 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800646a:	4b29      	ldr	r3, [pc, #164]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800646c:	68db      	ldr	r3, [r3, #12]
 800646e:	4a28      	ldr	r2, [pc, #160]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006470:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006474:	60d3      	str	r3, [r2, #12]
 8006476:	e011      	b.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800647c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006480:	d10c      	bne.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	3304      	adds	r3, #4
 8006486:	2101      	movs	r1, #1
 8006488:	4618      	mov	r0, r3
 800648a:	f000 f853 	bl	8006534 <RCCEx_PLLSAI1_Config>
 800648e:	4603      	mov	r3, r0
 8006490:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006492:	7cfb      	ldrb	r3, [r7, #19]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d001      	beq.n	800649c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006498:	7cfb      	ldrb	r3, [r7, #19]
 800649a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01c      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80064a8:	4b19      	ldr	r3, [pc, #100]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b6:	4916      	ldr	r1, [pc, #88]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064b8:	4313      	orrs	r3, r2
 80064ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064c6:	d10c      	bne.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	3304      	adds	r3, #4
 80064cc:	2102      	movs	r1, #2
 80064ce:	4618      	mov	r0, r3
 80064d0:	f000 f830 	bl	8006534 <RCCEx_PLLSAI1_Config>
 80064d4:	4603      	mov	r3, r0
 80064d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d001      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80064de:	7cfb      	ldrb	r3, [r7, #19]
 80064e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d00a      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80064ee:	4b08      	ldr	r3, [pc, #32]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fc:	4904      	ldr	r1, [pc, #16]	; (8006510 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80064fe:	4313      	orrs	r3, r2
 8006500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006504:	7cbb      	ldrb	r3, [r7, #18]
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	40021000 	.word	0x40021000

08006514 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8006514:	b480      	push	{r7}
 8006516:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006518:	4b05      	ldr	r3, [pc, #20]	; (8006530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a04      	ldr	r2, [pc, #16]	; (8006530 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800651e:	f043 0304 	orr.w	r3, r3, #4
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr
 800652e:	bf00      	nop
 8006530:	40021000 	.word	0x40021000

08006534 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b084      	sub	sp, #16
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006542:	4b74      	ldr	r3, [pc, #464]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	f003 0303 	and.w	r3, r3, #3
 800654a:	2b00      	cmp	r3, #0
 800654c:	d018      	beq.n	8006580 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800654e:	4b71      	ldr	r3, [pc, #452]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006550:	68db      	ldr	r3, [r3, #12]
 8006552:	f003 0203 	and.w	r2, r3, #3
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	429a      	cmp	r2, r3
 800655c:	d10d      	bne.n	800657a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
       ||
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8006566:	4b6b      	ldr	r3, [pc, #428]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	091b      	lsrs	r3, r3, #4
 800656c:	f003 0307 	and.w	r3, r3, #7
 8006570:	1c5a      	adds	r2, r3, #1
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	685b      	ldr	r3, [r3, #4]
       ||
 8006576:	429a      	cmp	r2, r3
 8006578:	d047      	beq.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
 800657e:	e044      	b.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2b03      	cmp	r3, #3
 8006586:	d018      	beq.n	80065ba <RCCEx_PLLSAI1_Config+0x86>
 8006588:	2b03      	cmp	r3, #3
 800658a:	d825      	bhi.n	80065d8 <RCCEx_PLLSAI1_Config+0xa4>
 800658c:	2b01      	cmp	r3, #1
 800658e:	d002      	beq.n	8006596 <RCCEx_PLLSAI1_Config+0x62>
 8006590:	2b02      	cmp	r3, #2
 8006592:	d009      	beq.n	80065a8 <RCCEx_PLLSAI1_Config+0x74>
 8006594:	e020      	b.n	80065d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8006596:	4b5f      	ldr	r3, [pc, #380]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f003 0302 	and.w	r3, r3, #2
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d11d      	bne.n	80065de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a6:	e01a      	b.n	80065de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80065a8:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d116      	bne.n	80065e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80065b4:	2301      	movs	r3, #1
 80065b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065b8:	e013      	b.n	80065e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80065ba:	4b56      	ldr	r3, [pc, #344]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10f      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80065c6:	4b53      	ldr	r3, [pc, #332]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d109      	bne.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80065d6:	e006      	b.n	80065e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
      break;
 80065dc:	e004      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065de:	bf00      	nop
 80065e0:	e002      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e2:	bf00      	nop
 80065e4:	e000      	b.n	80065e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80065e6:	bf00      	nop
    }

    if(status == HAL_OK)
 80065e8:	7bfb      	ldrb	r3, [r7, #15]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10d      	bne.n	800660a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80065ee:	4b49      	ldr	r3, [pc, #292]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6819      	ldr	r1, [r3, #0]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	3b01      	subs	r3, #1
 8006600:	011b      	lsls	r3, r3, #4
 8006602:	430b      	orrs	r3, r1
 8006604:	4943      	ldr	r1, [pc, #268]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006606:	4313      	orrs	r3, r2
 8006608:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800660a:	7bfb      	ldrb	r3, [r7, #15]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d17c      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006610:	4b40      	ldr	r3, [pc, #256]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4a3f      	ldr	r2, [pc, #252]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006616:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800661a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800661c:	f7fb fcda 	bl	8001fd4 <HAL_GetTick>
 8006620:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006622:	e009      	b.n	8006638 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006624:	f7fb fcd6 	bl	8001fd4 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	2b02      	cmp	r3, #2
 8006630:	d902      	bls.n	8006638 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006632:	2303      	movs	r3, #3
 8006634:	73fb      	strb	r3, [r7, #15]
        break;
 8006636:	e005      	b.n	8006644 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006638:	4b36      	ldr	r3, [pc, #216]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006640:	2b00      	cmp	r3, #0
 8006642:	d1ef      	bne.n	8006624 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006644:	7bfb      	ldrb	r3, [r7, #15]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d15f      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d110      	bne.n	8006672 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006650:	4b30      	ldr	r3, [pc, #192]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006652:	691b      	ldr	r3, [r3, #16]
 8006654:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8006658:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	6892      	ldr	r2, [r2, #8]
 8006660:	0211      	lsls	r1, r2, #8
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	68d2      	ldr	r2, [r2, #12]
 8006666:	06d2      	lsls	r2, r2, #27
 8006668:	430a      	orrs	r2, r1
 800666a:	492a      	ldr	r1, [pc, #168]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800666c:	4313      	orrs	r3, r2
 800666e:	610b      	str	r3, [r1, #16]
 8006670:	e027      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	2b01      	cmp	r3, #1
 8006676:	d112      	bne.n	800669e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006678:	4b26      	ldr	r3, [pc, #152]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 800667a:	691b      	ldr	r3, [r3, #16]
 800667c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006680:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006684:	687a      	ldr	r2, [r7, #4]
 8006686:	6892      	ldr	r2, [r2, #8]
 8006688:	0211      	lsls	r1, r2, #8
 800668a:	687a      	ldr	r2, [r7, #4]
 800668c:	6912      	ldr	r2, [r2, #16]
 800668e:	0852      	lsrs	r2, r2, #1
 8006690:	3a01      	subs	r2, #1
 8006692:	0552      	lsls	r2, r2, #21
 8006694:	430a      	orrs	r2, r1
 8006696:	491f      	ldr	r1, [pc, #124]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006698:	4313      	orrs	r3, r2
 800669a:	610b      	str	r3, [r1, #16]
 800669c:	e011      	b.n	80066c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800669e:	4b1d      	ldr	r3, [pc, #116]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80066a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6892      	ldr	r2, [r2, #8]
 80066ae:	0211      	lsls	r1, r2, #8
 80066b0:	687a      	ldr	r2, [r7, #4]
 80066b2:	6952      	ldr	r2, [r2, #20]
 80066b4:	0852      	lsrs	r2, r2, #1
 80066b6:	3a01      	subs	r2, #1
 80066b8:	0652      	lsls	r2, r2, #25
 80066ba:	430a      	orrs	r2, r1
 80066bc:	4915      	ldr	r1, [pc, #84]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066be:	4313      	orrs	r3, r2
 80066c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80066c2:	4b14      	ldr	r3, [pc, #80]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80066cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80066ce:	f7fb fc81 	bl	8001fd4 <HAL_GetTick>
 80066d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066d4:	e009      	b.n	80066ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80066d6:	f7fb fc7d 	bl	8001fd4 <HAL_GetTick>
 80066da:	4602      	mov	r2, r0
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	1ad3      	subs	r3, r2, r3
 80066e0:	2b02      	cmp	r3, #2
 80066e2:	d902      	bls.n	80066ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80066e4:	2303      	movs	r3, #3
 80066e6:	73fb      	strb	r3, [r7, #15]
          break;
 80066e8:	e005      	b.n	80066f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80066ea:	4b0a      	ldr	r3, [pc, #40]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0ef      	beq.n	80066d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80066f6:	7bfb      	ldrb	r3, [r7, #15]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d106      	bne.n	800670a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80066fc:	4b05      	ldr	r3, [pc, #20]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 80066fe:	691a      	ldr	r2, [r3, #16]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	699b      	ldr	r3, [r3, #24]
 8006704:	4903      	ldr	r1, [pc, #12]	; (8006714 <RCCEx_PLLSAI1_Config+0x1e0>)
 8006706:	4313      	orrs	r3, r2
 8006708:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800670a:	7bfb      	ldrb	r3, [r7, #15]
}
 800670c:	4618      	mov	r0, r3
 800670e:	3710      	adds	r7, #16
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	40021000 	.word	0x40021000

08006718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b082      	sub	sp, #8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d101      	bne.n	800672a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e049      	b.n	80067be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006730:	b2db      	uxtb	r3, r3
 8006732:	2b00      	cmp	r3, #0
 8006734:	d106      	bne.n	8006744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f7fb f9b6 	bl	8001ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2202      	movs	r2, #2
 8006748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4610      	mov	r0, r2
 8006758:	f000 fb04 	bl	8006d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2201      	movs	r2, #1
 8006760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2201      	movs	r2, #1
 8006770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2201      	movs	r2, #1
 8006780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	2201      	movs	r2, #1
 80067b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2201      	movs	r2, #1
 80067b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80067bc:	2300      	movs	r3, #0
}
 80067be:	4618      	mov	r0, r3
 80067c0:	3708      	adds	r7, #8
 80067c2:	46bd      	mov	sp, r7
 80067c4:	bd80      	pop	{r7, pc}

080067c6 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80067c6:	b580      	push	{r7, lr}
 80067c8:	b082      	sub	sp, #8
 80067ca:	af00      	add	r7, sp, #0
 80067cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d101      	bne.n	80067d8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80067d4:	2301      	movs	r3, #1
 80067d6:	e049      	b.n	800686c <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d106      	bne.n	80067f2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	2200      	movs	r2, #0
 80067e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 f841 	bl	8006874 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681a      	ldr	r2, [r3, #0]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f000 faad 	bl	8006d64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2201      	movs	r2, #1
 800681e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2201      	movs	r2, #1
 8006846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2201      	movs	r2, #1
 800684e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2201      	movs	r2, #1
 8006856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2201      	movs	r2, #1
 800685e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800686a:	2300      	movs	r3, #0
}
 800686c:	4618      	mov	r0, r3
 800686e:	3708      	adds	r7, #8
 8006870:	46bd      	mov	sp, r7
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800687c:	bf00      	nop
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b084      	sub	sp, #16
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68db      	ldr	r3, [r3, #12]
 8006896:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	f003 0302 	and.w	r3, r3, #2
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d020      	beq.n	80068ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f003 0302 	and.w	r3, r3, #2
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d01b      	beq.n	80068ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f06f 0202 	mvn.w	r2, #2
 80068bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	699b      	ldr	r3, [r3, #24]
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d003      	beq.n	80068da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80068d2:	6878      	ldr	r0, [r7, #4]
 80068d4:	f000 fa27 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 80068d8:	e005      	b.n	80068e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f000 fa19 	bl	8006d12 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fa2a 	bl	8006d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2200      	movs	r2, #0
 80068ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f003 0304 	and.w	r3, r3, #4
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d020      	beq.n	8006938 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d01b      	beq.n	8006938 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f06f 0204 	mvn.w	r2, #4
 8006908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2202      	movs	r2, #2
 800690e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800691a:	2b00      	cmp	r3, #0
 800691c:	d003      	beq.n	8006926 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800691e:	6878      	ldr	r0, [r7, #4]
 8006920:	f000 fa01 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006924:	e005      	b.n	8006932 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 f9f3 	bl	8006d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fa04 	bl	8006d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006938:	68bb      	ldr	r3, [r7, #8]
 800693a:	f003 0308 	and.w	r3, r3, #8
 800693e:	2b00      	cmp	r3, #0
 8006940:	d020      	beq.n	8006984 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	f003 0308 	and.w	r3, r3, #8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d01b      	beq.n	8006984 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f06f 0208 	mvn.w	r2, #8
 8006954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2204      	movs	r2, #4
 800695a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	69db      	ldr	r3, [r3, #28]
 8006962:	f003 0303 	and.w	r3, r3, #3
 8006966:	2b00      	cmp	r3, #0
 8006968:	d003      	beq.n	8006972 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f9db 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 8006970:	e005      	b.n	800697e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f000 f9cd 	bl	8006d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f9de 	bl	8006d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	2200      	movs	r2, #0
 8006982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006984:	68bb      	ldr	r3, [r7, #8]
 8006986:	f003 0310 	and.w	r3, r3, #16
 800698a:	2b00      	cmp	r3, #0
 800698c:	d020      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b00      	cmp	r3, #0
 8006996:	d01b      	beq.n	80069d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f06f 0210 	mvn.w	r2, #16
 80069a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2208      	movs	r2, #8
 80069a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	69db      	ldr	r3, [r3, #28]
 80069ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f9b5 	bl	8006d26 <HAL_TIM_IC_CaptureCallback>
 80069bc:	e005      	b.n	80069ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80069be:	6878      	ldr	r0, [r7, #4]
 80069c0:	f000 f9a7 	bl	8006d12 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f000 f9b8 	bl	8006d3a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	f003 0301 	and.w	r3, r3, #1
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d00c      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d007      	beq.n	80069f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f06f 0201 	mvn.w	r2, #1
 80069ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f7fa fe8e 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d00c      	beq.n	8006a18 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d007      	beq.n	8006a18 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 fd92 	bl	800753c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d00c      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d007      	beq.n	8006a3c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 fd8a 	bl	8007550 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00c      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d007      	beq.n	8006a60 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f977 	bl	8006d4e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	f003 0320 	and.w	r3, r3, #32
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00c      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f06f 0220 	mvn.w	r2, #32
 8006a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 fd52 	bl	8007528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006a84:	bf00      	nop
 8006a86:	3710      	adds	r7, #16
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}

08006a8c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b086      	sub	sp, #24
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	60f8      	str	r0, [r7, #12]
 8006a94:	60b9      	str	r1, [r7, #8]
 8006a96:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d101      	bne.n	8006aaa <HAL_TIM_OC_ConfigChannel+0x1e>
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e066      	b.n	8006b78 <HAL_TIM_OC_ConfigChannel+0xec>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2b14      	cmp	r3, #20
 8006ab6:	d857      	bhi.n	8006b68 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006ab8:	a201      	add	r2, pc, #4	; (adr r2, 8006ac0 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006aba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006abe:	bf00      	nop
 8006ac0:	08006b15 	.word	0x08006b15
 8006ac4:	08006b69 	.word	0x08006b69
 8006ac8:	08006b69 	.word	0x08006b69
 8006acc:	08006b69 	.word	0x08006b69
 8006ad0:	08006b23 	.word	0x08006b23
 8006ad4:	08006b69 	.word	0x08006b69
 8006ad8:	08006b69 	.word	0x08006b69
 8006adc:	08006b69 	.word	0x08006b69
 8006ae0:	08006b31 	.word	0x08006b31
 8006ae4:	08006b69 	.word	0x08006b69
 8006ae8:	08006b69 	.word	0x08006b69
 8006aec:	08006b69 	.word	0x08006b69
 8006af0:	08006b3f 	.word	0x08006b3f
 8006af4:	08006b69 	.word	0x08006b69
 8006af8:	08006b69 	.word	0x08006b69
 8006afc:	08006b69 	.word	0x08006b69
 8006b00:	08006b4d 	.word	0x08006b4d
 8006b04:	08006b69 	.word	0x08006b69
 8006b08:	08006b69 	.word	0x08006b69
 8006b0c:	08006b69 	.word	0x08006b69
 8006b10:	08006b5b 	.word	0x08006b5b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	68b9      	ldr	r1, [r7, #8]
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f000 f986 	bl	8006e2c <TIM_OC1_SetConfig>
      break;
 8006b20:	e025      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	68b9      	ldr	r1, [r7, #8]
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 f9fb 	bl	8006f24 <TIM_OC2_SetConfig>
      break;
 8006b2e:	e01e      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	68b9      	ldr	r1, [r7, #8]
 8006b36:	4618      	mov	r0, r3
 8006b38:	f000 fa6e 	bl	8007018 <TIM_OC3_SetConfig>
      break;
 8006b3c:	e017      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68b9      	ldr	r1, [r7, #8]
 8006b44:	4618      	mov	r0, r3
 8006b46:	f000 fadf 	bl	8007108 <TIM_OC4_SetConfig>
      break;
 8006b4a:	e010      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	68b9      	ldr	r1, [r7, #8]
 8006b52:	4618      	mov	r0, r3
 8006b54:	f000 fb36 	bl	80071c4 <TIM_OC5_SetConfig>
      break;
 8006b58:	e009      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68b9      	ldr	r1, [r7, #8]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f000 fb87 	bl	8007274 <TIM_OC6_SetConfig>
      break;
 8006b66:	e002      	b.n	8006b6e <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006b68:	2301      	movs	r3, #1
 8006b6a:	75fb      	strb	r3, [r7, #23]
      break;
 8006b6c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	2200      	movs	r2, #0
 8006b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b78:	4618      	mov	r0, r3
 8006b7a:	3718      	adds	r7, #24
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b084      	sub	sp, #16
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d101      	bne.n	8006b9c <HAL_TIM_ConfigClockSource+0x1c>
 8006b98:	2302      	movs	r3, #2
 8006b9a:	e0b6      	b.n	8006d0a <HAL_TIM_ConfigClockSource+0x18a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2202      	movs	r2, #2
 8006ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006bbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bd8:	d03e      	beq.n	8006c58 <HAL_TIM_ConfigClockSource+0xd8>
 8006bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006bde:	f200 8087 	bhi.w	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006be2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be6:	f000 8086 	beq.w	8006cf6 <HAL_TIM_ConfigClockSource+0x176>
 8006bea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bee:	d87f      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006bf0:	2b70      	cmp	r3, #112	; 0x70
 8006bf2:	d01a      	beq.n	8006c2a <HAL_TIM_ConfigClockSource+0xaa>
 8006bf4:	2b70      	cmp	r3, #112	; 0x70
 8006bf6:	d87b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006bf8:	2b60      	cmp	r3, #96	; 0x60
 8006bfa:	d050      	beq.n	8006c9e <HAL_TIM_ConfigClockSource+0x11e>
 8006bfc:	2b60      	cmp	r3, #96	; 0x60
 8006bfe:	d877      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006c00:	2b50      	cmp	r3, #80	; 0x50
 8006c02:	d03c      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0xfe>
 8006c04:	2b50      	cmp	r3, #80	; 0x50
 8006c06:	d873      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d058      	beq.n	8006cbe <HAL_TIM_ConfigClockSource+0x13e>
 8006c0c:	2b40      	cmp	r3, #64	; 0x40
 8006c0e:	d86f      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006c10:	2b30      	cmp	r3, #48	; 0x30
 8006c12:	d064      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x15e>
 8006c14:	2b30      	cmp	r3, #48	; 0x30
 8006c16:	d86b      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006c18:	2b20      	cmp	r3, #32
 8006c1a:	d060      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x15e>
 8006c1c:	2b20      	cmp	r3, #32
 8006c1e:	d867      	bhi.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d05c      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x15e>
 8006c24:	2b10      	cmp	r3, #16
 8006c26:	d05a      	beq.n	8006cde <HAL_TIM_ConfigClockSource+0x15e>
 8006c28:	e062      	b.n	8006cf0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c3a:	f000 fbef 	bl	800741c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	689b      	ldr	r3, [r3, #8]
 8006c44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68ba      	ldr	r2, [r7, #8]
 8006c54:	609a      	str	r2, [r3, #8]
      break;
 8006c56:	e04f      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006c68:	f000 fbd8 	bl	800741c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	689a      	ldr	r2, [r3, #8]
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c7a:	609a      	str	r2, [r3, #8]
      break;
 8006c7c:	e03c      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006c8a:	461a      	mov	r2, r3
 8006c8c:	f000 fb4c 	bl	8007328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2150      	movs	r1, #80	; 0x50
 8006c96:	4618      	mov	r0, r3
 8006c98:	f000 fba5 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006c9c:	e02c      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ca2:	683b      	ldr	r3, [r7, #0]
 8006ca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006caa:	461a      	mov	r2, r3
 8006cac:	f000 fb6b 	bl	8007386 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2160      	movs	r1, #96	; 0x60
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f000 fb95 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006cbc:	e01c      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cca:	461a      	mov	r2, r3
 8006ccc:	f000 fb2c 	bl	8007328 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	2140      	movs	r1, #64	; 0x40
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fb85 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006cdc:	e00c      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	4610      	mov	r0, r2
 8006cea:	f000 fb7c 	bl	80073e6 <TIM_ITRx_SetConfig>
      break;
 8006cee:	e003      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	73fb      	strb	r3, [r7, #15]
      break;
 8006cf4:	e000      	b.n	8006cf8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006cf6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d08:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d12:	b480      	push	{r7}
 8006d14:	b083      	sub	sp, #12
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d1a:	bf00      	nop
 8006d1c:	370c      	adds	r7, #12
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b083      	sub	sp, #12
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d2e:	bf00      	nop
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b083      	sub	sp, #12
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006d42:	bf00      	nop
 8006d44:	370c      	adds	r7, #12
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b083      	sub	sp, #12
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006d56:	bf00      	nop
 8006d58:	370c      	adds	r7, #12
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
	...

08006d64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	4a2a      	ldr	r2, [pc, #168]	; (8006e20 <TIM_Base_SetConfig+0xbc>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d003      	beq.n	8006d84 <TIM_Base_SetConfig+0x20>
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d82:	d108      	bne.n	8006d96 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a21      	ldr	r2, [pc, #132]	; (8006e20 <TIM_Base_SetConfig+0xbc>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0x52>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0x52>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a1e      	ldr	r2, [pc, #120]	; (8006e24 <TIM_Base_SetConfig+0xc0>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0x52>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a1d      	ldr	r2, [pc, #116]	; (8006e28 <TIM_Base_SetConfig+0xc4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a0c      	ldr	r2, [pc, #48]	; (8006e20 <TIM_Base_SetConfig+0xbc>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d007      	beq.n	8006e04 <TIM_Base_SetConfig+0xa0>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a0b      	ldr	r2, [pc, #44]	; (8006e24 <TIM_Base_SetConfig+0xc0>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d003      	beq.n	8006e04 <TIM_Base_SetConfig+0xa0>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a0a      	ldr	r2, [pc, #40]	; (8006e28 <TIM_Base_SetConfig+0xc4>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d103      	bne.n	8006e0c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	615a      	str	r2, [r3, #20]
}
 8006e12:	bf00      	nop
 8006e14:	3714      	adds	r7, #20
 8006e16:	46bd      	mov	sp, r7
 8006e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1c:	4770      	bx	lr
 8006e1e:	bf00      	nop
 8006e20:	40012c00 	.word	0x40012c00
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400

08006e2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
 8006e34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6a1b      	ldr	r3, [r3, #32]
 8006e3a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6a1b      	ldr	r3, [r3, #32]
 8006e40:	f023 0201 	bic.w	r2, r3, #1
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	685b      	ldr	r3, [r3, #4]
 8006e4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	f023 0303 	bic.w	r3, r3, #3
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	68fa      	ldr	r2, [r7, #12]
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006e72:	697b      	ldr	r3, [r7, #20]
 8006e74:	f023 0302 	bic.w	r3, r3, #2
 8006e78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	697a      	ldr	r2, [r7, #20]
 8006e80:	4313      	orrs	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a24      	ldr	r2, [pc, #144]	; (8006f18 <TIM_OC1_SetConfig+0xec>)
 8006e88:	4293      	cmp	r3, r2
 8006e8a:	d007      	beq.n	8006e9c <TIM_OC1_SetConfig+0x70>
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a23      	ldr	r2, [pc, #140]	; (8006f1c <TIM_OC1_SetConfig+0xf0>)
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d003      	beq.n	8006e9c <TIM_OC1_SetConfig+0x70>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a22      	ldr	r2, [pc, #136]	; (8006f20 <TIM_OC1_SetConfig+0xf4>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d10c      	bne.n	8006eb6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f023 0308 	bic.w	r3, r3, #8
 8006ea2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	68db      	ldr	r3, [r3, #12]
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f023 0304 	bic.w	r3, r3, #4
 8006eb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <TIM_OC1_SetConfig+0xec>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d007      	beq.n	8006ece <TIM_OC1_SetConfig+0xa2>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a16      	ldr	r2, [pc, #88]	; (8006f1c <TIM_OC1_SetConfig+0xf0>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d003      	beq.n	8006ece <TIM_OC1_SetConfig+0xa2>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a15      	ldr	r2, [pc, #84]	; (8006f20 <TIM_OC1_SetConfig+0xf4>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d111      	bne.n	8006ef2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ece:	693b      	ldr	r3, [r7, #16]
 8006ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ed4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ed6:	693b      	ldr	r3, [r7, #16]
 8006ed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006edc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	695b      	ldr	r3, [r3, #20]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	4313      	orrs	r3, r2
 8006ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	699b      	ldr	r3, [r3, #24]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68fa      	ldr	r2, [r7, #12]
 8006efc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	685a      	ldr	r2, [r3, #4]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	697a      	ldr	r2, [r7, #20]
 8006f0a:	621a      	str	r2, [r3, #32]
}
 8006f0c:	bf00      	nop
 8006f0e:	371c      	adds	r7, #28
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40012c00 	.word	0x40012c00
 8006f1c:	40014000 	.word	0x40014000
 8006f20:	40014400 	.word	0x40014400

08006f24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b087      	sub	sp, #28
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a1b      	ldr	r3, [r3, #32]
 8006f32:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	6a1b      	ldr	r3, [r3, #32]
 8006f38:	f023 0210 	bic.w	r2, r3, #16
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	021b      	lsls	r3, r3, #8
 8006f66:	68fa      	ldr	r2, [r7, #12]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	f023 0320 	bic.w	r3, r3, #32
 8006f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	689b      	ldr	r3, [r3, #8]
 8006f78:	011b      	lsls	r3, r3, #4
 8006f7a:	697a      	ldr	r2, [r7, #20]
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a22      	ldr	r2, [pc, #136]	; (800700c <TIM_OC2_SetConfig+0xe8>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d10d      	bne.n	8006fa4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	68db      	ldr	r3, [r3, #12]
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006fa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	4a19      	ldr	r2, [pc, #100]	; (800700c <TIM_OC2_SetConfig+0xe8>)
 8006fa8:	4293      	cmp	r3, r2
 8006faa:	d007      	beq.n	8006fbc <TIM_OC2_SetConfig+0x98>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4a18      	ldr	r2, [pc, #96]	; (8007010 <TIM_OC2_SetConfig+0xec>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d003      	beq.n	8006fbc <TIM_OC2_SetConfig+0x98>
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	; (8007014 <TIM_OC2_SetConfig+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d113      	bne.n	8006fe4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006fc2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006fca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	009b      	lsls	r3, r3, #2
 8006fd2:	693a      	ldr	r2, [r7, #16]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	009b      	lsls	r3, r3, #2
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	4313      	orrs	r3, r2
 8006fe2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ff0:	683b      	ldr	r3, [r7, #0]
 8006ff2:	685a      	ldr	r2, [r3, #4]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	697a      	ldr	r2, [r7, #20]
 8006ffc:	621a      	str	r2, [r3, #32]
}
 8006ffe:	bf00      	nop
 8007000:	371c      	adds	r7, #28
 8007002:	46bd      	mov	sp, r7
 8007004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007008:	4770      	bx	lr
 800700a:	bf00      	nop
 800700c:	40012c00 	.word	0x40012c00
 8007010:	40014000 	.word	0x40014000
 8007014:	40014400 	.word	0x40014400

08007018 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007018:	b480      	push	{r7}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a1b      	ldr	r3, [r3, #32]
 8007026:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800704a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f023 0303 	bic.w	r3, r3, #3
 8007052:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4313      	orrs	r3, r2
 800705c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007064:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	689b      	ldr	r3, [r3, #8]
 800706a:	021b      	lsls	r3, r3, #8
 800706c:	697a      	ldr	r2, [r7, #20]
 800706e:	4313      	orrs	r3, r2
 8007070:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	4a21      	ldr	r2, [pc, #132]	; (80070fc <TIM_OC3_SetConfig+0xe4>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d10d      	bne.n	8007096 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007080:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	021b      	lsls	r3, r3, #8
 8007088:	697a      	ldr	r2, [r7, #20]
 800708a:	4313      	orrs	r3, r2
 800708c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007094:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a18      	ldr	r2, [pc, #96]	; (80070fc <TIM_OC3_SetConfig+0xe4>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d007      	beq.n	80070ae <TIM_OC3_SetConfig+0x96>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a17      	ldr	r2, [pc, #92]	; (8007100 <TIM_OC3_SetConfig+0xe8>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d003      	beq.n	80070ae <TIM_OC3_SetConfig+0x96>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a16      	ldr	r2, [pc, #88]	; (8007104 <TIM_OC3_SetConfig+0xec>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d113      	bne.n	80070d6 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80070b6:	693b      	ldr	r3, [r7, #16]
 80070b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80070bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	693a      	ldr	r2, [r7, #16]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	699b      	ldr	r3, [r3, #24]
 80070ce:	011b      	lsls	r3, r3, #4
 80070d0:	693a      	ldr	r2, [r7, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	693a      	ldr	r2, [r7, #16]
 80070da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	697a      	ldr	r2, [r7, #20]
 80070ee:	621a      	str	r2, [r3, #32]
}
 80070f0:	bf00      	nop
 80070f2:	371c      	adds	r7, #28
 80070f4:	46bd      	mov	sp, r7
 80070f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fa:	4770      	bx	lr
 80070fc:	40012c00 	.word	0x40012c00
 8007100:	40014000 	.word	0x40014000
 8007104:	40014400 	.word	0x40014400

08007108 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007108:	b480      	push	{r7}
 800710a:	b087      	sub	sp, #28
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
 8007110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a1b      	ldr	r3, [r3, #32]
 800711c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	69db      	ldr	r3, [r3, #28]
 800712e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800713a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007142:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	021b      	lsls	r3, r3, #8
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4313      	orrs	r3, r2
 800714e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007150:	693b      	ldr	r3, [r7, #16]
 8007152:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007156:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	031b      	lsls	r3, r3, #12
 800715e:	693a      	ldr	r2, [r7, #16]
 8007160:	4313      	orrs	r3, r2
 8007162:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <TIM_OC4_SetConfig+0xb0>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d007      	beq.n	800717c <TIM_OC4_SetConfig+0x74>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	4a13      	ldr	r2, [pc, #76]	; (80071bc <TIM_OC4_SetConfig+0xb4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d003      	beq.n	800717c <TIM_OC4_SetConfig+0x74>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	4a12      	ldr	r2, [pc, #72]	; (80071c0 <TIM_OC4_SetConfig+0xb8>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d109      	bne.n	8007190 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007182:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	695b      	ldr	r3, [r3, #20]
 8007188:	019b      	lsls	r3, r3, #6
 800718a:	697a      	ldr	r2, [r7, #20]
 800718c:	4313      	orrs	r3, r2
 800718e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	685a      	ldr	r2, [r3, #4]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	693a      	ldr	r2, [r7, #16]
 80071a8:	621a      	str	r2, [r3, #32]
}
 80071aa:	bf00      	nop
 80071ac:	371c      	adds	r7, #28
 80071ae:	46bd      	mov	sp, r7
 80071b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b4:	4770      	bx	lr
 80071b6:	bf00      	nop
 80071b8:	40012c00 	.word	0x40012c00
 80071bc:	40014000 	.word	0x40014000
 80071c0:	40014400 	.word	0x40014400

080071c4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
 80071cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	6a1b      	ldr	r3, [r3, #32]
 80071d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80071f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	68fa      	ldr	r2, [r7, #12]
 80071fe:	4313      	orrs	r3, r2
 8007200:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007208:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	689b      	ldr	r3, [r3, #8]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	4313      	orrs	r3, r2
 8007214:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a13      	ldr	r2, [pc, #76]	; (8007268 <TIM_OC5_SetConfig+0xa4>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_OC5_SetConfig+0x6a>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a12      	ldr	r2, [pc, #72]	; (800726c <TIM_OC5_SetConfig+0xa8>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC5_SetConfig+0x6a>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a11      	ldr	r2, [pc, #68]	; (8007270 <TIM_OC5_SetConfig+0xac>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d109      	bne.n	8007242 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007234:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	695b      	ldr	r3, [r3, #20]
 800723a:	021b      	lsls	r3, r3, #8
 800723c:	697a      	ldr	r2, [r7, #20]
 800723e:	4313      	orrs	r3, r2
 8007240:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	697a      	ldr	r2, [r7, #20]
 8007246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	685a      	ldr	r2, [r3, #4]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	621a      	str	r2, [r3, #32]
}
 800725c:	bf00      	nop
 800725e:	371c      	adds	r7, #28
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	40012c00 	.word	0x40012c00
 800726c:	40014000 	.word	0x40014000
 8007270:	40014400 	.word	0x40014400

08007274 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007274:	b480      	push	{r7}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
 800727c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6a1b      	ldr	r3, [r3, #32]
 8007288:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	685b      	ldr	r3, [r3, #4]
 8007294:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800729a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	021b      	lsls	r3, r3, #8
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	4313      	orrs	r3, r2
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80072ba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	051b      	lsls	r3, r3, #20
 80072c2:	693a      	ldr	r2, [r7, #16]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a14      	ldr	r2, [pc, #80]	; (800731c <TIM_OC6_SetConfig+0xa8>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_OC6_SetConfig+0x6c>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a13      	ldr	r2, [pc, #76]	; (8007320 <TIM_OC6_SetConfig+0xac>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC6_SetConfig+0x6c>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a12      	ldr	r2, [pc, #72]	; (8007324 <TIM_OC6_SetConfig+0xb0>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d109      	bne.n	80072f4 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80072e6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	695b      	ldr	r3, [r3, #20]
 80072ec:	029b      	lsls	r3, r3, #10
 80072ee:	697a      	ldr	r2, [r7, #20]
 80072f0:	4313      	orrs	r3, r2
 80072f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	697a      	ldr	r2, [r7, #20]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	68fa      	ldr	r2, [r7, #12]
 80072fe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	621a      	str	r2, [r3, #32]
}
 800730e:	bf00      	nop
 8007310:	371c      	adds	r7, #28
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40014000 	.word	0x40014000
 8007324:	40014400 	.word	0x40014400

08007328 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007328:	b480      	push	{r7}
 800732a:	b087      	sub	sp, #28
 800732c:	af00      	add	r7, sp, #0
 800732e:	60f8      	str	r0, [r7, #12]
 8007330:	60b9      	str	r1, [r7, #8]
 8007332:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6a1b      	ldr	r3, [r3, #32]
 8007338:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6a1b      	ldr	r3, [r3, #32]
 800733e:	f023 0201 	bic.w	r2, r3, #1
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	699b      	ldr	r3, [r3, #24]
 800734a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800734c:	693b      	ldr	r3, [r7, #16]
 800734e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007352:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	011b      	lsls	r3, r3, #4
 8007358:	693a      	ldr	r2, [r7, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	f023 030a 	bic.w	r3, r3, #10
 8007364:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007366:	697a      	ldr	r2, [r7, #20]
 8007368:	68bb      	ldr	r3, [r7, #8]
 800736a:	4313      	orrs	r3, r2
 800736c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	693a      	ldr	r2, [r7, #16]
 8007372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	697a      	ldr	r2, [r7, #20]
 8007378:	621a      	str	r2, [r3, #32]
}
 800737a:	bf00      	nop
 800737c:	371c      	adds	r7, #28
 800737e:	46bd      	mov	sp, r7
 8007380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007384:	4770      	bx	lr

08007386 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007386:	b480      	push	{r7}
 8007388:	b087      	sub	sp, #28
 800738a:	af00      	add	r7, sp, #0
 800738c:	60f8      	str	r0, [r7, #12]
 800738e:	60b9      	str	r1, [r7, #8]
 8007390:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6a1b      	ldr	r3, [r3, #32]
 8007396:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6a1b      	ldr	r3, [r3, #32]
 800739c:	f023 0210 	bic.w	r2, r3, #16
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	699b      	ldr	r3, [r3, #24]
 80073a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80073b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	031b      	lsls	r3, r3, #12
 80073b6:	693a      	ldr	r2, [r7, #16]
 80073b8:	4313      	orrs	r3, r2
 80073ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80073c2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	693a      	ldr	r2, [r7, #16]
 80073d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	621a      	str	r2, [r3, #32]
}
 80073da:	bf00      	nop
 80073dc:	371c      	adds	r7, #28
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b085      	sub	sp, #20
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80073fe:	683a      	ldr	r2, [r7, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	f043 0307 	orr.w	r3, r3, #7
 8007408:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	609a      	str	r2, [r3, #8]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	607a      	str	r2, [r7, #4]
 8007428:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	689b      	ldr	r3, [r3, #8]
 800742e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007436:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	021a      	lsls	r2, r3, #8
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	431a      	orrs	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	4313      	orrs	r3, r2
 8007444:	697a      	ldr	r2, [r7, #20]
 8007446:	4313      	orrs	r3, r2
 8007448:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	609a      	str	r2, [r3, #8]
}
 8007450:	bf00      	nop
 8007452:	371c      	adds	r7, #28
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800745c:	b480      	push	{r7}
 800745e:	b085      	sub	sp, #20
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
 8007464:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800746c:	2b01      	cmp	r3, #1
 800746e:	d101      	bne.n	8007474 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007470:	2302      	movs	r3, #2
 8007472:	e04f      	b.n	8007514 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2201      	movs	r2, #1
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2202      	movs	r2, #2
 8007480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685b      	ldr	r3, [r3, #4]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a21      	ldr	r2, [pc, #132]	; (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d108      	bne.n	80074b0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80074a4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	68fa      	ldr	r2, [r7, #12]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68fa      	ldr	r2, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a14      	ldr	r2, [pc, #80]	; (8007520 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d009      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074dc:	d004      	beq.n	80074e8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a10      	ldr	r2, [pc, #64]	; (8007524 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d10c      	bne.n	8007502 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	68ba      	ldr	r2, [r7, #8]
 80074f6:	4313      	orrs	r3, r2
 80074f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68ba      	ldr	r2, [r7, #8]
 8007500:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2200      	movs	r2, #0
 800750e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr
 8007520:	40012c00 	.word	0x40012c00
 8007524:	40014000 	.word	0x40014000

08007528 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007530:	bf00      	nop
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d101      	bne.n	8007576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e040      	b.n	80075f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800757a:	2b00      	cmp	r3, #0
 800757c:	d106      	bne.n	800758c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f7fa faea 	bl	8001b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2224      	movs	r2, #36	; 0x24
 8007590:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f022 0201 	bic.w	r2, r2, #1
 80075a0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d002      	beq.n	80075b0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fade 	bl	8007b6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f8af 	bl	8007714 <UART_SetConfig>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d101      	bne.n	80075c0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80075bc:	2301      	movs	r3, #1
 80075be:	e01b      	b.n	80075f8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80075ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689a      	ldr	r2, [r3, #8]
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681a      	ldr	r2, [r3, #0]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0201 	orr.w	r2, r2, #1
 80075ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 fb5d 	bl	8007cb0 <UART_CheckIdleState>
 80075f6:	4603      	mov	r3, r0
}
 80075f8:	4618      	mov	r0, r3
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08a      	sub	sp, #40	; 0x28
 8007604:	af02      	add	r7, sp, #8
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	603b      	str	r3, [r7, #0]
 800760c:	4613      	mov	r3, r2
 800760e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007614:	2b20      	cmp	r3, #32
 8007616:	d178      	bne.n	800770a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d002      	beq.n	8007624 <HAL_UART_Transmit+0x24>
 800761e:	88fb      	ldrh	r3, [r7, #6]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d101      	bne.n	8007628 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007624:	2301      	movs	r3, #1
 8007626:	e071      	b.n	800770c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	2200      	movs	r2, #0
 800762c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2221      	movs	r2, #33	; 0x21
 8007634:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007636:	f7fa fccd 	bl	8001fd4 <HAL_GetTick>
 800763a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	88fa      	ldrh	r2, [r7, #6]
 8007640:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	88fa      	ldrh	r2, [r7, #6]
 8007648:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007654:	d108      	bne.n	8007668 <HAL_UART_Transmit+0x68>
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d104      	bne.n	8007668 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800765e:	2300      	movs	r3, #0
 8007660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	61bb      	str	r3, [r7, #24]
 8007666:	e003      	b.n	8007670 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800766c:	2300      	movs	r3, #0
 800766e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007670:	e030      	b.n	80076d4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	2200      	movs	r2, #0
 800767a:	2180      	movs	r1, #128	; 0x80
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 fbbf 	bl	8007e00 <UART_WaitOnFlagUntilTimeout>
 8007682:	4603      	mov	r3, r0
 8007684:	2b00      	cmp	r3, #0
 8007686:	d004      	beq.n	8007692 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2220      	movs	r2, #32
 800768c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e03c      	b.n	800770c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8007692:	69fb      	ldr	r3, [r7, #28]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	881a      	ldrh	r2, [r3, #0]
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80076a4:	b292      	uxth	r2, r2
 80076a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	3302      	adds	r3, #2
 80076ac:	61bb      	str	r3, [r7, #24]
 80076ae:	e008      	b.n	80076c2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	781a      	ldrb	r2, [r3, #0]
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	b292      	uxth	r2, r2
 80076ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076bc:	69fb      	ldr	r3, [r7, #28]
 80076be:	3301      	adds	r3, #1
 80076c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	3b01      	subs	r3, #1
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80076da:	b29b      	uxth	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1c8      	bne.n	8007672 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	9300      	str	r3, [sp, #0]
 80076e4:	697b      	ldr	r3, [r7, #20]
 80076e6:	2200      	movs	r2, #0
 80076e8:	2140      	movs	r1, #64	; 0x40
 80076ea:	68f8      	ldr	r0, [r7, #12]
 80076ec:	f000 fb88 	bl	8007e00 <UART_WaitOnFlagUntilTimeout>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d004      	beq.n	8007700 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2220      	movs	r2, #32
 80076fa:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80076fc:	2303      	movs	r3, #3
 80076fe:	e005      	b.n	800770c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2220      	movs	r2, #32
 8007704:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	e000      	b.n	800770c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800770a:	2302      	movs	r3, #2
  }
}
 800770c:	4618      	mov	r0, r3
 800770e:	3720      	adds	r7, #32
 8007710:	46bd      	mov	sp, r7
 8007712:	bd80      	pop	{r7, pc}

08007714 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007714:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007718:	b08a      	sub	sp, #40	; 0x28
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800771e:	2300      	movs	r3, #0
 8007720:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	689a      	ldr	r2, [r3, #8]
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	691b      	ldr	r3, [r3, #16]
 800772c:	431a      	orrs	r2, r3
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	695b      	ldr	r3, [r3, #20]
 8007732:	431a      	orrs	r2, r3
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	69db      	ldr	r3, [r3, #28]
 8007738:	4313      	orrs	r3, r2
 800773a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	4bb4      	ldr	r3, [pc, #720]	; (8007a14 <UART_SetConfig+0x300>)
 8007744:	4013      	ands	r3, r2
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	6812      	ldr	r2, [r2, #0]
 800774a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800774c:	430b      	orrs	r3, r1
 800774e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	68da      	ldr	r2, [r3, #12]
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	430a      	orrs	r2, r1
 8007764:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	699b      	ldr	r3, [r3, #24]
 800776a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4aa9      	ldr	r2, [pc, #676]	; (8007a18 <UART_SetConfig+0x304>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d004      	beq.n	8007780 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a1b      	ldr	r3, [r3, #32]
 800777a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800777c:	4313      	orrs	r3, r2
 800777e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007790:	430a      	orrs	r2, r1
 8007792:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4aa0      	ldr	r2, [pc, #640]	; (8007a1c <UART_SetConfig+0x308>)
 800779a:	4293      	cmp	r3, r2
 800779c:	d126      	bne.n	80077ec <UART_SetConfig+0xd8>
 800779e:	4ba0      	ldr	r3, [pc, #640]	; (8007a20 <UART_SetConfig+0x30c>)
 80077a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a4:	f003 0303 	and.w	r3, r3, #3
 80077a8:	2b03      	cmp	r3, #3
 80077aa:	d81b      	bhi.n	80077e4 <UART_SetConfig+0xd0>
 80077ac:	a201      	add	r2, pc, #4	; (adr r2, 80077b4 <UART_SetConfig+0xa0>)
 80077ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b2:	bf00      	nop
 80077b4:	080077c5 	.word	0x080077c5
 80077b8:	080077d5 	.word	0x080077d5
 80077bc:	080077cd 	.word	0x080077cd
 80077c0:	080077dd 	.word	0x080077dd
 80077c4:	2301      	movs	r3, #1
 80077c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ca:	e080      	b.n	80078ce <UART_SetConfig+0x1ba>
 80077cc:	2302      	movs	r3, #2
 80077ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d2:	e07c      	b.n	80078ce <UART_SetConfig+0x1ba>
 80077d4:	2304      	movs	r3, #4
 80077d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077da:	e078      	b.n	80078ce <UART_SetConfig+0x1ba>
 80077dc:	2308      	movs	r3, #8
 80077de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077e2:	e074      	b.n	80078ce <UART_SetConfig+0x1ba>
 80077e4:	2310      	movs	r3, #16
 80077e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077ea:	e070      	b.n	80078ce <UART_SetConfig+0x1ba>
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a8c      	ldr	r2, [pc, #560]	; (8007a24 <UART_SetConfig+0x310>)
 80077f2:	4293      	cmp	r3, r2
 80077f4:	d138      	bne.n	8007868 <UART_SetConfig+0x154>
 80077f6:	4b8a      	ldr	r3, [pc, #552]	; (8007a20 <UART_SetConfig+0x30c>)
 80077f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077fc:	f003 030c 	and.w	r3, r3, #12
 8007800:	2b0c      	cmp	r3, #12
 8007802:	d82d      	bhi.n	8007860 <UART_SetConfig+0x14c>
 8007804:	a201      	add	r2, pc, #4	; (adr r2, 800780c <UART_SetConfig+0xf8>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	08007841 	.word	0x08007841
 8007810:	08007861 	.word	0x08007861
 8007814:	08007861 	.word	0x08007861
 8007818:	08007861 	.word	0x08007861
 800781c:	08007851 	.word	0x08007851
 8007820:	08007861 	.word	0x08007861
 8007824:	08007861 	.word	0x08007861
 8007828:	08007861 	.word	0x08007861
 800782c:	08007849 	.word	0x08007849
 8007830:	08007861 	.word	0x08007861
 8007834:	08007861 	.word	0x08007861
 8007838:	08007861 	.word	0x08007861
 800783c:	08007859 	.word	0x08007859
 8007840:	2300      	movs	r3, #0
 8007842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007846:	e042      	b.n	80078ce <UART_SetConfig+0x1ba>
 8007848:	2302      	movs	r3, #2
 800784a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800784e:	e03e      	b.n	80078ce <UART_SetConfig+0x1ba>
 8007850:	2304      	movs	r3, #4
 8007852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007856:	e03a      	b.n	80078ce <UART_SetConfig+0x1ba>
 8007858:	2308      	movs	r3, #8
 800785a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800785e:	e036      	b.n	80078ce <UART_SetConfig+0x1ba>
 8007860:	2310      	movs	r3, #16
 8007862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007866:	e032      	b.n	80078ce <UART_SetConfig+0x1ba>
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a6a      	ldr	r2, [pc, #424]	; (8007a18 <UART_SetConfig+0x304>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d12a      	bne.n	80078c8 <UART_SetConfig+0x1b4>
 8007872:	4b6b      	ldr	r3, [pc, #428]	; (8007a20 <UART_SetConfig+0x30c>)
 8007874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007878:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800787c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007880:	d01a      	beq.n	80078b8 <UART_SetConfig+0x1a4>
 8007882:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007886:	d81b      	bhi.n	80078c0 <UART_SetConfig+0x1ac>
 8007888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800788c:	d00c      	beq.n	80078a8 <UART_SetConfig+0x194>
 800788e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007892:	d815      	bhi.n	80078c0 <UART_SetConfig+0x1ac>
 8007894:	2b00      	cmp	r3, #0
 8007896:	d003      	beq.n	80078a0 <UART_SetConfig+0x18c>
 8007898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800789c:	d008      	beq.n	80078b0 <UART_SetConfig+0x19c>
 800789e:	e00f      	b.n	80078c0 <UART_SetConfig+0x1ac>
 80078a0:	2300      	movs	r3, #0
 80078a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078a6:	e012      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078a8:	2302      	movs	r3, #2
 80078aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ae:	e00e      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078b0:	2304      	movs	r3, #4
 80078b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078b6:	e00a      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078b8:	2308      	movs	r3, #8
 80078ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078be:	e006      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078c0:	2310      	movs	r3, #16
 80078c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078c6:	e002      	b.n	80078ce <UART_SetConfig+0x1ba>
 80078c8:	2310      	movs	r3, #16
 80078ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a51      	ldr	r2, [pc, #324]	; (8007a18 <UART_SetConfig+0x304>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d17a      	bne.n	80079ce <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80078dc:	2b08      	cmp	r3, #8
 80078de:	d824      	bhi.n	800792a <UART_SetConfig+0x216>
 80078e0:	a201      	add	r2, pc, #4	; (adr r2, 80078e8 <UART_SetConfig+0x1d4>)
 80078e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078e6:	bf00      	nop
 80078e8:	0800790d 	.word	0x0800790d
 80078ec:	0800792b 	.word	0x0800792b
 80078f0:	08007915 	.word	0x08007915
 80078f4:	0800792b 	.word	0x0800792b
 80078f8:	0800791b 	.word	0x0800791b
 80078fc:	0800792b 	.word	0x0800792b
 8007900:	0800792b 	.word	0x0800792b
 8007904:	0800792b 	.word	0x0800792b
 8007908:	08007923 	.word	0x08007923
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800790c:	f7fe fb80 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8007910:	61f8      	str	r0, [r7, #28]
        break;
 8007912:	e010      	b.n	8007936 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007914:	4b44      	ldr	r3, [pc, #272]	; (8007a28 <UART_SetConfig+0x314>)
 8007916:	61fb      	str	r3, [r7, #28]
        break;
 8007918:	e00d      	b.n	8007936 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800791a:	f7fe fae1 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 800791e:	61f8      	str	r0, [r7, #28]
        break;
 8007920:	e009      	b.n	8007936 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007922:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007926:	61fb      	str	r3, [r7, #28]
        break;
 8007928:	e005      	b.n	8007936 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800792a:	2300      	movs	r3, #0
 800792c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007934:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	f000 8107 	beq.w	8007b4c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	685a      	ldr	r2, [r3, #4]
 8007942:	4613      	mov	r3, r2
 8007944:	005b      	lsls	r3, r3, #1
 8007946:	4413      	add	r3, r2
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	429a      	cmp	r2, r3
 800794c:	d305      	bcc.n	800795a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007954:	69fa      	ldr	r2, [r7, #28]
 8007956:	429a      	cmp	r2, r3
 8007958:	d903      	bls.n	8007962 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007960:	e0f4      	b.n	8007b4c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007962:	69fb      	ldr	r3, [r7, #28]
 8007964:	2200      	movs	r2, #0
 8007966:	461c      	mov	r4, r3
 8007968:	4615      	mov	r5, r2
 800796a:	f04f 0200 	mov.w	r2, #0
 800796e:	f04f 0300 	mov.w	r3, #0
 8007972:	022b      	lsls	r3, r5, #8
 8007974:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007978:	0222      	lsls	r2, r4, #8
 800797a:	68f9      	ldr	r1, [r7, #12]
 800797c:	6849      	ldr	r1, [r1, #4]
 800797e:	0849      	lsrs	r1, r1, #1
 8007980:	2000      	movs	r0, #0
 8007982:	4688      	mov	r8, r1
 8007984:	4681      	mov	r9, r0
 8007986:	eb12 0a08 	adds.w	sl, r2, r8
 800798a:	eb43 0b09 	adc.w	fp, r3, r9
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	2200      	movs	r2, #0
 8007994:	603b      	str	r3, [r7, #0]
 8007996:	607a      	str	r2, [r7, #4]
 8007998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800799c:	4650      	mov	r0, sl
 800799e:	4659      	mov	r1, fp
 80079a0:	f7f9 f902 	bl	8000ba8 <__aeabi_uldivmod>
 80079a4:	4602      	mov	r2, r0
 80079a6:	460b      	mov	r3, r1
 80079a8:	4613      	mov	r3, r2
 80079aa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079ac:	69bb      	ldr	r3, [r7, #24]
 80079ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079b2:	d308      	bcc.n	80079c6 <UART_SetConfig+0x2b2>
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079ba:	d204      	bcs.n	80079c6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	60da      	str	r2, [r3, #12]
 80079c4:	e0c2      	b.n	8007b4c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079cc:	e0be      	b.n	8007b4c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079d6:	d16a      	bne.n	8007aae <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80079d8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80079dc:	2b08      	cmp	r3, #8
 80079de:	d834      	bhi.n	8007a4a <UART_SetConfig+0x336>
 80079e0:	a201      	add	r2, pc, #4	; (adr r2, 80079e8 <UART_SetConfig+0x2d4>)
 80079e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079e6:	bf00      	nop
 80079e8:	08007a0d 	.word	0x08007a0d
 80079ec:	08007a2d 	.word	0x08007a2d
 80079f0:	08007a35 	.word	0x08007a35
 80079f4:	08007a4b 	.word	0x08007a4b
 80079f8:	08007a3b 	.word	0x08007a3b
 80079fc:	08007a4b 	.word	0x08007a4b
 8007a00:	08007a4b 	.word	0x08007a4b
 8007a04:	08007a4b 	.word	0x08007a4b
 8007a08:	08007a43 	.word	0x08007a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a0c:	f7fe fb00 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8007a10:	61f8      	str	r0, [r7, #28]
        break;
 8007a12:	e020      	b.n	8007a56 <UART_SetConfig+0x342>
 8007a14:	efff69f3 	.word	0xefff69f3
 8007a18:	40008000 	.word	0x40008000
 8007a1c:	40013800 	.word	0x40013800
 8007a20:	40021000 	.word	0x40021000
 8007a24:	40004400 	.word	0x40004400
 8007a28:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a2c:	f7fe fb06 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8007a30:	61f8      	str	r0, [r7, #28]
        break;
 8007a32:	e010      	b.n	8007a56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a34:	4b4c      	ldr	r3, [pc, #304]	; (8007b68 <UART_SetConfig+0x454>)
 8007a36:	61fb      	str	r3, [r7, #28]
        break;
 8007a38:	e00d      	b.n	8007a56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a3a:	f7fe fa51 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8007a3e:	61f8      	str	r0, [r7, #28]
        break;
 8007a40:	e009      	b.n	8007a56 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a46:	61fb      	str	r3, [r7, #28]
        break;
 8007a48:	e005      	b.n	8007a56 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d077      	beq.n	8007b4c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a5c:	69fb      	ldr	r3, [r7, #28]
 8007a5e:	005a      	lsls	r2, r3, #1
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	085b      	lsrs	r3, r3, #1
 8007a66:	441a      	add	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a72:	69bb      	ldr	r3, [r7, #24]
 8007a74:	2b0f      	cmp	r3, #15
 8007a76:	d916      	bls.n	8007aa6 <UART_SetConfig+0x392>
 8007a78:	69bb      	ldr	r3, [r7, #24]
 8007a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7e:	d212      	bcs.n	8007aa6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a80:	69bb      	ldr	r3, [r7, #24]
 8007a82:	b29b      	uxth	r3, r3
 8007a84:	f023 030f 	bic.w	r3, r3, #15
 8007a88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a8a:	69bb      	ldr	r3, [r7, #24]
 8007a8c:	085b      	lsrs	r3, r3, #1
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	f003 0307 	and.w	r3, r3, #7
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	8afb      	ldrh	r3, [r7, #22]
 8007a98:	4313      	orrs	r3, r2
 8007a9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	8afa      	ldrh	r2, [r7, #22]
 8007aa2:	60da      	str	r2, [r3, #12]
 8007aa4:	e052      	b.n	8007b4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007aac:	e04e      	b.n	8007b4c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d827      	bhi.n	8007b06 <UART_SetConfig+0x3f2>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0x3a8>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	08007b07 	.word	0x08007b07
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	08007b07 	.word	0x08007b07
 8007ad4:	08007b07 	.word	0x08007b07
 8007ad8:	08007b07 	.word	0x08007b07
 8007adc:	08007aff 	.word	0x08007aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fe fa96 	bl	8006010 <HAL_RCC_GetPCLK1Freq>
 8007ae4:	61f8      	str	r0, [r7, #28]
        break;
 8007ae6:	e014      	b.n	8007b12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe faa8 	bl	800603c <HAL_RCC_GetPCLK2Freq>
 8007aec:	61f8      	str	r0, [r7, #28]
        break;
 8007aee:	e010      	b.n	8007b12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b1d      	ldr	r3, [pc, #116]	; (8007b68 <UART_SetConfig+0x454>)
 8007af2:	61fb      	str	r3, [r7, #28]
        break;
 8007af4:	e00d      	b.n	8007b12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af6:	f7fe f9f3 	bl	8005ee0 <HAL_RCC_GetSysClockFreq>
 8007afa:	61f8      	str	r0, [r7, #28]
        break;
 8007afc:	e009      	b.n	8007b12 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b02:	61fb      	str	r3, [r7, #28]
        break;
 8007b04:	e005      	b.n	8007b12 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b10:	bf00      	nop
    }

    if (pclk != 0U)
 8007b12:	69fb      	ldr	r3, [r7, #28]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d019      	beq.n	8007b4c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	085a      	lsrs	r2, r3, #1
 8007b1e:	69fb      	ldr	r3, [r7, #28]
 8007b20:	441a      	add	r2, r3
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b0f      	cmp	r3, #15
 8007b30:	d909      	bls.n	8007b46 <UART_SetConfig+0x432>
 8007b32:	69bb      	ldr	r3, [r7, #24]
 8007b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b38:	d205      	bcs.n	8007b46 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b3a:	69bb      	ldr	r3, [r7, #24]
 8007b3c:	b29a      	uxth	r2, r3
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	e002      	b.n	8007b4c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8007b46:	2301      	movs	r3, #1
 8007b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	2200      	movs	r2, #0
 8007b56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	3728      	adds	r7, #40	; 0x28
 8007b60:	46bd      	mov	sp, r7
 8007b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b66:	bf00      	nop
 8007b68:	00f42400 	.word	0x00f42400

08007b6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b6c:	b480      	push	{r7}
 8007b6e:	b083      	sub	sp, #12
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d00a      	beq.n	8007b96 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	430a      	orrs	r2, r1
 8007b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9a:	f003 0301 	and.w	r3, r3, #1
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00a      	beq.n	8007bb8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	430a      	orrs	r2, r1
 8007bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	f003 0302 	and.w	r3, r3, #2
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d00a      	beq.n	8007bda <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bde:	f003 0304 	and.w	r3, r3, #4
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00a      	beq.n	8007bfc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	685b      	ldr	r3, [r3, #4]
 8007bec:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	430a      	orrs	r2, r1
 8007bfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c00:	f003 0310 	and.w	r3, r3, #16
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00a      	beq.n	8007c1e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	689b      	ldr	r3, [r3, #8]
 8007c30:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d01a      	beq.n	8007c82 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	430a      	orrs	r2, r1
 8007c60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c6a:	d10a      	bne.n	8007c82 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	430a      	orrs	r2, r1
 8007c80:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	430a      	orrs	r2, r1
 8007ca2:	605a      	str	r2, [r3, #4]
  }
}
 8007ca4:	bf00      	nop
 8007ca6:	370c      	adds	r7, #12
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr

08007cb0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b098      	sub	sp, #96	; 0x60
 8007cb4:	af02      	add	r7, sp, #8
 8007cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cc0:	f7fa f988 	bl	8001fd4 <HAL_GetTick>
 8007cc4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f003 0308 	and.w	r3, r3, #8
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d12e      	bne.n	8007d32 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd8:	9300      	str	r3, [sp, #0]
 8007cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007cdc:	2200      	movs	r2, #0
 8007cde:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 f88c 	bl	8007e00 <UART_WaitOnFlagUntilTimeout>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d021      	beq.n	8007d32 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf6:	e853 3f00 	ldrex	r3, [r3]
 8007cfa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d02:	653b      	str	r3, [r7, #80]	; 0x50
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	461a      	mov	r2, r3
 8007d0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007d0e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d10:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d12:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d14:	e841 2300 	strex	r3, r2, [r1]
 8007d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d1e6      	bne.n	8007cee <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	2220      	movs	r2, #32
 8007d24:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e062      	b.n	8007df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b04      	cmp	r3, #4
 8007d3e:	d149      	bne.n	8007dd4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d4e:	6878      	ldr	r0, [r7, #4]
 8007d50:	f000 f856 	bl	8007e00 <UART_WaitOnFlagUntilTimeout>
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d03c      	beq.n	8007dd4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	e853 3f00 	ldrex	r3, [r3]
 8007d66:	623b      	str	r3, [r7, #32]
   return(result);
 8007d68:	6a3b      	ldr	r3, [r7, #32]
 8007d6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	461a      	mov	r2, r3
 8007d76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d78:	633b      	str	r3, [r7, #48]	; 0x30
 8007d7a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d80:	e841 2300 	strex	r3, r2, [r1]
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d1e6      	bne.n	8007d5a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	3308      	adds	r3, #8
 8007d92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	e853 3f00 	ldrex	r3, [r3]
 8007d9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0301 	bic.w	r3, r3, #1
 8007da2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dac:	61fa      	str	r2, [r7, #28]
 8007dae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db0:	69b9      	ldr	r1, [r7, #24]
 8007db2:	69fa      	ldr	r2, [r7, #28]
 8007db4:	e841 2300 	strex	r3, r2, [r1]
 8007db8:	617b      	str	r3, [r7, #20]
   return(result);
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1e5      	bne.n	8007d8c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2220      	movs	r2, #32
 8007dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007dd0:	2303      	movs	r3, #3
 8007dd2:	e011      	b.n	8007df8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2220      	movs	r2, #32
 8007dd8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	2220      	movs	r2, #32
 8007dde:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2200      	movs	r2, #0
 8007de6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2200      	movs	r2, #0
 8007dec:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3758      	adds	r7, #88	; 0x58
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	603b      	str	r3, [r7, #0]
 8007e0c:	4613      	mov	r3, r2
 8007e0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e10:	e049      	b.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e12:	69bb      	ldr	r3, [r7, #24]
 8007e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e18:	d045      	beq.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e1a:	f7fa f8db 	bl	8001fd4 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	69ba      	ldr	r2, [r7, #24]
 8007e26:	429a      	cmp	r2, r3
 8007e28:	d302      	bcc.n	8007e30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d101      	bne.n	8007e34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e30:	2303      	movs	r3, #3
 8007e32:	e048      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f003 0304 	and.w	r3, r3, #4
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d031      	beq.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f003 0308 	and.w	r3, r3, #8
 8007e4c:	2b08      	cmp	r3, #8
 8007e4e:	d110      	bne.n	8007e72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	2208      	movs	r2, #8
 8007e56:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e58:	68f8      	ldr	r0, [r7, #12]
 8007e5a:	f000 f838 	bl	8007ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2208      	movs	r2, #8
 8007e62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007e6e:	2301      	movs	r3, #1
 8007e70:	e029      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e80:	d111      	bne.n	8007ea6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f000 f81e 	bl	8007ece <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2220      	movs	r2, #32
 8007e96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e00f      	b.n	8007ec6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	69da      	ldr	r2, [r3, #28]
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	4013      	ands	r3, r2
 8007eb0:	68ba      	ldr	r2, [r7, #8]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	bf0c      	ite	eq
 8007eb6:	2301      	moveq	r3, #1
 8007eb8:	2300      	movne	r3, #0
 8007eba:	b2db      	uxtb	r3, r3
 8007ebc:	461a      	mov	r2, r3
 8007ebe:	79fb      	ldrb	r3, [r7, #7]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d0a6      	beq.n	8007e12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ec4:	2300      	movs	r3, #0
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3710      	adds	r7, #16
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	bd80      	pop	{r7, pc}

08007ece <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ece:	b480      	push	{r7}
 8007ed0:	b095      	sub	sp, #84	; 0x54
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007edc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ede:	e853 3f00 	ldrex	r3, [r3]
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ef4:	643b      	str	r3, [r7, #64]	; 0x40
 8007ef6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007efa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e6      	bne.n	8007ed6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	3308      	adds	r3, #8
 8007f0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f10:	6a3b      	ldr	r3, [r7, #32]
 8007f12:	e853 3f00 	ldrex	r3, [r3]
 8007f16:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	f023 0301 	bic.w	r3, r3, #1
 8007f1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	3308      	adds	r3, #8
 8007f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f30:	e841 2300 	strex	r3, r2, [r1]
 8007f34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d1e5      	bne.n	8007f08 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f40:	2b01      	cmp	r3, #1
 8007f42:	d118      	bne.n	8007f76 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	e853 3f00 	ldrex	r3, [r3]
 8007f50:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	f023 0310 	bic.w	r3, r3, #16
 8007f58:	647b      	str	r3, [r7, #68]	; 0x44
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	461a      	mov	r2, r3
 8007f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f62:	61bb      	str	r3, [r7, #24]
 8007f64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f66:	6979      	ldr	r1, [r7, #20]
 8007f68:	69ba      	ldr	r2, [r7, #24]
 8007f6a:	e841 2300 	strex	r3, r2, [r1]
 8007f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1e6      	bne.n	8007f44 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	2220      	movs	r2, #32
 8007f7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	2200      	movs	r2, #0
 8007f82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2200      	movs	r2, #0
 8007f88:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007f8a:	bf00      	nop
 8007f8c:	3754      	adds	r7, #84	; 0x54
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f94:	4770      	bx	lr

08007f96 <__cvt>:
 8007f96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f9a:	ec55 4b10 	vmov	r4, r5, d0
 8007f9e:	2d00      	cmp	r5, #0
 8007fa0:	460e      	mov	r6, r1
 8007fa2:	4619      	mov	r1, r3
 8007fa4:	462b      	mov	r3, r5
 8007fa6:	bfbb      	ittet	lt
 8007fa8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007fac:	461d      	movlt	r5, r3
 8007fae:	2300      	movge	r3, #0
 8007fb0:	232d      	movlt	r3, #45	; 0x2d
 8007fb2:	700b      	strb	r3, [r1, #0]
 8007fb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007fb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007fba:	4691      	mov	r9, r2
 8007fbc:	f023 0820 	bic.w	r8, r3, #32
 8007fc0:	bfbc      	itt	lt
 8007fc2:	4622      	movlt	r2, r4
 8007fc4:	4614      	movlt	r4, r2
 8007fc6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007fca:	d005      	beq.n	8007fd8 <__cvt+0x42>
 8007fcc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007fd0:	d100      	bne.n	8007fd4 <__cvt+0x3e>
 8007fd2:	3601      	adds	r6, #1
 8007fd4:	2102      	movs	r1, #2
 8007fd6:	e000      	b.n	8007fda <__cvt+0x44>
 8007fd8:	2103      	movs	r1, #3
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9301      	str	r3, [sp, #4]
 8007fde:	ab02      	add	r3, sp, #8
 8007fe0:	9300      	str	r3, [sp, #0]
 8007fe2:	ec45 4b10 	vmov	d0, r4, r5
 8007fe6:	4653      	mov	r3, sl
 8007fe8:	4632      	mov	r2, r6
 8007fea:	f000 fe69 	bl	8008cc0 <_dtoa_r>
 8007fee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ff2:	4607      	mov	r7, r0
 8007ff4:	d102      	bne.n	8007ffc <__cvt+0x66>
 8007ff6:	f019 0f01 	tst.w	r9, #1
 8007ffa:	d022      	beq.n	8008042 <__cvt+0xac>
 8007ffc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008000:	eb07 0906 	add.w	r9, r7, r6
 8008004:	d110      	bne.n	8008028 <__cvt+0x92>
 8008006:	783b      	ldrb	r3, [r7, #0]
 8008008:	2b30      	cmp	r3, #48	; 0x30
 800800a:	d10a      	bne.n	8008022 <__cvt+0x8c>
 800800c:	2200      	movs	r2, #0
 800800e:	2300      	movs	r3, #0
 8008010:	4620      	mov	r0, r4
 8008012:	4629      	mov	r1, r5
 8008014:	f7f8 fd58 	bl	8000ac8 <__aeabi_dcmpeq>
 8008018:	b918      	cbnz	r0, 8008022 <__cvt+0x8c>
 800801a:	f1c6 0601 	rsb	r6, r6, #1
 800801e:	f8ca 6000 	str.w	r6, [sl]
 8008022:	f8da 3000 	ldr.w	r3, [sl]
 8008026:	4499      	add	r9, r3
 8008028:	2200      	movs	r2, #0
 800802a:	2300      	movs	r3, #0
 800802c:	4620      	mov	r0, r4
 800802e:	4629      	mov	r1, r5
 8008030:	f7f8 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8008034:	b108      	cbz	r0, 800803a <__cvt+0xa4>
 8008036:	f8cd 900c 	str.w	r9, [sp, #12]
 800803a:	2230      	movs	r2, #48	; 0x30
 800803c:	9b03      	ldr	r3, [sp, #12]
 800803e:	454b      	cmp	r3, r9
 8008040:	d307      	bcc.n	8008052 <__cvt+0xbc>
 8008042:	9b03      	ldr	r3, [sp, #12]
 8008044:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008046:	1bdb      	subs	r3, r3, r7
 8008048:	4638      	mov	r0, r7
 800804a:	6013      	str	r3, [r2, #0]
 800804c:	b004      	add	sp, #16
 800804e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008052:	1c59      	adds	r1, r3, #1
 8008054:	9103      	str	r1, [sp, #12]
 8008056:	701a      	strb	r2, [r3, #0]
 8008058:	e7f0      	b.n	800803c <__cvt+0xa6>

0800805a <__exponent>:
 800805a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800805c:	4603      	mov	r3, r0
 800805e:	2900      	cmp	r1, #0
 8008060:	bfb8      	it	lt
 8008062:	4249      	neglt	r1, r1
 8008064:	f803 2b02 	strb.w	r2, [r3], #2
 8008068:	bfb4      	ite	lt
 800806a:	222d      	movlt	r2, #45	; 0x2d
 800806c:	222b      	movge	r2, #43	; 0x2b
 800806e:	2909      	cmp	r1, #9
 8008070:	7042      	strb	r2, [r0, #1]
 8008072:	dd2a      	ble.n	80080ca <__exponent+0x70>
 8008074:	f10d 0207 	add.w	r2, sp, #7
 8008078:	4617      	mov	r7, r2
 800807a:	260a      	movs	r6, #10
 800807c:	4694      	mov	ip, r2
 800807e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008082:	fb06 1415 	mls	r4, r6, r5, r1
 8008086:	3430      	adds	r4, #48	; 0x30
 8008088:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800808c:	460c      	mov	r4, r1
 800808e:	2c63      	cmp	r4, #99	; 0x63
 8008090:	f102 32ff 	add.w	r2, r2, #4294967295
 8008094:	4629      	mov	r1, r5
 8008096:	dcf1      	bgt.n	800807c <__exponent+0x22>
 8008098:	3130      	adds	r1, #48	; 0x30
 800809a:	f1ac 0402 	sub.w	r4, ip, #2
 800809e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80080a2:	1c41      	adds	r1, r0, #1
 80080a4:	4622      	mov	r2, r4
 80080a6:	42ba      	cmp	r2, r7
 80080a8:	d30a      	bcc.n	80080c0 <__exponent+0x66>
 80080aa:	f10d 0209 	add.w	r2, sp, #9
 80080ae:	eba2 020c 	sub.w	r2, r2, ip
 80080b2:	42bc      	cmp	r4, r7
 80080b4:	bf88      	it	hi
 80080b6:	2200      	movhi	r2, #0
 80080b8:	4413      	add	r3, r2
 80080ba:	1a18      	subs	r0, r3, r0
 80080bc:	b003      	add	sp, #12
 80080be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080c0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80080c4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80080c8:	e7ed      	b.n	80080a6 <__exponent+0x4c>
 80080ca:	2330      	movs	r3, #48	; 0x30
 80080cc:	3130      	adds	r1, #48	; 0x30
 80080ce:	7083      	strb	r3, [r0, #2]
 80080d0:	70c1      	strb	r1, [r0, #3]
 80080d2:	1d03      	adds	r3, r0, #4
 80080d4:	e7f1      	b.n	80080ba <__exponent+0x60>
	...

080080d8 <_printf_float>:
 80080d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080dc:	ed2d 8b02 	vpush	{d8}
 80080e0:	b08d      	sub	sp, #52	; 0x34
 80080e2:	460c      	mov	r4, r1
 80080e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80080e8:	4616      	mov	r6, r2
 80080ea:	461f      	mov	r7, r3
 80080ec:	4605      	mov	r5, r0
 80080ee:	f000 fce7 	bl	8008ac0 <_localeconv_r>
 80080f2:	f8d0 a000 	ldr.w	sl, [r0]
 80080f6:	4650      	mov	r0, sl
 80080f8:	f7f8 f8ba 	bl	8000270 <strlen>
 80080fc:	2300      	movs	r3, #0
 80080fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008100:	6823      	ldr	r3, [r4, #0]
 8008102:	9305      	str	r3, [sp, #20]
 8008104:	f8d8 3000 	ldr.w	r3, [r8]
 8008108:	f894 b018 	ldrb.w	fp, [r4, #24]
 800810c:	3307      	adds	r3, #7
 800810e:	f023 0307 	bic.w	r3, r3, #7
 8008112:	f103 0208 	add.w	r2, r3, #8
 8008116:	f8c8 2000 	str.w	r2, [r8]
 800811a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800811e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008122:	9307      	str	r3, [sp, #28]
 8008124:	f8cd 8018 	str.w	r8, [sp, #24]
 8008128:	ee08 0a10 	vmov	s16, r0
 800812c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8008130:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008134:	4b9e      	ldr	r3, [pc, #632]	; (80083b0 <_printf_float+0x2d8>)
 8008136:	f04f 32ff 	mov.w	r2, #4294967295
 800813a:	f7f8 fcf7 	bl	8000b2c <__aeabi_dcmpun>
 800813e:	bb88      	cbnz	r0, 80081a4 <_printf_float+0xcc>
 8008140:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008144:	4b9a      	ldr	r3, [pc, #616]	; (80083b0 <_printf_float+0x2d8>)
 8008146:	f04f 32ff 	mov.w	r2, #4294967295
 800814a:	f7f8 fcd1 	bl	8000af0 <__aeabi_dcmple>
 800814e:	bb48      	cbnz	r0, 80081a4 <_printf_float+0xcc>
 8008150:	2200      	movs	r2, #0
 8008152:	2300      	movs	r3, #0
 8008154:	4640      	mov	r0, r8
 8008156:	4649      	mov	r1, r9
 8008158:	f7f8 fcc0 	bl	8000adc <__aeabi_dcmplt>
 800815c:	b110      	cbz	r0, 8008164 <_printf_float+0x8c>
 800815e:	232d      	movs	r3, #45	; 0x2d
 8008160:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008164:	4a93      	ldr	r2, [pc, #588]	; (80083b4 <_printf_float+0x2dc>)
 8008166:	4b94      	ldr	r3, [pc, #592]	; (80083b8 <_printf_float+0x2e0>)
 8008168:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800816c:	bf94      	ite	ls
 800816e:	4690      	movls	r8, r2
 8008170:	4698      	movhi	r8, r3
 8008172:	2303      	movs	r3, #3
 8008174:	6123      	str	r3, [r4, #16]
 8008176:	9b05      	ldr	r3, [sp, #20]
 8008178:	f023 0304 	bic.w	r3, r3, #4
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	f04f 0900 	mov.w	r9, #0
 8008182:	9700      	str	r7, [sp, #0]
 8008184:	4633      	mov	r3, r6
 8008186:	aa0b      	add	r2, sp, #44	; 0x2c
 8008188:	4621      	mov	r1, r4
 800818a:	4628      	mov	r0, r5
 800818c:	f000 f9da 	bl	8008544 <_printf_common>
 8008190:	3001      	adds	r0, #1
 8008192:	f040 8090 	bne.w	80082b6 <_printf_float+0x1de>
 8008196:	f04f 30ff 	mov.w	r0, #4294967295
 800819a:	b00d      	add	sp, #52	; 0x34
 800819c:	ecbd 8b02 	vpop	{d8}
 80081a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081a4:	4642      	mov	r2, r8
 80081a6:	464b      	mov	r3, r9
 80081a8:	4640      	mov	r0, r8
 80081aa:	4649      	mov	r1, r9
 80081ac:	f7f8 fcbe 	bl	8000b2c <__aeabi_dcmpun>
 80081b0:	b140      	cbz	r0, 80081c4 <_printf_float+0xec>
 80081b2:	464b      	mov	r3, r9
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	bfbc      	itt	lt
 80081b8:	232d      	movlt	r3, #45	; 0x2d
 80081ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80081be:	4a7f      	ldr	r2, [pc, #508]	; (80083bc <_printf_float+0x2e4>)
 80081c0:	4b7f      	ldr	r3, [pc, #508]	; (80083c0 <_printf_float+0x2e8>)
 80081c2:	e7d1      	b.n	8008168 <_printf_float+0x90>
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80081ca:	9206      	str	r2, [sp, #24]
 80081cc:	1c5a      	adds	r2, r3, #1
 80081ce:	d13f      	bne.n	8008250 <_printf_float+0x178>
 80081d0:	2306      	movs	r3, #6
 80081d2:	6063      	str	r3, [r4, #4]
 80081d4:	9b05      	ldr	r3, [sp, #20]
 80081d6:	6861      	ldr	r1, [r4, #4]
 80081d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80081dc:	2300      	movs	r3, #0
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	ab0a      	add	r3, sp, #40	; 0x28
 80081e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80081e6:	ab09      	add	r3, sp, #36	; 0x24
 80081e8:	ec49 8b10 	vmov	d0, r8, r9
 80081ec:	9300      	str	r3, [sp, #0]
 80081ee:	6022      	str	r2, [r4, #0]
 80081f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80081f4:	4628      	mov	r0, r5
 80081f6:	f7ff fece 	bl	8007f96 <__cvt>
 80081fa:	9b06      	ldr	r3, [sp, #24]
 80081fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081fe:	2b47      	cmp	r3, #71	; 0x47
 8008200:	4680      	mov	r8, r0
 8008202:	d108      	bne.n	8008216 <_printf_float+0x13e>
 8008204:	1cc8      	adds	r0, r1, #3
 8008206:	db02      	blt.n	800820e <_printf_float+0x136>
 8008208:	6863      	ldr	r3, [r4, #4]
 800820a:	4299      	cmp	r1, r3
 800820c:	dd41      	ble.n	8008292 <_printf_float+0x1ba>
 800820e:	f1ab 0302 	sub.w	r3, fp, #2
 8008212:	fa5f fb83 	uxtb.w	fp, r3
 8008216:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800821a:	d820      	bhi.n	800825e <_printf_float+0x186>
 800821c:	3901      	subs	r1, #1
 800821e:	465a      	mov	r2, fp
 8008220:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008224:	9109      	str	r1, [sp, #36]	; 0x24
 8008226:	f7ff ff18 	bl	800805a <__exponent>
 800822a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800822c:	1813      	adds	r3, r2, r0
 800822e:	2a01      	cmp	r2, #1
 8008230:	4681      	mov	r9, r0
 8008232:	6123      	str	r3, [r4, #16]
 8008234:	dc02      	bgt.n	800823c <_printf_float+0x164>
 8008236:	6822      	ldr	r2, [r4, #0]
 8008238:	07d2      	lsls	r2, r2, #31
 800823a:	d501      	bpl.n	8008240 <_printf_float+0x168>
 800823c:	3301      	adds	r3, #1
 800823e:	6123      	str	r3, [r4, #16]
 8008240:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008244:	2b00      	cmp	r3, #0
 8008246:	d09c      	beq.n	8008182 <_printf_float+0xaa>
 8008248:	232d      	movs	r3, #45	; 0x2d
 800824a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800824e:	e798      	b.n	8008182 <_printf_float+0xaa>
 8008250:	9a06      	ldr	r2, [sp, #24]
 8008252:	2a47      	cmp	r2, #71	; 0x47
 8008254:	d1be      	bne.n	80081d4 <_printf_float+0xfc>
 8008256:	2b00      	cmp	r3, #0
 8008258:	d1bc      	bne.n	80081d4 <_printf_float+0xfc>
 800825a:	2301      	movs	r3, #1
 800825c:	e7b9      	b.n	80081d2 <_printf_float+0xfa>
 800825e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008262:	d118      	bne.n	8008296 <_printf_float+0x1be>
 8008264:	2900      	cmp	r1, #0
 8008266:	6863      	ldr	r3, [r4, #4]
 8008268:	dd0b      	ble.n	8008282 <_printf_float+0x1aa>
 800826a:	6121      	str	r1, [r4, #16]
 800826c:	b913      	cbnz	r3, 8008274 <_printf_float+0x19c>
 800826e:	6822      	ldr	r2, [r4, #0]
 8008270:	07d0      	lsls	r0, r2, #31
 8008272:	d502      	bpl.n	800827a <_printf_float+0x1a2>
 8008274:	3301      	adds	r3, #1
 8008276:	440b      	add	r3, r1
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	65a1      	str	r1, [r4, #88]	; 0x58
 800827c:	f04f 0900 	mov.w	r9, #0
 8008280:	e7de      	b.n	8008240 <_printf_float+0x168>
 8008282:	b913      	cbnz	r3, 800828a <_printf_float+0x1b2>
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	07d2      	lsls	r2, r2, #31
 8008288:	d501      	bpl.n	800828e <_printf_float+0x1b6>
 800828a:	3302      	adds	r3, #2
 800828c:	e7f4      	b.n	8008278 <_printf_float+0x1a0>
 800828e:	2301      	movs	r3, #1
 8008290:	e7f2      	b.n	8008278 <_printf_float+0x1a0>
 8008292:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008296:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008298:	4299      	cmp	r1, r3
 800829a:	db05      	blt.n	80082a8 <_printf_float+0x1d0>
 800829c:	6823      	ldr	r3, [r4, #0]
 800829e:	6121      	str	r1, [r4, #16]
 80082a0:	07d8      	lsls	r0, r3, #31
 80082a2:	d5ea      	bpl.n	800827a <_printf_float+0x1a2>
 80082a4:	1c4b      	adds	r3, r1, #1
 80082a6:	e7e7      	b.n	8008278 <_printf_float+0x1a0>
 80082a8:	2900      	cmp	r1, #0
 80082aa:	bfd4      	ite	le
 80082ac:	f1c1 0202 	rsble	r2, r1, #2
 80082b0:	2201      	movgt	r2, #1
 80082b2:	4413      	add	r3, r2
 80082b4:	e7e0      	b.n	8008278 <_printf_float+0x1a0>
 80082b6:	6823      	ldr	r3, [r4, #0]
 80082b8:	055a      	lsls	r2, r3, #21
 80082ba:	d407      	bmi.n	80082cc <_printf_float+0x1f4>
 80082bc:	6923      	ldr	r3, [r4, #16]
 80082be:	4642      	mov	r2, r8
 80082c0:	4631      	mov	r1, r6
 80082c2:	4628      	mov	r0, r5
 80082c4:	47b8      	blx	r7
 80082c6:	3001      	adds	r0, #1
 80082c8:	d12c      	bne.n	8008324 <_printf_float+0x24c>
 80082ca:	e764      	b.n	8008196 <_printf_float+0xbe>
 80082cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80082d0:	f240 80e0 	bls.w	8008494 <_printf_float+0x3bc>
 80082d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80082d8:	2200      	movs	r2, #0
 80082da:	2300      	movs	r3, #0
 80082dc:	f7f8 fbf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e0:	2800      	cmp	r0, #0
 80082e2:	d034      	beq.n	800834e <_printf_float+0x276>
 80082e4:	4a37      	ldr	r2, [pc, #220]	; (80083c4 <_printf_float+0x2ec>)
 80082e6:	2301      	movs	r3, #1
 80082e8:	4631      	mov	r1, r6
 80082ea:	4628      	mov	r0, r5
 80082ec:	47b8      	blx	r7
 80082ee:	3001      	adds	r0, #1
 80082f0:	f43f af51 	beq.w	8008196 <_printf_float+0xbe>
 80082f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80082f8:	429a      	cmp	r2, r3
 80082fa:	db02      	blt.n	8008302 <_printf_float+0x22a>
 80082fc:	6823      	ldr	r3, [r4, #0]
 80082fe:	07d8      	lsls	r0, r3, #31
 8008300:	d510      	bpl.n	8008324 <_printf_float+0x24c>
 8008302:	ee18 3a10 	vmov	r3, s16
 8008306:	4652      	mov	r2, sl
 8008308:	4631      	mov	r1, r6
 800830a:	4628      	mov	r0, r5
 800830c:	47b8      	blx	r7
 800830e:	3001      	adds	r0, #1
 8008310:	f43f af41 	beq.w	8008196 <_printf_float+0xbe>
 8008314:	f04f 0800 	mov.w	r8, #0
 8008318:	f104 091a 	add.w	r9, r4, #26
 800831c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800831e:	3b01      	subs	r3, #1
 8008320:	4543      	cmp	r3, r8
 8008322:	dc09      	bgt.n	8008338 <_printf_float+0x260>
 8008324:	6823      	ldr	r3, [r4, #0]
 8008326:	079b      	lsls	r3, r3, #30
 8008328:	f100 8107 	bmi.w	800853a <_printf_float+0x462>
 800832c:	68e0      	ldr	r0, [r4, #12]
 800832e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008330:	4298      	cmp	r0, r3
 8008332:	bfb8      	it	lt
 8008334:	4618      	movlt	r0, r3
 8008336:	e730      	b.n	800819a <_printf_float+0xc2>
 8008338:	2301      	movs	r3, #1
 800833a:	464a      	mov	r2, r9
 800833c:	4631      	mov	r1, r6
 800833e:	4628      	mov	r0, r5
 8008340:	47b8      	blx	r7
 8008342:	3001      	adds	r0, #1
 8008344:	f43f af27 	beq.w	8008196 <_printf_float+0xbe>
 8008348:	f108 0801 	add.w	r8, r8, #1
 800834c:	e7e6      	b.n	800831c <_printf_float+0x244>
 800834e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008350:	2b00      	cmp	r3, #0
 8008352:	dc39      	bgt.n	80083c8 <_printf_float+0x2f0>
 8008354:	4a1b      	ldr	r2, [pc, #108]	; (80083c4 <_printf_float+0x2ec>)
 8008356:	2301      	movs	r3, #1
 8008358:	4631      	mov	r1, r6
 800835a:	4628      	mov	r0, r5
 800835c:	47b8      	blx	r7
 800835e:	3001      	adds	r0, #1
 8008360:	f43f af19 	beq.w	8008196 <_printf_float+0xbe>
 8008364:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008368:	4313      	orrs	r3, r2
 800836a:	d102      	bne.n	8008372 <_printf_float+0x29a>
 800836c:	6823      	ldr	r3, [r4, #0]
 800836e:	07d9      	lsls	r1, r3, #31
 8008370:	d5d8      	bpl.n	8008324 <_printf_float+0x24c>
 8008372:	ee18 3a10 	vmov	r3, s16
 8008376:	4652      	mov	r2, sl
 8008378:	4631      	mov	r1, r6
 800837a:	4628      	mov	r0, r5
 800837c:	47b8      	blx	r7
 800837e:	3001      	adds	r0, #1
 8008380:	f43f af09 	beq.w	8008196 <_printf_float+0xbe>
 8008384:	f04f 0900 	mov.w	r9, #0
 8008388:	f104 0a1a 	add.w	sl, r4, #26
 800838c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800838e:	425b      	negs	r3, r3
 8008390:	454b      	cmp	r3, r9
 8008392:	dc01      	bgt.n	8008398 <_printf_float+0x2c0>
 8008394:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008396:	e792      	b.n	80082be <_printf_float+0x1e6>
 8008398:	2301      	movs	r3, #1
 800839a:	4652      	mov	r2, sl
 800839c:	4631      	mov	r1, r6
 800839e:	4628      	mov	r0, r5
 80083a0:	47b8      	blx	r7
 80083a2:	3001      	adds	r0, #1
 80083a4:	f43f aef7 	beq.w	8008196 <_printf_float+0xbe>
 80083a8:	f109 0901 	add.w	r9, r9, #1
 80083ac:	e7ee      	b.n	800838c <_printf_float+0x2b4>
 80083ae:	bf00      	nop
 80083b0:	7fefffff 	.word	0x7fefffff
 80083b4:	0800ad70 	.word	0x0800ad70
 80083b8:	0800ad74 	.word	0x0800ad74
 80083bc:	0800ad78 	.word	0x0800ad78
 80083c0:	0800ad7c 	.word	0x0800ad7c
 80083c4:	0800ad80 	.word	0x0800ad80
 80083c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80083ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083cc:	429a      	cmp	r2, r3
 80083ce:	bfa8      	it	ge
 80083d0:	461a      	movge	r2, r3
 80083d2:	2a00      	cmp	r2, #0
 80083d4:	4691      	mov	r9, r2
 80083d6:	dc37      	bgt.n	8008448 <_printf_float+0x370>
 80083d8:	f04f 0b00 	mov.w	fp, #0
 80083dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80083e0:	f104 021a 	add.w	r2, r4, #26
 80083e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	eba3 0309 	sub.w	r3, r3, r9
 80083ec:	455b      	cmp	r3, fp
 80083ee:	dc33      	bgt.n	8008458 <_printf_float+0x380>
 80083f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80083f4:	429a      	cmp	r2, r3
 80083f6:	db3b      	blt.n	8008470 <_printf_float+0x398>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	07da      	lsls	r2, r3, #31
 80083fc:	d438      	bmi.n	8008470 <_printf_float+0x398>
 80083fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008402:	eba2 0903 	sub.w	r9, r2, r3
 8008406:	9b05      	ldr	r3, [sp, #20]
 8008408:	1ad2      	subs	r2, r2, r3
 800840a:	4591      	cmp	r9, r2
 800840c:	bfa8      	it	ge
 800840e:	4691      	movge	r9, r2
 8008410:	f1b9 0f00 	cmp.w	r9, #0
 8008414:	dc35      	bgt.n	8008482 <_printf_float+0x3aa>
 8008416:	f04f 0800 	mov.w	r8, #0
 800841a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800841e:	f104 0a1a 	add.w	sl, r4, #26
 8008422:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008426:	1a9b      	subs	r3, r3, r2
 8008428:	eba3 0309 	sub.w	r3, r3, r9
 800842c:	4543      	cmp	r3, r8
 800842e:	f77f af79 	ble.w	8008324 <_printf_float+0x24c>
 8008432:	2301      	movs	r3, #1
 8008434:	4652      	mov	r2, sl
 8008436:	4631      	mov	r1, r6
 8008438:	4628      	mov	r0, r5
 800843a:	47b8      	blx	r7
 800843c:	3001      	adds	r0, #1
 800843e:	f43f aeaa 	beq.w	8008196 <_printf_float+0xbe>
 8008442:	f108 0801 	add.w	r8, r8, #1
 8008446:	e7ec      	b.n	8008422 <_printf_float+0x34a>
 8008448:	4613      	mov	r3, r2
 800844a:	4631      	mov	r1, r6
 800844c:	4642      	mov	r2, r8
 800844e:	4628      	mov	r0, r5
 8008450:	47b8      	blx	r7
 8008452:	3001      	adds	r0, #1
 8008454:	d1c0      	bne.n	80083d8 <_printf_float+0x300>
 8008456:	e69e      	b.n	8008196 <_printf_float+0xbe>
 8008458:	2301      	movs	r3, #1
 800845a:	4631      	mov	r1, r6
 800845c:	4628      	mov	r0, r5
 800845e:	9205      	str	r2, [sp, #20]
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f ae97 	beq.w	8008196 <_printf_float+0xbe>
 8008468:	9a05      	ldr	r2, [sp, #20]
 800846a:	f10b 0b01 	add.w	fp, fp, #1
 800846e:	e7b9      	b.n	80083e4 <_printf_float+0x30c>
 8008470:	ee18 3a10 	vmov	r3, s16
 8008474:	4652      	mov	r2, sl
 8008476:	4631      	mov	r1, r6
 8008478:	4628      	mov	r0, r5
 800847a:	47b8      	blx	r7
 800847c:	3001      	adds	r0, #1
 800847e:	d1be      	bne.n	80083fe <_printf_float+0x326>
 8008480:	e689      	b.n	8008196 <_printf_float+0xbe>
 8008482:	9a05      	ldr	r2, [sp, #20]
 8008484:	464b      	mov	r3, r9
 8008486:	4442      	add	r2, r8
 8008488:	4631      	mov	r1, r6
 800848a:	4628      	mov	r0, r5
 800848c:	47b8      	blx	r7
 800848e:	3001      	adds	r0, #1
 8008490:	d1c1      	bne.n	8008416 <_printf_float+0x33e>
 8008492:	e680      	b.n	8008196 <_printf_float+0xbe>
 8008494:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008496:	2a01      	cmp	r2, #1
 8008498:	dc01      	bgt.n	800849e <_printf_float+0x3c6>
 800849a:	07db      	lsls	r3, r3, #31
 800849c:	d53a      	bpl.n	8008514 <_printf_float+0x43c>
 800849e:	2301      	movs	r3, #1
 80084a0:	4642      	mov	r2, r8
 80084a2:	4631      	mov	r1, r6
 80084a4:	4628      	mov	r0, r5
 80084a6:	47b8      	blx	r7
 80084a8:	3001      	adds	r0, #1
 80084aa:	f43f ae74 	beq.w	8008196 <_printf_float+0xbe>
 80084ae:	ee18 3a10 	vmov	r3, s16
 80084b2:	4652      	mov	r2, sl
 80084b4:	4631      	mov	r1, r6
 80084b6:	4628      	mov	r0, r5
 80084b8:	47b8      	blx	r7
 80084ba:	3001      	adds	r0, #1
 80084bc:	f43f ae6b 	beq.w	8008196 <_printf_float+0xbe>
 80084c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80084c4:	2200      	movs	r2, #0
 80084c6:	2300      	movs	r3, #0
 80084c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80084cc:	f7f8 fafc 	bl	8000ac8 <__aeabi_dcmpeq>
 80084d0:	b9d8      	cbnz	r0, 800850a <_printf_float+0x432>
 80084d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80084d6:	f108 0201 	add.w	r2, r8, #1
 80084da:	4631      	mov	r1, r6
 80084dc:	4628      	mov	r0, r5
 80084de:	47b8      	blx	r7
 80084e0:	3001      	adds	r0, #1
 80084e2:	d10e      	bne.n	8008502 <_printf_float+0x42a>
 80084e4:	e657      	b.n	8008196 <_printf_float+0xbe>
 80084e6:	2301      	movs	r3, #1
 80084e8:	4652      	mov	r2, sl
 80084ea:	4631      	mov	r1, r6
 80084ec:	4628      	mov	r0, r5
 80084ee:	47b8      	blx	r7
 80084f0:	3001      	adds	r0, #1
 80084f2:	f43f ae50 	beq.w	8008196 <_printf_float+0xbe>
 80084f6:	f108 0801 	add.w	r8, r8, #1
 80084fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80084fc:	3b01      	subs	r3, #1
 80084fe:	4543      	cmp	r3, r8
 8008500:	dcf1      	bgt.n	80084e6 <_printf_float+0x40e>
 8008502:	464b      	mov	r3, r9
 8008504:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008508:	e6da      	b.n	80082c0 <_printf_float+0x1e8>
 800850a:	f04f 0800 	mov.w	r8, #0
 800850e:	f104 0a1a 	add.w	sl, r4, #26
 8008512:	e7f2      	b.n	80084fa <_printf_float+0x422>
 8008514:	2301      	movs	r3, #1
 8008516:	4642      	mov	r2, r8
 8008518:	e7df      	b.n	80084da <_printf_float+0x402>
 800851a:	2301      	movs	r3, #1
 800851c:	464a      	mov	r2, r9
 800851e:	4631      	mov	r1, r6
 8008520:	4628      	mov	r0, r5
 8008522:	47b8      	blx	r7
 8008524:	3001      	adds	r0, #1
 8008526:	f43f ae36 	beq.w	8008196 <_printf_float+0xbe>
 800852a:	f108 0801 	add.w	r8, r8, #1
 800852e:	68e3      	ldr	r3, [r4, #12]
 8008530:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008532:	1a5b      	subs	r3, r3, r1
 8008534:	4543      	cmp	r3, r8
 8008536:	dcf0      	bgt.n	800851a <_printf_float+0x442>
 8008538:	e6f8      	b.n	800832c <_printf_float+0x254>
 800853a:	f04f 0800 	mov.w	r8, #0
 800853e:	f104 0919 	add.w	r9, r4, #25
 8008542:	e7f4      	b.n	800852e <_printf_float+0x456>

08008544 <_printf_common>:
 8008544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008548:	4616      	mov	r6, r2
 800854a:	4699      	mov	r9, r3
 800854c:	688a      	ldr	r2, [r1, #8]
 800854e:	690b      	ldr	r3, [r1, #16]
 8008550:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008554:	4293      	cmp	r3, r2
 8008556:	bfb8      	it	lt
 8008558:	4613      	movlt	r3, r2
 800855a:	6033      	str	r3, [r6, #0]
 800855c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008560:	4607      	mov	r7, r0
 8008562:	460c      	mov	r4, r1
 8008564:	b10a      	cbz	r2, 800856a <_printf_common+0x26>
 8008566:	3301      	adds	r3, #1
 8008568:	6033      	str	r3, [r6, #0]
 800856a:	6823      	ldr	r3, [r4, #0]
 800856c:	0699      	lsls	r1, r3, #26
 800856e:	bf42      	ittt	mi
 8008570:	6833      	ldrmi	r3, [r6, #0]
 8008572:	3302      	addmi	r3, #2
 8008574:	6033      	strmi	r3, [r6, #0]
 8008576:	6825      	ldr	r5, [r4, #0]
 8008578:	f015 0506 	ands.w	r5, r5, #6
 800857c:	d106      	bne.n	800858c <_printf_common+0x48>
 800857e:	f104 0a19 	add.w	sl, r4, #25
 8008582:	68e3      	ldr	r3, [r4, #12]
 8008584:	6832      	ldr	r2, [r6, #0]
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	42ab      	cmp	r3, r5
 800858a:	dc26      	bgt.n	80085da <_printf_common+0x96>
 800858c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008590:	1e13      	subs	r3, r2, #0
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	bf18      	it	ne
 8008596:	2301      	movne	r3, #1
 8008598:	0692      	lsls	r2, r2, #26
 800859a:	d42b      	bmi.n	80085f4 <_printf_common+0xb0>
 800859c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80085a0:	4649      	mov	r1, r9
 80085a2:	4638      	mov	r0, r7
 80085a4:	47c0      	blx	r8
 80085a6:	3001      	adds	r0, #1
 80085a8:	d01e      	beq.n	80085e8 <_printf_common+0xa4>
 80085aa:	6823      	ldr	r3, [r4, #0]
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	f003 0306 	and.w	r3, r3, #6
 80085b2:	2b04      	cmp	r3, #4
 80085b4:	bf02      	ittt	eq
 80085b6:	68e5      	ldreq	r5, [r4, #12]
 80085b8:	6833      	ldreq	r3, [r6, #0]
 80085ba:	1aed      	subeq	r5, r5, r3
 80085bc:	68a3      	ldr	r3, [r4, #8]
 80085be:	bf0c      	ite	eq
 80085c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085c4:	2500      	movne	r5, #0
 80085c6:	4293      	cmp	r3, r2
 80085c8:	bfc4      	itt	gt
 80085ca:	1a9b      	subgt	r3, r3, r2
 80085cc:	18ed      	addgt	r5, r5, r3
 80085ce:	2600      	movs	r6, #0
 80085d0:	341a      	adds	r4, #26
 80085d2:	42b5      	cmp	r5, r6
 80085d4:	d11a      	bne.n	800860c <_printf_common+0xc8>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e008      	b.n	80085ec <_printf_common+0xa8>
 80085da:	2301      	movs	r3, #1
 80085dc:	4652      	mov	r2, sl
 80085de:	4649      	mov	r1, r9
 80085e0:	4638      	mov	r0, r7
 80085e2:	47c0      	blx	r8
 80085e4:	3001      	adds	r0, #1
 80085e6:	d103      	bne.n	80085f0 <_printf_common+0xac>
 80085e8:	f04f 30ff 	mov.w	r0, #4294967295
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085f0:	3501      	adds	r5, #1
 80085f2:	e7c6      	b.n	8008582 <_printf_common+0x3e>
 80085f4:	18e1      	adds	r1, r4, r3
 80085f6:	1c5a      	adds	r2, r3, #1
 80085f8:	2030      	movs	r0, #48	; 0x30
 80085fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085fe:	4422      	add	r2, r4
 8008600:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008604:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008608:	3302      	adds	r3, #2
 800860a:	e7c7      	b.n	800859c <_printf_common+0x58>
 800860c:	2301      	movs	r3, #1
 800860e:	4622      	mov	r2, r4
 8008610:	4649      	mov	r1, r9
 8008612:	4638      	mov	r0, r7
 8008614:	47c0      	blx	r8
 8008616:	3001      	adds	r0, #1
 8008618:	d0e6      	beq.n	80085e8 <_printf_common+0xa4>
 800861a:	3601      	adds	r6, #1
 800861c:	e7d9      	b.n	80085d2 <_printf_common+0x8e>
	...

08008620 <_printf_i>:
 8008620:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008624:	7e0f      	ldrb	r7, [r1, #24]
 8008626:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008628:	2f78      	cmp	r7, #120	; 0x78
 800862a:	4691      	mov	r9, r2
 800862c:	4680      	mov	r8, r0
 800862e:	460c      	mov	r4, r1
 8008630:	469a      	mov	sl, r3
 8008632:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008636:	d807      	bhi.n	8008648 <_printf_i+0x28>
 8008638:	2f62      	cmp	r7, #98	; 0x62
 800863a:	d80a      	bhi.n	8008652 <_printf_i+0x32>
 800863c:	2f00      	cmp	r7, #0
 800863e:	f000 80d4 	beq.w	80087ea <_printf_i+0x1ca>
 8008642:	2f58      	cmp	r7, #88	; 0x58
 8008644:	f000 80c0 	beq.w	80087c8 <_printf_i+0x1a8>
 8008648:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800864c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008650:	e03a      	b.n	80086c8 <_printf_i+0xa8>
 8008652:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008656:	2b15      	cmp	r3, #21
 8008658:	d8f6      	bhi.n	8008648 <_printf_i+0x28>
 800865a:	a101      	add	r1, pc, #4	; (adr r1, 8008660 <_printf_i+0x40>)
 800865c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008660:	080086b9 	.word	0x080086b9
 8008664:	080086cd 	.word	0x080086cd
 8008668:	08008649 	.word	0x08008649
 800866c:	08008649 	.word	0x08008649
 8008670:	08008649 	.word	0x08008649
 8008674:	08008649 	.word	0x08008649
 8008678:	080086cd 	.word	0x080086cd
 800867c:	08008649 	.word	0x08008649
 8008680:	08008649 	.word	0x08008649
 8008684:	08008649 	.word	0x08008649
 8008688:	08008649 	.word	0x08008649
 800868c:	080087d1 	.word	0x080087d1
 8008690:	080086f9 	.word	0x080086f9
 8008694:	0800878b 	.word	0x0800878b
 8008698:	08008649 	.word	0x08008649
 800869c:	08008649 	.word	0x08008649
 80086a0:	080087f3 	.word	0x080087f3
 80086a4:	08008649 	.word	0x08008649
 80086a8:	080086f9 	.word	0x080086f9
 80086ac:	08008649 	.word	0x08008649
 80086b0:	08008649 	.word	0x08008649
 80086b4:	08008793 	.word	0x08008793
 80086b8:	682b      	ldr	r3, [r5, #0]
 80086ba:	1d1a      	adds	r2, r3, #4
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	602a      	str	r2, [r5, #0]
 80086c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086c8:	2301      	movs	r3, #1
 80086ca:	e09f      	b.n	800880c <_printf_i+0x1ec>
 80086cc:	6820      	ldr	r0, [r4, #0]
 80086ce:	682b      	ldr	r3, [r5, #0]
 80086d0:	0607      	lsls	r7, r0, #24
 80086d2:	f103 0104 	add.w	r1, r3, #4
 80086d6:	6029      	str	r1, [r5, #0]
 80086d8:	d501      	bpl.n	80086de <_printf_i+0xbe>
 80086da:	681e      	ldr	r6, [r3, #0]
 80086dc:	e003      	b.n	80086e6 <_printf_i+0xc6>
 80086de:	0646      	lsls	r6, r0, #25
 80086e0:	d5fb      	bpl.n	80086da <_printf_i+0xba>
 80086e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80086e6:	2e00      	cmp	r6, #0
 80086e8:	da03      	bge.n	80086f2 <_printf_i+0xd2>
 80086ea:	232d      	movs	r3, #45	; 0x2d
 80086ec:	4276      	negs	r6, r6
 80086ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086f2:	485a      	ldr	r0, [pc, #360]	; (800885c <_printf_i+0x23c>)
 80086f4:	230a      	movs	r3, #10
 80086f6:	e012      	b.n	800871e <_printf_i+0xfe>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	6820      	ldr	r0, [r4, #0]
 80086fc:	1d19      	adds	r1, r3, #4
 80086fe:	6029      	str	r1, [r5, #0]
 8008700:	0605      	lsls	r5, r0, #24
 8008702:	d501      	bpl.n	8008708 <_printf_i+0xe8>
 8008704:	681e      	ldr	r6, [r3, #0]
 8008706:	e002      	b.n	800870e <_printf_i+0xee>
 8008708:	0641      	lsls	r1, r0, #25
 800870a:	d5fb      	bpl.n	8008704 <_printf_i+0xe4>
 800870c:	881e      	ldrh	r6, [r3, #0]
 800870e:	4853      	ldr	r0, [pc, #332]	; (800885c <_printf_i+0x23c>)
 8008710:	2f6f      	cmp	r7, #111	; 0x6f
 8008712:	bf0c      	ite	eq
 8008714:	2308      	moveq	r3, #8
 8008716:	230a      	movne	r3, #10
 8008718:	2100      	movs	r1, #0
 800871a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800871e:	6865      	ldr	r5, [r4, #4]
 8008720:	60a5      	str	r5, [r4, #8]
 8008722:	2d00      	cmp	r5, #0
 8008724:	bfa2      	ittt	ge
 8008726:	6821      	ldrge	r1, [r4, #0]
 8008728:	f021 0104 	bicge.w	r1, r1, #4
 800872c:	6021      	strge	r1, [r4, #0]
 800872e:	b90e      	cbnz	r6, 8008734 <_printf_i+0x114>
 8008730:	2d00      	cmp	r5, #0
 8008732:	d04b      	beq.n	80087cc <_printf_i+0x1ac>
 8008734:	4615      	mov	r5, r2
 8008736:	fbb6 f1f3 	udiv	r1, r6, r3
 800873a:	fb03 6711 	mls	r7, r3, r1, r6
 800873e:	5dc7      	ldrb	r7, [r0, r7]
 8008740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008744:	4637      	mov	r7, r6
 8008746:	42bb      	cmp	r3, r7
 8008748:	460e      	mov	r6, r1
 800874a:	d9f4      	bls.n	8008736 <_printf_i+0x116>
 800874c:	2b08      	cmp	r3, #8
 800874e:	d10b      	bne.n	8008768 <_printf_i+0x148>
 8008750:	6823      	ldr	r3, [r4, #0]
 8008752:	07de      	lsls	r6, r3, #31
 8008754:	d508      	bpl.n	8008768 <_printf_i+0x148>
 8008756:	6923      	ldr	r3, [r4, #16]
 8008758:	6861      	ldr	r1, [r4, #4]
 800875a:	4299      	cmp	r1, r3
 800875c:	bfde      	ittt	le
 800875e:	2330      	movle	r3, #48	; 0x30
 8008760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008768:	1b52      	subs	r2, r2, r5
 800876a:	6122      	str	r2, [r4, #16]
 800876c:	f8cd a000 	str.w	sl, [sp]
 8008770:	464b      	mov	r3, r9
 8008772:	aa03      	add	r2, sp, #12
 8008774:	4621      	mov	r1, r4
 8008776:	4640      	mov	r0, r8
 8008778:	f7ff fee4 	bl	8008544 <_printf_common>
 800877c:	3001      	adds	r0, #1
 800877e:	d14a      	bne.n	8008816 <_printf_i+0x1f6>
 8008780:	f04f 30ff 	mov.w	r0, #4294967295
 8008784:	b004      	add	sp, #16
 8008786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	f043 0320 	orr.w	r3, r3, #32
 8008790:	6023      	str	r3, [r4, #0]
 8008792:	4833      	ldr	r0, [pc, #204]	; (8008860 <_printf_i+0x240>)
 8008794:	2778      	movs	r7, #120	; 0x78
 8008796:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800879a:	6823      	ldr	r3, [r4, #0]
 800879c:	6829      	ldr	r1, [r5, #0]
 800879e:	061f      	lsls	r7, r3, #24
 80087a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80087a4:	d402      	bmi.n	80087ac <_printf_i+0x18c>
 80087a6:	065f      	lsls	r7, r3, #25
 80087a8:	bf48      	it	mi
 80087aa:	b2b6      	uxthmi	r6, r6
 80087ac:	07df      	lsls	r7, r3, #31
 80087ae:	bf48      	it	mi
 80087b0:	f043 0320 	orrmi.w	r3, r3, #32
 80087b4:	6029      	str	r1, [r5, #0]
 80087b6:	bf48      	it	mi
 80087b8:	6023      	strmi	r3, [r4, #0]
 80087ba:	b91e      	cbnz	r6, 80087c4 <_printf_i+0x1a4>
 80087bc:	6823      	ldr	r3, [r4, #0]
 80087be:	f023 0320 	bic.w	r3, r3, #32
 80087c2:	6023      	str	r3, [r4, #0]
 80087c4:	2310      	movs	r3, #16
 80087c6:	e7a7      	b.n	8008718 <_printf_i+0xf8>
 80087c8:	4824      	ldr	r0, [pc, #144]	; (800885c <_printf_i+0x23c>)
 80087ca:	e7e4      	b.n	8008796 <_printf_i+0x176>
 80087cc:	4615      	mov	r5, r2
 80087ce:	e7bd      	b.n	800874c <_printf_i+0x12c>
 80087d0:	682b      	ldr	r3, [r5, #0]
 80087d2:	6826      	ldr	r6, [r4, #0]
 80087d4:	6961      	ldr	r1, [r4, #20]
 80087d6:	1d18      	adds	r0, r3, #4
 80087d8:	6028      	str	r0, [r5, #0]
 80087da:	0635      	lsls	r5, r6, #24
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	d501      	bpl.n	80087e4 <_printf_i+0x1c4>
 80087e0:	6019      	str	r1, [r3, #0]
 80087e2:	e002      	b.n	80087ea <_printf_i+0x1ca>
 80087e4:	0670      	lsls	r0, r6, #25
 80087e6:	d5fb      	bpl.n	80087e0 <_printf_i+0x1c0>
 80087e8:	8019      	strh	r1, [r3, #0]
 80087ea:	2300      	movs	r3, #0
 80087ec:	6123      	str	r3, [r4, #16]
 80087ee:	4615      	mov	r5, r2
 80087f0:	e7bc      	b.n	800876c <_printf_i+0x14c>
 80087f2:	682b      	ldr	r3, [r5, #0]
 80087f4:	1d1a      	adds	r2, r3, #4
 80087f6:	602a      	str	r2, [r5, #0]
 80087f8:	681d      	ldr	r5, [r3, #0]
 80087fa:	6862      	ldr	r2, [r4, #4]
 80087fc:	2100      	movs	r1, #0
 80087fe:	4628      	mov	r0, r5
 8008800:	f7f7 fce6 	bl	80001d0 <memchr>
 8008804:	b108      	cbz	r0, 800880a <_printf_i+0x1ea>
 8008806:	1b40      	subs	r0, r0, r5
 8008808:	6060      	str	r0, [r4, #4]
 800880a:	6863      	ldr	r3, [r4, #4]
 800880c:	6123      	str	r3, [r4, #16]
 800880e:	2300      	movs	r3, #0
 8008810:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008814:	e7aa      	b.n	800876c <_printf_i+0x14c>
 8008816:	6923      	ldr	r3, [r4, #16]
 8008818:	462a      	mov	r2, r5
 800881a:	4649      	mov	r1, r9
 800881c:	4640      	mov	r0, r8
 800881e:	47d0      	blx	sl
 8008820:	3001      	adds	r0, #1
 8008822:	d0ad      	beq.n	8008780 <_printf_i+0x160>
 8008824:	6823      	ldr	r3, [r4, #0]
 8008826:	079b      	lsls	r3, r3, #30
 8008828:	d413      	bmi.n	8008852 <_printf_i+0x232>
 800882a:	68e0      	ldr	r0, [r4, #12]
 800882c:	9b03      	ldr	r3, [sp, #12]
 800882e:	4298      	cmp	r0, r3
 8008830:	bfb8      	it	lt
 8008832:	4618      	movlt	r0, r3
 8008834:	e7a6      	b.n	8008784 <_printf_i+0x164>
 8008836:	2301      	movs	r3, #1
 8008838:	4632      	mov	r2, r6
 800883a:	4649      	mov	r1, r9
 800883c:	4640      	mov	r0, r8
 800883e:	47d0      	blx	sl
 8008840:	3001      	adds	r0, #1
 8008842:	d09d      	beq.n	8008780 <_printf_i+0x160>
 8008844:	3501      	adds	r5, #1
 8008846:	68e3      	ldr	r3, [r4, #12]
 8008848:	9903      	ldr	r1, [sp, #12]
 800884a:	1a5b      	subs	r3, r3, r1
 800884c:	42ab      	cmp	r3, r5
 800884e:	dcf2      	bgt.n	8008836 <_printf_i+0x216>
 8008850:	e7eb      	b.n	800882a <_printf_i+0x20a>
 8008852:	2500      	movs	r5, #0
 8008854:	f104 0619 	add.w	r6, r4, #25
 8008858:	e7f5      	b.n	8008846 <_printf_i+0x226>
 800885a:	bf00      	nop
 800885c:	0800ad82 	.word	0x0800ad82
 8008860:	0800ad93 	.word	0x0800ad93

08008864 <std>:
 8008864:	2300      	movs	r3, #0
 8008866:	b510      	push	{r4, lr}
 8008868:	4604      	mov	r4, r0
 800886a:	e9c0 3300 	strd	r3, r3, [r0]
 800886e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008872:	6083      	str	r3, [r0, #8]
 8008874:	8181      	strh	r1, [r0, #12]
 8008876:	6643      	str	r3, [r0, #100]	; 0x64
 8008878:	81c2      	strh	r2, [r0, #14]
 800887a:	6183      	str	r3, [r0, #24]
 800887c:	4619      	mov	r1, r3
 800887e:	2208      	movs	r2, #8
 8008880:	305c      	adds	r0, #92	; 0x5c
 8008882:	f000 f914 	bl	8008aae <memset>
 8008886:	4b0d      	ldr	r3, [pc, #52]	; (80088bc <std+0x58>)
 8008888:	6263      	str	r3, [r4, #36]	; 0x24
 800888a:	4b0d      	ldr	r3, [pc, #52]	; (80088c0 <std+0x5c>)
 800888c:	62a3      	str	r3, [r4, #40]	; 0x28
 800888e:	4b0d      	ldr	r3, [pc, #52]	; (80088c4 <std+0x60>)
 8008890:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008892:	4b0d      	ldr	r3, [pc, #52]	; (80088c8 <std+0x64>)
 8008894:	6323      	str	r3, [r4, #48]	; 0x30
 8008896:	4b0d      	ldr	r3, [pc, #52]	; (80088cc <std+0x68>)
 8008898:	6224      	str	r4, [r4, #32]
 800889a:	429c      	cmp	r4, r3
 800889c:	d006      	beq.n	80088ac <std+0x48>
 800889e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80088a2:	4294      	cmp	r4, r2
 80088a4:	d002      	beq.n	80088ac <std+0x48>
 80088a6:	33d0      	adds	r3, #208	; 0xd0
 80088a8:	429c      	cmp	r4, r3
 80088aa:	d105      	bne.n	80088b8 <std+0x54>
 80088ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80088b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80088b4:	f000 b978 	b.w	8008ba8 <__retarget_lock_init_recursive>
 80088b8:	bd10      	pop	{r4, pc}
 80088ba:	bf00      	nop
 80088bc:	08008a29 	.word	0x08008a29
 80088c0:	08008a4b 	.word	0x08008a4b
 80088c4:	08008a83 	.word	0x08008a83
 80088c8:	08008aa7 	.word	0x08008aa7
 80088cc:	200004e0 	.word	0x200004e0

080088d0 <stdio_exit_handler>:
 80088d0:	4a02      	ldr	r2, [pc, #8]	; (80088dc <stdio_exit_handler+0xc>)
 80088d2:	4903      	ldr	r1, [pc, #12]	; (80088e0 <stdio_exit_handler+0x10>)
 80088d4:	4803      	ldr	r0, [pc, #12]	; (80088e4 <stdio_exit_handler+0x14>)
 80088d6:	f000 b869 	b.w	80089ac <_fwalk_sglue>
 80088da:	bf00      	nop
 80088dc:	20000018 	.word	0x20000018
 80088e0:	0800a559 	.word	0x0800a559
 80088e4:	20000024 	.word	0x20000024

080088e8 <cleanup_stdio>:
 80088e8:	6841      	ldr	r1, [r0, #4]
 80088ea:	4b0c      	ldr	r3, [pc, #48]	; (800891c <cleanup_stdio+0x34>)
 80088ec:	4299      	cmp	r1, r3
 80088ee:	b510      	push	{r4, lr}
 80088f0:	4604      	mov	r4, r0
 80088f2:	d001      	beq.n	80088f8 <cleanup_stdio+0x10>
 80088f4:	f001 fe30 	bl	800a558 <_fflush_r>
 80088f8:	68a1      	ldr	r1, [r4, #8]
 80088fa:	4b09      	ldr	r3, [pc, #36]	; (8008920 <cleanup_stdio+0x38>)
 80088fc:	4299      	cmp	r1, r3
 80088fe:	d002      	beq.n	8008906 <cleanup_stdio+0x1e>
 8008900:	4620      	mov	r0, r4
 8008902:	f001 fe29 	bl	800a558 <_fflush_r>
 8008906:	68e1      	ldr	r1, [r4, #12]
 8008908:	4b06      	ldr	r3, [pc, #24]	; (8008924 <cleanup_stdio+0x3c>)
 800890a:	4299      	cmp	r1, r3
 800890c:	d004      	beq.n	8008918 <cleanup_stdio+0x30>
 800890e:	4620      	mov	r0, r4
 8008910:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008914:	f001 be20 	b.w	800a558 <_fflush_r>
 8008918:	bd10      	pop	{r4, pc}
 800891a:	bf00      	nop
 800891c:	200004e0 	.word	0x200004e0
 8008920:	20000548 	.word	0x20000548
 8008924:	200005b0 	.word	0x200005b0

08008928 <global_stdio_init.part.0>:
 8008928:	b510      	push	{r4, lr}
 800892a:	4b0b      	ldr	r3, [pc, #44]	; (8008958 <global_stdio_init.part.0+0x30>)
 800892c:	4c0b      	ldr	r4, [pc, #44]	; (800895c <global_stdio_init.part.0+0x34>)
 800892e:	4a0c      	ldr	r2, [pc, #48]	; (8008960 <global_stdio_init.part.0+0x38>)
 8008930:	601a      	str	r2, [r3, #0]
 8008932:	4620      	mov	r0, r4
 8008934:	2200      	movs	r2, #0
 8008936:	2104      	movs	r1, #4
 8008938:	f7ff ff94 	bl	8008864 <std>
 800893c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008940:	2201      	movs	r2, #1
 8008942:	2109      	movs	r1, #9
 8008944:	f7ff ff8e 	bl	8008864 <std>
 8008948:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800894c:	2202      	movs	r2, #2
 800894e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008952:	2112      	movs	r1, #18
 8008954:	f7ff bf86 	b.w	8008864 <std>
 8008958:	20000618 	.word	0x20000618
 800895c:	200004e0 	.word	0x200004e0
 8008960:	080088d1 	.word	0x080088d1

08008964 <__sfp_lock_acquire>:
 8008964:	4801      	ldr	r0, [pc, #4]	; (800896c <__sfp_lock_acquire+0x8>)
 8008966:	f000 b920 	b.w	8008baa <__retarget_lock_acquire_recursive>
 800896a:	bf00      	nop
 800896c:	20000621 	.word	0x20000621

08008970 <__sfp_lock_release>:
 8008970:	4801      	ldr	r0, [pc, #4]	; (8008978 <__sfp_lock_release+0x8>)
 8008972:	f000 b91b 	b.w	8008bac <__retarget_lock_release_recursive>
 8008976:	bf00      	nop
 8008978:	20000621 	.word	0x20000621

0800897c <__sinit>:
 800897c:	b510      	push	{r4, lr}
 800897e:	4604      	mov	r4, r0
 8008980:	f7ff fff0 	bl	8008964 <__sfp_lock_acquire>
 8008984:	6a23      	ldr	r3, [r4, #32]
 8008986:	b11b      	cbz	r3, 8008990 <__sinit+0x14>
 8008988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800898c:	f7ff bff0 	b.w	8008970 <__sfp_lock_release>
 8008990:	4b04      	ldr	r3, [pc, #16]	; (80089a4 <__sinit+0x28>)
 8008992:	6223      	str	r3, [r4, #32]
 8008994:	4b04      	ldr	r3, [pc, #16]	; (80089a8 <__sinit+0x2c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d1f5      	bne.n	8008988 <__sinit+0xc>
 800899c:	f7ff ffc4 	bl	8008928 <global_stdio_init.part.0>
 80089a0:	e7f2      	b.n	8008988 <__sinit+0xc>
 80089a2:	bf00      	nop
 80089a4:	080088e9 	.word	0x080088e9
 80089a8:	20000618 	.word	0x20000618

080089ac <_fwalk_sglue>:
 80089ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b0:	4607      	mov	r7, r0
 80089b2:	4688      	mov	r8, r1
 80089b4:	4614      	mov	r4, r2
 80089b6:	2600      	movs	r6, #0
 80089b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80089bc:	f1b9 0901 	subs.w	r9, r9, #1
 80089c0:	d505      	bpl.n	80089ce <_fwalk_sglue+0x22>
 80089c2:	6824      	ldr	r4, [r4, #0]
 80089c4:	2c00      	cmp	r4, #0
 80089c6:	d1f7      	bne.n	80089b8 <_fwalk_sglue+0xc>
 80089c8:	4630      	mov	r0, r6
 80089ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ce:	89ab      	ldrh	r3, [r5, #12]
 80089d0:	2b01      	cmp	r3, #1
 80089d2:	d907      	bls.n	80089e4 <_fwalk_sglue+0x38>
 80089d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80089d8:	3301      	adds	r3, #1
 80089da:	d003      	beq.n	80089e4 <_fwalk_sglue+0x38>
 80089dc:	4629      	mov	r1, r5
 80089de:	4638      	mov	r0, r7
 80089e0:	47c0      	blx	r8
 80089e2:	4306      	orrs	r6, r0
 80089e4:	3568      	adds	r5, #104	; 0x68
 80089e6:	e7e9      	b.n	80089bc <_fwalk_sglue+0x10>

080089e8 <siprintf>:
 80089e8:	b40e      	push	{r1, r2, r3}
 80089ea:	b500      	push	{lr}
 80089ec:	b09c      	sub	sp, #112	; 0x70
 80089ee:	ab1d      	add	r3, sp, #116	; 0x74
 80089f0:	9002      	str	r0, [sp, #8]
 80089f2:	9006      	str	r0, [sp, #24]
 80089f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80089f8:	4809      	ldr	r0, [pc, #36]	; (8008a20 <siprintf+0x38>)
 80089fa:	9107      	str	r1, [sp, #28]
 80089fc:	9104      	str	r1, [sp, #16]
 80089fe:	4909      	ldr	r1, [pc, #36]	; (8008a24 <siprintf+0x3c>)
 8008a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a04:	9105      	str	r1, [sp, #20]
 8008a06:	6800      	ldr	r0, [r0, #0]
 8008a08:	9301      	str	r3, [sp, #4]
 8008a0a:	a902      	add	r1, sp, #8
 8008a0c:	f001 fc20 	bl	800a250 <_svfiprintf_r>
 8008a10:	9b02      	ldr	r3, [sp, #8]
 8008a12:	2200      	movs	r2, #0
 8008a14:	701a      	strb	r2, [r3, #0]
 8008a16:	b01c      	add	sp, #112	; 0x70
 8008a18:	f85d eb04 	ldr.w	lr, [sp], #4
 8008a1c:	b003      	add	sp, #12
 8008a1e:	4770      	bx	lr
 8008a20:	20000070 	.word	0x20000070
 8008a24:	ffff0208 	.word	0xffff0208

08008a28 <__sread>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a30:	f000 f86c 	bl	8008b0c <_read_r>
 8008a34:	2800      	cmp	r0, #0
 8008a36:	bfab      	itete	ge
 8008a38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008a3a:	89a3      	ldrhlt	r3, [r4, #12]
 8008a3c:	181b      	addge	r3, r3, r0
 8008a3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008a42:	bfac      	ite	ge
 8008a44:	6563      	strge	r3, [r4, #84]	; 0x54
 8008a46:	81a3      	strhlt	r3, [r4, #12]
 8008a48:	bd10      	pop	{r4, pc}

08008a4a <__swrite>:
 8008a4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a4e:	461f      	mov	r7, r3
 8008a50:	898b      	ldrh	r3, [r1, #12]
 8008a52:	05db      	lsls	r3, r3, #23
 8008a54:	4605      	mov	r5, r0
 8008a56:	460c      	mov	r4, r1
 8008a58:	4616      	mov	r6, r2
 8008a5a:	d505      	bpl.n	8008a68 <__swrite+0x1e>
 8008a5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a60:	2302      	movs	r3, #2
 8008a62:	2200      	movs	r2, #0
 8008a64:	f000 f840 	bl	8008ae8 <_lseek_r>
 8008a68:	89a3      	ldrh	r3, [r4, #12]
 8008a6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008a72:	81a3      	strh	r3, [r4, #12]
 8008a74:	4632      	mov	r2, r6
 8008a76:	463b      	mov	r3, r7
 8008a78:	4628      	mov	r0, r5
 8008a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a7e:	f000 b857 	b.w	8008b30 <_write_r>

08008a82 <__sseek>:
 8008a82:	b510      	push	{r4, lr}
 8008a84:	460c      	mov	r4, r1
 8008a86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a8a:	f000 f82d 	bl	8008ae8 <_lseek_r>
 8008a8e:	1c43      	adds	r3, r0, #1
 8008a90:	89a3      	ldrh	r3, [r4, #12]
 8008a92:	bf15      	itete	ne
 8008a94:	6560      	strne	r0, [r4, #84]	; 0x54
 8008a96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008a9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008a9e:	81a3      	strheq	r3, [r4, #12]
 8008aa0:	bf18      	it	ne
 8008aa2:	81a3      	strhne	r3, [r4, #12]
 8008aa4:	bd10      	pop	{r4, pc}

08008aa6 <__sclose>:
 8008aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008aaa:	f000 b80d 	b.w	8008ac8 <_close_r>

08008aae <memset>:
 8008aae:	4402      	add	r2, r0
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	4293      	cmp	r3, r2
 8008ab4:	d100      	bne.n	8008ab8 <memset+0xa>
 8008ab6:	4770      	bx	lr
 8008ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8008abc:	e7f9      	b.n	8008ab2 <memset+0x4>
	...

08008ac0 <_localeconv_r>:
 8008ac0:	4800      	ldr	r0, [pc, #0]	; (8008ac4 <_localeconv_r+0x4>)
 8008ac2:	4770      	bx	lr
 8008ac4:	20000164 	.word	0x20000164

08008ac8 <_close_r>:
 8008ac8:	b538      	push	{r3, r4, r5, lr}
 8008aca:	4d06      	ldr	r5, [pc, #24]	; (8008ae4 <_close_r+0x1c>)
 8008acc:	2300      	movs	r3, #0
 8008ace:	4604      	mov	r4, r0
 8008ad0:	4608      	mov	r0, r1
 8008ad2:	602b      	str	r3, [r5, #0]
 8008ad4:	f7f9 f96f 	bl	8001db6 <_close>
 8008ad8:	1c43      	adds	r3, r0, #1
 8008ada:	d102      	bne.n	8008ae2 <_close_r+0x1a>
 8008adc:	682b      	ldr	r3, [r5, #0]
 8008ade:	b103      	cbz	r3, 8008ae2 <_close_r+0x1a>
 8008ae0:	6023      	str	r3, [r4, #0]
 8008ae2:	bd38      	pop	{r3, r4, r5, pc}
 8008ae4:	2000061c 	.word	0x2000061c

08008ae8 <_lseek_r>:
 8008ae8:	b538      	push	{r3, r4, r5, lr}
 8008aea:	4d07      	ldr	r5, [pc, #28]	; (8008b08 <_lseek_r+0x20>)
 8008aec:	4604      	mov	r4, r0
 8008aee:	4608      	mov	r0, r1
 8008af0:	4611      	mov	r1, r2
 8008af2:	2200      	movs	r2, #0
 8008af4:	602a      	str	r2, [r5, #0]
 8008af6:	461a      	mov	r2, r3
 8008af8:	f7f9 f984 	bl	8001e04 <_lseek>
 8008afc:	1c43      	adds	r3, r0, #1
 8008afe:	d102      	bne.n	8008b06 <_lseek_r+0x1e>
 8008b00:	682b      	ldr	r3, [r5, #0]
 8008b02:	b103      	cbz	r3, 8008b06 <_lseek_r+0x1e>
 8008b04:	6023      	str	r3, [r4, #0]
 8008b06:	bd38      	pop	{r3, r4, r5, pc}
 8008b08:	2000061c 	.word	0x2000061c

08008b0c <_read_r>:
 8008b0c:	b538      	push	{r3, r4, r5, lr}
 8008b0e:	4d07      	ldr	r5, [pc, #28]	; (8008b2c <_read_r+0x20>)
 8008b10:	4604      	mov	r4, r0
 8008b12:	4608      	mov	r0, r1
 8008b14:	4611      	mov	r1, r2
 8008b16:	2200      	movs	r2, #0
 8008b18:	602a      	str	r2, [r5, #0]
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f7f9 f912 	bl	8001d44 <_read>
 8008b20:	1c43      	adds	r3, r0, #1
 8008b22:	d102      	bne.n	8008b2a <_read_r+0x1e>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b103      	cbz	r3, 8008b2a <_read_r+0x1e>
 8008b28:	6023      	str	r3, [r4, #0]
 8008b2a:	bd38      	pop	{r3, r4, r5, pc}
 8008b2c:	2000061c 	.word	0x2000061c

08008b30 <_write_r>:
 8008b30:	b538      	push	{r3, r4, r5, lr}
 8008b32:	4d07      	ldr	r5, [pc, #28]	; (8008b50 <_write_r+0x20>)
 8008b34:	4604      	mov	r4, r0
 8008b36:	4608      	mov	r0, r1
 8008b38:	4611      	mov	r1, r2
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	602a      	str	r2, [r5, #0]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f7f9 f91d 	bl	8001d7e <_write>
 8008b44:	1c43      	adds	r3, r0, #1
 8008b46:	d102      	bne.n	8008b4e <_write_r+0x1e>
 8008b48:	682b      	ldr	r3, [r5, #0]
 8008b4a:	b103      	cbz	r3, 8008b4e <_write_r+0x1e>
 8008b4c:	6023      	str	r3, [r4, #0]
 8008b4e:	bd38      	pop	{r3, r4, r5, pc}
 8008b50:	2000061c 	.word	0x2000061c

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000070 	.word	0x20000070

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4d0d      	ldr	r5, [pc, #52]	; (8008b98 <__libc_init_array+0x38>)
 8008b64:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b66:	1b64      	subs	r4, r4, r5
 8008b68:	10a4      	asrs	r4, r4, #2
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	4d0b      	ldr	r5, [pc, #44]	; (8008ba0 <__libc_init_array+0x40>)
 8008b72:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <__libc_init_array+0x44>)
 8008b74:	f002 f894 	bl	800aca0 <_init>
 8008b78:	1b64      	subs	r4, r4, r5
 8008b7a:	10a4      	asrs	r4, r4, #2
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	0800b0ec 	.word	0x0800b0ec
 8008b9c:	0800b0ec 	.word	0x0800b0ec
 8008ba0:	0800b0ec 	.word	0x0800b0ec
 8008ba4:	0800b0f0 	.word	0x0800b0f0

08008ba8 <__retarget_lock_init_recursive>:
 8008ba8:	4770      	bx	lr

08008baa <__retarget_lock_acquire_recursive>:
 8008baa:	4770      	bx	lr

08008bac <__retarget_lock_release_recursive>:
 8008bac:	4770      	bx	lr

08008bae <quorem>:
 8008bae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb2:	6903      	ldr	r3, [r0, #16]
 8008bb4:	690c      	ldr	r4, [r1, #16]
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	4607      	mov	r7, r0
 8008bba:	db7e      	blt.n	8008cba <quorem+0x10c>
 8008bbc:	3c01      	subs	r4, #1
 8008bbe:	f101 0814 	add.w	r8, r1, #20
 8008bc2:	f100 0514 	add.w	r5, r0, #20
 8008bc6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008bd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	429a      	cmp	r2, r3
 8008bd8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008bdc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008be0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008be4:	d331      	bcc.n	8008c4a <quorem+0x9c>
 8008be6:	f04f 0e00 	mov.w	lr, #0
 8008bea:	4640      	mov	r0, r8
 8008bec:	46ac      	mov	ip, r5
 8008bee:	46f2      	mov	sl, lr
 8008bf0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008bf4:	b293      	uxth	r3, r2
 8008bf6:	fb06 e303 	mla	r3, r6, r3, lr
 8008bfa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008bfe:	0c1a      	lsrs	r2, r3, #16
 8008c00:	b29b      	uxth	r3, r3
 8008c02:	ebaa 0303 	sub.w	r3, sl, r3
 8008c06:	f8dc a000 	ldr.w	sl, [ip]
 8008c0a:	fa13 f38a 	uxtah	r3, r3, sl
 8008c0e:	fb06 220e 	mla	r2, r6, lr, r2
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	9b00      	ldr	r3, [sp, #0]
 8008c16:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008c1a:	b292      	uxth	r2, r2
 8008c1c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008c20:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c24:	f8bd 3000 	ldrh.w	r3, [sp]
 8008c28:	4581      	cmp	r9, r0
 8008c2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008c32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008c36:	d2db      	bcs.n	8008bf0 <quorem+0x42>
 8008c38:	f855 300b 	ldr.w	r3, [r5, fp]
 8008c3c:	b92b      	cbnz	r3, 8008c4a <quorem+0x9c>
 8008c3e:	9b01      	ldr	r3, [sp, #4]
 8008c40:	3b04      	subs	r3, #4
 8008c42:	429d      	cmp	r5, r3
 8008c44:	461a      	mov	r2, r3
 8008c46:	d32c      	bcc.n	8008ca2 <quorem+0xf4>
 8008c48:	613c      	str	r4, [r7, #16]
 8008c4a:	4638      	mov	r0, r7
 8008c4c:	f001 f9a6 	bl	8009f9c <__mcmp>
 8008c50:	2800      	cmp	r0, #0
 8008c52:	db22      	blt.n	8008c9a <quorem+0xec>
 8008c54:	3601      	adds	r6, #1
 8008c56:	4629      	mov	r1, r5
 8008c58:	2000      	movs	r0, #0
 8008c5a:	f858 2b04 	ldr.w	r2, [r8], #4
 8008c5e:	f8d1 c000 	ldr.w	ip, [r1]
 8008c62:	b293      	uxth	r3, r2
 8008c64:	1ac3      	subs	r3, r0, r3
 8008c66:	0c12      	lsrs	r2, r2, #16
 8008c68:	fa13 f38c 	uxtah	r3, r3, ip
 8008c6c:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008c70:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008c74:	b29b      	uxth	r3, r3
 8008c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008c7a:	45c1      	cmp	r9, r8
 8008c7c:	f841 3b04 	str.w	r3, [r1], #4
 8008c80:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008c84:	d2e9      	bcs.n	8008c5a <quorem+0xac>
 8008c86:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008c8a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008c8e:	b922      	cbnz	r2, 8008c9a <quorem+0xec>
 8008c90:	3b04      	subs	r3, #4
 8008c92:	429d      	cmp	r5, r3
 8008c94:	461a      	mov	r2, r3
 8008c96:	d30a      	bcc.n	8008cae <quorem+0x100>
 8008c98:	613c      	str	r4, [r7, #16]
 8008c9a:	4630      	mov	r0, r6
 8008c9c:	b003      	add	sp, #12
 8008c9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ca2:	6812      	ldr	r2, [r2, #0]
 8008ca4:	3b04      	subs	r3, #4
 8008ca6:	2a00      	cmp	r2, #0
 8008ca8:	d1ce      	bne.n	8008c48 <quorem+0x9a>
 8008caa:	3c01      	subs	r4, #1
 8008cac:	e7c9      	b.n	8008c42 <quorem+0x94>
 8008cae:	6812      	ldr	r2, [r2, #0]
 8008cb0:	3b04      	subs	r3, #4
 8008cb2:	2a00      	cmp	r2, #0
 8008cb4:	d1f0      	bne.n	8008c98 <quorem+0xea>
 8008cb6:	3c01      	subs	r4, #1
 8008cb8:	e7eb      	b.n	8008c92 <quorem+0xe4>
 8008cba:	2000      	movs	r0, #0
 8008cbc:	e7ee      	b.n	8008c9c <quorem+0xee>
	...

08008cc0 <_dtoa_r>:
 8008cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cc4:	ed2d 8b04 	vpush	{d8-d9}
 8008cc8:	69c5      	ldr	r5, [r0, #28]
 8008cca:	b093      	sub	sp, #76	; 0x4c
 8008ccc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008cd0:	ec57 6b10 	vmov	r6, r7, d0
 8008cd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008cd8:	9107      	str	r1, [sp, #28]
 8008cda:	4604      	mov	r4, r0
 8008cdc:	920a      	str	r2, [sp, #40]	; 0x28
 8008cde:	930d      	str	r3, [sp, #52]	; 0x34
 8008ce0:	b975      	cbnz	r5, 8008d00 <_dtoa_r+0x40>
 8008ce2:	2010      	movs	r0, #16
 8008ce4:	f000 fe2a 	bl	800993c <malloc>
 8008ce8:	4602      	mov	r2, r0
 8008cea:	61e0      	str	r0, [r4, #28]
 8008cec:	b920      	cbnz	r0, 8008cf8 <_dtoa_r+0x38>
 8008cee:	4bae      	ldr	r3, [pc, #696]	; (8008fa8 <_dtoa_r+0x2e8>)
 8008cf0:	21ef      	movs	r1, #239	; 0xef
 8008cf2:	48ae      	ldr	r0, [pc, #696]	; (8008fac <_dtoa_r+0x2ec>)
 8008cf4:	f001 fc90 	bl	800a618 <__assert_func>
 8008cf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008cfc:	6005      	str	r5, [r0, #0]
 8008cfe:	60c5      	str	r5, [r0, #12]
 8008d00:	69e3      	ldr	r3, [r4, #28]
 8008d02:	6819      	ldr	r1, [r3, #0]
 8008d04:	b151      	cbz	r1, 8008d1c <_dtoa_r+0x5c>
 8008d06:	685a      	ldr	r2, [r3, #4]
 8008d08:	604a      	str	r2, [r1, #4]
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	4093      	lsls	r3, r2
 8008d0e:	608b      	str	r3, [r1, #8]
 8008d10:	4620      	mov	r0, r4
 8008d12:	f000 ff07 	bl	8009b24 <_Bfree>
 8008d16:	69e3      	ldr	r3, [r4, #28]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	601a      	str	r2, [r3, #0]
 8008d1c:	1e3b      	subs	r3, r7, #0
 8008d1e:	bfbb      	ittet	lt
 8008d20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008d24:	9303      	strlt	r3, [sp, #12]
 8008d26:	2300      	movge	r3, #0
 8008d28:	2201      	movlt	r2, #1
 8008d2a:	bfac      	ite	ge
 8008d2c:	f8c8 3000 	strge.w	r3, [r8]
 8008d30:	f8c8 2000 	strlt.w	r2, [r8]
 8008d34:	4b9e      	ldr	r3, [pc, #632]	; (8008fb0 <_dtoa_r+0x2f0>)
 8008d36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008d3a:	ea33 0308 	bics.w	r3, r3, r8
 8008d3e:	d11b      	bne.n	8008d78 <_dtoa_r+0xb8>
 8008d40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d42:	f242 730f 	movw	r3, #9999	; 0x270f
 8008d46:	6013      	str	r3, [r2, #0]
 8008d48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008d4c:	4333      	orrs	r3, r6
 8008d4e:	f000 8593 	beq.w	8009878 <_dtoa_r+0xbb8>
 8008d52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d54:	b963      	cbnz	r3, 8008d70 <_dtoa_r+0xb0>
 8008d56:	4b97      	ldr	r3, [pc, #604]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d58:	e027      	b.n	8008daa <_dtoa_r+0xea>
 8008d5a:	4b97      	ldr	r3, [pc, #604]	; (8008fb8 <_dtoa_r+0x2f8>)
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	3308      	adds	r3, #8
 8008d60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	9800      	ldr	r0, [sp, #0]
 8008d66:	b013      	add	sp, #76	; 0x4c
 8008d68:	ecbd 8b04 	vpop	{d8-d9}
 8008d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d70:	4b90      	ldr	r3, [pc, #576]	; (8008fb4 <_dtoa_r+0x2f4>)
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	3303      	adds	r3, #3
 8008d76:	e7f3      	b.n	8008d60 <_dtoa_r+0xa0>
 8008d78:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	ec51 0b17 	vmov	r0, r1, d7
 8008d82:	eeb0 8a47 	vmov.f32	s16, s14
 8008d86:	eef0 8a67 	vmov.f32	s17, s15
 8008d8a:	2300      	movs	r3, #0
 8008d8c:	f7f7 fe9c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d90:	4681      	mov	r9, r0
 8008d92:	b160      	cbz	r0, 8008dae <_dtoa_r+0xee>
 8008d94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d96:	2301      	movs	r3, #1
 8008d98:	6013      	str	r3, [r2, #0]
 8008d9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	f000 8568 	beq.w	8009872 <_dtoa_r+0xbb2>
 8008da2:	4b86      	ldr	r3, [pc, #536]	; (8008fbc <_dtoa_r+0x2fc>)
 8008da4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008da6:	6013      	str	r3, [r2, #0]
 8008da8:	3b01      	subs	r3, #1
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	e7da      	b.n	8008d64 <_dtoa_r+0xa4>
 8008dae:	aa10      	add	r2, sp, #64	; 0x40
 8008db0:	a911      	add	r1, sp, #68	; 0x44
 8008db2:	4620      	mov	r0, r4
 8008db4:	eeb0 0a48 	vmov.f32	s0, s16
 8008db8:	eef0 0a68 	vmov.f32	s1, s17
 8008dbc:	f001 f994 	bl	800a0e8 <__d2b>
 8008dc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008dc4:	4682      	mov	sl, r0
 8008dc6:	2d00      	cmp	r5, #0
 8008dc8:	d07f      	beq.n	8008eca <_dtoa_r+0x20a>
 8008dca:	ee18 3a90 	vmov	r3, s17
 8008dce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008dd2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008dd6:	ec51 0b18 	vmov	r0, r1, d8
 8008dda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008dde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008de2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008de6:	4619      	mov	r1, r3
 8008de8:	2200      	movs	r2, #0
 8008dea:	4b75      	ldr	r3, [pc, #468]	; (8008fc0 <_dtoa_r+0x300>)
 8008dec:	f7f7 fa4c 	bl	8000288 <__aeabi_dsub>
 8008df0:	a367      	add	r3, pc, #412	; (adr r3, 8008f90 <_dtoa_r+0x2d0>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fbff 	bl	80005f8 <__aeabi_dmul>
 8008dfa:	a367      	add	r3, pc, #412	; (adr r3, 8008f98 <_dtoa_r+0x2d8>)
 8008dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e00:	f7f7 fa44 	bl	800028c <__adddf3>
 8008e04:	4606      	mov	r6, r0
 8008e06:	4628      	mov	r0, r5
 8008e08:	460f      	mov	r7, r1
 8008e0a:	f7f7 fb8b 	bl	8000524 <__aeabi_i2d>
 8008e0e:	a364      	add	r3, pc, #400	; (adr r3, 8008fa0 <_dtoa_r+0x2e0>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	f7f7 fbf0 	bl	80005f8 <__aeabi_dmul>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	f7f7 fa34 	bl	800028c <__adddf3>
 8008e24:	4606      	mov	r6, r0
 8008e26:	460f      	mov	r7, r1
 8008e28:	f7f7 fe96 	bl	8000b58 <__aeabi_d2iz>
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	4683      	mov	fp, r0
 8008e30:	2300      	movs	r3, #0
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 fe51 	bl	8000adc <__aeabi_dcmplt>
 8008e3a:	b148      	cbz	r0, 8008e50 <_dtoa_r+0x190>
 8008e3c:	4658      	mov	r0, fp
 8008e3e:	f7f7 fb71 	bl	8000524 <__aeabi_i2d>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	f7f7 fe3f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4a:	b908      	cbnz	r0, 8008e50 <_dtoa_r+0x190>
 8008e4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e50:	f1bb 0f16 	cmp.w	fp, #22
 8008e54:	d857      	bhi.n	8008f06 <_dtoa_r+0x246>
 8008e56:	4b5b      	ldr	r3, [pc, #364]	; (8008fc4 <_dtoa_r+0x304>)
 8008e58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e60:	ec51 0b18 	vmov	r0, r1, d8
 8008e64:	f7f7 fe3a 	bl	8000adc <__aeabi_dcmplt>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	d04e      	beq.n	8008f0a <_dtoa_r+0x24a>
 8008e6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008e70:	2300      	movs	r3, #0
 8008e72:	930c      	str	r3, [sp, #48]	; 0x30
 8008e74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008e76:	1b5b      	subs	r3, r3, r5
 8008e78:	1e5a      	subs	r2, r3, #1
 8008e7a:	bf45      	ittet	mi
 8008e7c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008e80:	9305      	strmi	r3, [sp, #20]
 8008e82:	2300      	movpl	r3, #0
 8008e84:	2300      	movmi	r3, #0
 8008e86:	9206      	str	r2, [sp, #24]
 8008e88:	bf54      	ite	pl
 8008e8a:	9305      	strpl	r3, [sp, #20]
 8008e8c:	9306      	strmi	r3, [sp, #24]
 8008e8e:	f1bb 0f00 	cmp.w	fp, #0
 8008e92:	db3c      	blt.n	8008f0e <_dtoa_r+0x24e>
 8008e94:	9b06      	ldr	r3, [sp, #24]
 8008e96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008e9a:	445b      	add	r3, fp
 8008e9c:	9306      	str	r3, [sp, #24]
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	9308      	str	r3, [sp, #32]
 8008ea2:	9b07      	ldr	r3, [sp, #28]
 8008ea4:	2b09      	cmp	r3, #9
 8008ea6:	d868      	bhi.n	8008f7a <_dtoa_r+0x2ba>
 8008ea8:	2b05      	cmp	r3, #5
 8008eaa:	bfc4      	itt	gt
 8008eac:	3b04      	subgt	r3, #4
 8008eae:	9307      	strgt	r3, [sp, #28]
 8008eb0:	9b07      	ldr	r3, [sp, #28]
 8008eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8008eb6:	bfcc      	ite	gt
 8008eb8:	2500      	movgt	r5, #0
 8008eba:	2501      	movle	r5, #1
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	f200 8085 	bhi.w	8008fcc <_dtoa_r+0x30c>
 8008ec2:	e8df f003 	tbb	[pc, r3]
 8008ec6:	3b2e      	.short	0x3b2e
 8008ec8:	5839      	.short	0x5839
 8008eca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008ece:	441d      	add	r5, r3
 8008ed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008ed4:	2b20      	cmp	r3, #32
 8008ed6:	bfc1      	itttt	gt
 8008ed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008edc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008ee0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008ee4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008ee8:	bfd6      	itet	le
 8008eea:	f1c3 0320 	rsble	r3, r3, #32
 8008eee:	ea48 0003 	orrgt.w	r0, r8, r3
 8008ef2:	fa06 f003 	lslle.w	r0, r6, r3
 8008ef6:	f7f7 fb05 	bl	8000504 <__aeabi_ui2d>
 8008efa:	2201      	movs	r2, #1
 8008efc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008f00:	3d01      	subs	r5, #1
 8008f02:	920e      	str	r2, [sp, #56]	; 0x38
 8008f04:	e76f      	b.n	8008de6 <_dtoa_r+0x126>
 8008f06:	2301      	movs	r3, #1
 8008f08:	e7b3      	b.n	8008e72 <_dtoa_r+0x1b2>
 8008f0a:	900c      	str	r0, [sp, #48]	; 0x30
 8008f0c:	e7b2      	b.n	8008e74 <_dtoa_r+0x1b4>
 8008f0e:	9b05      	ldr	r3, [sp, #20]
 8008f10:	eba3 030b 	sub.w	r3, r3, fp
 8008f14:	9305      	str	r3, [sp, #20]
 8008f16:	f1cb 0300 	rsb	r3, fp, #0
 8008f1a:	9308      	str	r3, [sp, #32]
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	930b      	str	r3, [sp, #44]	; 0x2c
 8008f20:	e7bf      	b.n	8008ea2 <_dtoa_r+0x1e2>
 8008f22:	2300      	movs	r3, #0
 8008f24:	9309      	str	r3, [sp, #36]	; 0x24
 8008f26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	dc52      	bgt.n	8008fd2 <_dtoa_r+0x312>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	9301      	str	r3, [sp, #4]
 8008f30:	9304      	str	r3, [sp, #16]
 8008f32:	461a      	mov	r2, r3
 8008f34:	920a      	str	r2, [sp, #40]	; 0x28
 8008f36:	e00b      	b.n	8008f50 <_dtoa_r+0x290>
 8008f38:	2301      	movs	r3, #1
 8008f3a:	e7f3      	b.n	8008f24 <_dtoa_r+0x264>
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f42:	445b      	add	r3, fp
 8008f44:	9301      	str	r3, [sp, #4]
 8008f46:	3301      	adds	r3, #1
 8008f48:	2b01      	cmp	r3, #1
 8008f4a:	9304      	str	r3, [sp, #16]
 8008f4c:	bfb8      	it	lt
 8008f4e:	2301      	movlt	r3, #1
 8008f50:	69e0      	ldr	r0, [r4, #28]
 8008f52:	2100      	movs	r1, #0
 8008f54:	2204      	movs	r2, #4
 8008f56:	f102 0614 	add.w	r6, r2, #20
 8008f5a:	429e      	cmp	r6, r3
 8008f5c:	d93d      	bls.n	8008fda <_dtoa_r+0x31a>
 8008f5e:	6041      	str	r1, [r0, #4]
 8008f60:	4620      	mov	r0, r4
 8008f62:	f000 fd9f 	bl	8009aa4 <_Balloc>
 8008f66:	9000      	str	r0, [sp, #0]
 8008f68:	2800      	cmp	r0, #0
 8008f6a:	d139      	bne.n	8008fe0 <_dtoa_r+0x320>
 8008f6c:	4b16      	ldr	r3, [pc, #88]	; (8008fc8 <_dtoa_r+0x308>)
 8008f6e:	4602      	mov	r2, r0
 8008f70:	f240 11af 	movw	r1, #431	; 0x1af
 8008f74:	e6bd      	b.n	8008cf2 <_dtoa_r+0x32>
 8008f76:	2301      	movs	r3, #1
 8008f78:	e7e1      	b.n	8008f3e <_dtoa_r+0x27e>
 8008f7a:	2501      	movs	r5, #1
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	9509      	str	r5, [sp, #36]	; 0x24
 8008f82:	f04f 33ff 	mov.w	r3, #4294967295
 8008f86:	9301      	str	r3, [sp, #4]
 8008f88:	9304      	str	r3, [sp, #16]
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	2312      	movs	r3, #18
 8008f8e:	e7d1      	b.n	8008f34 <_dtoa_r+0x274>
 8008f90:	636f4361 	.word	0x636f4361
 8008f94:	3fd287a7 	.word	0x3fd287a7
 8008f98:	8b60c8b3 	.word	0x8b60c8b3
 8008f9c:	3fc68a28 	.word	0x3fc68a28
 8008fa0:	509f79fb 	.word	0x509f79fb
 8008fa4:	3fd34413 	.word	0x3fd34413
 8008fa8:	0800adb1 	.word	0x0800adb1
 8008fac:	0800adc8 	.word	0x0800adc8
 8008fb0:	7ff00000 	.word	0x7ff00000
 8008fb4:	0800adad 	.word	0x0800adad
 8008fb8:	0800ada4 	.word	0x0800ada4
 8008fbc:	0800ad81 	.word	0x0800ad81
 8008fc0:	3ff80000 	.word	0x3ff80000
 8008fc4:	0800aeb8 	.word	0x0800aeb8
 8008fc8:	0800ae20 	.word	0x0800ae20
 8008fcc:	2301      	movs	r3, #1
 8008fce:	9309      	str	r3, [sp, #36]	; 0x24
 8008fd0:	e7d7      	b.n	8008f82 <_dtoa_r+0x2c2>
 8008fd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	9304      	str	r3, [sp, #16]
 8008fd8:	e7ba      	b.n	8008f50 <_dtoa_r+0x290>
 8008fda:	3101      	adds	r1, #1
 8008fdc:	0052      	lsls	r2, r2, #1
 8008fde:	e7ba      	b.n	8008f56 <_dtoa_r+0x296>
 8008fe0:	69e3      	ldr	r3, [r4, #28]
 8008fe2:	9a00      	ldr	r2, [sp, #0]
 8008fe4:	601a      	str	r2, [r3, #0]
 8008fe6:	9b04      	ldr	r3, [sp, #16]
 8008fe8:	2b0e      	cmp	r3, #14
 8008fea:	f200 80a8 	bhi.w	800913e <_dtoa_r+0x47e>
 8008fee:	2d00      	cmp	r5, #0
 8008ff0:	f000 80a5 	beq.w	800913e <_dtoa_r+0x47e>
 8008ff4:	f1bb 0f00 	cmp.w	fp, #0
 8008ff8:	dd38      	ble.n	800906c <_dtoa_r+0x3ac>
 8008ffa:	4bc0      	ldr	r3, [pc, #768]	; (80092fc <_dtoa_r+0x63c>)
 8008ffc:	f00b 020f 	and.w	r2, fp, #15
 8009000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009008:	e9d3 6700 	ldrd	r6, r7, [r3]
 800900c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009010:	d019      	beq.n	8009046 <_dtoa_r+0x386>
 8009012:	4bbb      	ldr	r3, [pc, #748]	; (8009300 <_dtoa_r+0x640>)
 8009014:	ec51 0b18 	vmov	r0, r1, d8
 8009018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800901c:	f7f7 fc16 	bl	800084c <__aeabi_ddiv>
 8009020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009024:	f008 080f 	and.w	r8, r8, #15
 8009028:	2503      	movs	r5, #3
 800902a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009300 <_dtoa_r+0x640>
 800902e:	f1b8 0f00 	cmp.w	r8, #0
 8009032:	d10a      	bne.n	800904a <_dtoa_r+0x38a>
 8009034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	f7f7 fc06 	bl	800084c <__aeabi_ddiv>
 8009040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009044:	e02b      	b.n	800909e <_dtoa_r+0x3de>
 8009046:	2502      	movs	r5, #2
 8009048:	e7ef      	b.n	800902a <_dtoa_r+0x36a>
 800904a:	f018 0f01 	tst.w	r8, #1
 800904e:	d008      	beq.n	8009062 <_dtoa_r+0x3a2>
 8009050:	4630      	mov	r0, r6
 8009052:	4639      	mov	r1, r7
 8009054:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009058:	f7f7 face 	bl	80005f8 <__aeabi_dmul>
 800905c:	3501      	adds	r5, #1
 800905e:	4606      	mov	r6, r0
 8009060:	460f      	mov	r7, r1
 8009062:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009066:	f109 0908 	add.w	r9, r9, #8
 800906a:	e7e0      	b.n	800902e <_dtoa_r+0x36e>
 800906c:	f000 809f 	beq.w	80091ae <_dtoa_r+0x4ee>
 8009070:	f1cb 0600 	rsb	r6, fp, #0
 8009074:	4ba1      	ldr	r3, [pc, #644]	; (80092fc <_dtoa_r+0x63c>)
 8009076:	4fa2      	ldr	r7, [pc, #648]	; (8009300 <_dtoa_r+0x640>)
 8009078:	f006 020f 	and.w	r2, r6, #15
 800907c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009084:	ec51 0b18 	vmov	r0, r1, d8
 8009088:	f7f7 fab6 	bl	80005f8 <__aeabi_dmul>
 800908c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009090:	1136      	asrs	r6, r6, #4
 8009092:	2300      	movs	r3, #0
 8009094:	2502      	movs	r5, #2
 8009096:	2e00      	cmp	r6, #0
 8009098:	d17e      	bne.n	8009198 <_dtoa_r+0x4d8>
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1d0      	bne.n	8009040 <_dtoa_r+0x380>
 800909e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	f000 8084 	beq.w	80091b2 <_dtoa_r+0x4f2>
 80090aa:	4b96      	ldr	r3, [pc, #600]	; (8009304 <_dtoa_r+0x644>)
 80090ac:	2200      	movs	r2, #0
 80090ae:	4640      	mov	r0, r8
 80090b0:	4649      	mov	r1, r9
 80090b2:	f7f7 fd13 	bl	8000adc <__aeabi_dcmplt>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	d07b      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090ba:	9b04      	ldr	r3, [sp, #16]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d078      	beq.n	80091b2 <_dtoa_r+0x4f2>
 80090c0:	9b01      	ldr	r3, [sp, #4]
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dd39      	ble.n	800913a <_dtoa_r+0x47a>
 80090c6:	4b90      	ldr	r3, [pc, #576]	; (8009308 <_dtoa_r+0x648>)
 80090c8:	2200      	movs	r2, #0
 80090ca:	4640      	mov	r0, r8
 80090cc:	4649      	mov	r1, r9
 80090ce:	f7f7 fa93 	bl	80005f8 <__aeabi_dmul>
 80090d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80090d6:	9e01      	ldr	r6, [sp, #4]
 80090d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 80090dc:	3501      	adds	r5, #1
 80090de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80090e2:	4628      	mov	r0, r5
 80090e4:	f7f7 fa1e 	bl	8000524 <__aeabi_i2d>
 80090e8:	4642      	mov	r2, r8
 80090ea:	464b      	mov	r3, r9
 80090ec:	f7f7 fa84 	bl	80005f8 <__aeabi_dmul>
 80090f0:	4b86      	ldr	r3, [pc, #536]	; (800930c <_dtoa_r+0x64c>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	f7f7 f8ca 	bl	800028c <__adddf3>
 80090f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80090fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009100:	9303      	str	r3, [sp, #12]
 8009102:	2e00      	cmp	r6, #0
 8009104:	d158      	bne.n	80091b8 <_dtoa_r+0x4f8>
 8009106:	4b82      	ldr	r3, [pc, #520]	; (8009310 <_dtoa_r+0x650>)
 8009108:	2200      	movs	r2, #0
 800910a:	4640      	mov	r0, r8
 800910c:	4649      	mov	r1, r9
 800910e:	f7f7 f8bb 	bl	8000288 <__aeabi_dsub>
 8009112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009116:	4680      	mov	r8, r0
 8009118:	4689      	mov	r9, r1
 800911a:	f7f7 fcfd 	bl	8000b18 <__aeabi_dcmpgt>
 800911e:	2800      	cmp	r0, #0
 8009120:	f040 8296 	bne.w	8009650 <_dtoa_r+0x990>
 8009124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009128:	4640      	mov	r0, r8
 800912a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800912e:	4649      	mov	r1, r9
 8009130:	f7f7 fcd4 	bl	8000adc <__aeabi_dcmplt>
 8009134:	2800      	cmp	r0, #0
 8009136:	f040 8289 	bne.w	800964c <_dtoa_r+0x98c>
 800913a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800913e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009140:	2b00      	cmp	r3, #0
 8009142:	f2c0 814e 	blt.w	80093e2 <_dtoa_r+0x722>
 8009146:	f1bb 0f0e 	cmp.w	fp, #14
 800914a:	f300 814a 	bgt.w	80093e2 <_dtoa_r+0x722>
 800914e:	4b6b      	ldr	r3, [pc, #428]	; (80092fc <_dtoa_r+0x63c>)
 8009150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009154:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800915a:	2b00      	cmp	r3, #0
 800915c:	f280 80dc 	bge.w	8009318 <_dtoa_r+0x658>
 8009160:	9b04      	ldr	r3, [sp, #16]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f300 80d8 	bgt.w	8009318 <_dtoa_r+0x658>
 8009168:	f040 826f 	bne.w	800964a <_dtoa_r+0x98a>
 800916c:	4b68      	ldr	r3, [pc, #416]	; (8009310 <_dtoa_r+0x650>)
 800916e:	2200      	movs	r2, #0
 8009170:	4640      	mov	r0, r8
 8009172:	4649      	mov	r1, r9
 8009174:	f7f7 fa40 	bl	80005f8 <__aeabi_dmul>
 8009178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800917c:	f7f7 fcc2 	bl	8000b04 <__aeabi_dcmpge>
 8009180:	9e04      	ldr	r6, [sp, #16]
 8009182:	4637      	mov	r7, r6
 8009184:	2800      	cmp	r0, #0
 8009186:	f040 8245 	bne.w	8009614 <_dtoa_r+0x954>
 800918a:	9d00      	ldr	r5, [sp, #0]
 800918c:	2331      	movs	r3, #49	; 0x31
 800918e:	f805 3b01 	strb.w	r3, [r5], #1
 8009192:	f10b 0b01 	add.w	fp, fp, #1
 8009196:	e241      	b.n	800961c <_dtoa_r+0x95c>
 8009198:	07f2      	lsls	r2, r6, #31
 800919a:	d505      	bpl.n	80091a8 <_dtoa_r+0x4e8>
 800919c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091a0:	f7f7 fa2a 	bl	80005f8 <__aeabi_dmul>
 80091a4:	3501      	adds	r5, #1
 80091a6:	2301      	movs	r3, #1
 80091a8:	1076      	asrs	r6, r6, #1
 80091aa:	3708      	adds	r7, #8
 80091ac:	e773      	b.n	8009096 <_dtoa_r+0x3d6>
 80091ae:	2502      	movs	r5, #2
 80091b0:	e775      	b.n	800909e <_dtoa_r+0x3de>
 80091b2:	9e04      	ldr	r6, [sp, #16]
 80091b4:	465f      	mov	r7, fp
 80091b6:	e792      	b.n	80090de <_dtoa_r+0x41e>
 80091b8:	9900      	ldr	r1, [sp, #0]
 80091ba:	4b50      	ldr	r3, [pc, #320]	; (80092fc <_dtoa_r+0x63c>)
 80091bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80091c0:	4431      	add	r1, r6
 80091c2:	9102      	str	r1, [sp, #8]
 80091c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80091c6:	eeb0 9a47 	vmov.f32	s18, s14
 80091ca:	eef0 9a67 	vmov.f32	s19, s15
 80091ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80091d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80091d6:	2900      	cmp	r1, #0
 80091d8:	d044      	beq.n	8009264 <_dtoa_r+0x5a4>
 80091da:	494e      	ldr	r1, [pc, #312]	; (8009314 <_dtoa_r+0x654>)
 80091dc:	2000      	movs	r0, #0
 80091de:	f7f7 fb35 	bl	800084c <__aeabi_ddiv>
 80091e2:	ec53 2b19 	vmov	r2, r3, d9
 80091e6:	f7f7 f84f 	bl	8000288 <__aeabi_dsub>
 80091ea:	9d00      	ldr	r5, [sp, #0]
 80091ec:	ec41 0b19 	vmov	d9, r0, r1
 80091f0:	4649      	mov	r1, r9
 80091f2:	4640      	mov	r0, r8
 80091f4:	f7f7 fcb0 	bl	8000b58 <__aeabi_d2iz>
 80091f8:	4606      	mov	r6, r0
 80091fa:	f7f7 f993 	bl	8000524 <__aeabi_i2d>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f83f 	bl	8000288 <__aeabi_dsub>
 800920a:	3630      	adds	r6, #48	; 0x30
 800920c:	f805 6b01 	strb.w	r6, [r5], #1
 8009210:	ec53 2b19 	vmov	r2, r3, d9
 8009214:	4680      	mov	r8, r0
 8009216:	4689      	mov	r9, r1
 8009218:	f7f7 fc60 	bl	8000adc <__aeabi_dcmplt>
 800921c:	2800      	cmp	r0, #0
 800921e:	d164      	bne.n	80092ea <_dtoa_r+0x62a>
 8009220:	4642      	mov	r2, r8
 8009222:	464b      	mov	r3, r9
 8009224:	4937      	ldr	r1, [pc, #220]	; (8009304 <_dtoa_r+0x644>)
 8009226:	2000      	movs	r0, #0
 8009228:	f7f7 f82e 	bl	8000288 <__aeabi_dsub>
 800922c:	ec53 2b19 	vmov	r2, r3, d9
 8009230:	f7f7 fc54 	bl	8000adc <__aeabi_dcmplt>
 8009234:	2800      	cmp	r0, #0
 8009236:	f040 80b6 	bne.w	80093a6 <_dtoa_r+0x6e6>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	429d      	cmp	r5, r3
 800923e:	f43f af7c 	beq.w	800913a <_dtoa_r+0x47a>
 8009242:	4b31      	ldr	r3, [pc, #196]	; (8009308 <_dtoa_r+0x648>)
 8009244:	ec51 0b19 	vmov	r0, r1, d9
 8009248:	2200      	movs	r2, #0
 800924a:	f7f7 f9d5 	bl	80005f8 <__aeabi_dmul>
 800924e:	4b2e      	ldr	r3, [pc, #184]	; (8009308 <_dtoa_r+0x648>)
 8009250:	ec41 0b19 	vmov	d9, r0, r1
 8009254:	2200      	movs	r2, #0
 8009256:	4640      	mov	r0, r8
 8009258:	4649      	mov	r1, r9
 800925a:	f7f7 f9cd 	bl	80005f8 <__aeabi_dmul>
 800925e:	4680      	mov	r8, r0
 8009260:	4689      	mov	r9, r1
 8009262:	e7c5      	b.n	80091f0 <_dtoa_r+0x530>
 8009264:	ec51 0b17 	vmov	r0, r1, d7
 8009268:	f7f7 f9c6 	bl	80005f8 <__aeabi_dmul>
 800926c:	9b02      	ldr	r3, [sp, #8]
 800926e:	9d00      	ldr	r5, [sp, #0]
 8009270:	930f      	str	r3, [sp, #60]	; 0x3c
 8009272:	ec41 0b19 	vmov	d9, r0, r1
 8009276:	4649      	mov	r1, r9
 8009278:	4640      	mov	r0, r8
 800927a:	f7f7 fc6d 	bl	8000b58 <__aeabi_d2iz>
 800927e:	4606      	mov	r6, r0
 8009280:	f7f7 f950 	bl	8000524 <__aeabi_i2d>
 8009284:	3630      	adds	r6, #48	; 0x30
 8009286:	4602      	mov	r2, r0
 8009288:	460b      	mov	r3, r1
 800928a:	4640      	mov	r0, r8
 800928c:	4649      	mov	r1, r9
 800928e:	f7f6 fffb 	bl	8000288 <__aeabi_dsub>
 8009292:	f805 6b01 	strb.w	r6, [r5], #1
 8009296:	9b02      	ldr	r3, [sp, #8]
 8009298:	429d      	cmp	r5, r3
 800929a:	4680      	mov	r8, r0
 800929c:	4689      	mov	r9, r1
 800929e:	f04f 0200 	mov.w	r2, #0
 80092a2:	d124      	bne.n	80092ee <_dtoa_r+0x62e>
 80092a4:	4b1b      	ldr	r3, [pc, #108]	; (8009314 <_dtoa_r+0x654>)
 80092a6:	ec51 0b19 	vmov	r0, r1, d9
 80092aa:	f7f6 ffef 	bl	800028c <__adddf3>
 80092ae:	4602      	mov	r2, r0
 80092b0:	460b      	mov	r3, r1
 80092b2:	4640      	mov	r0, r8
 80092b4:	4649      	mov	r1, r9
 80092b6:	f7f7 fc2f 	bl	8000b18 <__aeabi_dcmpgt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	d173      	bne.n	80093a6 <_dtoa_r+0x6e6>
 80092be:	ec53 2b19 	vmov	r2, r3, d9
 80092c2:	4914      	ldr	r1, [pc, #80]	; (8009314 <_dtoa_r+0x654>)
 80092c4:	2000      	movs	r0, #0
 80092c6:	f7f6 ffdf 	bl	8000288 <__aeabi_dsub>
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4640      	mov	r0, r8
 80092d0:	4649      	mov	r1, r9
 80092d2:	f7f7 fc03 	bl	8000adc <__aeabi_dcmplt>
 80092d6:	2800      	cmp	r0, #0
 80092d8:	f43f af2f 	beq.w	800913a <_dtoa_r+0x47a>
 80092dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80092de:	1e6b      	subs	r3, r5, #1
 80092e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80092e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80092e6:	2b30      	cmp	r3, #48	; 0x30
 80092e8:	d0f8      	beq.n	80092dc <_dtoa_r+0x61c>
 80092ea:	46bb      	mov	fp, r7
 80092ec:	e04a      	b.n	8009384 <_dtoa_r+0x6c4>
 80092ee:	4b06      	ldr	r3, [pc, #24]	; (8009308 <_dtoa_r+0x648>)
 80092f0:	f7f7 f982 	bl	80005f8 <__aeabi_dmul>
 80092f4:	4680      	mov	r8, r0
 80092f6:	4689      	mov	r9, r1
 80092f8:	e7bd      	b.n	8009276 <_dtoa_r+0x5b6>
 80092fa:	bf00      	nop
 80092fc:	0800aeb8 	.word	0x0800aeb8
 8009300:	0800ae90 	.word	0x0800ae90
 8009304:	3ff00000 	.word	0x3ff00000
 8009308:	40240000 	.word	0x40240000
 800930c:	401c0000 	.word	0x401c0000
 8009310:	40140000 	.word	0x40140000
 8009314:	3fe00000 	.word	0x3fe00000
 8009318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800931c:	9d00      	ldr	r5, [sp, #0]
 800931e:	4642      	mov	r2, r8
 8009320:	464b      	mov	r3, r9
 8009322:	4630      	mov	r0, r6
 8009324:	4639      	mov	r1, r7
 8009326:	f7f7 fa91 	bl	800084c <__aeabi_ddiv>
 800932a:	f7f7 fc15 	bl	8000b58 <__aeabi_d2iz>
 800932e:	9001      	str	r0, [sp, #4]
 8009330:	f7f7 f8f8 	bl	8000524 <__aeabi_i2d>
 8009334:	4642      	mov	r2, r8
 8009336:	464b      	mov	r3, r9
 8009338:	f7f7 f95e 	bl	80005f8 <__aeabi_dmul>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4630      	mov	r0, r6
 8009342:	4639      	mov	r1, r7
 8009344:	f7f6 ffa0 	bl	8000288 <__aeabi_dsub>
 8009348:	9e01      	ldr	r6, [sp, #4]
 800934a:	9f04      	ldr	r7, [sp, #16]
 800934c:	3630      	adds	r6, #48	; 0x30
 800934e:	f805 6b01 	strb.w	r6, [r5], #1
 8009352:	9e00      	ldr	r6, [sp, #0]
 8009354:	1bae      	subs	r6, r5, r6
 8009356:	42b7      	cmp	r7, r6
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	d134      	bne.n	80093c8 <_dtoa_r+0x708>
 800935e:	f7f6 ff95 	bl	800028c <__adddf3>
 8009362:	4642      	mov	r2, r8
 8009364:	464b      	mov	r3, r9
 8009366:	4606      	mov	r6, r0
 8009368:	460f      	mov	r7, r1
 800936a:	f7f7 fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800936e:	b9c8      	cbnz	r0, 80093a4 <_dtoa_r+0x6e4>
 8009370:	4642      	mov	r2, r8
 8009372:	464b      	mov	r3, r9
 8009374:	4630      	mov	r0, r6
 8009376:	4639      	mov	r1, r7
 8009378:	f7f7 fba6 	bl	8000ac8 <__aeabi_dcmpeq>
 800937c:	b110      	cbz	r0, 8009384 <_dtoa_r+0x6c4>
 800937e:	9b01      	ldr	r3, [sp, #4]
 8009380:	07db      	lsls	r3, r3, #31
 8009382:	d40f      	bmi.n	80093a4 <_dtoa_r+0x6e4>
 8009384:	4651      	mov	r1, sl
 8009386:	4620      	mov	r0, r4
 8009388:	f000 fbcc 	bl	8009b24 <_Bfree>
 800938c:	2300      	movs	r3, #0
 800938e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009390:	702b      	strb	r3, [r5, #0]
 8009392:	f10b 0301 	add.w	r3, fp, #1
 8009396:	6013      	str	r3, [r2, #0]
 8009398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800939a:	2b00      	cmp	r3, #0
 800939c:	f43f ace2 	beq.w	8008d64 <_dtoa_r+0xa4>
 80093a0:	601d      	str	r5, [r3, #0]
 80093a2:	e4df      	b.n	8008d64 <_dtoa_r+0xa4>
 80093a4:	465f      	mov	r7, fp
 80093a6:	462b      	mov	r3, r5
 80093a8:	461d      	mov	r5, r3
 80093aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80093ae:	2a39      	cmp	r2, #57	; 0x39
 80093b0:	d106      	bne.n	80093c0 <_dtoa_r+0x700>
 80093b2:	9a00      	ldr	r2, [sp, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d1f7      	bne.n	80093a8 <_dtoa_r+0x6e8>
 80093b8:	9900      	ldr	r1, [sp, #0]
 80093ba:	2230      	movs	r2, #48	; 0x30
 80093bc:	3701      	adds	r7, #1
 80093be:	700a      	strb	r2, [r1, #0]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	3201      	adds	r2, #1
 80093c4:	701a      	strb	r2, [r3, #0]
 80093c6:	e790      	b.n	80092ea <_dtoa_r+0x62a>
 80093c8:	4ba3      	ldr	r3, [pc, #652]	; (8009658 <_dtoa_r+0x998>)
 80093ca:	2200      	movs	r2, #0
 80093cc:	f7f7 f914 	bl	80005f8 <__aeabi_dmul>
 80093d0:	2200      	movs	r2, #0
 80093d2:	2300      	movs	r3, #0
 80093d4:	4606      	mov	r6, r0
 80093d6:	460f      	mov	r7, r1
 80093d8:	f7f7 fb76 	bl	8000ac8 <__aeabi_dcmpeq>
 80093dc:	2800      	cmp	r0, #0
 80093de:	d09e      	beq.n	800931e <_dtoa_r+0x65e>
 80093e0:	e7d0      	b.n	8009384 <_dtoa_r+0x6c4>
 80093e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093e4:	2a00      	cmp	r2, #0
 80093e6:	f000 80ca 	beq.w	800957e <_dtoa_r+0x8be>
 80093ea:	9a07      	ldr	r2, [sp, #28]
 80093ec:	2a01      	cmp	r2, #1
 80093ee:	f300 80ad 	bgt.w	800954c <_dtoa_r+0x88c>
 80093f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80093f4:	2a00      	cmp	r2, #0
 80093f6:	f000 80a5 	beq.w	8009544 <_dtoa_r+0x884>
 80093fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80093fe:	9e08      	ldr	r6, [sp, #32]
 8009400:	9d05      	ldr	r5, [sp, #20]
 8009402:	9a05      	ldr	r2, [sp, #20]
 8009404:	441a      	add	r2, r3
 8009406:	9205      	str	r2, [sp, #20]
 8009408:	9a06      	ldr	r2, [sp, #24]
 800940a:	2101      	movs	r1, #1
 800940c:	441a      	add	r2, r3
 800940e:	4620      	mov	r0, r4
 8009410:	9206      	str	r2, [sp, #24]
 8009412:	f000 fc3d 	bl	8009c90 <__i2b>
 8009416:	4607      	mov	r7, r0
 8009418:	b165      	cbz	r5, 8009434 <_dtoa_r+0x774>
 800941a:	9b06      	ldr	r3, [sp, #24]
 800941c:	2b00      	cmp	r3, #0
 800941e:	dd09      	ble.n	8009434 <_dtoa_r+0x774>
 8009420:	42ab      	cmp	r3, r5
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	bfa8      	it	ge
 8009426:	462b      	movge	r3, r5
 8009428:	1ad2      	subs	r2, r2, r3
 800942a:	9205      	str	r2, [sp, #20]
 800942c:	9a06      	ldr	r2, [sp, #24]
 800942e:	1aed      	subs	r5, r5, r3
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	9306      	str	r3, [sp, #24]
 8009434:	9b08      	ldr	r3, [sp, #32]
 8009436:	b1f3      	cbz	r3, 8009476 <_dtoa_r+0x7b6>
 8009438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800943a:	2b00      	cmp	r3, #0
 800943c:	f000 80a3 	beq.w	8009586 <_dtoa_r+0x8c6>
 8009440:	2e00      	cmp	r6, #0
 8009442:	dd10      	ble.n	8009466 <_dtoa_r+0x7a6>
 8009444:	4639      	mov	r1, r7
 8009446:	4632      	mov	r2, r6
 8009448:	4620      	mov	r0, r4
 800944a:	f000 fce1 	bl	8009e10 <__pow5mult>
 800944e:	4652      	mov	r2, sl
 8009450:	4601      	mov	r1, r0
 8009452:	4607      	mov	r7, r0
 8009454:	4620      	mov	r0, r4
 8009456:	f000 fc31 	bl	8009cbc <__multiply>
 800945a:	4651      	mov	r1, sl
 800945c:	4680      	mov	r8, r0
 800945e:	4620      	mov	r0, r4
 8009460:	f000 fb60 	bl	8009b24 <_Bfree>
 8009464:	46c2      	mov	sl, r8
 8009466:	9b08      	ldr	r3, [sp, #32]
 8009468:	1b9a      	subs	r2, r3, r6
 800946a:	d004      	beq.n	8009476 <_dtoa_r+0x7b6>
 800946c:	4651      	mov	r1, sl
 800946e:	4620      	mov	r0, r4
 8009470:	f000 fcce 	bl	8009e10 <__pow5mult>
 8009474:	4682      	mov	sl, r0
 8009476:	2101      	movs	r1, #1
 8009478:	4620      	mov	r0, r4
 800947a:	f000 fc09 	bl	8009c90 <__i2b>
 800947e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009480:	2b00      	cmp	r3, #0
 8009482:	4606      	mov	r6, r0
 8009484:	f340 8081 	ble.w	800958a <_dtoa_r+0x8ca>
 8009488:	461a      	mov	r2, r3
 800948a:	4601      	mov	r1, r0
 800948c:	4620      	mov	r0, r4
 800948e:	f000 fcbf 	bl	8009e10 <__pow5mult>
 8009492:	9b07      	ldr	r3, [sp, #28]
 8009494:	2b01      	cmp	r3, #1
 8009496:	4606      	mov	r6, r0
 8009498:	dd7a      	ble.n	8009590 <_dtoa_r+0x8d0>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	6933      	ldr	r3, [r6, #16]
 80094a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80094a4:	6918      	ldr	r0, [r3, #16]
 80094a6:	f000 fba5 	bl	8009bf4 <__hi0bits>
 80094aa:	f1c0 0020 	rsb	r0, r0, #32
 80094ae:	9b06      	ldr	r3, [sp, #24]
 80094b0:	4418      	add	r0, r3
 80094b2:	f010 001f 	ands.w	r0, r0, #31
 80094b6:	f000 8094 	beq.w	80095e2 <_dtoa_r+0x922>
 80094ba:	f1c0 0320 	rsb	r3, r0, #32
 80094be:	2b04      	cmp	r3, #4
 80094c0:	f340 8085 	ble.w	80095ce <_dtoa_r+0x90e>
 80094c4:	9b05      	ldr	r3, [sp, #20]
 80094c6:	f1c0 001c 	rsb	r0, r0, #28
 80094ca:	4403      	add	r3, r0
 80094cc:	9305      	str	r3, [sp, #20]
 80094ce:	9b06      	ldr	r3, [sp, #24]
 80094d0:	4403      	add	r3, r0
 80094d2:	4405      	add	r5, r0
 80094d4:	9306      	str	r3, [sp, #24]
 80094d6:	9b05      	ldr	r3, [sp, #20]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	dd05      	ble.n	80094e8 <_dtoa_r+0x828>
 80094dc:	4651      	mov	r1, sl
 80094de:	461a      	mov	r2, r3
 80094e0:	4620      	mov	r0, r4
 80094e2:	f000 fcef 	bl	8009ec4 <__lshift>
 80094e6:	4682      	mov	sl, r0
 80094e8:	9b06      	ldr	r3, [sp, #24]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	dd05      	ble.n	80094fa <_dtoa_r+0x83a>
 80094ee:	4631      	mov	r1, r6
 80094f0:	461a      	mov	r2, r3
 80094f2:	4620      	mov	r0, r4
 80094f4:	f000 fce6 	bl	8009ec4 <__lshift>
 80094f8:	4606      	mov	r6, r0
 80094fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d072      	beq.n	80095e6 <_dtoa_r+0x926>
 8009500:	4631      	mov	r1, r6
 8009502:	4650      	mov	r0, sl
 8009504:	f000 fd4a 	bl	8009f9c <__mcmp>
 8009508:	2800      	cmp	r0, #0
 800950a:	da6c      	bge.n	80095e6 <_dtoa_r+0x926>
 800950c:	2300      	movs	r3, #0
 800950e:	4651      	mov	r1, sl
 8009510:	220a      	movs	r2, #10
 8009512:	4620      	mov	r0, r4
 8009514:	f000 fb28 	bl	8009b68 <__multadd>
 8009518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800951a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800951e:	4682      	mov	sl, r0
 8009520:	2b00      	cmp	r3, #0
 8009522:	f000 81b0 	beq.w	8009886 <_dtoa_r+0xbc6>
 8009526:	2300      	movs	r3, #0
 8009528:	4639      	mov	r1, r7
 800952a:	220a      	movs	r2, #10
 800952c:	4620      	mov	r0, r4
 800952e:	f000 fb1b 	bl	8009b68 <__multadd>
 8009532:	9b01      	ldr	r3, [sp, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	4607      	mov	r7, r0
 8009538:	f300 8096 	bgt.w	8009668 <_dtoa_r+0x9a8>
 800953c:	9b07      	ldr	r3, [sp, #28]
 800953e:	2b02      	cmp	r3, #2
 8009540:	dc59      	bgt.n	80095f6 <_dtoa_r+0x936>
 8009542:	e091      	b.n	8009668 <_dtoa_r+0x9a8>
 8009544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800954a:	e758      	b.n	80093fe <_dtoa_r+0x73e>
 800954c:	9b04      	ldr	r3, [sp, #16]
 800954e:	1e5e      	subs	r6, r3, #1
 8009550:	9b08      	ldr	r3, [sp, #32]
 8009552:	42b3      	cmp	r3, r6
 8009554:	bfbf      	itttt	lt
 8009556:	9b08      	ldrlt	r3, [sp, #32]
 8009558:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800955a:	9608      	strlt	r6, [sp, #32]
 800955c:	1af3      	sublt	r3, r6, r3
 800955e:	bfb4      	ite	lt
 8009560:	18d2      	addlt	r2, r2, r3
 8009562:	1b9e      	subge	r6, r3, r6
 8009564:	9b04      	ldr	r3, [sp, #16]
 8009566:	bfbc      	itt	lt
 8009568:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800956a:	2600      	movlt	r6, #0
 800956c:	2b00      	cmp	r3, #0
 800956e:	bfb7      	itett	lt
 8009570:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009574:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009578:	1a9d      	sublt	r5, r3, r2
 800957a:	2300      	movlt	r3, #0
 800957c:	e741      	b.n	8009402 <_dtoa_r+0x742>
 800957e:	9e08      	ldr	r6, [sp, #32]
 8009580:	9d05      	ldr	r5, [sp, #20]
 8009582:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009584:	e748      	b.n	8009418 <_dtoa_r+0x758>
 8009586:	9a08      	ldr	r2, [sp, #32]
 8009588:	e770      	b.n	800946c <_dtoa_r+0x7ac>
 800958a:	9b07      	ldr	r3, [sp, #28]
 800958c:	2b01      	cmp	r3, #1
 800958e:	dc19      	bgt.n	80095c4 <_dtoa_r+0x904>
 8009590:	9b02      	ldr	r3, [sp, #8]
 8009592:	b9bb      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 8009594:	9b03      	ldr	r3, [sp, #12]
 8009596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800959a:	b99b      	cbnz	r3, 80095c4 <_dtoa_r+0x904>
 800959c:	9b03      	ldr	r3, [sp, #12]
 800959e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80095a2:	0d1b      	lsrs	r3, r3, #20
 80095a4:	051b      	lsls	r3, r3, #20
 80095a6:	b183      	cbz	r3, 80095ca <_dtoa_r+0x90a>
 80095a8:	9b05      	ldr	r3, [sp, #20]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9305      	str	r3, [sp, #20]
 80095ae:	9b06      	ldr	r3, [sp, #24]
 80095b0:	3301      	adds	r3, #1
 80095b2:	9306      	str	r3, [sp, #24]
 80095b4:	f04f 0801 	mov.w	r8, #1
 80095b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f47f af6f 	bne.w	800949e <_dtoa_r+0x7de>
 80095c0:	2001      	movs	r0, #1
 80095c2:	e774      	b.n	80094ae <_dtoa_r+0x7ee>
 80095c4:	f04f 0800 	mov.w	r8, #0
 80095c8:	e7f6      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ca:	4698      	mov	r8, r3
 80095cc:	e7f4      	b.n	80095b8 <_dtoa_r+0x8f8>
 80095ce:	d082      	beq.n	80094d6 <_dtoa_r+0x816>
 80095d0:	9a05      	ldr	r2, [sp, #20]
 80095d2:	331c      	adds	r3, #28
 80095d4:	441a      	add	r2, r3
 80095d6:	9205      	str	r2, [sp, #20]
 80095d8:	9a06      	ldr	r2, [sp, #24]
 80095da:	441a      	add	r2, r3
 80095dc:	441d      	add	r5, r3
 80095de:	9206      	str	r2, [sp, #24]
 80095e0:	e779      	b.n	80094d6 <_dtoa_r+0x816>
 80095e2:	4603      	mov	r3, r0
 80095e4:	e7f4      	b.n	80095d0 <_dtoa_r+0x910>
 80095e6:	9b04      	ldr	r3, [sp, #16]
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	dc37      	bgt.n	800965c <_dtoa_r+0x99c>
 80095ec:	9b07      	ldr	r3, [sp, #28]
 80095ee:	2b02      	cmp	r3, #2
 80095f0:	dd34      	ble.n	800965c <_dtoa_r+0x99c>
 80095f2:	9b04      	ldr	r3, [sp, #16]
 80095f4:	9301      	str	r3, [sp, #4]
 80095f6:	9b01      	ldr	r3, [sp, #4]
 80095f8:	b963      	cbnz	r3, 8009614 <_dtoa_r+0x954>
 80095fa:	4631      	mov	r1, r6
 80095fc:	2205      	movs	r2, #5
 80095fe:	4620      	mov	r0, r4
 8009600:	f000 fab2 	bl	8009b68 <__multadd>
 8009604:	4601      	mov	r1, r0
 8009606:	4606      	mov	r6, r0
 8009608:	4650      	mov	r0, sl
 800960a:	f000 fcc7 	bl	8009f9c <__mcmp>
 800960e:	2800      	cmp	r0, #0
 8009610:	f73f adbb 	bgt.w	800918a <_dtoa_r+0x4ca>
 8009614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009616:	9d00      	ldr	r5, [sp, #0]
 8009618:	ea6f 0b03 	mvn.w	fp, r3
 800961c:	f04f 0800 	mov.w	r8, #0
 8009620:	4631      	mov	r1, r6
 8009622:	4620      	mov	r0, r4
 8009624:	f000 fa7e 	bl	8009b24 <_Bfree>
 8009628:	2f00      	cmp	r7, #0
 800962a:	f43f aeab 	beq.w	8009384 <_dtoa_r+0x6c4>
 800962e:	f1b8 0f00 	cmp.w	r8, #0
 8009632:	d005      	beq.n	8009640 <_dtoa_r+0x980>
 8009634:	45b8      	cmp	r8, r7
 8009636:	d003      	beq.n	8009640 <_dtoa_r+0x980>
 8009638:	4641      	mov	r1, r8
 800963a:	4620      	mov	r0, r4
 800963c:	f000 fa72 	bl	8009b24 <_Bfree>
 8009640:	4639      	mov	r1, r7
 8009642:	4620      	mov	r0, r4
 8009644:	f000 fa6e 	bl	8009b24 <_Bfree>
 8009648:	e69c      	b.n	8009384 <_dtoa_r+0x6c4>
 800964a:	2600      	movs	r6, #0
 800964c:	4637      	mov	r7, r6
 800964e:	e7e1      	b.n	8009614 <_dtoa_r+0x954>
 8009650:	46bb      	mov	fp, r7
 8009652:	4637      	mov	r7, r6
 8009654:	e599      	b.n	800918a <_dtoa_r+0x4ca>
 8009656:	bf00      	nop
 8009658:	40240000 	.word	0x40240000
 800965c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800965e:	2b00      	cmp	r3, #0
 8009660:	f000 80c8 	beq.w	80097f4 <_dtoa_r+0xb34>
 8009664:	9b04      	ldr	r3, [sp, #16]
 8009666:	9301      	str	r3, [sp, #4]
 8009668:	2d00      	cmp	r5, #0
 800966a:	dd05      	ble.n	8009678 <_dtoa_r+0x9b8>
 800966c:	4639      	mov	r1, r7
 800966e:	462a      	mov	r2, r5
 8009670:	4620      	mov	r0, r4
 8009672:	f000 fc27 	bl	8009ec4 <__lshift>
 8009676:	4607      	mov	r7, r0
 8009678:	f1b8 0f00 	cmp.w	r8, #0
 800967c:	d05b      	beq.n	8009736 <_dtoa_r+0xa76>
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4620      	mov	r0, r4
 8009682:	f000 fa0f 	bl	8009aa4 <_Balloc>
 8009686:	4605      	mov	r5, r0
 8009688:	b928      	cbnz	r0, 8009696 <_dtoa_r+0x9d6>
 800968a:	4b83      	ldr	r3, [pc, #524]	; (8009898 <_dtoa_r+0xbd8>)
 800968c:	4602      	mov	r2, r0
 800968e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009692:	f7ff bb2e 	b.w	8008cf2 <_dtoa_r+0x32>
 8009696:	693a      	ldr	r2, [r7, #16]
 8009698:	3202      	adds	r2, #2
 800969a:	0092      	lsls	r2, r2, #2
 800969c:	f107 010c 	add.w	r1, r7, #12
 80096a0:	300c      	adds	r0, #12
 80096a2:	f000 ffab 	bl	800a5fc <memcpy>
 80096a6:	2201      	movs	r2, #1
 80096a8:	4629      	mov	r1, r5
 80096aa:	4620      	mov	r0, r4
 80096ac:	f000 fc0a 	bl	8009ec4 <__lshift>
 80096b0:	9b00      	ldr	r3, [sp, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	9304      	str	r3, [sp, #16]
 80096b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80096ba:	4413      	add	r3, r2
 80096bc:	9308      	str	r3, [sp, #32]
 80096be:	9b02      	ldr	r3, [sp, #8]
 80096c0:	f003 0301 	and.w	r3, r3, #1
 80096c4:	46b8      	mov	r8, r7
 80096c6:	9306      	str	r3, [sp, #24]
 80096c8:	4607      	mov	r7, r0
 80096ca:	9b04      	ldr	r3, [sp, #16]
 80096cc:	4631      	mov	r1, r6
 80096ce:	3b01      	subs	r3, #1
 80096d0:	4650      	mov	r0, sl
 80096d2:	9301      	str	r3, [sp, #4]
 80096d4:	f7ff fa6b 	bl	8008bae <quorem>
 80096d8:	4641      	mov	r1, r8
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80096e0:	4650      	mov	r0, sl
 80096e2:	f000 fc5b 	bl	8009f9c <__mcmp>
 80096e6:	463a      	mov	r2, r7
 80096e8:	9005      	str	r0, [sp, #20]
 80096ea:	4631      	mov	r1, r6
 80096ec:	4620      	mov	r0, r4
 80096ee:	f000 fc71 	bl	8009fd4 <__mdiff>
 80096f2:	68c2      	ldr	r2, [r0, #12]
 80096f4:	4605      	mov	r5, r0
 80096f6:	bb02      	cbnz	r2, 800973a <_dtoa_r+0xa7a>
 80096f8:	4601      	mov	r1, r0
 80096fa:	4650      	mov	r0, sl
 80096fc:	f000 fc4e 	bl	8009f9c <__mcmp>
 8009700:	4602      	mov	r2, r0
 8009702:	4629      	mov	r1, r5
 8009704:	4620      	mov	r0, r4
 8009706:	9209      	str	r2, [sp, #36]	; 0x24
 8009708:	f000 fa0c 	bl	8009b24 <_Bfree>
 800970c:	9b07      	ldr	r3, [sp, #28]
 800970e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009710:	9d04      	ldr	r5, [sp, #16]
 8009712:	ea43 0102 	orr.w	r1, r3, r2
 8009716:	9b06      	ldr	r3, [sp, #24]
 8009718:	4319      	orrs	r1, r3
 800971a:	d110      	bne.n	800973e <_dtoa_r+0xa7e>
 800971c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009720:	d029      	beq.n	8009776 <_dtoa_r+0xab6>
 8009722:	9b05      	ldr	r3, [sp, #20]
 8009724:	2b00      	cmp	r3, #0
 8009726:	dd02      	ble.n	800972e <_dtoa_r+0xa6e>
 8009728:	9b02      	ldr	r3, [sp, #8]
 800972a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	f883 9000 	strb.w	r9, [r3]
 8009734:	e774      	b.n	8009620 <_dtoa_r+0x960>
 8009736:	4638      	mov	r0, r7
 8009738:	e7ba      	b.n	80096b0 <_dtoa_r+0x9f0>
 800973a:	2201      	movs	r2, #1
 800973c:	e7e1      	b.n	8009702 <_dtoa_r+0xa42>
 800973e:	9b05      	ldr	r3, [sp, #20]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db04      	blt.n	800974e <_dtoa_r+0xa8e>
 8009744:	9907      	ldr	r1, [sp, #28]
 8009746:	430b      	orrs	r3, r1
 8009748:	9906      	ldr	r1, [sp, #24]
 800974a:	430b      	orrs	r3, r1
 800974c:	d120      	bne.n	8009790 <_dtoa_r+0xad0>
 800974e:	2a00      	cmp	r2, #0
 8009750:	dded      	ble.n	800972e <_dtoa_r+0xa6e>
 8009752:	4651      	mov	r1, sl
 8009754:	2201      	movs	r2, #1
 8009756:	4620      	mov	r0, r4
 8009758:	f000 fbb4 	bl	8009ec4 <__lshift>
 800975c:	4631      	mov	r1, r6
 800975e:	4682      	mov	sl, r0
 8009760:	f000 fc1c 	bl	8009f9c <__mcmp>
 8009764:	2800      	cmp	r0, #0
 8009766:	dc03      	bgt.n	8009770 <_dtoa_r+0xab0>
 8009768:	d1e1      	bne.n	800972e <_dtoa_r+0xa6e>
 800976a:	f019 0f01 	tst.w	r9, #1
 800976e:	d0de      	beq.n	800972e <_dtoa_r+0xa6e>
 8009770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009774:	d1d8      	bne.n	8009728 <_dtoa_r+0xa68>
 8009776:	9a01      	ldr	r2, [sp, #4]
 8009778:	2339      	movs	r3, #57	; 0x39
 800977a:	7013      	strb	r3, [r2, #0]
 800977c:	462b      	mov	r3, r5
 800977e:	461d      	mov	r5, r3
 8009780:	3b01      	subs	r3, #1
 8009782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009786:	2a39      	cmp	r2, #57	; 0x39
 8009788:	d06c      	beq.n	8009864 <_dtoa_r+0xba4>
 800978a:	3201      	adds	r2, #1
 800978c:	701a      	strb	r2, [r3, #0]
 800978e:	e747      	b.n	8009620 <_dtoa_r+0x960>
 8009790:	2a00      	cmp	r2, #0
 8009792:	dd07      	ble.n	80097a4 <_dtoa_r+0xae4>
 8009794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009798:	d0ed      	beq.n	8009776 <_dtoa_r+0xab6>
 800979a:	9a01      	ldr	r2, [sp, #4]
 800979c:	f109 0301 	add.w	r3, r9, #1
 80097a0:	7013      	strb	r3, [r2, #0]
 80097a2:	e73d      	b.n	8009620 <_dtoa_r+0x960>
 80097a4:	9b04      	ldr	r3, [sp, #16]
 80097a6:	9a08      	ldr	r2, [sp, #32]
 80097a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80097ac:	4293      	cmp	r3, r2
 80097ae:	d043      	beq.n	8009838 <_dtoa_r+0xb78>
 80097b0:	4651      	mov	r1, sl
 80097b2:	2300      	movs	r3, #0
 80097b4:	220a      	movs	r2, #10
 80097b6:	4620      	mov	r0, r4
 80097b8:	f000 f9d6 	bl	8009b68 <__multadd>
 80097bc:	45b8      	cmp	r8, r7
 80097be:	4682      	mov	sl, r0
 80097c0:	f04f 0300 	mov.w	r3, #0
 80097c4:	f04f 020a 	mov.w	r2, #10
 80097c8:	4641      	mov	r1, r8
 80097ca:	4620      	mov	r0, r4
 80097cc:	d107      	bne.n	80097de <_dtoa_r+0xb1e>
 80097ce:	f000 f9cb 	bl	8009b68 <__multadd>
 80097d2:	4680      	mov	r8, r0
 80097d4:	4607      	mov	r7, r0
 80097d6:	9b04      	ldr	r3, [sp, #16]
 80097d8:	3301      	adds	r3, #1
 80097da:	9304      	str	r3, [sp, #16]
 80097dc:	e775      	b.n	80096ca <_dtoa_r+0xa0a>
 80097de:	f000 f9c3 	bl	8009b68 <__multadd>
 80097e2:	4639      	mov	r1, r7
 80097e4:	4680      	mov	r8, r0
 80097e6:	2300      	movs	r3, #0
 80097e8:	220a      	movs	r2, #10
 80097ea:	4620      	mov	r0, r4
 80097ec:	f000 f9bc 	bl	8009b68 <__multadd>
 80097f0:	4607      	mov	r7, r0
 80097f2:	e7f0      	b.n	80097d6 <_dtoa_r+0xb16>
 80097f4:	9b04      	ldr	r3, [sp, #16]
 80097f6:	9301      	str	r3, [sp, #4]
 80097f8:	9d00      	ldr	r5, [sp, #0]
 80097fa:	4631      	mov	r1, r6
 80097fc:	4650      	mov	r0, sl
 80097fe:	f7ff f9d6 	bl	8008bae <quorem>
 8009802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009806:	9b00      	ldr	r3, [sp, #0]
 8009808:	f805 9b01 	strb.w	r9, [r5], #1
 800980c:	1aea      	subs	r2, r5, r3
 800980e:	9b01      	ldr	r3, [sp, #4]
 8009810:	4293      	cmp	r3, r2
 8009812:	dd07      	ble.n	8009824 <_dtoa_r+0xb64>
 8009814:	4651      	mov	r1, sl
 8009816:	2300      	movs	r3, #0
 8009818:	220a      	movs	r2, #10
 800981a:	4620      	mov	r0, r4
 800981c:	f000 f9a4 	bl	8009b68 <__multadd>
 8009820:	4682      	mov	sl, r0
 8009822:	e7ea      	b.n	80097fa <_dtoa_r+0xb3a>
 8009824:	9b01      	ldr	r3, [sp, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	bfc8      	it	gt
 800982a:	461d      	movgt	r5, r3
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	bfd8      	it	le
 8009830:	2501      	movle	r5, #1
 8009832:	441d      	add	r5, r3
 8009834:	f04f 0800 	mov.w	r8, #0
 8009838:	4651      	mov	r1, sl
 800983a:	2201      	movs	r2, #1
 800983c:	4620      	mov	r0, r4
 800983e:	f000 fb41 	bl	8009ec4 <__lshift>
 8009842:	4631      	mov	r1, r6
 8009844:	4682      	mov	sl, r0
 8009846:	f000 fba9 	bl	8009f9c <__mcmp>
 800984a:	2800      	cmp	r0, #0
 800984c:	dc96      	bgt.n	800977c <_dtoa_r+0xabc>
 800984e:	d102      	bne.n	8009856 <_dtoa_r+0xb96>
 8009850:	f019 0f01 	tst.w	r9, #1
 8009854:	d192      	bne.n	800977c <_dtoa_r+0xabc>
 8009856:	462b      	mov	r3, r5
 8009858:	461d      	mov	r5, r3
 800985a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800985e:	2a30      	cmp	r2, #48	; 0x30
 8009860:	d0fa      	beq.n	8009858 <_dtoa_r+0xb98>
 8009862:	e6dd      	b.n	8009620 <_dtoa_r+0x960>
 8009864:	9a00      	ldr	r2, [sp, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d189      	bne.n	800977e <_dtoa_r+0xabe>
 800986a:	f10b 0b01 	add.w	fp, fp, #1
 800986e:	2331      	movs	r3, #49	; 0x31
 8009870:	e796      	b.n	80097a0 <_dtoa_r+0xae0>
 8009872:	4b0a      	ldr	r3, [pc, #40]	; (800989c <_dtoa_r+0xbdc>)
 8009874:	f7ff ba99 	b.w	8008daa <_dtoa_r+0xea>
 8009878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800987a:	2b00      	cmp	r3, #0
 800987c:	f47f aa6d 	bne.w	8008d5a <_dtoa_r+0x9a>
 8009880:	4b07      	ldr	r3, [pc, #28]	; (80098a0 <_dtoa_r+0xbe0>)
 8009882:	f7ff ba92 	b.w	8008daa <_dtoa_r+0xea>
 8009886:	9b01      	ldr	r3, [sp, #4]
 8009888:	2b00      	cmp	r3, #0
 800988a:	dcb5      	bgt.n	80097f8 <_dtoa_r+0xb38>
 800988c:	9b07      	ldr	r3, [sp, #28]
 800988e:	2b02      	cmp	r3, #2
 8009890:	f73f aeb1 	bgt.w	80095f6 <_dtoa_r+0x936>
 8009894:	e7b0      	b.n	80097f8 <_dtoa_r+0xb38>
 8009896:	bf00      	nop
 8009898:	0800ae20 	.word	0x0800ae20
 800989c:	0800ad80 	.word	0x0800ad80
 80098a0:	0800ada4 	.word	0x0800ada4

080098a4 <_free_r>:
 80098a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80098a6:	2900      	cmp	r1, #0
 80098a8:	d044      	beq.n	8009934 <_free_r+0x90>
 80098aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80098ae:	9001      	str	r0, [sp, #4]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	f1a1 0404 	sub.w	r4, r1, #4
 80098b6:	bfb8      	it	lt
 80098b8:	18e4      	addlt	r4, r4, r3
 80098ba:	f000 f8e7 	bl	8009a8c <__malloc_lock>
 80098be:	4a1e      	ldr	r2, [pc, #120]	; (8009938 <_free_r+0x94>)
 80098c0:	9801      	ldr	r0, [sp, #4]
 80098c2:	6813      	ldr	r3, [r2, #0]
 80098c4:	b933      	cbnz	r3, 80098d4 <_free_r+0x30>
 80098c6:	6063      	str	r3, [r4, #4]
 80098c8:	6014      	str	r4, [r2, #0]
 80098ca:	b003      	add	sp, #12
 80098cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80098d0:	f000 b8e2 	b.w	8009a98 <__malloc_unlock>
 80098d4:	42a3      	cmp	r3, r4
 80098d6:	d908      	bls.n	80098ea <_free_r+0x46>
 80098d8:	6825      	ldr	r5, [r4, #0]
 80098da:	1961      	adds	r1, r4, r5
 80098dc:	428b      	cmp	r3, r1
 80098de:	bf01      	itttt	eq
 80098e0:	6819      	ldreq	r1, [r3, #0]
 80098e2:	685b      	ldreq	r3, [r3, #4]
 80098e4:	1949      	addeq	r1, r1, r5
 80098e6:	6021      	streq	r1, [r4, #0]
 80098e8:	e7ed      	b.n	80098c6 <_free_r+0x22>
 80098ea:	461a      	mov	r2, r3
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	b10b      	cbz	r3, 80098f4 <_free_r+0x50>
 80098f0:	42a3      	cmp	r3, r4
 80098f2:	d9fa      	bls.n	80098ea <_free_r+0x46>
 80098f4:	6811      	ldr	r1, [r2, #0]
 80098f6:	1855      	adds	r5, r2, r1
 80098f8:	42a5      	cmp	r5, r4
 80098fa:	d10b      	bne.n	8009914 <_free_r+0x70>
 80098fc:	6824      	ldr	r4, [r4, #0]
 80098fe:	4421      	add	r1, r4
 8009900:	1854      	adds	r4, r2, r1
 8009902:	42a3      	cmp	r3, r4
 8009904:	6011      	str	r1, [r2, #0]
 8009906:	d1e0      	bne.n	80098ca <_free_r+0x26>
 8009908:	681c      	ldr	r4, [r3, #0]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	6053      	str	r3, [r2, #4]
 800990e:	440c      	add	r4, r1
 8009910:	6014      	str	r4, [r2, #0]
 8009912:	e7da      	b.n	80098ca <_free_r+0x26>
 8009914:	d902      	bls.n	800991c <_free_r+0x78>
 8009916:	230c      	movs	r3, #12
 8009918:	6003      	str	r3, [r0, #0]
 800991a:	e7d6      	b.n	80098ca <_free_r+0x26>
 800991c:	6825      	ldr	r5, [r4, #0]
 800991e:	1961      	adds	r1, r4, r5
 8009920:	428b      	cmp	r3, r1
 8009922:	bf04      	itt	eq
 8009924:	6819      	ldreq	r1, [r3, #0]
 8009926:	685b      	ldreq	r3, [r3, #4]
 8009928:	6063      	str	r3, [r4, #4]
 800992a:	bf04      	itt	eq
 800992c:	1949      	addeq	r1, r1, r5
 800992e:	6021      	streq	r1, [r4, #0]
 8009930:	6054      	str	r4, [r2, #4]
 8009932:	e7ca      	b.n	80098ca <_free_r+0x26>
 8009934:	b003      	add	sp, #12
 8009936:	bd30      	pop	{r4, r5, pc}
 8009938:	20000624 	.word	0x20000624

0800993c <malloc>:
 800993c:	4b02      	ldr	r3, [pc, #8]	; (8009948 <malloc+0xc>)
 800993e:	4601      	mov	r1, r0
 8009940:	6818      	ldr	r0, [r3, #0]
 8009942:	f000 b823 	b.w	800998c <_malloc_r>
 8009946:	bf00      	nop
 8009948:	20000070 	.word	0x20000070

0800994c <sbrk_aligned>:
 800994c:	b570      	push	{r4, r5, r6, lr}
 800994e:	4e0e      	ldr	r6, [pc, #56]	; (8009988 <sbrk_aligned+0x3c>)
 8009950:	460c      	mov	r4, r1
 8009952:	6831      	ldr	r1, [r6, #0]
 8009954:	4605      	mov	r5, r0
 8009956:	b911      	cbnz	r1, 800995e <sbrk_aligned+0x12>
 8009958:	f000 fe40 	bl	800a5dc <_sbrk_r>
 800995c:	6030      	str	r0, [r6, #0]
 800995e:	4621      	mov	r1, r4
 8009960:	4628      	mov	r0, r5
 8009962:	f000 fe3b 	bl	800a5dc <_sbrk_r>
 8009966:	1c43      	adds	r3, r0, #1
 8009968:	d00a      	beq.n	8009980 <sbrk_aligned+0x34>
 800996a:	1cc4      	adds	r4, r0, #3
 800996c:	f024 0403 	bic.w	r4, r4, #3
 8009970:	42a0      	cmp	r0, r4
 8009972:	d007      	beq.n	8009984 <sbrk_aligned+0x38>
 8009974:	1a21      	subs	r1, r4, r0
 8009976:	4628      	mov	r0, r5
 8009978:	f000 fe30 	bl	800a5dc <_sbrk_r>
 800997c:	3001      	adds	r0, #1
 800997e:	d101      	bne.n	8009984 <sbrk_aligned+0x38>
 8009980:	f04f 34ff 	mov.w	r4, #4294967295
 8009984:	4620      	mov	r0, r4
 8009986:	bd70      	pop	{r4, r5, r6, pc}
 8009988:	20000628 	.word	0x20000628

0800998c <_malloc_r>:
 800998c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009990:	1ccd      	adds	r5, r1, #3
 8009992:	f025 0503 	bic.w	r5, r5, #3
 8009996:	3508      	adds	r5, #8
 8009998:	2d0c      	cmp	r5, #12
 800999a:	bf38      	it	cc
 800999c:	250c      	movcc	r5, #12
 800999e:	2d00      	cmp	r5, #0
 80099a0:	4607      	mov	r7, r0
 80099a2:	db01      	blt.n	80099a8 <_malloc_r+0x1c>
 80099a4:	42a9      	cmp	r1, r5
 80099a6:	d905      	bls.n	80099b4 <_malloc_r+0x28>
 80099a8:	230c      	movs	r3, #12
 80099aa:	603b      	str	r3, [r7, #0]
 80099ac:	2600      	movs	r6, #0
 80099ae:	4630      	mov	r0, r6
 80099b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009a88 <_malloc_r+0xfc>
 80099b8:	f000 f868 	bl	8009a8c <__malloc_lock>
 80099bc:	f8d8 3000 	ldr.w	r3, [r8]
 80099c0:	461c      	mov	r4, r3
 80099c2:	bb5c      	cbnz	r4, 8009a1c <_malloc_r+0x90>
 80099c4:	4629      	mov	r1, r5
 80099c6:	4638      	mov	r0, r7
 80099c8:	f7ff ffc0 	bl	800994c <sbrk_aligned>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	4604      	mov	r4, r0
 80099d0:	d155      	bne.n	8009a7e <_malloc_r+0xf2>
 80099d2:	f8d8 4000 	ldr.w	r4, [r8]
 80099d6:	4626      	mov	r6, r4
 80099d8:	2e00      	cmp	r6, #0
 80099da:	d145      	bne.n	8009a68 <_malloc_r+0xdc>
 80099dc:	2c00      	cmp	r4, #0
 80099de:	d048      	beq.n	8009a72 <_malloc_r+0xe6>
 80099e0:	6823      	ldr	r3, [r4, #0]
 80099e2:	4631      	mov	r1, r6
 80099e4:	4638      	mov	r0, r7
 80099e6:	eb04 0903 	add.w	r9, r4, r3
 80099ea:	f000 fdf7 	bl	800a5dc <_sbrk_r>
 80099ee:	4581      	cmp	r9, r0
 80099f0:	d13f      	bne.n	8009a72 <_malloc_r+0xe6>
 80099f2:	6821      	ldr	r1, [r4, #0]
 80099f4:	1a6d      	subs	r5, r5, r1
 80099f6:	4629      	mov	r1, r5
 80099f8:	4638      	mov	r0, r7
 80099fa:	f7ff ffa7 	bl	800994c <sbrk_aligned>
 80099fe:	3001      	adds	r0, #1
 8009a00:	d037      	beq.n	8009a72 <_malloc_r+0xe6>
 8009a02:	6823      	ldr	r3, [r4, #0]
 8009a04:	442b      	add	r3, r5
 8009a06:	6023      	str	r3, [r4, #0]
 8009a08:	f8d8 3000 	ldr.w	r3, [r8]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d038      	beq.n	8009a82 <_malloc_r+0xf6>
 8009a10:	685a      	ldr	r2, [r3, #4]
 8009a12:	42a2      	cmp	r2, r4
 8009a14:	d12b      	bne.n	8009a6e <_malloc_r+0xe2>
 8009a16:	2200      	movs	r2, #0
 8009a18:	605a      	str	r2, [r3, #4]
 8009a1a:	e00f      	b.n	8009a3c <_malloc_r+0xb0>
 8009a1c:	6822      	ldr	r2, [r4, #0]
 8009a1e:	1b52      	subs	r2, r2, r5
 8009a20:	d41f      	bmi.n	8009a62 <_malloc_r+0xd6>
 8009a22:	2a0b      	cmp	r2, #11
 8009a24:	d917      	bls.n	8009a56 <_malloc_r+0xca>
 8009a26:	1961      	adds	r1, r4, r5
 8009a28:	42a3      	cmp	r3, r4
 8009a2a:	6025      	str	r5, [r4, #0]
 8009a2c:	bf18      	it	ne
 8009a2e:	6059      	strne	r1, [r3, #4]
 8009a30:	6863      	ldr	r3, [r4, #4]
 8009a32:	bf08      	it	eq
 8009a34:	f8c8 1000 	streq.w	r1, [r8]
 8009a38:	5162      	str	r2, [r4, r5]
 8009a3a:	604b      	str	r3, [r1, #4]
 8009a3c:	4638      	mov	r0, r7
 8009a3e:	f104 060b 	add.w	r6, r4, #11
 8009a42:	f000 f829 	bl	8009a98 <__malloc_unlock>
 8009a46:	f026 0607 	bic.w	r6, r6, #7
 8009a4a:	1d23      	adds	r3, r4, #4
 8009a4c:	1af2      	subs	r2, r6, r3
 8009a4e:	d0ae      	beq.n	80099ae <_malloc_r+0x22>
 8009a50:	1b9b      	subs	r3, r3, r6
 8009a52:	50a3      	str	r3, [r4, r2]
 8009a54:	e7ab      	b.n	80099ae <_malloc_r+0x22>
 8009a56:	42a3      	cmp	r3, r4
 8009a58:	6862      	ldr	r2, [r4, #4]
 8009a5a:	d1dd      	bne.n	8009a18 <_malloc_r+0x8c>
 8009a5c:	f8c8 2000 	str.w	r2, [r8]
 8009a60:	e7ec      	b.n	8009a3c <_malloc_r+0xb0>
 8009a62:	4623      	mov	r3, r4
 8009a64:	6864      	ldr	r4, [r4, #4]
 8009a66:	e7ac      	b.n	80099c2 <_malloc_r+0x36>
 8009a68:	4634      	mov	r4, r6
 8009a6a:	6876      	ldr	r6, [r6, #4]
 8009a6c:	e7b4      	b.n	80099d8 <_malloc_r+0x4c>
 8009a6e:	4613      	mov	r3, r2
 8009a70:	e7cc      	b.n	8009a0c <_malloc_r+0x80>
 8009a72:	230c      	movs	r3, #12
 8009a74:	603b      	str	r3, [r7, #0]
 8009a76:	4638      	mov	r0, r7
 8009a78:	f000 f80e 	bl	8009a98 <__malloc_unlock>
 8009a7c:	e797      	b.n	80099ae <_malloc_r+0x22>
 8009a7e:	6025      	str	r5, [r4, #0]
 8009a80:	e7dc      	b.n	8009a3c <_malloc_r+0xb0>
 8009a82:	605b      	str	r3, [r3, #4]
 8009a84:	deff      	udf	#255	; 0xff
 8009a86:	bf00      	nop
 8009a88:	20000624 	.word	0x20000624

08009a8c <__malloc_lock>:
 8009a8c:	4801      	ldr	r0, [pc, #4]	; (8009a94 <__malloc_lock+0x8>)
 8009a8e:	f7ff b88c 	b.w	8008baa <__retarget_lock_acquire_recursive>
 8009a92:	bf00      	nop
 8009a94:	20000620 	.word	0x20000620

08009a98 <__malloc_unlock>:
 8009a98:	4801      	ldr	r0, [pc, #4]	; (8009aa0 <__malloc_unlock+0x8>)
 8009a9a:	f7ff b887 	b.w	8008bac <__retarget_lock_release_recursive>
 8009a9e:	bf00      	nop
 8009aa0:	20000620 	.word	0x20000620

08009aa4 <_Balloc>:
 8009aa4:	b570      	push	{r4, r5, r6, lr}
 8009aa6:	69c6      	ldr	r6, [r0, #28]
 8009aa8:	4604      	mov	r4, r0
 8009aaa:	460d      	mov	r5, r1
 8009aac:	b976      	cbnz	r6, 8009acc <_Balloc+0x28>
 8009aae:	2010      	movs	r0, #16
 8009ab0:	f7ff ff44 	bl	800993c <malloc>
 8009ab4:	4602      	mov	r2, r0
 8009ab6:	61e0      	str	r0, [r4, #28]
 8009ab8:	b920      	cbnz	r0, 8009ac4 <_Balloc+0x20>
 8009aba:	4b18      	ldr	r3, [pc, #96]	; (8009b1c <_Balloc+0x78>)
 8009abc:	4818      	ldr	r0, [pc, #96]	; (8009b20 <_Balloc+0x7c>)
 8009abe:	216b      	movs	r1, #107	; 0x6b
 8009ac0:	f000 fdaa 	bl	800a618 <__assert_func>
 8009ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ac8:	6006      	str	r6, [r0, #0]
 8009aca:	60c6      	str	r6, [r0, #12]
 8009acc:	69e6      	ldr	r6, [r4, #28]
 8009ace:	68f3      	ldr	r3, [r6, #12]
 8009ad0:	b183      	cbz	r3, 8009af4 <_Balloc+0x50>
 8009ad2:	69e3      	ldr	r3, [r4, #28]
 8009ad4:	68db      	ldr	r3, [r3, #12]
 8009ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009ada:	b9b8      	cbnz	r0, 8009b0c <_Balloc+0x68>
 8009adc:	2101      	movs	r1, #1
 8009ade:	fa01 f605 	lsl.w	r6, r1, r5
 8009ae2:	1d72      	adds	r2, r6, #5
 8009ae4:	0092      	lsls	r2, r2, #2
 8009ae6:	4620      	mov	r0, r4
 8009ae8:	f000 fdb4 	bl	800a654 <_calloc_r>
 8009aec:	b160      	cbz	r0, 8009b08 <_Balloc+0x64>
 8009aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009af2:	e00e      	b.n	8009b12 <_Balloc+0x6e>
 8009af4:	2221      	movs	r2, #33	; 0x21
 8009af6:	2104      	movs	r1, #4
 8009af8:	4620      	mov	r0, r4
 8009afa:	f000 fdab 	bl	800a654 <_calloc_r>
 8009afe:	69e3      	ldr	r3, [r4, #28]
 8009b00:	60f0      	str	r0, [r6, #12]
 8009b02:	68db      	ldr	r3, [r3, #12]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d1e4      	bne.n	8009ad2 <_Balloc+0x2e>
 8009b08:	2000      	movs	r0, #0
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}
 8009b0c:	6802      	ldr	r2, [r0, #0]
 8009b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009b12:	2300      	movs	r3, #0
 8009b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009b18:	e7f7      	b.n	8009b0a <_Balloc+0x66>
 8009b1a:	bf00      	nop
 8009b1c:	0800adb1 	.word	0x0800adb1
 8009b20:	0800ae31 	.word	0x0800ae31

08009b24 <_Bfree>:
 8009b24:	b570      	push	{r4, r5, r6, lr}
 8009b26:	69c6      	ldr	r6, [r0, #28]
 8009b28:	4605      	mov	r5, r0
 8009b2a:	460c      	mov	r4, r1
 8009b2c:	b976      	cbnz	r6, 8009b4c <_Bfree+0x28>
 8009b2e:	2010      	movs	r0, #16
 8009b30:	f7ff ff04 	bl	800993c <malloc>
 8009b34:	4602      	mov	r2, r0
 8009b36:	61e8      	str	r0, [r5, #28]
 8009b38:	b920      	cbnz	r0, 8009b44 <_Bfree+0x20>
 8009b3a:	4b09      	ldr	r3, [pc, #36]	; (8009b60 <_Bfree+0x3c>)
 8009b3c:	4809      	ldr	r0, [pc, #36]	; (8009b64 <_Bfree+0x40>)
 8009b3e:	218f      	movs	r1, #143	; 0x8f
 8009b40:	f000 fd6a 	bl	800a618 <__assert_func>
 8009b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009b48:	6006      	str	r6, [r0, #0]
 8009b4a:	60c6      	str	r6, [r0, #12]
 8009b4c:	b13c      	cbz	r4, 8009b5e <_Bfree+0x3a>
 8009b4e:	69eb      	ldr	r3, [r5, #28]
 8009b50:	6862      	ldr	r2, [r4, #4]
 8009b52:	68db      	ldr	r3, [r3, #12]
 8009b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009b58:	6021      	str	r1, [r4, #0]
 8009b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009b5e:	bd70      	pop	{r4, r5, r6, pc}
 8009b60:	0800adb1 	.word	0x0800adb1
 8009b64:	0800ae31 	.word	0x0800ae31

08009b68 <__multadd>:
 8009b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b6c:	690d      	ldr	r5, [r1, #16]
 8009b6e:	4607      	mov	r7, r0
 8009b70:	460c      	mov	r4, r1
 8009b72:	461e      	mov	r6, r3
 8009b74:	f101 0c14 	add.w	ip, r1, #20
 8009b78:	2000      	movs	r0, #0
 8009b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8009b7e:	b299      	uxth	r1, r3
 8009b80:	fb02 6101 	mla	r1, r2, r1, r6
 8009b84:	0c1e      	lsrs	r6, r3, #16
 8009b86:	0c0b      	lsrs	r3, r1, #16
 8009b88:	fb02 3306 	mla	r3, r2, r6, r3
 8009b8c:	b289      	uxth	r1, r1
 8009b8e:	3001      	adds	r0, #1
 8009b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009b94:	4285      	cmp	r5, r0
 8009b96:	f84c 1b04 	str.w	r1, [ip], #4
 8009b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b9e:	dcec      	bgt.n	8009b7a <__multadd+0x12>
 8009ba0:	b30e      	cbz	r6, 8009be6 <__multadd+0x7e>
 8009ba2:	68a3      	ldr	r3, [r4, #8]
 8009ba4:	42ab      	cmp	r3, r5
 8009ba6:	dc19      	bgt.n	8009bdc <__multadd+0x74>
 8009ba8:	6861      	ldr	r1, [r4, #4]
 8009baa:	4638      	mov	r0, r7
 8009bac:	3101      	adds	r1, #1
 8009bae:	f7ff ff79 	bl	8009aa4 <_Balloc>
 8009bb2:	4680      	mov	r8, r0
 8009bb4:	b928      	cbnz	r0, 8009bc2 <__multadd+0x5a>
 8009bb6:	4602      	mov	r2, r0
 8009bb8:	4b0c      	ldr	r3, [pc, #48]	; (8009bec <__multadd+0x84>)
 8009bba:	480d      	ldr	r0, [pc, #52]	; (8009bf0 <__multadd+0x88>)
 8009bbc:	21ba      	movs	r1, #186	; 0xba
 8009bbe:	f000 fd2b 	bl	800a618 <__assert_func>
 8009bc2:	6922      	ldr	r2, [r4, #16]
 8009bc4:	3202      	adds	r2, #2
 8009bc6:	f104 010c 	add.w	r1, r4, #12
 8009bca:	0092      	lsls	r2, r2, #2
 8009bcc:	300c      	adds	r0, #12
 8009bce:	f000 fd15 	bl	800a5fc <memcpy>
 8009bd2:	4621      	mov	r1, r4
 8009bd4:	4638      	mov	r0, r7
 8009bd6:	f7ff ffa5 	bl	8009b24 <_Bfree>
 8009bda:	4644      	mov	r4, r8
 8009bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009be0:	3501      	adds	r5, #1
 8009be2:	615e      	str	r6, [r3, #20]
 8009be4:	6125      	str	r5, [r4, #16]
 8009be6:	4620      	mov	r0, r4
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bec:	0800ae20 	.word	0x0800ae20
 8009bf0:	0800ae31 	.word	0x0800ae31

08009bf4 <__hi0bits>:
 8009bf4:	0c03      	lsrs	r3, r0, #16
 8009bf6:	041b      	lsls	r3, r3, #16
 8009bf8:	b9d3      	cbnz	r3, 8009c30 <__hi0bits+0x3c>
 8009bfa:	0400      	lsls	r0, r0, #16
 8009bfc:	2310      	movs	r3, #16
 8009bfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009c02:	bf04      	itt	eq
 8009c04:	0200      	lsleq	r0, r0, #8
 8009c06:	3308      	addeq	r3, #8
 8009c08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009c0c:	bf04      	itt	eq
 8009c0e:	0100      	lsleq	r0, r0, #4
 8009c10:	3304      	addeq	r3, #4
 8009c12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009c16:	bf04      	itt	eq
 8009c18:	0080      	lsleq	r0, r0, #2
 8009c1a:	3302      	addeq	r3, #2
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	db05      	blt.n	8009c2c <__hi0bits+0x38>
 8009c20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009c24:	f103 0301 	add.w	r3, r3, #1
 8009c28:	bf08      	it	eq
 8009c2a:	2320      	moveq	r3, #32
 8009c2c:	4618      	mov	r0, r3
 8009c2e:	4770      	bx	lr
 8009c30:	2300      	movs	r3, #0
 8009c32:	e7e4      	b.n	8009bfe <__hi0bits+0xa>

08009c34 <__lo0bits>:
 8009c34:	6803      	ldr	r3, [r0, #0]
 8009c36:	f013 0207 	ands.w	r2, r3, #7
 8009c3a:	d00c      	beq.n	8009c56 <__lo0bits+0x22>
 8009c3c:	07d9      	lsls	r1, r3, #31
 8009c3e:	d422      	bmi.n	8009c86 <__lo0bits+0x52>
 8009c40:	079a      	lsls	r2, r3, #30
 8009c42:	bf49      	itett	mi
 8009c44:	085b      	lsrmi	r3, r3, #1
 8009c46:	089b      	lsrpl	r3, r3, #2
 8009c48:	6003      	strmi	r3, [r0, #0]
 8009c4a:	2201      	movmi	r2, #1
 8009c4c:	bf5c      	itt	pl
 8009c4e:	6003      	strpl	r3, [r0, #0]
 8009c50:	2202      	movpl	r2, #2
 8009c52:	4610      	mov	r0, r2
 8009c54:	4770      	bx	lr
 8009c56:	b299      	uxth	r1, r3
 8009c58:	b909      	cbnz	r1, 8009c5e <__lo0bits+0x2a>
 8009c5a:	0c1b      	lsrs	r3, r3, #16
 8009c5c:	2210      	movs	r2, #16
 8009c5e:	b2d9      	uxtb	r1, r3
 8009c60:	b909      	cbnz	r1, 8009c66 <__lo0bits+0x32>
 8009c62:	3208      	adds	r2, #8
 8009c64:	0a1b      	lsrs	r3, r3, #8
 8009c66:	0719      	lsls	r1, r3, #28
 8009c68:	bf04      	itt	eq
 8009c6a:	091b      	lsreq	r3, r3, #4
 8009c6c:	3204      	addeq	r2, #4
 8009c6e:	0799      	lsls	r1, r3, #30
 8009c70:	bf04      	itt	eq
 8009c72:	089b      	lsreq	r3, r3, #2
 8009c74:	3202      	addeq	r2, #2
 8009c76:	07d9      	lsls	r1, r3, #31
 8009c78:	d403      	bmi.n	8009c82 <__lo0bits+0x4e>
 8009c7a:	085b      	lsrs	r3, r3, #1
 8009c7c:	f102 0201 	add.w	r2, r2, #1
 8009c80:	d003      	beq.n	8009c8a <__lo0bits+0x56>
 8009c82:	6003      	str	r3, [r0, #0]
 8009c84:	e7e5      	b.n	8009c52 <__lo0bits+0x1e>
 8009c86:	2200      	movs	r2, #0
 8009c88:	e7e3      	b.n	8009c52 <__lo0bits+0x1e>
 8009c8a:	2220      	movs	r2, #32
 8009c8c:	e7e1      	b.n	8009c52 <__lo0bits+0x1e>
	...

08009c90 <__i2b>:
 8009c90:	b510      	push	{r4, lr}
 8009c92:	460c      	mov	r4, r1
 8009c94:	2101      	movs	r1, #1
 8009c96:	f7ff ff05 	bl	8009aa4 <_Balloc>
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	b928      	cbnz	r0, 8009caa <__i2b+0x1a>
 8009c9e:	4b05      	ldr	r3, [pc, #20]	; (8009cb4 <__i2b+0x24>)
 8009ca0:	4805      	ldr	r0, [pc, #20]	; (8009cb8 <__i2b+0x28>)
 8009ca2:	f240 1145 	movw	r1, #325	; 0x145
 8009ca6:	f000 fcb7 	bl	800a618 <__assert_func>
 8009caa:	2301      	movs	r3, #1
 8009cac:	6144      	str	r4, [r0, #20]
 8009cae:	6103      	str	r3, [r0, #16]
 8009cb0:	bd10      	pop	{r4, pc}
 8009cb2:	bf00      	nop
 8009cb4:	0800ae20 	.word	0x0800ae20
 8009cb8:	0800ae31 	.word	0x0800ae31

08009cbc <__multiply>:
 8009cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cc0:	4691      	mov	r9, r2
 8009cc2:	690a      	ldr	r2, [r1, #16]
 8009cc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc8:	429a      	cmp	r2, r3
 8009cca:	bfb8      	it	lt
 8009ccc:	460b      	movlt	r3, r1
 8009cce:	460c      	mov	r4, r1
 8009cd0:	bfbc      	itt	lt
 8009cd2:	464c      	movlt	r4, r9
 8009cd4:	4699      	movlt	r9, r3
 8009cd6:	6927      	ldr	r7, [r4, #16]
 8009cd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cdc:	68a3      	ldr	r3, [r4, #8]
 8009cde:	6861      	ldr	r1, [r4, #4]
 8009ce0:	eb07 060a 	add.w	r6, r7, sl
 8009ce4:	42b3      	cmp	r3, r6
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	bfb8      	it	lt
 8009cea:	3101      	addlt	r1, #1
 8009cec:	f7ff feda 	bl	8009aa4 <_Balloc>
 8009cf0:	b930      	cbnz	r0, 8009d00 <__multiply+0x44>
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	4b44      	ldr	r3, [pc, #272]	; (8009e08 <__multiply+0x14c>)
 8009cf6:	4845      	ldr	r0, [pc, #276]	; (8009e0c <__multiply+0x150>)
 8009cf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009cfc:	f000 fc8c 	bl	800a618 <__assert_func>
 8009d00:	f100 0514 	add.w	r5, r0, #20
 8009d04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d08:	462b      	mov	r3, r5
 8009d0a:	2200      	movs	r2, #0
 8009d0c:	4543      	cmp	r3, r8
 8009d0e:	d321      	bcc.n	8009d54 <__multiply+0x98>
 8009d10:	f104 0314 	add.w	r3, r4, #20
 8009d14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d18:	f109 0314 	add.w	r3, r9, #20
 8009d1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d20:	9202      	str	r2, [sp, #8]
 8009d22:	1b3a      	subs	r2, r7, r4
 8009d24:	3a15      	subs	r2, #21
 8009d26:	f022 0203 	bic.w	r2, r2, #3
 8009d2a:	3204      	adds	r2, #4
 8009d2c:	f104 0115 	add.w	r1, r4, #21
 8009d30:	428f      	cmp	r7, r1
 8009d32:	bf38      	it	cc
 8009d34:	2204      	movcc	r2, #4
 8009d36:	9201      	str	r2, [sp, #4]
 8009d38:	9a02      	ldr	r2, [sp, #8]
 8009d3a:	9303      	str	r3, [sp, #12]
 8009d3c:	429a      	cmp	r2, r3
 8009d3e:	d80c      	bhi.n	8009d5a <__multiply+0x9e>
 8009d40:	2e00      	cmp	r6, #0
 8009d42:	dd03      	ble.n	8009d4c <__multiply+0x90>
 8009d44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d05b      	beq.n	8009e04 <__multiply+0x148>
 8009d4c:	6106      	str	r6, [r0, #16]
 8009d4e:	b005      	add	sp, #20
 8009d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d54:	f843 2b04 	str.w	r2, [r3], #4
 8009d58:	e7d8      	b.n	8009d0c <__multiply+0x50>
 8009d5a:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d5e:	f1ba 0f00 	cmp.w	sl, #0
 8009d62:	d024      	beq.n	8009dae <__multiply+0xf2>
 8009d64:	f104 0e14 	add.w	lr, r4, #20
 8009d68:	46a9      	mov	r9, r5
 8009d6a:	f04f 0c00 	mov.w	ip, #0
 8009d6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d72:	f8d9 1000 	ldr.w	r1, [r9]
 8009d76:	fa1f fb82 	uxth.w	fp, r2
 8009d7a:	b289      	uxth	r1, r1
 8009d7c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009d84:	f8d9 2000 	ldr.w	r2, [r9]
 8009d88:	4461      	add	r1, ip
 8009d8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d8e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009d92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d96:	b289      	uxth	r1, r1
 8009d98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d9c:	4577      	cmp	r7, lr
 8009d9e:	f849 1b04 	str.w	r1, [r9], #4
 8009da2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009da6:	d8e2      	bhi.n	8009d6e <__multiply+0xb2>
 8009da8:	9a01      	ldr	r2, [sp, #4]
 8009daa:	f845 c002 	str.w	ip, [r5, r2]
 8009dae:	9a03      	ldr	r2, [sp, #12]
 8009db0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009db4:	3304      	adds	r3, #4
 8009db6:	f1b9 0f00 	cmp.w	r9, #0
 8009dba:	d021      	beq.n	8009e00 <__multiply+0x144>
 8009dbc:	6829      	ldr	r1, [r5, #0]
 8009dbe:	f104 0c14 	add.w	ip, r4, #20
 8009dc2:	46ae      	mov	lr, r5
 8009dc4:	f04f 0a00 	mov.w	sl, #0
 8009dc8:	f8bc b000 	ldrh.w	fp, [ip]
 8009dcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dd0:	fb09 220b 	mla	r2, r9, fp, r2
 8009dd4:	4452      	add	r2, sl
 8009dd6:	b289      	uxth	r1, r1
 8009dd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009ddc:	f84e 1b04 	str.w	r1, [lr], #4
 8009de0:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009de4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009de8:	f8be 1000 	ldrh.w	r1, [lr]
 8009dec:	fb09 110a 	mla	r1, r9, sl, r1
 8009df0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009df4:	4567      	cmp	r7, ip
 8009df6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009dfa:	d8e5      	bhi.n	8009dc8 <__multiply+0x10c>
 8009dfc:	9a01      	ldr	r2, [sp, #4]
 8009dfe:	50a9      	str	r1, [r5, r2]
 8009e00:	3504      	adds	r5, #4
 8009e02:	e799      	b.n	8009d38 <__multiply+0x7c>
 8009e04:	3e01      	subs	r6, #1
 8009e06:	e79b      	b.n	8009d40 <__multiply+0x84>
 8009e08:	0800ae20 	.word	0x0800ae20
 8009e0c:	0800ae31 	.word	0x0800ae31

08009e10 <__pow5mult>:
 8009e10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e14:	4615      	mov	r5, r2
 8009e16:	f012 0203 	ands.w	r2, r2, #3
 8009e1a:	4606      	mov	r6, r0
 8009e1c:	460f      	mov	r7, r1
 8009e1e:	d007      	beq.n	8009e30 <__pow5mult+0x20>
 8009e20:	4c25      	ldr	r4, [pc, #148]	; (8009eb8 <__pow5mult+0xa8>)
 8009e22:	3a01      	subs	r2, #1
 8009e24:	2300      	movs	r3, #0
 8009e26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e2a:	f7ff fe9d 	bl	8009b68 <__multadd>
 8009e2e:	4607      	mov	r7, r0
 8009e30:	10ad      	asrs	r5, r5, #2
 8009e32:	d03d      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e34:	69f4      	ldr	r4, [r6, #28]
 8009e36:	b97c      	cbnz	r4, 8009e58 <__pow5mult+0x48>
 8009e38:	2010      	movs	r0, #16
 8009e3a:	f7ff fd7f 	bl	800993c <malloc>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	61f0      	str	r0, [r6, #28]
 8009e42:	b928      	cbnz	r0, 8009e50 <__pow5mult+0x40>
 8009e44:	4b1d      	ldr	r3, [pc, #116]	; (8009ebc <__pow5mult+0xac>)
 8009e46:	481e      	ldr	r0, [pc, #120]	; (8009ec0 <__pow5mult+0xb0>)
 8009e48:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009e4c:	f000 fbe4 	bl	800a618 <__assert_func>
 8009e50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e54:	6004      	str	r4, [r0, #0]
 8009e56:	60c4      	str	r4, [r0, #12]
 8009e58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009e5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e60:	b94c      	cbnz	r4, 8009e76 <__pow5mult+0x66>
 8009e62:	f240 2171 	movw	r1, #625	; 0x271
 8009e66:	4630      	mov	r0, r6
 8009e68:	f7ff ff12 	bl	8009c90 <__i2b>
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e72:	4604      	mov	r4, r0
 8009e74:	6003      	str	r3, [r0, #0]
 8009e76:	f04f 0900 	mov.w	r9, #0
 8009e7a:	07eb      	lsls	r3, r5, #31
 8009e7c:	d50a      	bpl.n	8009e94 <__pow5mult+0x84>
 8009e7e:	4639      	mov	r1, r7
 8009e80:	4622      	mov	r2, r4
 8009e82:	4630      	mov	r0, r6
 8009e84:	f7ff ff1a 	bl	8009cbc <__multiply>
 8009e88:	4639      	mov	r1, r7
 8009e8a:	4680      	mov	r8, r0
 8009e8c:	4630      	mov	r0, r6
 8009e8e:	f7ff fe49 	bl	8009b24 <_Bfree>
 8009e92:	4647      	mov	r7, r8
 8009e94:	106d      	asrs	r5, r5, #1
 8009e96:	d00b      	beq.n	8009eb0 <__pow5mult+0xa0>
 8009e98:	6820      	ldr	r0, [r4, #0]
 8009e9a:	b938      	cbnz	r0, 8009eac <__pow5mult+0x9c>
 8009e9c:	4622      	mov	r2, r4
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	f7ff ff0b 	bl	8009cbc <__multiply>
 8009ea6:	6020      	str	r0, [r4, #0]
 8009ea8:	f8c0 9000 	str.w	r9, [r0]
 8009eac:	4604      	mov	r4, r0
 8009eae:	e7e4      	b.n	8009e7a <__pow5mult+0x6a>
 8009eb0:	4638      	mov	r0, r7
 8009eb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eb6:	bf00      	nop
 8009eb8:	0800af80 	.word	0x0800af80
 8009ebc:	0800adb1 	.word	0x0800adb1
 8009ec0:	0800ae31 	.word	0x0800ae31

08009ec4 <__lshift>:
 8009ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec8:	460c      	mov	r4, r1
 8009eca:	6849      	ldr	r1, [r1, #4]
 8009ecc:	6923      	ldr	r3, [r4, #16]
 8009ece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ed2:	68a3      	ldr	r3, [r4, #8]
 8009ed4:	4607      	mov	r7, r0
 8009ed6:	4691      	mov	r9, r2
 8009ed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009edc:	f108 0601 	add.w	r6, r8, #1
 8009ee0:	42b3      	cmp	r3, r6
 8009ee2:	db0b      	blt.n	8009efc <__lshift+0x38>
 8009ee4:	4638      	mov	r0, r7
 8009ee6:	f7ff fddd 	bl	8009aa4 <_Balloc>
 8009eea:	4605      	mov	r5, r0
 8009eec:	b948      	cbnz	r0, 8009f02 <__lshift+0x3e>
 8009eee:	4602      	mov	r2, r0
 8009ef0:	4b28      	ldr	r3, [pc, #160]	; (8009f94 <__lshift+0xd0>)
 8009ef2:	4829      	ldr	r0, [pc, #164]	; (8009f98 <__lshift+0xd4>)
 8009ef4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009ef8:	f000 fb8e 	bl	800a618 <__assert_func>
 8009efc:	3101      	adds	r1, #1
 8009efe:	005b      	lsls	r3, r3, #1
 8009f00:	e7ee      	b.n	8009ee0 <__lshift+0x1c>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f100 0114 	add.w	r1, r0, #20
 8009f08:	f100 0210 	add.w	r2, r0, #16
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	4553      	cmp	r3, sl
 8009f10:	db33      	blt.n	8009f7a <__lshift+0xb6>
 8009f12:	6920      	ldr	r0, [r4, #16]
 8009f14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f18:	f104 0314 	add.w	r3, r4, #20
 8009f1c:	f019 091f 	ands.w	r9, r9, #31
 8009f20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009f28:	d02b      	beq.n	8009f82 <__lshift+0xbe>
 8009f2a:	f1c9 0e20 	rsb	lr, r9, #32
 8009f2e:	468a      	mov	sl, r1
 8009f30:	2200      	movs	r2, #0
 8009f32:	6818      	ldr	r0, [r3, #0]
 8009f34:	fa00 f009 	lsl.w	r0, r0, r9
 8009f38:	4310      	orrs	r0, r2
 8009f3a:	f84a 0b04 	str.w	r0, [sl], #4
 8009f3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f42:	459c      	cmp	ip, r3
 8009f44:	fa22 f20e 	lsr.w	r2, r2, lr
 8009f48:	d8f3      	bhi.n	8009f32 <__lshift+0x6e>
 8009f4a:	ebac 0304 	sub.w	r3, ip, r4
 8009f4e:	3b15      	subs	r3, #21
 8009f50:	f023 0303 	bic.w	r3, r3, #3
 8009f54:	3304      	adds	r3, #4
 8009f56:	f104 0015 	add.w	r0, r4, #21
 8009f5a:	4584      	cmp	ip, r0
 8009f5c:	bf38      	it	cc
 8009f5e:	2304      	movcc	r3, #4
 8009f60:	50ca      	str	r2, [r1, r3]
 8009f62:	b10a      	cbz	r2, 8009f68 <__lshift+0xa4>
 8009f64:	f108 0602 	add.w	r6, r8, #2
 8009f68:	3e01      	subs	r6, #1
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	612e      	str	r6, [r5, #16]
 8009f6e:	4621      	mov	r1, r4
 8009f70:	f7ff fdd8 	bl	8009b24 <_Bfree>
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f7e:	3301      	adds	r3, #1
 8009f80:	e7c5      	b.n	8009f0e <__lshift+0x4a>
 8009f82:	3904      	subs	r1, #4
 8009f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f88:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f8c:	459c      	cmp	ip, r3
 8009f8e:	d8f9      	bhi.n	8009f84 <__lshift+0xc0>
 8009f90:	e7ea      	b.n	8009f68 <__lshift+0xa4>
 8009f92:	bf00      	nop
 8009f94:	0800ae20 	.word	0x0800ae20
 8009f98:	0800ae31 	.word	0x0800ae31

08009f9c <__mcmp>:
 8009f9c:	b530      	push	{r4, r5, lr}
 8009f9e:	6902      	ldr	r2, [r0, #16]
 8009fa0:	690c      	ldr	r4, [r1, #16]
 8009fa2:	1b12      	subs	r2, r2, r4
 8009fa4:	d10e      	bne.n	8009fc4 <__mcmp+0x28>
 8009fa6:	f100 0314 	add.w	r3, r0, #20
 8009faa:	3114      	adds	r1, #20
 8009fac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009fb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009fb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009fb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009fbc:	42a5      	cmp	r5, r4
 8009fbe:	d003      	beq.n	8009fc8 <__mcmp+0x2c>
 8009fc0:	d305      	bcc.n	8009fce <__mcmp+0x32>
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	4610      	mov	r0, r2
 8009fc6:	bd30      	pop	{r4, r5, pc}
 8009fc8:	4283      	cmp	r3, r0
 8009fca:	d3f3      	bcc.n	8009fb4 <__mcmp+0x18>
 8009fcc:	e7fa      	b.n	8009fc4 <__mcmp+0x28>
 8009fce:	f04f 32ff 	mov.w	r2, #4294967295
 8009fd2:	e7f7      	b.n	8009fc4 <__mcmp+0x28>

08009fd4 <__mdiff>:
 8009fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460c      	mov	r4, r1
 8009fda:	4606      	mov	r6, r0
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4620      	mov	r0, r4
 8009fe0:	4690      	mov	r8, r2
 8009fe2:	f7ff ffdb 	bl	8009f9c <__mcmp>
 8009fe6:	1e05      	subs	r5, r0, #0
 8009fe8:	d110      	bne.n	800a00c <__mdiff+0x38>
 8009fea:	4629      	mov	r1, r5
 8009fec:	4630      	mov	r0, r6
 8009fee:	f7ff fd59 	bl	8009aa4 <_Balloc>
 8009ff2:	b930      	cbnz	r0, 800a002 <__mdiff+0x2e>
 8009ff4:	4b3a      	ldr	r3, [pc, #232]	; (800a0e0 <__mdiff+0x10c>)
 8009ff6:	4602      	mov	r2, r0
 8009ff8:	f240 2137 	movw	r1, #567	; 0x237
 8009ffc:	4839      	ldr	r0, [pc, #228]	; (800a0e4 <__mdiff+0x110>)
 8009ffe:	f000 fb0b 	bl	800a618 <__assert_func>
 800a002:	2301      	movs	r3, #1
 800a004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00c:	bfa4      	itt	ge
 800a00e:	4643      	movge	r3, r8
 800a010:	46a0      	movge	r8, r4
 800a012:	4630      	mov	r0, r6
 800a014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a018:	bfa6      	itte	ge
 800a01a:	461c      	movge	r4, r3
 800a01c:	2500      	movge	r5, #0
 800a01e:	2501      	movlt	r5, #1
 800a020:	f7ff fd40 	bl	8009aa4 <_Balloc>
 800a024:	b920      	cbnz	r0, 800a030 <__mdiff+0x5c>
 800a026:	4b2e      	ldr	r3, [pc, #184]	; (800a0e0 <__mdiff+0x10c>)
 800a028:	4602      	mov	r2, r0
 800a02a:	f240 2145 	movw	r1, #581	; 0x245
 800a02e:	e7e5      	b.n	8009ffc <__mdiff+0x28>
 800a030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a034:	6926      	ldr	r6, [r4, #16]
 800a036:	60c5      	str	r5, [r0, #12]
 800a038:	f104 0914 	add.w	r9, r4, #20
 800a03c:	f108 0514 	add.w	r5, r8, #20
 800a040:	f100 0e14 	add.w	lr, r0, #20
 800a044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a04c:	f108 0210 	add.w	r2, r8, #16
 800a050:	46f2      	mov	sl, lr
 800a052:	2100      	movs	r1, #0
 800a054:	f859 3b04 	ldr.w	r3, [r9], #4
 800a058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a05c:	fa11 f88b 	uxtah	r8, r1, fp
 800a060:	b299      	uxth	r1, r3
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	eba8 0801 	sub.w	r8, r8, r1
 800a068:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a06c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a070:	fa1f f888 	uxth.w	r8, r8
 800a074:	1419      	asrs	r1, r3, #16
 800a076:	454e      	cmp	r6, r9
 800a078:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a07c:	f84a 3b04 	str.w	r3, [sl], #4
 800a080:	d8e8      	bhi.n	800a054 <__mdiff+0x80>
 800a082:	1b33      	subs	r3, r6, r4
 800a084:	3b15      	subs	r3, #21
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	3304      	adds	r3, #4
 800a08c:	3415      	adds	r4, #21
 800a08e:	42a6      	cmp	r6, r4
 800a090:	bf38      	it	cc
 800a092:	2304      	movcc	r3, #4
 800a094:	441d      	add	r5, r3
 800a096:	4473      	add	r3, lr
 800a098:	469e      	mov	lr, r3
 800a09a:	462e      	mov	r6, r5
 800a09c:	4566      	cmp	r6, ip
 800a09e:	d30e      	bcc.n	800a0be <__mdiff+0xea>
 800a0a0:	f10c 0203 	add.w	r2, ip, #3
 800a0a4:	1b52      	subs	r2, r2, r5
 800a0a6:	f022 0203 	bic.w	r2, r2, #3
 800a0aa:	3d03      	subs	r5, #3
 800a0ac:	45ac      	cmp	ip, r5
 800a0ae:	bf38      	it	cc
 800a0b0:	2200      	movcc	r2, #0
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a0b8:	b17a      	cbz	r2, 800a0da <__mdiff+0x106>
 800a0ba:	6107      	str	r7, [r0, #16]
 800a0bc:	e7a4      	b.n	800a008 <__mdiff+0x34>
 800a0be:	f856 8b04 	ldr.w	r8, [r6], #4
 800a0c2:	fa11 f288 	uxtah	r2, r1, r8
 800a0c6:	1414      	asrs	r4, r2, #16
 800a0c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0cc:	b292      	uxth	r2, r2
 800a0ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a0d2:	f84e 2b04 	str.w	r2, [lr], #4
 800a0d6:	1421      	asrs	r1, r4, #16
 800a0d8:	e7e0      	b.n	800a09c <__mdiff+0xc8>
 800a0da:	3f01      	subs	r7, #1
 800a0dc:	e7ea      	b.n	800a0b4 <__mdiff+0xe0>
 800a0de:	bf00      	nop
 800a0e0:	0800ae20 	.word	0x0800ae20
 800a0e4:	0800ae31 	.word	0x0800ae31

0800a0e8 <__d2b>:
 800a0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a0ec:	460f      	mov	r7, r1
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	ec59 8b10 	vmov	r8, r9, d0
 800a0f4:	4616      	mov	r6, r2
 800a0f6:	f7ff fcd5 	bl	8009aa4 <_Balloc>
 800a0fa:	4604      	mov	r4, r0
 800a0fc:	b930      	cbnz	r0, 800a10c <__d2b+0x24>
 800a0fe:	4602      	mov	r2, r0
 800a100:	4b24      	ldr	r3, [pc, #144]	; (800a194 <__d2b+0xac>)
 800a102:	4825      	ldr	r0, [pc, #148]	; (800a198 <__d2b+0xb0>)
 800a104:	f240 310f 	movw	r1, #783	; 0x30f
 800a108:	f000 fa86 	bl	800a618 <__assert_func>
 800a10c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a114:	bb2d      	cbnz	r5, 800a162 <__d2b+0x7a>
 800a116:	9301      	str	r3, [sp, #4]
 800a118:	f1b8 0300 	subs.w	r3, r8, #0
 800a11c:	d026      	beq.n	800a16c <__d2b+0x84>
 800a11e:	4668      	mov	r0, sp
 800a120:	9300      	str	r3, [sp, #0]
 800a122:	f7ff fd87 	bl	8009c34 <__lo0bits>
 800a126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a12a:	b1e8      	cbz	r0, 800a168 <__d2b+0x80>
 800a12c:	f1c0 0320 	rsb	r3, r0, #32
 800a130:	fa02 f303 	lsl.w	r3, r2, r3
 800a134:	430b      	orrs	r3, r1
 800a136:	40c2      	lsrs	r2, r0
 800a138:	6163      	str	r3, [r4, #20]
 800a13a:	9201      	str	r2, [sp, #4]
 800a13c:	9b01      	ldr	r3, [sp, #4]
 800a13e:	61a3      	str	r3, [r4, #24]
 800a140:	2b00      	cmp	r3, #0
 800a142:	bf14      	ite	ne
 800a144:	2202      	movne	r2, #2
 800a146:	2201      	moveq	r2, #1
 800a148:	6122      	str	r2, [r4, #16]
 800a14a:	b1bd      	cbz	r5, 800a17c <__d2b+0x94>
 800a14c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a150:	4405      	add	r5, r0
 800a152:	603d      	str	r5, [r7, #0]
 800a154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a158:	6030      	str	r0, [r6, #0]
 800a15a:	4620      	mov	r0, r4
 800a15c:	b003      	add	sp, #12
 800a15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a166:	e7d6      	b.n	800a116 <__d2b+0x2e>
 800a168:	6161      	str	r1, [r4, #20]
 800a16a:	e7e7      	b.n	800a13c <__d2b+0x54>
 800a16c:	a801      	add	r0, sp, #4
 800a16e:	f7ff fd61 	bl	8009c34 <__lo0bits>
 800a172:	9b01      	ldr	r3, [sp, #4]
 800a174:	6163      	str	r3, [r4, #20]
 800a176:	3020      	adds	r0, #32
 800a178:	2201      	movs	r2, #1
 800a17a:	e7e5      	b.n	800a148 <__d2b+0x60>
 800a17c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a184:	6038      	str	r0, [r7, #0]
 800a186:	6918      	ldr	r0, [r3, #16]
 800a188:	f7ff fd34 	bl	8009bf4 <__hi0bits>
 800a18c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a190:	e7e2      	b.n	800a158 <__d2b+0x70>
 800a192:	bf00      	nop
 800a194:	0800ae20 	.word	0x0800ae20
 800a198:	0800ae31 	.word	0x0800ae31

0800a19c <__ssputs_r>:
 800a19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1a0:	688e      	ldr	r6, [r1, #8]
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	42be      	cmp	r6, r7
 800a1a6:	680b      	ldr	r3, [r1, #0]
 800a1a8:	4682      	mov	sl, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	4690      	mov	r8, r2
 800a1ae:	d82c      	bhi.n	800a20a <__ssputs_r+0x6e>
 800a1b0:	898a      	ldrh	r2, [r1, #12]
 800a1b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a1b6:	d026      	beq.n	800a206 <__ssputs_r+0x6a>
 800a1b8:	6965      	ldr	r5, [r4, #20]
 800a1ba:	6909      	ldr	r1, [r1, #16]
 800a1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1c0:	eba3 0901 	sub.w	r9, r3, r1
 800a1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1c8:	1c7b      	adds	r3, r7, #1
 800a1ca:	444b      	add	r3, r9
 800a1cc:	106d      	asrs	r5, r5, #1
 800a1ce:	429d      	cmp	r5, r3
 800a1d0:	bf38      	it	cc
 800a1d2:	461d      	movcc	r5, r3
 800a1d4:	0553      	lsls	r3, r2, #21
 800a1d6:	d527      	bpl.n	800a228 <__ssputs_r+0x8c>
 800a1d8:	4629      	mov	r1, r5
 800a1da:	f7ff fbd7 	bl	800998c <_malloc_r>
 800a1de:	4606      	mov	r6, r0
 800a1e0:	b360      	cbz	r0, 800a23c <__ssputs_r+0xa0>
 800a1e2:	6921      	ldr	r1, [r4, #16]
 800a1e4:	464a      	mov	r2, r9
 800a1e6:	f000 fa09 	bl	800a5fc <memcpy>
 800a1ea:	89a3      	ldrh	r3, [r4, #12]
 800a1ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1f4:	81a3      	strh	r3, [r4, #12]
 800a1f6:	6126      	str	r6, [r4, #16]
 800a1f8:	6165      	str	r5, [r4, #20]
 800a1fa:	444e      	add	r6, r9
 800a1fc:	eba5 0509 	sub.w	r5, r5, r9
 800a200:	6026      	str	r6, [r4, #0]
 800a202:	60a5      	str	r5, [r4, #8]
 800a204:	463e      	mov	r6, r7
 800a206:	42be      	cmp	r6, r7
 800a208:	d900      	bls.n	800a20c <__ssputs_r+0x70>
 800a20a:	463e      	mov	r6, r7
 800a20c:	6820      	ldr	r0, [r4, #0]
 800a20e:	4632      	mov	r2, r6
 800a210:	4641      	mov	r1, r8
 800a212:	f000 f9c9 	bl	800a5a8 <memmove>
 800a216:	68a3      	ldr	r3, [r4, #8]
 800a218:	1b9b      	subs	r3, r3, r6
 800a21a:	60a3      	str	r3, [r4, #8]
 800a21c:	6823      	ldr	r3, [r4, #0]
 800a21e:	4433      	add	r3, r6
 800a220:	6023      	str	r3, [r4, #0]
 800a222:	2000      	movs	r0, #0
 800a224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a228:	462a      	mov	r2, r5
 800a22a:	f000 fa3b 	bl	800a6a4 <_realloc_r>
 800a22e:	4606      	mov	r6, r0
 800a230:	2800      	cmp	r0, #0
 800a232:	d1e0      	bne.n	800a1f6 <__ssputs_r+0x5a>
 800a234:	6921      	ldr	r1, [r4, #16]
 800a236:	4650      	mov	r0, sl
 800a238:	f7ff fb34 	bl	80098a4 <_free_r>
 800a23c:	230c      	movs	r3, #12
 800a23e:	f8ca 3000 	str.w	r3, [sl]
 800a242:	89a3      	ldrh	r3, [r4, #12]
 800a244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a248:	81a3      	strh	r3, [r4, #12]
 800a24a:	f04f 30ff 	mov.w	r0, #4294967295
 800a24e:	e7e9      	b.n	800a224 <__ssputs_r+0x88>

0800a250 <_svfiprintf_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	4698      	mov	r8, r3
 800a256:	898b      	ldrh	r3, [r1, #12]
 800a258:	061b      	lsls	r3, r3, #24
 800a25a:	b09d      	sub	sp, #116	; 0x74
 800a25c:	4607      	mov	r7, r0
 800a25e:	460d      	mov	r5, r1
 800a260:	4614      	mov	r4, r2
 800a262:	d50e      	bpl.n	800a282 <_svfiprintf_r+0x32>
 800a264:	690b      	ldr	r3, [r1, #16]
 800a266:	b963      	cbnz	r3, 800a282 <_svfiprintf_r+0x32>
 800a268:	2140      	movs	r1, #64	; 0x40
 800a26a:	f7ff fb8f 	bl	800998c <_malloc_r>
 800a26e:	6028      	str	r0, [r5, #0]
 800a270:	6128      	str	r0, [r5, #16]
 800a272:	b920      	cbnz	r0, 800a27e <_svfiprintf_r+0x2e>
 800a274:	230c      	movs	r3, #12
 800a276:	603b      	str	r3, [r7, #0]
 800a278:	f04f 30ff 	mov.w	r0, #4294967295
 800a27c:	e0d0      	b.n	800a420 <_svfiprintf_r+0x1d0>
 800a27e:	2340      	movs	r3, #64	; 0x40
 800a280:	616b      	str	r3, [r5, #20]
 800a282:	2300      	movs	r3, #0
 800a284:	9309      	str	r3, [sp, #36]	; 0x24
 800a286:	2320      	movs	r3, #32
 800a288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a290:	2330      	movs	r3, #48	; 0x30
 800a292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a438 <_svfiprintf_r+0x1e8>
 800a296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a29a:	f04f 0901 	mov.w	r9, #1
 800a29e:	4623      	mov	r3, r4
 800a2a0:	469a      	mov	sl, r3
 800a2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2a6:	b10a      	cbz	r2, 800a2ac <_svfiprintf_r+0x5c>
 800a2a8:	2a25      	cmp	r2, #37	; 0x25
 800a2aa:	d1f9      	bne.n	800a2a0 <_svfiprintf_r+0x50>
 800a2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800a2b0:	d00b      	beq.n	800a2ca <_svfiprintf_r+0x7a>
 800a2b2:	465b      	mov	r3, fp
 800a2b4:	4622      	mov	r2, r4
 800a2b6:	4629      	mov	r1, r5
 800a2b8:	4638      	mov	r0, r7
 800a2ba:	f7ff ff6f 	bl	800a19c <__ssputs_r>
 800a2be:	3001      	adds	r0, #1
 800a2c0:	f000 80a9 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c6:	445a      	add	r2, fp
 800a2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	f000 80a1 	beq.w	800a416 <_svfiprintf_r+0x1c6>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2de:	f10a 0a01 	add.w	sl, sl, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	9307      	str	r3, [sp, #28]
 800a2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800a2ec:	4654      	mov	r4, sl
 800a2ee:	2205      	movs	r2, #5
 800a2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a2f4:	4850      	ldr	r0, [pc, #320]	; (800a438 <_svfiprintf_r+0x1e8>)
 800a2f6:	f7f5 ff6b 	bl	80001d0 <memchr>
 800a2fa:	9a04      	ldr	r2, [sp, #16]
 800a2fc:	b9d8      	cbnz	r0, 800a336 <_svfiprintf_r+0xe6>
 800a2fe:	06d0      	lsls	r0, r2, #27
 800a300:	bf44      	itt	mi
 800a302:	2320      	movmi	r3, #32
 800a304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a308:	0711      	lsls	r1, r2, #28
 800a30a:	bf44      	itt	mi
 800a30c:	232b      	movmi	r3, #43	; 0x2b
 800a30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a312:	f89a 3000 	ldrb.w	r3, [sl]
 800a316:	2b2a      	cmp	r3, #42	; 0x2a
 800a318:	d015      	beq.n	800a346 <_svfiprintf_r+0xf6>
 800a31a:	9a07      	ldr	r2, [sp, #28]
 800a31c:	4654      	mov	r4, sl
 800a31e:	2000      	movs	r0, #0
 800a320:	f04f 0c0a 	mov.w	ip, #10
 800a324:	4621      	mov	r1, r4
 800a326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a32a:	3b30      	subs	r3, #48	; 0x30
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	d94d      	bls.n	800a3cc <_svfiprintf_r+0x17c>
 800a330:	b1b0      	cbz	r0, 800a360 <_svfiprintf_r+0x110>
 800a332:	9207      	str	r2, [sp, #28]
 800a334:	e014      	b.n	800a360 <_svfiprintf_r+0x110>
 800a336:	eba0 0308 	sub.w	r3, r0, r8
 800a33a:	fa09 f303 	lsl.w	r3, r9, r3
 800a33e:	4313      	orrs	r3, r2
 800a340:	9304      	str	r3, [sp, #16]
 800a342:	46a2      	mov	sl, r4
 800a344:	e7d2      	b.n	800a2ec <_svfiprintf_r+0x9c>
 800a346:	9b03      	ldr	r3, [sp, #12]
 800a348:	1d19      	adds	r1, r3, #4
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	9103      	str	r1, [sp, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	bfbb      	ittet	lt
 800a352:	425b      	neglt	r3, r3
 800a354:	f042 0202 	orrlt.w	r2, r2, #2
 800a358:	9307      	strge	r3, [sp, #28]
 800a35a:	9307      	strlt	r3, [sp, #28]
 800a35c:	bfb8      	it	lt
 800a35e:	9204      	strlt	r2, [sp, #16]
 800a360:	7823      	ldrb	r3, [r4, #0]
 800a362:	2b2e      	cmp	r3, #46	; 0x2e
 800a364:	d10c      	bne.n	800a380 <_svfiprintf_r+0x130>
 800a366:	7863      	ldrb	r3, [r4, #1]
 800a368:	2b2a      	cmp	r3, #42	; 0x2a
 800a36a:	d134      	bne.n	800a3d6 <_svfiprintf_r+0x186>
 800a36c:	9b03      	ldr	r3, [sp, #12]
 800a36e:	1d1a      	adds	r2, r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	9203      	str	r2, [sp, #12]
 800a374:	2b00      	cmp	r3, #0
 800a376:	bfb8      	it	lt
 800a378:	f04f 33ff 	movlt.w	r3, #4294967295
 800a37c:	3402      	adds	r4, #2
 800a37e:	9305      	str	r3, [sp, #20]
 800a380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800a448 <_svfiprintf_r+0x1f8>
 800a384:	7821      	ldrb	r1, [r4, #0]
 800a386:	2203      	movs	r2, #3
 800a388:	4650      	mov	r0, sl
 800a38a:	f7f5 ff21 	bl	80001d0 <memchr>
 800a38e:	b138      	cbz	r0, 800a3a0 <_svfiprintf_r+0x150>
 800a390:	9b04      	ldr	r3, [sp, #16]
 800a392:	eba0 000a 	sub.w	r0, r0, sl
 800a396:	2240      	movs	r2, #64	; 0x40
 800a398:	4082      	lsls	r2, r0
 800a39a:	4313      	orrs	r3, r2
 800a39c:	3401      	adds	r4, #1
 800a39e:	9304      	str	r3, [sp, #16]
 800a3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3a4:	4825      	ldr	r0, [pc, #148]	; (800a43c <_svfiprintf_r+0x1ec>)
 800a3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a3aa:	2206      	movs	r2, #6
 800a3ac:	f7f5 ff10 	bl	80001d0 <memchr>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d038      	beq.n	800a426 <_svfiprintf_r+0x1d6>
 800a3b4:	4b22      	ldr	r3, [pc, #136]	; (800a440 <_svfiprintf_r+0x1f0>)
 800a3b6:	bb1b      	cbnz	r3, 800a400 <_svfiprintf_r+0x1b0>
 800a3b8:	9b03      	ldr	r3, [sp, #12]
 800a3ba:	3307      	adds	r3, #7
 800a3bc:	f023 0307 	bic.w	r3, r3, #7
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	9303      	str	r3, [sp, #12]
 800a3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3c6:	4433      	add	r3, r6
 800a3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a3ca:	e768      	b.n	800a29e <_svfiprintf_r+0x4e>
 800a3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3d0:	460c      	mov	r4, r1
 800a3d2:	2001      	movs	r0, #1
 800a3d4:	e7a6      	b.n	800a324 <_svfiprintf_r+0xd4>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	3401      	adds	r4, #1
 800a3da:	9305      	str	r3, [sp, #20]
 800a3dc:	4619      	mov	r1, r3
 800a3de:	f04f 0c0a 	mov.w	ip, #10
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a3e8:	3a30      	subs	r2, #48	; 0x30
 800a3ea:	2a09      	cmp	r2, #9
 800a3ec:	d903      	bls.n	800a3f6 <_svfiprintf_r+0x1a6>
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d0c6      	beq.n	800a380 <_svfiprintf_r+0x130>
 800a3f2:	9105      	str	r1, [sp, #20]
 800a3f4:	e7c4      	b.n	800a380 <_svfiprintf_r+0x130>
 800a3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800a3fa:	4604      	mov	r4, r0
 800a3fc:	2301      	movs	r3, #1
 800a3fe:	e7f0      	b.n	800a3e2 <_svfiprintf_r+0x192>
 800a400:	ab03      	add	r3, sp, #12
 800a402:	9300      	str	r3, [sp, #0]
 800a404:	462a      	mov	r2, r5
 800a406:	4b0f      	ldr	r3, [pc, #60]	; (800a444 <_svfiprintf_r+0x1f4>)
 800a408:	a904      	add	r1, sp, #16
 800a40a:	4638      	mov	r0, r7
 800a40c:	f7fd fe64 	bl	80080d8 <_printf_float>
 800a410:	1c42      	adds	r2, r0, #1
 800a412:	4606      	mov	r6, r0
 800a414:	d1d6      	bne.n	800a3c4 <_svfiprintf_r+0x174>
 800a416:	89ab      	ldrh	r3, [r5, #12]
 800a418:	065b      	lsls	r3, r3, #25
 800a41a:	f53f af2d 	bmi.w	800a278 <_svfiprintf_r+0x28>
 800a41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a420:	b01d      	add	sp, #116	; 0x74
 800a422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a426:	ab03      	add	r3, sp, #12
 800a428:	9300      	str	r3, [sp, #0]
 800a42a:	462a      	mov	r2, r5
 800a42c:	4b05      	ldr	r3, [pc, #20]	; (800a444 <_svfiprintf_r+0x1f4>)
 800a42e:	a904      	add	r1, sp, #16
 800a430:	4638      	mov	r0, r7
 800a432:	f7fe f8f5 	bl	8008620 <_printf_i>
 800a436:	e7eb      	b.n	800a410 <_svfiprintf_r+0x1c0>
 800a438:	0800af8c 	.word	0x0800af8c
 800a43c:	0800af96 	.word	0x0800af96
 800a440:	080080d9 	.word	0x080080d9
 800a444:	0800a19d 	.word	0x0800a19d
 800a448:	0800af92 	.word	0x0800af92

0800a44c <__sflush_r>:
 800a44c:	898a      	ldrh	r2, [r1, #12]
 800a44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a452:	4605      	mov	r5, r0
 800a454:	0710      	lsls	r0, r2, #28
 800a456:	460c      	mov	r4, r1
 800a458:	d458      	bmi.n	800a50c <__sflush_r+0xc0>
 800a45a:	684b      	ldr	r3, [r1, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	dc05      	bgt.n	800a46c <__sflush_r+0x20>
 800a460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a462:	2b00      	cmp	r3, #0
 800a464:	dc02      	bgt.n	800a46c <__sflush_r+0x20>
 800a466:	2000      	movs	r0, #0
 800a468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a46e:	2e00      	cmp	r6, #0
 800a470:	d0f9      	beq.n	800a466 <__sflush_r+0x1a>
 800a472:	2300      	movs	r3, #0
 800a474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a478:	682f      	ldr	r7, [r5, #0]
 800a47a:	6a21      	ldr	r1, [r4, #32]
 800a47c:	602b      	str	r3, [r5, #0]
 800a47e:	d032      	beq.n	800a4e6 <__sflush_r+0x9a>
 800a480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a482:	89a3      	ldrh	r3, [r4, #12]
 800a484:	075a      	lsls	r2, r3, #29
 800a486:	d505      	bpl.n	800a494 <__sflush_r+0x48>
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	1ac0      	subs	r0, r0, r3
 800a48c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a48e:	b10b      	cbz	r3, 800a494 <__sflush_r+0x48>
 800a490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a492:	1ac0      	subs	r0, r0, r3
 800a494:	2300      	movs	r3, #0
 800a496:	4602      	mov	r2, r0
 800a498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a49a:	6a21      	ldr	r1, [r4, #32]
 800a49c:	4628      	mov	r0, r5
 800a49e:	47b0      	blx	r6
 800a4a0:	1c43      	adds	r3, r0, #1
 800a4a2:	89a3      	ldrh	r3, [r4, #12]
 800a4a4:	d106      	bne.n	800a4b4 <__sflush_r+0x68>
 800a4a6:	6829      	ldr	r1, [r5, #0]
 800a4a8:	291d      	cmp	r1, #29
 800a4aa:	d82b      	bhi.n	800a504 <__sflush_r+0xb8>
 800a4ac:	4a29      	ldr	r2, [pc, #164]	; (800a554 <__sflush_r+0x108>)
 800a4ae:	410a      	asrs	r2, r1
 800a4b0:	07d6      	lsls	r6, r2, #31
 800a4b2:	d427      	bmi.n	800a504 <__sflush_r+0xb8>
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	6062      	str	r2, [r4, #4]
 800a4b8:	04d9      	lsls	r1, r3, #19
 800a4ba:	6922      	ldr	r2, [r4, #16]
 800a4bc:	6022      	str	r2, [r4, #0]
 800a4be:	d504      	bpl.n	800a4ca <__sflush_r+0x7e>
 800a4c0:	1c42      	adds	r2, r0, #1
 800a4c2:	d101      	bne.n	800a4c8 <__sflush_r+0x7c>
 800a4c4:	682b      	ldr	r3, [r5, #0]
 800a4c6:	b903      	cbnz	r3, 800a4ca <__sflush_r+0x7e>
 800a4c8:	6560      	str	r0, [r4, #84]	; 0x54
 800a4ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a4cc:	602f      	str	r7, [r5, #0]
 800a4ce:	2900      	cmp	r1, #0
 800a4d0:	d0c9      	beq.n	800a466 <__sflush_r+0x1a>
 800a4d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	d002      	beq.n	800a4e0 <__sflush_r+0x94>
 800a4da:	4628      	mov	r0, r5
 800a4dc:	f7ff f9e2 	bl	80098a4 <_free_r>
 800a4e0:	2000      	movs	r0, #0
 800a4e2:	6360      	str	r0, [r4, #52]	; 0x34
 800a4e4:	e7c0      	b.n	800a468 <__sflush_r+0x1c>
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	4628      	mov	r0, r5
 800a4ea:	47b0      	blx	r6
 800a4ec:	1c41      	adds	r1, r0, #1
 800a4ee:	d1c8      	bne.n	800a482 <__sflush_r+0x36>
 800a4f0:	682b      	ldr	r3, [r5, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d0c5      	beq.n	800a482 <__sflush_r+0x36>
 800a4f6:	2b1d      	cmp	r3, #29
 800a4f8:	d001      	beq.n	800a4fe <__sflush_r+0xb2>
 800a4fa:	2b16      	cmp	r3, #22
 800a4fc:	d101      	bne.n	800a502 <__sflush_r+0xb6>
 800a4fe:	602f      	str	r7, [r5, #0]
 800a500:	e7b1      	b.n	800a466 <__sflush_r+0x1a>
 800a502:	89a3      	ldrh	r3, [r4, #12]
 800a504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a508:	81a3      	strh	r3, [r4, #12]
 800a50a:	e7ad      	b.n	800a468 <__sflush_r+0x1c>
 800a50c:	690f      	ldr	r7, [r1, #16]
 800a50e:	2f00      	cmp	r7, #0
 800a510:	d0a9      	beq.n	800a466 <__sflush_r+0x1a>
 800a512:	0793      	lsls	r3, r2, #30
 800a514:	680e      	ldr	r6, [r1, #0]
 800a516:	bf08      	it	eq
 800a518:	694b      	ldreq	r3, [r1, #20]
 800a51a:	600f      	str	r7, [r1, #0]
 800a51c:	bf18      	it	ne
 800a51e:	2300      	movne	r3, #0
 800a520:	eba6 0807 	sub.w	r8, r6, r7
 800a524:	608b      	str	r3, [r1, #8]
 800a526:	f1b8 0f00 	cmp.w	r8, #0
 800a52a:	dd9c      	ble.n	800a466 <__sflush_r+0x1a>
 800a52c:	6a21      	ldr	r1, [r4, #32]
 800a52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a530:	4643      	mov	r3, r8
 800a532:	463a      	mov	r2, r7
 800a534:	4628      	mov	r0, r5
 800a536:	47b0      	blx	r6
 800a538:	2800      	cmp	r0, #0
 800a53a:	dc06      	bgt.n	800a54a <__sflush_r+0xfe>
 800a53c:	89a3      	ldrh	r3, [r4, #12]
 800a53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a542:	81a3      	strh	r3, [r4, #12]
 800a544:	f04f 30ff 	mov.w	r0, #4294967295
 800a548:	e78e      	b.n	800a468 <__sflush_r+0x1c>
 800a54a:	4407      	add	r7, r0
 800a54c:	eba8 0800 	sub.w	r8, r8, r0
 800a550:	e7e9      	b.n	800a526 <__sflush_r+0xda>
 800a552:	bf00      	nop
 800a554:	dfbffffe 	.word	0xdfbffffe

0800a558 <_fflush_r>:
 800a558:	b538      	push	{r3, r4, r5, lr}
 800a55a:	690b      	ldr	r3, [r1, #16]
 800a55c:	4605      	mov	r5, r0
 800a55e:	460c      	mov	r4, r1
 800a560:	b913      	cbnz	r3, 800a568 <_fflush_r+0x10>
 800a562:	2500      	movs	r5, #0
 800a564:	4628      	mov	r0, r5
 800a566:	bd38      	pop	{r3, r4, r5, pc}
 800a568:	b118      	cbz	r0, 800a572 <_fflush_r+0x1a>
 800a56a:	6a03      	ldr	r3, [r0, #32]
 800a56c:	b90b      	cbnz	r3, 800a572 <_fflush_r+0x1a>
 800a56e:	f7fe fa05 	bl	800897c <__sinit>
 800a572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0f3      	beq.n	800a562 <_fflush_r+0xa>
 800a57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a57c:	07d0      	lsls	r0, r2, #31
 800a57e:	d404      	bmi.n	800a58a <_fflush_r+0x32>
 800a580:	0599      	lsls	r1, r3, #22
 800a582:	d402      	bmi.n	800a58a <_fflush_r+0x32>
 800a584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a586:	f7fe fb10 	bl	8008baa <__retarget_lock_acquire_recursive>
 800a58a:	4628      	mov	r0, r5
 800a58c:	4621      	mov	r1, r4
 800a58e:	f7ff ff5d 	bl	800a44c <__sflush_r>
 800a592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a594:	07da      	lsls	r2, r3, #31
 800a596:	4605      	mov	r5, r0
 800a598:	d4e4      	bmi.n	800a564 <_fflush_r+0xc>
 800a59a:	89a3      	ldrh	r3, [r4, #12]
 800a59c:	059b      	lsls	r3, r3, #22
 800a59e:	d4e1      	bmi.n	800a564 <_fflush_r+0xc>
 800a5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5a2:	f7fe fb03 	bl	8008bac <__retarget_lock_release_recursive>
 800a5a6:	e7dd      	b.n	800a564 <_fflush_r+0xc>

0800a5a8 <memmove>:
 800a5a8:	4288      	cmp	r0, r1
 800a5aa:	b510      	push	{r4, lr}
 800a5ac:	eb01 0402 	add.w	r4, r1, r2
 800a5b0:	d902      	bls.n	800a5b8 <memmove+0x10>
 800a5b2:	4284      	cmp	r4, r0
 800a5b4:	4623      	mov	r3, r4
 800a5b6:	d807      	bhi.n	800a5c8 <memmove+0x20>
 800a5b8:	1e43      	subs	r3, r0, #1
 800a5ba:	42a1      	cmp	r1, r4
 800a5bc:	d008      	beq.n	800a5d0 <memmove+0x28>
 800a5be:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5c6:	e7f8      	b.n	800a5ba <memmove+0x12>
 800a5c8:	4402      	add	r2, r0
 800a5ca:	4601      	mov	r1, r0
 800a5cc:	428a      	cmp	r2, r1
 800a5ce:	d100      	bne.n	800a5d2 <memmove+0x2a>
 800a5d0:	bd10      	pop	{r4, pc}
 800a5d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5da:	e7f7      	b.n	800a5cc <memmove+0x24>

0800a5dc <_sbrk_r>:
 800a5dc:	b538      	push	{r3, r4, r5, lr}
 800a5de:	4d06      	ldr	r5, [pc, #24]	; (800a5f8 <_sbrk_r+0x1c>)
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	602b      	str	r3, [r5, #0]
 800a5e8:	f7f7 fc1a 	bl	8001e20 <_sbrk>
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	d102      	bne.n	800a5f6 <_sbrk_r+0x1a>
 800a5f0:	682b      	ldr	r3, [r5, #0]
 800a5f2:	b103      	cbz	r3, 800a5f6 <_sbrk_r+0x1a>
 800a5f4:	6023      	str	r3, [r4, #0]
 800a5f6:	bd38      	pop	{r3, r4, r5, pc}
 800a5f8:	2000061c 	.word	0x2000061c

0800a5fc <memcpy>:
 800a5fc:	440a      	add	r2, r1
 800a5fe:	4291      	cmp	r1, r2
 800a600:	f100 33ff 	add.w	r3, r0, #4294967295
 800a604:	d100      	bne.n	800a608 <memcpy+0xc>
 800a606:	4770      	bx	lr
 800a608:	b510      	push	{r4, lr}
 800a60a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a60e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a612:	4291      	cmp	r1, r2
 800a614:	d1f9      	bne.n	800a60a <memcpy+0xe>
 800a616:	bd10      	pop	{r4, pc}

0800a618 <__assert_func>:
 800a618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a61a:	4614      	mov	r4, r2
 800a61c:	461a      	mov	r2, r3
 800a61e:	4b09      	ldr	r3, [pc, #36]	; (800a644 <__assert_func+0x2c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4605      	mov	r5, r0
 800a624:	68d8      	ldr	r0, [r3, #12]
 800a626:	b14c      	cbz	r4, 800a63c <__assert_func+0x24>
 800a628:	4b07      	ldr	r3, [pc, #28]	; (800a648 <__assert_func+0x30>)
 800a62a:	9100      	str	r1, [sp, #0]
 800a62c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a630:	4906      	ldr	r1, [pc, #24]	; (800a64c <__assert_func+0x34>)
 800a632:	462b      	mov	r3, r5
 800a634:	f000 f872 	bl	800a71c <fiprintf>
 800a638:	f000 f882 	bl	800a740 <abort>
 800a63c:	4b04      	ldr	r3, [pc, #16]	; (800a650 <__assert_func+0x38>)
 800a63e:	461c      	mov	r4, r3
 800a640:	e7f3      	b.n	800a62a <__assert_func+0x12>
 800a642:	bf00      	nop
 800a644:	20000070 	.word	0x20000070
 800a648:	0800afa7 	.word	0x0800afa7
 800a64c:	0800afb4 	.word	0x0800afb4
 800a650:	0800afe2 	.word	0x0800afe2

0800a654 <_calloc_r>:
 800a654:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a656:	fba1 2402 	umull	r2, r4, r1, r2
 800a65a:	b94c      	cbnz	r4, 800a670 <_calloc_r+0x1c>
 800a65c:	4611      	mov	r1, r2
 800a65e:	9201      	str	r2, [sp, #4]
 800a660:	f7ff f994 	bl	800998c <_malloc_r>
 800a664:	9a01      	ldr	r2, [sp, #4]
 800a666:	4605      	mov	r5, r0
 800a668:	b930      	cbnz	r0, 800a678 <_calloc_r+0x24>
 800a66a:	4628      	mov	r0, r5
 800a66c:	b003      	add	sp, #12
 800a66e:	bd30      	pop	{r4, r5, pc}
 800a670:	220c      	movs	r2, #12
 800a672:	6002      	str	r2, [r0, #0]
 800a674:	2500      	movs	r5, #0
 800a676:	e7f8      	b.n	800a66a <_calloc_r+0x16>
 800a678:	4621      	mov	r1, r4
 800a67a:	f7fe fa18 	bl	8008aae <memset>
 800a67e:	e7f4      	b.n	800a66a <_calloc_r+0x16>

0800a680 <__ascii_mbtowc>:
 800a680:	b082      	sub	sp, #8
 800a682:	b901      	cbnz	r1, 800a686 <__ascii_mbtowc+0x6>
 800a684:	a901      	add	r1, sp, #4
 800a686:	b142      	cbz	r2, 800a69a <__ascii_mbtowc+0x1a>
 800a688:	b14b      	cbz	r3, 800a69e <__ascii_mbtowc+0x1e>
 800a68a:	7813      	ldrb	r3, [r2, #0]
 800a68c:	600b      	str	r3, [r1, #0]
 800a68e:	7812      	ldrb	r2, [r2, #0]
 800a690:	1e10      	subs	r0, r2, #0
 800a692:	bf18      	it	ne
 800a694:	2001      	movne	r0, #1
 800a696:	b002      	add	sp, #8
 800a698:	4770      	bx	lr
 800a69a:	4610      	mov	r0, r2
 800a69c:	e7fb      	b.n	800a696 <__ascii_mbtowc+0x16>
 800a69e:	f06f 0001 	mvn.w	r0, #1
 800a6a2:	e7f8      	b.n	800a696 <__ascii_mbtowc+0x16>

0800a6a4 <_realloc_r>:
 800a6a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6a8:	4680      	mov	r8, r0
 800a6aa:	4614      	mov	r4, r2
 800a6ac:	460e      	mov	r6, r1
 800a6ae:	b921      	cbnz	r1, 800a6ba <_realloc_r+0x16>
 800a6b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b4:	4611      	mov	r1, r2
 800a6b6:	f7ff b969 	b.w	800998c <_malloc_r>
 800a6ba:	b92a      	cbnz	r2, 800a6c8 <_realloc_r+0x24>
 800a6bc:	f7ff f8f2 	bl	80098a4 <_free_r>
 800a6c0:	4625      	mov	r5, r4
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6c8:	f000 f841 	bl	800a74e <_malloc_usable_size_r>
 800a6cc:	4284      	cmp	r4, r0
 800a6ce:	4607      	mov	r7, r0
 800a6d0:	d802      	bhi.n	800a6d8 <_realloc_r+0x34>
 800a6d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6d6:	d812      	bhi.n	800a6fe <_realloc_r+0x5a>
 800a6d8:	4621      	mov	r1, r4
 800a6da:	4640      	mov	r0, r8
 800a6dc:	f7ff f956 	bl	800998c <_malloc_r>
 800a6e0:	4605      	mov	r5, r0
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d0ed      	beq.n	800a6c2 <_realloc_r+0x1e>
 800a6e6:	42bc      	cmp	r4, r7
 800a6e8:	4622      	mov	r2, r4
 800a6ea:	4631      	mov	r1, r6
 800a6ec:	bf28      	it	cs
 800a6ee:	463a      	movcs	r2, r7
 800a6f0:	f7ff ff84 	bl	800a5fc <memcpy>
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	f7ff f8d4 	bl	80098a4 <_free_r>
 800a6fc:	e7e1      	b.n	800a6c2 <_realloc_r+0x1e>
 800a6fe:	4635      	mov	r5, r6
 800a700:	e7df      	b.n	800a6c2 <_realloc_r+0x1e>

0800a702 <__ascii_wctomb>:
 800a702:	b149      	cbz	r1, 800a718 <__ascii_wctomb+0x16>
 800a704:	2aff      	cmp	r2, #255	; 0xff
 800a706:	bf85      	ittet	hi
 800a708:	238a      	movhi	r3, #138	; 0x8a
 800a70a:	6003      	strhi	r3, [r0, #0]
 800a70c:	700a      	strbls	r2, [r1, #0]
 800a70e:	f04f 30ff 	movhi.w	r0, #4294967295
 800a712:	bf98      	it	ls
 800a714:	2001      	movls	r0, #1
 800a716:	4770      	bx	lr
 800a718:	4608      	mov	r0, r1
 800a71a:	4770      	bx	lr

0800a71c <fiprintf>:
 800a71c:	b40e      	push	{r1, r2, r3}
 800a71e:	b503      	push	{r0, r1, lr}
 800a720:	4601      	mov	r1, r0
 800a722:	ab03      	add	r3, sp, #12
 800a724:	4805      	ldr	r0, [pc, #20]	; (800a73c <fiprintf+0x20>)
 800a726:	f853 2b04 	ldr.w	r2, [r3], #4
 800a72a:	6800      	ldr	r0, [r0, #0]
 800a72c:	9301      	str	r3, [sp, #4]
 800a72e:	f000 f83f 	bl	800a7b0 <_vfiprintf_r>
 800a732:	b002      	add	sp, #8
 800a734:	f85d eb04 	ldr.w	lr, [sp], #4
 800a738:	b003      	add	sp, #12
 800a73a:	4770      	bx	lr
 800a73c:	20000070 	.word	0x20000070

0800a740 <abort>:
 800a740:	b508      	push	{r3, lr}
 800a742:	2006      	movs	r0, #6
 800a744:	f000 fa0c 	bl	800ab60 <raise>
 800a748:	2001      	movs	r0, #1
 800a74a:	f7f7 faf1 	bl	8001d30 <_exit>

0800a74e <_malloc_usable_size_r>:
 800a74e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a752:	1f18      	subs	r0, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	bfbc      	itt	lt
 800a758:	580b      	ldrlt	r3, [r1, r0]
 800a75a:	18c0      	addlt	r0, r0, r3
 800a75c:	4770      	bx	lr

0800a75e <__sfputc_r>:
 800a75e:	6893      	ldr	r3, [r2, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	2b00      	cmp	r3, #0
 800a764:	b410      	push	{r4}
 800a766:	6093      	str	r3, [r2, #8]
 800a768:	da08      	bge.n	800a77c <__sfputc_r+0x1e>
 800a76a:	6994      	ldr	r4, [r2, #24]
 800a76c:	42a3      	cmp	r3, r4
 800a76e:	db01      	blt.n	800a774 <__sfputc_r+0x16>
 800a770:	290a      	cmp	r1, #10
 800a772:	d103      	bne.n	800a77c <__sfputc_r+0x1e>
 800a774:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a778:	f000 b934 	b.w	800a9e4 <__swbuf_r>
 800a77c:	6813      	ldr	r3, [r2, #0]
 800a77e:	1c58      	adds	r0, r3, #1
 800a780:	6010      	str	r0, [r2, #0]
 800a782:	7019      	strb	r1, [r3, #0]
 800a784:	4608      	mov	r0, r1
 800a786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78a:	4770      	bx	lr

0800a78c <__sfputs_r>:
 800a78c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	4614      	mov	r4, r2
 800a794:	18d5      	adds	r5, r2, r3
 800a796:	42ac      	cmp	r4, r5
 800a798:	d101      	bne.n	800a79e <__sfputs_r+0x12>
 800a79a:	2000      	movs	r0, #0
 800a79c:	e007      	b.n	800a7ae <__sfputs_r+0x22>
 800a79e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7a2:	463a      	mov	r2, r7
 800a7a4:	4630      	mov	r0, r6
 800a7a6:	f7ff ffda 	bl	800a75e <__sfputc_r>
 800a7aa:	1c43      	adds	r3, r0, #1
 800a7ac:	d1f3      	bne.n	800a796 <__sfputs_r+0xa>
 800a7ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a7b0 <_vfiprintf_r>:
 800a7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	460d      	mov	r5, r1
 800a7b6:	b09d      	sub	sp, #116	; 0x74
 800a7b8:	4614      	mov	r4, r2
 800a7ba:	4698      	mov	r8, r3
 800a7bc:	4606      	mov	r6, r0
 800a7be:	b118      	cbz	r0, 800a7c8 <_vfiprintf_r+0x18>
 800a7c0:	6a03      	ldr	r3, [r0, #32]
 800a7c2:	b90b      	cbnz	r3, 800a7c8 <_vfiprintf_r+0x18>
 800a7c4:	f7fe f8da 	bl	800897c <__sinit>
 800a7c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7ca:	07d9      	lsls	r1, r3, #31
 800a7cc:	d405      	bmi.n	800a7da <_vfiprintf_r+0x2a>
 800a7ce:	89ab      	ldrh	r3, [r5, #12]
 800a7d0:	059a      	lsls	r2, r3, #22
 800a7d2:	d402      	bmi.n	800a7da <_vfiprintf_r+0x2a>
 800a7d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a7d6:	f7fe f9e8 	bl	8008baa <__retarget_lock_acquire_recursive>
 800a7da:	89ab      	ldrh	r3, [r5, #12]
 800a7dc:	071b      	lsls	r3, r3, #28
 800a7de:	d501      	bpl.n	800a7e4 <_vfiprintf_r+0x34>
 800a7e0:	692b      	ldr	r3, [r5, #16]
 800a7e2:	b99b      	cbnz	r3, 800a80c <_vfiprintf_r+0x5c>
 800a7e4:	4629      	mov	r1, r5
 800a7e6:	4630      	mov	r0, r6
 800a7e8:	f000 f93a 	bl	800aa60 <__swsetup_r>
 800a7ec:	b170      	cbz	r0, 800a80c <_vfiprintf_r+0x5c>
 800a7ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a7f0:	07dc      	lsls	r4, r3, #31
 800a7f2:	d504      	bpl.n	800a7fe <_vfiprintf_r+0x4e>
 800a7f4:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f8:	b01d      	add	sp, #116	; 0x74
 800a7fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7fe:	89ab      	ldrh	r3, [r5, #12]
 800a800:	0598      	lsls	r0, r3, #22
 800a802:	d4f7      	bmi.n	800a7f4 <_vfiprintf_r+0x44>
 800a804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a806:	f7fe f9d1 	bl	8008bac <__retarget_lock_release_recursive>
 800a80a:	e7f3      	b.n	800a7f4 <_vfiprintf_r+0x44>
 800a80c:	2300      	movs	r3, #0
 800a80e:	9309      	str	r3, [sp, #36]	; 0x24
 800a810:	2320      	movs	r3, #32
 800a812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a816:	f8cd 800c 	str.w	r8, [sp, #12]
 800a81a:	2330      	movs	r3, #48	; 0x30
 800a81c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800a9d0 <_vfiprintf_r+0x220>
 800a820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a824:	f04f 0901 	mov.w	r9, #1
 800a828:	4623      	mov	r3, r4
 800a82a:	469a      	mov	sl, r3
 800a82c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a830:	b10a      	cbz	r2, 800a836 <_vfiprintf_r+0x86>
 800a832:	2a25      	cmp	r2, #37	; 0x25
 800a834:	d1f9      	bne.n	800a82a <_vfiprintf_r+0x7a>
 800a836:	ebba 0b04 	subs.w	fp, sl, r4
 800a83a:	d00b      	beq.n	800a854 <_vfiprintf_r+0xa4>
 800a83c:	465b      	mov	r3, fp
 800a83e:	4622      	mov	r2, r4
 800a840:	4629      	mov	r1, r5
 800a842:	4630      	mov	r0, r6
 800a844:	f7ff ffa2 	bl	800a78c <__sfputs_r>
 800a848:	3001      	adds	r0, #1
 800a84a:	f000 80a9 	beq.w	800a9a0 <_vfiprintf_r+0x1f0>
 800a84e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a850:	445a      	add	r2, fp
 800a852:	9209      	str	r2, [sp, #36]	; 0x24
 800a854:	f89a 3000 	ldrb.w	r3, [sl]
 800a858:	2b00      	cmp	r3, #0
 800a85a:	f000 80a1 	beq.w	800a9a0 <_vfiprintf_r+0x1f0>
 800a85e:	2300      	movs	r3, #0
 800a860:	f04f 32ff 	mov.w	r2, #4294967295
 800a864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a868:	f10a 0a01 	add.w	sl, sl, #1
 800a86c:	9304      	str	r3, [sp, #16]
 800a86e:	9307      	str	r3, [sp, #28]
 800a870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a874:	931a      	str	r3, [sp, #104]	; 0x68
 800a876:	4654      	mov	r4, sl
 800a878:	2205      	movs	r2, #5
 800a87a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a87e:	4854      	ldr	r0, [pc, #336]	; (800a9d0 <_vfiprintf_r+0x220>)
 800a880:	f7f5 fca6 	bl	80001d0 <memchr>
 800a884:	9a04      	ldr	r2, [sp, #16]
 800a886:	b9d8      	cbnz	r0, 800a8c0 <_vfiprintf_r+0x110>
 800a888:	06d1      	lsls	r1, r2, #27
 800a88a:	bf44      	itt	mi
 800a88c:	2320      	movmi	r3, #32
 800a88e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a892:	0713      	lsls	r3, r2, #28
 800a894:	bf44      	itt	mi
 800a896:	232b      	movmi	r3, #43	; 0x2b
 800a898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a89c:	f89a 3000 	ldrb.w	r3, [sl]
 800a8a0:	2b2a      	cmp	r3, #42	; 0x2a
 800a8a2:	d015      	beq.n	800a8d0 <_vfiprintf_r+0x120>
 800a8a4:	9a07      	ldr	r2, [sp, #28]
 800a8a6:	4654      	mov	r4, sl
 800a8a8:	2000      	movs	r0, #0
 800a8aa:	f04f 0c0a 	mov.w	ip, #10
 800a8ae:	4621      	mov	r1, r4
 800a8b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8b4:	3b30      	subs	r3, #48	; 0x30
 800a8b6:	2b09      	cmp	r3, #9
 800a8b8:	d94d      	bls.n	800a956 <_vfiprintf_r+0x1a6>
 800a8ba:	b1b0      	cbz	r0, 800a8ea <_vfiprintf_r+0x13a>
 800a8bc:	9207      	str	r2, [sp, #28]
 800a8be:	e014      	b.n	800a8ea <_vfiprintf_r+0x13a>
 800a8c0:	eba0 0308 	sub.w	r3, r0, r8
 800a8c4:	fa09 f303 	lsl.w	r3, r9, r3
 800a8c8:	4313      	orrs	r3, r2
 800a8ca:	9304      	str	r3, [sp, #16]
 800a8cc:	46a2      	mov	sl, r4
 800a8ce:	e7d2      	b.n	800a876 <_vfiprintf_r+0xc6>
 800a8d0:	9b03      	ldr	r3, [sp, #12]
 800a8d2:	1d19      	adds	r1, r3, #4
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	9103      	str	r1, [sp, #12]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	bfbb      	ittet	lt
 800a8dc:	425b      	neglt	r3, r3
 800a8de:	f042 0202 	orrlt.w	r2, r2, #2
 800a8e2:	9307      	strge	r3, [sp, #28]
 800a8e4:	9307      	strlt	r3, [sp, #28]
 800a8e6:	bfb8      	it	lt
 800a8e8:	9204      	strlt	r2, [sp, #16]
 800a8ea:	7823      	ldrb	r3, [r4, #0]
 800a8ec:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ee:	d10c      	bne.n	800a90a <_vfiprintf_r+0x15a>
 800a8f0:	7863      	ldrb	r3, [r4, #1]
 800a8f2:	2b2a      	cmp	r3, #42	; 0x2a
 800a8f4:	d134      	bne.n	800a960 <_vfiprintf_r+0x1b0>
 800a8f6:	9b03      	ldr	r3, [sp, #12]
 800a8f8:	1d1a      	adds	r2, r3, #4
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	9203      	str	r2, [sp, #12]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	bfb8      	it	lt
 800a902:	f04f 33ff 	movlt.w	r3, #4294967295
 800a906:	3402      	adds	r4, #2
 800a908:	9305      	str	r3, [sp, #20]
 800a90a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800a9e0 <_vfiprintf_r+0x230>
 800a90e:	7821      	ldrb	r1, [r4, #0]
 800a910:	2203      	movs	r2, #3
 800a912:	4650      	mov	r0, sl
 800a914:	f7f5 fc5c 	bl	80001d0 <memchr>
 800a918:	b138      	cbz	r0, 800a92a <_vfiprintf_r+0x17a>
 800a91a:	9b04      	ldr	r3, [sp, #16]
 800a91c:	eba0 000a 	sub.w	r0, r0, sl
 800a920:	2240      	movs	r2, #64	; 0x40
 800a922:	4082      	lsls	r2, r0
 800a924:	4313      	orrs	r3, r2
 800a926:	3401      	adds	r4, #1
 800a928:	9304      	str	r3, [sp, #16]
 800a92a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a92e:	4829      	ldr	r0, [pc, #164]	; (800a9d4 <_vfiprintf_r+0x224>)
 800a930:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a934:	2206      	movs	r2, #6
 800a936:	f7f5 fc4b 	bl	80001d0 <memchr>
 800a93a:	2800      	cmp	r0, #0
 800a93c:	d03f      	beq.n	800a9be <_vfiprintf_r+0x20e>
 800a93e:	4b26      	ldr	r3, [pc, #152]	; (800a9d8 <_vfiprintf_r+0x228>)
 800a940:	bb1b      	cbnz	r3, 800a98a <_vfiprintf_r+0x1da>
 800a942:	9b03      	ldr	r3, [sp, #12]
 800a944:	3307      	adds	r3, #7
 800a946:	f023 0307 	bic.w	r3, r3, #7
 800a94a:	3308      	adds	r3, #8
 800a94c:	9303      	str	r3, [sp, #12]
 800a94e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a950:	443b      	add	r3, r7
 800a952:	9309      	str	r3, [sp, #36]	; 0x24
 800a954:	e768      	b.n	800a828 <_vfiprintf_r+0x78>
 800a956:	fb0c 3202 	mla	r2, ip, r2, r3
 800a95a:	460c      	mov	r4, r1
 800a95c:	2001      	movs	r0, #1
 800a95e:	e7a6      	b.n	800a8ae <_vfiprintf_r+0xfe>
 800a960:	2300      	movs	r3, #0
 800a962:	3401      	adds	r4, #1
 800a964:	9305      	str	r3, [sp, #20]
 800a966:	4619      	mov	r1, r3
 800a968:	f04f 0c0a 	mov.w	ip, #10
 800a96c:	4620      	mov	r0, r4
 800a96e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a972:	3a30      	subs	r2, #48	; 0x30
 800a974:	2a09      	cmp	r2, #9
 800a976:	d903      	bls.n	800a980 <_vfiprintf_r+0x1d0>
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d0c6      	beq.n	800a90a <_vfiprintf_r+0x15a>
 800a97c:	9105      	str	r1, [sp, #20]
 800a97e:	e7c4      	b.n	800a90a <_vfiprintf_r+0x15a>
 800a980:	fb0c 2101 	mla	r1, ip, r1, r2
 800a984:	4604      	mov	r4, r0
 800a986:	2301      	movs	r3, #1
 800a988:	e7f0      	b.n	800a96c <_vfiprintf_r+0x1bc>
 800a98a:	ab03      	add	r3, sp, #12
 800a98c:	9300      	str	r3, [sp, #0]
 800a98e:	462a      	mov	r2, r5
 800a990:	4b12      	ldr	r3, [pc, #72]	; (800a9dc <_vfiprintf_r+0x22c>)
 800a992:	a904      	add	r1, sp, #16
 800a994:	4630      	mov	r0, r6
 800a996:	f7fd fb9f 	bl	80080d8 <_printf_float>
 800a99a:	4607      	mov	r7, r0
 800a99c:	1c78      	adds	r0, r7, #1
 800a99e:	d1d6      	bne.n	800a94e <_vfiprintf_r+0x19e>
 800a9a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a9a2:	07d9      	lsls	r1, r3, #31
 800a9a4:	d405      	bmi.n	800a9b2 <_vfiprintf_r+0x202>
 800a9a6:	89ab      	ldrh	r3, [r5, #12]
 800a9a8:	059a      	lsls	r2, r3, #22
 800a9aa:	d402      	bmi.n	800a9b2 <_vfiprintf_r+0x202>
 800a9ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a9ae:	f7fe f8fd 	bl	8008bac <__retarget_lock_release_recursive>
 800a9b2:	89ab      	ldrh	r3, [r5, #12]
 800a9b4:	065b      	lsls	r3, r3, #25
 800a9b6:	f53f af1d 	bmi.w	800a7f4 <_vfiprintf_r+0x44>
 800a9ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a9bc:	e71c      	b.n	800a7f8 <_vfiprintf_r+0x48>
 800a9be:	ab03      	add	r3, sp, #12
 800a9c0:	9300      	str	r3, [sp, #0]
 800a9c2:	462a      	mov	r2, r5
 800a9c4:	4b05      	ldr	r3, [pc, #20]	; (800a9dc <_vfiprintf_r+0x22c>)
 800a9c6:	a904      	add	r1, sp, #16
 800a9c8:	4630      	mov	r0, r6
 800a9ca:	f7fd fe29 	bl	8008620 <_printf_i>
 800a9ce:	e7e4      	b.n	800a99a <_vfiprintf_r+0x1ea>
 800a9d0:	0800af8c 	.word	0x0800af8c
 800a9d4:	0800af96 	.word	0x0800af96
 800a9d8:	080080d9 	.word	0x080080d9
 800a9dc:	0800a78d 	.word	0x0800a78d
 800a9e0:	0800af92 	.word	0x0800af92

0800a9e4 <__swbuf_r>:
 800a9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9e6:	460e      	mov	r6, r1
 800a9e8:	4614      	mov	r4, r2
 800a9ea:	4605      	mov	r5, r0
 800a9ec:	b118      	cbz	r0, 800a9f6 <__swbuf_r+0x12>
 800a9ee:	6a03      	ldr	r3, [r0, #32]
 800a9f0:	b90b      	cbnz	r3, 800a9f6 <__swbuf_r+0x12>
 800a9f2:	f7fd ffc3 	bl	800897c <__sinit>
 800a9f6:	69a3      	ldr	r3, [r4, #24]
 800a9f8:	60a3      	str	r3, [r4, #8]
 800a9fa:	89a3      	ldrh	r3, [r4, #12]
 800a9fc:	071a      	lsls	r2, r3, #28
 800a9fe:	d525      	bpl.n	800aa4c <__swbuf_r+0x68>
 800aa00:	6923      	ldr	r3, [r4, #16]
 800aa02:	b31b      	cbz	r3, 800aa4c <__swbuf_r+0x68>
 800aa04:	6823      	ldr	r3, [r4, #0]
 800aa06:	6922      	ldr	r2, [r4, #16]
 800aa08:	1a98      	subs	r0, r3, r2
 800aa0a:	6963      	ldr	r3, [r4, #20]
 800aa0c:	b2f6      	uxtb	r6, r6
 800aa0e:	4283      	cmp	r3, r0
 800aa10:	4637      	mov	r7, r6
 800aa12:	dc04      	bgt.n	800aa1e <__swbuf_r+0x3a>
 800aa14:	4621      	mov	r1, r4
 800aa16:	4628      	mov	r0, r5
 800aa18:	f7ff fd9e 	bl	800a558 <_fflush_r>
 800aa1c:	b9e0      	cbnz	r0, 800aa58 <__swbuf_r+0x74>
 800aa1e:	68a3      	ldr	r3, [r4, #8]
 800aa20:	3b01      	subs	r3, #1
 800aa22:	60a3      	str	r3, [r4, #8]
 800aa24:	6823      	ldr	r3, [r4, #0]
 800aa26:	1c5a      	adds	r2, r3, #1
 800aa28:	6022      	str	r2, [r4, #0]
 800aa2a:	701e      	strb	r6, [r3, #0]
 800aa2c:	6962      	ldr	r2, [r4, #20]
 800aa2e:	1c43      	adds	r3, r0, #1
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d004      	beq.n	800aa3e <__swbuf_r+0x5a>
 800aa34:	89a3      	ldrh	r3, [r4, #12]
 800aa36:	07db      	lsls	r3, r3, #31
 800aa38:	d506      	bpl.n	800aa48 <__swbuf_r+0x64>
 800aa3a:	2e0a      	cmp	r6, #10
 800aa3c:	d104      	bne.n	800aa48 <__swbuf_r+0x64>
 800aa3e:	4621      	mov	r1, r4
 800aa40:	4628      	mov	r0, r5
 800aa42:	f7ff fd89 	bl	800a558 <_fflush_r>
 800aa46:	b938      	cbnz	r0, 800aa58 <__swbuf_r+0x74>
 800aa48:	4638      	mov	r0, r7
 800aa4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f000 f806 	bl	800aa60 <__swsetup_r>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d0d5      	beq.n	800aa04 <__swbuf_r+0x20>
 800aa58:	f04f 37ff 	mov.w	r7, #4294967295
 800aa5c:	e7f4      	b.n	800aa48 <__swbuf_r+0x64>
	...

0800aa60 <__swsetup_r>:
 800aa60:	b538      	push	{r3, r4, r5, lr}
 800aa62:	4b2a      	ldr	r3, [pc, #168]	; (800ab0c <__swsetup_r+0xac>)
 800aa64:	4605      	mov	r5, r0
 800aa66:	6818      	ldr	r0, [r3, #0]
 800aa68:	460c      	mov	r4, r1
 800aa6a:	b118      	cbz	r0, 800aa74 <__swsetup_r+0x14>
 800aa6c:	6a03      	ldr	r3, [r0, #32]
 800aa6e:	b90b      	cbnz	r3, 800aa74 <__swsetup_r+0x14>
 800aa70:	f7fd ff84 	bl	800897c <__sinit>
 800aa74:	89a3      	ldrh	r3, [r4, #12]
 800aa76:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aa7a:	0718      	lsls	r0, r3, #28
 800aa7c:	d422      	bmi.n	800aac4 <__swsetup_r+0x64>
 800aa7e:	06d9      	lsls	r1, r3, #27
 800aa80:	d407      	bmi.n	800aa92 <__swsetup_r+0x32>
 800aa82:	2309      	movs	r3, #9
 800aa84:	602b      	str	r3, [r5, #0]
 800aa86:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800aa8a:	81a3      	strh	r3, [r4, #12]
 800aa8c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa90:	e034      	b.n	800aafc <__swsetup_r+0x9c>
 800aa92:	0758      	lsls	r0, r3, #29
 800aa94:	d512      	bpl.n	800aabc <__swsetup_r+0x5c>
 800aa96:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aa98:	b141      	cbz	r1, 800aaac <__swsetup_r+0x4c>
 800aa9a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aa9e:	4299      	cmp	r1, r3
 800aaa0:	d002      	beq.n	800aaa8 <__swsetup_r+0x48>
 800aaa2:	4628      	mov	r0, r5
 800aaa4:	f7fe fefe 	bl	80098a4 <_free_r>
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	6363      	str	r3, [r4, #52]	; 0x34
 800aaac:	89a3      	ldrh	r3, [r4, #12]
 800aaae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aab2:	81a3      	strh	r3, [r4, #12]
 800aab4:	2300      	movs	r3, #0
 800aab6:	6063      	str	r3, [r4, #4]
 800aab8:	6923      	ldr	r3, [r4, #16]
 800aaba:	6023      	str	r3, [r4, #0]
 800aabc:	89a3      	ldrh	r3, [r4, #12]
 800aabe:	f043 0308 	orr.w	r3, r3, #8
 800aac2:	81a3      	strh	r3, [r4, #12]
 800aac4:	6923      	ldr	r3, [r4, #16]
 800aac6:	b94b      	cbnz	r3, 800aadc <__swsetup_r+0x7c>
 800aac8:	89a3      	ldrh	r3, [r4, #12]
 800aaca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aace:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aad2:	d003      	beq.n	800aadc <__swsetup_r+0x7c>
 800aad4:	4621      	mov	r1, r4
 800aad6:	4628      	mov	r0, r5
 800aad8:	f000 f884 	bl	800abe4 <__smakebuf_r>
 800aadc:	89a0      	ldrh	r0, [r4, #12]
 800aade:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aae2:	f010 0301 	ands.w	r3, r0, #1
 800aae6:	d00a      	beq.n	800aafe <__swsetup_r+0x9e>
 800aae8:	2300      	movs	r3, #0
 800aaea:	60a3      	str	r3, [r4, #8]
 800aaec:	6963      	ldr	r3, [r4, #20]
 800aaee:	425b      	negs	r3, r3
 800aaf0:	61a3      	str	r3, [r4, #24]
 800aaf2:	6923      	ldr	r3, [r4, #16]
 800aaf4:	b943      	cbnz	r3, 800ab08 <__swsetup_r+0xa8>
 800aaf6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800aafa:	d1c4      	bne.n	800aa86 <__swsetup_r+0x26>
 800aafc:	bd38      	pop	{r3, r4, r5, pc}
 800aafe:	0781      	lsls	r1, r0, #30
 800ab00:	bf58      	it	pl
 800ab02:	6963      	ldrpl	r3, [r4, #20]
 800ab04:	60a3      	str	r3, [r4, #8]
 800ab06:	e7f4      	b.n	800aaf2 <__swsetup_r+0x92>
 800ab08:	2000      	movs	r0, #0
 800ab0a:	e7f7      	b.n	800aafc <__swsetup_r+0x9c>
 800ab0c:	20000070 	.word	0x20000070

0800ab10 <_raise_r>:
 800ab10:	291f      	cmp	r1, #31
 800ab12:	b538      	push	{r3, r4, r5, lr}
 800ab14:	4604      	mov	r4, r0
 800ab16:	460d      	mov	r5, r1
 800ab18:	d904      	bls.n	800ab24 <_raise_r+0x14>
 800ab1a:	2316      	movs	r3, #22
 800ab1c:	6003      	str	r3, [r0, #0]
 800ab1e:	f04f 30ff 	mov.w	r0, #4294967295
 800ab22:	bd38      	pop	{r3, r4, r5, pc}
 800ab24:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ab26:	b112      	cbz	r2, 800ab2e <_raise_r+0x1e>
 800ab28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ab2c:	b94b      	cbnz	r3, 800ab42 <_raise_r+0x32>
 800ab2e:	4620      	mov	r0, r4
 800ab30:	f000 f830 	bl	800ab94 <_getpid_r>
 800ab34:	462a      	mov	r2, r5
 800ab36:	4601      	mov	r1, r0
 800ab38:	4620      	mov	r0, r4
 800ab3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab3e:	f000 b817 	b.w	800ab70 <_kill_r>
 800ab42:	2b01      	cmp	r3, #1
 800ab44:	d00a      	beq.n	800ab5c <_raise_r+0x4c>
 800ab46:	1c59      	adds	r1, r3, #1
 800ab48:	d103      	bne.n	800ab52 <_raise_r+0x42>
 800ab4a:	2316      	movs	r3, #22
 800ab4c:	6003      	str	r3, [r0, #0]
 800ab4e:	2001      	movs	r0, #1
 800ab50:	e7e7      	b.n	800ab22 <_raise_r+0x12>
 800ab52:	2400      	movs	r4, #0
 800ab54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ab58:	4628      	mov	r0, r5
 800ab5a:	4798      	blx	r3
 800ab5c:	2000      	movs	r0, #0
 800ab5e:	e7e0      	b.n	800ab22 <_raise_r+0x12>

0800ab60 <raise>:
 800ab60:	4b02      	ldr	r3, [pc, #8]	; (800ab6c <raise+0xc>)
 800ab62:	4601      	mov	r1, r0
 800ab64:	6818      	ldr	r0, [r3, #0]
 800ab66:	f7ff bfd3 	b.w	800ab10 <_raise_r>
 800ab6a:	bf00      	nop
 800ab6c:	20000070 	.word	0x20000070

0800ab70 <_kill_r>:
 800ab70:	b538      	push	{r3, r4, r5, lr}
 800ab72:	4d07      	ldr	r5, [pc, #28]	; (800ab90 <_kill_r+0x20>)
 800ab74:	2300      	movs	r3, #0
 800ab76:	4604      	mov	r4, r0
 800ab78:	4608      	mov	r0, r1
 800ab7a:	4611      	mov	r1, r2
 800ab7c:	602b      	str	r3, [r5, #0]
 800ab7e:	f7f7 f8c7 	bl	8001d10 <_kill>
 800ab82:	1c43      	adds	r3, r0, #1
 800ab84:	d102      	bne.n	800ab8c <_kill_r+0x1c>
 800ab86:	682b      	ldr	r3, [r5, #0]
 800ab88:	b103      	cbz	r3, 800ab8c <_kill_r+0x1c>
 800ab8a:	6023      	str	r3, [r4, #0]
 800ab8c:	bd38      	pop	{r3, r4, r5, pc}
 800ab8e:	bf00      	nop
 800ab90:	2000061c 	.word	0x2000061c

0800ab94 <_getpid_r>:
 800ab94:	f7f7 b8b4 	b.w	8001d00 <_getpid>

0800ab98 <__swhatbuf_r>:
 800ab98:	b570      	push	{r4, r5, r6, lr}
 800ab9a:	460c      	mov	r4, r1
 800ab9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aba0:	2900      	cmp	r1, #0
 800aba2:	b096      	sub	sp, #88	; 0x58
 800aba4:	4615      	mov	r5, r2
 800aba6:	461e      	mov	r6, r3
 800aba8:	da0d      	bge.n	800abc6 <__swhatbuf_r+0x2e>
 800abaa:	89a3      	ldrh	r3, [r4, #12]
 800abac:	f013 0f80 	tst.w	r3, #128	; 0x80
 800abb0:	f04f 0100 	mov.w	r1, #0
 800abb4:	bf0c      	ite	eq
 800abb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800abba:	2340      	movne	r3, #64	; 0x40
 800abbc:	2000      	movs	r0, #0
 800abbe:	6031      	str	r1, [r6, #0]
 800abc0:	602b      	str	r3, [r5, #0]
 800abc2:	b016      	add	sp, #88	; 0x58
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
 800abc6:	466a      	mov	r2, sp
 800abc8:	f000 f848 	bl	800ac5c <_fstat_r>
 800abcc:	2800      	cmp	r0, #0
 800abce:	dbec      	blt.n	800abaa <__swhatbuf_r+0x12>
 800abd0:	9901      	ldr	r1, [sp, #4]
 800abd2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800abd6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800abda:	4259      	negs	r1, r3
 800abdc:	4159      	adcs	r1, r3
 800abde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800abe2:	e7eb      	b.n	800abbc <__swhatbuf_r+0x24>

0800abe4 <__smakebuf_r>:
 800abe4:	898b      	ldrh	r3, [r1, #12]
 800abe6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800abe8:	079d      	lsls	r5, r3, #30
 800abea:	4606      	mov	r6, r0
 800abec:	460c      	mov	r4, r1
 800abee:	d507      	bpl.n	800ac00 <__smakebuf_r+0x1c>
 800abf0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800abf4:	6023      	str	r3, [r4, #0]
 800abf6:	6123      	str	r3, [r4, #16]
 800abf8:	2301      	movs	r3, #1
 800abfa:	6163      	str	r3, [r4, #20]
 800abfc:	b002      	add	sp, #8
 800abfe:	bd70      	pop	{r4, r5, r6, pc}
 800ac00:	ab01      	add	r3, sp, #4
 800ac02:	466a      	mov	r2, sp
 800ac04:	f7ff ffc8 	bl	800ab98 <__swhatbuf_r>
 800ac08:	9900      	ldr	r1, [sp, #0]
 800ac0a:	4605      	mov	r5, r0
 800ac0c:	4630      	mov	r0, r6
 800ac0e:	f7fe febd 	bl	800998c <_malloc_r>
 800ac12:	b948      	cbnz	r0, 800ac28 <__smakebuf_r+0x44>
 800ac14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac18:	059a      	lsls	r2, r3, #22
 800ac1a:	d4ef      	bmi.n	800abfc <__smakebuf_r+0x18>
 800ac1c:	f023 0303 	bic.w	r3, r3, #3
 800ac20:	f043 0302 	orr.w	r3, r3, #2
 800ac24:	81a3      	strh	r3, [r4, #12]
 800ac26:	e7e3      	b.n	800abf0 <__smakebuf_r+0xc>
 800ac28:	89a3      	ldrh	r3, [r4, #12]
 800ac2a:	6020      	str	r0, [r4, #0]
 800ac2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac30:	81a3      	strh	r3, [r4, #12]
 800ac32:	9b00      	ldr	r3, [sp, #0]
 800ac34:	6163      	str	r3, [r4, #20]
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	6120      	str	r0, [r4, #16]
 800ac3a:	b15b      	cbz	r3, 800ac54 <__smakebuf_r+0x70>
 800ac3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ac40:	4630      	mov	r0, r6
 800ac42:	f000 f81d 	bl	800ac80 <_isatty_r>
 800ac46:	b128      	cbz	r0, 800ac54 <__smakebuf_r+0x70>
 800ac48:	89a3      	ldrh	r3, [r4, #12]
 800ac4a:	f023 0303 	bic.w	r3, r3, #3
 800ac4e:	f043 0301 	orr.w	r3, r3, #1
 800ac52:	81a3      	strh	r3, [r4, #12]
 800ac54:	89a3      	ldrh	r3, [r4, #12]
 800ac56:	431d      	orrs	r5, r3
 800ac58:	81a5      	strh	r5, [r4, #12]
 800ac5a:	e7cf      	b.n	800abfc <__smakebuf_r+0x18>

0800ac5c <_fstat_r>:
 800ac5c:	b538      	push	{r3, r4, r5, lr}
 800ac5e:	4d07      	ldr	r5, [pc, #28]	; (800ac7c <_fstat_r+0x20>)
 800ac60:	2300      	movs	r3, #0
 800ac62:	4604      	mov	r4, r0
 800ac64:	4608      	mov	r0, r1
 800ac66:	4611      	mov	r1, r2
 800ac68:	602b      	str	r3, [r5, #0]
 800ac6a:	f7f7 f8b0 	bl	8001dce <_fstat>
 800ac6e:	1c43      	adds	r3, r0, #1
 800ac70:	d102      	bne.n	800ac78 <_fstat_r+0x1c>
 800ac72:	682b      	ldr	r3, [r5, #0]
 800ac74:	b103      	cbz	r3, 800ac78 <_fstat_r+0x1c>
 800ac76:	6023      	str	r3, [r4, #0]
 800ac78:	bd38      	pop	{r3, r4, r5, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2000061c 	.word	0x2000061c

0800ac80 <_isatty_r>:
 800ac80:	b538      	push	{r3, r4, r5, lr}
 800ac82:	4d06      	ldr	r5, [pc, #24]	; (800ac9c <_isatty_r+0x1c>)
 800ac84:	2300      	movs	r3, #0
 800ac86:	4604      	mov	r4, r0
 800ac88:	4608      	mov	r0, r1
 800ac8a:	602b      	str	r3, [r5, #0]
 800ac8c:	f7f7 f8af 	bl	8001dee <_isatty>
 800ac90:	1c43      	adds	r3, r0, #1
 800ac92:	d102      	bne.n	800ac9a <_isatty_r+0x1a>
 800ac94:	682b      	ldr	r3, [r5, #0]
 800ac96:	b103      	cbz	r3, 800ac9a <_isatty_r+0x1a>
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	bd38      	pop	{r3, r4, r5, pc}
 800ac9c:	2000061c 	.word	0x2000061c

0800aca0 <_init>:
 800aca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aca2:	bf00      	nop
 800aca4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aca6:	bc08      	pop	{r3}
 800aca8:	469e      	mov	lr, r3
 800acaa:	4770      	bx	lr

0800acac <_fini>:
 800acac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acae:	bf00      	nop
 800acb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800acb2:	bc08      	pop	{r3}
 800acb4:	469e      	mov	lr, r3
 800acb6:	4770      	bx	lr
