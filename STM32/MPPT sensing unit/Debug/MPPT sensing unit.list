
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000084f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008764  08008764  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  08008764  08008764  00018764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800876c  0800876c  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800876c  0800876c  0001876c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008770  08008770  00018770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08008774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000430  20000060  080087d4  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  080087d4  00020490  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c48d  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f76  00000000  00000000  0003c560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001898  00000000  00000000  000404d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001303  00000000  00000000  00041d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000253da  00000000  00000000  00043073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000203c2  00000000  00000000  0006844d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e02e3  00000000  00000000  0008880f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006cbc  00000000  00000000  00168af4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016f7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008668 	.word	0x08008668

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08008668 	.word	0x08008668

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b970 	b.w	80008f0 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9e08      	ldr	r6, [sp, #32]
 800062e:	460d      	mov	r5, r1
 8000630:	4604      	mov	r4, r0
 8000632:	460f      	mov	r7, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4694      	mov	ip, r2
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0xe2>
 800063e:	fab2 f382 	clz	r3, r2
 8000642:	b143      	cbz	r3, 8000656 <__udivmoddi4+0x2e>
 8000644:	fa02 fc03 	lsl.w	ip, r2, r3
 8000648:	f1c3 0220 	rsb	r2, r3, #32
 800064c:	409f      	lsls	r7, r3
 800064e:	fa20 f202 	lsr.w	r2, r0, r2
 8000652:	4317      	orrs	r7, r2
 8000654:	409c      	lsls	r4, r3
 8000656:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800065a:	fa1f f58c 	uxth.w	r5, ip
 800065e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000662:	0c22      	lsrs	r2, r4, #16
 8000664:	fb0e 7711 	mls	r7, lr, r1, r7
 8000668:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800066c:	fb01 f005 	mul.w	r0, r1, r5
 8000670:	4290      	cmp	r0, r2
 8000672:	d90a      	bls.n	800068a <__udivmoddi4+0x62>
 8000674:	eb1c 0202 	adds.w	r2, ip, r2
 8000678:	f101 37ff 	add.w	r7, r1, #4294967295
 800067c:	f080 811c 	bcs.w	80008b8 <__udivmoddi4+0x290>
 8000680:	4290      	cmp	r0, r2
 8000682:	f240 8119 	bls.w	80008b8 <__udivmoddi4+0x290>
 8000686:	3902      	subs	r1, #2
 8000688:	4462      	add	r2, ip
 800068a:	1a12      	subs	r2, r2, r0
 800068c:	b2a4      	uxth	r4, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800069a:	fb00 f505 	mul.w	r5, r0, r5
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x90>
 80006a2:	eb1c 0404 	adds.w	r4, ip, r4
 80006a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006aa:	f080 8107 	bcs.w	80008bc <__udivmoddi4+0x294>
 80006ae:	42a5      	cmp	r5, r4
 80006b0:	f240 8104 	bls.w	80008bc <__udivmoddi4+0x294>
 80006b4:	4464      	add	r4, ip
 80006b6:	3802      	subs	r0, #2
 80006b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	2100      	movs	r1, #0
 80006c0:	b11e      	cbz	r6, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40dc      	lsrs	r4, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	e9c6 4300 	strd	r4, r3, [r6]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d908      	bls.n	80006e4 <__udivmoddi4+0xbc>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	f000 80ed 	beq.w	80008b2 <__udivmoddi4+0x28a>
 80006d8:	2100      	movs	r1, #0
 80006da:	e9c6 0500 	strd	r0, r5, [r6]
 80006de:	4608      	mov	r0, r1
 80006e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e4:	fab3 f183 	clz	r1, r3
 80006e8:	2900      	cmp	r1, #0
 80006ea:	d149      	bne.n	8000780 <__udivmoddi4+0x158>
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0xce>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	f200 80f8 	bhi.w	80008e6 <__udivmoddi4+0x2be>
 80006f6:	1a84      	subs	r4, r0, r2
 80006f8:	eb65 0203 	sbc.w	r2, r5, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	4617      	mov	r7, r2
 8000700:	2e00      	cmp	r6, #0
 8000702:	d0e2      	beq.n	80006ca <__udivmoddi4+0xa2>
 8000704:	e9c6 4700 	strd	r4, r7, [r6]
 8000708:	e7df      	b.n	80006ca <__udivmoddi4+0xa2>
 800070a:	b902      	cbnz	r2, 800070e <__udivmoddi4+0xe6>
 800070c:	deff      	udf	#255	; 0xff
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8090 	bne.w	8000838 <__udivmoddi4+0x210>
 8000718:	1a8a      	subs	r2, r1, r2
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2101      	movs	r1, #1
 8000724:	fbb2 f5f7 	udiv	r5, r2, r7
 8000728:	fb07 2015 	mls	r0, r7, r5, r2
 800072c:	0c22      	lsrs	r2, r4, #16
 800072e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000732:	fb0e f005 	mul.w	r0, lr, r5
 8000736:	4290      	cmp	r0, r2
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x124>
 800073a:	eb1c 0202 	adds.w	r2, ip, r2
 800073e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x122>
 8000744:	4290      	cmp	r0, r2
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2b8>
 800074a:	4645      	mov	r5, r8
 800074c:	1a12      	subs	r2, r2, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb2 f0f7 	udiv	r0, r2, r7
 8000754:	fb07 2210 	mls	r2, r7, r0, r2
 8000758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x14e>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 32ff 	add.w	r2, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x14c>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2c2>
 8000774:	4610      	mov	r0, r2
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800077e:	e79f      	b.n	80006c0 <__udivmoddi4+0x98>
 8000780:	f1c1 0720 	rsb	r7, r1, #32
 8000784:	408b      	lsls	r3, r1
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa05 f401 	lsl.w	r4, r5, r1
 8000792:	fa20 f307 	lsr.w	r3, r0, r7
 8000796:	40fd      	lsrs	r5, r7
 8000798:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079c:	4323      	orrs	r3, r4
 800079e:	fbb5 f8f9 	udiv	r8, r5, r9
 80007a2:	fa1f fe8c 	uxth.w	lr, ip
 80007a6:	fb09 5518 	mls	r5, r9, r8, r5
 80007aa:	0c1c      	lsrs	r4, r3, #16
 80007ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007b0:	fb08 f50e 	mul.w	r5, r8, lr
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ba:	fa00 f001 	lsl.w	r0, r0, r1
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b0>
 80007c0:	eb1c 0404 	adds.w	r4, ip, r4
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2b4>
 80007cc:	42a5      	cmp	r5, r4
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2b4>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4464      	add	r4, ip
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	b29d      	uxth	r5, r3
 80007dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e0:	fb09 4413 	mls	r4, r9, r3, r4
 80007e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80007ec:	45a6      	cmp	lr, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1da>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2ac>
 80007fa:	45a6      	cmp	lr, r4
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2ac>
 80007fe:	3b02      	subs	r3, #2
 8000800:	4464      	add	r4, ip
 8000802:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000806:	fba3 9502 	umull	r9, r5, r3, r2
 800080a:	eba4 040e 	sub.w	r4, r4, lr
 800080e:	42ac      	cmp	r4, r5
 8000810:	46c8      	mov	r8, r9
 8000812:	46ae      	mov	lr, r5
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x29c>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x298>
 8000818:	b156      	cbz	r6, 8000830 <__udivmoddi4+0x208>
 800081a:	ebb0 0208 	subs.w	r2, r0, r8
 800081e:	eb64 040e 	sbc.w	r4, r4, lr
 8000822:	fa04 f707 	lsl.w	r7, r4, r7
 8000826:	40ca      	lsrs	r2, r1
 8000828:	40cc      	lsrs	r4, r1
 800082a:	4317      	orrs	r7, r2
 800082c:	e9c6 7400 	strd	r7, r4, [r6]
 8000830:	4618      	mov	r0, r3
 8000832:	2100      	movs	r1, #0
 8000834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000838:	f1c3 0120 	rsb	r1, r3, #32
 800083c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000840:	fa20 f201 	lsr.w	r2, r0, r1
 8000844:	fa25 f101 	lsr.w	r1, r5, r1
 8000848:	409d      	lsls	r5, r3
 800084a:	432a      	orrs	r2, r5
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb1 f0f7 	udiv	r0, r1, r7
 8000858:	fb07 1510 	mls	r5, r7, r0, r1
 800085c:	0c11      	lsrs	r1, r2, #16
 800085e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000862:	fb00 f50e 	mul.w	r5, r0, lr
 8000866:	428d      	cmp	r5, r1
 8000868:	fa04 f403 	lsl.w	r4, r4, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x258>
 800086e:	eb1c 0101 	adds.w	r1, ip, r1
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 8000878:	428d      	cmp	r5, r1
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 800087c:	3802      	subs	r0, #2
 800087e:	4461      	add	r1, ip
 8000880:	1b49      	subs	r1, r1, r5
 8000882:	b292      	uxth	r2, r2
 8000884:	fbb1 f5f7 	udiv	r5, r1, r7
 8000888:	fb07 1115 	mls	r1, r7, r5, r1
 800088c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000890:	fb05 f10e 	mul.w	r1, r5, lr
 8000894:	4291      	cmp	r1, r2
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x282>
 8000898:	eb1c 0202 	adds.w	r2, ip, r2
 800089c:	f105 38ff 	add.w	r8, r5, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 80008a2:	4291      	cmp	r1, r2
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 80008a6:	3d02      	subs	r5, #2
 80008a8:	4462      	add	r2, ip
 80008aa:	1a52      	subs	r2, r2, r1
 80008ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0xfc>
 80008b2:	4631      	mov	r1, r6
 80008b4:	4630      	mov	r0, r6
 80008b6:	e708      	b.n	80006ca <__udivmoddi4+0xa2>
 80008b8:	4639      	mov	r1, r7
 80008ba:	e6e6      	b.n	800068a <__udivmoddi4+0x62>
 80008bc:	4610      	mov	r0, r2
 80008be:	e6fb      	b.n	80006b8 <__udivmoddi4+0x90>
 80008c0:	4548      	cmp	r0, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f0>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008cc:	3b01      	subs	r3, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f0>
 80008d0:	4645      	mov	r5, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x282>
 80008d4:	462b      	mov	r3, r5
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1da>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x258>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b0>
 80008e0:	3d02      	subs	r5, #2
 80008e2:	4462      	add	r2, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x124>
 80008e6:	4608      	mov	r0, r1
 80008e8:	e70a      	b.n	8000700 <__udivmoddi4+0xd8>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x14e>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <HAL_ADC_ConvCpltCallback>:
const float unitValue = Vref / twelfBitADC * 1000;
const float sensitivity = 1000.0 / 264.0;// 1000mA per 265 mV
uint8_t convCompleted = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 80008fc:	4b04      	ldr	r3, [pc, #16]	; (8000910 <HAL_ADC_ConvCpltCallback+0x1c>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	2000008c 	.word	0x2000008c

08000914 <HSB_ReadCurrentModule>:

uint16_t HSB_ReadCurrentModule(int channel){
 8000914:	b580      	push	{r7, lr}
 8000916:	b082      	sub	sp, #8
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800091c:	2202      	movs	r2, #2
 800091e:	4920      	ldr	r1, [pc, #128]	; (80009a0 <HSB_ReadCurrentModule+0x8c>)
 8000920:	4820      	ldr	r0, [pc, #128]	; (80009a4 <HSB_ReadCurrentModule+0x90>)
 8000922:	f001 fb21 	bl	8001f68 <HAL_ADC_Start_DMA>
	while(!convCompleted);
 8000926:	bf00      	nop
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HSB_ReadCurrentModule+0x94>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d0fb      	beq.n	8000928 <HSB_ReadCurrentModule+0x14>
	raw = (uint16_t) rawValues[channel];
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <HSB_ReadCurrentModule+0x8c>)
 8000932:	687b      	ldr	r3, [r7, #4]
 8000934:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000938:	4b1c      	ldr	r3, [pc, #112]	; (80009ac <HSB_ReadCurrentModule+0x98>)
 800093a:	801a      	strh	r2, [r3, #0]
	voltage = unitValue * raw;
 800093c:	4b1b      	ldr	r3, [pc, #108]	; (80009ac <HSB_ReadCurrentModule+0x98>)
 800093e:	881b      	ldrh	r3, [r3, #0]
 8000940:	ee07 3a90 	vmov	s15, r3
 8000944:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000948:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80009b0 <HSB_ReadCurrentModule+0x9c>
 800094c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000950:	4b18      	ldr	r3, [pc, #96]	; (80009b4 <HSB_ReadCurrentModule+0xa0>)
 8000952:	edc3 7a00 	vstr	s15, [r3]
	current = (voltage - offset) * sensitivity;
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <HSB_ReadCurrentModule+0xa0>)
 8000958:	edd3 7a00 	vldr	s15, [r3]
 800095c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80009b8 <HSB_ReadCurrentModule+0xa4>
 8000960:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000964:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80009bc <HSB_ReadCurrentModule+0xa8>
 8000968:	ee67 7a87 	vmul.f32	s15, s15, s14
 800096c:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <HSB_ReadCurrentModule+0xac>)
 800096e:	edc3 7a00 	vstr	s15, [r3]
	HSB_DebugPrint("Current Module\n\rRead channel %i\n\rValue Read %%.2f", channel, current);
 8000972:	4b13      	ldr	r3, [pc, #76]	; (80009c0 <HSB_ReadCurrentModule+0xac>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4618      	mov	r0, r3
 8000978:	f7ff fde6 	bl	8000548 <__aeabi_f2d>
 800097c:	4602      	mov	r2, r0
 800097e:	460b      	mov	r3, r1
 8000980:	6879      	ldr	r1, [r7, #4]
 8000982:	4810      	ldr	r0, [pc, #64]	; (80009c4 <HSB_ReadCurrentModule+0xb0>)
 8000984:	f000 f850 	bl	8000a28 <HSB_DebugPrint>
	return current;
 8000988:	4b0d      	ldr	r3, [pc, #52]	; (80009c0 <HSB_ReadCurrentModule+0xac>)
 800098a:	edd3 7a00 	vldr	s15, [r3]
 800098e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000992:	ee17 3a90 	vmov	r3, s15
 8000996:	b29b      	uxth	r3, r3
}
 8000998:	4618      	mov	r0, r3
 800099a:	3708      	adds	r7, #8
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}
 80009a0:	20000080 	.word	0x20000080
 80009a4:	200000a4 	.word	0x200000a4
 80009a8:	2000008c 	.word	0x2000008c
 80009ac:	20000084 	.word	0x20000084
 80009b0:	3f4e4000 	.word	0x3f4e4000
 80009b4:	20000088 	.word	0x20000088
 80009b8:	43a10000 	.word	0x43a10000
 80009bc:	40726c9b 	.word	0x40726c9b
 80009c0:	2000007c 	.word	0x2000007c
 80009c4:	08008680 	.word	0x08008680

080009c8 <HSB_CurrentModule>:

void HSB_CurrentModule(float* E, float* F){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
 80009d0:	6039      	str	r1, [r7, #0]
	*E = HSB_ReadCurrentModule(0);
 80009d2:	2000      	movs	r0, #0
 80009d4:	f7ff ff9e 	bl	8000914 <HSB_ReadCurrentModule>
 80009d8:	4603      	mov	r3, r0
 80009da:	ee07 3a90 	vmov	s15, r3
 80009de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	edc3 7a00 	vstr	s15, [r3]
	*F = HSB_ReadCurrentModule(1);
 80009e8:	2001      	movs	r0, #1
 80009ea:	f7ff ff93 	bl	8000914 <HSB_ReadCurrentModule>
 80009ee:	4603      	mov	r3, r0
 80009f0:	ee07 3a90 	vmov	s15, r3
 80009f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	edc3 7a00 	vstr	s15, [r3]
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HSB_DebugPrint_Init>:

//Boolean for turn off debug print
//Make false to turn off
bool HSB_DebugPrintOn = true;

void HSB_DebugPrint_Init(bool input){
 8000a08:	b480      	push	{r7}
 8000a0a:	b083      	sub	sp, #12
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	HSB_DebugPrintOn = input;
 8000a12:	4a04      	ldr	r2, [pc, #16]	; (8000a24 <HSB_DebugPrint_Init+0x1c>)
 8000a14:	79fb      	ldrb	r3, [r7, #7]
 8000a16:	7013      	strb	r3, [r2, #0]
	}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	20000000 	.word	0x20000000

08000a28 <HSB_DebugPrint>:

void HSB_DebugPrint(const char *x, ...){
 8000a28:	b40f      	push	{r0, r1, r2, r3}
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	af00      	add	r7, sp, #0
	if(HSB_DebugPrintOn){
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <HSB_DebugPrint+0x38>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d00e      	beq.n	8000a54 <HSB_DebugPrint+0x2c>
		//UART variables
		sprintf(msg,x);
 8000a36:	68b9      	ldr	r1, [r7, #8]
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <HSB_DebugPrint+0x3c>)
 8000a3a:	f007 f971 	bl	8007d20 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000a3e:	4809      	ldr	r0, [pc, #36]	; (8000a64 <HSB_DebugPrint+0x3c>)
 8000a40:	f7ff fbc6 	bl	80001d0 <strlen>
 8000a44:	4603      	mov	r3, r0
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4c:	4905      	ldr	r1, [pc, #20]	; (8000a64 <HSB_DebugPrint+0x3c>)
 8000a4e:	4806      	ldr	r0, [pc, #24]	; (8000a68 <HSB_DebugPrint+0x40>)
 8000a50:	f006 fc9a 	bl	8007388 <HAL_UART_Transmit>
	}
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000a5c:	b004      	add	sp, #16
 8000a5e:	4770      	bx	lr
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000090 	.word	0x20000090
 8000a68:	200002bc 	.word	0x200002bc

08000a6c <HSB_VoltageModule_Init>:
const float ADCFactor = ReferenceVoltage / ADCBits;
//conversion factor to acount for the voltage divider on the PCB
//58.7 is the total resistance of the devider and 2.7 the small resistor
const float converionFactor = 1 / 2.7 * 58.7;

void HSB_VoltageModule_Init(uint8_t adress){
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 8000a76:	79fb      	ldrb	r3, [r7, #7]
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	4b03      	ldr	r3, [pc, #12]	; (8000a8c <HSB_VoltageModule_Init+0x20>)
 8000a7e:	701a      	strb	r2, [r3, #0]
}
 8000a80:	bf00      	nop
 8000a82:	370c      	adds	r7, #12
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	20000001 	.word	0x20000001

08000a90 <HSB_ReadMCP3427>:

uint16_t HSB_ReadMCP3427(int channel){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b086      	sub	sp, #24
 8000a94:	af02      	add	r7, sp, #8
 8000a96:	6078      	str	r0, [r7, #4]
	uint8_t RX_Buffer [] = "A"; // Receive buffer i2c
 8000a98:	2341      	movs	r3, #65	; 0x41
 8000a9a:	81bb      	strh	r3, [r7, #12]
	uint8_t read = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	72fb      	strb	r3, [r7, #11]
	if(channel == 0){
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d103      	bne.n	8000aae <HSB_ReadMCP3427+0x1e>
		read = readCH1;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HSB_ReadMCP3427+0x74>)
 8000aa8:	781b      	ldrb	r3, [r3, #0]
 8000aaa:	72fb      	strb	r3, [r7, #11]
 8000aac:	e002      	b.n	8000ab4 <HSB_ReadMCP3427+0x24>
	}else{
		read = readCH2;
 8000aae:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <HSB_ReadMCP3427+0x78>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	72fb      	strb	r3, [r7, #11]
	}
	HAL_I2C_Master_Transmit(&hi2c1,i2cAddress,&read,1,1000); //Sending in Blocking mode
 8000ab4:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <HSB_ReadMCP3427+0x7c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	b299      	uxth	r1, r3
 8000aba:	f107 020b 	add.w	r2, r7, #11
 8000abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ac2:	9300      	str	r3, [sp, #0]
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <HSB_ReadMCP3427+0x80>)
 8000ac8:	f003 f888 	bl	8003bdc <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000acc:	200a      	movs	r0, #10
 8000ace:	f000 ff0b 	bl	80018e8 <HAL_Delay>
	HAL_I2C_Master_Receive(&hi2c1, i2cAddress, RX_Buffer, 3,1000);
 8000ad2:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <HSB_ReadMCP3427+0x7c>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	b299      	uxth	r1, r3
 8000ad8:	f107 020c 	add.w	r2, r7, #12
 8000adc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae0:	9300      	str	r3, [sp, #0]
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	480a      	ldr	r0, [pc, #40]	; (8000b10 <HSB_ReadMCP3427+0x80>)
 8000ae6:	f003 f991 	bl	8003e0c <HAL_I2C_Master_Receive>
	HAL_Delay(10);
 8000aea:	200a      	movs	r0, #10
 8000aec:	f000 fefc 	bl	80018e8 <HAL_Delay>
	return RX_Buffer[1] | RX_Buffer[2];
 8000af0:	7b7a      	ldrb	r2, [r7, #13]
 8000af2:	7bbb      	ldrb	r3, [r7, #14]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b2db      	uxtb	r3, r3
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000002 	.word	0x20000002
 8000b08:	20000003 	.word	0x20000003
 8000b0c:	20000001 	.word	0x20000001
 8000b10:	20000178 	.word	0x20000178

08000b14 <HSb_ConvertValue>:

float HSb_ConvertValue(int channel){
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	int adcRaw = HSB_ReadMCP3427(channel);
 8000b1c:	6878      	ldr	r0, [r7, #4]
 8000b1e:	f7ff ffb7 	bl	8000a90 <HSB_ReadMCP3427>
 8000b22:	4603      	mov	r3, r0
 8000b24:	617b      	str	r3, [r7, #20]
	float adcVoltage = adcRaw * ADCFactor;
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	ee07 3a90 	vmov	s15, r3
 8000b2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b30:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000b70 <HSb_ConvertValue+0x5c>
 8000b34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b38:	edc7 7a04 	vstr	s15, [r7, #16]
	float result = adcVoltage * converionFactor;
 8000b3c:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000b74 <HSb_ConvertValue+0x60>
 8000b40:	edd7 7a04 	vldr	s15, [r7, #16]
 8000b44:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b48:	edc7 7a03 	vstr	s15, [r7, #12]
	HSB_DebugPrint("Voltage Module\n\rRead channel %i\n\rValue Read %%.2f", channel, result);
 8000b4c:	68f8      	ldr	r0, [r7, #12]
 8000b4e:	f7ff fcfb 	bl	8000548 <__aeabi_f2d>
 8000b52:	4602      	mov	r2, r0
 8000b54:	460b      	mov	r3, r1
 8000b56:	6879      	ldr	r1, [r7, #4]
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <HSb_ConvertValue+0x64>)
 8000b5a:	f7ff ff65 	bl	8000a28 <HSB_DebugPrint>
	return result;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	ee07 3a90 	vmov	s15, r3
}
 8000b64:	eeb0 0a67 	vmov.f32	s0, s15
 8000b68:	3718      	adds	r7, #24
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	3a533333 	.word	0x3a533333
 8000b74:	41aded09 	.word	0x41aded09
 8000b78:	080086b4 	.word	0x080086b4

08000b7c <HSB_VoltageModule>:

void HSB_VoltageModule(float* E, float* F){
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	*E = HSb_ConvertValue(1);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f7ff ffc4 	bl	8000b14 <HSb_ConvertValue>
 8000b8c:	eef0 7a40 	vmov.f32	s15, s0
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	edc3 7a00 	vstr	s15, [r3]
	*F = HSb_ConvertValue(2);
 8000b96:	2002      	movs	r0, #2
 8000b98:	f7ff ffbc 	bl	8000b14 <HSb_ConvertValue>
 8000b9c:	eef0 7a40 	vmov.f32	s15, s0
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	edc3 7a00 	vstr	s15, [r3]
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
	...

08000bb0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
 8000bc4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000bc6:	4b30      	ldr	r3, [pc, #192]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bc8:	4a30      	ldr	r2, [pc, #192]	; (8000c8c <MX_ADC1_Init+0xdc>)
 8000bca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bcc:	4b2e      	ldr	r3, [pc, #184]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd2:	4b2d      	ldr	r3, [pc, #180]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bd8:	4b2b      	ldr	r3, [pc, #172]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bde:	4b2a      	ldr	r3, [pc, #168]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000be0:	2201      	movs	r2, #1
 8000be2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be4:	4b28      	ldr	r3, [pc, #160]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000be6:	2204      	movs	r2, #4
 8000be8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000bea:	4b27      	ldr	r3, [pc, #156]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000bf6:	4b24      	ldr	r3, [pc, #144]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bf8:	2202      	movs	r2, #2
 8000bfa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b20      	ldr	r3, [pc, #128]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0a:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c10:	4b1d      	ldr	r3, [pc, #116]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c18:	4b1b      	ldr	r3, [pc, #108]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000c1e:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c26:	4818      	ldr	r0, [pc, #96]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c28:	f001 f85c 	bl	8001ce4 <HAL_ADC_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000c32:	f000 fb71 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c36:	4b16      	ldr	r3, [pc, #88]	; (8000c90 <MX_ADC1_Init+0xe0>)
 8000c38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c3a:	2306      	movs	r3, #6
 8000c3c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000c3e:	2307      	movs	r3, #7
 8000c40:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c42:	237f      	movs	r3, #127	; 0x7f
 8000c44:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c46:	2304      	movs	r3, #4
 8000c48:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c54:	f001 fbde 	bl	8002414 <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000c5e:	f000 fb5b 	bl	8001318 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c62:	4b0c      	ldr	r3, [pc, #48]	; (8000c94 <MX_ADC1_Init+0xe4>)
 8000c64:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c66:	230c      	movs	r3, #12
 8000c68:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_ADC1_Init+0xd8>)
 8000c70:	f001 fbd0 	bl	8002414 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 8000c7a:	f000 fb4d 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200000a4 	.word	0x200000a4
 8000c8c:	50040000 	.word	0x50040000
 8000c90:	14f00020 	.word	0x14f00020
 8000c94:	19200040 	.word	0x19200040

08000c98 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b09e      	sub	sp, #120	; 0x78
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cb0:	f107 0310 	add.w	r3, r7, #16
 8000cb4:	2254      	movs	r2, #84	; 0x54
 8000cb6:	2100      	movs	r1, #0
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f007 f851 	bl	8007d60 <memset>
  if(adcHandle->Instance==ADC1)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a3f      	ldr	r2, [pc, #252]	; (8000dc0 <HAL_ADC_MspInit+0x128>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d176      	bne.n	8000db6 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000cc8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000ccc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000cce:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000cd2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000cdc:	2310      	movs	r3, #16
 8000cde:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000ce0:	2307      	movs	r3, #7
 8000ce2:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000cec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cf2:	f107 0310 	add.w	r3, r7, #16
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f005 f8da 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000d02:	f000 fb09 	bl	8001318 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d06:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0a:	4a2e      	ldr	r2, [pc, #184]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d0c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d12:	4b2c      	ldr	r3, [pc, #176]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b29      	ldr	r3, [pc, #164]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d22:	4a28      	ldr	r2, [pc, #160]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <HAL_ADC_MspInit+0x12c>)
 8000d2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	60bb      	str	r3, [r7, #8]
 8000d34:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 8000d36:	2303      	movs	r3, #3
 8000d38:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d3a:	230b      	movs	r3, #11
 8000d3c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d46:	4619      	mov	r1, r3
 8000d48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d4c:	f002 fd28 	bl	80037a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d50:	4b1d      	ldr	r3, [pc, #116]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <HAL_ADC_MspInit+0x134>)
 8000d54:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000d56:	4b1c      	ldr	r3, [pc, #112]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d62:	4b19      	ldr	r3, [pc, #100]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d68:	4b17      	ldr	r3, [pc, #92]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d6a:	2280      	movs	r2, #128	; 0x80
 8000d6c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000d6e:	4b16      	ldr	r3, [pc, #88]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d70:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d74:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d7c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d7e:	4b12      	ldr	r3, [pc, #72]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d80:	2220      	movs	r2, #32
 8000d82:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d8a:	480f      	ldr	r0, [pc, #60]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d8c:	f002 fac2 	bl	8003314 <HAL_DMA_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000d96:	f000 fabf 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a0a      	ldr	r2, [pc, #40]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000d9e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000da0:	4a09      	ldr	r2, [pc, #36]	; (8000dc8 <HAL_ADC_MspInit+0x130>)
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	2012      	movs	r0, #18
 8000dac:	f002 fa7b 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000db0:	2012      	movs	r0, #18
 8000db2:	f002 fa94 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000db6:	bf00      	nop
 8000db8:	3778      	adds	r7, #120	; 0x78
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	50040000 	.word	0x50040000
 8000dc4:	40021000 	.word	0x40021000
 8000dc8:	20000108 	.word	0x20000108
 8000dcc:	40020008 	.word	0x40020008

08000dd0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000dd4:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <MX_CAN1_Init+0x78>)
 8000dd8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000dda:	4b1a      	ldr	r3, [pc, #104]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000ddc:	2208      	movs	r2, #8
 8000dde:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000de6:	4b17      	ldr	r3, [pc, #92]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000dec:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000dee:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000df2:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000df4:	4b13      	ldr	r3, [pc, #76]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000df6:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000dfa:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dfc:	4b11      	ldr	r3, [pc, #68]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000e02:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000e14:	4b0b      	ldr	r3, [pc, #44]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000e1a:	4b0a      	ldr	r3, [pc, #40]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000e20:	4808      	ldr	r0, [pc, #32]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e22:	f002 f825 	bl	8002e70 <HAL_CAN_Init>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000e2c:	f000 fa74 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8000e30:	4804      	ldr	r0, [pc, #16]	; (8000e44 <MX_CAN1_Init+0x74>)
 8000e32:	f002 f918 	bl	8003066 <HAL_CAN_Start>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_CAN1_Init+0x70>
    	    Error_Handler();
 8000e3c:	f000 fa6c 	bl	8001318 <Error_Handler>
    	}
  /* USER CODE END CAN1_Init 2 */

}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	20000150 	.word	0x20000150
 8000e48:	40006400 	.word	0x40006400

08000e4c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b08a      	sub	sp, #40	; 0x28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e54:	f107 0314 	add.w	r3, r7, #20
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a18      	ldr	r2, [pc, #96]	; (8000ecc <HAL_CAN_MspInit+0x80>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d129      	bne.n	8000ec2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e78:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_CAN_MspInit+0x84>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000e9e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	4619      	mov	r1, r3
 8000eba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ebe:	f002 fc6f 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40006400 	.word	0x40006400
 8000ed0:	40021000 	.word	0x40021000

08000ed4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b14      	ldr	r3, [pc, #80]	; (8000f2c <MX_DMA_Init+0x58>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ede:	4a13      	ldr	r2, [pc, #76]	; (8000f2c <MX_DMA_Init+0x58>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_DMA_Init+0x58>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	607b      	str	r3, [r7, #4]
 8000ef0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f002 f9d5 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000efc:	200b      	movs	r0, #11
 8000efe:	f002 f9ee 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2010      	movs	r0, #16
 8000f08:	f002 f9cd 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f0c:	2010      	movs	r0, #16
 8000f0e:	f002 f9e6 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000f12:	2200      	movs	r2, #0
 8000f14:	2100      	movs	r1, #0
 8000f16:	2011      	movs	r0, #17
 8000f18:	f002 f9c5 	bl	80032a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000f1c:	2011      	movs	r0, #17
 8000f1e:	f002 f9de 	bl	80032de <HAL_NVIC_EnableIRQ>

}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b088      	sub	sp, #32
 8000f34:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f36:	f107 030c 	add.w	r3, r7, #12
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
 8000f44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f4c:	f043 0304 	orr.w	r3, r3, #4
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0304 	and.w	r3, r3, #4
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	4b1e      	ldr	r3, [pc, #120]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f62:	4a1d      	ldr	r2, [pc, #116]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f64:	f043 0301 	orr.w	r3, r3, #1
 8000f68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f6a:	4b1b      	ldr	r3, [pc, #108]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0301 	and.w	r3, r3, #1
 8000f72:	607b      	str	r3, [r7, #4]
 8000f74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f76:	4b18      	ldr	r3, [pc, #96]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	4a17      	ldr	r2, [pc, #92]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f82:	4b15      	ldr	r3, [pc, #84]	; (8000fd8 <MX_GPIO_Init+0xa8>)
 8000f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2108      	movs	r1, #8
 8000f92:	4812      	ldr	r0, [pc, #72]	; (8000fdc <MX_GPIO_Init+0xac>)
 8000f94:	f002 fd6e 	bl	8003a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000f98:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f9c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 030c 	add.w	r3, r7, #12
 8000faa:	4619      	mov	r1, r3
 8000fac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb0:	f002 fbf6 	bl	80037a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000fb4:	2308      	movs	r3, #8
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4804      	ldr	r0, [pc, #16]	; (8000fdc <MX_GPIO_Init+0xac>)
 8000fcc:	f002 fbe8 	bl	80037a0 <HAL_GPIO_Init>

}
 8000fd0:	bf00      	nop
 8000fd2:	3720      	adds	r7, #32
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	48000400 	.word	0x48000400

08000fe0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000fe4:	4b1b      	ldr	r3, [pc, #108]	; (8001054 <MX_I2C1_Init+0x74>)
 8000fe6:	4a1c      	ldr	r2, [pc, #112]	; (8001058 <MX_I2C1_Init+0x78>)
 8000fe8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000fea:	4b1a      	ldr	r3, [pc, #104]	; (8001054 <MX_I2C1_Init+0x74>)
 8000fec:	4a1b      	ldr	r2, [pc, #108]	; (800105c <MX_I2C1_Init+0x7c>)
 8000fee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ff0:	4b18      	ldr	r3, [pc, #96]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ff6:	4b17      	ldr	r3, [pc, #92]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ffc:	4b15      	ldr	r3, [pc, #84]	; (8001054 <MX_I2C1_Init+0x74>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001002:	4b14      	ldr	r3, [pc, #80]	; (8001054 <MX_I2C1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2C1_Init+0x74>)
 800100a:	2200      	movs	r2, #0
 800100c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800100e:	4b11      	ldr	r3, [pc, #68]	; (8001054 <MX_I2C1_Init+0x74>)
 8001010:	2200      	movs	r2, #0
 8001012:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <MX_I2C1_Init+0x74>)
 8001016:	2200      	movs	r2, #0
 8001018:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800101a:	480e      	ldr	r0, [pc, #56]	; (8001054 <MX_I2C1_Init+0x74>)
 800101c:	f002 fd42 	bl	8003aa4 <HAL_I2C_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001026:	f000 f977 	bl	8001318 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800102a:	2100      	movs	r1, #0
 800102c:	4809      	ldr	r0, [pc, #36]	; (8001054 <MX_I2C1_Init+0x74>)
 800102e:	f003 fffb 	bl	8005028 <HAL_I2CEx_ConfigAnalogFilter>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001038:	f000 f96e 	bl	8001318 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800103c:	2100      	movs	r1, #0
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2C1_Init+0x74>)
 8001040:	f004 f83d 	bl	80050be <HAL_I2CEx_ConfigDigitalFilter>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800104a:	f000 f965 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000178 	.word	0x20000178
 8001058:	40005400 	.word	0x40005400
 800105c:	00707cbb 	.word	0x00707cbb

08001060 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b09e      	sub	sp, #120	; 0x78
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001068:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]
 8001074:	60da      	str	r2, [r3, #12]
 8001076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	2254      	movs	r2, #84	; 0x54
 800107e:	2100      	movs	r1, #0
 8001080:	4618      	mov	r0, r3
 8001082:	f006 fe6d 	bl	8007d60 <memset>
  if(i2cHandle->Instance==I2C1)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a50      	ldr	r2, [pc, #320]	; (80011cc <HAL_I2C_MspInit+0x16c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	f040 8098 	bne.w	80011c2 <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001092:	2340      	movs	r3, #64	; 0x40
 8001094:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001096:	2300      	movs	r3, #0
 8001098:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4618      	mov	r0, r3
 80010a0:	f004 ff06 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80010aa:	f000 f935 	bl	8001318 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	4b48      	ldr	r3, [pc, #288]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	4a47      	ldr	r2, [pc, #284]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ba:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 80010c6:	23c0      	movs	r3, #192	; 0xc0
 80010c8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010ce:	2301      	movs	r3, #1
 80010d0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d2:	2303      	movs	r3, #3
 80010d4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010d6:	2304      	movs	r3, #4
 80010d8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010de:	4619      	mov	r1, r3
 80010e0:	483c      	ldr	r0, [pc, #240]	; (80011d4 <HAL_I2C_MspInit+0x174>)
 80010e2:	f002 fb5d 	bl	80037a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010e6:	4b3a      	ldr	r3, [pc, #232]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ea:	4a39      	ldr	r2, [pc, #228]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010f0:	6593      	str	r3, [r2, #88]	; 0x58
 80010f2:	4b37      	ldr	r3, [pc, #220]	; (80011d0 <HAL_I2C_MspInit+0x170>)
 80010f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 80010fe:	4b36      	ldr	r3, [pc, #216]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001100:	4a36      	ldr	r2, [pc, #216]	; (80011dc <HAL_I2C_MspInit+0x17c>)
 8001102:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8001104:	4b34      	ldr	r3, [pc, #208]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001106:	2203      	movs	r2, #3
 8001108:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800110a:	4b33      	ldr	r3, [pc, #204]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001110:	4b31      	ldr	r3, [pc, #196]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001112:	2200      	movs	r2, #0
 8001114:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001116:	4b30      	ldr	r3, [pc, #192]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800111c:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 800111e:	2200      	movs	r2, #0
 8001120:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001122:	4b2d      	ldr	r3, [pc, #180]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001124:	2200      	movs	r2, #0
 8001126:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 800112a:	2200      	movs	r2, #0
 800112c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800112e:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001130:	2200      	movs	r2, #0
 8001132:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8001134:	4828      	ldr	r0, [pc, #160]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001136:	f002 f8ed 	bl	8003314 <HAL_DMA_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8001140:	f000 f8ea 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	4a24      	ldr	r2, [pc, #144]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 8001148:	63da      	str	r2, [r3, #60]	; 0x3c
 800114a:	4a23      	ldr	r2, [pc, #140]	; (80011d8 <HAL_I2C_MspInit+0x178>)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8001150:	4b23      	ldr	r3, [pc, #140]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001152:	4a24      	ldr	r2, [pc, #144]	; (80011e4 <HAL_I2C_MspInit+0x184>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8001156:	4b22      	ldr	r3, [pc, #136]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001158:	2203      	movs	r2, #3
 800115a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 800115e:	2210      	movs	r2, #16
 8001160:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 800116a:	2280      	movs	r2, #128	; 0x80
 800116c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800116e:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001170:	2200      	movs	r2, #0
 8001172:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001176:	2200      	movs	r2, #0
 8001178:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 800117c:	2200      	movs	r2, #0
 800117e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001180:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001182:	2200      	movs	r2, #0
 8001184:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8001186:	4816      	ldr	r0, [pc, #88]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 8001188:	f002 f8c4 	bl	8003314 <HAL_DMA_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8001192:	f000 f8c1 	bl	8001318 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a11      	ldr	r2, [pc, #68]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 800119a:	639a      	str	r2, [r3, #56]	; 0x38
 800119c:	4a10      	ldr	r2, [pc, #64]	; (80011e0 <HAL_I2C_MspInit+0x180>)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	201f      	movs	r0, #31
 80011a8:	f002 f87d 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80011ac:	201f      	movs	r0, #31
 80011ae:	f002 f896 	bl	80032de <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2100      	movs	r1, #0
 80011b6:	2020      	movs	r0, #32
 80011b8:	f002 f875 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80011bc:	2020      	movs	r0, #32
 80011be:	f002 f88e 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011c2:	bf00      	nop
 80011c4:	3778      	adds	r7, #120	; 0x78
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	40005400 	.word	0x40005400
 80011d0:	40021000 	.word	0x40021000
 80011d4:	48000400 	.word	0x48000400
 80011d8:	200001cc 	.word	0x200001cc
 80011dc:	40020080 	.word	0x40020080
 80011e0:	20000214 	.word	0x20000214
 80011e4:	4002006c 	.word	0x4002006c

080011e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011ec:	f000 fb07 	bl	80017fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011f0:	f000 f826 	bl	8001240 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011f4:	f7ff fe9c 	bl	8000f30 <MX_GPIO_Init>
  MX_DMA_Init();
 80011f8:	f7ff fe6c 	bl	8000ed4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80011fc:	f000 fa3c 	bl	8001678 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001200:	f7ff fcd6 	bl	8000bb0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001204:	f7ff feec 	bl	8000fe0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8001208:	f7ff fde2 	bl	8000dd0 <MX_CAN1_Init>
  MX_TIM2_Init();
 800120c:	f000 f966 	bl	80014dc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fbf9 	bl	8000a08 <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 8001216:	2068      	movs	r0, #104	; 0x68
 8001218:	f7ff fc28 	bl	8000a6c <HSB_VoltageModule_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HSB_CurrentModule(&CurrentE, &CurrentF);
 800121c:	4904      	ldr	r1, [pc, #16]	; (8001230 <main+0x48>)
 800121e:	4805      	ldr	r0, [pc, #20]	; (8001234 <main+0x4c>)
 8001220:	f7ff fbd2 	bl	80009c8 <HSB_CurrentModule>
	  HSB_VoltageModule(&VoltageE, &VoltageF);
 8001224:	4904      	ldr	r1, [pc, #16]	; (8001238 <main+0x50>)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <main+0x54>)
 8001228:	f7ff fca8 	bl	8000b7c <HSB_VoltageModule>
	  HSB_CurrentModule(&CurrentE, &CurrentF);
 800122c:	e7f6      	b.n	800121c <main+0x34>
 800122e:	bf00      	nop
 8001230:	20000260 	.word	0x20000260
 8001234:	2000025c 	.word	0x2000025c
 8001238:	20000268 	.word	0x20000268
 800123c:	20000264 	.word	0x20000264

08001240 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b096      	sub	sp, #88	; 0x58
 8001244:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	2244      	movs	r2, #68	; 0x44
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f006 fd86 	bl	8007d60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001254:	463b      	mov	r3, r7
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]
 800125e:	60da      	str	r2, [r3, #12]
 8001260:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001262:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001266:	f003 ff95 	bl	8005194 <HAL_PWREx_ControlVoltageScaling>
 800126a:	4603      	mov	r3, r0
 800126c:	2b00      	cmp	r3, #0
 800126e:	d001      	beq.n	8001274 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001270:	f000 f852 	bl	8001318 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001274:	f003 ff70 	bl	8005158 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <SystemClock_Config+0xc0>)
 800127a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800127e:	4a20      	ldr	r2, [pc, #128]	; (8001300 <SystemClock_Config+0xc0>)
 8001280:	f023 0318 	bic.w	r3, r3, #24
 8001284:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001288:	2314      	movs	r3, #20
 800128a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800128c:	2301      	movs	r3, #1
 800128e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001290:	2301      	movs	r3, #1
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001294:	2300      	movs	r3, #0
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001298:	2360      	movs	r3, #96	; 0x60
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800129c:	2302      	movs	r3, #2
 800129e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80012a4:	2301      	movs	r3, #1
 80012a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80012a8:	2310      	movs	r3, #16
 80012aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80012ac:	2307      	movs	r3, #7
 80012ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80012b0:	2302      	movs	r3, #2
 80012b2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012b4:	2302      	movs	r3, #2
 80012b6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012b8:	f107 0314 	add.w	r3, r7, #20
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 ffbf 	bl	8005240 <HAL_RCC_OscConfig>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d001      	beq.n	80012cc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80012c8:	f000 f826 	bl	8001318 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012cc:	230f      	movs	r3, #15
 80012ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012d0:	2303      	movs	r3, #3
 80012d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012d8:	2300      	movs	r3, #0
 80012da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012dc:	2300      	movs	r3, #0
 80012de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80012e0:	463b      	mov	r3, r7
 80012e2:	2101      	movs	r1, #1
 80012e4:	4618      	mov	r0, r3
 80012e6:	f004 fbbf 	bl	8005a68 <HAL_RCC_ClockConfig>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80012f0:	f000 f812 	bl	8001318 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80012f4:	f004 ffd2 	bl	800629c <HAL_RCCEx_EnableMSIPLLMode>
}
 80012f8:	bf00      	nop
 80012fa:	3758      	adds	r7, #88	; 0x58
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40021000 	.word	0x40021000

08001304 <HAL_TIM_PeriodElapsedCallback>:
//	  HSB_DebugPrint("Error while sending Can Message : %un", error);
//	  Error_Handler ();
//	}
}
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	//function to run on interval interupt
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800131c:	b672      	cpsid	i
}
 800131e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001320:	e7fe      	b.n	8001320 <Error_Handler+0x8>
	...

08001324 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800132a:	4b0f      	ldr	r3, [pc, #60]	; (8001368 <HAL_MspInit+0x44>)
 800132c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800132e:	4a0e      	ldr	r2, [pc, #56]	; (8001368 <HAL_MspInit+0x44>)
 8001330:	f043 0301 	orr.w	r3, r3, #1
 8001334:	6613      	str	r3, [r2, #96]	; 0x60
 8001336:	4b0c      	ldr	r3, [pc, #48]	; (8001368 <HAL_MspInit+0x44>)
 8001338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	607b      	str	r3, [r7, #4]
 8001340:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <HAL_MspInit+0x44>)
 8001344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001346:	4a08      	ldr	r2, [pc, #32]	; (8001368 <HAL_MspInit+0x44>)
 8001348:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134c:	6593      	str	r3, [r2, #88]	; 0x58
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <HAL_MspInit+0x44>)
 8001350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001352:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001356:	603b      	str	r3, [r7, #0]
 8001358:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	40021000 	.word	0x40021000

0800136c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001370:	e7fe      	b.n	8001370 <NMI_Handler+0x4>

08001372 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001372:	b480      	push	{r7}
 8001374:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001376:	e7fe      	b.n	8001376 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	e7fe      	b.n	800137c <MemManage_Handler+0x4>

0800137e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800137e:	b480      	push	{r7}
 8001380:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001382:	e7fe      	b.n	8001382 <BusFault_Handler+0x4>

08001384 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001388:	e7fe      	b.n	8001388 <UsageFault_Handler+0x4>

0800138a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800138a:	b480      	push	{r7}
 800138c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800138e:	bf00      	nop
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr

080013a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013aa:	bf00      	nop
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr

080013b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013b8:	f000 fa76 	bl	80018a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013bc:	bf00      	nop
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80013c4:	4802      	ldr	r0, [pc, #8]	; (80013d0 <DMA1_Channel1_IRQHandler+0x10>)
 80013c6:	f002 f8fe 	bl	80035c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000108 	.word	0x20000108

080013d4 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80013d8:	4802      	ldr	r0, [pc, #8]	; (80013e4 <DMA1_Channel6_IRQHandler+0x10>)
 80013da:	f002 f8f4 	bl	80035c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	20000214 	.word	0x20000214

080013e8 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80013ec:	4802      	ldr	r0, [pc, #8]	; (80013f8 <DMA1_Channel7_IRQHandler+0x10>)
 80013ee:	f002 f8ea 	bl	80035c6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	200001cc 	.word	0x200001cc

080013fc <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <ADC1_IRQHandler+0x10>)
 8001402:	f000 fe35 	bl	8002070 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	200000a4 	.word	0x200000a4

08001410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM2_IRQHandler+0x10>)
 8001416:	f005 f8fb 	bl	8006610 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000270 	.word	0x20000270

08001424 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001428:	4802      	ldr	r0, [pc, #8]	; (8001434 <I2C1_EV_IRQHandler+0x10>)
 800142a:	f002 fde5 	bl	8003ff8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000178 	.word	0x20000178

08001438 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800143c:	4802      	ldr	r0, [pc, #8]	; (8001448 <I2C1_ER_IRQHandler+0x10>)
 800143e:	f002 fdf5 	bl	800402c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000178 	.word	0x20000178

0800144c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b086      	sub	sp, #24
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001454:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <_sbrk+0x5c>)
 8001456:	4b15      	ldr	r3, [pc, #84]	; (80014ac <_sbrk+0x60>)
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001460:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <_sbrk+0x64>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d102      	bne.n	800146e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <_sbrk+0x64>)
 800146a:	4a12      	ldr	r2, [pc, #72]	; (80014b4 <_sbrk+0x68>)
 800146c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <_sbrk+0x64>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4413      	add	r3, r2
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	429a      	cmp	r2, r3
 800147a:	d207      	bcs.n	800148c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800147c:	f006 fc78 	bl	8007d70 <__errno>
 8001480:	4603      	mov	r3, r0
 8001482:	220c      	movs	r2, #12
 8001484:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001486:	f04f 33ff 	mov.w	r3, #4294967295
 800148a:	e009      	b.n	80014a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800148c:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <_sbrk+0x64>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <_sbrk+0x64>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <_sbrk+0x64>)
 800149c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800149e:	68fb      	ldr	r3, [r7, #12]
}
 80014a0:	4618      	mov	r0, r3
 80014a2:	3718      	adds	r7, #24
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	20010000 	.word	0x20010000
 80014ac:	00000400 	.word	0x00000400
 80014b0:	2000026c 	.word	0x2000026c
 80014b4:	20000490 	.word	0x20000490

080014b8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <SystemInit+0x20>)
 80014be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <SystemInit+0x20>)
 80014c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b08e      	sub	sp, #56	; 0x38
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 031c 	add.w	r3, r7, #28
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
 800150a:	615a      	str	r2, [r3, #20]
 800150c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800150e:	4b2d      	ldr	r3, [pc, #180]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001510:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001514:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8001516:	4b2b      	ldr	r3, [pc, #172]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001518:	f647 42ff 	movw	r2, #31999	; 0x7cff
 800151c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b29      	ldr	r3, [pc, #164]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8001524:	4b27      	ldr	r3, [pc, #156]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001526:	220a      	movs	r2, #10
 8001528:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152a:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <MX_TIM2_Init+0xe8>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001530:	4b24      	ldr	r3, [pc, #144]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001532:	2200      	movs	r2, #0
 8001534:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001536:	4823      	ldr	r0, [pc, #140]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001538:	f004 ffb2 	bl	80064a0 <HAL_TIM_Base_Init>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001542:	f7ff fee9 	bl	8001318 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800154c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001550:	4619      	mov	r1, r3
 8001552:	481c      	ldr	r0, [pc, #112]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001554:	f005 f9d8 	bl	8006908 <HAL_TIM_ConfigClockSource>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800155e:	f7ff fedb 	bl	8001318 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8001562:	4818      	ldr	r0, [pc, #96]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001564:	f004 fff3 	bl	800654e <HAL_TIM_OC_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800156e:	f7ff fed3 	bl	8001318 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001572:	2300      	movs	r3, #0
 8001574:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001576:	2300      	movs	r3, #0
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800157a:	f107 031c 	add.w	r3, r7, #28
 800157e:	4619      	mov	r1, r3
 8001580:	4810      	ldr	r0, [pc, #64]	; (80015c4 <MX_TIM2_Init+0xe8>)
 8001582:	f005 fe2f 	bl	80071e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800158c:	f7ff fec4 	bl	8001318 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8001590:	2350      	movs	r3, #80	; 0x50
 8001592:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001594:	2300      	movs	r3, #0
 8001596:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001598:	2300      	movs	r3, #0
 800159a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800159c:	2300      	movs	r3, #0
 800159e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	4619      	mov	r1, r3
 80015a6:	4807      	ldr	r0, [pc, #28]	; (80015c4 <MX_TIM2_Init+0xe8>)
 80015a8:	f005 f934 	bl	8006814 <HAL_TIM_OC_ConfigChannel>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80015b2:	f7ff feb1 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80015b6:	4803      	ldr	r0, [pc, #12]	; (80015c4 <MX_TIM2_Init+0xe8>)
 80015b8:	f000 f82a 	bl	8001610 <HAL_TIM_MspPostInit>

}
 80015bc:	bf00      	nop
 80015be:	3738      	adds	r7, #56	; 0x38
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd80      	pop	{r7, pc}
 80015c4:	20000270 	.word	0x20000270

080015c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d8:	d113      	bne.n	8001602 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015da:	4b0c      	ldr	r3, [pc, #48]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015de:	4a0b      	ldr	r2, [pc, #44]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6593      	str	r3, [r2, #88]	; 0x58
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_TIM_Base_MspInit+0x44>)
 80015e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80015f2:	2200      	movs	r2, #0
 80015f4:	2100      	movs	r1, #0
 80015f6:	201c      	movs	r0, #28
 80015f8:	f001 fe55 	bl	80032a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80015fc:	201c      	movs	r0, #28
 80015fe:	f001 fe6e 	bl	80032de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001602:	bf00      	nop
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40021000 	.word	0x40021000

08001610 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b088      	sub	sp, #32
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001618:	f107 030c 	add.w	r3, r7, #12
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001630:	d11c      	bne.n	800166c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001632:	4b10      	ldr	r3, [pc, #64]	; (8001674 <HAL_TIM_MspPostInit+0x64>)
 8001634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <HAL_TIM_MspPostInit+0x64>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800163e:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <HAL_TIM_MspPostInit+0x64>)
 8001640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60bb      	str	r3, [r7, #8]
 8001648:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 800164a:	2320      	movs	r3, #32
 800164c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164e:	2302      	movs	r3, #2
 8001650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001656:	2300      	movs	r3, #0
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800165a:	2301      	movs	r3, #1
 800165c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 030c 	add.w	r3, r7, #12
 8001662:	4619      	mov	r1, r3
 8001664:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001668:	f002 f89a 	bl	80037a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800166c:	bf00      	nop
 800166e:	3720      	adds	r7, #32
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	40021000 	.word	0x40021000

08001678 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800167c:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <MX_USART2_UART_Init+0x5c>)
 8001680:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001684:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001688:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800168a:	4b11      	ldr	r3, [pc, #68]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001690:	4b0f      	ldr	r3, [pc, #60]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 800169e:	220c      	movs	r2, #12
 80016a0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016a8:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b4:	4b06      	ldr	r3, [pc, #24]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ba:	4805      	ldr	r0, [pc, #20]	; (80016d0 <MX_USART2_UART_Init+0x58>)
 80016bc:	f005 fe16 	bl	80072ec <HAL_UART_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80016c6:	f7ff fe27 	bl	8001318 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	200002bc 	.word	0x200002bc
 80016d4:	40004400 	.word	0x40004400

080016d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b09e      	sub	sp, #120	; 0x78
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80016e4:	2200      	movs	r2, #0
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	605a      	str	r2, [r3, #4]
 80016ea:	609a      	str	r2, [r3, #8]
 80016ec:	60da      	str	r2, [r3, #12]
 80016ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80016f0:	f107 0310 	add.w	r3, r7, #16
 80016f4:	2254      	movs	r2, #84	; 0x54
 80016f6:	2100      	movs	r1, #0
 80016f8:	4618      	mov	r0, r3
 80016fa:	f006 fb31 	bl	8007d60 <memset>
  if(uartHandle->Instance==USART2)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a28      	ldr	r2, [pc, #160]	; (80017a4 <HAL_UART_MspInit+0xcc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d148      	bne.n	800179a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001708:	2302      	movs	r3, #2
 800170a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800170c:	2300      	movs	r3, #0
 800170e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001710:	f107 0310 	add.w	r3, r7, #16
 8001714:	4618      	mov	r0, r3
 8001716:	f004 fbcb 	bl	8005eb0 <HAL_RCCEx_PeriphCLKConfig>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001720:	f7ff fdfa 	bl	8001318 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	4a1f      	ldr	r2, [pc, #124]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 800172a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172e:	6593      	str	r3, [r2, #88]	; 0x58
 8001730:	4b1d      	ldr	r3, [pc, #116]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 8001732:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001734:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001738:	60fb      	str	r3, [r7, #12]
 800173a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173c:	4b1a      	ldr	r3, [pc, #104]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 800173e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001740:	4a19      	ldr	r2, [pc, #100]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 8001742:	f043 0301 	orr.w	r3, r3, #1
 8001746:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001748:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <HAL_UART_MspInit+0xd0>)
 800174a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	60bb      	str	r3, [r7, #8]
 8001752:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001754:	2304      	movs	r3, #4
 8001756:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001758:	2302      	movs	r3, #2
 800175a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175c:	2300      	movs	r3, #0
 800175e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001760:	2303      	movs	r3, #3
 8001762:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001764:	2307      	movs	r3, #7
 8001766:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001768:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800176c:	4619      	mov	r1, r3
 800176e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001772:	f002 f815 	bl	80037a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001776:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800177a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800177c:	2302      	movs	r3, #2
 800177e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001784:	2303      	movs	r3, #3
 8001786:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001788:	2303      	movs	r3, #3
 800178a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800178c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001790:	4619      	mov	r1, r3
 8001792:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001796:	f002 f803 	bl	80037a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800179a:	bf00      	nop
 800179c:	3778      	adds	r7, #120	; 0x78
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	40004400 	.word	0x40004400
 80017a8:	40021000 	.word	0x40021000

080017ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017b0:	f7ff fe82 	bl	80014b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b4:	480c      	ldr	r0, [pc, #48]	; (80017e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80017b6:	490d      	ldr	r1, [pc, #52]	; (80017ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80017b8:	4a0d      	ldr	r2, [pc, #52]	; (80017f0 <LoopForever+0xe>)
  movs r3, #0
 80017ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017bc:	e002      	b.n	80017c4 <LoopCopyDataInit>

080017be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c2:	3304      	adds	r3, #4

080017c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c8:	d3f9      	bcc.n	80017be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ca:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80017cc:	4c0a      	ldr	r4, [pc, #40]	; (80017f8 <LoopForever+0x16>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d0:	e001      	b.n	80017d6 <LoopFillZerobss>

080017d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d4:	3204      	adds	r2, #4

080017d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d8:	d3fb      	bcc.n	80017d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017da:	f006 facf 	bl	8007d7c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017de:	f7ff fd03 	bl	80011e8 <main>

080017e2 <LoopForever>:

LoopForever:
    b LoopForever
 80017e2:	e7fe      	b.n	80017e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80017e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017ec:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80017f0:	08008774 	.word	0x08008774
  ldr r2, =_sbss
 80017f4:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80017f8:	20000490 	.word	0x20000490

080017fc <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017fc:	e7fe      	b.n	80017fc <CAN1_RX0_IRQHandler>

080017fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001804:	2300      	movs	r3, #0
 8001806:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001808:	2003      	movs	r0, #3
 800180a:	f001 fd41 	bl	8003290 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800180e:	2000      	movs	r0, #0
 8001810:	f000 f80e 	bl	8001830 <HAL_InitTick>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d002      	beq.n	8001820 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	71fb      	strb	r3, [r7, #7]
 800181e:	e001      	b.n	8001824 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001820:	f7ff fd80 	bl	8001324 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001824:	79fb      	ldrb	r3, [r7, #7]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3708      	adds	r7, #8
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001838:	2300      	movs	r3, #0
 800183a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_InitTick+0x6c>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d023      	beq.n	800188c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001844:	4b16      	ldr	r3, [pc, #88]	; (80018a0 <HAL_InitTick+0x70>)
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_InitTick+0x6c>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	4619      	mov	r1, r3
 800184e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001852:	fbb3 f3f1 	udiv	r3, r3, r1
 8001856:	fbb2 f3f3 	udiv	r3, r2, r3
 800185a:	4618      	mov	r0, r3
 800185c:	f001 fd4d 	bl	80032fa <HAL_SYSTICK_Config>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d10f      	bne.n	8001886 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2b0f      	cmp	r3, #15
 800186a:	d809      	bhi.n	8001880 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800186c:	2200      	movs	r2, #0
 800186e:	6879      	ldr	r1, [r7, #4]
 8001870:	f04f 30ff 	mov.w	r0, #4294967295
 8001874:	f001 fd17 	bl	80032a6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001878:	4a0a      	ldr	r2, [pc, #40]	; (80018a4 <HAL_InitTick+0x74>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	e007      	b.n	8001890 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	73fb      	strb	r3, [r7, #15]
 8001884:	e004      	b.n	8001890 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	73fb      	strb	r3, [r7, #15]
 800188a:	e001      	b.n	8001890 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001890:	7bfb      	ldrb	r3, [r7, #15]
}
 8001892:	4618      	mov	r0, r3
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	2000000c 	.word	0x2000000c
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000008 	.word	0x20000008

080018a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <HAL_IncTick+0x20>)
 80018ae:	781b      	ldrb	r3, [r3, #0]
 80018b0:	461a      	mov	r2, r3
 80018b2:	4b06      	ldr	r3, [pc, #24]	; (80018cc <HAL_IncTick+0x24>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4413      	add	r3, r2
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <HAL_IncTick+0x24>)
 80018ba:	6013      	str	r3, [r2, #0]
}
 80018bc:	bf00      	nop
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	2000000c 	.word	0x2000000c
 80018cc:	20000344 	.word	0x20000344

080018d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return uwTick;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <HAL_GetTick+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20000344 	.word	0x20000344

080018e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b084      	sub	sp, #16
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018f0:	f7ff ffee 	bl	80018d0 <HAL_GetTick>
 80018f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001900:	d005      	beq.n	800190e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_Delay+0x44>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	461a      	mov	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800190e:	bf00      	nop
 8001910:	f7ff ffde 	bl	80018d0 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	429a      	cmp	r2, r3
 800191e:	d8f7      	bhi.n	8001910 <HAL_Delay+0x28>
  {
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	2000000c 	.word	0x2000000c

08001930 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	431a      	orrs	r2, r3
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	609a      	str	r2, [r3, #8]
}
 800194a:	bf00      	nop
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
 800195e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	609a      	str	r2, [r3, #8]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800197c:	b480      	push	{r7}
 800197e:	b083      	sub	sp, #12
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001998:	b480      	push	{r7}
 800199a:	b087      	sub	sp, #28
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
 80019a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	3360      	adds	r3, #96	; 0x60
 80019aa:	461a      	mov	r2, r3
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b08      	ldr	r3, [pc, #32]	; (80019dc <LL_ADC_SetOffset+0x44>)
 80019ba:	4013      	ands	r3, r2
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019c2:	683a      	ldr	r2, [r7, #0]
 80019c4:	430a      	orrs	r2, r1
 80019c6:	4313      	orrs	r3, r2
 80019c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019d0:	bf00      	nop
 80019d2:	371c      	adds	r7, #28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019da:	4770      	bx	lr
 80019dc:	03fff000 	.word	0x03fff000

080019e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3360      	adds	r3, #96	; 0x60
 80019ee:	461a      	mov	r2, r3
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b087      	sub	sp, #28
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	3360      	adds	r3, #96	; 0x60
 8001a1c:	461a      	mov	r2, r3
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	431a      	orrs	r2, r3
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a36:	bf00      	nop
 8001a38:	371c      	adds	r7, #28
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr

08001a42 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001a42:	b480      	push	{r7}
 8001a44:	b083      	sub	sp, #12
 8001a46:	af00      	add	r7, sp, #0
 8001a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d101      	bne.n	8001a5a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3330      	adds	r3, #48	; 0x30
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0a1b      	lsrs	r3, r3, #8
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f003 030c 	and.w	r3, r3, #12
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f003 031f 	and.w	r3, r3, #31
 8001a92:	211f      	movs	r1, #31
 8001a94:	fa01 f303 	lsl.w	r3, r1, r3
 8001a98:	43db      	mvns	r3, r3
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	0e9b      	lsrs	r3, r3, #26
 8001aa0:	f003 011f 	and.w	r1, r3, #31
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	f003 031f 	and.w	r3, r3, #31
 8001aaa:	fa01 f303 	lsl.w	r3, r1, r3
 8001aae:	431a      	orrs	r2, r3
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ab4:	bf00      	nop
 8001ab6:	371c      	adds	r7, #28
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001acc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e000      	b.n	8001ada <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr

08001ae6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	b087      	sub	sp, #28
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	60f8      	str	r0, [r7, #12]
 8001aee:	60b9      	str	r1, [r7, #8]
 8001af0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	3314      	adds	r3, #20
 8001af6:	461a      	mov	r2, r3
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	0e5b      	lsrs	r3, r3, #25
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	4413      	add	r3, r2
 8001b04:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	0d1b      	lsrs	r3, r3, #20
 8001b0e:	f003 031f 	and.w	r3, r3, #31
 8001b12:	2107      	movs	r1, #7
 8001b14:	fa01 f303 	lsl.w	r3, r1, r3
 8001b18:	43db      	mvns	r3, r3
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0d1b      	lsrs	r3, r3, #20
 8001b20:	f003 031f 	and.w	r3, r3, #31
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b30:	bf00      	nop
 8001b32:	371c      	adds	r7, #28
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr

08001b3c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b54:	43db      	mvns	r3, r3
 8001b56:	401a      	ands	r2, r3
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0318 	and.w	r3, r3, #24
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001b60:	40d9      	lsrs	r1, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	400b      	ands	r3, r1
 8001b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001b6a:	431a      	orrs	r2, r3
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	0007ffff 	.word	0x0007ffff

08001b84 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001b94:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6093      	str	r3, [r2, #8]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001bb8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001bbc:	d101      	bne.n	8001bc2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e000      	b.n	8001bc4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr

08001bd0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001be0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001be4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001bec:	bf00      	nop
 8001bee:	370c      	adds	r7, #12
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c0c:	d101      	bne.n	8001c12 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e000      	b.n	8001c14 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c34:	f043 0201 	orr.w	r2, r3, #1
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	f003 0301 	and.w	r3, r3, #1
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d101      	bne.n	8001c60 <LL_ADC_IsEnabled+0x18>
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	e000      	b.n	8001c62 <LL_ADC_IsEnabled+0x1a>
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c82:	f043 0204 	orr.w	r2, r3, #4
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f003 0304 	and.w	r3, r3, #4
 8001ca6:	2b04      	cmp	r3, #4
 8001ca8:	d101      	bne.n	8001cae <LL_ADC_REG_IsConversionOngoing+0x18>
 8001caa:	2301      	movs	r3, #1
 8001cac:	e000      	b.n	8001cb0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cae:	2300      	movs	r3, #0
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f003 0308 	and.w	r3, r3, #8
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d101      	bne.n	8001cd4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e000      	b.n	8001cd6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b088      	sub	sp, #32
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d101      	bne.n	8001cfe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e126      	b.n	8001f4c <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d109      	bne.n	8001d20 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f7fe ffc3 	bl	8000c98 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2200      	movs	r2, #0
 8001d16:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff ff3f 	bl	8001ba8 <LL_ADC_IsDeepPowerDownEnabled>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d004      	beq.n	8001d3a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ff25 	bl	8001b84 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ff5a 	bl	8001bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d115      	bne.n	8001d76 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff ff3e 	bl	8001bd0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d54:	4b7f      	ldr	r3, [pc, #508]	; (8001f54 <HAL_ADC_Init+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	099b      	lsrs	r3, r3, #6
 8001d5a:	4a7f      	ldr	r2, [pc, #508]	; (8001f58 <HAL_ADC_Init+0x274>)
 8001d5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d60:	099b      	lsrs	r3, r3, #6
 8001d62:	3301      	adds	r3, #1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d68:	e002      	b.n	8001d70 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f9      	bne.n	8001d6a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff ff3c 	bl	8001bf8 <LL_ADC_IsInternalRegulatorEnabled>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d10d      	bne.n	8001da2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d8a:	f043 0210 	orr.w	r2, r3, #16
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d96:	f043 0201 	orr.w	r2, r3, #1
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d9e:	2301      	movs	r3, #1
 8001da0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7ff ff75 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001dac:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db2:	f003 0310 	and.w	r3, r3, #16
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	f040 80bf 	bne.w	8001f3a <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f040 80bb 	bne.w	8001f3a <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001dcc:	f043 0202 	orr.w	r2, r3, #2
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff ff35 	bl	8001c48 <LL_ADC_IsEnabled>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d10b      	bne.n	8001dfc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001de4:	485d      	ldr	r0, [pc, #372]	; (8001f5c <HAL_ADC_Init+0x278>)
 8001de6:	f7ff ff2f 	bl	8001c48 <LL_ADC_IsEnabled>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d105      	bne.n	8001dfc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	4619      	mov	r1, r3
 8001df6:	485a      	ldr	r0, [pc, #360]	; (8001f60 <HAL_ADC_Init+0x27c>)
 8001df8:	f7ff fd9a 	bl	8001930 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	7e5b      	ldrb	r3, [r3, #25]
 8001e00:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e06:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001e0c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001e12:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e1a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d106      	bne.n	8001e38 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2e:	3b01      	subs	r3, #1
 8001e30:	045b      	lsls	r3, r3, #17
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4313      	orrs	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d009      	beq.n	8001e54 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e44:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e4c:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	68da      	ldr	r2, [r3, #12]
 8001e5a:	4b42      	ldr	r3, [pc, #264]	; (8001f64 <HAL_ADC_Init+0x280>)
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6812      	ldr	r2, [r2, #0]
 8001e62:	69b9      	ldr	r1, [r7, #24]
 8001e64:	430b      	orrs	r3, r1
 8001e66:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff ff25 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 8001e72:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d13d      	bne.n	8001ef6 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d13a      	bne.n	8001ef6 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e84:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001e8c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e9c:	f023 0302 	bic.w	r3, r3, #2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	69b9      	ldr	r1, [r7, #24]
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d118      	bne.n	8001ee6 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	691b      	ldr	r3, [r3, #16]
 8001eba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	687a      	ldr	r2, [r7, #4]
 8001ec4:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001eca:	4311      	orrs	r1, r2
 8001ecc:	687a      	ldr	r2, [r7, #4]
 8001ece:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ed0:	4311      	orrs	r1, r2
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	431a      	orrs	r2, r3
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f042 0201 	orr.w	r2, r2, #1
 8001ee2:	611a      	str	r2, [r3, #16]
 8001ee4:	e007      	b.n	8001ef6 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	691b      	ldr	r3, [r3, #16]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	d10c      	bne.n	8001f18 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f04:	f023 010f 	bic.w	r1, r3, #15
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69db      	ldr	r3, [r3, #28]
 8001f0c:	1e5a      	subs	r2, r3, #1
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	430a      	orrs	r2, r1
 8001f14:	631a      	str	r2, [r3, #48]	; 0x30
 8001f16:	e007      	b.n	8001f28 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 020f 	bic.w	r2, r2, #15
 8001f26:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f2c:	f023 0303 	bic.w	r3, r3, #3
 8001f30:	f043 0201 	orr.w	r2, r3, #1
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
 8001f38:	e007      	b.n	8001f4a <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0210 	orr.w	r2, r3, #16
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f4a:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3720      	adds	r7, #32
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000004 	.word	0x20000004
 8001f58:	053e2d63 	.word	0x053e2d63
 8001f5c:	50040000 	.word	0x50040000
 8001f60:	50040300 	.word	0x50040300
 8001f64:	fff0c007 	.word	0xfff0c007

08001f68 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	60f8      	str	r0, [r7, #12]
 8001f70:	60b9      	str	r1, [r7, #8]
 8001f72:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fe8c 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d167      	bne.n	8002054 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d101      	bne.n	8001f92 <HAL_ADC_Start_DMA+0x2a>
 8001f8e:	2302      	movs	r3, #2
 8001f90:	e063      	b.n	800205a <HAL_ADC_Start_DMA+0xf2>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2201      	movs	r2, #1
 8001f96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f000 fe1c 	bl	8002bd8 <ADC_Enable>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d14f      	bne.n	800204a <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fb2:	f023 0301 	bic.w	r3, r3, #1
 8001fb6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d006      	beq.n	8001fd8 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	f023 0206 	bic.w	r2, r3, #6
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	659a      	str	r2, [r3, #88]	; 0x58
 8001fd6:	e002      	b.n	8001fde <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	4a20      	ldr	r2, [pc, #128]	; (8002064 <HAL_ADC_Start_DMA+0xfc>)
 8001fe4:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	4a1f      	ldr	r2, [pc, #124]	; (8002068 <HAL_ADC_Start_DMA+0x100>)
 8001fec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ff2:	4a1e      	ldr	r2, [pc, #120]	; (800206c <HAL_ADC_Start_DMA+0x104>)
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	221c      	movs	r2, #28
 8001ffc:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2200      	movs	r2, #0
 8002002:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f042 0210 	orr.w	r2, r2, #16
 8002014:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f042 0201 	orr.w	r2, r2, #1
 8002024:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3340      	adds	r3, #64	; 0x40
 8002030:	4619      	mov	r1, r3
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	f001 fa25 	bl	8003484 <HAL_DMA_Start_IT>
 800203a:	4603      	mov	r3, r0
 800203c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4618      	mov	r0, r3
 8002044:	f7ff fe13 	bl	8001c6e <LL_ADC_REG_StartConversion>
 8002048:	e006      	b.n	8002058 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002052:	e001      	b.n	8002058 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002054:	2302      	movs	r3, #2
 8002056:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002058:	7dfb      	ldrb	r3, [r7, #23]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3718      	adds	r7, #24
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	08002ce5 	.word	0x08002ce5
 8002068:	08002dbd 	.word	0x08002dbd
 800206c:	08002dd9 	.word	0x08002dd9

08002070 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b088      	sub	sp, #32
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002078:	2300      	movs	r3, #0
 800207a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800208c:	69bb      	ldr	r3, [r7, #24]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x56>
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0302 	and.w	r3, r3, #2
 800209c:	2b00      	cmp	r3, #0
 800209e:	d012      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d105      	bne.n	80020b8 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020b0:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f000 fecf 	bl	8002e5c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2202      	movs	r2, #2
 80020c4:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <HAL_ADC_IRQHandler+0x6a>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	f003 0304 	and.w	r3, r3, #4
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d109      	bne.n	80020ee <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d05e      	beq.n	80021a2 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d059      	beq.n	80021a2 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f2:	f003 0310 	and.w	r3, r3, #16
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d105      	bne.n	8002106 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff fc99 	bl	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d03e      	beq.n	8002194 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d135      	bne.n	8002194 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b08      	cmp	r3, #8
 8002134:	d12e      	bne.n	8002194 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4618      	mov	r0, r3
 800213c:	f7ff fdab 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002140:	4603      	mov	r3, r0
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11a      	bne.n	800217c <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 020c 	bic.w	r2, r2, #12
 8002154:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800215a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d112      	bne.n	8002194 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002172:	f043 0201 	orr.w	r2, r3, #1
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	655a      	str	r2, [r3, #84]	; 0x54
 800217a:	e00b      	b.n	8002194 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002180:	f043 0210 	orr.w	r2, r3, #16
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7fe fbad 	bl	80008f4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	220c      	movs	r2, #12
 80021a0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	f003 0320 	and.w	r3, r3, #32
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d004      	beq.n	80021b6 <HAL_ADC_IRQHandler+0x146>
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	f003 0320 	and.w	r3, r3, #32
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021b6:	69bb      	ldr	r3, [r7, #24]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d072      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d06d      	beq.n	80022a6 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ce:	f003 0310 	and.w	r3, r3, #16
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d105      	bne.n	80021e2 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021da:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f7ff fc6a 	bl	8001ac0 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80021ec:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff fc25 	bl	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f8:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d047      	beq.n	8002298 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d007      	beq.n	8002222 <HAL_ADC_IRQHandler+0x1b2>
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03f      	beq.n	8002298 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	d13a      	bne.n	8002298 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800222c:	2b40      	cmp	r3, #64	; 0x40
 800222e:	d133      	bne.n	8002298 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d12e      	bne.n	8002298 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff fd3c 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d11a      	bne.n	8002280 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	685a      	ldr	r2, [r3, #4]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002258:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800225e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226e:	2b00      	cmp	r3, #0
 8002270:	d112      	bne.n	8002298 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002276:	f043 0201 	orr.w	r2, r3, #1
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
 800227e:	e00b      	b.n	8002298 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002284:	f043 0210 	orr.w	r2, r3, #16
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002290:	f043 0201 	orr.w	r2, r3, #1
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f000 fdb7 	bl	8002e0c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2260      	movs	r2, #96	; 0x60
 80022a4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d011      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x264>
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00c      	beq.n	80022d4 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f000 f890 	bl	80023ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80022d4:	69bb      	ldr	r3, [r7, #24]
 80022d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d012      	beq.n	8002304 <HAL_ADC_IRQHandler+0x294>
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00d      	beq.n	8002304 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ec:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	f000 fd9d 	bl	8002e34 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002302:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800230a:	2b00      	cmp	r3, #0
 800230c:	d012      	beq.n	8002334 <HAL_ADC_IRQHandler+0x2c4>
 800230e:	697b      	ldr	r3, [r7, #20]
 8002310:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002314:	2b00      	cmp	r3, #0
 8002316:	d00d      	beq.n	8002334 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800231c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f000 fd8f 	bl	8002e48 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002332:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	d02a      	beq.n	8002394 <HAL_ADC_IRQHandler+0x324>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0310 	and.w	r3, r3, #16
 8002344:	2b00      	cmp	r3, #0
 8002346:	d025      	beq.n	8002394 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800234c:	2b00      	cmp	r3, #0
 800234e:	d102      	bne.n	8002356 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002350:	2301      	movs	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	e008      	b.n	8002368 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	68db      	ldr	r3, [r3, #12]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002364:	2301      	movs	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10e      	bne.n	800238c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002372:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f043 0202 	orr.w	r2, r3, #2
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f000 f83a 	bl	8002400 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	d018      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x360>
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d013      	beq.n	80023d0 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ac:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	f043 0208 	orr.w	r2, r3, #8
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c8:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f000 fd28 	bl	8002e20 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80023d0:	bf00      	nop
 80023d2:	3720      	adds	r7, #32
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b083      	sub	sp, #12
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002408:	bf00      	nop
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b0b6      	sub	sp, #216	; 0xd8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x22>
 8002432:	2302      	movs	r3, #2
 8002434:	e3bb      	b.n	8002bae <HAL_ADC_ConfigChannel+0x79a>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fc27 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 83a0 	bne.w	8002b90 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b05      	cmp	r3, #5
 800245e:	d824      	bhi.n	80024aa <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	3b02      	subs	r3, #2
 8002466:	2b03      	cmp	r3, #3
 8002468:	d81b      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x8e>
 800246a:	a201      	add	r2, pc, #4	; (adr r2, 8002470 <HAL_ADC_ConfigChannel+0x5c>)
 800246c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002470:	08002481 	.word	0x08002481
 8002474:	08002489 	.word	0x08002489
 8002478:	08002491 	.word	0x08002491
 800247c:	08002499 	.word	0x08002499
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002480:	230c      	movs	r3, #12
 8002482:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002486:	e010      	b.n	80024aa <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002488:	2312      	movs	r3, #18
 800248a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 800248e:	e00c      	b.n	80024aa <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002490:	2318      	movs	r3, #24
 8002492:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8002496:	e008      	b.n	80024aa <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002498:	f44f 7380 	mov.w	r3, #256	; 0x100
 800249c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024a0:	e003      	b.n	80024aa <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 80024a2:	2306      	movs	r3, #6
 80024a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 80024a8:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6818      	ldr	r0, [r3, #0]
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80024b8:	f7ff fad6 	bl	8001a68 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fbe8 	bl	8001c96 <LL_ADC_REG_IsConversionOngoing>
 80024c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff fbf4 	bl	8001cbc <LL_ADC_INJ_IsConversionOngoing>
 80024d4:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80024d8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f040 81a4 	bne.w	800282a <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80024e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f040 819f 	bne.w	800282a <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6818      	ldr	r0, [r3, #0]
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	6819      	ldr	r1, [r3, #0]
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	461a      	mov	r2, r3
 80024fa:	f7ff faf4 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	695a      	ldr	r2, [r3, #20]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	08db      	lsrs	r3, r3, #3
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	fa02 f303 	lsl.w	r3, r2, r3
 8002514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	2b04      	cmp	r3, #4
 800251e:	d00a      	beq.n	8002536 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6818      	ldr	r0, [r3, #0]
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	6919      	ldr	r1, [r3, #16]
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002530:	f7ff fa32 	bl	8001998 <LL_ADC_SetOffset>
 8002534:	e179      	b.n	800282a <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2100      	movs	r1, #0
 800253c:	4618      	mov	r0, r3
 800253e:	f7ff fa4f 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002542:	4603      	mov	r3, r0
 8002544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10a      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x14e>
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2100      	movs	r1, #0
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fa44 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002558:	4603      	mov	r3, r0
 800255a:	0e9b      	lsrs	r3, r3, #26
 800255c:	f003 021f 	and.w	r2, r3, #31
 8002560:	e01e      	b.n	80025a0 <HAL_ADC_ConfigChannel+0x18c>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2100      	movs	r1, #0
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff fa39 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800256e:	4603      	mov	r3, r0
 8002570:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002574:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002578:	fa93 f3a3 	rbit	r3, r3
 800257c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002580:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002584:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002588:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8002590:	2320      	movs	r3, #32
 8002592:	e004      	b.n	800259e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8002594:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d105      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x1a4>
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	0e9b      	lsrs	r3, r3, #26
 80025b2:	f003 031f 	and.w	r3, r3, #31
 80025b6:	e018      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1d6>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80025c4:	fa93 f3a3 	rbit	r3, r3
 80025c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 80025cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80025d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 80025d4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 80025dc:	2320      	movs	r3, #32
 80025de:	e004      	b.n	80025ea <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 80025e0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80025e4:	fab3 f383 	clz	r3, r3
 80025e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d106      	bne.n	80025fc <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	2200      	movs	r2, #0
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7ff fa08 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2101      	movs	r1, #1
 8002602:	4618      	mov	r0, r3
 8002604:	f7ff f9ec 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002608:	4603      	mov	r3, r0
 800260a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10a      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x214>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	2101      	movs	r1, #1
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f9e1 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800261e:	4603      	mov	r3, r0
 8002620:	0e9b      	lsrs	r3, r3, #26
 8002622:	f003 021f 	and.w	r2, r3, #31
 8002626:	e01e      	b.n	8002666 <HAL_ADC_ConfigChannel+0x252>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2101      	movs	r1, #1
 800262e:	4618      	mov	r0, r3
 8002630:	f7ff f9d6 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 8002634:	4603      	mov	r3, r0
 8002636:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800263e:	fa93 f3a3 	rbit	r3, r3
 8002642:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8002646:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800264a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 800264e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002652:	2b00      	cmp	r3, #0
 8002654:	d101      	bne.n	800265a <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8002656:	2320      	movs	r3, #32
 8002658:	e004      	b.n	8002664 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 800265a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800265e:	fab3 f383 	clz	r3, r3
 8002662:	b2db      	uxtb	r3, r3
 8002664:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800266e:	2b00      	cmp	r3, #0
 8002670:	d105      	bne.n	800267e <HAL_ADC_ConfigChannel+0x26a>
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0e9b      	lsrs	r3, r3, #26
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	e018      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x29c>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002686:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800268a:	fa93 f3a3 	rbit	r3, r3
 800268e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002692:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002696:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800269a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e004      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 80026a6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026aa:	fab3 f383 	clz	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d106      	bne.n	80026c2 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2200      	movs	r2, #0
 80026ba:	2101      	movs	r1, #1
 80026bc:	4618      	mov	r0, r3
 80026be:	f7ff f9a5 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2102      	movs	r1, #2
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7ff f989 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80026ce:	4603      	mov	r3, r0
 80026d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d10a      	bne.n	80026ee <HAL_ADC_ConfigChannel+0x2da>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	2102      	movs	r1, #2
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff f97e 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80026e4:	4603      	mov	r3, r0
 80026e6:	0e9b      	lsrs	r3, r3, #26
 80026e8:	f003 021f 	and.w	r2, r3, #31
 80026ec:	e01e      	b.n	800272c <HAL_ADC_ConfigChannel+0x318>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2102      	movs	r1, #2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7ff f973 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80026fa:	4603      	mov	r3, r0
 80026fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002700:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002704:	fa93 f3a3 	rbit	r3, r3
 8002708:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800270c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002714:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002718:	2b00      	cmp	r3, #0
 800271a:	d101      	bne.n	8002720 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800271c:	2320      	movs	r3, #32
 800271e:	e004      	b.n	800272a <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8002720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002734:	2b00      	cmp	r3, #0
 8002736:	d105      	bne.n	8002744 <HAL_ADC_ConfigChannel+0x330>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	0e9b      	lsrs	r3, r3, #26
 800273e:	f003 031f 	and.w	r3, r3, #31
 8002742:	e014      	b.n	800276e <HAL_ADC_ConfigChannel+0x35a>
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800274c:	fa93 f3a3 	rbit	r3, r3
 8002750:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002752:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002754:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8002758:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002760:	2320      	movs	r3, #32
 8002762:	e004      	b.n	800276e <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002768:	fab3 f383 	clz	r3, r3
 800276c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800276e:	429a      	cmp	r2, r3
 8002770:	d106      	bne.n	8002780 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2200      	movs	r2, #0
 8002778:	2102      	movs	r1, #2
 800277a:	4618      	mov	r0, r3
 800277c:	f7ff f946 	bl	8001a0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	2103      	movs	r1, #3
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f92a 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 800278c:	4603      	mov	r3, r0
 800278e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10a      	bne.n	80027ac <HAL_ADC_ConfigChannel+0x398>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2103      	movs	r1, #3
 800279c:	4618      	mov	r0, r3
 800279e:	f7ff f91f 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027a2:	4603      	mov	r3, r0
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	f003 021f 	and.w	r2, r3, #31
 80027aa:	e017      	b.n	80027dc <HAL_ADC_ConfigChannel+0x3c8>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2103      	movs	r1, #3
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7ff f914 	bl	80019e0 <LL_ADC_GetOffsetChannel>
 80027b8:	4603      	mov	r3, r0
 80027ba:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80027be:	fa93 f3a3 	rbit	r3, r3
 80027c2:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80027c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c6:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 80027c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d101      	bne.n	80027d2 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80027ce:	2320      	movs	r3, #32
 80027d0:	e003      	b.n	80027da <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80027d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027d4:	fab3 f383 	clz	r3, r3
 80027d8:	b2db      	uxtb	r3, r3
 80027da:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d105      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x3e0>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	e011      	b.n	8002818 <HAL_ADC_ConfigChannel+0x404>
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027fc:	fa93 f3a3 	rbit	r3, r3
 8002800:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002802:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002804:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002806:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002808:	2b00      	cmp	r3, #0
 800280a:	d101      	bne.n	8002810 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800280c:	2320      	movs	r3, #32
 800280e:	e003      	b.n	8002818 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002810:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002812:	fab3 f383 	clz	r3, r3
 8002816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002818:	429a      	cmp	r2, r3
 800281a:	d106      	bne.n	800282a <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2200      	movs	r2, #0
 8002822:	2103      	movs	r1, #3
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff f8f1 	bl	8001a0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4618      	mov	r0, r3
 8002830:	f7ff fa0a 	bl	8001c48 <LL_ADC_IsEnabled>
 8002834:	4603      	mov	r3, r0
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8140 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6818      	ldr	r0, [r3, #0]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	6819      	ldr	r1, [r3, #0]
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	68db      	ldr	r3, [r3, #12]
 8002848:	461a      	mov	r2, r3
 800284a:	f7ff f977 	bl	8001b3c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a8f      	ldr	r2, [pc, #572]	; (8002a90 <HAL_ADC_ConfigChannel+0x67c>)
 8002854:	4293      	cmp	r3, r2
 8002856:	f040 8131 	bne.w	8002abc <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002866:	2b00      	cmp	r3, #0
 8002868:	d10b      	bne.n	8002882 <HAL_ADC_ConfigChannel+0x46e>
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	0e9b      	lsrs	r3, r3, #26
 8002870:	3301      	adds	r3, #1
 8002872:	f003 031f 	and.w	r3, r3, #31
 8002876:	2b09      	cmp	r3, #9
 8002878:	bf94      	ite	ls
 800287a:	2301      	movls	r3, #1
 800287c:	2300      	movhi	r3, #0
 800287e:	b2db      	uxtb	r3, r3
 8002880:	e019      	b.n	80028b6 <HAL_ADC_ConfigChannel+0x4a2>
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800288a:	fa93 f3a3 	rbit	r3, r3
 800288e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002890:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002892:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002894:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800289a:	2320      	movs	r3, #32
 800289c:	e003      	b.n	80028a6 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800289e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028a0:	fab3 f383 	clz	r3, r3
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	3301      	adds	r3, #1
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	2b09      	cmp	r3, #9
 80028ae:	bf94      	ite	ls
 80028b0:	2301      	movls	r3, #1
 80028b2:	2300      	movhi	r3, #0
 80028b4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d079      	beq.n	80029ae <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d107      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x4c2>
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	0e9b      	lsrs	r3, r3, #26
 80028cc:	3301      	adds	r3, #1
 80028ce:	069b      	lsls	r3, r3, #26
 80028d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028d4:	e015      	b.n	8002902 <HAL_ADC_ConfigChannel+0x4ee>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028de:	fa93 f3a3 	rbit	r3, r3
 80028e2:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80028e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80028e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80028ee:	2320      	movs	r3, #32
 80028f0:	e003      	b.n	80028fa <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80028f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028f4:	fab3 f383 	clz	r3, r3
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	3301      	adds	r3, #1
 80028fc:	069b      	lsls	r3, r3, #26
 80028fe:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800290a:	2b00      	cmp	r3, #0
 800290c:	d109      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x50e>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	0e9b      	lsrs	r3, r3, #26
 8002914:	3301      	adds	r3, #1
 8002916:	f003 031f 	and.w	r3, r3, #31
 800291a:	2101      	movs	r1, #1
 800291c:	fa01 f303 	lsl.w	r3, r1, r3
 8002920:	e017      	b.n	8002952 <HAL_ADC_ConfigChannel+0x53e>
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800292a:	fa93 f3a3 	rbit	r3, r3
 800292e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002930:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002932:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002934:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800293a:	2320      	movs	r3, #32
 800293c:	e003      	b.n	8002946 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 800293e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002940:	fab3 f383 	clz	r3, r3
 8002944:	b2db      	uxtb	r3, r3
 8002946:	3301      	adds	r3, #1
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	2101      	movs	r1, #1
 800294e:	fa01 f303 	lsl.w	r3, r1, r3
 8002952:	ea42 0103 	orr.w	r1, r2, r3
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800295e:	2b00      	cmp	r3, #0
 8002960:	d10a      	bne.n	8002978 <HAL_ADC_ConfigChannel+0x564>
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	0e9b      	lsrs	r3, r3, #26
 8002968:	3301      	adds	r3, #1
 800296a:	f003 021f 	and.w	r2, r3, #31
 800296e:	4613      	mov	r3, r2
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	4413      	add	r3, r2
 8002974:	051b      	lsls	r3, r3, #20
 8002976:	e018      	b.n	80029aa <HAL_ADC_ConfigChannel+0x596>
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002980:	fa93 f3a3 	rbit	r3, r3
 8002984:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800298a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002990:	2320      	movs	r3, #32
 8002992:	e003      	b.n	800299c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002996:	fab3 f383 	clz	r3, r3
 800299a:	b2db      	uxtb	r3, r3
 800299c:	3301      	adds	r3, #1
 800299e:	f003 021f 	and.w	r2, r3, #31
 80029a2:	4613      	mov	r3, r2
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	4413      	add	r3, r2
 80029a8:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80029aa:	430b      	orrs	r3, r1
 80029ac:	e081      	b.n	8002ab2 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d107      	bne.n	80029ca <HAL_ADC_ConfigChannel+0x5b6>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	0e9b      	lsrs	r3, r3, #26
 80029c0:	3301      	adds	r3, #1
 80029c2:	069b      	lsls	r3, r3, #26
 80029c4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029c8:	e015      	b.n	80029f6 <HAL_ADC_ConfigChannel+0x5e2>
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029d2:	fa93 f3a3 	rbit	r3, r3
 80029d6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80029d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80029dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80029e2:	2320      	movs	r3, #32
 80029e4:	e003      	b.n	80029ee <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80029e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029e8:	fab3 f383 	clz	r3, r3
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	3301      	adds	r3, #1
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d109      	bne.n	8002a16 <HAL_ADC_ConfigChannel+0x602>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	0e9b      	lsrs	r3, r3, #26
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f003 031f 	and.w	r3, r3, #31
 8002a0e:	2101      	movs	r1, #1
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	e017      	b.n	8002a46 <HAL_ADC_ConfigChannel+0x632>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	fa93 f3a3 	rbit	r3, r3
 8002a22:	61bb      	str	r3, [r7, #24]
  return result;
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002a28:	6a3b      	ldr	r3, [r7, #32]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002a2e:	2320      	movs	r3, #32
 8002a30:	e003      	b.n	8002a3a <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	fab3 f383 	clz	r3, r3
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	f003 031f 	and.w	r3, r3, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f303 	lsl.w	r3, r1, r3
 8002a46:	ea42 0103 	orr.w	r1, r2, r3
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d10d      	bne.n	8002a72 <HAL_ADC_ConfigChannel+0x65e>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	0e9b      	lsrs	r3, r3, #26
 8002a5c:	3301      	adds	r3, #1
 8002a5e:	f003 021f 	and.w	r2, r3, #31
 8002a62:	4613      	mov	r3, r2
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	4413      	add	r3, r2
 8002a68:	3b1e      	subs	r3, #30
 8002a6a:	051b      	lsls	r3, r3, #20
 8002a6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a70:	e01e      	b.n	8002ab0 <HAL_ADC_ConfigChannel+0x69c>
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a78:	693b      	ldr	r3, [r7, #16]
 8002a7a:	fa93 f3a3 	rbit	r3, r3
 8002a7e:	60fb      	str	r3, [r7, #12]
  return result;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 8002a8a:	2320      	movs	r3, #32
 8002a8c:	e006      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x688>
 8002a8e:	bf00      	nop
 8002a90:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	fab3 f383 	clz	r3, r3
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f003 021f 	and.w	r2, r3, #31
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	005b      	lsls	r3, r3, #1
 8002aa6:	4413      	add	r3, r2
 8002aa8:	3b1e      	subs	r3, #30
 8002aaa:	051b      	lsls	r3, r3, #20
 8002aac:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab0:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002ab2:	683a      	ldr	r2, [r7, #0]
 8002ab4:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	f7ff f815 	bl	8001ae6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	4b3d      	ldr	r3, [pc, #244]	; (8002bb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d06c      	beq.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ac8:	483c      	ldr	r0, [pc, #240]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a8>)
 8002aca:	f7fe ff57 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002ace:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3a      	ldr	r2, [pc, #232]	; (8002bc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d127      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002adc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d121      	bne.n	8002b2c <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a35      	ldr	r2, [pc, #212]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d157      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002af2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002af6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002afa:	4619      	mov	r1, r3
 8002afc:	482f      	ldr	r0, [pc, #188]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a8>)
 8002afe:	f7fe ff2a 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	099b      	lsrs	r3, r3, #6
 8002b08:	4a30      	ldr	r2, [pc, #192]	; (8002bcc <HAL_ADC_ConfigChannel+0x7b8>)
 8002b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	1c5a      	adds	r2, r3, #1
 8002b12:	4613      	mov	r3, r2
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b1c:	e002      	b.n	8002b24 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	3b01      	subs	r3, #1
 8002b22:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d1f9      	bne.n	8002b1e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002b2a:	e03a      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a27      	ldr	r2, [pc, #156]	; (8002bd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d113      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002b36:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a1f      	ldr	r2, [pc, #124]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d12a      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b4c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b54:	4619      	mov	r1, r3
 8002b56:	4819      	ldr	r0, [pc, #100]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a8>)
 8002b58:	f7fe fefd 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002b5c:	e021      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_ADC_ConfigChannel+0x7c0>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d11c      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002b68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b6c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d116      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a12      	ldr	r2, [pc, #72]	; (8002bc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d111      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002b7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b86:	4619      	mov	r1, r3
 8002b88:	480c      	ldr	r0, [pc, #48]	; (8002bbc <HAL_ADC_ConfigChannel+0x7a8>)
 8002b8a:	f7fe fee4 	bl	8001956 <LL_ADC_SetCommonPathInternalCh>
 8002b8e:	e008      	b.n	8002ba2 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b94:	f043 0220 	orr.w	r2, r3, #32
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002baa:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	37d8      	adds	r7, #216	; 0xd8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	80080000 	.word	0x80080000
 8002bbc:	50040300 	.word	0x50040300
 8002bc0:	c7520000 	.word	0xc7520000
 8002bc4:	50040000 	.word	0x50040000
 8002bc8:	20000004 	.word	0x20000004
 8002bcc:	053e2d63 	.word	0x053e2d63
 8002bd0:	cb840000 	.word	0xcb840000
 8002bd4:	80000001 	.word	0x80000001

08002bd8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4618      	mov	r0, r3
 8002bea:	f7ff f82d 	bl	8001c48 <LL_ADC_IsEnabled>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d169      	bne.n	8002cc8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689a      	ldr	r2, [r3, #8]
 8002bfa:	4b36      	ldr	r3, [pc, #216]	; (8002cd4 <ADC_Enable+0xfc>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d00d      	beq.n	8002c1e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c06:	f043 0210 	orr.w	r2, r3, #16
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f043 0201 	orr.w	r2, r3, #1
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e055      	b.n	8002cca <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7fe fffc 	bl	8001c20 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c28:	482b      	ldr	r0, [pc, #172]	; (8002cd8 <ADC_Enable+0x100>)
 8002c2a:	f7fe fea7 	bl	800197c <LL_ADC_GetCommonPathInternalCh>
 8002c2e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002c30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d013      	beq.n	8002c60 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b28      	ldr	r3, [pc, #160]	; (8002cdc <ADC_Enable+0x104>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	4a28      	ldr	r2, [pc, #160]	; (8002ce0 <ADC_Enable+0x108>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	1c5a      	adds	r2, r3, #1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	005b      	lsls	r3, r3, #1
 8002c4c:	4413      	add	r3, r2
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c52:	e002      	b.n	8002c5a <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1f9      	bne.n	8002c54 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002c60:	f7fe fe36 	bl	80018d0 <HAL_GetTick>
 8002c64:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c66:	e028      	b.n	8002cba <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7fe ffeb 	bl	8001c48 <LL_ADC_IsEnabled>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d104      	bne.n	8002c82 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ffcf 	bl	8001c20 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002c82:	f7fe fe25 	bl	80018d0 <HAL_GetTick>
 8002c86:	4602      	mov	r2, r0
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	1ad3      	subs	r3, r2, r3
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d914      	bls.n	8002cba <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00d      	beq.n	8002cba <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ca2:	f043 0210 	orr.w	r2, r3, #16
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cae:	f043 0201 	orr.w	r2, r3, #1
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e007      	b.n	8002cca <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0301 	and.w	r3, r3, #1
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d1cf      	bne.n	8002c68 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	8000003f 	.word	0x8000003f
 8002cd8:	50040300 	.word	0x50040300
 8002cdc:	20000004 	.word	0x20000004
 8002ce0:	053e2d63 	.word	0x053e2d63

08002ce4 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cf6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d14b      	bne.n	8002d96 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d02:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d021      	beq.n	8002d5c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7fe fe90 	bl	8001a42 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d032      	beq.n	8002d8e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d12b      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d46:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d11f      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	f043 0201 	orr.w	r2, r3, #1
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
 8002d5a:	e018      	b.n	8002d8e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d111      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d105      	bne.n	8002d8e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d86:	f043 0201 	orr.w	r2, r3, #1
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002d8e:	68f8      	ldr	r0, [r7, #12]
 8002d90:	f7fd fdb0 	bl	80008f4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002d94:	e00e      	b.n	8002db4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f003 0310 	and.w	r3, r3, #16
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002da2:	68f8      	ldr	r0, [r7, #12]
 8002da4:	f7ff fb2c 	bl	8002400 <HAL_ADC_ErrorCallback>
}
 8002da8:	e004      	b.n	8002db4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	4798      	blx	r3
}
 8002db4:	bf00      	nop
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}

08002dbc <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b084      	sub	sp, #16
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f7ff fb04 	bl	80023d8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002dd0:	bf00      	nop
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}

08002dd8 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b084      	sub	sp, #16
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002df6:	f043 0204 	orr.w	r2, r3, #4
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002dfe:	68f8      	ldr	r0, [r7, #12]
 8002e00:	f7ff fafe 	bl	8002400 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002e04:	bf00      	nop
 8002e06:	3710      	adds	r7, #16
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e14:	bf00      	nop
 8002e16:	370c      	adds	r7, #12
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr

08002e20 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr

08002e34 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b083      	sub	sp, #12
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e3c:	bf00      	nop
 8002e3e:	370c      	adds	r7, #12
 8002e40:	46bd      	mov	sp, r7
 8002e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e46:	4770      	bx	lr

08002e48 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e50:	bf00      	nop
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e0ed      	b.n	800305e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d102      	bne.n	8002e94 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7fd ffdc 	bl	8000e4c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f042 0201 	orr.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ea4:	f7fe fd14 	bl	80018d0 <HAL_GetTick>
 8002ea8:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eaa:	e012      	b.n	8002ed2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002eac:	f7fe fd10 	bl	80018d0 <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	2b0a      	cmp	r3, #10
 8002eb8:	d90b      	bls.n	8002ed2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ebe:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2205      	movs	r2, #5
 8002eca:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e0c5      	b.n	800305e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0301 	and.w	r3, r3, #1
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d0e5      	beq.n	8002eac <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 0202 	bic.w	r2, r2, #2
 8002eee:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ef0:	f7fe fcee 	bl	80018d0 <HAL_GetTick>
 8002ef4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ef6:	e012      	b.n	8002f1e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002ef8:	f7fe fcea 	bl	80018d0 <HAL_GetTick>
 8002efc:	4602      	mov	r2, r0
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	2b0a      	cmp	r3, #10
 8002f04:	d90b      	bls.n	8002f1e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f0a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2205      	movs	r2, #5
 8002f16:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e09f      	b.n	800305e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 0302 	and.w	r3, r3, #2
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d1e5      	bne.n	8002ef8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	7e1b      	ldrb	r3, [r3, #24]
 8002f30:	2b01      	cmp	r3, #1
 8002f32:	d108      	bne.n	8002f46 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f42:	601a      	str	r2, [r3, #0]
 8002f44:	e007      	b.n	8002f56 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	7e5b      	ldrb	r3, [r3, #25]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d108      	bne.n	8002f70 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f6c:	601a      	str	r2, [r3, #0]
 8002f6e:	e007      	b.n	8002f80 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	7e9b      	ldrb	r3, [r3, #26]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d108      	bne.n	8002f9a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0220 	orr.w	r2, r2, #32
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	e007      	b.n	8002faa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f022 0220 	bic.w	r2, r2, #32
 8002fa8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	7edb      	ldrb	r3, [r3, #27]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d108      	bne.n	8002fc4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0210 	bic.w	r2, r2, #16
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e007      	b.n	8002fd4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f042 0210 	orr.w	r2, r2, #16
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	7f1b      	ldrb	r3, [r3, #28]
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d108      	bne.n	8002fee <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f042 0208 	orr.w	r2, r2, #8
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e007      	b.n	8002ffe <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0208 	bic.w	r2, r2, #8
 8002ffc:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	7f5b      	ldrb	r3, [r3, #29]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d108      	bne.n	8003018 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f042 0204 	orr.w	r2, r2, #4
 8003014:	601a      	str	r2, [r3, #0]
 8003016:	e007      	b.n	8003028 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f022 0204 	bic.w	r2, r2, #4
 8003026:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	431a      	orrs	r2, r3
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	ea42 0103 	orr.w	r1, r2, r3
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	1e5a      	subs	r2, r3, #1
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	430a      	orrs	r2, r1
 800304c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800305c:	2300      	movs	r3, #0
}
 800305e:	4618      	mov	r0, r3
 8003060:	3710      	adds	r7, #16
 8003062:	46bd      	mov	sp, r7
 8003064:	bd80      	pop	{r7, pc}

08003066 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003066:	b580      	push	{r7, lr}
 8003068:	b084      	sub	sp, #16
 800306a:	af00      	add	r7, sp, #0
 800306c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b01      	cmp	r3, #1
 8003078:	d12e      	bne.n	80030d8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2202      	movs	r2, #2
 800307e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0201 	bic.w	r2, r2, #1
 8003090:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003092:	f7fe fc1d 	bl	80018d0 <HAL_GetTick>
 8003096:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003098:	e012      	b.n	80030c0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800309a:	f7fe fc19 	bl	80018d0 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b0a      	cmp	r3, #10
 80030a6:	d90b      	bls.n	80030c0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ac:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2205      	movs	r2, #5
 80030b8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e012      	b.n	80030e6 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	f003 0301 	and.w	r3, r3, #1
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1e5      	bne.n	800309a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80030d4:	2300      	movs	r3, #0
 80030d6:	e006      	b.n	80030e6 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
  }
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3710      	adds	r7, #16
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}
	...

080030f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f003 0307 	and.w	r3, r3, #7
 80030fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003100:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003106:	68ba      	ldr	r2, [r7, #8]
 8003108:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800310c:	4013      	ands	r3, r2
 800310e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003118:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800311c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003120:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003122:	4a04      	ldr	r2, [pc, #16]	; (8003134 <__NVIC_SetPriorityGrouping+0x44>)
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	60d3      	str	r3, [r2, #12]
}
 8003128:	bf00      	nop
 800312a:	3714      	adds	r7, #20
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr
 8003134:	e000ed00 	.word	0xe000ed00

08003138 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800313c:	4b04      	ldr	r3, [pc, #16]	; (8003150 <__NVIC_GetPriorityGrouping+0x18>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 0307 	and.w	r3, r3, #7
}
 8003146:	4618      	mov	r0, r3
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	e000ed00 	.word	0xe000ed00

08003154 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003154:	b480      	push	{r7}
 8003156:	b083      	sub	sp, #12
 8003158:	af00      	add	r7, sp, #0
 800315a:	4603      	mov	r3, r0
 800315c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	2b00      	cmp	r3, #0
 8003164:	db0b      	blt.n	800317e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003166:	79fb      	ldrb	r3, [r7, #7]
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	4907      	ldr	r1, [pc, #28]	; (800318c <__NVIC_EnableIRQ+0x38>)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	095b      	lsrs	r3, r3, #5
 8003174:	2001      	movs	r0, #1
 8003176:	fa00 f202 	lsl.w	r2, r0, r2
 800317a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800317e:	bf00      	nop
 8003180:	370c      	adds	r7, #12
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	e000e100 	.word	0xe000e100

08003190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	4603      	mov	r3, r0
 8003198:	6039      	str	r1, [r7, #0]
 800319a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800319c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	db0a      	blt.n	80031ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	490c      	ldr	r1, [pc, #48]	; (80031dc <__NVIC_SetPriority+0x4c>)
 80031aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ae:	0112      	lsls	r2, r2, #4
 80031b0:	b2d2      	uxtb	r2, r2
 80031b2:	440b      	add	r3, r1
 80031b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b8:	e00a      	b.n	80031d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	b2da      	uxtb	r2, r3
 80031be:	4908      	ldr	r1, [pc, #32]	; (80031e0 <__NVIC_SetPriority+0x50>)
 80031c0:	79fb      	ldrb	r3, [r7, #7]
 80031c2:	f003 030f 	and.w	r3, r3, #15
 80031c6:	3b04      	subs	r3, #4
 80031c8:	0112      	lsls	r2, r2, #4
 80031ca:	b2d2      	uxtb	r2, r2
 80031cc:	440b      	add	r3, r1
 80031ce:	761a      	strb	r2, [r3, #24]
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	e000e100 	.word	0xe000e100
 80031e0:	e000ed00 	.word	0xe000ed00

080031e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b089      	sub	sp, #36	; 0x24
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	60f8      	str	r0, [r7, #12]
 80031ec:	60b9      	str	r1, [r7, #8]
 80031ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	f1c3 0307 	rsb	r3, r3, #7
 80031fe:	2b04      	cmp	r3, #4
 8003200:	bf28      	it	cs
 8003202:	2304      	movcs	r3, #4
 8003204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	3304      	adds	r3, #4
 800320a:	2b06      	cmp	r3, #6
 800320c:	d902      	bls.n	8003214 <NVIC_EncodePriority+0x30>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	3b03      	subs	r3, #3
 8003212:	e000      	b.n	8003216 <NVIC_EncodePriority+0x32>
 8003214:	2300      	movs	r3, #0
 8003216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003218:	f04f 32ff 	mov.w	r2, #4294967295
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fa02 f303 	lsl.w	r3, r2, r3
 8003222:	43da      	mvns	r2, r3
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	401a      	ands	r2, r3
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800322c:	f04f 31ff 	mov.w	r1, #4294967295
 8003230:	697b      	ldr	r3, [r7, #20]
 8003232:	fa01 f303 	lsl.w	r3, r1, r3
 8003236:	43d9      	mvns	r1, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800323c:	4313      	orrs	r3, r2
         );
}
 800323e:	4618      	mov	r0, r3
 8003240:	3724      	adds	r7, #36	; 0x24
 8003242:	46bd      	mov	sp, r7
 8003244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003248:	4770      	bx	lr
	...

0800324c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b082      	sub	sp, #8
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800325c:	d301      	bcc.n	8003262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325e:	2301      	movs	r3, #1
 8003260:	e00f      	b.n	8003282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <SysTick_Config+0x40>)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800326a:	210f      	movs	r1, #15
 800326c:	f04f 30ff 	mov.w	r0, #4294967295
 8003270:	f7ff ff8e 	bl	8003190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003274:	4b05      	ldr	r3, [pc, #20]	; (800328c <SysTick_Config+0x40>)
 8003276:	2200      	movs	r2, #0
 8003278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800327a:	4b04      	ldr	r3, [pc, #16]	; (800328c <SysTick_Config+0x40>)
 800327c:	2207      	movs	r2, #7
 800327e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3708      	adds	r7, #8
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	e000e010 	.word	0xe000e010

08003290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b082      	sub	sp, #8
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f7ff ff29 	bl	80030f0 <__NVIC_SetPriorityGrouping>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b086      	sub	sp, #24
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	4603      	mov	r3, r0
 80032ae:	60b9      	str	r1, [r7, #8]
 80032b0:	607a      	str	r2, [r7, #4]
 80032b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80032b4:	2300      	movs	r3, #0
 80032b6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80032b8:	f7ff ff3e 	bl	8003138 <__NVIC_GetPriorityGrouping>
 80032bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	68b9      	ldr	r1, [r7, #8]
 80032c2:	6978      	ldr	r0, [r7, #20]
 80032c4:	f7ff ff8e 	bl	80031e4 <NVIC_EncodePriority>
 80032c8:	4602      	mov	r2, r0
 80032ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ce:	4611      	mov	r1, r2
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff ff5d 	bl	8003190 <__NVIC_SetPriority>
}
 80032d6:	bf00      	nop
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}

080032de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032de:	b580      	push	{r7, lr}
 80032e0:	b082      	sub	sp, #8
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	4603      	mov	r3, r0
 80032e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff ff31 	bl	8003154 <__NVIC_EnableIRQ>
}
 80032f2:	bf00      	nop
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b082      	sub	sp, #8
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7ff ffa2 	bl	800324c <SysTick_Config>
 8003308:	4603      	mov	r3, r0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	e098      	b.n	8003458 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	461a      	mov	r2, r3
 800332c:	4b4d      	ldr	r3, [pc, #308]	; (8003464 <HAL_DMA_Init+0x150>)
 800332e:	429a      	cmp	r2, r3
 8003330:	d80f      	bhi.n	8003352 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	461a      	mov	r2, r3
 8003338:	4b4b      	ldr	r3, [pc, #300]	; (8003468 <HAL_DMA_Init+0x154>)
 800333a:	4413      	add	r3, r2
 800333c:	4a4b      	ldr	r2, [pc, #300]	; (800346c <HAL_DMA_Init+0x158>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	091b      	lsrs	r3, r3, #4
 8003344:	009a      	lsls	r2, r3, #2
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a48      	ldr	r2, [pc, #288]	; (8003470 <HAL_DMA_Init+0x15c>)
 800334e:	641a      	str	r2, [r3, #64]	; 0x40
 8003350:	e00e      	b.n	8003370 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	461a      	mov	r2, r3
 8003358:	4b46      	ldr	r3, [pc, #280]	; (8003474 <HAL_DMA_Init+0x160>)
 800335a:	4413      	add	r3, r2
 800335c:	4a43      	ldr	r2, [pc, #268]	; (800346c <HAL_DMA_Init+0x158>)
 800335e:	fba2 2303 	umull	r2, r3, r2, r3
 8003362:	091b      	lsrs	r3, r3, #4
 8003364:	009a      	lsls	r2, r3, #2
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a42      	ldr	r2, [pc, #264]	; (8003478 <HAL_DMA_Init+0x164>)
 800336e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2202      	movs	r2, #2
 8003374:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800338a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	699b      	ldr	r3, [r3, #24]
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	689b      	ldr	r3, [r3, #8]
 80033c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033ca:	d039      	beq.n	8003440 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d0:	4a27      	ldr	r2, [pc, #156]	; (8003470 <HAL_DMA_Init+0x15c>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d11a      	bne.n	800340c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80033d6:	4b29      	ldr	r3, [pc, #164]	; (800347c <HAL_DMA_Init+0x168>)
 80033d8:	681a      	ldr	r2, [r3, #0]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033de:	f003 031c 	and.w	r3, r3, #28
 80033e2:	210f      	movs	r1, #15
 80033e4:	fa01 f303 	lsl.w	r3, r1, r3
 80033e8:	43db      	mvns	r3, r3
 80033ea:	4924      	ldr	r1, [pc, #144]	; (800347c <HAL_DMA_Init+0x168>)
 80033ec:	4013      	ands	r3, r2
 80033ee:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <HAL_DMA_Init+0x168>)
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033fc:	f003 031c 	and.w	r3, r3, #28
 8003400:	fa01 f303 	lsl.w	r3, r1, r3
 8003404:	491d      	ldr	r1, [pc, #116]	; (800347c <HAL_DMA_Init+0x168>)
 8003406:	4313      	orrs	r3, r2
 8003408:	600b      	str	r3, [r1, #0]
 800340a:	e019      	b.n	8003440 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800340c:	4b1c      	ldr	r3, [pc, #112]	; (8003480 <HAL_DMA_Init+0x16c>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003414:	f003 031c 	and.w	r3, r3, #28
 8003418:	210f      	movs	r1, #15
 800341a:	fa01 f303 	lsl.w	r3, r1, r3
 800341e:	43db      	mvns	r3, r3
 8003420:	4917      	ldr	r1, [pc, #92]	; (8003480 <HAL_DMA_Init+0x16c>)
 8003422:	4013      	ands	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8003426:	4b16      	ldr	r3, [pc, #88]	; (8003480 <HAL_DMA_Init+0x16c>)
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f003 031c 	and.w	r3, r3, #28
 8003436:	fa01 f303 	lsl.w	r3, r1, r3
 800343a:	4911      	ldr	r1, [pc, #68]	; (8003480 <HAL_DMA_Init+0x16c>)
 800343c:	4313      	orrs	r3, r2
 800343e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003456:	2300      	movs	r3, #0
}
 8003458:	4618      	mov	r0, r3
 800345a:	3714      	adds	r7, #20
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr
 8003464:	40020407 	.word	0x40020407
 8003468:	bffdfff8 	.word	0xbffdfff8
 800346c:	cccccccd 	.word	0xcccccccd
 8003470:	40020000 	.word	0x40020000
 8003474:	bffdfbf8 	.word	0xbffdfbf8
 8003478:	40020400 	.word	0x40020400
 800347c:	400200a8 	.word	0x400200a8
 8003480:	400204a8 	.word	0x400204a8

08003484 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b086      	sub	sp, #24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
 8003490:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800349c:	2b01      	cmp	r3, #1
 800349e:	d101      	bne.n	80034a4 <HAL_DMA_Start_IT+0x20>
 80034a0:	2302      	movs	r3, #2
 80034a2:	e04b      	b.n	800353c <HAL_DMA_Start_IT+0xb8>
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2201      	movs	r2, #1
 80034a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	d13a      	bne.n	800352e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2202      	movs	r2, #2
 80034bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f022 0201 	bic.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	687a      	ldr	r2, [r7, #4]
 80034da:	68b9      	ldr	r1, [r7, #8]
 80034dc:	68f8      	ldr	r0, [r7, #12]
 80034de:	f000 f92f 	bl	8003740 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d008      	beq.n	80034fc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f042 020e 	orr.w	r2, r2, #14
 80034f8:	601a      	str	r2, [r3, #0]
 80034fa:	e00f      	b.n	800351c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0204 	bic.w	r2, r2, #4
 800350a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 020a 	orr.w	r2, r2, #10
 800351a:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0201 	orr.w	r2, r2, #1
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	e005      	b.n	800353a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800353a:	7dfb      	ldrb	r3, [r7, #23]
}
 800353c:	4618      	mov	r0, r3
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d005      	beq.n	8003568 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2204      	movs	r2, #4
 8003560:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	73fb      	strb	r3, [r7, #15]
 8003566:	e029      	b.n	80035bc <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 020e 	bic.w	r2, r2, #14
 8003576:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 0201 	bic.w	r2, r2, #1
 8003586:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358c:	f003 021c 	and.w	r2, r3, #28
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f202 	lsl.w	r2, r1, r2
 800359a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d003      	beq.n	80035bc <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	4798      	blx	r3
    }
  }
  return status;
 80035bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80035be:	4618      	mov	r0, r3
 80035c0:	3710      	adds	r7, #16
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b084      	sub	sp, #16
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e2:	f003 031c 	and.w	r3, r3, #28
 80035e6:	2204      	movs	r2, #4
 80035e8:	409a      	lsls	r2, r3
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	4013      	ands	r3, r2
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d026      	beq.n	8003640 <HAL_DMA_IRQHandler+0x7a>
 80035f2:	68bb      	ldr	r3, [r7, #8]
 80035f4:	f003 0304 	and.w	r3, r3, #4
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d021      	beq.n	8003640 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 0320 	and.w	r3, r3, #32
 8003606:	2b00      	cmp	r3, #0
 8003608:	d107      	bne.n	800361a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f022 0204 	bic.w	r2, r2, #4
 8003618:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361e:	f003 021c 	and.w	r2, r3, #28
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	2104      	movs	r1, #4
 8003628:	fa01 f202 	lsl.w	r2, r1, r2
 800362c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003632:	2b00      	cmp	r3, #0
 8003634:	d071      	beq.n	800371a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363a:	6878      	ldr	r0, [r7, #4]
 800363c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800363e:	e06c      	b.n	800371a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f003 031c 	and.w	r3, r3, #28
 8003648:	2202      	movs	r2, #2
 800364a:	409a      	lsls	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d02e      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xec>
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d029      	beq.n	80036b2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0320 	and.w	r3, r3, #32
 8003668:	2b00      	cmp	r3, #0
 800366a:	d10b      	bne.n	8003684 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 020a 	bic.w	r2, r2, #10
 800367a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003688:	f003 021c 	and.w	r2, r3, #28
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	2102      	movs	r1, #2
 8003692:	fa01 f202 	lsl.w	r2, r1, r2
 8003696:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d038      	beq.n	800371a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ac:	6878      	ldr	r0, [r7, #4]
 80036ae:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036b0:	e033      	b.n	800371a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f003 031c 	and.w	r3, r3, #28
 80036ba:	2208      	movs	r2, #8
 80036bc:	409a      	lsls	r2, r3
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d02a      	beq.n	800371c <HAL_DMA_IRQHandler+0x156>
 80036c6:	68bb      	ldr	r3, [r7, #8]
 80036c8:	f003 0308 	and.w	r3, r3, #8
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d025      	beq.n	800371c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f022 020e 	bic.w	r2, r2, #14
 80036de:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036e4:	f003 021c 	and.w	r2, r3, #28
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ec:	2101      	movs	r1, #1
 80036ee:	fa01 f202 	lsl.w	r2, r1, r2
 80036f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2201      	movs	r2, #1
 80036fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2200      	movs	r2, #0
 8003706:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370e:	2b00      	cmp	r3, #0
 8003710:	d004      	beq.n	800371c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800371a:	bf00      	nop
 800371c:	bf00      	nop
}
 800371e:	3710      	adds	r7, #16
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}

08003724 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003732:	b2db      	uxtb	r3, r3
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
 800374c:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003752:	f003 021c 	and.w	r2, r3, #28
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f202 	lsl.w	r2, r1, r2
 8003760:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d108      	bne.n	8003784 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003782:	e007      	b.n	8003794 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	687a      	ldr	r2, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]
}
 8003794:	bf00      	nop
 8003796:	3714      	adds	r7, #20
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b087      	sub	sp, #28
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
 80037a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037aa:	2300      	movs	r3, #0
 80037ac:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ae:	e148      	b.n	8003a42 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	2101      	movs	r1, #1
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	fa01 f303 	lsl.w	r3, r1, r3
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f000 813a 	beq.w	8003a3c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d005      	beq.n	80037e0 <HAL_GPIO_Init+0x40>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d130      	bne.n	8003842 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80037e6:	697b      	ldr	r3, [r7, #20]
 80037e8:	005b      	lsls	r3, r3, #1
 80037ea:	2203      	movs	r2, #3
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	43db      	mvns	r3, r3
 80037f2:	693a      	ldr	r2, [r7, #16]
 80037f4:	4013      	ands	r3, r2
 80037f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	68da      	ldr	r2, [r3, #12]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	005b      	lsls	r3, r3, #1
 8003800:	fa02 f303 	lsl.w	r3, r2, r3
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003816:	2201      	movs	r2, #1
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	fa02 f303 	lsl.w	r3, r2, r3
 800381e:	43db      	mvns	r3, r3
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	4013      	ands	r3, r2
 8003824:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	091b      	lsrs	r3, r3, #4
 800382c:	f003 0201 	and.w	r2, r3, #1
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	693a      	ldr	r2, [r7, #16]
 8003838:	4313      	orrs	r3, r2
 800383a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f003 0303 	and.w	r3, r3, #3
 800384a:	2b03      	cmp	r3, #3
 800384c:	d017      	beq.n	800387e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	2203      	movs	r2, #3
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	43db      	mvns	r3, r3
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	4013      	ands	r3, r2
 8003864:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689a      	ldr	r2, [r3, #8]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	fa02 f303 	lsl.w	r3, r2, r3
 8003872:	693a      	ldr	r2, [r7, #16]
 8003874:	4313      	orrs	r3, r2
 8003876:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	693a      	ldr	r2, [r7, #16]
 800387c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	f003 0303 	and.w	r3, r3, #3
 8003886:	2b02      	cmp	r3, #2
 8003888:	d123      	bne.n	80038d2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	08da      	lsrs	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	3208      	adds	r2, #8
 8003892:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003896:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	f003 0307 	and.w	r3, r3, #7
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	220f      	movs	r2, #15
 80038a2:	fa02 f303 	lsl.w	r3, r2, r3
 80038a6:	43db      	mvns	r3, r3
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	4013      	ands	r3, r2
 80038ac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0307 	and.w	r3, r3, #7
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	693a      	ldr	r2, [r7, #16]
 80038c0:	4313      	orrs	r3, r2
 80038c2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	08da      	lsrs	r2, r3, #3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3208      	adds	r2, #8
 80038cc:	6939      	ldr	r1, [r7, #16]
 80038ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	005b      	lsls	r3, r3, #1
 80038dc:	2203      	movs	r2, #3
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43db      	mvns	r3, r3
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	4013      	ands	r3, r2
 80038e8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	f003 0203 	and.w	r2, r3, #3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	fa02 f303 	lsl.w	r3, r2, r3
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800390e:	2b00      	cmp	r3, #0
 8003910:	f000 8094 	beq.w	8003a3c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003914:	4b52      	ldr	r3, [pc, #328]	; (8003a60 <HAL_GPIO_Init+0x2c0>)
 8003916:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003918:	4a51      	ldr	r2, [pc, #324]	; (8003a60 <HAL_GPIO_Init+0x2c0>)
 800391a:	f043 0301 	orr.w	r3, r3, #1
 800391e:	6613      	str	r3, [r2, #96]	; 0x60
 8003920:	4b4f      	ldr	r3, [pc, #316]	; (8003a60 <HAL_GPIO_Init+0x2c0>)
 8003922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	60bb      	str	r3, [r7, #8]
 800392a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800392c:	4a4d      	ldr	r2, [pc, #308]	; (8003a64 <HAL_GPIO_Init+0x2c4>)
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	3302      	adds	r3, #2
 8003934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003938:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	220f      	movs	r2, #15
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	4013      	ands	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003956:	d00d      	beq.n	8003974 <HAL_GPIO_Init+0x1d4>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a43      	ldr	r2, [pc, #268]	; (8003a68 <HAL_GPIO_Init+0x2c8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d007      	beq.n	8003970 <HAL_GPIO_Init+0x1d0>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <HAL_GPIO_Init+0x2cc>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d101      	bne.n	800396c <HAL_GPIO_Init+0x1cc>
 8003968:	2302      	movs	r3, #2
 800396a:	e004      	b.n	8003976 <HAL_GPIO_Init+0x1d6>
 800396c:	2307      	movs	r3, #7
 800396e:	e002      	b.n	8003976 <HAL_GPIO_Init+0x1d6>
 8003970:	2301      	movs	r3, #1
 8003972:	e000      	b.n	8003976 <HAL_GPIO_Init+0x1d6>
 8003974:	2300      	movs	r3, #0
 8003976:	697a      	ldr	r2, [r7, #20]
 8003978:	f002 0203 	and.w	r2, r2, #3
 800397c:	0092      	lsls	r2, r2, #2
 800397e:	4093      	lsls	r3, r2
 8003980:	693a      	ldr	r2, [r7, #16]
 8003982:	4313      	orrs	r3, r2
 8003984:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003986:	4937      	ldr	r1, [pc, #220]	; (8003a64 <HAL_GPIO_Init+0x2c4>)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	089b      	lsrs	r3, r3, #2
 800398c:	3302      	adds	r3, #2
 800398e:	693a      	ldr	r2, [r7, #16]
 8003990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003994:	4b36      	ldr	r3, [pc, #216]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	43db      	mvns	r3, r3
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4013      	ands	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d003      	beq.n	80039b8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80039b0:	693a      	ldr	r2, [r7, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4313      	orrs	r3, r2
 80039b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80039b8:	4a2d      	ldr	r2, [pc, #180]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80039be:	4b2c      	ldr	r3, [pc, #176]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d003      	beq.n	80039e2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039e2:	4a23      	ldr	r2, [pc, #140]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 80039ea:	685b      	ldr	r3, [r3, #4]
 80039ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	43db      	mvns	r3, r3
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4013      	ands	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a0c:	4a18      	ldr	r2, [pc, #96]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003a12:	4b17      	ldr	r3, [pc, #92]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	43db      	mvns	r3, r3
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	4013      	ands	r3, r2
 8003a20:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a36:	4a0e      	ldr	r2, [pc, #56]	; (8003a70 <HAL_GPIO_Init+0x2d0>)
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	3301      	adds	r3, #1
 8003a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	fa22 f303 	lsr.w	r3, r2, r3
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f47f aeaf 	bne.w	80037b0 <HAL_GPIO_Init+0x10>
  }
}
 8003a52:	bf00      	nop
 8003a54:	bf00      	nop
 8003a56:	371c      	adds	r7, #28
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr
 8003a60:	40021000 	.word	0x40021000
 8003a64:	40010000 	.word	0x40010000
 8003a68:	48000400 	.word	0x48000400
 8003a6c:	48000800 	.word	0x48000800
 8003a70:	40010400 	.word	0x40010400

08003a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
 8003a80:	4613      	mov	r3, r2
 8003a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a84:	787b      	ldrb	r3, [r7, #1]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a8a:	887a      	ldrh	r2, [r7, #2]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a92:	887a      	ldrh	r2, [r7, #2]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a98:	bf00      	nop
 8003a9a:	370c      	adds	r7, #12
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b082      	sub	sp, #8
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d101      	bne.n	8003ab6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	e08d      	b.n	8003bd2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d106      	bne.n	8003ad0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd fac8 	bl	8001060 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2224      	movs	r2, #36	; 0x24
 8003ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0201 	bic.w	r2, r2, #1
 8003ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685a      	ldr	r2, [r3, #4]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003af4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b04:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d107      	bne.n	8003b1e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	689a      	ldr	r2, [r3, #8]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1a:	609a      	str	r2, [r3, #8]
 8003b1c:	e006      	b.n	8003b2c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689a      	ldr	r2, [r3, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003b2a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d108      	bne.n	8003b46 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	685a      	ldr	r2, [r3, #4]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b42:	605a      	str	r2, [r3, #4]
 8003b44:	e007      	b.n	8003b56 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b54:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003b68:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b78:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691a      	ldr	r2, [r3, #16]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	695b      	ldr	r3, [r3, #20]
 8003b82:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	430a      	orrs	r2, r1
 8003b92:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	69d9      	ldr	r1, [r3, #28]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f042 0201 	orr.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
	...

08003bdc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	607a      	str	r2, [r7, #4]
 8003be6:	461a      	mov	r2, r3
 8003be8:	460b      	mov	r3, r1
 8003bea:	817b      	strh	r3, [r7, #10]
 8003bec:	4613      	mov	r3, r2
 8003bee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	2b20      	cmp	r3, #32
 8003bfa:	f040 80fd 	bne.w	8003df8 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d101      	bne.n	8003c0c <HAL_I2C_Master_Transmit+0x30>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	e0f6      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd fe5c 	bl	80018d0 <HAL_GetTick>
 8003c18:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	9300      	str	r3, [sp, #0]
 8003c1e:	2319      	movs	r3, #25
 8003c20:	2201      	movs	r2, #1
 8003c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c26:	68f8      	ldr	r0, [r7, #12]
 8003c28:	f000 ff33 	bl	8004a92 <I2C_WaitOnFlagUntilTimeout>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e0e1      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	2221      	movs	r2, #33	; 0x21
 8003c3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2210      	movs	r2, #16
 8003c42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	2200      	movs	r2, #0
 8003c4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	687a      	ldr	r2, [r7, #4]
 8003c50:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	893a      	ldrh	r2, [r7, #8]
 8003c56:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	2bff      	cmp	r3, #255	; 0xff
 8003c66:	d906      	bls.n	8003c76 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	22ff      	movs	r2, #255	; 0xff
 8003c6c:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8003c6e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c72:	617b      	str	r3, [r7, #20]
 8003c74:	e007      	b.n	8003c86 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8003c80:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003c84:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d024      	beq.n	8003cd8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c92:	781a      	ldrb	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9e:	1c5a      	adds	r2, r3, #1
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ca8:	b29b      	uxth	r3, r3
 8003caa:	3b01      	subs	r3, #1
 8003cac:	b29a      	uxth	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	b2db      	uxtb	r3, r3
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	b2da      	uxtb	r2, r3
 8003cc8:	8979      	ldrh	r1, [r7, #10]
 8003cca:	4b4e      	ldr	r3, [pc, #312]	; (8003e04 <HAL_I2C_Master_Transmit+0x228>)
 8003ccc:	9300      	str	r3, [sp, #0]
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f001 f919 	bl	8004f08 <I2C_TransferConfig>
 8003cd6:	e066      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	b2da      	uxtb	r2, r3
 8003cde:	8979      	ldrh	r1, [r7, #10]
 8003ce0:	4b48      	ldr	r3, [pc, #288]	; (8003e04 <HAL_I2C_Master_Transmit+0x228>)
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	68f8      	ldr	r0, [r7, #12]
 8003ce8:	f001 f90e 	bl	8004f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8003cec:	e05b      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f000 ff1c 	bl	8004b30 <I2C_WaitOnTXISFlagUntilTimeout>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d001      	beq.n	8003d02 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	e07b      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d06:	781a      	ldrb	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d12:	1c5a      	adds	r2, r3, #1
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	3b01      	subs	r3, #1
 8003d20:	b29a      	uxth	r2, r3
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d2a:	3b01      	subs	r3, #1
 8003d2c:	b29a      	uxth	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d034      	beq.n	8003da6 <HAL_I2C_Master_Transmit+0x1ca>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d130      	bne.n	8003da6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	2180      	movs	r1, #128	; 0x80
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fe9f 	bl	8004a92 <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e04d      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2bff      	cmp	r3, #255	; 0xff
 8003d66:	d90e      	bls.n	8003d86 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	22ff      	movs	r2, #255	; 0xff
 8003d6c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	8979      	ldrh	r1, [r7, #10]
 8003d76:	2300      	movs	r3, #0
 8003d78:	9300      	str	r3, [sp, #0]
 8003d7a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d7e:	68f8      	ldr	r0, [r7, #12]
 8003d80:	f001 f8c2 	bl	8004f08 <I2C_TransferConfig>
 8003d84:	e00f      	b.n	8003da6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d8a:	b29a      	uxth	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d94:	b2da      	uxtb	r2, r3
 8003d96:	8979      	ldrh	r1, [r7, #10]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f001 f8b1 	bl	8004f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d19e      	bne.n	8003cee <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	6a39      	ldr	r1, [r7, #32]
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 ff02 	bl	8004bbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e01a      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b0c      	ldr	r3, [pc, #48]	; (8003e08 <HAL_I2C_Master_Transmit+0x22c>)
 8003dd8:	400b      	ands	r3, r1
 8003dda:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	e000      	b.n	8003dfa <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8003df8:	2302      	movs	r3, #2
  }
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3718      	adds	r7, #24
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	80002000 	.word	0x80002000
 8003e08:	fe00e800 	.word	0xfe00e800

08003e0c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	460b      	mov	r3, r1
 8003e1a:	817b      	strh	r3, [r7, #10]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b20      	cmp	r3, #32
 8003e2a:	f040 80db 	bne.w	8003fe4 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2C_Master_Receive+0x30>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0d4      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e44:	f7fd fd44 	bl	80018d0 <HAL_GetTick>
 8003e48:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	2319      	movs	r3, #25
 8003e50:	2201      	movs	r2, #1
 8003e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e56:	68f8      	ldr	r0, [r7, #12]
 8003e58:	f000 fe1b 	bl	8004a92 <I2C_WaitOnFlagUntilTimeout>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e0bf      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2222      	movs	r2, #34	; 0x22
 8003e6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	2210      	movs	r2, #16
 8003e72:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	893a      	ldrh	r2, [r7, #8]
 8003e86:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	2bff      	cmp	r3, #255	; 0xff
 8003e96:	d90e      	bls.n	8003eb6 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	22ff      	movs	r2, #255	; 0xff
 8003e9c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea2:	b2da      	uxtb	r2, r3
 8003ea4:	8979      	ldrh	r1, [r7, #10]
 8003ea6:	4b52      	ldr	r3, [pc, #328]	; (8003ff0 <HAL_I2C_Master_Receive+0x1e4>)
 8003ea8:	9300      	str	r3, [sp, #0]
 8003eaa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003eae:	68f8      	ldr	r0, [r7, #12]
 8003eb0:	f001 f82a 	bl	8004f08 <I2C_TransferConfig>
 8003eb4:	e06d      	b.n	8003f92 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eba:	b29a      	uxth	r2, r3
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ec4:	b2da      	uxtb	r2, r3
 8003ec6:	8979      	ldrh	r1, [r7, #10]
 8003ec8:	4b49      	ldr	r3, [pc, #292]	; (8003ff0 <HAL_I2C_Master_Receive+0x1e4>)
 8003eca:	9300      	str	r3, [sp, #0]
 8003ecc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f001 f819 	bl	8004f08 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8003ed6:	e05c      	b.n	8003f92 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	6a39      	ldr	r1, [r7, #32]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 feb1 	bl	8004c44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e07c      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efe:	1c5a      	adds	r2, r3, #1
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	3b01      	subs	r3, #1
 8003f0a:	b29a      	uxth	r2, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	3b01      	subs	r3, #1
 8003f18:	b29a      	uxth	r2, r3
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d034      	beq.n	8003f92 <HAL_I2C_Master_Receive+0x186>
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d130      	bne.n	8003f92 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	9300      	str	r3, [sp, #0]
 8003f34:	6a3b      	ldr	r3, [r7, #32]
 8003f36:	2200      	movs	r2, #0
 8003f38:	2180      	movs	r1, #128	; 0x80
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 fda9 	bl	8004a92 <I2C_WaitOnFlagUntilTimeout>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d001      	beq.n	8003f4a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e04d      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	2bff      	cmp	r3, #255	; 0xff
 8003f52:	d90e      	bls.n	8003f72 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	22ff      	movs	r2, #255	; 0xff
 8003f58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	8979      	ldrh	r1, [r7, #10]
 8003f62:	2300      	movs	r3, #0
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 ffcc 	bl	8004f08 <I2C_TransferConfig>
 8003f70:	e00f      	b.n	8003f92 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f76:	b29a      	uxth	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f80:	b2da      	uxtb	r2, r3
 8003f82:	8979      	ldrh	r1, [r7, #10]
 8003f84:	2300      	movs	r3, #0
 8003f86:	9300      	str	r3, [sp, #0]
 8003f88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 ffbb 	bl	8004f08 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f96:	b29b      	uxth	r3, r3
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d19d      	bne.n	8003ed8 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f9c:	697a      	ldr	r2, [r7, #20]
 8003f9e:	6a39      	ldr	r1, [r7, #32]
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f000 fe0c 	bl	8004bbe <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d001      	beq.n	8003fb0 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e01a      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6859      	ldr	r1, [r3, #4]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	4b0c      	ldr	r3, [pc, #48]	; (8003ff4 <HAL_I2C_Master_Receive+0x1e8>)
 8003fc4:	400b      	ands	r3, r1
 8003fc6:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	e000      	b.n	8003fe6 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8003fe4:	2302      	movs	r3, #2
  }
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3718      	adds	r7, #24
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	80002400 	.word	0x80002400
 8003ff4:	fe00e800 	.word	0xfe00e800

08003ff8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004014:	2b00      	cmp	r3, #0
 8004016:	d005      	beq.n	8004024 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	68f9      	ldr	r1, [r7, #12]
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
  }
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b086      	sub	sp, #24
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	2b00      	cmp	r3, #0
 800404c:	d00f      	beq.n	800406e <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8004054:	2b00      	cmp	r3, #0
 8004056:	d00a      	beq.n	800406e <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405c:	f043 0201 	orr.w	r2, r3, #1
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800406c:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00f      	beq.n	8004098 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	f043 0208 	orr.w	r2, r3, #8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004096:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00f      	beq.n	80040c2 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b0:	f043 0202 	orr.w	r2, r3, #2
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040c0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f003 030b 	and.w	r3, r3, #11
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d003      	beq.n	80040da <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80040d2:	68f9      	ldr	r1, [r7, #12]
 80040d4:	6878      	ldr	r0, [r7, #4]
 80040d6:	f000 fb83 	bl	80047e0 <I2C_ITError>
  }
}
 80040da:	bf00      	nop
 80040dc:	3718      	adds	r7, #24
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040e2:	b480      	push	{r7}
 80040e4:	b083      	sub	sp, #12
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80040ea:	bf00      	nop
 80040ec:	370c      	adds	r7, #12
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr

080040f6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80040fe:	bf00      	nop
 8004100:	370c      	adds	r7, #12
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800410a:	b480      	push	{r7}
 800410c:	b083      	sub	sp, #12
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	460b      	mov	r3, r1
 8004114:	70fb      	strb	r3, [r7, #3]
 8004116:	4613      	mov	r3, r2
 8004118:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004124:	4770      	bx	lr

08004126 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004126:	b480      	push	{r7}
 8004128:	b083      	sub	sp, #12
 800412a:	af00      	add	r7, sp, #0
 800412c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800412e:	bf00      	nop
 8004130:	370c      	adds	r7, #12
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr

0800413a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800413a:	b480      	push	{r7}
 800413c:	b083      	sub	sp, #12
 800413e:	af00      	add	r7, sp, #0
 8004140:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004142:	bf00      	nop
 8004144:	370c      	adds	r7, #12
 8004146:	46bd      	mov	sp, r7
 8004148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414c:	4770      	bx	lr

0800414e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004156:	bf00      	nop
 8004158:	370c      	adds	r7, #12
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr

08004162 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b086      	sub	sp, #24
 8004166:	af00      	add	r7, sp, #0
 8004168:	60f8      	str	r0, [r7, #12]
 800416a:	60b9      	str	r1, [r7, #8]
 800416c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004172:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800417e:	2b01      	cmp	r3, #1
 8004180:	d101      	bne.n	8004186 <I2C_Slave_ISR_IT+0x24>
 8004182:	2302      	movs	r3, #2
 8004184:	e0e1      	b.n	800434a <I2C_Slave_ISR_IT+0x1e8>
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	2201      	movs	r2, #1
 800418a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f003 0320 	and.w	r3, r3, #32
 8004194:	2b00      	cmp	r3, #0
 8004196:	d008      	beq.n	80041aa <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d003      	beq.n	80041aa <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80041a2:	6939      	ldr	r1, [r7, #16]
 80041a4:	68f8      	ldr	r0, [r7, #12]
 80041a6:	f000 f9b5 	bl	8004514 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d04b      	beq.n	800424c <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d046      	beq.n	800424c <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d128      	bne.n	800421a <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b28      	cmp	r3, #40	; 0x28
 80041d2:	d108      	bne.n	80041e6 <I2C_Slave_ISR_IT+0x84>
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80041da:	d104      	bne.n	80041e6 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80041dc:	6939      	ldr	r1, [r7, #16]
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f000 faaa 	bl	8004738 <I2C_ITListenCplt>
 80041e4:	e031      	b.n	800424a <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b29      	cmp	r3, #41	; 0x29
 80041f0:	d10e      	bne.n	8004210 <I2C_Slave_ISR_IT+0xae>
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041f8:	d00a      	beq.n	8004210 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	2210      	movs	r2, #16
 8004200:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 fc03 	bl	8004a0e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004208:	68f8      	ldr	r0, [r7, #12]
 800420a:	f000 f926 	bl	800445a <I2C_ITSlaveSeqCplt>
 800420e:	e01c      	b.n	800424a <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2210      	movs	r2, #16
 8004216:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8004218:	e08f      	b.n	800433a <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2210      	movs	r2, #16
 8004220:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	f043 0204 	orr.w	r2, r3, #4
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <I2C_Slave_ISR_IT+0xda>
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423a:	d17e      	bne.n	800433a <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004240:	4619      	mov	r1, r3
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 facc 	bl	80047e0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8004248:	e077      	b.n	800433a <I2C_Slave_ISR_IT+0x1d8>
 800424a:	e076      	b.n	800433a <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f003 0304 	and.w	r3, r3, #4
 8004252:	2b00      	cmp	r3, #0
 8004254:	d02f      	beq.n	80042b6 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800425c:	2b00      	cmp	r3, #0
 800425e:	d02a      	beq.n	80042b6 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	d018      	beq.n	800429c <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004274:	b2d2      	uxtb	r2, r2
 8004276:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004286:	3b01      	subs	r3, #1
 8004288:	b29a      	uxth	r2, r3
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004292:	b29b      	uxth	r3, r3
 8004294:	3b01      	subs	r3, #1
 8004296:	b29a      	uxth	r2, r3
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d14b      	bne.n	800433e <I2C_Slave_ISR_IT+0x1dc>
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ac:	d047      	beq.n	800433e <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80042ae:	68f8      	ldr	r0, [r7, #12]
 80042b0:	f000 f8d3 	bl	800445a <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80042b4:	e043      	b.n	800433e <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d009      	beq.n	80042d4 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d004      	beq.n	80042d4 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80042ca:	6939      	ldr	r1, [r7, #16]
 80042cc:	68f8      	ldr	r0, [r7, #12]
 80042ce:	f000 f840 	bl	8004352 <I2C_ITAddrCplt>
 80042d2:	e035      	b.n	8004340 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d030      	beq.n	8004340 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02b      	beq.n	8004340 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ec:	b29b      	uxth	r3, r3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d018      	beq.n	8004324 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f6:	781a      	ldrb	r2, [r3, #0]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004302:	1c5a      	adds	r2, r3, #1
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430c:	b29b      	uxth	r3, r3
 800430e:	3b01      	subs	r3, #1
 8004310:	b29a      	uxth	r2, r3
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800431a:	3b01      	subs	r3, #1
 800431c:	b29a      	uxth	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	851a      	strh	r2, [r3, #40]	; 0x28
 8004322:	e00d      	b.n	8004340 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432a:	d002      	beq.n	8004332 <I2C_Slave_ISR_IT+0x1d0>
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d106      	bne.n	8004340 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f891 	bl	800445a <I2C_ITSlaveSeqCplt>
 8004338:	e002      	b.n	8004340 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800433e:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3718      	adds	r7, #24
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b084      	sub	sp, #16
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
 800435a:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004362:	b2db      	uxtb	r3, r3
 8004364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004368:	2b28      	cmp	r3, #40	; 0x28
 800436a:	d16a      	bne.n	8004442 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	699b      	ldr	r3, [r3, #24]
 8004372:	0c1b      	lsrs	r3, r3, #16
 8004374:	b2db      	uxtb	r3, r3
 8004376:	f003 0301 	and.w	r3, r3, #1
 800437a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	0c1b      	lsrs	r3, r3, #16
 8004384:	b29b      	uxth	r3, r3
 8004386:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800438a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004398:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80043a6:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d138      	bne.n	8004422 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80043b0:	897b      	ldrh	r3, [r7, #10]
 80043b2:	09db      	lsrs	r3, r3, #7
 80043b4:	b29a      	uxth	r2, r3
 80043b6:	89bb      	ldrh	r3, [r7, #12]
 80043b8:	4053      	eors	r3, r2
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	f003 0306 	and.w	r3, r3, #6
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11c      	bne.n	80043fe <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80043c4:	897b      	ldrh	r3, [r7, #10]
 80043c6:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043d6:	2b02      	cmp	r3, #2
 80043d8:	d13b      	bne.n	8004452 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2208      	movs	r2, #8
 80043e6:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2200      	movs	r2, #0
 80043ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80043f0:	89ba      	ldrh	r2, [r7, #12]
 80043f2:	7bfb      	ldrb	r3, [r7, #15]
 80043f4:	4619      	mov	r1, r3
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f7ff fe87 	bl	800410a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80043fc:	e029      	b.n	8004452 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80043fe:	893b      	ldrh	r3, [r7, #8]
 8004400:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004402:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004406:	6878      	ldr	r0, [r7, #4]
 8004408:	f000 fdb0 	bl	8004f6c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004414:	89ba      	ldrh	r2, [r7, #12]
 8004416:	7bfb      	ldrb	r3, [r7, #15]
 8004418:	4619      	mov	r1, r3
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fe75 	bl	800410a <HAL_I2C_AddrCallback>
}
 8004420:	e017      	b.n	8004452 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004422:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f000 fda0 	bl	8004f6c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004434:	89ba      	ldrh	r2, [r7, #12]
 8004436:	7bfb      	ldrb	r3, [r7, #15]
 8004438:	4619      	mov	r1, r3
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f7ff fe65 	bl	800410a <HAL_I2C_AddrCallback>
}
 8004440:	e007      	b.n	8004452 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2208      	movs	r2, #8
 8004448:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8004452:	bf00      	nop
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004478:	2b00      	cmp	r3, #0
 800447a:	d008      	beq.n	800448e <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e00c      	b.n	80044a8 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004494:	2b00      	cmp	r3, #0
 8004496:	d007      	beq.n	80044a8 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b29      	cmp	r3, #41	; 0x29
 80044b2:	d112      	bne.n	80044da <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2228      	movs	r2, #40	; 0x28
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2221      	movs	r2, #33	; 0x21
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80044c2:	2101      	movs	r1, #1
 80044c4:	6878      	ldr	r0, [r7, #4]
 80044c6:	f000 fd51 	bl	8004f6c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f7ff fe05 	bl	80040e2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80044d8:	e017      	b.n	800450a <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044e0:	b2db      	uxtb	r3, r3
 80044e2:	2b2a      	cmp	r3, #42	; 0x2a
 80044e4:	d111      	bne.n	800450a <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2228      	movs	r2, #40	; 0x28
 80044ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2222      	movs	r2, #34	; 0x22
 80044f2:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80044f4:	2102      	movs	r1, #2
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 fd38 	bl	8004f6c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f7ff fdf6 	bl	80040f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800450a:	bf00      	nop
 800450c:	3710      	adds	r7, #16
 800450e:	46bd      	mov	sp, r7
 8004510:	bd80      	pop	{r7, pc}
	...

08004514 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b086      	sub	sp, #24
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
 800451c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004530:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2220      	movs	r2, #32
 8004538:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b21      	cmp	r3, #33	; 0x21
 800453e:	d002      	beq.n	8004546 <I2C_ITSlaveCplt+0x32>
 8004540:	7bfb      	ldrb	r3, [r7, #15]
 8004542:	2b29      	cmp	r3, #41	; 0x29
 8004544:	d108      	bne.n	8004558 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004546:	f248 0101 	movw	r1, #32769	; 0x8001
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f000 fd0e 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2221      	movs	r2, #33	; 0x21
 8004554:	631a      	str	r2, [r3, #48]	; 0x30
 8004556:	e019      	b.n	800458c <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b22      	cmp	r3, #34	; 0x22
 800455c:	d002      	beq.n	8004564 <I2C_ITSlaveCplt+0x50>
 800455e:	7bfb      	ldrb	r3, [r7, #15]
 8004560:	2b2a      	cmp	r3, #42	; 0x2a
 8004562:	d108      	bne.n	8004576 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004564:	f248 0102 	movw	r1, #32770	; 0x8002
 8004568:	6878      	ldr	r0, [r7, #4]
 800456a:	f000 fcff 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2222      	movs	r2, #34	; 0x22
 8004572:	631a      	str	r2, [r3, #48]	; 0x30
 8004574:	e00a      	b.n	800458c <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8004576:	7bfb      	ldrb	r3, [r7, #15]
 8004578:	2b28      	cmp	r3, #40	; 0x28
 800457a:	d107      	bne.n	800458c <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 800457c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 fcf3 	bl	8004f6c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800459a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	6859      	ldr	r1, [r3, #4]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	4b62      	ldr	r3, [pc, #392]	; (8004730 <I2C_ITSlaveCplt+0x21c>)
 80045a8:	400b      	ands	r3, r1
 80045aa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 fa2e 	bl	8004a0e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d013      	beq.n	80045e4 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	681a      	ldr	r2, [r3, #0]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80045ca:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01f      	beq.n	8004614 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	b29a      	uxth	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045e2:	e017      	b.n	8004614 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d012      	beq.n	8004614 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80045fc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004602:	2b00      	cmp	r3, #0
 8004604:	d006      	beq.n	8004614 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	b29a      	uxth	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f003 0304 	and.w	r3, r3, #4
 800461a:	2b00      	cmp	r3, #0
 800461c:	d020      	beq.n	8004660 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	f023 0304 	bic.w	r3, r3, #4
 8004624:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004630:	b2d2      	uxtb	r2, r2
 8004632:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004638:	1c5a      	adds	r2, r3, #1
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00c      	beq.n	8004660 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004656:	b29b      	uxth	r3, r3
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004664:	b29b      	uxth	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800466e:	f043 0204 	orr.w	r2, r3, #4
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004688:	2b00      	cmp	r3, #0
 800468a:	d010      	beq.n	80046ae <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004690:	4619      	mov	r1, r3
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f8a4 	bl	80047e0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b28      	cmp	r3, #40	; 0x28
 80046a2:	d141      	bne.n	8004728 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80046a4:	6979      	ldr	r1, [r7, #20]
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f846 	bl	8004738 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80046ac:	e03c      	b.n	8004728 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80046b6:	d014      	beq.n	80046e2 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff fece 	bl	800445a <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	4a1c      	ldr	r2, [pc, #112]	; (8004734 <I2C_ITSlaveCplt+0x220>)
 80046c2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2220      	movs	r2, #32
 80046c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff fd23 	bl	8004126 <HAL_I2C_ListenCpltCallback>
}
 80046e0:	e022      	b.n	8004728 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2b22      	cmp	r3, #34	; 0x22
 80046ec:	d10e      	bne.n	800470c <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2220      	movs	r2, #32
 80046f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f7ff fcf6 	bl	80040f6 <HAL_I2C_SlaveRxCpltCallback>
}
 800470a:	e00d      	b.n	8004728 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2220      	movs	r2, #32
 8004710:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f7ff fcdd 	bl	80040e2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004728:	bf00      	nop
 800472a:	3718      	adds	r7, #24
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}
 8004730:	fe00e800 	.word	0xfe00e800
 8004734:	ffff0000 	.word	0xffff0000

08004738 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b082      	sub	sp, #8
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a25      	ldr	r2, [pc, #148]	; (80047dc <I2C_ITListenCplt+0xa4>)
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2220      	movs	r2, #32
 8004752:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	f003 0304 	and.w	r3, r3, #4
 800476a:	2b00      	cmp	r3, #0
 800476c:	d022      	beq.n	80047b4 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004778:	b2d2      	uxtb	r2, r2
 800477a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004780:	1c5a      	adds	r2, r3, #1
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800478a:	2b00      	cmp	r3, #0
 800478c:	d012      	beq.n	80047b4 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004792:	3b01      	subs	r3, #1
 8004794:	b29a      	uxth	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800479e:	b29b      	uxth	r3, r3
 80047a0:	3b01      	subs	r3, #1
 80047a2:	b29a      	uxth	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ac:	f043 0204 	orr.w	r2, r3, #4
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80047b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80047b8:	6878      	ldr	r0, [r7, #4]
 80047ba:	f000 fbd7 	bl	8004f6c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2210      	movs	r2, #16
 80047c4:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80047ce:	6878      	ldr	r0, [r7, #4]
 80047d0:	f7ff fca9 	bl	8004126 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80047d4:	bf00      	nop
 80047d6:	3708      	adds	r7, #8
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	ffff0000 	.word	0xffff0000

080047e0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b084      	sub	sp, #16
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047f0:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	4a6d      	ldr	r2, [pc, #436]	; (80049b4 <I2C_ITError+0x1d4>)
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	431a      	orrs	r2, r3
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	2b28      	cmp	r3, #40	; 0x28
 8004816:	d005      	beq.n	8004824 <I2C_ITError+0x44>
 8004818:	7bfb      	ldrb	r3, [r7, #15]
 800481a:	2b29      	cmp	r3, #41	; 0x29
 800481c:	d002      	beq.n	8004824 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	2b2a      	cmp	r3, #42	; 0x2a
 8004822:	d10b      	bne.n	800483c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004824:	2103      	movs	r1, #3
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fba0 	bl	8004f6c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2228      	movs	r2, #40	; 0x28
 8004830:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a60      	ldr	r2, [pc, #384]	; (80049b8 <I2C_ITError+0x1d8>)
 8004838:	635a      	str	r2, [r3, #52]	; 0x34
 800483a:	e030      	b.n	800489e <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800483c:	f248 0103 	movw	r1, #32771	; 0x8003
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f000 fb93 	bl	8004f6c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004846:	6878      	ldr	r0, [r7, #4]
 8004848:	f000 f8e1 	bl	8004a0e <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004852:	b2db      	uxtb	r3, r3
 8004854:	2b60      	cmp	r3, #96	; 0x60
 8004856:	d01f      	beq.n	8004898 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2220      	movs	r2, #32
 800485c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b20      	cmp	r3, #32
 800486c:	d114      	bne.n	8004898 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0310 	and.w	r3, r3, #16
 8004878:	2b10      	cmp	r3, #16
 800487a:	d109      	bne.n	8004890 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	2210      	movs	r2, #16
 8004882:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	f043 0204 	orr.w	r2, r3, #4
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2220      	movs	r2, #32
 8004896:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d039      	beq.n	8004920 <I2C_ITError+0x140>
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	2b11      	cmp	r3, #17
 80048b0:	d002      	beq.n	80048b8 <I2C_ITError+0xd8>
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	2b21      	cmp	r3, #33	; 0x21
 80048b6:	d133      	bne.n	8004920 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048c6:	d107      	bne.n	80048d8 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80048d6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fe ff21 	bl	8003724 <HAL_DMA_GetState>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d017      	beq.n	8004918 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ec:	4a33      	ldr	r2, [pc, #204]	; (80049bc <I2C_ITError+0x1dc>)
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7fe fe21 	bl	8003544 <HAL_DMA_Abort_IT>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d04d      	beq.n	80049a4 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004912:	4610      	mov	r0, r2
 8004914:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004916:	e045      	b.n	80049a4 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 f851 	bl	80049c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800491e:	e041      	b.n	80049a4 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004924:	2b00      	cmp	r3, #0
 8004926:	d039      	beq.n	800499c <I2C_ITError+0x1bc>
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	2b12      	cmp	r3, #18
 800492c:	d002      	beq.n	8004934 <I2C_ITError+0x154>
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	2b22      	cmp	r3, #34	; 0x22
 8004932:	d133      	bne.n	800499c <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800493e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004942:	d107      	bne.n	8004954 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004952:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	4618      	mov	r0, r3
 800495a:	f7fe fee3 	bl	8003724 <HAL_DMA_GetState>
 800495e:	4603      	mov	r3, r0
 8004960:	2b01      	cmp	r3, #1
 8004962:	d017      	beq.n	8004994 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004968:	4a14      	ldr	r2, [pc, #80]	; (80049bc <I2C_ITError+0x1dc>)
 800496a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004978:	4618      	mov	r0, r3
 800497a:	f7fe fde3 	bl	8003544 <HAL_DMA_Abort_IT>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	d011      	beq.n	80049a8 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800498e:	4610      	mov	r0, r2
 8004990:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004992:	e009      	b.n	80049a8 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f000 f813 	bl	80049c0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800499a:	e005      	b.n	80049a8 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 f80f 	bl	80049c0 <I2C_TreatErrorCallback>
  }
}
 80049a2:	e002      	b.n	80049aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049a4:	bf00      	nop
 80049a6:	e000      	b.n	80049aa <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80049a8:	bf00      	nop
}
 80049aa:	bf00      	nop
 80049ac:	3710      	adds	r7, #16
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bd80      	pop	{r7, pc}
 80049b2:	bf00      	nop
 80049b4:	ffff0000 	.word	0xffff0000
 80049b8:	08004163 	.word	0x08004163
 80049bc:	08004a57 	.word	0x08004a57

080049c0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b082      	sub	sp, #8
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	2b60      	cmp	r3, #96	; 0x60
 80049d2:	d10e      	bne.n	80049f2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2220      	movs	r2, #32
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f7ff fbaf 	bl	800414e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80049f0:	e009      	b.n	8004a06 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f7ff fb9a 	bl	800413a <HAL_I2C_ErrorCallback>
}
 8004a06:	bf00      	nop
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b083      	sub	sp, #12
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	f003 0302 	and.w	r3, r3, #2
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d103      	bne.n	8004a2c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d007      	beq.n	8004a4a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	699a      	ldr	r2, [r3, #24]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f042 0201 	orr.w	r2, r2, #1
 8004a48:	619a      	str	r2, [r3, #24]
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a54:	4770      	bx	lr

08004a56 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b084      	sub	sp, #16
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a70:	2200      	movs	r2, #0
 8004a72:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a80:	2200      	movs	r2, #0
 8004a82:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8004a84:	68f8      	ldr	r0, [r7, #12]
 8004a86:	f7ff ff9b 	bl	80049c0 <I2C_TreatErrorCallback>
}
 8004a8a:	bf00      	nop
 8004a8c:	3710      	adds	r7, #16
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b084      	sub	sp, #16
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	603b      	str	r3, [r7, #0]
 8004a9e:	4613      	mov	r3, r2
 8004aa0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aa2:	e031      	b.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa4:	683b      	ldr	r3, [r7, #0]
 8004aa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aaa:	d02d      	beq.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004aac:	f7fc ff10 	bl	80018d0 <HAL_GetTick>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	1ad3      	subs	r3, r2, r3
 8004ab6:	683a      	ldr	r2, [r7, #0]
 8004ab8:	429a      	cmp	r2, r3
 8004aba:	d302      	bcc.n	8004ac2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d122      	bne.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	699a      	ldr	r2, [r3, #24]
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	68ba      	ldr	r2, [r7, #8]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d113      	bne.n	8004b08 <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae4:	f043 0220 	orr.w	r2, r3, #32
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2220      	movs	r2, #32
 8004af0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e00f      	b.n	8004b28 <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	699a      	ldr	r2, [r3, #24]
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	4013      	ands	r3, r2
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	429a      	cmp	r2, r3
 8004b16:	bf0c      	ite	eq
 8004b18:	2301      	moveq	r3, #1
 8004b1a:	2300      	movne	r3, #0
 8004b1c:	b2db      	uxtb	r3, r3
 8004b1e:	461a      	mov	r2, r3
 8004b20:	79fb      	ldrb	r3, [r7, #7]
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d0be      	beq.n	8004aa4 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3710      	adds	r7, #16
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	bd80      	pop	{r7, pc}

08004b30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	60f8      	str	r0, [r7, #12]
 8004b38:	60b9      	str	r1, [r7, #8]
 8004b3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004b3c:	e033      	b.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004b3e:	687a      	ldr	r2, [r7, #4]
 8004b40:	68b9      	ldr	r1, [r7, #8]
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 f900 	bl	8004d48 <I2C_IsErrorOccurred>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d001      	beq.n	8004b52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e031      	b.n	8004bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b52:	68bb      	ldr	r3, [r7, #8]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d025      	beq.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5a:	f7fc feb9 	bl	80018d0 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d11a      	bne.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f003 0302 	and.w	r3, r3, #2
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d013      	beq.n	8004ba6 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b82:	f043 0220 	orr.w	r2, r3, #32
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2220      	movs	r2, #32
 8004b8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e007      	b.n	8004bb6 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f003 0302 	and.w	r3, r3, #2
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d1c4      	bne.n	8004b3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b084      	sub	sp, #16
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	60f8      	str	r0, [r7, #12]
 8004bc6:	60b9      	str	r1, [r7, #8]
 8004bc8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004bca:	e02f      	b.n	8004c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	68b9      	ldr	r1, [r7, #8]
 8004bd0:	68f8      	ldr	r0, [r7, #12]
 8004bd2:	f000 f8b9 	bl	8004d48 <I2C_IsErrorOccurred>
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d001      	beq.n	8004be0 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e02d      	b.n	8004c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004be0:	f7fc fe76 	bl	80018d0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	429a      	cmp	r2, r3
 8004bee:	d302      	bcc.n	8004bf6 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d11a      	bne.n	8004c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	f003 0320 	and.w	r3, r3, #32
 8004c00:	2b20      	cmp	r3, #32
 8004c02:	d013      	beq.n	8004c2c <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c08:	f043 0220 	orr.w	r2, r3, #32
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e007      	b.n	8004c3c <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	699b      	ldr	r3, [r3, #24]
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	d1c8      	bne.n	8004bcc <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c3a:	2300      	movs	r3, #0
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	3710      	adds	r7, #16
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bd80      	pop	{r7, pc}

08004c44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b084      	sub	sp, #16
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c50:	e06b      	b.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	68b9      	ldr	r1, [r7, #8]
 8004c56:	68f8      	ldr	r0, [r7, #12]
 8004c58:	f000 f876 	bl	8004d48 <I2C_IsErrorOccurred>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d001      	beq.n	8004c66 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	e069      	b.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	699b      	ldr	r3, [r3, #24]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d138      	bne.n	8004ce6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	f003 0304 	and.w	r3, r3, #4
 8004c7e:	2b04      	cmp	r3, #4
 8004c80:	d105      	bne.n	8004c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d001      	beq.n	8004c8e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	e055      	b.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	f003 0310 	and.w	r3, r3, #16
 8004c98:	2b10      	cmp	r3, #16
 8004c9a:	d107      	bne.n	8004cac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2210      	movs	r2, #16
 8004ca2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	2204      	movs	r2, #4
 8004ca8:	645a      	str	r2, [r3, #68]	; 0x44
 8004caa:	e002      	b.n	8004cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2200      	movs	r2, #0
 8004cb0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	6859      	ldr	r1, [r3, #4]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <I2C_WaitOnRXNEFlagUntilTimeout+0x100>)
 8004cc6:	400b      	ands	r3, r1
 8004cc8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2220      	movs	r2, #32
 8004cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	e029      	b.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ce6:	f7fc fdf3 	bl	80018d0 <HAL_GetTick>
 8004cea:	4602      	mov	r2, r0
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	68ba      	ldr	r2, [r7, #8]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d302      	bcc.n	8004cfc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d116      	bne.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b04      	cmp	r3, #4
 8004d08:	d00f      	beq.n	8004d2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d0e:	f043 0220 	orr.w	r2, r3, #32
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	e007      	b.n	8004d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d18c      	bne.n	8004c52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	fe00e800 	.word	0xfe00e800

08004d48 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b08a      	sub	sp, #40	; 0x28
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004d6a:	69bb      	ldr	r3, [r7, #24]
 8004d6c:	f003 0310 	and.w	r3, r3, #16
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d068      	beq.n	8004e46 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2210      	movs	r2, #16
 8004d7a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004d7c:	e049      	b.n	8004e12 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d84:	d045      	beq.n	8004e12 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004d86:	f7fc fda3 	bl	80018d0 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d302      	bcc.n	8004d9c <I2C_IsErrorOccurred+0x54>
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d13a      	bne.n	8004e12 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004da6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004dae:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699b      	ldr	r3, [r3, #24]
 8004db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004dbe:	d121      	bne.n	8004e04 <I2C_IsErrorOccurred+0xbc>
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004dc6:	d01d      	beq.n	8004e04 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004dc8:	7cfb      	ldrb	r3, [r7, #19]
 8004dca:	2b20      	cmp	r3, #32
 8004dcc:	d01a      	beq.n	8004e04 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ddc:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004dde:	f7fc fd77 	bl	80018d0 <HAL_GetTick>
 8004de2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004de4:	e00e      	b.n	8004e04 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004de6:	f7fc fd73 	bl	80018d0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b19      	cmp	r3, #25
 8004df2:	d907      	bls.n	8004e04 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8004df4:	6a3b      	ldr	r3, [r7, #32]
 8004df6:	f043 0320 	orr.w	r3, r3, #32
 8004dfa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004e02:	e006      	b.n	8004e12 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	699b      	ldr	r3, [r3, #24]
 8004e0a:	f003 0320 	and.w	r3, r3, #32
 8004e0e:	2b20      	cmp	r3, #32
 8004e10:	d1e9      	bne.n	8004de6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f003 0320 	and.w	r3, r3, #32
 8004e1c:	2b20      	cmp	r3, #32
 8004e1e:	d003      	beq.n	8004e28 <I2C_IsErrorOccurred+0xe0>
 8004e20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d0aa      	beq.n	8004d7e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004e28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d103      	bne.n	8004e38 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2220      	movs	r2, #32
 8004e36:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004e38:	6a3b      	ldr	r3, [r7, #32]
 8004e3a:	f043 0304 	orr.w	r3, r3, #4
 8004e3e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004e4e:	69bb      	ldr	r3, [r7, #24]
 8004e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00b      	beq.n	8004e70 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	f043 0301 	orr.w	r3, r3, #1
 8004e5e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e68:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004e70:	69bb      	ldr	r3, [r7, #24]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00b      	beq.n	8004e92 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	f043 0308 	orr.w	r3, r3, #8
 8004e80:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e8a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	f043 0302 	orr.w	r3, r3, #2
 8004ea2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eac:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004eb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01c      	beq.n	8004ef6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004ebc:	68f8      	ldr	r0, [r7, #12]
 8004ebe:	f7ff fda6 	bl	8004a0e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	6859      	ldr	r1, [r3, #4]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	4b0d      	ldr	r3, [pc, #52]	; (8004f04 <I2C_IsErrorOccurred+0x1bc>)
 8004ece:	400b      	ands	r3, r1
 8004ed0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed6:	6a3b      	ldr	r3, [r7, #32]
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3728      	adds	r7, #40	; 0x28
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
 8004f02:	bf00      	nop
 8004f04:	fe00e800 	.word	0xfe00e800

08004f08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	607b      	str	r3, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	817b      	strh	r3, [r7, #10]
 8004f16:	4613      	mov	r3, r2
 8004f18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f1a:	897b      	ldrh	r3, [r7, #10]
 8004f1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f20:	7a7b      	ldrb	r3, [r7, #9]
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f28:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004f2e:	6a3b      	ldr	r3, [r7, #32]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004f36:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	0d5b      	lsrs	r3, r3, #21
 8004f42:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004f46:	4b08      	ldr	r3, [pc, #32]	; (8004f68 <I2C_TransferConfig+0x60>)
 8004f48:	430b      	orrs	r3, r1
 8004f4a:	43db      	mvns	r3, r3
 8004f4c:	ea02 0103 	and.w	r1, r2, r3
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	430a      	orrs	r2, r1
 8004f58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr
 8004f66:	bf00      	nop
 8004f68:	03ff63ff 	.word	0x03ff63ff

08004f6c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b085      	sub	sp, #20
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	460b      	mov	r3, r1
 8004f76:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004f78:	2300      	movs	r3, #0
 8004f7a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004f7c:	887b      	ldrh	r3, [r7, #2]
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d00f      	beq.n	8004fa6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004f8c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f9a:	2b28      	cmp	r3, #40	; 0x28
 8004f9c:	d003      	beq.n	8004fa6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004fa4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004fa6:	887b      	ldrh	r3, [r7, #2]
 8004fa8:	f003 0302 	and.w	r3, r3, #2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d00f      	beq.n	8004fd0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004fb6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fc4:	2b28      	cmp	r3, #40	; 0x28
 8004fc6:	d003      	beq.n	8004fd0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004fce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004fd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	da03      	bge.n	8004fe0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004fde:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004fe0:	887b      	ldrh	r3, [r7, #2]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d103      	bne.n	8004fee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004fec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004fee:	887b      	ldrh	r3, [r7, #2]
 8004ff0:	2b20      	cmp	r3, #32
 8004ff2:	d103      	bne.n	8004ffc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f043 0320 	orr.w	r3, r3, #32
 8004ffa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004ffc:	887b      	ldrh	r3, [r7, #2]
 8004ffe:	2b40      	cmp	r3, #64	; 0x40
 8005000:	d103      	bne.n	800500a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005008:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	43da      	mvns	r2, r3
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	400a      	ands	r2, r1
 800501a:	601a      	str	r2, [r3, #0]
}
 800501c:	bf00      	nop
 800501e:	3714      	adds	r7, #20
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005038:	b2db      	uxtb	r3, r3
 800503a:	2b20      	cmp	r3, #32
 800503c:	d138      	bne.n	80050b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005044:	2b01      	cmp	r3, #1
 8005046:	d101      	bne.n	800504c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005048:	2302      	movs	r3, #2
 800504a:	e032      	b.n	80050b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2224      	movs	r2, #36	; 0x24
 8005058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0201 	bic.w	r2, r2, #1
 800506a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800507a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6819      	ldr	r1, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	683a      	ldr	r2, [r7, #0]
 8005088:	430a      	orrs	r2, r1
 800508a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80050ac:	2300      	movs	r3, #0
 80050ae:	e000      	b.n	80050b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80050b0:	2302      	movs	r3, #2
  }
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	370c      	adds	r7, #12
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr

080050be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80050be:	b480      	push	{r7}
 80050c0:	b085      	sub	sp, #20
 80050c2:	af00      	add	r7, sp, #0
 80050c4:	6078      	str	r0, [r7, #4]
 80050c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	2b20      	cmp	r3, #32
 80050d2:	d139      	bne.n	8005148 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d101      	bne.n	80050e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050de:	2302      	movs	r3, #2
 80050e0:	e033      	b.n	800514a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2224      	movs	r2, #36	; 0x24
 80050ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f022 0201 	bic.w	r2, r2, #1
 8005100:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005110:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	021b      	lsls	r3, r3, #8
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	4313      	orrs	r3, r2
 800511a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68fa      	ldr	r2, [r7, #12]
 8005122:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f042 0201 	orr.w	r2, r2, #1
 8005132:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2220      	movs	r2, #32
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2200      	movs	r2, #0
 8005140:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005144:	2300      	movs	r3, #0
 8005146:	e000      	b.n	800514a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005148:	2302      	movs	r3, #2
  }
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr
	...

08005158 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005158:	b480      	push	{r7}
 800515a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a04      	ldr	r2, [pc, #16]	; (8005174 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8005162:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005166:	6013      	str	r3, [r2, #0]
}
 8005168:	bf00      	nop
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr
 8005172:	bf00      	nop
 8005174:	40007000 	.word	0x40007000

08005178 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800517c:	4b04      	ldr	r3, [pc, #16]	; (8005190 <HAL_PWREx_GetVoltageRange+0x18>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40007000 	.word	0x40007000

08005194 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051a2:	d130      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80051a4:	4b23      	ldr	r3, [pc, #140]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80051ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80051b0:	d038      	beq.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051b2:	4b20      	ldr	r3, [pc, #128]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80051ba:	4a1e      	ldr	r2, [pc, #120]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80051c0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051c2:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2232      	movs	r2, #50	; 0x32
 80051c8:	fb02 f303 	mul.w	r3, r2, r3
 80051cc:	4a1b      	ldr	r2, [pc, #108]	; (800523c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80051ce:	fba2 2303 	umull	r2, r3, r2, r3
 80051d2:	0c9b      	lsrs	r3, r3, #18
 80051d4:	3301      	adds	r3, #1
 80051d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051d8:	e002      	b.n	80051e0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3b01      	subs	r3, #1
 80051de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051e0:	4b14      	ldr	r3, [pc, #80]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051e2:	695b      	ldr	r3, [r3, #20]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051ec:	d102      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1f2      	bne.n	80051da <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051f4:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80051f6:	695b      	ldr	r3, [r3, #20]
 80051f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005200:	d110      	bne.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005206:	4b0b      	ldr	r3, [pc, #44]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800520e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005212:	d007      	beq.n	8005224 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005214:	4b07      	ldr	r3, [pc, #28]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800521c:	4a05      	ldr	r2, [pc, #20]	; (8005234 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800521e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005222:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
 8005232:	bf00      	nop
 8005234:	40007000 	.word	0x40007000
 8005238:	20000004 	.word	0x20000004
 800523c:	431bde83 	.word	0x431bde83

08005240 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b088      	sub	sp, #32
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d102      	bne.n	8005254 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	f000 bc02 	b.w	8005a58 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005254:	4b96      	ldr	r3, [pc, #600]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	f003 030c 	and.w	r3, r3, #12
 800525c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800525e:	4b94      	ldr	r3, [pc, #592]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005260:	68db      	ldr	r3, [r3, #12]
 8005262:	f003 0303 	and.w	r3, r3, #3
 8005266:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80e4 	beq.w	800543e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d007      	beq.n	800528c <HAL_RCC_OscConfig+0x4c>
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	2b0c      	cmp	r3, #12
 8005280:	f040 808b 	bne.w	800539a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	2b01      	cmp	r3, #1
 8005288:	f040 8087 	bne.w	800539a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800528c:	4b88      	ldr	r3, [pc, #544]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f003 0302 	and.w	r3, r3, #2
 8005294:	2b00      	cmp	r3, #0
 8005296:	d005      	beq.n	80052a4 <HAL_RCC_OscConfig+0x64>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	699b      	ldr	r3, [r3, #24]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80052a0:	2301      	movs	r3, #1
 80052a2:	e3d9      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1a      	ldr	r2, [r3, #32]
 80052a8:	4b81      	ldr	r3, [pc, #516]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <HAL_RCC_OscConfig+0x7e>
 80052b4:	4b7e      	ldr	r3, [pc, #504]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052bc:	e005      	b.n	80052ca <HAL_RCC_OscConfig+0x8a>
 80052be:	4b7c      	ldr	r3, [pc, #496]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d223      	bcs.n	8005316 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6a1b      	ldr	r3, [r3, #32]
 80052d2:	4618      	mov	r0, r3
 80052d4:	f000 fd8c 	bl	8005df0 <RCC_SetFlashLatencyFromMSIRange>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	e3ba      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80052e2:	4b73      	ldr	r3, [pc, #460]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a72      	ldr	r2, [pc, #456]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052e8:	f043 0308 	orr.w	r3, r3, #8
 80052ec:	6013      	str	r3, [r2, #0]
 80052ee:	4b70      	ldr	r3, [pc, #448]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	496d      	ldr	r1, [pc, #436]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80052fc:	4313      	orrs	r3, r2
 80052fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005300:	4b6b      	ldr	r3, [pc, #428]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69db      	ldr	r3, [r3, #28]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	4968      	ldr	r1, [pc, #416]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005310:	4313      	orrs	r3, r2
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	e025      	b.n	8005362 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005316:	4b66      	ldr	r3, [pc, #408]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a65      	ldr	r2, [pc, #404]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800531c:	f043 0308 	orr.w	r3, r3, #8
 8005320:	6013      	str	r3, [r2, #0]
 8005322:	4b63      	ldr	r3, [pc, #396]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6a1b      	ldr	r3, [r3, #32]
 800532e:	4960      	ldr	r1, [pc, #384]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005330:	4313      	orrs	r3, r2
 8005332:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005334:	4b5e      	ldr	r3, [pc, #376]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	021b      	lsls	r3, r3, #8
 8005342:	495b      	ldr	r1, [pc, #364]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005344:	4313      	orrs	r3, r2
 8005346:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d109      	bne.n	8005362 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 fd4c 	bl	8005df0 <RCC_SetFlashLatencyFromMSIRange>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d001      	beq.n	8005362 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e37a      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005362:	f000 fc81 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005366:	4602      	mov	r2, r0
 8005368:	4b51      	ldr	r3, [pc, #324]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	091b      	lsrs	r3, r3, #4
 800536e:	f003 030f 	and.w	r3, r3, #15
 8005372:	4950      	ldr	r1, [pc, #320]	; (80054b4 <HAL_RCC_OscConfig+0x274>)
 8005374:	5ccb      	ldrb	r3, [r1, r3]
 8005376:	f003 031f 	and.w	r3, r3, #31
 800537a:	fa22 f303 	lsr.w	r3, r2, r3
 800537e:	4a4e      	ldr	r2, [pc, #312]	; (80054b8 <HAL_RCC_OscConfig+0x278>)
 8005380:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005382:	4b4e      	ldr	r3, [pc, #312]	; (80054bc <HAL_RCC_OscConfig+0x27c>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4618      	mov	r0, r3
 8005388:	f7fc fa52 	bl	8001830 <HAL_InitTick>
 800538c:	4603      	mov	r3, r0
 800538e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005390:	7bfb      	ldrb	r3, [r7, #15]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d052      	beq.n	800543c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005396:	7bfb      	ldrb	r3, [r7, #15]
 8005398:	e35e      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	699b      	ldr	r3, [r3, #24]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d032      	beq.n	8005408 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80053a2:	4b43      	ldr	r3, [pc, #268]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a42      	ldr	r2, [pc, #264]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053a8:	f043 0301 	orr.w	r3, r3, #1
 80053ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80053ae:	f7fc fa8f 	bl	80018d0 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053b4:	e008      	b.n	80053c8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80053b6:	f7fc fa8b 	bl	80018d0 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e347      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80053c8:	4b39      	ldr	r3, [pc, #228]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0f0      	beq.n	80053b6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80053d4:	4b36      	ldr	r3, [pc, #216]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a35      	ldr	r2, [pc, #212]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053da:	f043 0308 	orr.w	r3, r3, #8
 80053de:	6013      	str	r3, [r2, #0]
 80053e0:	4b33      	ldr	r3, [pc, #204]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6a1b      	ldr	r3, [r3, #32]
 80053ec:	4930      	ldr	r1, [pc, #192]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053ee:	4313      	orrs	r3, r2
 80053f0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80053f2:	4b2f      	ldr	r3, [pc, #188]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80053f4:	685b      	ldr	r3, [r3, #4]
 80053f6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	69db      	ldr	r3, [r3, #28]
 80053fe:	021b      	lsls	r3, r3, #8
 8005400:	492b      	ldr	r1, [pc, #172]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005402:	4313      	orrs	r3, r2
 8005404:	604b      	str	r3, [r1, #4]
 8005406:	e01a      	b.n	800543e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005408:	4b29      	ldr	r3, [pc, #164]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a28      	ldr	r2, [pc, #160]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800540e:	f023 0301 	bic.w	r3, r3, #1
 8005412:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005414:	f7fc fa5c 	bl	80018d0 <HAL_GetTick>
 8005418:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800541a:	e008      	b.n	800542e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800541c:	f7fc fa58 	bl	80018d0 <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	2b02      	cmp	r3, #2
 8005428:	d901      	bls.n	800542e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800542a:	2303      	movs	r3, #3
 800542c:	e314      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800542e:	4b20      	ldr	r3, [pc, #128]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f003 0302 	and.w	r3, r3, #2
 8005436:	2b00      	cmp	r3, #0
 8005438:	d1f0      	bne.n	800541c <HAL_RCC_OscConfig+0x1dc>
 800543a:	e000      	b.n	800543e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800543c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	2b00      	cmp	r3, #0
 8005448:	d073      	beq.n	8005532 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	2b08      	cmp	r3, #8
 800544e:	d005      	beq.n	800545c <HAL_RCC_OscConfig+0x21c>
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	2b0c      	cmp	r3, #12
 8005454:	d10e      	bne.n	8005474 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	2b03      	cmp	r3, #3
 800545a:	d10b      	bne.n	8005474 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800545c:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d063      	beq.n	8005530 <HAL_RCC_OscConfig+0x2f0>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d15f      	bne.n	8005530 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e2f1      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800547c:	d106      	bne.n	800548c <HAL_RCC_OscConfig+0x24c>
 800547e:	4b0c      	ldr	r3, [pc, #48]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a0b      	ldr	r2, [pc, #44]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005484:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005488:	6013      	str	r3, [r2, #0]
 800548a:	e025      	b.n	80054d8 <HAL_RCC_OscConfig+0x298>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005494:	d114      	bne.n	80054c0 <HAL_RCC_OscConfig+0x280>
 8005496:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a05      	ldr	r2, [pc, #20]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 800549c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80054a0:	6013      	str	r3, [r2, #0]
 80054a2:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a02      	ldr	r2, [pc, #8]	; (80054b0 <HAL_RCC_OscConfig+0x270>)
 80054a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ac:	6013      	str	r3, [r2, #0]
 80054ae:	e013      	b.n	80054d8 <HAL_RCC_OscConfig+0x298>
 80054b0:	40021000 	.word	0x40021000
 80054b4:	080086e8 	.word	0x080086e8
 80054b8:	20000004 	.word	0x20000004
 80054bc:	20000008 	.word	0x20000008
 80054c0:	4ba0      	ldr	r3, [pc, #640]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a9f      	ldr	r2, [pc, #636]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80054c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054ca:	6013      	str	r3, [r2, #0]
 80054cc:	4b9d      	ldr	r3, [pc, #628]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a9c      	ldr	r2, [pc, #624]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80054d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80054d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d013      	beq.n	8005508 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054e0:	f7fc f9f6 	bl	80018d0 <HAL_GetTick>
 80054e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054e6:	e008      	b.n	80054fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80054e8:	f7fc f9f2 	bl	80018d0 <HAL_GetTick>
 80054ec:	4602      	mov	r2, r0
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	1ad3      	subs	r3, r2, r3
 80054f2:	2b64      	cmp	r3, #100	; 0x64
 80054f4:	d901      	bls.n	80054fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80054f6:	2303      	movs	r3, #3
 80054f8:	e2ae      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80054fa:	4b92      	ldr	r3, [pc, #584]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d0f0      	beq.n	80054e8 <HAL_RCC_OscConfig+0x2a8>
 8005506:	e014      	b.n	8005532 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005508:	f7fc f9e2 	bl	80018d0 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005510:	f7fc f9de 	bl	80018d0 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b64      	cmp	r3, #100	; 0x64
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e29a      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005522:	4b88      	ldr	r3, [pc, #544]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x2d0>
 800552e:	e000      	b.n	8005532 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f003 0302 	and.w	r3, r3, #2
 800553a:	2b00      	cmp	r3, #0
 800553c:	d060      	beq.n	8005600 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800553e:	69bb      	ldr	r3, [r7, #24]
 8005540:	2b04      	cmp	r3, #4
 8005542:	d005      	beq.n	8005550 <HAL_RCC_OscConfig+0x310>
 8005544:	69bb      	ldr	r3, [r7, #24]
 8005546:	2b0c      	cmp	r3, #12
 8005548:	d119      	bne.n	800557e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	2b02      	cmp	r3, #2
 800554e:	d116      	bne.n	800557e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005550:	4b7c      	ldr	r3, [pc, #496]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005558:	2b00      	cmp	r3, #0
 800555a:	d005      	beq.n	8005568 <HAL_RCC_OscConfig+0x328>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d101      	bne.n	8005568 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005564:	2301      	movs	r3, #1
 8005566:	e277      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005568:	4b76      	ldr	r3, [pc, #472]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	061b      	lsls	r3, r3, #24
 8005576:	4973      	ldr	r1, [pc, #460]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005578:	4313      	orrs	r3, r2
 800557a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800557c:	e040      	b.n	8005600 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d023      	beq.n	80055ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005586:	4b6f      	ldr	r3, [pc, #444]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a6e      	ldr	r2, [pc, #440]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800558c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005590:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005592:	f7fc f99d 	bl	80018d0 <HAL_GetTick>
 8005596:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005598:	e008      	b.n	80055ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800559a:	f7fc f999 	bl	80018d0 <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b02      	cmp	r3, #2
 80055a6:	d901      	bls.n	80055ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80055a8:	2303      	movs	r3, #3
 80055aa:	e255      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055ac:	4b65      	ldr	r3, [pc, #404]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0f0      	beq.n	800559a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055b8:	4b62      	ldr	r3, [pc, #392]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	061b      	lsls	r3, r3, #24
 80055c6:	495f      	ldr	r1, [pc, #380]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055c8:	4313      	orrs	r3, r2
 80055ca:	604b      	str	r3, [r1, #4]
 80055cc:	e018      	b.n	8005600 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055ce:	4b5d      	ldr	r3, [pc, #372]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a5c      	ldr	r2, [pc, #368]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055da:	f7fc f979 	bl	80018d0 <HAL_GetTick>
 80055de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055e0:	e008      	b.n	80055f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80055e2:	f7fc f975 	bl	80018d0 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d901      	bls.n	80055f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e231      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80055f4:	4b53      	ldr	r3, [pc, #332]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1f0      	bne.n	80055e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d03c      	beq.n	8005686 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	695b      	ldr	r3, [r3, #20]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d01c      	beq.n	800564e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005614:	4b4b      	ldr	r3, [pc, #300]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005616:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800561a:	4a4a      	ldr	r2, [pc, #296]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800561c:	f043 0301 	orr.w	r3, r3, #1
 8005620:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005624:	f7fc f954 	bl	80018d0 <HAL_GetTick>
 8005628:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800562a:	e008      	b.n	800563e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800562c:	f7fc f950 	bl	80018d0 <HAL_GetTick>
 8005630:	4602      	mov	r2, r0
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	2b02      	cmp	r3, #2
 8005638:	d901      	bls.n	800563e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e20c      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800563e:	4b41      	ldr	r3, [pc, #260]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0ef      	beq.n	800562c <HAL_RCC_OscConfig+0x3ec>
 800564c:	e01b      	b.n	8005686 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800564e:	4b3d      	ldr	r3, [pc, #244]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	4a3b      	ldr	r2, [pc, #236]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005656:	f023 0301 	bic.w	r3, r3, #1
 800565a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800565e:	f7fc f937 	bl	80018d0 <HAL_GetTick>
 8005662:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005664:	e008      	b.n	8005678 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005666:	f7fc f933 	bl	80018d0 <HAL_GetTick>
 800566a:	4602      	mov	r2, r0
 800566c:	693b      	ldr	r3, [r7, #16]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	2b02      	cmp	r3, #2
 8005672:	d901      	bls.n	8005678 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005674:	2303      	movs	r3, #3
 8005676:	e1ef      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005678:	4b32      	ldr	r3, [pc, #200]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800567a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800567e:	f003 0302 	and.w	r3, r3, #2
 8005682:	2b00      	cmp	r3, #0
 8005684:	d1ef      	bne.n	8005666 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0304 	and.w	r3, r3, #4
 800568e:	2b00      	cmp	r3, #0
 8005690:	f000 80a6 	beq.w	80057e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005694:	2300      	movs	r3, #0
 8005696:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005698:	4b2a      	ldr	r3, [pc, #168]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800569a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800569c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10d      	bne.n	80056c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80056a4:	4b27      	ldr	r3, [pc, #156]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056a8:	4a26      	ldr	r2, [pc, #152]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80056aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056ae:	6593      	str	r3, [r2, #88]	; 0x58
 80056b0:	4b24      	ldr	r3, [pc, #144]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 80056b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80056bc:	2301      	movs	r3, #1
 80056be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056c0:	4b21      	ldr	r3, [pc, #132]	; (8005748 <HAL_RCC_OscConfig+0x508>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d118      	bne.n	80056fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80056cc:	4b1e      	ldr	r3, [pc, #120]	; (8005748 <HAL_RCC_OscConfig+0x508>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a1d      	ldr	r2, [pc, #116]	; (8005748 <HAL_RCC_OscConfig+0x508>)
 80056d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80056d8:	f7fc f8fa 	bl	80018d0 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056de:	e008      	b.n	80056f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056e0:	f7fc f8f6 	bl	80018d0 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	2b02      	cmp	r3, #2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e1b2      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056f2:	4b15      	ldr	r3, [pc, #84]	; (8005748 <HAL_RCC_OscConfig+0x508>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0f0      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d108      	bne.n	8005718 <HAL_RCC_OscConfig+0x4d8>
 8005706:	4b0f      	ldr	r3, [pc, #60]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800570c:	4a0d      	ldr	r2, [pc, #52]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 800570e:	f043 0301 	orr.w	r3, r3, #1
 8005712:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005716:	e029      	b.n	800576c <HAL_RCC_OscConfig+0x52c>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	2b05      	cmp	r3, #5
 800571e:	d115      	bne.n	800574c <HAL_RCC_OscConfig+0x50c>
 8005720:	4b08      	ldr	r3, [pc, #32]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005726:	4a07      	ldr	r2, [pc, #28]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005728:	f043 0304 	orr.w	r3, r3, #4
 800572c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005730:	4b04      	ldr	r3, [pc, #16]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005736:	4a03      	ldr	r2, [pc, #12]	; (8005744 <HAL_RCC_OscConfig+0x504>)
 8005738:	f043 0301 	orr.w	r3, r3, #1
 800573c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005740:	e014      	b.n	800576c <HAL_RCC_OscConfig+0x52c>
 8005742:	bf00      	nop
 8005744:	40021000 	.word	0x40021000
 8005748:	40007000 	.word	0x40007000
 800574c:	4b9a      	ldr	r3, [pc, #616]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 800574e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005752:	4a99      	ldr	r2, [pc, #612]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005754:	f023 0301 	bic.w	r3, r3, #1
 8005758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800575c:	4b96      	ldr	r3, [pc, #600]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 800575e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005762:	4a95      	ldr	r2, [pc, #596]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005764:	f023 0304 	bic.w	r3, r3, #4
 8005768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d016      	beq.n	80057a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005774:	f7fc f8ac 	bl	80018d0 <HAL_GetTick>
 8005778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800577a:	e00a      	b.n	8005792 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800577c:	f7fc f8a8 	bl	80018d0 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	f241 3288 	movw	r2, #5000	; 0x1388
 800578a:	4293      	cmp	r3, r2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e162      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005792:	4b89      	ldr	r3, [pc, #548]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005794:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d0ed      	beq.n	800577c <HAL_RCC_OscConfig+0x53c>
 80057a0:	e015      	b.n	80057ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a2:	f7fc f895 	bl	80018d0 <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057a8:	e00a      	b.n	80057c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057aa:	f7fc f891 	bl	80018d0 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d901      	bls.n	80057c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e14b      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80057c0:	4b7d      	ldr	r3, [pc, #500]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80057c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c6:	f003 0302 	and.w	r3, r3, #2
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1ed      	bne.n	80057aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80057ce:	7ffb      	ldrb	r3, [r7, #31]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d105      	bne.n	80057e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80057d4:	4b78      	ldr	r3, [pc, #480]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80057d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d8:	4a77      	ldr	r2, [pc, #476]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80057da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057de:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 0320 	and.w	r3, r3, #32
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d03c      	beq.n	8005866 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d01c      	beq.n	800582e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057f4:	4b70      	ldr	r3, [pc, #448]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80057f6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057fa:	4a6f      	ldr	r2, [pc, #444]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80057fc:	f043 0301 	orr.w	r3, r3, #1
 8005800:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005804:	f7fc f864 	bl	80018d0 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800580a:	e008      	b.n	800581e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800580c:	f7fc f860 	bl	80018d0 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b02      	cmp	r3, #2
 8005818:	d901      	bls.n	800581e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e11c      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800581e:	4b66      	ldr	r3, [pc, #408]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005824:	f003 0302 	and.w	r3, r3, #2
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0ef      	beq.n	800580c <HAL_RCC_OscConfig+0x5cc>
 800582c:	e01b      	b.n	8005866 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800582e:	4b62      	ldr	r3, [pc, #392]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005830:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005834:	4a60      	ldr	r2, [pc, #384]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005836:	f023 0301 	bic.w	r3, r3, #1
 800583a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800583e:	f7fc f847 	bl	80018d0 <HAL_GetTick>
 8005842:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005844:	e008      	b.n	8005858 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005846:	f7fc f843 	bl	80018d0 <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b02      	cmp	r3, #2
 8005852:	d901      	bls.n	8005858 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0ff      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005858:	4b57      	ldr	r3, [pc, #348]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 800585a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800585e:	f003 0302 	and.w	r3, r3, #2
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1ef      	bne.n	8005846 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	2b00      	cmp	r3, #0
 800586c:	f000 80f3 	beq.w	8005a56 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005874:	2b02      	cmp	r3, #2
 8005876:	f040 80c9 	bne.w	8005a0c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800587a:	4b4f      	ldr	r3, [pc, #316]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 800587c:	68db      	ldr	r3, [r3, #12]
 800587e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	f003 0203 	and.w	r2, r3, #3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800588a:	429a      	cmp	r2, r3
 800588c:	d12c      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005898:	3b01      	subs	r3, #1
 800589a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800589c:	429a      	cmp	r2, r3
 800589e:	d123      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058aa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d11b      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ba:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80058bc:	429a      	cmp	r2, r3
 80058be:	d113      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	3b01      	subs	r3, #1
 80058ce:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d109      	bne.n	80058e8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058de:	085b      	lsrs	r3, r3, #1
 80058e0:	3b01      	subs	r3, #1
 80058e2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d06b      	beq.n	80059c0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b0c      	cmp	r3, #12
 80058ec:	d062      	beq.n	80059b4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80058ee:	4b32      	ldr	r3, [pc, #200]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80058fa:	2301      	movs	r3, #1
 80058fc:	e0ac      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80058fe:	4b2e      	ldr	r3, [pc, #184]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005908:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800590a:	f7fb ffe1 	bl	80018d0 <HAL_GetTick>
 800590e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005910:	e008      	b.n	8005924 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005912:	f7fb ffdd 	bl	80018d0 <HAL_GetTick>
 8005916:	4602      	mov	r2, r0
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	1ad3      	subs	r3, r2, r3
 800591c:	2b02      	cmp	r3, #2
 800591e:	d901      	bls.n	8005924 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8005920:	2303      	movs	r3, #3
 8005922:	e099      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005924:	4b24      	ldr	r3, [pc, #144]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800592c:	2b00      	cmp	r3, #0
 800592e:	d1f0      	bne.n	8005912 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005930:	4b21      	ldr	r3, [pc, #132]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005932:	68da      	ldr	r2, [r3, #12]
 8005934:	4b21      	ldr	r3, [pc, #132]	; (80059bc <HAL_RCC_OscConfig+0x77c>)
 8005936:	4013      	ands	r3, r2
 8005938:	687a      	ldr	r2, [r7, #4]
 800593a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005940:	3a01      	subs	r2, #1
 8005942:	0112      	lsls	r2, r2, #4
 8005944:	4311      	orrs	r1, r2
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800594a:	0212      	lsls	r2, r2, #8
 800594c:	4311      	orrs	r1, r2
 800594e:	687a      	ldr	r2, [r7, #4]
 8005950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005952:	0852      	lsrs	r2, r2, #1
 8005954:	3a01      	subs	r2, #1
 8005956:	0552      	lsls	r2, r2, #21
 8005958:	4311      	orrs	r1, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800595e:	0852      	lsrs	r2, r2, #1
 8005960:	3a01      	subs	r2, #1
 8005962:	0652      	lsls	r2, r2, #25
 8005964:	4311      	orrs	r1, r2
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800596a:	06d2      	lsls	r2, r2, #27
 800596c:	430a      	orrs	r2, r1
 800596e:	4912      	ldr	r1, [pc, #72]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005970:	4313      	orrs	r3, r2
 8005972:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005974:	4b10      	ldr	r3, [pc, #64]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 800597a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800597e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005980:	4b0d      	ldr	r3, [pc, #52]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	4a0c      	ldr	r2, [pc, #48]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 8005986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800598a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800598c:	f7fb ffa0 	bl	80018d0 <HAL_GetTick>
 8005990:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005992:	e008      	b.n	80059a6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005994:	f7fb ff9c 	bl	80018d0 <HAL_GetTick>
 8005998:	4602      	mov	r2, r0
 800599a:	693b      	ldr	r3, [r7, #16]
 800599c:	1ad3      	subs	r3, r2, r3
 800599e:	2b02      	cmp	r3, #2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e058      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059a6:	4b04      	ldr	r3, [pc, #16]	; (80059b8 <HAL_RCC_OscConfig+0x778>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d0f0      	beq.n	8005994 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80059b2:	e050      	b.n	8005a56 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e04f      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
 80059b8:	40021000 	.word	0x40021000
 80059bc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d144      	bne.n	8005a56 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80059cc:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 80059d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059d8:	4b21      	ldr	r3, [pc, #132]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 80059de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80059e4:	f7fb ff74 	bl	80018d0 <HAL_GetTick>
 80059e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059ea:	e008      	b.n	80059fe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059ec:	f7fb ff70 	bl	80018d0 <HAL_GetTick>
 80059f0:	4602      	mov	r2, r0
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d901      	bls.n	80059fe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80059fa:	2303      	movs	r3, #3
 80059fc:	e02c      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80059fe:	4b18      	ldr	r3, [pc, #96]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d0f0      	beq.n	80059ec <HAL_RCC_OscConfig+0x7ac>
 8005a0a:	e024      	b.n	8005a56 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005a0c:	69bb      	ldr	r3, [r7, #24]
 8005a0e:	2b0c      	cmp	r3, #12
 8005a10:	d01f      	beq.n	8005a52 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a12:	4b13      	ldr	r3, [pc, #76]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a12      	ldr	r2, [pc, #72]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a1e:	f7fb ff57 	bl	80018d0 <HAL_GetTick>
 8005a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a24:	e008      	b.n	8005a38 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a26:	f7fb ff53 	bl	80018d0 <HAL_GetTick>
 8005a2a:	4602      	mov	r2, r0
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d901      	bls.n	8005a38 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e00f      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a38:	4b09      	ldr	r3, [pc, #36]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1f0      	bne.n	8005a26 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a46:	68da      	ldr	r2, [r3, #12]
 8005a48:	4905      	ldr	r1, [pc, #20]	; (8005a60 <HAL_RCC_OscConfig+0x820>)
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <HAL_RCC_OscConfig+0x824>)
 8005a4c:	4013      	ands	r3, r2
 8005a4e:	60cb      	str	r3, [r1, #12]
 8005a50:	e001      	b.n	8005a56 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e000      	b.n	8005a58 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	3720      	adds	r7, #32
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}
 8005a60:	40021000 	.word	0x40021000
 8005a64:	feeefffc 	.word	0xfeeefffc

08005a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
 8005a70:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d101      	bne.n	8005a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a78:	2301      	movs	r3, #1
 8005a7a:	e0e7      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005a7c:	4b75      	ldr	r3, [pc, #468]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f003 0307 	and.w	r3, r3, #7
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d910      	bls.n	8005aac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a8a:	4b72      	ldr	r3, [pc, #456]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f023 0207 	bic.w	r2, r3, #7
 8005a92:	4970      	ldr	r1, [pc, #448]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a9a:	4b6e      	ldr	r3, [pc, #440]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	683a      	ldr	r2, [r7, #0]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d001      	beq.n	8005aac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0cf      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f003 0302 	and.w	r3, r3, #2
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d010      	beq.n	8005ada <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	689a      	ldr	r2, [r3, #8]
 8005abc:	4b66      	ldr	r3, [pc, #408]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d908      	bls.n	8005ada <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005ac8:	4b63      	ldr	r3, [pc, #396]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	689b      	ldr	r3, [r3, #8]
 8005ad4:	4960      	ldr	r1, [pc, #384]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0301 	and.w	r3, r3, #1
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d04c      	beq.n	8005b80 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d107      	bne.n	8005afe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aee:	4b5a      	ldr	r3, [pc, #360]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d121      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8005afa:	2301      	movs	r3, #1
 8005afc:	e0a6      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	2b02      	cmp	r3, #2
 8005b04:	d107      	bne.n	8005b16 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b06:	4b54      	ldr	r3, [pc, #336]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d115      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e09a      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d107      	bne.n	8005b2e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b1e:	4b4e      	ldr	r3, [pc, #312]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f003 0302 	and.w	r3, r3, #2
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d109      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	e08e      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b2e:	4b4a      	ldr	r3, [pc, #296]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e086      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b3e:	4b46      	ldr	r3, [pc, #280]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f023 0203 	bic.w	r2, r3, #3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	685b      	ldr	r3, [r3, #4]
 8005b4a:	4943      	ldr	r1, [pc, #268]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b50:	f7fb febe 	bl	80018d0 <HAL_GetTick>
 8005b54:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b56:	e00a      	b.n	8005b6e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b58:	f7fb feba 	bl	80018d0 <HAL_GetTick>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	1ad3      	subs	r3, r2, r3
 8005b62:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d901      	bls.n	8005b6e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005b6a:	2303      	movs	r3, #3
 8005b6c:	e06e      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b6e:	4b3a      	ldr	r3, [pc, #232]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 020c 	and.w	r2, r3, #12
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d1eb      	bne.n	8005b58 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f003 0302 	and.w	r3, r3, #2
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d010      	beq.n	8005bae <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	4b31      	ldr	r3, [pc, #196]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d208      	bcs.n	8005bae <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b9c:	4b2e      	ldr	r3, [pc, #184]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	689b      	ldr	r3, [r3, #8]
 8005ba8:	492b      	ldr	r1, [pc, #172]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005baa:	4313      	orrs	r3, r2
 8005bac:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005bae:	4b29      	ldr	r3, [pc, #164]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	683a      	ldr	r2, [r7, #0]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d210      	bcs.n	8005bde <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bbc:	4b25      	ldr	r3, [pc, #148]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f023 0207 	bic.w	r2, r3, #7
 8005bc4:	4923      	ldr	r1, [pc, #140]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bcc:	4b21      	ldr	r3, [pc, #132]	; (8005c54 <HAL_RCC_ClockConfig+0x1ec>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f003 0307 	and.w	r3, r3, #7
 8005bd4:	683a      	ldr	r2, [r7, #0]
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d001      	beq.n	8005bde <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e036      	b.n	8005c4c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d008      	beq.n	8005bfc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bea:	4b1b      	ldr	r3, [pc, #108]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	4918      	ldr	r1, [pc, #96]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0308 	and.w	r3, r3, #8
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005c08:	4b13      	ldr	r3, [pc, #76]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	691b      	ldr	r3, [r3, #16]
 8005c14:	00db      	lsls	r3, r3, #3
 8005c16:	4910      	ldr	r1, [pc, #64]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005c1c:	f000 f824 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8005c20:	4602      	mov	r2, r0
 8005c22:	4b0d      	ldr	r3, [pc, #52]	; (8005c58 <HAL_RCC_ClockConfig+0x1f0>)
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	f003 030f 	and.w	r3, r3, #15
 8005c2c:	490b      	ldr	r1, [pc, #44]	; (8005c5c <HAL_RCC_ClockConfig+0x1f4>)
 8005c2e:	5ccb      	ldrb	r3, [r1, r3]
 8005c30:	f003 031f 	and.w	r3, r3, #31
 8005c34:	fa22 f303 	lsr.w	r3, r2, r3
 8005c38:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <HAL_RCC_ClockConfig+0x1f8>)
 8005c3a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005c3c:	4b09      	ldr	r3, [pc, #36]	; (8005c64 <HAL_RCC_ClockConfig+0x1fc>)
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fb fdf5 	bl	8001830 <HAL_InitTick>
 8005c46:	4603      	mov	r3, r0
 8005c48:	72fb      	strb	r3, [r7, #11]

  return status;
 8005c4a:	7afb      	ldrb	r3, [r7, #11]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40022000 	.word	0x40022000
 8005c58:	40021000 	.word	0x40021000
 8005c5c:	080086e8 	.word	0x080086e8
 8005c60:	20000004 	.word	0x20000004
 8005c64:	20000008 	.word	0x20000008

08005c68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c68:	b480      	push	{r7}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	2300      	movs	r3, #0
 8005c74:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005c76:	4b3e      	ldr	r3, [pc, #248]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005c80:	4b3b      	ldr	r3, [pc, #236]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0303 	and.w	r3, r3, #3
 8005c88:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d005      	beq.n	8005c9c <HAL_RCC_GetSysClockFreq+0x34>
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	2b0c      	cmp	r3, #12
 8005c94:	d121      	bne.n	8005cda <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d11e      	bne.n	8005cda <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005c9c:	4b34      	ldr	r3, [pc, #208]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 0308 	and.w	r3, r3, #8
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d107      	bne.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005caa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cae:	0a1b      	lsrs	r3, r3, #8
 8005cb0:	f003 030f 	and.w	r3, r3, #15
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	e005      	b.n	8005cc4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005cb8:	4b2d      	ldr	r3, [pc, #180]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	091b      	lsrs	r3, r3, #4
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005cc4:	4a2b      	ldr	r2, [pc, #172]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ccc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cce:	693b      	ldr	r3, [r7, #16]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10d      	bne.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005cd4:	69fb      	ldr	r3, [r7, #28]
 8005cd6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cd8:	e00a      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d102      	bne.n	8005ce6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005ce0:	4b25      	ldr	r3, [pc, #148]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	e004      	b.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	2b08      	cmp	r3, #8
 8005cea:	d101      	bne.n	8005cf0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005cec:	4b23      	ldr	r3, [pc, #140]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005cee:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	2b0c      	cmp	r3, #12
 8005cf4:	d134      	bne.n	8005d60 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005cf6:	4b1e      	ldr	r3, [pc, #120]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	f003 0303 	and.w	r3, r3, #3
 8005cfe:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d003      	beq.n	8005d0e <HAL_RCC_GetSysClockFreq+0xa6>
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	2b03      	cmp	r3, #3
 8005d0a:	d003      	beq.n	8005d14 <HAL_RCC_GetSysClockFreq+0xac>
 8005d0c:	e005      	b.n	8005d1a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005d0e:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_RCC_GetSysClockFreq+0x110>)
 8005d10:	617b      	str	r3, [r7, #20]
      break;
 8005d12:	e005      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_RCC_GetSysClockFreq+0x114>)
 8005d16:	617b      	str	r3, [r7, #20]
      break;
 8005d18:	e002      	b.n	8005d20 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	617b      	str	r3, [r7, #20]
      break;
 8005d1e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 0307 	and.w	r3, r3, #7
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005d2e:	4b10      	ldr	r3, [pc, #64]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d30:	68db      	ldr	r3, [r3, #12]
 8005d32:	0a1b      	lsrs	r3, r3, #8
 8005d34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	fb03 f202 	mul.w	r2, r3, r2
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d44:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d46:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x108>)
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	0e5b      	lsrs	r3, r3, #25
 8005d4c:	f003 0303 	and.w	r3, r3, #3
 8005d50:	3301      	adds	r3, #1
 8005d52:	005b      	lsls	r3, r3, #1
 8005d54:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d5e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005d60:	69bb      	ldr	r3, [r7, #24]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3724      	adds	r7, #36	; 0x24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000
 8005d74:	08008700 	.word	0x08008700
 8005d78:	00f42400 	.word	0x00f42400
 8005d7c:	007a1200 	.word	0x007a1200

08005d80 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d80:	b480      	push	{r7}
 8005d82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d84:	4b03      	ldr	r3, [pc, #12]	; (8005d94 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d86:	681b      	ldr	r3, [r3, #0]
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	20000004 	.word	0x20000004

08005d98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005d9c:	f7ff fff0 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005da0:	4602      	mov	r2, r0
 8005da2:	4b06      	ldr	r3, [pc, #24]	; (8005dbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da4:	689b      	ldr	r3, [r3, #8]
 8005da6:	0a1b      	lsrs	r3, r3, #8
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	4904      	ldr	r1, [pc, #16]	; (8005dc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005dae:	5ccb      	ldrb	r3, [r1, r3]
 8005db0:	f003 031f 	and.w	r3, r3, #31
 8005db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db8:	4618      	mov	r0, r3
 8005dba:	bd80      	pop	{r7, pc}
 8005dbc:	40021000 	.word	0x40021000
 8005dc0:	080086f8 	.word	0x080086f8

08005dc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005dc8:	f7ff ffda 	bl	8005d80 <HAL_RCC_GetHCLKFreq>
 8005dcc:	4602      	mov	r2, r0
 8005dce:	4b06      	ldr	r3, [pc, #24]	; (8005de8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	0adb      	lsrs	r3, r3, #11
 8005dd4:	f003 0307 	and.w	r3, r3, #7
 8005dd8:	4904      	ldr	r1, [pc, #16]	; (8005dec <HAL_RCC_GetPCLK2Freq+0x28>)
 8005dda:	5ccb      	ldrb	r3, [r1, r3]
 8005ddc:	f003 031f 	and.w	r3, r3, #31
 8005de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40021000 	.word	0x40021000
 8005dec:	080086f8 	.word	0x080086f8

08005df0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b086      	sub	sp, #24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005df8:	2300      	movs	r3, #0
 8005dfa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005dfc:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d003      	beq.n	8005e10 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005e08:	f7ff f9b6 	bl	8005178 <HAL_PWREx_GetVoltageRange>
 8005e0c:	6178      	str	r0, [r7, #20]
 8005e0e:	e014      	b.n	8005e3a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e10:	4b25      	ldr	r3, [pc, #148]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e14:	4a24      	ldr	r2, [pc, #144]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e1a:	6593      	str	r3, [r2, #88]	; 0x58
 8005e1c:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e24:	60fb      	str	r3, [r7, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005e28:	f7ff f9a6 	bl	8005178 <HAL_PWREx_GetVoltageRange>
 8005e2c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e32:	4a1d      	ldr	r2, [pc, #116]	; (8005ea8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005e34:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e38:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e40:	d10b      	bne.n	8005e5a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2b80      	cmp	r3, #128	; 0x80
 8005e46:	d919      	bls.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2ba0      	cmp	r3, #160	; 0xa0
 8005e4c:	d902      	bls.n	8005e54 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e4e:	2302      	movs	r3, #2
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e013      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e54:	2301      	movs	r3, #1
 8005e56:	613b      	str	r3, [r7, #16]
 8005e58:	e010      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b80      	cmp	r3, #128	; 0x80
 8005e5e:	d902      	bls.n	8005e66 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005e60:	2303      	movs	r3, #3
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e00a      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2b80      	cmp	r3, #128	; 0x80
 8005e6a:	d102      	bne.n	8005e72 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	613b      	str	r3, [r7, #16]
 8005e70:	e004      	b.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2b70      	cmp	r3, #112	; 0x70
 8005e76:	d101      	bne.n	8005e7c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005e78:	2301      	movs	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005e7c:	4b0b      	ldr	r3, [pc, #44]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f023 0207 	bic.w	r2, r3, #7
 8005e84:	4909      	ldr	r1, [pc, #36]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e86:	693b      	ldr	r3, [r7, #16]
 8005e88:	4313      	orrs	r3, r2
 8005e8a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005e8c:	4b07      	ldr	r3, [pc, #28]	; (8005eac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0307 	and.w	r3, r3, #7
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	d001      	beq.n	8005e9e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e000      	b.n	8005ea0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	3718      	adds	r7, #24
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	40022000 	.word	0x40022000

08005eb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b086      	sub	sp, #24
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005eb8:	2300      	movs	r3, #0
 8005eba:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d031      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ed0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005ed4:	d01a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005ed6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005eda:	d814      	bhi.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005ee4:	d10f      	bne.n	8005f06 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005ee6:	4b5d      	ldr	r3, [pc, #372]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ee8:	68db      	ldr	r3, [r3, #12]
 8005eea:	4a5c      	ldr	r2, [pc, #368]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ef0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ef2:	e00c      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	3304      	adds	r3, #4
 8005ef8:	2100      	movs	r1, #0
 8005efa:	4618      	mov	r0, r3
 8005efc:	f000 f9de 	bl	80062bc <RCCEx_PLLSAI1_Config>
 8005f00:	4603      	mov	r3, r0
 8005f02:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005f04:	e003      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	74fb      	strb	r3, [r7, #19]
      break;
 8005f0a:	e000      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005f0c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f0e:	7cfb      	ldrb	r3, [r7, #19]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d10b      	bne.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f14:	4b51      	ldr	r3, [pc, #324]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f22:	494e      	ldr	r1, [pc, #312]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005f2a:	e001      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f2c:	7cfb      	ldrb	r3, [r7, #19]
 8005f2e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	f000 809e 	beq.w	800607a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f3e:	2300      	movs	r3, #0
 8005f40:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005f42:	4b46      	ldr	r3, [pc, #280]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005f4e:	2301      	movs	r3, #1
 8005f50:	e000      	b.n	8005f54 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005f52:	2300      	movs	r3, #0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d00d      	beq.n	8005f74 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f58:	4b40      	ldr	r3, [pc, #256]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5c:	4a3f      	ldr	r2, [pc, #252]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	6593      	str	r3, [r2, #88]	; 0x58
 8005f64:	4b3d      	ldr	r3, [pc, #244]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f6c:	60bb      	str	r3, [r7, #8]
 8005f6e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f70:	2301      	movs	r3, #1
 8005f72:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f74:	4b3a      	ldr	r3, [pc, #232]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	4a39      	ldr	r2, [pc, #228]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f80:	f7fb fca6 	bl	80018d0 <HAL_GetTick>
 8005f84:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f86:	e009      	b.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f88:	f7fb fca2 	bl	80018d0 <HAL_GetTick>
 8005f8c:	4602      	mov	r2, r0
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d902      	bls.n	8005f9c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	74fb      	strb	r3, [r7, #19]
        break;
 8005f9a:	e005      	b.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005f9c:	4b30      	ldr	r3, [pc, #192]	; (8006060 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d0ef      	beq.n	8005f88 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005fa8:	7cfb      	ldrb	r3, [r7, #19]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d15a      	bne.n	8006064 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005fae:	4b2b      	ldr	r3, [pc, #172]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fb4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d01e      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d019      	beq.n	8005ffe <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005fca:	4b24      	ldr	r3, [pc, #144]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fd4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005fd6:	4b21      	ldr	r3, [pc, #132]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fdc:	4a1f      	ldr	r2, [pc, #124]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005fe6:	4b1d      	ldr	r3, [pc, #116]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fec:	4a1b      	ldr	r2, [pc, #108]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005fee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ff2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005ff6:	4a19      	ldr	r2, [pc, #100]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	f003 0301 	and.w	r3, r3, #1
 8006004:	2b00      	cmp	r3, #0
 8006006:	d016      	beq.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006008:	f7fb fc62 	bl	80018d0 <HAL_GetTick>
 800600c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800600e:	e00b      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006010:	f7fb fc5e 	bl	80018d0 <HAL_GetTick>
 8006014:	4602      	mov	r2, r0
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	1ad3      	subs	r3, r2, r3
 800601a:	f241 3288 	movw	r2, #5000	; 0x1388
 800601e:	4293      	cmp	r3, r2
 8006020:	d902      	bls.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8006022:	2303      	movs	r3, #3
 8006024:	74fb      	strb	r3, [r7, #19]
            break;
 8006026:	e006      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006028:	4b0c      	ldr	r3, [pc, #48]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f003 0302 	and.w	r3, r3, #2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d0ec      	beq.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8006036:	7cfb      	ldrb	r3, [r7, #19]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d10b      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800603c:	4b07      	ldr	r3, [pc, #28]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800603e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006042:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800604a:	4904      	ldr	r1, [pc, #16]	; (800605c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006052:	e009      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006054:	7cfb      	ldrb	r3, [r7, #19]
 8006056:	74bb      	strb	r3, [r7, #18]
 8006058:	e006      	b.n	8006068 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800605a:	bf00      	nop
 800605c:	40021000 	.word	0x40021000
 8006060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006064:	7cfb      	ldrb	r3, [r7, #19]
 8006066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006068:	7c7b      	ldrb	r3, [r7, #17]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d105      	bne.n	800607a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800606e:	4b8a      	ldr	r3, [pc, #552]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006072:	4a89      	ldr	r2, [pc, #548]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f003 0301 	and.w	r3, r3, #1
 8006082:	2b00      	cmp	r3, #0
 8006084:	d00a      	beq.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006086:	4b84      	ldr	r3, [pc, #528]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800608c:	f023 0203 	bic.w	r2, r3, #3
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6a1b      	ldr	r3, [r3, #32]
 8006094:	4980      	ldr	r1, [pc, #512]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006096:	4313      	orrs	r3, r2
 8006098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f003 0302 	and.w	r3, r3, #2
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d00a      	beq.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80060a8:	4b7b      	ldr	r3, [pc, #492]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ae:	f023 020c 	bic.w	r2, r3, #12
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	4978      	ldr	r1, [pc, #480]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060b8:	4313      	orrs	r3, r2
 80060ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00a      	beq.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ca:	4b73      	ldr	r3, [pc, #460]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	496f      	ldr	r1, [pc, #444]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00a      	beq.n	8006102 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80060ec:	4b6a      	ldr	r3, [pc, #424]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060fa:	4967      	ldr	r1, [pc, #412]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80060fc:	4313      	orrs	r3, r2
 80060fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800610e:	4b62      	ldr	r3, [pc, #392]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006114:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	495e      	ldr	r1, [pc, #376]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800611e:	4313      	orrs	r3, r2
 8006120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800612c:	2b00      	cmp	r3, #0
 800612e:	d00a      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006130:	4b59      	ldr	r3, [pc, #356]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006136:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613e:	4956      	ldr	r1, [pc, #344]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006140:	4313      	orrs	r3, r2
 8006142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00a      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006152:	4b51      	ldr	r3, [pc, #324]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006158:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	494d      	ldr	r1, [pc, #308]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006162:	4313      	orrs	r3, r2
 8006164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d028      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006174:	4b48      	ldr	r3, [pc, #288]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800617a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006182:	4945      	ldr	r1, [pc, #276]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006184:	4313      	orrs	r3, r2
 8006186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006192:	d106      	bne.n	80061a2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006194:	4b40      	ldr	r3, [pc, #256]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	4a3f      	ldr	r2, [pc, #252]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800619a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800619e:	60d3      	str	r3, [r2, #12]
 80061a0:	e011      	b.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80061aa:	d10c      	bne.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	3304      	adds	r3, #4
 80061b0:	2101      	movs	r1, #1
 80061b2:	4618      	mov	r0, r3
 80061b4:	f000 f882 	bl	80062bc <RCCEx_PLLSAI1_Config>
 80061b8:	4603      	mov	r3, r0
 80061ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80061bc:	7cfb      	ldrb	r3, [r7, #19]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d001      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80061c2:	7cfb      	ldrb	r3, [r7, #19]
 80061c4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d028      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80061d2:	4b31      	ldr	r3, [pc, #196]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061e0:	492d      	ldr	r1, [pc, #180]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061e2:	4313      	orrs	r3, r2
 80061e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80061f0:	d106      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f2:	4b29      	ldr	r3, [pc, #164]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061f4:	68db      	ldr	r3, [r3, #12]
 80061f6:	4a28      	ldr	r2, [pc, #160]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80061f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061fc:	60d3      	str	r3, [r2, #12]
 80061fe:	e011      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006204:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006208:	d10c      	bne.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	3304      	adds	r3, #4
 800620e:	2101      	movs	r1, #1
 8006210:	4618      	mov	r0, r3
 8006212:	f000 f853 	bl	80062bc <RCCEx_PLLSAI1_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800621a:	7cfb      	ldrb	r3, [r7, #19]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d001      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8006220:	7cfb      	ldrb	r3, [r7, #19]
 8006222:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01c      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006230:	4b19      	ldr	r3, [pc, #100]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006236:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800623e:	4916      	ldr	r1, [pc, #88]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800624a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800624e:	d10c      	bne.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3304      	adds	r3, #4
 8006254:	2102      	movs	r1, #2
 8006256:	4618      	mov	r0, r3
 8006258:	f000 f830 	bl	80062bc <RCCEx_PLLSAI1_Config>
 800625c:	4603      	mov	r3, r0
 800625e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006260:	7cfb      	ldrb	r3, [r7, #19]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8006266:	7cfb      	ldrb	r3, [r7, #19]
 8006268:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006272:	2b00      	cmp	r3, #0
 8006274:	d00a      	beq.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006276:	4b08      	ldr	r3, [pc, #32]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006284:	4904      	ldr	r1, [pc, #16]	; (8006298 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8006286:	4313      	orrs	r3, r2
 8006288:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800628c:	7cbb      	ldrb	r3, [r7, #18]
}
 800628e:	4618      	mov	r0, r3
 8006290:	3718      	adds	r7, #24
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000

0800629c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800629c:	b480      	push	{r7}
 800629e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80062a6:	f043 0304 	orr.w	r3, r3, #4
 80062aa:	6013      	str	r3, [r2, #0]
}
 80062ac:	bf00      	nop
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000

080062bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80062c6:	2300      	movs	r3, #0
 80062c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80062ca:	4b74      	ldr	r3, [pc, #464]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f003 0303 	and.w	r3, r3, #3
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d018      	beq.n	8006308 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80062d6:	4b71      	ldr	r3, [pc, #452]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f003 0203 	and.w	r2, r3, #3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d10d      	bne.n	8006302 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
       ||
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d009      	beq.n	8006302 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80062ee:	4b6b      	ldr	r3, [pc, #428]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	091b      	lsrs	r3, r3, #4
 80062f4:	f003 0307 	and.w	r3, r3, #7
 80062f8:	1c5a      	adds	r2, r3, #1
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	685b      	ldr	r3, [r3, #4]
       ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d047      	beq.n	8006392 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	73fb      	strb	r3, [r7, #15]
 8006306:	e044      	b.n	8006392 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	2b03      	cmp	r3, #3
 800630e:	d018      	beq.n	8006342 <RCCEx_PLLSAI1_Config+0x86>
 8006310:	2b03      	cmp	r3, #3
 8006312:	d825      	bhi.n	8006360 <RCCEx_PLLSAI1_Config+0xa4>
 8006314:	2b01      	cmp	r3, #1
 8006316:	d002      	beq.n	800631e <RCCEx_PLLSAI1_Config+0x62>
 8006318:	2b02      	cmp	r3, #2
 800631a:	d009      	beq.n	8006330 <RCCEx_PLLSAI1_Config+0x74>
 800631c:	e020      	b.n	8006360 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800631e:	4b5f      	ldr	r3, [pc, #380]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f003 0302 	and.w	r3, r3, #2
 8006326:	2b00      	cmp	r3, #0
 8006328:	d11d      	bne.n	8006366 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800632a:	2301      	movs	r3, #1
 800632c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800632e:	e01a      	b.n	8006366 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006330:	4b5a      	ldr	r3, [pc, #360]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006338:	2b00      	cmp	r3, #0
 800633a:	d116      	bne.n	800636a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006340:	e013      	b.n	800636a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006342:	4b56      	ldr	r3, [pc, #344]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10f      	bne.n	800636e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800634e:	4b53      	ldr	r3, [pc, #332]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d109      	bne.n	800636e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800635e:	e006      	b.n	800636e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	73fb      	strb	r3, [r7, #15]
      break;
 8006364:	e004      	b.n	8006370 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006366:	bf00      	nop
 8006368:	e002      	b.n	8006370 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800636a:	bf00      	nop
 800636c:	e000      	b.n	8006370 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800636e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006370:	7bfb      	ldrb	r3, [r7, #15]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d10d      	bne.n	8006392 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006376:	4b49      	ldr	r3, [pc, #292]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6819      	ldr	r1, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	3b01      	subs	r3, #1
 8006388:	011b      	lsls	r3, r3, #4
 800638a:	430b      	orrs	r3, r1
 800638c:	4943      	ldr	r1, [pc, #268]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 800638e:	4313      	orrs	r3, r2
 8006390:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006392:	7bfb      	ldrb	r3, [r7, #15]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d17c      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006398:	4b40      	ldr	r3, [pc, #256]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a3f      	ldr	r2, [pc, #252]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 800639e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80063a4:	f7fb fa94 	bl	80018d0 <HAL_GetTick>
 80063a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063aa:	e009      	b.n	80063c0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80063ac:	f7fb fa90 	bl	80018d0 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b02      	cmp	r3, #2
 80063b8:	d902      	bls.n	80063c0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	73fb      	strb	r3, [r7, #15]
        break;
 80063be:	e005      	b.n	80063cc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80063c0:	4b36      	ldr	r3, [pc, #216]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1ef      	bne.n	80063ac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80063cc:	7bfb      	ldrb	r3, [r7, #15]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d15f      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d110      	bne.n	80063fa <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80063d8:	4b30      	ldr	r3, [pc, #192]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80063e0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	6892      	ldr	r2, [r2, #8]
 80063e8:	0211      	lsls	r1, r2, #8
 80063ea:	687a      	ldr	r2, [r7, #4]
 80063ec:	68d2      	ldr	r2, [r2, #12]
 80063ee:	06d2      	lsls	r2, r2, #27
 80063f0:	430a      	orrs	r2, r1
 80063f2:	492a      	ldr	r1, [pc, #168]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
 80063f8:	e027      	b.n	800644a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	2b01      	cmp	r3, #1
 80063fe:	d112      	bne.n	8006426 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006400:	4b26      	ldr	r3, [pc, #152]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006402:	691b      	ldr	r3, [r3, #16]
 8006404:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006408:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	6892      	ldr	r2, [r2, #8]
 8006410:	0211      	lsls	r1, r2, #8
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	6912      	ldr	r2, [r2, #16]
 8006416:	0852      	lsrs	r2, r2, #1
 8006418:	3a01      	subs	r2, #1
 800641a:	0552      	lsls	r2, r2, #21
 800641c:	430a      	orrs	r2, r1
 800641e:	491f      	ldr	r1, [pc, #124]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006420:	4313      	orrs	r3, r2
 8006422:	610b      	str	r3, [r1, #16]
 8006424:	e011      	b.n	800644a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006426:	4b1d      	ldr	r3, [pc, #116]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800642e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6892      	ldr	r2, [r2, #8]
 8006436:	0211      	lsls	r1, r2, #8
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6952      	ldr	r2, [r2, #20]
 800643c:	0852      	lsrs	r2, r2, #1
 800643e:	3a01      	subs	r2, #1
 8006440:	0652      	lsls	r2, r2, #25
 8006442:	430a      	orrs	r2, r1
 8006444:	4915      	ldr	r1, [pc, #84]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006446:	4313      	orrs	r3, r2
 8006448:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4a13      	ldr	r2, [pc, #76]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006454:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006456:	f7fb fa3b 	bl	80018d0 <HAL_GetTick>
 800645a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800645c:	e009      	b.n	8006472 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800645e:	f7fb fa37 	bl	80018d0 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	2b02      	cmp	r3, #2
 800646a:	d902      	bls.n	8006472 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800646c:	2303      	movs	r3, #3
 800646e:	73fb      	strb	r3, [r7, #15]
          break;
 8006470:	e005      	b.n	800647e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d0ef      	beq.n	800645e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800647e:	7bfb      	ldrb	r3, [r7, #15]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d106      	bne.n	8006492 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006486:	691a      	ldr	r2, [r3, #16]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	4903      	ldr	r1, [pc, #12]	; (800649c <RCCEx_PLLSAI1_Config+0x1e0>)
 800648e:	4313      	orrs	r3, r2
 8006490:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006492:	7bfb      	ldrb	r3, [r7, #15]
}
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	40021000 	.word	0x40021000

080064a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e049      	b.n	8006546 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d106      	bne.n	80064cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7fb f87e 	bl	80015c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2202      	movs	r2, #2
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	3304      	adds	r3, #4
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fb04 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2201      	movs	r2, #1
 8006540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}

0800654e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800654e:	b580      	push	{r7, lr}
 8006550:	b082      	sub	sp, #8
 8006552:	af00      	add	r7, sp, #0
 8006554:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e049      	b.n	80065f4 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006566:	b2db      	uxtb	r3, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	d106      	bne.n	800657a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f841 	bl	80065fc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2202      	movs	r2, #2
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681a      	ldr	r2, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	3304      	adds	r3, #4
 800658a:	4619      	mov	r1, r3
 800658c:	4610      	mov	r0, r2
 800658e:	f000 faad 	bl	8006aec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2201      	movs	r2, #1
 800659e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2201      	movs	r2, #1
 80065ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2201      	movs	r2, #1
 80065be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2201      	movs	r2, #1
 80065d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2201      	movs	r2, #1
 80065de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2201      	movs	r2, #1
 80065e6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b083      	sub	sp, #12
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8006604:	bf00      	nop
 8006606:	370c      	adds	r7, #12
 8006608:	46bd      	mov	sp, r7
 800660a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660e:	4770      	bx	lr

08006610 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	f003 0302 	and.w	r3, r3, #2
 800662e:	2b00      	cmp	r3, #0
 8006630:	d020      	beq.n	8006674 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f003 0302 	and.w	r3, r3, #2
 8006638:	2b00      	cmp	r3, #0
 800663a:	d01b      	beq.n	8006674 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	f06f 0202 	mvn.w	r2, #2
 8006644:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2201      	movs	r2, #1
 800664a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699b      	ldr	r3, [r3, #24]
 8006652:	f003 0303 	and.w	r3, r3, #3
 8006656:	2b00      	cmp	r3, #0
 8006658:	d003      	beq.n	8006662 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 fa27 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 8006660:	e005      	b.n	800666e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fa19 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006668:	6878      	ldr	r0, [r7, #4]
 800666a:	f000 fa2a 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	f003 0304 	and.w	r3, r3, #4
 800667a:	2b00      	cmp	r3, #0
 800667c:	d020      	beq.n	80066c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	f003 0304 	and.w	r3, r3, #4
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01b      	beq.n	80066c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f06f 0204 	mvn.w	r2, #4
 8006690:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2202      	movs	r2, #2
 8006696:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	699b      	ldr	r3, [r3, #24]
 800669e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d003      	beq.n	80066ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 fa01 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 80066ac:	e005      	b.n	80066ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f000 f9f3 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 fa04 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	2200      	movs	r2, #0
 80066be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	f003 0308 	and.w	r3, r3, #8
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d020      	beq.n	800670c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f003 0308 	and.w	r3, r3, #8
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d01b      	beq.n	800670c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f06f 0208 	mvn.w	r2, #8
 80066dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2204      	movs	r2, #4
 80066e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	69db      	ldr	r3, [r3, #28]
 80066ea:	f003 0303 	and.w	r3, r3, #3
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066f2:	6878      	ldr	r0, [r7, #4]
 80066f4:	f000 f9db 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 80066f8:	e005      	b.n	8006706 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f000 f9cd 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f9de 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	f003 0310 	and.w	r3, r3, #16
 8006712:	2b00      	cmp	r3, #0
 8006714:	d020      	beq.n	8006758 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f003 0310 	and.w	r3, r3, #16
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01b      	beq.n	8006758 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f06f 0210 	mvn.w	r2, #16
 8006728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2208      	movs	r2, #8
 800672e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	69db      	ldr	r3, [r3, #28]
 8006736:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800673a:	2b00      	cmp	r3, #0
 800673c:	d003      	beq.n	8006746 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f9b5 	bl	8006aae <HAL_TIM_IC_CaptureCallback>
 8006744:	e005      	b.n	8006752 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 f9a7 	bl	8006a9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 f9b8 	bl	8006ac2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00c      	beq.n	800677c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f003 0301 	and.w	r3, r3, #1
 8006768:	2b00      	cmp	r3, #0
 800676a:	d007      	beq.n	800677c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f06f 0201 	mvn.w	r2, #1
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f7fa fdc4 	bl	8001304 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00c      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006798:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fd92 	bl	80072c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80067a0:	68bb      	ldr	r3, [r7, #8]
 80067a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00c      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d007      	beq.n	80067c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fd8a 	bl	80072d8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00c      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d007      	beq.n	80067e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80067e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f977 	bl	8006ad6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	f003 0320 	and.w	r3, r3, #32
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d00c      	beq.n	800680c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d007      	beq.n	800680c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f06f 0220 	mvn.w	r2, #32
 8006804:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f000 fd52 	bl	80072b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800680c:	bf00      	nop
 800680e:	3710      	adds	r7, #16
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b086      	sub	sp, #24
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800682a:	2b01      	cmp	r3, #1
 800682c:	d101      	bne.n	8006832 <HAL_TIM_OC_ConfigChannel+0x1e>
 800682e:	2302      	movs	r3, #2
 8006830:	e066      	b.n	8006900 <HAL_TIM_OC_ConfigChannel+0xec>
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2201      	movs	r2, #1
 8006836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2b14      	cmp	r3, #20
 800683e:	d857      	bhi.n	80068f0 <HAL_TIM_OC_ConfigChannel+0xdc>
 8006840:	a201      	add	r2, pc, #4	; (adr r2, 8006848 <HAL_TIM_OC_ConfigChannel+0x34>)
 8006842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006846:	bf00      	nop
 8006848:	0800689d 	.word	0x0800689d
 800684c:	080068f1 	.word	0x080068f1
 8006850:	080068f1 	.word	0x080068f1
 8006854:	080068f1 	.word	0x080068f1
 8006858:	080068ab 	.word	0x080068ab
 800685c:	080068f1 	.word	0x080068f1
 8006860:	080068f1 	.word	0x080068f1
 8006864:	080068f1 	.word	0x080068f1
 8006868:	080068b9 	.word	0x080068b9
 800686c:	080068f1 	.word	0x080068f1
 8006870:	080068f1 	.word	0x080068f1
 8006874:	080068f1 	.word	0x080068f1
 8006878:	080068c7 	.word	0x080068c7
 800687c:	080068f1 	.word	0x080068f1
 8006880:	080068f1 	.word	0x080068f1
 8006884:	080068f1 	.word	0x080068f1
 8006888:	080068d5 	.word	0x080068d5
 800688c:	080068f1 	.word	0x080068f1
 8006890:	080068f1 	.word	0x080068f1
 8006894:	080068f1 	.word	0x080068f1
 8006898:	080068e3 	.word	0x080068e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	68b9      	ldr	r1, [r7, #8]
 80068a2:	4618      	mov	r0, r3
 80068a4:	f000 f986 	bl	8006bb4 <TIM_OC1_SetConfig>
      break;
 80068a8:	e025      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68b9      	ldr	r1, [r7, #8]
 80068b0:	4618      	mov	r0, r3
 80068b2:	f000 f9fb 	bl	8006cac <TIM_OC2_SetConfig>
      break;
 80068b6:	e01e      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68b9      	ldr	r1, [r7, #8]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fa6e 	bl	8006da0 <TIM_OC3_SetConfig>
      break;
 80068c4:	e017      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fadf 	bl	8006e90 <TIM_OC4_SetConfig>
      break;
 80068d2:	e010      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	68b9      	ldr	r1, [r7, #8]
 80068da:	4618      	mov	r0, r3
 80068dc:	f000 fb36 	bl	8006f4c <TIM_OC5_SetConfig>
      break;
 80068e0:	e009      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68b9      	ldr	r1, [r7, #8]
 80068e8:	4618      	mov	r0, r3
 80068ea:	f000 fb87 	bl	8006ffc <TIM_OC6_SetConfig>
      break;
 80068ee:	e002      	b.n	80068f6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80068f0:	2301      	movs	r3, #1
 80068f2:	75fb      	strb	r3, [r7, #23]
      break;
 80068f4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80068fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b084      	sub	sp, #16
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800691c:	2b01      	cmp	r3, #1
 800691e:	d101      	bne.n	8006924 <HAL_TIM_ConfigClockSource+0x1c>
 8006920:	2302      	movs	r3, #2
 8006922:	e0b6      	b.n	8006a92 <HAL_TIM_ConfigClockSource+0x18a>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2202      	movs	r2, #2
 8006930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006942:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006946:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800694e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	68ba      	ldr	r2, [r7, #8]
 8006956:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006960:	d03e      	beq.n	80069e0 <HAL_TIM_ConfigClockSource+0xd8>
 8006962:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006966:	f200 8087 	bhi.w	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 800696a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800696e:	f000 8086 	beq.w	8006a7e <HAL_TIM_ConfigClockSource+0x176>
 8006972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006976:	d87f      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 8006978:	2b70      	cmp	r3, #112	; 0x70
 800697a:	d01a      	beq.n	80069b2 <HAL_TIM_ConfigClockSource+0xaa>
 800697c:	2b70      	cmp	r3, #112	; 0x70
 800697e:	d87b      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 8006980:	2b60      	cmp	r3, #96	; 0x60
 8006982:	d050      	beq.n	8006a26 <HAL_TIM_ConfigClockSource+0x11e>
 8006984:	2b60      	cmp	r3, #96	; 0x60
 8006986:	d877      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 8006988:	2b50      	cmp	r3, #80	; 0x50
 800698a:	d03c      	beq.n	8006a06 <HAL_TIM_ConfigClockSource+0xfe>
 800698c:	2b50      	cmp	r3, #80	; 0x50
 800698e:	d873      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 8006990:	2b40      	cmp	r3, #64	; 0x40
 8006992:	d058      	beq.n	8006a46 <HAL_TIM_ConfigClockSource+0x13e>
 8006994:	2b40      	cmp	r3, #64	; 0x40
 8006996:	d86f      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 8006998:	2b30      	cmp	r3, #48	; 0x30
 800699a:	d064      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x15e>
 800699c:	2b30      	cmp	r3, #48	; 0x30
 800699e:	d86b      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 80069a0:	2b20      	cmp	r3, #32
 80069a2:	d060      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x15e>
 80069a4:	2b20      	cmp	r3, #32
 80069a6:	d867      	bhi.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d05c      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x15e>
 80069ac:	2b10      	cmp	r3, #16
 80069ae:	d05a      	beq.n	8006a66 <HAL_TIM_ConfigClockSource+0x15e>
 80069b0:	e062      	b.n	8006a78 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069c2:	f000 fbef 	bl	80071a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80069d4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	68ba      	ldr	r2, [r7, #8]
 80069dc:	609a      	str	r2, [r3, #8]
      break;
 80069de:	e04f      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80069f0:	f000 fbd8 	bl	80071a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a02:	609a      	str	r2, [r3, #8]
      break;
 8006a04:	e03c      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a12:	461a      	mov	r2, r3
 8006a14:	f000 fb4c 	bl	80070b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	2150      	movs	r1, #80	; 0x50
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f000 fba5 	bl	800716e <TIM_ITRx_SetConfig>
      break;
 8006a24:	e02c      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006a32:	461a      	mov	r2, r3
 8006a34:	f000 fb6b 	bl	800710e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2160      	movs	r1, #96	; 0x60
 8006a3e:	4618      	mov	r0, r3
 8006a40:	f000 fb95 	bl	800716e <TIM_ITRx_SetConfig>
      break;
 8006a44:	e01c      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006a52:	461a      	mov	r2, r3
 8006a54:	f000 fb2c 	bl	80070b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2140      	movs	r1, #64	; 0x40
 8006a5e:	4618      	mov	r0, r3
 8006a60:	f000 fb85 	bl	800716e <TIM_ITRx_SetConfig>
      break;
 8006a64:	e00c      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4610      	mov	r0, r2
 8006a72:	f000 fb7c 	bl	800716e <TIM_ITRx_SetConfig>
      break;
 8006a76:	e003      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8006a78:	2301      	movs	r3, #1
 8006a7a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a7c:	e000      	b.n	8006a80 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8006a7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2201      	movs	r2, #1
 8006a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006a90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}

08006a9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b083      	sub	sp, #12
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006aa2:	bf00      	nop
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b083      	sub	sp, #12
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ab6:	bf00      	nop
 8006ab8:	370c      	adds	r7, #12
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr

08006ac2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006ac2:	b480      	push	{r7}
 8006ac4:	b083      	sub	sp, #12
 8006ac6:	af00      	add	r7, sp, #0
 8006ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006aca:	bf00      	nop
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr

08006ad6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	4a2a      	ldr	r2, [pc, #168]	; (8006ba8 <TIM_Base_SetConfig+0xbc>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d003      	beq.n	8006b0c <TIM_Base_SetConfig+0x20>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b0a:	d108      	bne.n	8006b1e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	68fa      	ldr	r2, [r7, #12]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4a21      	ldr	r2, [pc, #132]	; (8006ba8 <TIM_Base_SetConfig+0xbc>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d00b      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d007      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <TIM_Base_SetConfig+0xc0>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d003      	beq.n	8006b3e <TIM_Base_SetConfig+0x52>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a1d      	ldr	r2, [pc, #116]	; (8006bb0 <TIM_Base_SetConfig+0xc4>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d108      	bne.n	8006b50 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b44:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	695b      	ldr	r3, [r3, #20]
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a0c      	ldr	r2, [pc, #48]	; (8006ba8 <TIM_Base_SetConfig+0xbc>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d007      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a0b      	ldr	r2, [pc, #44]	; (8006bac <TIM_Base_SetConfig+0xc0>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_Base_SetConfig+0xa0>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a0a      	ldr	r2, [pc, #40]	; (8006bb0 <TIM_Base_SetConfig+0xc4>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d103      	bne.n	8006b94 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	691a      	ldr	r2, [r3, #16]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	615a      	str	r2, [r3, #20]
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40014000 	.word	0x40014000
 8006bb0:	40014400 	.word	0x40014400

08006bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6a1b      	ldr	r3, [r3, #32]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a1b      	ldr	r3, [r3, #32]
 8006bc8:	f023 0201 	bic.w	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	699b      	ldr	r3, [r3, #24]
 8006bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006be2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006be6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0303 	bic.w	r3, r3, #3
 8006bee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 0302 	bic.w	r3, r3, #2
 8006c00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	689b      	ldr	r3, [r3, #8]
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a24      	ldr	r2, [pc, #144]	; (8006ca0 <TIM_OC1_SetConfig+0xec>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d007      	beq.n	8006c24 <TIM_OC1_SetConfig+0x70>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a23      	ldr	r2, [pc, #140]	; (8006ca4 <TIM_OC1_SetConfig+0xf0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d003      	beq.n	8006c24 <TIM_OC1_SetConfig+0x70>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a22      	ldr	r2, [pc, #136]	; (8006ca8 <TIM_OC1_SetConfig+0xf4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d10c      	bne.n	8006c3e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f023 0308 	bic.w	r3, r3, #8
 8006c2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	697a      	ldr	r2, [r7, #20]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	f023 0304 	bic.w	r3, r3, #4
 8006c3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	4a17      	ldr	r2, [pc, #92]	; (8006ca0 <TIM_OC1_SetConfig+0xec>)
 8006c42:	4293      	cmp	r3, r2
 8006c44:	d007      	beq.n	8006c56 <TIM_OC1_SetConfig+0xa2>
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	4a16      	ldr	r2, [pc, #88]	; (8006ca4 <TIM_OC1_SetConfig+0xf0>)
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d003      	beq.n	8006c56 <TIM_OC1_SetConfig+0xa2>
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	4a15      	ldr	r2, [pc, #84]	; (8006ca8 <TIM_OC1_SetConfig+0xf4>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d111      	bne.n	8006c7a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	693a      	ldr	r2, [r7, #16]
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	693a      	ldr	r2, [r7, #16]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	68fa      	ldr	r2, [r7, #12]
 8006c84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	685a      	ldr	r2, [r3, #4]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	621a      	str	r2, [r3, #32]
}
 8006c94:	bf00      	nop
 8006c96:	371c      	adds	r7, #28
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40012c00 	.word	0x40012c00
 8006ca4:	40014000 	.word	0x40014000
 8006ca8:	40014400 	.word	0x40014400

08006cac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
 8006cc0:	f023 0210 	bic.w	r2, r3, #16
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	699b      	ldr	r3, [r3, #24]
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006cda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	021b      	lsls	r3, r3, #8
 8006cee:	68fa      	ldr	r2, [r7, #12]
 8006cf0:	4313      	orrs	r3, r2
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f023 0320 	bic.w	r3, r3, #32
 8006cfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	011b      	lsls	r3, r3, #4
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4313      	orrs	r3, r2
 8006d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	4a22      	ldr	r2, [pc, #136]	; (8006d94 <TIM_OC2_SetConfig+0xe8>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d10d      	bne.n	8006d2c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006d16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	011b      	lsls	r3, r3, #4
 8006d1e:	697a      	ldr	r2, [r7, #20]
 8006d20:	4313      	orrs	r3, r2
 8006d22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006d2a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a19      	ldr	r2, [pc, #100]	; (8006d94 <TIM_OC2_SetConfig+0xe8>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_OC2_SetConfig+0x98>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a18      	ldr	r2, [pc, #96]	; (8006d98 <TIM_OC2_SetConfig+0xec>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_OC2_SetConfig+0x98>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <TIM_OC2_SetConfig+0xf0>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d113      	bne.n	8006d6c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006d52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	695b      	ldr	r3, [r3, #20]
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	693a      	ldr	r2, [r7, #16]
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	699b      	ldr	r3, [r3, #24]
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	693a      	ldr	r2, [r7, #16]
 8006d70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	68fa      	ldr	r2, [r7, #12]
 8006d76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	685a      	ldr	r2, [r3, #4]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	697a      	ldr	r2, [r7, #20]
 8006d84:	621a      	str	r2, [r3, #32]
}
 8006d86:	bf00      	nop
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	40012c00 	.word	0x40012c00
 8006d98:	40014000 	.word	0x40014000
 8006d9c:	40014400 	.word	0x40014400

08006da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	f023 0303 	bic.w	r3, r3, #3
 8006dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	4313      	orrs	r3, r2
 8006de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006de6:	697b      	ldr	r3, [r7, #20]
 8006de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	021b      	lsls	r3, r3, #8
 8006df4:	697a      	ldr	r2, [r7, #20]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	4a21      	ldr	r2, [pc, #132]	; (8006e84 <TIM_OC3_SetConfig+0xe4>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d10d      	bne.n	8006e1e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	68db      	ldr	r3, [r3, #12]
 8006e0e:	021b      	lsls	r3, r3, #8
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a18      	ldr	r2, [pc, #96]	; (8006e84 <TIM_OC3_SetConfig+0xe4>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d007      	beq.n	8006e36 <TIM_OC3_SetConfig+0x96>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	4a17      	ldr	r2, [pc, #92]	; (8006e88 <TIM_OC3_SetConfig+0xe8>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d003      	beq.n	8006e36 <TIM_OC3_SetConfig+0x96>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a16      	ldr	r2, [pc, #88]	; (8006e8c <TIM_OC3_SetConfig+0xec>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d113      	bne.n	8006e5e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006e3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006e3e:	693b      	ldr	r3, [r7, #16]
 8006e40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006e44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	011b      	lsls	r3, r3, #4
 8006e4c:	693a      	ldr	r2, [r7, #16]
 8006e4e:	4313      	orrs	r3, r2
 8006e50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	699b      	ldr	r3, [r3, #24]
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	693a      	ldr	r2, [r7, #16]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68fa      	ldr	r2, [r7, #12]
 8006e68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685a      	ldr	r2, [r3, #4]
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	621a      	str	r2, [r3, #32]
}
 8006e78:	bf00      	nop
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	40012c00 	.word	0x40012c00
 8006e88:	40014000 	.word	0x40014000
 8006e8c:	40014400 	.word	0x40014400

08006e90 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b087      	sub	sp, #28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
 8006e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	69db      	ldr	r3, [r3, #28]
 8006eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	021b      	lsls	r3, r3, #8
 8006ed2:	68fa      	ldr	r2, [r7, #12]
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006ed8:	693b      	ldr	r3, [r7, #16]
 8006eda:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ede:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ee0:	683b      	ldr	r3, [r7, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	031b      	lsls	r3, r3, #12
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	4a14      	ldr	r2, [pc, #80]	; (8006f40 <TIM_OC4_SetConfig+0xb0>)
 8006ef0:	4293      	cmp	r3, r2
 8006ef2:	d007      	beq.n	8006f04 <TIM_OC4_SetConfig+0x74>
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	4a13      	ldr	r2, [pc, #76]	; (8006f44 <TIM_OC4_SetConfig+0xb4>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d003      	beq.n	8006f04 <TIM_OC4_SetConfig+0x74>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	4a12      	ldr	r2, [pc, #72]	; (8006f48 <TIM_OC4_SetConfig+0xb8>)
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d109      	bne.n	8006f18 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006f0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	019b      	lsls	r3, r3, #6
 8006f12:	697a      	ldr	r2, [r7, #20]
 8006f14:	4313      	orrs	r3, r2
 8006f16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	697a      	ldr	r2, [r7, #20]
 8006f1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	68fa      	ldr	r2, [r7, #12]
 8006f22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	685a      	ldr	r2, [r3, #4]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	693a      	ldr	r2, [r7, #16]
 8006f30:	621a      	str	r2, [r3, #32]
}
 8006f32:	bf00      	nop
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40012c00 	.word	0x40012c00
 8006f44:	40014000 	.word	0x40014000
 8006f48:	40014400 	.word	0x40014400

08006f4c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b087      	sub	sp, #28
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
 8006f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	6a1b      	ldr	r3, [r3, #32]
 8006f5a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a1b      	ldr	r3, [r3, #32]
 8006f60:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	4313      	orrs	r3, r2
 8006f88:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006f8a:	693b      	ldr	r3, [r7, #16]
 8006f8c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006f90:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	041b      	lsls	r3, r3, #16
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	4a13      	ldr	r2, [pc, #76]	; (8006ff0 <TIM_OC5_SetConfig+0xa4>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d007      	beq.n	8006fb6 <TIM_OC5_SetConfig+0x6a>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	4a12      	ldr	r2, [pc, #72]	; (8006ff4 <TIM_OC5_SetConfig+0xa8>)
 8006faa:	4293      	cmp	r3, r2
 8006fac:	d003      	beq.n	8006fb6 <TIM_OC5_SetConfig+0x6a>
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	4a11      	ldr	r2, [pc, #68]	; (8006ff8 <TIM_OC5_SetConfig+0xac>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d109      	bne.n	8006fca <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006fbc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	021b      	lsls	r3, r3, #8
 8006fc4:	697a      	ldr	r2, [r7, #20]
 8006fc6:	4313      	orrs	r3, r2
 8006fc8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	697a      	ldr	r2, [r7, #20]
 8006fce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	68fa      	ldr	r2, [r7, #12]
 8006fd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	693a      	ldr	r2, [r7, #16]
 8006fe2:	621a      	str	r2, [r3, #32]
}
 8006fe4:	bf00      	nop
 8006fe6:	371c      	adds	r7, #28
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	40012c00 	.word	0x40012c00
 8006ff4:	40014000 	.word	0x40014000
 8006ff8:	40014400 	.word	0x40014400

08006ffc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b087      	sub	sp, #28
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6a1b      	ldr	r3, [r3, #32]
 800700a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6a1b      	ldr	r3, [r3, #32]
 8007010:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800702a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800702e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	021b      	lsls	r3, r3, #8
 8007036:	68fa      	ldr	r2, [r7, #12]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007042:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	051b      	lsls	r3, r3, #20
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	4313      	orrs	r3, r2
 800704e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	4a14      	ldr	r2, [pc, #80]	; (80070a4 <TIM_OC6_SetConfig+0xa8>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d007      	beq.n	8007068 <TIM_OC6_SetConfig+0x6c>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	4a13      	ldr	r2, [pc, #76]	; (80070a8 <TIM_OC6_SetConfig+0xac>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d003      	beq.n	8007068 <TIM_OC6_SetConfig+0x6c>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	4a12      	ldr	r2, [pc, #72]	; (80070ac <TIM_OC6_SetConfig+0xb0>)
 8007064:	4293      	cmp	r3, r2
 8007066:	d109      	bne.n	800707c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800706e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	695b      	ldr	r3, [r3, #20]
 8007074:	029b      	lsls	r3, r3, #10
 8007076:	697a      	ldr	r2, [r7, #20]
 8007078:	4313      	orrs	r3, r2
 800707a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	697a      	ldr	r2, [r7, #20]
 8007080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	685a      	ldr	r2, [r3, #4]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	693a      	ldr	r2, [r7, #16]
 8007094:	621a      	str	r2, [r3, #32]
}
 8007096:	bf00      	nop
 8007098:	371c      	adds	r7, #28
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr
 80070a2:	bf00      	nop
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40014000 	.word	0x40014000
 80070ac:	40014400 	.word	0x40014400

080070b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80070b0:	b480      	push	{r7}
 80070b2:	b087      	sub	sp, #28
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	60f8      	str	r0, [r7, #12]
 80070b8:	60b9      	str	r1, [r7, #8]
 80070ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	6a1b      	ldr	r3, [r3, #32]
 80070c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	6a1b      	ldr	r3, [r3, #32]
 80070c6:	f023 0201 	bic.w	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	699b      	ldr	r3, [r3, #24]
 80070d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80070da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	011b      	lsls	r3, r3, #4
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	4313      	orrs	r3, r2
 80070e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80070e6:	697b      	ldr	r3, [r7, #20]
 80070e8:	f023 030a 	bic.w	r3, r3, #10
 80070ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80070ee:	697a      	ldr	r2, [r7, #20]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	693a      	ldr	r2, [r7, #16]
 80070fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	697a      	ldr	r2, [r7, #20]
 8007100:	621a      	str	r2, [r3, #32]
}
 8007102:	bf00      	nop
 8007104:	371c      	adds	r7, #28
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800710e:	b480      	push	{r7}
 8007110:	b087      	sub	sp, #28
 8007112:	af00      	add	r7, sp, #0
 8007114:	60f8      	str	r0, [r7, #12]
 8007116:	60b9      	str	r1, [r7, #8]
 8007118:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6a1b      	ldr	r3, [r3, #32]
 800711e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	6a1b      	ldr	r3, [r3, #32]
 8007124:	f023 0210 	bic.w	r2, r3, #16
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	699b      	ldr	r3, [r3, #24]
 8007130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007132:	693b      	ldr	r3, [r7, #16]
 8007134:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	031b      	lsls	r3, r3, #12
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	4313      	orrs	r3, r2
 8007142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800714a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	011b      	lsls	r3, r3, #4
 8007150:	697a      	ldr	r2, [r7, #20]
 8007152:	4313      	orrs	r3, r2
 8007154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	693a      	ldr	r2, [r7, #16]
 800715a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	697a      	ldr	r2, [r7, #20]
 8007160:	621a      	str	r2, [r3, #32]
}
 8007162:	bf00      	nop
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689b      	ldr	r3, [r3, #8]
 800717c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007184:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	4313      	orrs	r3, r2
 800718c:	f043 0307 	orr.w	r3, r3, #7
 8007190:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	609a      	str	r2, [r3, #8]
}
 8007198:	bf00      	nop
 800719a:	3714      	adds	r7, #20
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
 80071b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	689b      	ldr	r3, [r3, #8]
 80071b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	021a      	lsls	r2, r3, #8
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4313      	orrs	r3, r2
 80071cc:	697a      	ldr	r2, [r7, #20]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	609a      	str	r2, [r3, #8]
}
 80071d8:	bf00      	nop
 80071da:	371c      	adds	r7, #28
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071f4:	2b01      	cmp	r3, #1
 80071f6:	d101      	bne.n	80071fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071f8:	2302      	movs	r3, #2
 80071fa:	e04f      	b.n	800729c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2202      	movs	r2, #2
 8007208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	689b      	ldr	r3, [r3, #8]
 800721a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	4a21      	ldr	r2, [pc, #132]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d108      	bne.n	8007238 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800722c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	685b      	ldr	r3, [r3, #4]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	4313      	orrs	r3, r2
 8007236:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	4313      	orrs	r3, r2
 8007248:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68fa      	ldr	r2, [r7, #12]
 8007250:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	4a14      	ldr	r2, [pc, #80]	; (80072a8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d009      	beq.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007264:	d004      	beq.n	8007270 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d10c      	bne.n	800728a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007276:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	689b      	ldr	r3, [r3, #8]
 800727c:	68ba      	ldr	r2, [r7, #8]
 800727e:	4313      	orrs	r3, r2
 8007280:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	68ba      	ldr	r2, [r7, #8]
 8007288:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2201      	movs	r2, #1
 800728e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2200      	movs	r2, #0
 8007296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800729a:	2300      	movs	r3, #0
}
 800729c:	4618      	mov	r0, r3
 800729e:	3714      	adds	r7, #20
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr
 80072a8:	40012c00 	.word	0x40012c00
 80072ac:	40014000 	.word	0x40014000

080072b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b083      	sub	sp, #12
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072b8:	bf00      	nop
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c2:	4770      	bx	lr

080072c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80072fa:	2301      	movs	r3, #1
 80072fc:	e040      	b.n	8007380 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007302:	2b00      	cmp	r3, #0
 8007304:	d106      	bne.n	8007314 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fa f9e2 	bl	80016d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2224      	movs	r2, #36	; 0x24
 8007318:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0201 	bic.w	r2, r2, #1
 8007328:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800732e:	2b00      	cmp	r3, #0
 8007330:	d002      	beq.n	8007338 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fade 	bl	80078f4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 f8af 	bl	800749c <UART_SetConfig>
 800733e:	4603      	mov	r3, r0
 8007340:	2b01      	cmp	r3, #1
 8007342:	d101      	bne.n	8007348 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e01b      	b.n	8007380 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685a      	ldr	r2, [r3, #4]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007356:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	689a      	ldr	r2, [r3, #8]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007366:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f042 0201 	orr.w	r2, r2, #1
 8007376:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f000 fb5d 	bl	8007a38 <UART_CheckIdleState>
 800737e:	4603      	mov	r3, r0
}
 8007380:	4618      	mov	r0, r3
 8007382:	3708      	adds	r7, #8
 8007384:	46bd      	mov	sp, r7
 8007386:	bd80      	pop	{r7, pc}

08007388 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b08a      	sub	sp, #40	; 0x28
 800738c:	af02      	add	r7, sp, #8
 800738e:	60f8      	str	r0, [r7, #12]
 8007390:	60b9      	str	r1, [r7, #8]
 8007392:	603b      	str	r3, [r7, #0]
 8007394:	4613      	mov	r3, r2
 8007396:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800739c:	2b20      	cmp	r3, #32
 800739e:	d178      	bne.n	8007492 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d002      	beq.n	80073ac <HAL_UART_Transmit+0x24>
 80073a6:	88fb      	ldrh	r3, [r7, #6]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d101      	bne.n	80073b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80073ac:	2301      	movs	r3, #1
 80073ae:	e071      	b.n	8007494 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2221      	movs	r2, #33	; 0x21
 80073bc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073be:	f7fa fa87 	bl	80018d0 <HAL_GetTick>
 80073c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	88fa      	ldrh	r2, [r7, #6]
 80073c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	88fa      	ldrh	r2, [r7, #6]
 80073d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073dc:	d108      	bne.n	80073f0 <HAL_UART_Transmit+0x68>
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	691b      	ldr	r3, [r3, #16]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d104      	bne.n	80073f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80073e6:	2300      	movs	r3, #0
 80073e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	61bb      	str	r3, [r7, #24]
 80073ee:	e003      	b.n	80073f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80073f4:	2300      	movs	r3, #0
 80073f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80073f8:	e030      	b.n	800745c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	9300      	str	r3, [sp, #0]
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	2200      	movs	r2, #0
 8007402:	2180      	movs	r1, #128	; 0x80
 8007404:	68f8      	ldr	r0, [r7, #12]
 8007406:	f000 fbbf 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 800740a:	4603      	mov	r3, r0
 800740c:	2b00      	cmp	r3, #0
 800740e:	d004      	beq.n	800741a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2220      	movs	r2, #32
 8007414:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8007416:	2303      	movs	r3, #3
 8007418:	e03c      	b.n	8007494 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	2b00      	cmp	r3, #0
 800741e:	d10b      	bne.n	8007438 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	881a      	ldrh	r2, [r3, #0]
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800742c:	b292      	uxth	r2, r2
 800742e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	3302      	adds	r3, #2
 8007434:	61bb      	str	r3, [r7, #24]
 8007436:	e008      	b.n	800744a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	781a      	ldrb	r2, [r3, #0]
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	b292      	uxth	r2, r2
 8007442:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	3301      	adds	r3, #1
 8007448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007450:	b29b      	uxth	r3, r3
 8007452:	3b01      	subs	r3, #1
 8007454:	b29a      	uxth	r2, r3
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8007462:	b29b      	uxth	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d1c8      	bne.n	80073fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	9300      	str	r3, [sp, #0]
 800746c:	697b      	ldr	r3, [r7, #20]
 800746e:	2200      	movs	r2, #0
 8007470:	2140      	movs	r1, #64	; 0x40
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fb88 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d004      	beq.n	8007488 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2220      	movs	r2, #32
 8007482:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8007484:	2303      	movs	r3, #3
 8007486:	e005      	b.n	8007494 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800748e:	2300      	movs	r3, #0
 8007490:	e000      	b.n	8007494 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8007492:	2302      	movs	r3, #2
  }
}
 8007494:	4618      	mov	r0, r3
 8007496:	3720      	adds	r7, #32
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800749c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80074a0:	b08a      	sub	sp, #40	; 0x28
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80074a6:	2300      	movs	r3, #0
 80074a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	689a      	ldr	r2, [r3, #8]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	691b      	ldr	r3, [r3, #16]
 80074b4:	431a      	orrs	r2, r3
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	695b      	ldr	r3, [r3, #20]
 80074ba:	431a      	orrs	r2, r3
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	69db      	ldr	r3, [r3, #28]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4bb4      	ldr	r3, [pc, #720]	; (800779c <UART_SetConfig+0x300>)
 80074cc:	4013      	ands	r3, r2
 80074ce:	68fa      	ldr	r2, [r7, #12]
 80074d0:	6812      	ldr	r2, [r2, #0]
 80074d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80074d4:	430b      	orrs	r3, r1
 80074d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685b      	ldr	r3, [r3, #4]
 80074de:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	68da      	ldr	r2, [r3, #12]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4aa9      	ldr	r2, [pc, #676]	; (80077a0 <UART_SetConfig+0x304>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d004      	beq.n	8007508 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007504:	4313      	orrs	r3, r2
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007518:	430a      	orrs	r2, r1
 800751a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4aa0      	ldr	r2, [pc, #640]	; (80077a4 <UART_SetConfig+0x308>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d126      	bne.n	8007574 <UART_SetConfig+0xd8>
 8007526:	4ba0      	ldr	r3, [pc, #640]	; (80077a8 <UART_SetConfig+0x30c>)
 8007528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	2b03      	cmp	r3, #3
 8007532:	d81b      	bhi.n	800756c <UART_SetConfig+0xd0>
 8007534:	a201      	add	r2, pc, #4	; (adr r2, 800753c <UART_SetConfig+0xa0>)
 8007536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800753a:	bf00      	nop
 800753c:	0800754d 	.word	0x0800754d
 8007540:	0800755d 	.word	0x0800755d
 8007544:	08007555 	.word	0x08007555
 8007548:	08007565 	.word	0x08007565
 800754c:	2301      	movs	r3, #1
 800754e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007552:	e080      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007554:	2302      	movs	r3, #2
 8007556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800755a:	e07c      	b.n	8007656 <UART_SetConfig+0x1ba>
 800755c:	2304      	movs	r3, #4
 800755e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007562:	e078      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007564:	2308      	movs	r3, #8
 8007566:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800756a:	e074      	b.n	8007656 <UART_SetConfig+0x1ba>
 800756c:	2310      	movs	r3, #16
 800756e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007572:	e070      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a8c      	ldr	r2, [pc, #560]	; (80077ac <UART_SetConfig+0x310>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d138      	bne.n	80075f0 <UART_SetConfig+0x154>
 800757e:	4b8a      	ldr	r3, [pc, #552]	; (80077a8 <UART_SetConfig+0x30c>)
 8007580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007584:	f003 030c 	and.w	r3, r3, #12
 8007588:	2b0c      	cmp	r3, #12
 800758a:	d82d      	bhi.n	80075e8 <UART_SetConfig+0x14c>
 800758c:	a201      	add	r2, pc, #4	; (adr r2, 8007594 <UART_SetConfig+0xf8>)
 800758e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007592:	bf00      	nop
 8007594:	080075c9 	.word	0x080075c9
 8007598:	080075e9 	.word	0x080075e9
 800759c:	080075e9 	.word	0x080075e9
 80075a0:	080075e9 	.word	0x080075e9
 80075a4:	080075d9 	.word	0x080075d9
 80075a8:	080075e9 	.word	0x080075e9
 80075ac:	080075e9 	.word	0x080075e9
 80075b0:	080075e9 	.word	0x080075e9
 80075b4:	080075d1 	.word	0x080075d1
 80075b8:	080075e9 	.word	0x080075e9
 80075bc:	080075e9 	.word	0x080075e9
 80075c0:	080075e9 	.word	0x080075e9
 80075c4:	080075e1 	.word	0x080075e1
 80075c8:	2300      	movs	r3, #0
 80075ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ce:	e042      	b.n	8007656 <UART_SetConfig+0x1ba>
 80075d0:	2302      	movs	r3, #2
 80075d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075d6:	e03e      	b.n	8007656 <UART_SetConfig+0x1ba>
 80075d8:	2304      	movs	r3, #4
 80075da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075de:	e03a      	b.n	8007656 <UART_SetConfig+0x1ba>
 80075e0:	2308      	movs	r3, #8
 80075e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075e6:	e036      	b.n	8007656 <UART_SetConfig+0x1ba>
 80075e8:	2310      	movs	r3, #16
 80075ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80075ee:	e032      	b.n	8007656 <UART_SetConfig+0x1ba>
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a6a      	ldr	r2, [pc, #424]	; (80077a0 <UART_SetConfig+0x304>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d12a      	bne.n	8007650 <UART_SetConfig+0x1b4>
 80075fa:	4b6b      	ldr	r3, [pc, #428]	; (80077a8 <UART_SetConfig+0x30c>)
 80075fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007600:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007604:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007608:	d01a      	beq.n	8007640 <UART_SetConfig+0x1a4>
 800760a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800760e:	d81b      	bhi.n	8007648 <UART_SetConfig+0x1ac>
 8007610:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007614:	d00c      	beq.n	8007630 <UART_SetConfig+0x194>
 8007616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800761a:	d815      	bhi.n	8007648 <UART_SetConfig+0x1ac>
 800761c:	2b00      	cmp	r3, #0
 800761e:	d003      	beq.n	8007628 <UART_SetConfig+0x18c>
 8007620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007624:	d008      	beq.n	8007638 <UART_SetConfig+0x19c>
 8007626:	e00f      	b.n	8007648 <UART_SetConfig+0x1ac>
 8007628:	2300      	movs	r3, #0
 800762a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800762e:	e012      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007630:	2302      	movs	r3, #2
 8007632:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007636:	e00e      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007638:	2304      	movs	r3, #4
 800763a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800763e:	e00a      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007640:	2308      	movs	r3, #8
 8007642:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007646:	e006      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007648:	2310      	movs	r3, #16
 800764a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800764e:	e002      	b.n	8007656 <UART_SetConfig+0x1ba>
 8007650:	2310      	movs	r3, #16
 8007652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	4a51      	ldr	r2, [pc, #324]	; (80077a0 <UART_SetConfig+0x304>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d17a      	bne.n	8007756 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007660:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007664:	2b08      	cmp	r3, #8
 8007666:	d824      	bhi.n	80076b2 <UART_SetConfig+0x216>
 8007668:	a201      	add	r2, pc, #4	; (adr r2, 8007670 <UART_SetConfig+0x1d4>)
 800766a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766e:	bf00      	nop
 8007670:	08007695 	.word	0x08007695
 8007674:	080076b3 	.word	0x080076b3
 8007678:	0800769d 	.word	0x0800769d
 800767c:	080076b3 	.word	0x080076b3
 8007680:	080076a3 	.word	0x080076a3
 8007684:	080076b3 	.word	0x080076b3
 8007688:	080076b3 	.word	0x080076b3
 800768c:	080076b3 	.word	0x080076b3
 8007690:	080076ab 	.word	0x080076ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007694:	f7fe fb80 	bl	8005d98 <HAL_RCC_GetPCLK1Freq>
 8007698:	61f8      	str	r0, [r7, #28]
        break;
 800769a:	e010      	b.n	80076be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800769c:	4b44      	ldr	r3, [pc, #272]	; (80077b0 <UART_SetConfig+0x314>)
 800769e:	61fb      	str	r3, [r7, #28]
        break;
 80076a0:	e00d      	b.n	80076be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076a2:	f7fe fae1 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80076a6:	61f8      	str	r0, [r7, #28]
        break;
 80076a8:	e009      	b.n	80076be <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076ae:	61fb      	str	r3, [r7, #28]
        break;
 80076b0:	e005      	b.n	80076be <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80076b6:	2301      	movs	r3, #1
 80076b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80076bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f000 8107 	beq.w	80078d4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4613      	mov	r3, r2
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	4413      	add	r3, r2
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	429a      	cmp	r2, r3
 80076d4:	d305      	bcc.n	80076e2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	685b      	ldr	r3, [r3, #4]
 80076da:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80076dc:	69fa      	ldr	r2, [r7, #28]
 80076de:	429a      	cmp	r2, r3
 80076e0:	d903      	bls.n	80076ea <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80076e8:	e0f4      	b.n	80078d4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80076ea:	69fb      	ldr	r3, [r7, #28]
 80076ec:	2200      	movs	r2, #0
 80076ee:	461c      	mov	r4, r3
 80076f0:	4615      	mov	r5, r2
 80076f2:	f04f 0200 	mov.w	r2, #0
 80076f6:	f04f 0300 	mov.w	r3, #0
 80076fa:	022b      	lsls	r3, r5, #8
 80076fc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8007700:	0222      	lsls	r2, r4, #8
 8007702:	68f9      	ldr	r1, [r7, #12]
 8007704:	6849      	ldr	r1, [r1, #4]
 8007706:	0849      	lsrs	r1, r1, #1
 8007708:	2000      	movs	r0, #0
 800770a:	4688      	mov	r8, r1
 800770c:	4681      	mov	r9, r0
 800770e:	eb12 0a08 	adds.w	sl, r2, r8
 8007712:	eb43 0b09 	adc.w	fp, r3, r9
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	2200      	movs	r2, #0
 800771c:	603b      	str	r3, [r7, #0]
 800771e:	607a      	str	r2, [r7, #4]
 8007720:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007724:	4650      	mov	r0, sl
 8007726:	4659      	mov	r1, fp
 8007728:	f7f8 ff66 	bl	80005f8 <__aeabi_uldivmod>
 800772c:	4602      	mov	r2, r0
 800772e:	460b      	mov	r3, r1
 8007730:	4613      	mov	r3, r2
 8007732:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007734:	69bb      	ldr	r3, [r7, #24]
 8007736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800773a:	d308      	bcc.n	800774e <UART_SetConfig+0x2b2>
 800773c:	69bb      	ldr	r3, [r7, #24]
 800773e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007742:	d204      	bcs.n	800774e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	60da      	str	r2, [r3, #12]
 800774c:	e0c2      	b.n	80078d4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800774e:	2301      	movs	r3, #1
 8007750:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007754:	e0be      	b.n	80078d4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800775e:	d16a      	bne.n	8007836 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8007760:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007764:	2b08      	cmp	r3, #8
 8007766:	d834      	bhi.n	80077d2 <UART_SetConfig+0x336>
 8007768:	a201      	add	r2, pc, #4	; (adr r2, 8007770 <UART_SetConfig+0x2d4>)
 800776a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800776e:	bf00      	nop
 8007770:	08007795 	.word	0x08007795
 8007774:	080077b5 	.word	0x080077b5
 8007778:	080077bd 	.word	0x080077bd
 800777c:	080077d3 	.word	0x080077d3
 8007780:	080077c3 	.word	0x080077c3
 8007784:	080077d3 	.word	0x080077d3
 8007788:	080077d3 	.word	0x080077d3
 800778c:	080077d3 	.word	0x080077d3
 8007790:	080077cb 	.word	0x080077cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007794:	f7fe fb00 	bl	8005d98 <HAL_RCC_GetPCLK1Freq>
 8007798:	61f8      	str	r0, [r7, #28]
        break;
 800779a:	e020      	b.n	80077de <UART_SetConfig+0x342>
 800779c:	efff69f3 	.word	0xefff69f3
 80077a0:	40008000 	.word	0x40008000
 80077a4:	40013800 	.word	0x40013800
 80077a8:	40021000 	.word	0x40021000
 80077ac:	40004400 	.word	0x40004400
 80077b0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077b4:	f7fe fb06 	bl	8005dc4 <HAL_RCC_GetPCLK2Freq>
 80077b8:	61f8      	str	r0, [r7, #28]
        break;
 80077ba:	e010      	b.n	80077de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80077bc:	4b4c      	ldr	r3, [pc, #304]	; (80078f0 <UART_SetConfig+0x454>)
 80077be:	61fb      	str	r3, [r7, #28]
        break;
 80077c0:	e00d      	b.n	80077de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80077c2:	f7fe fa51 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 80077c6:	61f8      	str	r0, [r7, #28]
        break;
 80077c8:	e009      	b.n	80077de <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ce:	61fb      	str	r3, [r7, #28]
        break;
 80077d0:	e005      	b.n	80077de <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80077d2:	2300      	movs	r3, #0
 80077d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80077d6:	2301      	movs	r3, #1
 80077d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80077dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d077      	beq.n	80078d4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80077e4:	69fb      	ldr	r3, [r7, #28]
 80077e6:	005a      	lsls	r2, r3, #1
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	085b      	lsrs	r3, r3, #1
 80077ee:	441a      	add	r2, r3
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80077f8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80077fa:	69bb      	ldr	r3, [r7, #24]
 80077fc:	2b0f      	cmp	r3, #15
 80077fe:	d916      	bls.n	800782e <UART_SetConfig+0x392>
 8007800:	69bb      	ldr	r3, [r7, #24]
 8007802:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007806:	d212      	bcs.n	800782e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	b29b      	uxth	r3, r3
 800780c:	f023 030f 	bic.w	r3, r3, #15
 8007810:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007812:	69bb      	ldr	r3, [r7, #24]
 8007814:	085b      	lsrs	r3, r3, #1
 8007816:	b29b      	uxth	r3, r3
 8007818:	f003 0307 	and.w	r3, r3, #7
 800781c:	b29a      	uxth	r2, r3
 800781e:	8afb      	ldrh	r3, [r7, #22]
 8007820:	4313      	orrs	r3, r2
 8007822:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	8afa      	ldrh	r2, [r7, #22]
 800782a:	60da      	str	r2, [r3, #12]
 800782c:	e052      	b.n	80078d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800782e:	2301      	movs	r3, #1
 8007830:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007834:	e04e      	b.n	80078d4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007836:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800783a:	2b08      	cmp	r3, #8
 800783c:	d827      	bhi.n	800788e <UART_SetConfig+0x3f2>
 800783e:	a201      	add	r2, pc, #4	; (adr r2, 8007844 <UART_SetConfig+0x3a8>)
 8007840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007844:	08007869 	.word	0x08007869
 8007848:	08007871 	.word	0x08007871
 800784c:	08007879 	.word	0x08007879
 8007850:	0800788f 	.word	0x0800788f
 8007854:	0800787f 	.word	0x0800787f
 8007858:	0800788f 	.word	0x0800788f
 800785c:	0800788f 	.word	0x0800788f
 8007860:	0800788f 	.word	0x0800788f
 8007864:	08007887 	.word	0x08007887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007868:	f7fe fa96 	bl	8005d98 <HAL_RCC_GetPCLK1Freq>
 800786c:	61f8      	str	r0, [r7, #28]
        break;
 800786e:	e014      	b.n	800789a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007870:	f7fe faa8 	bl	8005dc4 <HAL_RCC_GetPCLK2Freq>
 8007874:	61f8      	str	r0, [r7, #28]
        break;
 8007876:	e010      	b.n	800789a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007878:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <UART_SetConfig+0x454>)
 800787a:	61fb      	str	r3, [r7, #28]
        break;
 800787c:	e00d      	b.n	800789a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800787e:	f7fe f9f3 	bl	8005c68 <HAL_RCC_GetSysClockFreq>
 8007882:	61f8      	str	r0, [r7, #28]
        break;
 8007884:	e009      	b.n	800789a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800788a:	61fb      	str	r3, [r7, #28]
        break;
 800788c:	e005      	b.n	800789a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800788e:	2300      	movs	r3, #0
 8007890:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007898:	bf00      	nop
    }

    if (pclk != 0U)
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	2b00      	cmp	r3, #0
 800789e:	d019      	beq.n	80078d4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	085a      	lsrs	r2, r3, #1
 80078a6:	69fb      	ldr	r3, [r7, #28]
 80078a8:	441a      	add	r2, r3
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80078b2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	2b0f      	cmp	r3, #15
 80078b8:	d909      	bls.n	80078ce <UART_SetConfig+0x432>
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078c0:	d205      	bcs.n	80078ce <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	b29a      	uxth	r2, r3
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60da      	str	r2, [r3, #12]
 80078cc:	e002      	b.n	80078d4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2200      	movs	r2, #0
 80078d8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	2200      	movs	r2, #0
 80078de:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80078e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80078e4:	4618      	mov	r0, r3
 80078e6:	3728      	adds	r7, #40	; 0x28
 80078e8:	46bd      	mov	sp, r7
 80078ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078ee:	bf00      	nop
 80078f0:	00f42400 	.word	0x00f42400

080078f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b083      	sub	sp, #12
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b00      	cmp	r3, #0
 8007906:	d00a      	beq.n	800791e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	685b      	ldr	r3, [r3, #4]
 800790e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	430a      	orrs	r2, r1
 800791c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007922:	f003 0301 	and.w	r3, r3, #1
 8007926:	2b00      	cmp	r3, #0
 8007928:	d00a      	beq.n	8007940 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	430a      	orrs	r2, r1
 800793e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007944:	f003 0302 	and.w	r3, r3, #2
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00a      	beq.n	8007962 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	430a      	orrs	r2, r1
 8007960:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	f003 0304 	and.w	r3, r3, #4
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00a      	beq.n	8007984 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	430a      	orrs	r2, r1
 8007982:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007988:	f003 0310 	and.w	r3, r3, #16
 800798c:	2b00      	cmp	r3, #0
 800798e:	d00a      	beq.n	80079a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	430a      	orrs	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	689b      	ldr	r3, [r3, #8]
 80079b8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	430a      	orrs	r2, r1
 80079c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d01a      	beq.n	8007a0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	430a      	orrs	r2, r1
 80079e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079f2:	d10a      	bne.n	8007a0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	430a      	orrs	r2, r1
 8007a08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	430a      	orrs	r2, r1
 8007a2a:	605a      	str	r2, [r3, #4]
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a36:	4770      	bx	lr

08007a38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007a38:	b580      	push	{r7, lr}
 8007a3a:	b098      	sub	sp, #96	; 0x60
 8007a3c:	af02      	add	r7, sp, #8
 8007a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007a48:	f7f9 ff42 	bl	80018d0 <HAL_GetTick>
 8007a4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f003 0308 	and.w	r3, r3, #8
 8007a58:	2b08      	cmp	r3, #8
 8007a5a:	d12e      	bne.n	8007aba <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a64:	2200      	movs	r2, #0
 8007a66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f000 f88c 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d021      	beq.n	8007aba <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a7e:	e853 3f00 	ldrex	r3, [r3]
 8007a82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a8a:	653b      	str	r3, [r7, #80]	; 0x50
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	461a      	mov	r2, r3
 8007a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a94:	647b      	str	r3, [r7, #68]	; 0x44
 8007a96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a9c:	e841 2300 	strex	r3, r2, [r1]
 8007aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007aa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1e6      	bne.n	8007a76 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ab6:	2303      	movs	r3, #3
 8007ab8:	e062      	b.n	8007b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f003 0304 	and.w	r3, r3, #4
 8007ac4:	2b04      	cmp	r3, #4
 8007ac6:	d149      	bne.n	8007b5c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ac8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007acc:	9300      	str	r3, [sp, #0]
 8007ace:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007ad6:	6878      	ldr	r0, [r7, #4]
 8007ad8:	f000 f856 	bl	8007b88 <UART_WaitOnFlagUntilTimeout>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d03c      	beq.n	8007b5c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	623b      	str	r3, [r7, #32]
   return(result);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b00:	633b      	str	r3, [r7, #48]	; 0x30
 8007b02:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007b06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007b0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	3308      	adds	r3, #8
 8007b1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	e853 3f00 	ldrex	r3, [r3]
 8007b22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	f023 0301 	bic.w	r3, r3, #1
 8007b2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3308      	adds	r3, #8
 8007b32:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b34:	61fa      	str	r2, [r7, #28]
 8007b36:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b38:	69b9      	ldr	r1, [r7, #24]
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	e841 2300 	strex	r3, r2, [r1]
 8007b40:	617b      	str	r3, [r7, #20]
   return(result);
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d1e5      	bne.n	8007b14 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2220      	movs	r2, #32
 8007b4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007b58:	2303      	movs	r3, #3
 8007b5a:	e011      	b.n	8007b80 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2220      	movs	r2, #32
 8007b60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2220      	movs	r2, #32
 8007b66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2200      	movs	r2, #0
 8007b74:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007b7e:	2300      	movs	r3, #0
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3758      	adds	r7, #88	; 0x58
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	60f8      	str	r0, [r7, #12]
 8007b90:	60b9      	str	r1, [r7, #8]
 8007b92:	603b      	str	r3, [r7, #0]
 8007b94:	4613      	mov	r3, r2
 8007b96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b98:	e049      	b.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ba0:	d045      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ba2:	f7f9 fe95 	bl	80018d0 <HAL_GetTick>
 8007ba6:	4602      	mov	r2, r0
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	1ad3      	subs	r3, r2, r3
 8007bac:	69ba      	ldr	r2, [r7, #24]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d302      	bcc.n	8007bb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8007bb2:	69bb      	ldr	r3, [r7, #24]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	e048      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f003 0304 	and.w	r3, r3, #4
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d031      	beq.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f003 0308 	and.w	r3, r3, #8
 8007bd4:	2b08      	cmp	r3, #8
 8007bd6:	d110      	bne.n	8007bfa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2208      	movs	r2, #8
 8007bde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007be0:	68f8      	ldr	r0, [r7, #12]
 8007be2:	f000 f838 	bl	8007c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2208      	movs	r2, #8
 8007bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007bee:	68fb      	ldr	r3, [r7, #12]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	e029      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	69db      	ldr	r3, [r3, #28]
 8007c00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007c08:	d111      	bne.n	8007c2e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007c12:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007c14:	68f8      	ldr	r0, [r7, #12]
 8007c16:	f000 f81e 	bl	8007c56 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2220      	movs	r2, #32
 8007c1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2200      	movs	r2, #0
 8007c26:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	e00f      	b.n	8007c4e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4013      	ands	r3, r2
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	bf0c      	ite	eq
 8007c3e:	2301      	moveq	r3, #1
 8007c40:	2300      	movne	r3, #0
 8007c42:	b2db      	uxtb	r3, r3
 8007c44:	461a      	mov	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d0a6      	beq.n	8007b9a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}

08007c56 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007c56:	b480      	push	{r7}
 8007c58:	b095      	sub	sp, #84	; 0x54
 8007c5a:	af00      	add	r7, sp, #0
 8007c5c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	e853 3f00 	ldrex	r3, [r3]
 8007c6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	461a      	mov	r2, r3
 8007c7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c7e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007c82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007c84:	e841 2300 	strex	r3, r2, [r1]
 8007c88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d1e6      	bne.n	8007c5e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3308      	adds	r3, #8
 8007c96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6a3b      	ldr	r3, [r7, #32]
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ca0:	69fb      	ldr	r3, [r7, #28]
 8007ca2:	f023 0301 	bic.w	r3, r3, #1
 8007ca6:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	3308      	adds	r3, #8
 8007cae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007cb0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007cb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cb8:	e841 2300 	strex	r3, r2, [r1]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d1e5      	bne.n	8007c90 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cc8:	2b01      	cmp	r3, #1
 8007cca:	d118      	bne.n	8007cfe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	f023 0310 	bic.w	r3, r3, #16
 8007ce0:	647b      	str	r3, [r7, #68]	; 0x44
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	461a      	mov	r2, r3
 8007ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cea:	61bb      	str	r3, [r7, #24]
 8007cec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cee:	6979      	ldr	r1, [r7, #20]
 8007cf0:	69ba      	ldr	r2, [r7, #24]
 8007cf2:	e841 2300 	strex	r3, r2, [r1]
 8007cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1e6      	bne.n	8007ccc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2220      	movs	r2, #32
 8007d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	2200      	movs	r2, #0
 8007d0a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007d12:	bf00      	nop
 8007d14:	3754      	adds	r7, #84	; 0x54
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr
	...

08007d20 <siprintf>:
 8007d20:	b40e      	push	{r1, r2, r3}
 8007d22:	b500      	push	{lr}
 8007d24:	b09c      	sub	sp, #112	; 0x70
 8007d26:	ab1d      	add	r3, sp, #116	; 0x74
 8007d28:	9002      	str	r0, [sp, #8]
 8007d2a:	9006      	str	r0, [sp, #24]
 8007d2c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007d30:	4809      	ldr	r0, [pc, #36]	; (8007d58 <siprintf+0x38>)
 8007d32:	9107      	str	r1, [sp, #28]
 8007d34:	9104      	str	r1, [sp, #16]
 8007d36:	4909      	ldr	r1, [pc, #36]	; (8007d5c <siprintf+0x3c>)
 8007d38:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d3c:	9105      	str	r1, [sp, #20]
 8007d3e:	6800      	ldr	r0, [r0, #0]
 8007d40:	9301      	str	r3, [sp, #4]
 8007d42:	a902      	add	r1, sp, #8
 8007d44:	f000 f992 	bl	800806c <_svfiprintf_r>
 8007d48:	9b02      	ldr	r3, [sp, #8]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	b01c      	add	sp, #112	; 0x70
 8007d50:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d54:	b003      	add	sp, #12
 8007d56:	4770      	bx	lr
 8007d58:	2000005c 	.word	0x2000005c
 8007d5c:	ffff0208 	.word	0xffff0208

08007d60 <memset>:
 8007d60:	4402      	add	r2, r0
 8007d62:	4603      	mov	r3, r0
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d100      	bne.n	8007d6a <memset+0xa>
 8007d68:	4770      	bx	lr
 8007d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d6e:	e7f9      	b.n	8007d64 <memset+0x4>

08007d70 <__errno>:
 8007d70:	4b01      	ldr	r3, [pc, #4]	; (8007d78 <__errno+0x8>)
 8007d72:	6818      	ldr	r0, [r3, #0]
 8007d74:	4770      	bx	lr
 8007d76:	bf00      	nop
 8007d78:	2000005c 	.word	0x2000005c

08007d7c <__libc_init_array>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	4d0d      	ldr	r5, [pc, #52]	; (8007db4 <__libc_init_array+0x38>)
 8007d80:	4c0d      	ldr	r4, [pc, #52]	; (8007db8 <__libc_init_array+0x3c>)
 8007d82:	1b64      	subs	r4, r4, r5
 8007d84:	10a4      	asrs	r4, r4, #2
 8007d86:	2600      	movs	r6, #0
 8007d88:	42a6      	cmp	r6, r4
 8007d8a:	d109      	bne.n	8007da0 <__libc_init_array+0x24>
 8007d8c:	4d0b      	ldr	r5, [pc, #44]	; (8007dbc <__libc_init_array+0x40>)
 8007d8e:	4c0c      	ldr	r4, [pc, #48]	; (8007dc0 <__libc_init_array+0x44>)
 8007d90:	f000 fc6a 	bl	8008668 <_init>
 8007d94:	1b64      	subs	r4, r4, r5
 8007d96:	10a4      	asrs	r4, r4, #2
 8007d98:	2600      	movs	r6, #0
 8007d9a:	42a6      	cmp	r6, r4
 8007d9c:	d105      	bne.n	8007daa <__libc_init_array+0x2e>
 8007d9e:	bd70      	pop	{r4, r5, r6, pc}
 8007da0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007da4:	4798      	blx	r3
 8007da6:	3601      	adds	r6, #1
 8007da8:	e7ee      	b.n	8007d88 <__libc_init_array+0xc>
 8007daa:	f855 3b04 	ldr.w	r3, [r5], #4
 8007dae:	4798      	blx	r3
 8007db0:	3601      	adds	r6, #1
 8007db2:	e7f2      	b.n	8007d9a <__libc_init_array+0x1e>
 8007db4:	0800876c 	.word	0x0800876c
 8007db8:	0800876c 	.word	0x0800876c
 8007dbc:	0800876c 	.word	0x0800876c
 8007dc0:	08008770 	.word	0x08008770

08007dc4 <__retarget_lock_acquire_recursive>:
 8007dc4:	4770      	bx	lr

08007dc6 <__retarget_lock_release_recursive>:
 8007dc6:	4770      	bx	lr

08007dc8 <_free_r>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d044      	beq.n	8007e58 <_free_r+0x90>
 8007dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dda:	bfb8      	it	lt
 8007ddc:	18e4      	addlt	r4, r4, r3
 8007dde:	f000 f8df 	bl	8007fa0 <__malloc_lock>
 8007de2:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <_free_r+0x94>)
 8007de4:	9801      	ldr	r0, [sp, #4]
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	b933      	cbnz	r3, 8007df8 <_free_r+0x30>
 8007dea:	6063      	str	r3, [r4, #4]
 8007dec:	6014      	str	r4, [r2, #0]
 8007dee:	b003      	add	sp, #12
 8007df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007df4:	f000 b8da 	b.w	8007fac <__malloc_unlock>
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d908      	bls.n	8007e0e <_free_r+0x46>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf01      	itttt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	1949      	addeq	r1, r1, r5
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	e7ed      	b.n	8007dea <_free_r+0x22>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b10b      	cbz	r3, 8007e18 <_free_r+0x50>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d9fa      	bls.n	8007e0e <_free_r+0x46>
 8007e18:	6811      	ldr	r1, [r2, #0]
 8007e1a:	1855      	adds	r5, r2, r1
 8007e1c:	42a5      	cmp	r5, r4
 8007e1e:	d10b      	bne.n	8007e38 <_free_r+0x70>
 8007e20:	6824      	ldr	r4, [r4, #0]
 8007e22:	4421      	add	r1, r4
 8007e24:	1854      	adds	r4, r2, r1
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	d1e0      	bne.n	8007dee <_free_r+0x26>
 8007e2c:	681c      	ldr	r4, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	6053      	str	r3, [r2, #4]
 8007e32:	440c      	add	r4, r1
 8007e34:	6014      	str	r4, [r2, #0]
 8007e36:	e7da      	b.n	8007dee <_free_r+0x26>
 8007e38:	d902      	bls.n	8007e40 <_free_r+0x78>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	e7d6      	b.n	8007dee <_free_r+0x26>
 8007e40:	6825      	ldr	r5, [r4, #0]
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf04      	itt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	bf04      	itt	eq
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	6054      	str	r4, [r2, #4]
 8007e56:	e7ca      	b.n	8007dee <_free_r+0x26>
 8007e58:	b003      	add	sp, #12
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	20000488 	.word	0x20000488

08007e60 <sbrk_aligned>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4e0e      	ldr	r6, [pc, #56]	; (8007e9c <sbrk_aligned+0x3c>)
 8007e64:	460c      	mov	r4, r1
 8007e66:	6831      	ldr	r1, [r6, #0]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	b911      	cbnz	r1, 8007e72 <sbrk_aligned+0x12>
 8007e6c:	f000 fba6 	bl	80085bc <_sbrk_r>
 8007e70:	6030      	str	r0, [r6, #0]
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 fba1 	bl	80085bc <_sbrk_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d00a      	beq.n	8007e94 <sbrk_aligned+0x34>
 8007e7e:	1cc4      	adds	r4, r0, #3
 8007e80:	f024 0403 	bic.w	r4, r4, #3
 8007e84:	42a0      	cmp	r0, r4
 8007e86:	d007      	beq.n	8007e98 <sbrk_aligned+0x38>
 8007e88:	1a21      	subs	r1, r4, r0
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 fb96 	bl	80085bc <_sbrk_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d101      	bne.n	8007e98 <sbrk_aligned+0x38>
 8007e94:	f04f 34ff 	mov.w	r4, #4294967295
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	2000048c 	.word	0x2000048c

08007ea0 <_malloc_r>:
 8007ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ea4:	1ccd      	adds	r5, r1, #3
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	db01      	blt.n	8007ebc <_malloc_r+0x1c>
 8007eb8:	42a9      	cmp	r1, r5
 8007eba:	d905      	bls.n	8007ec8 <_malloc_r+0x28>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ec8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007f9c <_malloc_r+0xfc>
 8007ecc:	f000 f868 	bl	8007fa0 <__malloc_lock>
 8007ed0:	f8d8 3000 	ldr.w	r3, [r8]
 8007ed4:	461c      	mov	r4, r3
 8007ed6:	bb5c      	cbnz	r4, 8007f30 <_malloc_r+0x90>
 8007ed8:	4629      	mov	r1, r5
 8007eda:	4638      	mov	r0, r7
 8007edc:	f7ff ffc0 	bl	8007e60 <sbrk_aligned>
 8007ee0:	1c43      	adds	r3, r0, #1
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	d155      	bne.n	8007f92 <_malloc_r+0xf2>
 8007ee6:	f8d8 4000 	ldr.w	r4, [r8]
 8007eea:	4626      	mov	r6, r4
 8007eec:	2e00      	cmp	r6, #0
 8007eee:	d145      	bne.n	8007f7c <_malloc_r+0xdc>
 8007ef0:	2c00      	cmp	r4, #0
 8007ef2:	d048      	beq.n	8007f86 <_malloc_r+0xe6>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	4631      	mov	r1, r6
 8007ef8:	4638      	mov	r0, r7
 8007efa:	eb04 0903 	add.w	r9, r4, r3
 8007efe:	f000 fb5d 	bl	80085bc <_sbrk_r>
 8007f02:	4581      	cmp	r9, r0
 8007f04:	d13f      	bne.n	8007f86 <_malloc_r+0xe6>
 8007f06:	6821      	ldr	r1, [r4, #0]
 8007f08:	1a6d      	subs	r5, r5, r1
 8007f0a:	4629      	mov	r1, r5
 8007f0c:	4638      	mov	r0, r7
 8007f0e:	f7ff ffa7 	bl	8007e60 <sbrk_aligned>
 8007f12:	3001      	adds	r0, #1
 8007f14:	d037      	beq.n	8007f86 <_malloc_r+0xe6>
 8007f16:	6823      	ldr	r3, [r4, #0]
 8007f18:	442b      	add	r3, r5
 8007f1a:	6023      	str	r3, [r4, #0]
 8007f1c:	f8d8 3000 	ldr.w	r3, [r8]
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d038      	beq.n	8007f96 <_malloc_r+0xf6>
 8007f24:	685a      	ldr	r2, [r3, #4]
 8007f26:	42a2      	cmp	r2, r4
 8007f28:	d12b      	bne.n	8007f82 <_malloc_r+0xe2>
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	605a      	str	r2, [r3, #4]
 8007f2e:	e00f      	b.n	8007f50 <_malloc_r+0xb0>
 8007f30:	6822      	ldr	r2, [r4, #0]
 8007f32:	1b52      	subs	r2, r2, r5
 8007f34:	d41f      	bmi.n	8007f76 <_malloc_r+0xd6>
 8007f36:	2a0b      	cmp	r2, #11
 8007f38:	d917      	bls.n	8007f6a <_malloc_r+0xca>
 8007f3a:	1961      	adds	r1, r4, r5
 8007f3c:	42a3      	cmp	r3, r4
 8007f3e:	6025      	str	r5, [r4, #0]
 8007f40:	bf18      	it	ne
 8007f42:	6059      	strne	r1, [r3, #4]
 8007f44:	6863      	ldr	r3, [r4, #4]
 8007f46:	bf08      	it	eq
 8007f48:	f8c8 1000 	streq.w	r1, [r8]
 8007f4c:	5162      	str	r2, [r4, r5]
 8007f4e:	604b      	str	r3, [r1, #4]
 8007f50:	4638      	mov	r0, r7
 8007f52:	f104 060b 	add.w	r6, r4, #11
 8007f56:	f000 f829 	bl	8007fac <__malloc_unlock>
 8007f5a:	f026 0607 	bic.w	r6, r6, #7
 8007f5e:	1d23      	adds	r3, r4, #4
 8007f60:	1af2      	subs	r2, r6, r3
 8007f62:	d0ae      	beq.n	8007ec2 <_malloc_r+0x22>
 8007f64:	1b9b      	subs	r3, r3, r6
 8007f66:	50a3      	str	r3, [r4, r2]
 8007f68:	e7ab      	b.n	8007ec2 <_malloc_r+0x22>
 8007f6a:	42a3      	cmp	r3, r4
 8007f6c:	6862      	ldr	r2, [r4, #4]
 8007f6e:	d1dd      	bne.n	8007f2c <_malloc_r+0x8c>
 8007f70:	f8c8 2000 	str.w	r2, [r8]
 8007f74:	e7ec      	b.n	8007f50 <_malloc_r+0xb0>
 8007f76:	4623      	mov	r3, r4
 8007f78:	6864      	ldr	r4, [r4, #4]
 8007f7a:	e7ac      	b.n	8007ed6 <_malloc_r+0x36>
 8007f7c:	4634      	mov	r4, r6
 8007f7e:	6876      	ldr	r6, [r6, #4]
 8007f80:	e7b4      	b.n	8007eec <_malloc_r+0x4c>
 8007f82:	4613      	mov	r3, r2
 8007f84:	e7cc      	b.n	8007f20 <_malloc_r+0x80>
 8007f86:	230c      	movs	r3, #12
 8007f88:	603b      	str	r3, [r7, #0]
 8007f8a:	4638      	mov	r0, r7
 8007f8c:	f000 f80e 	bl	8007fac <__malloc_unlock>
 8007f90:	e797      	b.n	8007ec2 <_malloc_r+0x22>
 8007f92:	6025      	str	r5, [r4, #0]
 8007f94:	e7dc      	b.n	8007f50 <_malloc_r+0xb0>
 8007f96:	605b      	str	r3, [r3, #4]
 8007f98:	deff      	udf	#255	; 0xff
 8007f9a:	bf00      	nop
 8007f9c:	20000488 	.word	0x20000488

08007fa0 <__malloc_lock>:
 8007fa0:	4801      	ldr	r0, [pc, #4]	; (8007fa8 <__malloc_lock+0x8>)
 8007fa2:	f7ff bf0f 	b.w	8007dc4 <__retarget_lock_acquire_recursive>
 8007fa6:	bf00      	nop
 8007fa8:	20000484 	.word	0x20000484

08007fac <__malloc_unlock>:
 8007fac:	4801      	ldr	r0, [pc, #4]	; (8007fb4 <__malloc_unlock+0x8>)
 8007fae:	f7ff bf0a 	b.w	8007dc6 <__retarget_lock_release_recursive>
 8007fb2:	bf00      	nop
 8007fb4:	20000484 	.word	0x20000484

08007fb8 <__ssputs_r>:
 8007fb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fbc:	688e      	ldr	r6, [r1, #8]
 8007fbe:	461f      	mov	r7, r3
 8007fc0:	42be      	cmp	r6, r7
 8007fc2:	680b      	ldr	r3, [r1, #0]
 8007fc4:	4682      	mov	sl, r0
 8007fc6:	460c      	mov	r4, r1
 8007fc8:	4690      	mov	r8, r2
 8007fca:	d82c      	bhi.n	8008026 <__ssputs_r+0x6e>
 8007fcc:	898a      	ldrh	r2, [r1, #12]
 8007fce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fd2:	d026      	beq.n	8008022 <__ssputs_r+0x6a>
 8007fd4:	6965      	ldr	r5, [r4, #20]
 8007fd6:	6909      	ldr	r1, [r1, #16]
 8007fd8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fdc:	eba3 0901 	sub.w	r9, r3, r1
 8007fe0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fe4:	1c7b      	adds	r3, r7, #1
 8007fe6:	444b      	add	r3, r9
 8007fe8:	106d      	asrs	r5, r5, #1
 8007fea:	429d      	cmp	r5, r3
 8007fec:	bf38      	it	cc
 8007fee:	461d      	movcc	r5, r3
 8007ff0:	0553      	lsls	r3, r2, #21
 8007ff2:	d527      	bpl.n	8008044 <__ssputs_r+0x8c>
 8007ff4:	4629      	mov	r1, r5
 8007ff6:	f7ff ff53 	bl	8007ea0 <_malloc_r>
 8007ffa:	4606      	mov	r6, r0
 8007ffc:	b360      	cbz	r0, 8008058 <__ssputs_r+0xa0>
 8007ffe:	6921      	ldr	r1, [r4, #16]
 8008000:	464a      	mov	r2, r9
 8008002:	f000 faeb 	bl	80085dc <memcpy>
 8008006:	89a3      	ldrh	r3, [r4, #12]
 8008008:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800800c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008010:	81a3      	strh	r3, [r4, #12]
 8008012:	6126      	str	r6, [r4, #16]
 8008014:	6165      	str	r5, [r4, #20]
 8008016:	444e      	add	r6, r9
 8008018:	eba5 0509 	sub.w	r5, r5, r9
 800801c:	6026      	str	r6, [r4, #0]
 800801e:	60a5      	str	r5, [r4, #8]
 8008020:	463e      	mov	r6, r7
 8008022:	42be      	cmp	r6, r7
 8008024:	d900      	bls.n	8008028 <__ssputs_r+0x70>
 8008026:	463e      	mov	r6, r7
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	4632      	mov	r2, r6
 800802c:	4641      	mov	r1, r8
 800802e:	f000 faab 	bl	8008588 <memmove>
 8008032:	68a3      	ldr	r3, [r4, #8]
 8008034:	1b9b      	subs	r3, r3, r6
 8008036:	60a3      	str	r3, [r4, #8]
 8008038:	6823      	ldr	r3, [r4, #0]
 800803a:	4433      	add	r3, r6
 800803c:	6023      	str	r3, [r4, #0]
 800803e:	2000      	movs	r0, #0
 8008040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008044:	462a      	mov	r2, r5
 8008046:	f000 fad7 	bl	80085f8 <_realloc_r>
 800804a:	4606      	mov	r6, r0
 800804c:	2800      	cmp	r0, #0
 800804e:	d1e0      	bne.n	8008012 <__ssputs_r+0x5a>
 8008050:	6921      	ldr	r1, [r4, #16]
 8008052:	4650      	mov	r0, sl
 8008054:	f7ff feb8 	bl	8007dc8 <_free_r>
 8008058:	230c      	movs	r3, #12
 800805a:	f8ca 3000 	str.w	r3, [sl]
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	f04f 30ff 	mov.w	r0, #4294967295
 800806a:	e7e9      	b.n	8008040 <__ssputs_r+0x88>

0800806c <_svfiprintf_r>:
 800806c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008070:	4698      	mov	r8, r3
 8008072:	898b      	ldrh	r3, [r1, #12]
 8008074:	061b      	lsls	r3, r3, #24
 8008076:	b09d      	sub	sp, #116	; 0x74
 8008078:	4607      	mov	r7, r0
 800807a:	460d      	mov	r5, r1
 800807c:	4614      	mov	r4, r2
 800807e:	d50e      	bpl.n	800809e <_svfiprintf_r+0x32>
 8008080:	690b      	ldr	r3, [r1, #16]
 8008082:	b963      	cbnz	r3, 800809e <_svfiprintf_r+0x32>
 8008084:	2140      	movs	r1, #64	; 0x40
 8008086:	f7ff ff0b 	bl	8007ea0 <_malloc_r>
 800808a:	6028      	str	r0, [r5, #0]
 800808c:	6128      	str	r0, [r5, #16]
 800808e:	b920      	cbnz	r0, 800809a <_svfiprintf_r+0x2e>
 8008090:	230c      	movs	r3, #12
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	e0d0      	b.n	800823c <_svfiprintf_r+0x1d0>
 800809a:	2340      	movs	r3, #64	; 0x40
 800809c:	616b      	str	r3, [r5, #20]
 800809e:	2300      	movs	r3, #0
 80080a0:	9309      	str	r3, [sp, #36]	; 0x24
 80080a2:	2320      	movs	r3, #32
 80080a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80080ac:	2330      	movs	r3, #48	; 0x30
 80080ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008254 <_svfiprintf_r+0x1e8>
 80080b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080b6:	f04f 0901 	mov.w	r9, #1
 80080ba:	4623      	mov	r3, r4
 80080bc:	469a      	mov	sl, r3
 80080be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080c2:	b10a      	cbz	r2, 80080c8 <_svfiprintf_r+0x5c>
 80080c4:	2a25      	cmp	r2, #37	; 0x25
 80080c6:	d1f9      	bne.n	80080bc <_svfiprintf_r+0x50>
 80080c8:	ebba 0b04 	subs.w	fp, sl, r4
 80080cc:	d00b      	beq.n	80080e6 <_svfiprintf_r+0x7a>
 80080ce:	465b      	mov	r3, fp
 80080d0:	4622      	mov	r2, r4
 80080d2:	4629      	mov	r1, r5
 80080d4:	4638      	mov	r0, r7
 80080d6:	f7ff ff6f 	bl	8007fb8 <__ssputs_r>
 80080da:	3001      	adds	r0, #1
 80080dc:	f000 80a9 	beq.w	8008232 <_svfiprintf_r+0x1c6>
 80080e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080e2:	445a      	add	r2, fp
 80080e4:	9209      	str	r2, [sp, #36]	; 0x24
 80080e6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	f000 80a1 	beq.w	8008232 <_svfiprintf_r+0x1c6>
 80080f0:	2300      	movs	r3, #0
 80080f2:	f04f 32ff 	mov.w	r2, #4294967295
 80080f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080fa:	f10a 0a01 	add.w	sl, sl, #1
 80080fe:	9304      	str	r3, [sp, #16]
 8008100:	9307      	str	r3, [sp, #28]
 8008102:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008106:	931a      	str	r3, [sp, #104]	; 0x68
 8008108:	4654      	mov	r4, sl
 800810a:	2205      	movs	r2, #5
 800810c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008110:	4850      	ldr	r0, [pc, #320]	; (8008254 <_svfiprintf_r+0x1e8>)
 8008112:	f7f8 f865 	bl	80001e0 <memchr>
 8008116:	9a04      	ldr	r2, [sp, #16]
 8008118:	b9d8      	cbnz	r0, 8008152 <_svfiprintf_r+0xe6>
 800811a:	06d0      	lsls	r0, r2, #27
 800811c:	bf44      	itt	mi
 800811e:	2320      	movmi	r3, #32
 8008120:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008124:	0711      	lsls	r1, r2, #28
 8008126:	bf44      	itt	mi
 8008128:	232b      	movmi	r3, #43	; 0x2b
 800812a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800812e:	f89a 3000 	ldrb.w	r3, [sl]
 8008132:	2b2a      	cmp	r3, #42	; 0x2a
 8008134:	d015      	beq.n	8008162 <_svfiprintf_r+0xf6>
 8008136:	9a07      	ldr	r2, [sp, #28]
 8008138:	4654      	mov	r4, sl
 800813a:	2000      	movs	r0, #0
 800813c:	f04f 0c0a 	mov.w	ip, #10
 8008140:	4621      	mov	r1, r4
 8008142:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008146:	3b30      	subs	r3, #48	; 0x30
 8008148:	2b09      	cmp	r3, #9
 800814a:	d94d      	bls.n	80081e8 <_svfiprintf_r+0x17c>
 800814c:	b1b0      	cbz	r0, 800817c <_svfiprintf_r+0x110>
 800814e:	9207      	str	r2, [sp, #28]
 8008150:	e014      	b.n	800817c <_svfiprintf_r+0x110>
 8008152:	eba0 0308 	sub.w	r3, r0, r8
 8008156:	fa09 f303 	lsl.w	r3, r9, r3
 800815a:	4313      	orrs	r3, r2
 800815c:	9304      	str	r3, [sp, #16]
 800815e:	46a2      	mov	sl, r4
 8008160:	e7d2      	b.n	8008108 <_svfiprintf_r+0x9c>
 8008162:	9b03      	ldr	r3, [sp, #12]
 8008164:	1d19      	adds	r1, r3, #4
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	9103      	str	r1, [sp, #12]
 800816a:	2b00      	cmp	r3, #0
 800816c:	bfbb      	ittet	lt
 800816e:	425b      	neglt	r3, r3
 8008170:	f042 0202 	orrlt.w	r2, r2, #2
 8008174:	9307      	strge	r3, [sp, #28]
 8008176:	9307      	strlt	r3, [sp, #28]
 8008178:	bfb8      	it	lt
 800817a:	9204      	strlt	r2, [sp, #16]
 800817c:	7823      	ldrb	r3, [r4, #0]
 800817e:	2b2e      	cmp	r3, #46	; 0x2e
 8008180:	d10c      	bne.n	800819c <_svfiprintf_r+0x130>
 8008182:	7863      	ldrb	r3, [r4, #1]
 8008184:	2b2a      	cmp	r3, #42	; 0x2a
 8008186:	d134      	bne.n	80081f2 <_svfiprintf_r+0x186>
 8008188:	9b03      	ldr	r3, [sp, #12]
 800818a:	1d1a      	adds	r2, r3, #4
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	9203      	str	r2, [sp, #12]
 8008190:	2b00      	cmp	r3, #0
 8008192:	bfb8      	it	lt
 8008194:	f04f 33ff 	movlt.w	r3, #4294967295
 8008198:	3402      	adds	r4, #2
 800819a:	9305      	str	r3, [sp, #20]
 800819c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008264 <_svfiprintf_r+0x1f8>
 80081a0:	7821      	ldrb	r1, [r4, #0]
 80081a2:	2203      	movs	r2, #3
 80081a4:	4650      	mov	r0, sl
 80081a6:	f7f8 f81b 	bl	80001e0 <memchr>
 80081aa:	b138      	cbz	r0, 80081bc <_svfiprintf_r+0x150>
 80081ac:	9b04      	ldr	r3, [sp, #16]
 80081ae:	eba0 000a 	sub.w	r0, r0, sl
 80081b2:	2240      	movs	r2, #64	; 0x40
 80081b4:	4082      	lsls	r2, r0
 80081b6:	4313      	orrs	r3, r2
 80081b8:	3401      	adds	r4, #1
 80081ba:	9304      	str	r3, [sp, #16]
 80081bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081c0:	4825      	ldr	r0, [pc, #148]	; (8008258 <_svfiprintf_r+0x1ec>)
 80081c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081c6:	2206      	movs	r2, #6
 80081c8:	f7f8 f80a 	bl	80001e0 <memchr>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	d038      	beq.n	8008242 <_svfiprintf_r+0x1d6>
 80081d0:	4b22      	ldr	r3, [pc, #136]	; (800825c <_svfiprintf_r+0x1f0>)
 80081d2:	bb1b      	cbnz	r3, 800821c <_svfiprintf_r+0x1b0>
 80081d4:	9b03      	ldr	r3, [sp, #12]
 80081d6:	3307      	adds	r3, #7
 80081d8:	f023 0307 	bic.w	r3, r3, #7
 80081dc:	3308      	adds	r3, #8
 80081de:	9303      	str	r3, [sp, #12]
 80081e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081e2:	4433      	add	r3, r6
 80081e4:	9309      	str	r3, [sp, #36]	; 0x24
 80081e6:	e768      	b.n	80080ba <_svfiprintf_r+0x4e>
 80081e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80081ec:	460c      	mov	r4, r1
 80081ee:	2001      	movs	r0, #1
 80081f0:	e7a6      	b.n	8008140 <_svfiprintf_r+0xd4>
 80081f2:	2300      	movs	r3, #0
 80081f4:	3401      	adds	r4, #1
 80081f6:	9305      	str	r3, [sp, #20]
 80081f8:	4619      	mov	r1, r3
 80081fa:	f04f 0c0a 	mov.w	ip, #10
 80081fe:	4620      	mov	r0, r4
 8008200:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008204:	3a30      	subs	r2, #48	; 0x30
 8008206:	2a09      	cmp	r2, #9
 8008208:	d903      	bls.n	8008212 <_svfiprintf_r+0x1a6>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d0c6      	beq.n	800819c <_svfiprintf_r+0x130>
 800820e:	9105      	str	r1, [sp, #20]
 8008210:	e7c4      	b.n	800819c <_svfiprintf_r+0x130>
 8008212:	fb0c 2101 	mla	r1, ip, r1, r2
 8008216:	4604      	mov	r4, r0
 8008218:	2301      	movs	r3, #1
 800821a:	e7f0      	b.n	80081fe <_svfiprintf_r+0x192>
 800821c:	ab03      	add	r3, sp, #12
 800821e:	9300      	str	r3, [sp, #0]
 8008220:	462a      	mov	r2, r5
 8008222:	4b0f      	ldr	r3, [pc, #60]	; (8008260 <_svfiprintf_r+0x1f4>)
 8008224:	a904      	add	r1, sp, #16
 8008226:	4638      	mov	r0, r7
 8008228:	f3af 8000 	nop.w
 800822c:	1c42      	adds	r2, r0, #1
 800822e:	4606      	mov	r6, r0
 8008230:	d1d6      	bne.n	80081e0 <_svfiprintf_r+0x174>
 8008232:	89ab      	ldrh	r3, [r5, #12]
 8008234:	065b      	lsls	r3, r3, #25
 8008236:	f53f af2d 	bmi.w	8008094 <_svfiprintf_r+0x28>
 800823a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800823c:	b01d      	add	sp, #116	; 0x74
 800823e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008242:	ab03      	add	r3, sp, #12
 8008244:	9300      	str	r3, [sp, #0]
 8008246:	462a      	mov	r2, r5
 8008248:	4b05      	ldr	r3, [pc, #20]	; (8008260 <_svfiprintf_r+0x1f4>)
 800824a:	a904      	add	r1, sp, #16
 800824c:	4638      	mov	r0, r7
 800824e:	f000 f879 	bl	8008344 <_printf_i>
 8008252:	e7eb      	b.n	800822c <_svfiprintf_r+0x1c0>
 8008254:	08008730 	.word	0x08008730
 8008258:	0800873a 	.word	0x0800873a
 800825c:	00000000 	.word	0x00000000
 8008260:	08007fb9 	.word	0x08007fb9
 8008264:	08008736 	.word	0x08008736

08008268 <_printf_common>:
 8008268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800826c:	4616      	mov	r6, r2
 800826e:	4699      	mov	r9, r3
 8008270:	688a      	ldr	r2, [r1, #8]
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008278:	4293      	cmp	r3, r2
 800827a:	bfb8      	it	lt
 800827c:	4613      	movlt	r3, r2
 800827e:	6033      	str	r3, [r6, #0]
 8008280:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008284:	4607      	mov	r7, r0
 8008286:	460c      	mov	r4, r1
 8008288:	b10a      	cbz	r2, 800828e <_printf_common+0x26>
 800828a:	3301      	adds	r3, #1
 800828c:	6033      	str	r3, [r6, #0]
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	0699      	lsls	r1, r3, #26
 8008292:	bf42      	ittt	mi
 8008294:	6833      	ldrmi	r3, [r6, #0]
 8008296:	3302      	addmi	r3, #2
 8008298:	6033      	strmi	r3, [r6, #0]
 800829a:	6825      	ldr	r5, [r4, #0]
 800829c:	f015 0506 	ands.w	r5, r5, #6
 80082a0:	d106      	bne.n	80082b0 <_printf_common+0x48>
 80082a2:	f104 0a19 	add.w	sl, r4, #25
 80082a6:	68e3      	ldr	r3, [r4, #12]
 80082a8:	6832      	ldr	r2, [r6, #0]
 80082aa:	1a9b      	subs	r3, r3, r2
 80082ac:	42ab      	cmp	r3, r5
 80082ae:	dc26      	bgt.n	80082fe <_printf_common+0x96>
 80082b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80082b4:	1e13      	subs	r3, r2, #0
 80082b6:	6822      	ldr	r2, [r4, #0]
 80082b8:	bf18      	it	ne
 80082ba:	2301      	movne	r3, #1
 80082bc:	0692      	lsls	r2, r2, #26
 80082be:	d42b      	bmi.n	8008318 <_printf_common+0xb0>
 80082c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80082c4:	4649      	mov	r1, r9
 80082c6:	4638      	mov	r0, r7
 80082c8:	47c0      	blx	r8
 80082ca:	3001      	adds	r0, #1
 80082cc:	d01e      	beq.n	800830c <_printf_common+0xa4>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	6922      	ldr	r2, [r4, #16]
 80082d2:	f003 0306 	and.w	r3, r3, #6
 80082d6:	2b04      	cmp	r3, #4
 80082d8:	bf02      	ittt	eq
 80082da:	68e5      	ldreq	r5, [r4, #12]
 80082dc:	6833      	ldreq	r3, [r6, #0]
 80082de:	1aed      	subeq	r5, r5, r3
 80082e0:	68a3      	ldr	r3, [r4, #8]
 80082e2:	bf0c      	ite	eq
 80082e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80082e8:	2500      	movne	r5, #0
 80082ea:	4293      	cmp	r3, r2
 80082ec:	bfc4      	itt	gt
 80082ee:	1a9b      	subgt	r3, r3, r2
 80082f0:	18ed      	addgt	r5, r5, r3
 80082f2:	2600      	movs	r6, #0
 80082f4:	341a      	adds	r4, #26
 80082f6:	42b5      	cmp	r5, r6
 80082f8:	d11a      	bne.n	8008330 <_printf_common+0xc8>
 80082fa:	2000      	movs	r0, #0
 80082fc:	e008      	b.n	8008310 <_printf_common+0xa8>
 80082fe:	2301      	movs	r3, #1
 8008300:	4652      	mov	r2, sl
 8008302:	4649      	mov	r1, r9
 8008304:	4638      	mov	r0, r7
 8008306:	47c0      	blx	r8
 8008308:	3001      	adds	r0, #1
 800830a:	d103      	bne.n	8008314 <_printf_common+0xac>
 800830c:	f04f 30ff 	mov.w	r0, #4294967295
 8008310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008314:	3501      	adds	r5, #1
 8008316:	e7c6      	b.n	80082a6 <_printf_common+0x3e>
 8008318:	18e1      	adds	r1, r4, r3
 800831a:	1c5a      	adds	r2, r3, #1
 800831c:	2030      	movs	r0, #48	; 0x30
 800831e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008322:	4422      	add	r2, r4
 8008324:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008328:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800832c:	3302      	adds	r3, #2
 800832e:	e7c7      	b.n	80082c0 <_printf_common+0x58>
 8008330:	2301      	movs	r3, #1
 8008332:	4622      	mov	r2, r4
 8008334:	4649      	mov	r1, r9
 8008336:	4638      	mov	r0, r7
 8008338:	47c0      	blx	r8
 800833a:	3001      	adds	r0, #1
 800833c:	d0e6      	beq.n	800830c <_printf_common+0xa4>
 800833e:	3601      	adds	r6, #1
 8008340:	e7d9      	b.n	80082f6 <_printf_common+0x8e>
	...

08008344 <_printf_i>:
 8008344:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008348:	7e0f      	ldrb	r7, [r1, #24]
 800834a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800834c:	2f78      	cmp	r7, #120	; 0x78
 800834e:	4691      	mov	r9, r2
 8008350:	4680      	mov	r8, r0
 8008352:	460c      	mov	r4, r1
 8008354:	469a      	mov	sl, r3
 8008356:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800835a:	d807      	bhi.n	800836c <_printf_i+0x28>
 800835c:	2f62      	cmp	r7, #98	; 0x62
 800835e:	d80a      	bhi.n	8008376 <_printf_i+0x32>
 8008360:	2f00      	cmp	r7, #0
 8008362:	f000 80d4 	beq.w	800850e <_printf_i+0x1ca>
 8008366:	2f58      	cmp	r7, #88	; 0x58
 8008368:	f000 80c0 	beq.w	80084ec <_printf_i+0x1a8>
 800836c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008370:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008374:	e03a      	b.n	80083ec <_printf_i+0xa8>
 8008376:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800837a:	2b15      	cmp	r3, #21
 800837c:	d8f6      	bhi.n	800836c <_printf_i+0x28>
 800837e:	a101      	add	r1, pc, #4	; (adr r1, 8008384 <_printf_i+0x40>)
 8008380:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008384:	080083dd 	.word	0x080083dd
 8008388:	080083f1 	.word	0x080083f1
 800838c:	0800836d 	.word	0x0800836d
 8008390:	0800836d 	.word	0x0800836d
 8008394:	0800836d 	.word	0x0800836d
 8008398:	0800836d 	.word	0x0800836d
 800839c:	080083f1 	.word	0x080083f1
 80083a0:	0800836d 	.word	0x0800836d
 80083a4:	0800836d 	.word	0x0800836d
 80083a8:	0800836d 	.word	0x0800836d
 80083ac:	0800836d 	.word	0x0800836d
 80083b0:	080084f5 	.word	0x080084f5
 80083b4:	0800841d 	.word	0x0800841d
 80083b8:	080084af 	.word	0x080084af
 80083bc:	0800836d 	.word	0x0800836d
 80083c0:	0800836d 	.word	0x0800836d
 80083c4:	08008517 	.word	0x08008517
 80083c8:	0800836d 	.word	0x0800836d
 80083cc:	0800841d 	.word	0x0800841d
 80083d0:	0800836d 	.word	0x0800836d
 80083d4:	0800836d 	.word	0x0800836d
 80083d8:	080084b7 	.word	0x080084b7
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	1d1a      	adds	r2, r3, #4
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	602a      	str	r2, [r5, #0]
 80083e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80083ec:	2301      	movs	r3, #1
 80083ee:	e09f      	b.n	8008530 <_printf_i+0x1ec>
 80083f0:	6820      	ldr	r0, [r4, #0]
 80083f2:	682b      	ldr	r3, [r5, #0]
 80083f4:	0607      	lsls	r7, r0, #24
 80083f6:	f103 0104 	add.w	r1, r3, #4
 80083fa:	6029      	str	r1, [r5, #0]
 80083fc:	d501      	bpl.n	8008402 <_printf_i+0xbe>
 80083fe:	681e      	ldr	r6, [r3, #0]
 8008400:	e003      	b.n	800840a <_printf_i+0xc6>
 8008402:	0646      	lsls	r6, r0, #25
 8008404:	d5fb      	bpl.n	80083fe <_printf_i+0xba>
 8008406:	f9b3 6000 	ldrsh.w	r6, [r3]
 800840a:	2e00      	cmp	r6, #0
 800840c:	da03      	bge.n	8008416 <_printf_i+0xd2>
 800840e:	232d      	movs	r3, #45	; 0x2d
 8008410:	4276      	negs	r6, r6
 8008412:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008416:	485a      	ldr	r0, [pc, #360]	; (8008580 <_printf_i+0x23c>)
 8008418:	230a      	movs	r3, #10
 800841a:	e012      	b.n	8008442 <_printf_i+0xfe>
 800841c:	682b      	ldr	r3, [r5, #0]
 800841e:	6820      	ldr	r0, [r4, #0]
 8008420:	1d19      	adds	r1, r3, #4
 8008422:	6029      	str	r1, [r5, #0]
 8008424:	0605      	lsls	r5, r0, #24
 8008426:	d501      	bpl.n	800842c <_printf_i+0xe8>
 8008428:	681e      	ldr	r6, [r3, #0]
 800842a:	e002      	b.n	8008432 <_printf_i+0xee>
 800842c:	0641      	lsls	r1, r0, #25
 800842e:	d5fb      	bpl.n	8008428 <_printf_i+0xe4>
 8008430:	881e      	ldrh	r6, [r3, #0]
 8008432:	4853      	ldr	r0, [pc, #332]	; (8008580 <_printf_i+0x23c>)
 8008434:	2f6f      	cmp	r7, #111	; 0x6f
 8008436:	bf0c      	ite	eq
 8008438:	2308      	moveq	r3, #8
 800843a:	230a      	movne	r3, #10
 800843c:	2100      	movs	r1, #0
 800843e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008442:	6865      	ldr	r5, [r4, #4]
 8008444:	60a5      	str	r5, [r4, #8]
 8008446:	2d00      	cmp	r5, #0
 8008448:	bfa2      	ittt	ge
 800844a:	6821      	ldrge	r1, [r4, #0]
 800844c:	f021 0104 	bicge.w	r1, r1, #4
 8008450:	6021      	strge	r1, [r4, #0]
 8008452:	b90e      	cbnz	r6, 8008458 <_printf_i+0x114>
 8008454:	2d00      	cmp	r5, #0
 8008456:	d04b      	beq.n	80084f0 <_printf_i+0x1ac>
 8008458:	4615      	mov	r5, r2
 800845a:	fbb6 f1f3 	udiv	r1, r6, r3
 800845e:	fb03 6711 	mls	r7, r3, r1, r6
 8008462:	5dc7      	ldrb	r7, [r0, r7]
 8008464:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008468:	4637      	mov	r7, r6
 800846a:	42bb      	cmp	r3, r7
 800846c:	460e      	mov	r6, r1
 800846e:	d9f4      	bls.n	800845a <_printf_i+0x116>
 8008470:	2b08      	cmp	r3, #8
 8008472:	d10b      	bne.n	800848c <_printf_i+0x148>
 8008474:	6823      	ldr	r3, [r4, #0]
 8008476:	07de      	lsls	r6, r3, #31
 8008478:	d508      	bpl.n	800848c <_printf_i+0x148>
 800847a:	6923      	ldr	r3, [r4, #16]
 800847c:	6861      	ldr	r1, [r4, #4]
 800847e:	4299      	cmp	r1, r3
 8008480:	bfde      	ittt	le
 8008482:	2330      	movle	r3, #48	; 0x30
 8008484:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008488:	f105 35ff 	addle.w	r5, r5, #4294967295
 800848c:	1b52      	subs	r2, r2, r5
 800848e:	6122      	str	r2, [r4, #16]
 8008490:	f8cd a000 	str.w	sl, [sp]
 8008494:	464b      	mov	r3, r9
 8008496:	aa03      	add	r2, sp, #12
 8008498:	4621      	mov	r1, r4
 800849a:	4640      	mov	r0, r8
 800849c:	f7ff fee4 	bl	8008268 <_printf_common>
 80084a0:	3001      	adds	r0, #1
 80084a2:	d14a      	bne.n	800853a <_printf_i+0x1f6>
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	b004      	add	sp, #16
 80084aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084ae:	6823      	ldr	r3, [r4, #0]
 80084b0:	f043 0320 	orr.w	r3, r3, #32
 80084b4:	6023      	str	r3, [r4, #0]
 80084b6:	4833      	ldr	r0, [pc, #204]	; (8008584 <_printf_i+0x240>)
 80084b8:	2778      	movs	r7, #120	; 0x78
 80084ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80084be:	6823      	ldr	r3, [r4, #0]
 80084c0:	6829      	ldr	r1, [r5, #0]
 80084c2:	061f      	lsls	r7, r3, #24
 80084c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80084c8:	d402      	bmi.n	80084d0 <_printf_i+0x18c>
 80084ca:	065f      	lsls	r7, r3, #25
 80084cc:	bf48      	it	mi
 80084ce:	b2b6      	uxthmi	r6, r6
 80084d0:	07df      	lsls	r7, r3, #31
 80084d2:	bf48      	it	mi
 80084d4:	f043 0320 	orrmi.w	r3, r3, #32
 80084d8:	6029      	str	r1, [r5, #0]
 80084da:	bf48      	it	mi
 80084dc:	6023      	strmi	r3, [r4, #0]
 80084de:	b91e      	cbnz	r6, 80084e8 <_printf_i+0x1a4>
 80084e0:	6823      	ldr	r3, [r4, #0]
 80084e2:	f023 0320 	bic.w	r3, r3, #32
 80084e6:	6023      	str	r3, [r4, #0]
 80084e8:	2310      	movs	r3, #16
 80084ea:	e7a7      	b.n	800843c <_printf_i+0xf8>
 80084ec:	4824      	ldr	r0, [pc, #144]	; (8008580 <_printf_i+0x23c>)
 80084ee:	e7e4      	b.n	80084ba <_printf_i+0x176>
 80084f0:	4615      	mov	r5, r2
 80084f2:	e7bd      	b.n	8008470 <_printf_i+0x12c>
 80084f4:	682b      	ldr	r3, [r5, #0]
 80084f6:	6826      	ldr	r6, [r4, #0]
 80084f8:	6961      	ldr	r1, [r4, #20]
 80084fa:	1d18      	adds	r0, r3, #4
 80084fc:	6028      	str	r0, [r5, #0]
 80084fe:	0635      	lsls	r5, r6, #24
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	d501      	bpl.n	8008508 <_printf_i+0x1c4>
 8008504:	6019      	str	r1, [r3, #0]
 8008506:	e002      	b.n	800850e <_printf_i+0x1ca>
 8008508:	0670      	lsls	r0, r6, #25
 800850a:	d5fb      	bpl.n	8008504 <_printf_i+0x1c0>
 800850c:	8019      	strh	r1, [r3, #0]
 800850e:	2300      	movs	r3, #0
 8008510:	6123      	str	r3, [r4, #16]
 8008512:	4615      	mov	r5, r2
 8008514:	e7bc      	b.n	8008490 <_printf_i+0x14c>
 8008516:	682b      	ldr	r3, [r5, #0]
 8008518:	1d1a      	adds	r2, r3, #4
 800851a:	602a      	str	r2, [r5, #0]
 800851c:	681d      	ldr	r5, [r3, #0]
 800851e:	6862      	ldr	r2, [r4, #4]
 8008520:	2100      	movs	r1, #0
 8008522:	4628      	mov	r0, r5
 8008524:	f7f7 fe5c 	bl	80001e0 <memchr>
 8008528:	b108      	cbz	r0, 800852e <_printf_i+0x1ea>
 800852a:	1b40      	subs	r0, r0, r5
 800852c:	6060      	str	r0, [r4, #4]
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	6123      	str	r3, [r4, #16]
 8008532:	2300      	movs	r3, #0
 8008534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008538:	e7aa      	b.n	8008490 <_printf_i+0x14c>
 800853a:	6923      	ldr	r3, [r4, #16]
 800853c:	462a      	mov	r2, r5
 800853e:	4649      	mov	r1, r9
 8008540:	4640      	mov	r0, r8
 8008542:	47d0      	blx	sl
 8008544:	3001      	adds	r0, #1
 8008546:	d0ad      	beq.n	80084a4 <_printf_i+0x160>
 8008548:	6823      	ldr	r3, [r4, #0]
 800854a:	079b      	lsls	r3, r3, #30
 800854c:	d413      	bmi.n	8008576 <_printf_i+0x232>
 800854e:	68e0      	ldr	r0, [r4, #12]
 8008550:	9b03      	ldr	r3, [sp, #12]
 8008552:	4298      	cmp	r0, r3
 8008554:	bfb8      	it	lt
 8008556:	4618      	movlt	r0, r3
 8008558:	e7a6      	b.n	80084a8 <_printf_i+0x164>
 800855a:	2301      	movs	r3, #1
 800855c:	4632      	mov	r2, r6
 800855e:	4649      	mov	r1, r9
 8008560:	4640      	mov	r0, r8
 8008562:	47d0      	blx	sl
 8008564:	3001      	adds	r0, #1
 8008566:	d09d      	beq.n	80084a4 <_printf_i+0x160>
 8008568:	3501      	adds	r5, #1
 800856a:	68e3      	ldr	r3, [r4, #12]
 800856c:	9903      	ldr	r1, [sp, #12]
 800856e:	1a5b      	subs	r3, r3, r1
 8008570:	42ab      	cmp	r3, r5
 8008572:	dcf2      	bgt.n	800855a <_printf_i+0x216>
 8008574:	e7eb      	b.n	800854e <_printf_i+0x20a>
 8008576:	2500      	movs	r5, #0
 8008578:	f104 0619 	add.w	r6, r4, #25
 800857c:	e7f5      	b.n	800856a <_printf_i+0x226>
 800857e:	bf00      	nop
 8008580:	08008741 	.word	0x08008741
 8008584:	08008752 	.word	0x08008752

08008588 <memmove>:
 8008588:	4288      	cmp	r0, r1
 800858a:	b510      	push	{r4, lr}
 800858c:	eb01 0402 	add.w	r4, r1, r2
 8008590:	d902      	bls.n	8008598 <memmove+0x10>
 8008592:	4284      	cmp	r4, r0
 8008594:	4623      	mov	r3, r4
 8008596:	d807      	bhi.n	80085a8 <memmove+0x20>
 8008598:	1e43      	subs	r3, r0, #1
 800859a:	42a1      	cmp	r1, r4
 800859c:	d008      	beq.n	80085b0 <memmove+0x28>
 800859e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80085a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80085a6:	e7f8      	b.n	800859a <memmove+0x12>
 80085a8:	4402      	add	r2, r0
 80085aa:	4601      	mov	r1, r0
 80085ac:	428a      	cmp	r2, r1
 80085ae:	d100      	bne.n	80085b2 <memmove+0x2a>
 80085b0:	bd10      	pop	{r4, pc}
 80085b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80085b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80085ba:	e7f7      	b.n	80085ac <memmove+0x24>

080085bc <_sbrk_r>:
 80085bc:	b538      	push	{r3, r4, r5, lr}
 80085be:	4d06      	ldr	r5, [pc, #24]	; (80085d8 <_sbrk_r+0x1c>)
 80085c0:	2300      	movs	r3, #0
 80085c2:	4604      	mov	r4, r0
 80085c4:	4608      	mov	r0, r1
 80085c6:	602b      	str	r3, [r5, #0]
 80085c8:	f7f8 ff40 	bl	800144c <_sbrk>
 80085cc:	1c43      	adds	r3, r0, #1
 80085ce:	d102      	bne.n	80085d6 <_sbrk_r+0x1a>
 80085d0:	682b      	ldr	r3, [r5, #0]
 80085d2:	b103      	cbz	r3, 80085d6 <_sbrk_r+0x1a>
 80085d4:	6023      	str	r3, [r4, #0]
 80085d6:	bd38      	pop	{r3, r4, r5, pc}
 80085d8:	20000480 	.word	0x20000480

080085dc <memcpy>:
 80085dc:	440a      	add	r2, r1
 80085de:	4291      	cmp	r1, r2
 80085e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80085e4:	d100      	bne.n	80085e8 <memcpy+0xc>
 80085e6:	4770      	bx	lr
 80085e8:	b510      	push	{r4, lr}
 80085ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80085ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085f2:	4291      	cmp	r1, r2
 80085f4:	d1f9      	bne.n	80085ea <memcpy+0xe>
 80085f6:	bd10      	pop	{r4, pc}

080085f8 <_realloc_r>:
 80085f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085fc:	4680      	mov	r8, r0
 80085fe:	4614      	mov	r4, r2
 8008600:	460e      	mov	r6, r1
 8008602:	b921      	cbnz	r1, 800860e <_realloc_r+0x16>
 8008604:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008608:	4611      	mov	r1, r2
 800860a:	f7ff bc49 	b.w	8007ea0 <_malloc_r>
 800860e:	b92a      	cbnz	r2, 800861c <_realloc_r+0x24>
 8008610:	f7ff fbda 	bl	8007dc8 <_free_r>
 8008614:	4625      	mov	r5, r4
 8008616:	4628      	mov	r0, r5
 8008618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800861c:	f000 f81b 	bl	8008656 <_malloc_usable_size_r>
 8008620:	4284      	cmp	r4, r0
 8008622:	4607      	mov	r7, r0
 8008624:	d802      	bhi.n	800862c <_realloc_r+0x34>
 8008626:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800862a:	d812      	bhi.n	8008652 <_realloc_r+0x5a>
 800862c:	4621      	mov	r1, r4
 800862e:	4640      	mov	r0, r8
 8008630:	f7ff fc36 	bl	8007ea0 <_malloc_r>
 8008634:	4605      	mov	r5, r0
 8008636:	2800      	cmp	r0, #0
 8008638:	d0ed      	beq.n	8008616 <_realloc_r+0x1e>
 800863a:	42bc      	cmp	r4, r7
 800863c:	4622      	mov	r2, r4
 800863e:	4631      	mov	r1, r6
 8008640:	bf28      	it	cs
 8008642:	463a      	movcs	r2, r7
 8008644:	f7ff ffca 	bl	80085dc <memcpy>
 8008648:	4631      	mov	r1, r6
 800864a:	4640      	mov	r0, r8
 800864c:	f7ff fbbc 	bl	8007dc8 <_free_r>
 8008650:	e7e1      	b.n	8008616 <_realloc_r+0x1e>
 8008652:	4635      	mov	r5, r6
 8008654:	e7df      	b.n	8008616 <_realloc_r+0x1e>

08008656 <_malloc_usable_size_r>:
 8008656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800865a:	1f18      	subs	r0, r3, #4
 800865c:	2b00      	cmp	r3, #0
 800865e:	bfbc      	itt	lt
 8008660:	580b      	ldrlt	r3, [r1, r0]
 8008662:	18c0      	addlt	r0, r0, r3
 8008664:	4770      	bx	lr
	...

08008668 <_init>:
 8008668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800866a:	bf00      	nop
 800866c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800866e:	bc08      	pop	{r3}
 8008670:	469e      	mov	lr, r3
 8008672:	4770      	bx	lr

08008674 <_fini>:
 8008674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008676:	bf00      	nop
 8008678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800867a:	bc08      	pop	{r3}
 800867c:	469e      	mov	lr, r3
 800867e:	4770      	bx	lr
