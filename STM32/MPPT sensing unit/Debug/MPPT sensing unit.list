
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006544  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080066d0  080066d0  000166d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006718  08006718  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006718  08006718  00016718  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006720  08006720  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006720  08006720  00016720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006724  08006724  00016724  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006728  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  20000010  08006738  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c0  08006738  000202c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb60  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dc9  00000000  00000000  0003bbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003f9b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d1  00000000  00000000  00041200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002508b  00000000  00000000  000424d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fdab  00000000  00000000  0006755c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd7d  00000000  00000000  00087307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065f0  00000000  00000000  00167084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  0016d674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080066b8 	.word	0x080066b8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	080066b8 	.word	0x080066b8

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
{

}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	2000002c 	.word	0x2000002c

080004e8 <HSB_DebugPrint_Init>:

//Boolean for turn off debug print
//Make false to turn off
bool HSB_DebugPrintOn = true;

void HSB_DebugPrint_Init(bool input){
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	71fb      	strb	r3, [r7, #7]
	HSB_DebugPrintOn = input;
 80004f2:	4a04      	ldr	r2, [pc, #16]	; (8000504 <HSB_DebugPrint_Init+0x1c>)
 80004f4:	79fb      	ldrb	r3, [r7, #7]
 80004f6:	7013      	strb	r3, [r2, #0]
	}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	20000000 	.word	0x20000000

08000508 <HSB_VoltageModule_Init>:
//I2C variables
uint8_t i2cAddress = (0x68 << 1) | 0b0; //0xD0
uint8_t readCH1 = 0x88; // write to acd to start reading channel 1
uint8_t readCH2 = 0xA8; // write to acd to start reading channel 2

void HSB_VoltageModule_Init(uint8_t adress){
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 8000512:	79fb      	ldrb	r3, [r7, #7]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b03      	ldr	r3, [pc, #12]	; (8000528 <HSB_VoltageModule_Init+0x20>)
 800051a:	701a      	strb	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	20000001 	.word	0x20000001

0800052c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b086      	sub	sp, #24
 8000530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000532:	463b      	mov	r3, r7
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	605a      	str	r2, [r3, #4]
 800053a:	609a      	str	r2, [r3, #8]
 800053c:	60da      	str	r2, [r3, #12]
 800053e:	611a      	str	r2, [r3, #16]
 8000540:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000542:	4b30      	ldr	r3, [pc, #192]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000544:	4a30      	ldr	r2, [pc, #192]	; (8000608 <MX_ADC1_Init+0xdc>)
 8000546:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000548:	4b2e      	ldr	r3, [pc, #184]	; (8000604 <MX_ADC1_Init+0xd8>)
 800054a:	2200      	movs	r2, #0
 800054c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800054e:	4b2d      	ldr	r3, [pc, #180]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000550:	2200      	movs	r2, #0
 8000552:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000554:	4b2b      	ldr	r3, [pc, #172]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000556:	2200      	movs	r2, #0
 8000558:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800055a:	4b2a      	ldr	r3, [pc, #168]	; (8000604 <MX_ADC1_Init+0xd8>)
 800055c:	2201      	movs	r2, #1
 800055e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000560:	4b28      	ldr	r3, [pc, #160]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000562:	2204      	movs	r2, #4
 8000564:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000566:	4b27      	ldr	r3, [pc, #156]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000568:	2200      	movs	r2, #0
 800056a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <MX_ADC1_Init+0xd8>)
 800056e:	2200      	movs	r2, #0
 8000570:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000572:	4b24      	ldr	r3, [pc, #144]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000574:	2202      	movs	r2, #2
 8000576:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000578:	4b22      	ldr	r3, [pc, #136]	; (8000604 <MX_ADC1_Init+0xd8>)
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000580:	4b20      	ldr	r3, [pc, #128]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000582:	2200      	movs	r2, #0
 8000584:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000586:	4b1f      	ldr	r3, [pc, #124]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000588:	2200      	movs	r2, #0
 800058a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <MX_ADC1_Init+0xd8>)
 800058e:	2200      	movs	r2, #0
 8000590:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000594:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <MX_ADC1_Init+0xd8>)
 8000596:	2200      	movs	r2, #0
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800059a:	4b1a      	ldr	r3, [pc, #104]	; (8000604 <MX_ADC1_Init+0xd8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005a2:	4818      	ldr	r0, [pc, #96]	; (8000604 <MX_ADC1_Init+0xd8>)
 80005a4:	f000 ffb8 	bl	8001518 <HAL_ADC_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 80005ae:	f000 fb4f 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <MX_ADC1_Init+0xe0>)
 80005b4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005b6:	2306      	movs	r3, #6
 80005b8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80005ba:	2307      	movs	r3, #7
 80005bc:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005be:	237f      	movs	r3, #127	; 0x7f
 80005c0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005c2:	2304      	movs	r3, #4
 80005c4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005c6:	2300      	movs	r3, #0
 80005c8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ca:	463b      	mov	r3, r7
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	; (8000604 <MX_ADC1_Init+0xd8>)
 80005d0:	f001 faac 	bl	8001b2c <HAL_ADC_ConfigChannel>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005da:	f000 fb39 	bl	8000c50 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <MX_ADC1_Init+0xe4>)
 80005e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005e2:	230c      	movs	r3, #12
 80005e4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	; (8000604 <MX_ADC1_Init+0xd8>)
 80005ec:	f001 fa9e 	bl	8001b2c <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 80005f6:	f000 fb2b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	20000030 	.word	0x20000030
 8000608:	50040000 	.word	0x50040000
 800060c:	14f00020 	.word	0x14f00020
 8000610:	19200040 	.word	0x19200040

08000614 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b09e      	sub	sp, #120	; 0x78
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800061c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800062c:	f107 0310 	add.w	r3, r7, #16
 8000630:	2254      	movs	r2, #84	; 0x54
 8000632:	2100      	movs	r1, #0
 8000634:	4618      	mov	r0, r3
 8000636:	f006 f812 	bl	800665e <memset>
  if(adcHandle->Instance==ADC1)
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a3f      	ldr	r2, [pc, #252]	; (800073c <HAL_ADC_MspInit+0x128>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d176      	bne.n	8000732 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000644:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000648:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800064a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800064e:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000650:	2301      	movs	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000654:	2301      	movs	r3, #1
 8000656:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000658:	2310      	movs	r3, #16
 800065a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800065c:	2307      	movs	r3, #7
 800065e:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000664:	2302      	movs	r3, #2
 8000666:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800066c:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800066e:	f107 0310 	add.w	r3, r7, #16
 8000672:	4618      	mov	r0, r3
 8000674:	f004 f93c 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800067e:	f000 fae7 	bl	8000c50 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000682:	4b2f      	ldr	r3, [pc, #188]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a2e      	ldr	r2, [pc, #184]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 8000688:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b2c      	ldr	r3, [pc, #176]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b29      	ldr	r3, [pc, #164]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a28      	ldr	r2, [pc, #160]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b26      	ldr	r3, [pc, #152]	; (8000740 <HAL_ADC_MspInit+0x12c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 80006b2:	2303      	movs	r3, #3
 80006b4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b6:	230b      	movs	r3, #11
 80006b8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006be:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006c2:	4619      	mov	r1, r3
 80006c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c8:	f002 fa08 	bl	8002adc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80006cc:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006ce:	4a1e      	ldr	r2, [pc, #120]	; (8000748 <HAL_ADC_MspInit+0x134>)
 80006d0:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 80006d2:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80006d8:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006de:	4b19      	ldr	r3, [pc, #100]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006e4:	4b17      	ldr	r3, [pc, #92]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006e6:	2280      	movs	r2, #128	; 0x80
 80006e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006ea:	4b16      	ldr	r3, [pc, #88]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006f2:	4b14      	ldr	r3, [pc, #80]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <HAL_ADC_MspInit+0x130>)
 80006fc:	2220      	movs	r2, #32
 80006fe:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000700:	4b10      	ldr	r3, [pc, #64]	; (8000744 <HAL_ADC_MspInit+0x130>)
 8000702:	2200      	movs	r2, #0
 8000704:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000706:	480f      	ldr	r0, [pc, #60]	; (8000744 <HAL_ADC_MspInit+0x130>)
 8000708:	f002 f832 	bl	8002770 <HAL_DMA_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000712:	f000 fa9d 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <HAL_ADC_MspInit+0x130>)
 800071a:	64da      	str	r2, [r3, #76]	; 0x4c
 800071c:	4a09      	ldr	r2, [pc, #36]	; (8000744 <HAL_ADC_MspInit+0x130>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2101      	movs	r1, #1
 8000726:	2012      	movs	r0, #18
 8000728:	f001 ffeb 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800072c:	2012      	movs	r0, #18
 800072e:	f002 f804 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3778      	adds	r7, #120	; 0x78
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	50040000 	.word	0x50040000
 8000740:	40021000 	.word	0x40021000
 8000744:	20000094 	.word	0x20000094
 8000748:	40020008 	.word	0x40020008

0800074c <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000750:	4b17      	ldr	r3, [pc, #92]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000752:	4a18      	ldr	r2, [pc, #96]	; (80007b4 <MX_CAN1_Init+0x68>)
 8000754:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 8000756:	4b16      	ldr	r3, [pc, #88]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000758:	2208      	movs	r2, #8
 800075a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800075c:	4b14      	ldr	r3, [pc, #80]	; (80007b0 <MX_CAN1_Init+0x64>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000764:	2200      	movs	r2, #0
 8000766:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 8000768:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <MX_CAN1_Init+0x64>)
 800076a:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800076e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000772:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 8000776:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <MX_CAN1_Init+0x64>)
 800077a:	2200      	movs	r2, #0
 800077c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000780:	2200      	movs	r2, #0
 8000782:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000786:	2200      	movs	r2, #0
 8000788:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <MX_CAN1_Init+0x64>)
 800078c:	2200      	movs	r2, #0
 800078e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000790:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000792:	2200      	movs	r2, #0
 8000794:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000796:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MX_CAN1_Init+0x64>)
 8000798:	2200      	movs	r2, #0
 800079a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800079c:	4804      	ldr	r0, [pc, #16]	; (80007b0 <MX_CAN1_Init+0x64>)
 800079e:	f001 fdd9 	bl	8002354 <HAL_CAN_Init>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80007a8:	f000 fa52 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200000dc 	.word	0x200000dc
 80007b4:	40006400 	.word	0x40006400

080007b8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08a      	sub	sp, #40	; 0x28
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c0:	f107 0314 	add.w	r3, r7, #20
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a18      	ldr	r2, [pc, #96]	; (8000838 <HAL_CAN_MspInit+0x80>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d129      	bne.n	800082e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80007da:	4b18      	ldr	r3, [pc, #96]	; (800083c <HAL_CAN_MspInit+0x84>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a17      	ldr	r2, [pc, #92]	; (800083c <HAL_CAN_MspInit+0x84>)
 80007e0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <HAL_CAN_MspInit+0x84>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <HAL_CAN_MspInit+0x84>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a11      	ldr	r2, [pc, #68]	; (800083c <HAL_CAN_MspInit+0x84>)
 80007f8:	f043 0301 	orr.w	r3, r3, #1
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <HAL_CAN_MspInit+0x84>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0301 	and.w	r3, r3, #1
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800080a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800080e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	2302      	movs	r3, #2
 8000812:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800081c:	2309      	movs	r3, #9
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800082a:	f002 f957 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40006400 	.word	0x40006400
 800083c:	40021000 	.word	0x40021000

08000840 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000846:	4b14      	ldr	r3, [pc, #80]	; (8000898 <MX_DMA_Init+0x58>)
 8000848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800084a:	4a13      	ldr	r2, [pc, #76]	; (8000898 <MX_DMA_Init+0x58>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6493      	str	r3, [r2, #72]	; 0x48
 8000852:	4b11      	ldr	r3, [pc, #68]	; (8000898 <MX_DMA_Init+0x58>)
 8000854:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800085e:	2200      	movs	r2, #0
 8000860:	2100      	movs	r1, #0
 8000862:	200b      	movs	r0, #11
 8000864:	f001 ff4d 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000868:	200b      	movs	r0, #11
 800086a:	f001 ff66 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800086e:	2200      	movs	r2, #0
 8000870:	2100      	movs	r1, #0
 8000872:	2010      	movs	r0, #16
 8000874:	f001 ff45 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000878:	2010      	movs	r0, #16
 800087a:	f001 ff5e 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2011      	movs	r0, #17
 8000884:	f001 ff3d 	bl	8002702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000888:	2011      	movs	r0, #17
 800088a:	f001 ff56 	bl	800273a <HAL_NVIC_EnableIRQ>

}
 800088e:	bf00      	nop
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40021000 	.word	0x40021000

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b088      	sub	sp, #32
 80008a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b6:	4a23      	ldr	r2, [pc, #140]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008b8:	f043 0304 	orr.w	r3, r3, #4
 80008bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008c2:	f003 0304 	and.w	r3, r3, #4
 80008c6:	60bb      	str	r3, [r7, #8]
 80008c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	4a1d      	ldr	r2, [pc, #116]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0xa8>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2108      	movs	r1, #8
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0xac>)
 8000900:	f002 fa56 	bl	8002db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 8000904:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000908:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090a:	2300      	movs	r3, #0
 800090c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 030c 	add.w	r3, r7, #12
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f002 f8de 	bl	8002adc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000920:	2308      	movs	r3, #8
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 030c 	add.w	r3, r7, #12
 8000934:	4619      	mov	r1, r3
 8000936:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xac>)
 8000938:	f002 f8d0 	bl	8002adc <HAL_GPIO_Init>

}
 800093c:	bf00      	nop
 800093e:	3720      	adds	r7, #32
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	40021000 	.word	0x40021000
 8000948:	48000400 	.word	0x48000400

0800094c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000950:	4b1b      	ldr	r3, [pc, #108]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000952:	4a1c      	ldr	r2, [pc, #112]	; (80009c4 <MX_I2C1_Init+0x78>)
 8000954:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000956:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000958:	4a1b      	ldr	r2, [pc, #108]	; (80009c8 <MX_I2C1_Init+0x7c>)
 800095a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800095c:	4b18      	ldr	r3, [pc, #96]	; (80009c0 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000962:	4b17      	ldr	r3, [pc, #92]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000964:	2201      	movs	r2, #1
 8000966:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000968:	4b15      	ldr	r3, [pc, #84]	; (80009c0 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000970:	2200      	movs	r2, #0
 8000972:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800097a:	4b11      	ldr	r3, [pc, #68]	; (80009c0 <MX_I2C1_Init+0x74>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000980:	4b0f      	ldr	r3, [pc, #60]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000986:	480e      	ldr	r0, [pc, #56]	; (80009c0 <MX_I2C1_Init+0x74>)
 8000988:	f002 fa2a 	bl	8002de0 <HAL_I2C_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000992:	f000 f95d 	bl	8000c50 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000996:	2100      	movs	r1, #0
 8000998:	4809      	ldr	r0, [pc, #36]	; (80009c0 <MX_I2C1_Init+0x74>)
 800099a:	f003 f866 	bl	8003a6a <HAL_I2CEx_ConfigAnalogFilter>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009a4:	f000 f954 	bl	8000c50 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_I2C1_Init+0x74>)
 80009ac:	f003 f8a8 	bl	8003b00 <HAL_I2CEx_ConfigDigitalFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009b6:	f000 f94b 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000104 	.word	0x20000104
 80009c4:	40005400 	.word	0x40005400
 80009c8:	00707cbb 	.word	0x00707cbb

080009cc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b09e      	sub	sp, #120	; 0x78
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009d8:	2200      	movs	r2, #0
 80009da:	601a      	str	r2, [r3, #0]
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	609a      	str	r2, [r3, #8]
 80009e0:	60da      	str	r2, [r3, #12]
 80009e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009e4:	f107 0310 	add.w	r3, r7, #16
 80009e8:	2254      	movs	r2, #84	; 0x54
 80009ea:	2100      	movs	r1, #0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f005 fe36 	bl	800665e <memset>
  if(i2cHandle->Instance==I2C1)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a50      	ldr	r2, [pc, #320]	; (8000b38 <HAL_I2C_MspInit+0x16c>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	f040 8098 	bne.w	8000b2e <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009fe:	2340      	movs	r3, #64	; 0x40
 8000a00:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000a02:	2300      	movs	r3, #0
 8000a04:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a06:	f107 0310 	add.w	r3, r7, #16
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f003 ff70 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000a16:	f000 f91b 	bl	8000c50 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a1a:	4b48      	ldr	r3, [pc, #288]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1e:	4a47      	ldr	r2, [pc, #284]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a20:	f043 0302 	orr.w	r3, r3, #2
 8000a24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a2a:	f003 0302 	and.w	r3, r3, #2
 8000a2e:	60fb      	str	r3, [r7, #12]
 8000a30:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a36:	2312      	movs	r3, #18
 8000a38:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a42:	2304      	movs	r3, #4
 8000a44:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a46:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	483c      	ldr	r0, [pc, #240]	; (8000b40 <HAL_I2C_MspInit+0x174>)
 8000a4e:	f002 f845 	bl	8002adc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a56:	4a39      	ldr	r2, [pc, #228]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <HAL_I2C_MspInit+0x170>)
 8000a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000a6a:	4b36      	ldr	r3, [pc, #216]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a6c:	4a36      	ldr	r2, [pc, #216]	; (8000b48 <HAL_I2C_MspInit+0x17c>)
 8000a6e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000a70:	4b34      	ldr	r3, [pc, #208]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a72:	2203      	movs	r2, #3
 8000a74:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a76:	4b33      	ldr	r3, [pc, #204]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a7c:	4b31      	ldr	r3, [pc, #196]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a82:	4b30      	ldr	r3, [pc, #192]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a88:	4b2e      	ldr	r3, [pc, #184]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a8e:	4b2d      	ldr	r3, [pc, #180]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a94:	4b2b      	ldr	r3, [pc, #172]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a9a:	4b2a      	ldr	r3, [pc, #168]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000aa0:	4828      	ldr	r0, [pc, #160]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000aa2:	f001 fe65 	bl	8002770 <HAL_DMA_Init>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8000aac:	f000 f8d0 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	4a24      	ldr	r2, [pc, #144]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000ab4:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ab6:	4a23      	ldr	r2, [pc, #140]	; (8000b44 <HAL_I2C_MspInit+0x178>)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000abc:	4b23      	ldr	r3, [pc, #140]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000abe:	4a24      	ldr	r2, [pc, #144]	; (8000b50 <HAL_I2C_MspInit+0x184>)
 8000ac0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000ac2:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000ac4:	2203      	movs	r2, #3
 8000ac6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ac8:	4b20      	ldr	r3, [pc, #128]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000aca:	2210      	movs	r2, #16
 8000acc:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ace:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ad4:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000ad6:	2280      	movs	r2, #128	; 0x80
 8000ad8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000ae6:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000aec:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000af2:	4816      	ldr	r0, [pc, #88]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000af4:	f001 fe3c 	bl	8002770 <HAL_DMA_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8000afe:	f000 f8a7 	bl	8000c50 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000b06:	639a      	str	r2, [r3, #56]	; 0x38
 8000b08:	4a10      	ldr	r2, [pc, #64]	; (8000b4c <HAL_I2C_MspInit+0x180>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	201f      	movs	r0, #31
 8000b14:	f001 fdf5 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b18:	201f      	movs	r0, #31
 8000b1a:	f001 fe0e 	bl	800273a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2100      	movs	r1, #0
 8000b22:	2020      	movs	r0, #32
 8000b24:	f001 fded 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b28:	2020      	movs	r0, #32
 8000b2a:	f001 fe06 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000b2e:	bf00      	nop
 8000b30:	3778      	adds	r7, #120	; 0x78
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40005400 	.word	0x40005400
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	48000400 	.word	0x48000400
 8000b44:	20000158 	.word	0x20000158
 8000b48:	40020080 	.word	0x40020080
 8000b4c:	200001a0 	.word	0x200001a0
 8000b50:	4002006c 	.word	0x4002006c

08000b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b58:	f000 fab7 	bl	80010ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b5c:	f000 f816 	bl	8000b8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b60:	f7ff fe9c 	bl	800089c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b64:	f7ff fe6c 	bl	8000840 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b68:	f000 f9ec 	bl	8000f44 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000b6c:	f7ff fcde 	bl	800052c <MX_ADC1_Init>
  MX_I2C1_Init();
 8000b70:	f7ff feec 	bl	800094c <MX_I2C1_Init>
  MX_CAN1_Init();
 8000b74:	f7ff fdea 	bl	800074c <MX_CAN1_Init>
  MX_TIM2_Init();
 8000b78:	f000 f916 	bl	8000da8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f7ff fcb3 	bl	80004e8 <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 8000b82:	2068      	movs	r0, #104	; 0x68
 8000b84:	f7ff fcc0 	bl	8000508 <HSB_VoltageModule_Init>
  //HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b88:	e7fe      	b.n	8000b88 <main+0x34>
	...

08000b8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b096      	sub	sp, #88	; 0x58
 8000b90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	2244      	movs	r2, #68	; 0x44
 8000b98:	2100      	movs	r1, #0
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f005 fd5f 	bl	800665e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000bae:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000bb2:	f003 f80f 	bl	8003bd4 <HAL_PWREx_ControlVoltageScaling>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d001      	beq.n	8000bc0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000bbc:	f000 f848 	bl	8000c50 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000bc0:	f002 ffea 	bl	8003b98 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000bc4:	4b21      	ldr	r3, [pc, #132]	; (8000c4c <SystemClock_Config+0xc0>)
 8000bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000bca:	4a20      	ldr	r2, [pc, #128]	; (8000c4c <SystemClock_Config+0xc0>)
 8000bcc:	f023 0318 	bic.w	r3, r3, #24
 8000bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000bd4:	2314      	movs	r3, #20
 8000bd6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000be0:	2300      	movs	r3, #0
 8000be2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000be4:	2360      	movs	r3, #96	; 0x60
 8000be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000be8:	2302      	movs	r3, #2
 8000bea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000bec:	2301      	movs	r3, #1
 8000bee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000bf4:	2310      	movs	r3, #16
 8000bf6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c00:	2302      	movs	r3, #2
 8000c02:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f003 f839 	bl	8003c80 <HAL_RCC_OscConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000c14:	f000 f81c 	bl	8000c50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c18:	230f      	movs	r3, #15
 8000c1a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	2101      	movs	r1, #1
 8000c30:	4618      	mov	r0, r3
 8000c32:	f003 fc39 	bl	80044a8 <HAL_RCC_ClockConfig>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000c3c:	f000 f808 	bl	8000c50 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000c40:	f004 f84c 	bl	8004cdc <HAL_RCCEx_EnableMSIPLLMode>
}
 8000c44:	bf00      	nop
 8000c46:	3758      	adds	r7, #88	; 0x58
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40021000 	.word	0x40021000

08000c50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c54:	b672      	cpsid	i
}
 8000c56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c58:	e7fe      	b.n	8000c58 <Error_Handler+0x8>
	...

08000c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b0f      	ldr	r3, [pc, #60]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c66:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6613      	str	r3, [r2, #96]	; 0x60
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c7a:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c7e:	4a08      	ldr	r2, [pc, #32]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c84:	6593      	str	r3, [r2, #88]	; 0x58
 8000c86:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <HAL_MspInit+0x44>)
 8000c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c8e:	603b      	str	r3, [r7, #0]
 8000c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ca8:	e7fe      	b.n	8000ca8 <NMI_Handler+0x4>

08000caa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000caa:	b480      	push	{r7}
 8000cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cae:	e7fe      	b.n	8000cae <HardFault_Handler+0x4>

08000cb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cb4:	e7fe      	b.n	8000cb4 <MemManage_Handler+0x4>

08000cb6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cba:	e7fe      	b.n	8000cba <BusFault_Handler+0x4>

08000cbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cc0:	e7fe      	b.n	8000cc0 <UsageFault_Handler+0x4>

08000cc2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000cc2:	b480      	push	{r7}
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cc6:	bf00      	nop
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cce:	4770      	bx	lr

08000cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr

08000cde <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cde:	b480      	push	{r7}
 8000ce0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cea:	4770      	bx	lr

08000cec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cf0:	f000 fa40 	bl	8001174 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cfc:	4802      	ldr	r0, [pc, #8]	; (8000d08 <DMA1_Channel1_IRQHandler+0x10>)
 8000cfe:	f001 fe30 	bl	8002962 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	20000094 	.word	0x20000094

08000d0c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000d10:	4802      	ldr	r0, [pc, #8]	; (8000d1c <DMA1_Channel6_IRQHandler+0x10>)
 8000d12:	f001 fe26 	bl	8002962 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000d16:	bf00      	nop
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	200001a0 	.word	0x200001a0

08000d20 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000d24:	4802      	ldr	r0, [pc, #8]	; (8000d30 <DMA1_Channel7_IRQHandler+0x10>)
 8000d26:	f001 fe1c 	bl	8002962 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000d2a:	bf00      	nop
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	20000158 	.word	0x20000158

08000d34 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000d38:	4802      	ldr	r0, [pc, #8]	; (8000d44 <ADC1_IRQHandler+0x10>)
 8000d3a:	f000 fd2f 	bl	800179c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000d3e:	bf00      	nop
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000030 	.word	0x20000030

08000d48 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d4c:	4802      	ldr	r0, [pc, #8]	; (8000d58 <TIM2_IRQHandler+0x10>)
 8000d4e:	f004 f97f 	bl	8005050 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d52:	bf00      	nop
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	200001e8 	.word	0x200001e8

08000d5c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000d60:	4802      	ldr	r0, [pc, #8]	; (8000d6c <I2C1_EV_IRQHandler+0x10>)
 8000d62:	f002 f8d8 	bl	8002f16 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000d66:	bf00      	nop
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	20000104 	.word	0x20000104

08000d70 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <I2C1_ER_IRQHandler+0x10>)
 8000d76:	f002 f8e8 	bl	8002f4a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	20000104 	.word	0x20000104

08000d84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d88:	4b06      	ldr	r3, [pc, #24]	; (8000da4 <SystemInit+0x20>)
 8000d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d8e:	4a05      	ldr	r2, [pc, #20]	; (8000da4 <SystemInit+0x20>)
 8000d90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b08e      	sub	sp, #56	; 0x38
 8000dac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db2:	2200      	movs	r2, #0
 8000db4:	601a      	str	r2, [r3, #0]
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	609a      	str	r2, [r3, #8]
 8000dba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dbc:	f107 031c 	add.w	r3, r7, #28
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dc8:	463b      	mov	r3, r7
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]
 8000dd6:	615a      	str	r2, [r3, #20]
 8000dd8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000ddc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000de4:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b29      	ldr	r3, [pc, #164]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000df0:	4b27      	ldr	r3, [pc, #156]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000df2:	220a      	movs	r2, #10
 8000df4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df6:	4b26      	ldr	r3, [pc, #152]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfc:	4b24      	ldr	r3, [pc, #144]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e02:	4823      	ldr	r0, [pc, #140]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e04:	f004 f86c 	bl	8004ee0 <HAL_TIM_Base_Init>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000e0e:	f7ff ff1f 	bl	8000c50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e12:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e16:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e18:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	481c      	ldr	r0, [pc, #112]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e20:	f004 fa92 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000e2a:	f7ff ff11 	bl	8000c50 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000e2e:	4818      	ldr	r0, [pc, #96]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e30:	f004 f8ad 	bl	8004f8e <HAL_TIM_OC_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000e3a:	f7ff ff09 	bl	8000c50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e42:	2300      	movs	r3, #0
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4810      	ldr	r0, [pc, #64]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e4e:	f004 fef3 	bl	8005c38 <HAL_TIMEx_MasterConfigSynchronization>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e58:	f7ff fefa 	bl	8000c50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000e5c:	2350      	movs	r3, #80	; 0x50
 8000e5e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e6c:	463b      	mov	r3, r7
 8000e6e:	2200      	movs	r2, #0
 8000e70:	4619      	mov	r1, r3
 8000e72:	4807      	ldr	r0, [pc, #28]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e74:	f004 f9ee 	bl	8005254 <HAL_TIM_OC_ConfigChannel>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e7e:	f7ff fee7 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e82:	4803      	ldr	r0, [pc, #12]	; (8000e90 <MX_TIM2_Init+0xe8>)
 8000e84:	f000 f82a 	bl	8000edc <HAL_TIM_MspPostInit>

}
 8000e88:	bf00      	nop
 8000e8a:	3738      	adds	r7, #56	; 0x38
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	200001e8 	.word	0x200001e8

08000e94 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ea4:	d113      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8000eb2:	4b09      	ldr	r3, [pc, #36]	; (8000ed8 <HAL_TIM_Base_MspInit+0x44>)
 8000eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	201c      	movs	r0, #28
 8000ec4:	f001 fc1d 	bl	8002702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ec8:	201c      	movs	r0, #28
 8000eca:	f001 fc36 	bl	800273a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40021000 	.word	0x40021000

08000edc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]
 8000ef2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000efc:	d11c      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000efe:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <HAL_TIM_MspPostInit+0x64>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a0f      	ldr	r2, [pc, #60]	; (8000f40 <HAL_TIM_MspPostInit+0x64>)
 8000f04:	f043 0301 	orr.w	r3, r3, #1
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b0d      	ldr	r3, [pc, #52]	; (8000f40 <HAL_TIM_MspPostInit+0x64>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 8000f16:	2320      	movs	r3, #32
 8000f18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f22:	2300      	movs	r3, #0
 8000f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f26:	2301      	movs	r3, #1
 8000f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4619      	mov	r1, r3
 8000f30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f34:	f001 fdd2 	bl	8002adc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40021000 	.word	0x40021000

08000f44 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f48:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f4a:	4a15      	ldr	r2, [pc, #84]	; (8000fa0 <MX_USART2_UART_Init+0x5c>)
 8000f4c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f4e:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f54:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6e:	4b0b      	ldr	r3, [pc, #44]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f80:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f86:	4805      	ldr	r0, [pc, #20]	; (8000f9c <MX_USART2_UART_Init+0x58>)
 8000f88:	f004 feda 	bl	8005d40 <HAL_UART_Init>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f92:	f7ff fe5d 	bl	8000c50 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000234 	.word	0x20000234
 8000fa0:	40004400 	.word	0x40004400

08000fa4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b09e      	sub	sp, #120	; 0x78
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	605a      	str	r2, [r3, #4]
 8000fb6:	609a      	str	r2, [r3, #8]
 8000fb8:	60da      	str	r2, [r3, #12]
 8000fba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fbc:	f107 0310 	add.w	r3, r7, #16
 8000fc0:	2254      	movs	r2, #84	; 0x54
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f005 fb4a 	bl	800665e <memset>
  if(uartHandle->Instance==USART2)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a28      	ldr	r2, [pc, #160]	; (8001070 <HAL_UART_MspInit+0xcc>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d148      	bne.n	8001066 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fc85 	bl	80048f0 <HAL_RCCEx_PeriphCLKConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000fec:	f7ff fe30 	bl	8000c50 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ff0:	4b20      	ldr	r3, [pc, #128]	; (8001074 <HAL_UART_MspInit+0xd0>)
 8000ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff4:	4a1f      	ldr	r2, [pc, #124]	; (8001074 <HAL_UART_MspInit+0xd0>)
 8000ff6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ffa:	6593      	str	r3, [r2, #88]	; 0x58
 8000ffc:	4b1d      	ldr	r3, [pc, #116]	; (8001074 <HAL_UART_MspInit+0xd0>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001008:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <HAL_UART_MspInit+0xd0>)
 800100a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_UART_MspInit+0xd0>)
 800100e:	f043 0301 	orr.w	r3, r3, #1
 8001012:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001014:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_UART_MspInit+0xd0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	f003 0301 	and.w	r3, r3, #1
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001020:	2304      	movs	r3, #4
 8001022:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001024:	2302      	movs	r3, #2
 8001026:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102c:	2303      	movs	r3, #3
 800102e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001030:	2307      	movs	r3, #7
 8001032:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001038:	4619      	mov	r1, r3
 800103a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800103e:	f001 fd4d 	bl	8002adc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001046:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	2302      	movs	r3, #2
 800104a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800104c:	2300      	movs	r3, #0
 800104e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001050:	2303      	movs	r3, #3
 8001052:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001054:	2303      	movs	r3, #3
 8001056:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001058:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800105c:	4619      	mov	r1, r3
 800105e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001062:	f001 fd3b 	bl	8002adc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001066:	bf00      	nop
 8001068:	3778      	adds	r7, #120	; 0x78
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	40004400 	.word	0x40004400
 8001074:	40021000 	.word	0x40021000

08001078 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001078:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800107c:	f7ff fe82 	bl	8000d84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a6:	f005 fae3 	bl	8006670 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010aa:	f7ff fd53 	bl	8000b54 <main>

080010ae <LoopForever>:

LoopForever:
    b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010bc:	08006728 	.word	0x08006728
  ldr r2, =_sbss
 80010c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010c4:	200002c0 	.word	0x200002c0

080010c8 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <CAN1_RX0_IRQHandler>

080010ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d0:	2300      	movs	r3, #0
 80010d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f001 fb09 	bl	80026ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f80e 	bl	80010fc <HAL_InitTick>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	71fb      	strb	r3, [r7, #7]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010ec:	f7ff fdb6 	bl	8000c5c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	79fb      	ldrb	r3, [r7, #7]
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001104:	2300      	movs	r3, #0
 8001106:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001108:	4b17      	ldr	r3, [pc, #92]	; (8001168 <HAL_InitTick+0x6c>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d023      	beq.n	8001158 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001110:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_InitTick+0x70>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4b14      	ldr	r3, [pc, #80]	; (8001168 <HAL_InitTick+0x6c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	4619      	mov	r1, r3
 800111a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800111e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001122:	fbb2 f3f3 	udiv	r3, r2, r3
 8001126:	4618      	mov	r0, r3
 8001128:	f001 fb15 	bl	8002756 <HAL_SYSTICK_Config>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d10f      	bne.n	8001152 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2b0f      	cmp	r3, #15
 8001136:	d809      	bhi.n	800114c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001138:	2200      	movs	r2, #0
 800113a:	6879      	ldr	r1, [r7, #4]
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	f001 fadf 	bl	8002702 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_InitTick+0x74>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	e007      	b.n	800115c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800114c:	2301      	movs	r3, #1
 800114e:	73fb      	strb	r3, [r7, #15]
 8001150:	e004      	b.n	800115c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	73fb      	strb	r3, [r7, #15]
 8001156:	e001      	b.n	800115c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800115c:	7bfb      	ldrb	r3, [r7, #15]
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	2000000c 	.word	0x2000000c
 800116c:	20000004 	.word	0x20000004
 8001170:	20000008 	.word	0x20000008

08001174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001178:	4b06      	ldr	r3, [pc, #24]	; (8001194 <HAL_IncTick+0x20>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	461a      	mov	r2, r3
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <HAL_IncTick+0x24>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4413      	add	r3, r2
 8001184:	4a04      	ldr	r2, [pc, #16]	; (8001198 <HAL_IncTick+0x24>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	2000000c 	.word	0x2000000c
 8001198:	200002bc 	.word	0x200002bc

0800119c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  return uwTick;
 80011a0:	4b03      	ldr	r3, [pc, #12]	; (80011b0 <HAL_GetTick+0x14>)
 80011a2:	681b      	ldr	r3, [r3, #0]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	200002bc 	.word	0x200002bc

080011b4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
 80011bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	431a      	orrs	r2, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr

080011da <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80011da:	b480      	push	{r7}
 80011dc:	b083      	sub	sp, #12
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
 80011e2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	609a      	str	r2, [r3, #8]
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
 8001228:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	3360      	adds	r3, #96	; 0x60
 800122e:	461a      	mov	r2, r3
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <LL_ADC_SetOffset+0x44>)
 800123e:	4013      	ands	r3, r2
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	430a      	orrs	r2, r1
 800124a:	4313      	orrs	r3, r2
 800124c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001254:	bf00      	nop
 8001256:	371c      	adds	r7, #28
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr
 8001260:	03fff000 	.word	0x03fff000

08001264 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
 800126c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	3360      	adds	r3, #96	; 0x60
 8001272:	461a      	mov	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001284:	4618      	mov	r0, r3
 8001286:	3714      	adds	r7, #20
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001290:	b480      	push	{r7}
 8001292:	b087      	sub	sp, #28
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	3360      	adds	r3, #96	; 0x60
 80012a0:	461a      	mov	r2, r3
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	009b      	lsls	r3, r3, #2
 80012a6:	4413      	add	r3, r2
 80012a8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80012ba:	bf00      	nop
 80012bc:	371c      	adds	r7, #28
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80012da:	2301      	movs	r3, #1
 80012dc:	e000      	b.n	80012e0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80012de:	2300      	movs	r3, #0
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b087      	sub	sp, #28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3330      	adds	r3, #48	; 0x30
 80012fc:	461a      	mov	r2, r3
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	0a1b      	lsrs	r3, r3, #8
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	f003 030c 	and.w	r3, r3, #12
 8001308:	4413      	add	r3, r2
 800130a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	68bb      	ldr	r3, [r7, #8]
 8001312:	f003 031f 	and.w	r3, r3, #31
 8001316:	211f      	movs	r1, #31
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	401a      	ands	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	0e9b      	lsrs	r3, r3, #26
 8001324:	f003 011f 	and.w	r1, r3, #31
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	f003 031f 	and.w	r3, r3, #31
 800132e:	fa01 f303 	lsl.w	r3, r1, r3
 8001332:	431a      	orrs	r2, r3
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001338:	bf00      	nop
 800133a:	371c      	adds	r7, #28
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr

08001344 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001350:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d101      	bne.n	800135c <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001358:	2301      	movs	r3, #1
 800135a:	e000      	b.n	800135e <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800135c:	2300      	movs	r3, #0
}
 800135e:	4618      	mov	r0, r3
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3314      	adds	r3, #20
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	0e5b      	lsrs	r3, r3, #25
 8001380:	009b      	lsls	r3, r3, #2
 8001382:	f003 0304 	and.w	r3, r3, #4
 8001386:	4413      	add	r3, r2
 8001388:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800138a:	697b      	ldr	r3, [r7, #20]
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	0d1b      	lsrs	r3, r3, #20
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	2107      	movs	r1, #7
 8001398:	fa01 f303 	lsl.w	r3, r1, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	401a      	ands	r2, r3
 80013a0:	68bb      	ldr	r3, [r7, #8]
 80013a2:	0d1b      	lsrs	r3, r3, #20
 80013a4:	f003 031f 	and.w	r3, r3, #31
 80013a8:	6879      	ldr	r1, [r7, #4]
 80013aa:	fa01 f303 	lsl.w	r3, r1, r3
 80013ae:	431a      	orrs	r2, r3
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80013b4:	bf00      	nop
 80013b6:	371c      	adds	r7, #28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013d8:	43db      	mvns	r3, r3
 80013da:	401a      	ands	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f003 0318 	and.w	r3, r3, #24
 80013e2:	4908      	ldr	r1, [pc, #32]	; (8001404 <LL_ADC_SetChannelSingleDiff+0x44>)
 80013e4:	40d9      	lsrs	r1, r3
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	400b      	ands	r3, r1
 80013ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80013ee:	431a      	orrs	r2, r3
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80013f6:	bf00      	nop
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	0007ffff 	.word	0x0007ffff

08001408 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001418:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	6093      	str	r3, [r2, #8]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	689b      	ldr	r3, [r3, #8]
 8001438:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800143c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001440:	d101      	bne.n	8001446 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	689b      	ldr	r3, [r3, #8]
 8001460:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001464:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001468:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001490:	d101      	bne.n	8001496 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	d101      	bne.n	80014bc <LL_ADC_IsEnabled+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_ADC_IsEnabled+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	f003 0304 	and.w	r3, r3, #4
 80014da:	2b04      	cmp	r3, #4
 80014dc:	d101      	bne.n	80014e2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80014de:	2301      	movs	r3, #1
 80014e0:	e000      	b.n	80014e4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr

080014f0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f003 0308 	and.w	r3, r3, #8
 8001500:	2b08      	cmp	r3, #8
 8001502:	d101      	bne.n	8001508 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001504:	2301      	movs	r3, #1
 8001506:	e000      	b.n	800150a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
	...

08001518 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001520:	2300      	movs	r3, #0
 8001522:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001524:	2300      	movs	r3, #0
 8001526:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e126      	b.n	8001780 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800153c:	2b00      	cmp	r3, #0
 800153e:	d109      	bne.n	8001554 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff f867 	bl	8000614 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2200      	movs	r2, #0
 800154a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f7ff ff67 	bl	800142c <LL_ADC_IsDeepPowerDownEnabled>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d004      	beq.n	800156e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4618      	mov	r0, r3
 800156a:	f7ff ff4d 	bl	8001408 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff ff82 	bl	800147c <LL_ADC_IsInternalRegulatorEnabled>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d115      	bne.n	80015aa <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ff66 	bl	8001454 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001588:	4b7f      	ldr	r3, [pc, #508]	; (8001788 <HAL_ADC_Init+0x270>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	099b      	lsrs	r3, r3, #6
 800158e:	4a7f      	ldr	r2, [pc, #508]	; (800178c <HAL_ADC_Init+0x274>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	099b      	lsrs	r3, r3, #6
 8001596:	3301      	adds	r3, #1
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff64 	bl	800147c <LL_ADC_IsInternalRegulatorEnabled>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10d      	bne.n	80015d6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015be:	f043 0210 	orr.w	r2, r3, #16
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f043 0201 	orr.w	r2, r3, #1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff ff75 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 80015e0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	f040 80bf 	bne.w	800176e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	f040 80bb 	bne.w	800176e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fc:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001600:	f043 0202 	orr.w	r2, r3, #2
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff ff49 	bl	80014a4 <LL_ADC_IsEnabled>
 8001612:	4603      	mov	r3, r0
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10b      	bne.n	8001630 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001618:	485d      	ldr	r0, [pc, #372]	; (8001790 <HAL_ADC_Init+0x278>)
 800161a:	f7ff ff43 	bl	80014a4 <LL_ADC_IsEnabled>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d105      	bne.n	8001630 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	4619      	mov	r1, r3
 800162a:	485a      	ldr	r0, [pc, #360]	; (8001794 <HAL_ADC_Init+0x27c>)
 800162c:	f7ff fdc2 	bl	80011b4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	7e5b      	ldrb	r3, [r3, #25]
 8001634:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800163a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001640:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001646:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800164e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001650:	4313      	orrs	r3, r2
 8001652:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3020 	ldrb.w	r3, [r3, #32]
 800165a:	2b01      	cmp	r3, #1
 800165c:	d106      	bne.n	800166c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001662:	3b01      	subs	r3, #1
 8001664:	045b      	lsls	r3, r3, #17
 8001666:	69ba      	ldr	r2, [r7, #24]
 8001668:	4313      	orrs	r3, r2
 800166a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001670:	2b00      	cmp	r3, #0
 8001672:	d009      	beq.n	8001688 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001678:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4313      	orrs	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	68da      	ldr	r2, [r3, #12]
 800168e:	4b42      	ldr	r3, [pc, #264]	; (8001798 <HAL_ADC_Init+0x280>)
 8001690:	4013      	ands	r3, r2
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6812      	ldr	r2, [r2, #0]
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	430b      	orrs	r3, r1
 800169a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff25 	bl	80014f0 <LL_ADC_INJ_IsConversionOngoing>
 80016a6:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d13d      	bne.n	800172a <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d13a      	bne.n	800172a <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016b8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016c0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80016c2:	4313      	orrs	r3, r2
 80016c4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68db      	ldr	r3, [r3, #12]
 80016cc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80016d0:	f023 0302 	bic.w	r3, r3, #2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6812      	ldr	r2, [r2, #0]
 80016d8:	69b9      	ldr	r1, [r7, #24]
 80016da:	430b      	orrs	r3, r1
 80016dc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d118      	bne.n	800171a <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	691b      	ldr	r3, [r3, #16]
 80016ee:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80016f2:	f023 0304 	bic.w	r3, r3, #4
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016fe:	4311      	orrs	r1, r2
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800170a:	430a      	orrs	r2, r1
 800170c:	431a      	orrs	r2, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f042 0201 	orr.w	r2, r2, #1
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	e007      	b.n	800172a <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	691a      	ldr	r2, [r3, #16]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f022 0201 	bic.w	r2, r2, #1
 8001728:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d10c      	bne.n	800174c <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001738:	f023 010f 	bic.w	r1, r3, #15
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	69db      	ldr	r3, [r3, #28]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	631a      	str	r2, [r3, #48]	; 0x30
 800174a:	e007      	b.n	800175c <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f022 020f 	bic.w	r2, r2, #15
 800175a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f023 0303 	bic.w	r3, r3, #3
 8001764:	f043 0201 	orr.w	r2, r3, #1
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	655a      	str	r2, [r3, #84]	; 0x54
 800176c:	e007      	b.n	800177e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001772:	f043 0210 	orr.w	r2, r3, #16
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800177e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3720      	adds	r7, #32
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20000004 	.word	0x20000004
 800178c:	053e2d63 	.word	0x053e2d63
 8001790:	50040000 	.word	0x50040000
 8001794:	50040300 	.word	0x50040300
 8001798:	fff0c007 	.word	0xfff0c007

0800179c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b088      	sub	sp, #32
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80017a4:	2300      	movs	r3, #0
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d017      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x56>
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d012      	beq.n	80017f2 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017d0:	f003 0310 	and.w	r3, r3, #16
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017dc:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 fdab 	bl	8002340 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2202      	movs	r2, #2
 80017f0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80017f2:	69bb      	ldr	r3, [r7, #24]
 80017f4:	f003 0304 	and.w	r3, r3, #4
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d004      	beq.n	8001806 <HAL_ADC_IRQHandler+0x6a>
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f003 0304 	and.w	r3, r3, #4
 8001802:	2b00      	cmp	r3, #0
 8001804:	d109      	bne.n	800181a <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001806:	69bb      	ldr	r3, [r7, #24]
 8001808:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800180c:	2b00      	cmp	r3, #0
 800180e:	d05e      	beq.n	80018ce <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f003 0308 	and.w	r3, r3, #8
 8001816:	2b00      	cmp	r3, #0
 8001818:	d059      	beq.n	80018ce <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	2b00      	cmp	r3, #0
 8001824:	d105      	bne.n	8001832 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4618      	mov	r0, r3
 8001838:	f7ff fd45 	bl	80012c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d03e      	beq.n	80018c0 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d135      	bne.n	80018c0 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0308 	and.w	r3, r3, #8
 800185e:	2b08      	cmp	r3, #8
 8001860:	d12e      	bne.n	80018c0 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fe2f 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 800186c:	4603      	mov	r3, r0
 800186e:	2b00      	cmp	r3, #0
 8001870:	d11a      	bne.n	80018a8 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 020c 	bic.w	r2, r2, #12
 8001880:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d112      	bne.n	80018c0 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	655a      	str	r2, [r3, #84]	; 0x54
 80018a6:	e00b      	b.n	80018c0 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f043 0210 	orr.w	r2, r3, #16
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f043 0201 	orr.w	r2, r3, #1
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7fe fe01 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	220c      	movs	r2, #12
 80018cc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	f003 0320 	and.w	r3, r3, #32
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d004      	beq.n	80018e2 <HAL_ADC_IRQHandler+0x146>
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f003 0320 	and.w	r3, r3, #32
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d072      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d06d      	beq.n	80019d2 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	f003 0310 	and.w	r3, r3, #16
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7ff fd16 	bl	8001344 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001918:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7ff fcd1 	bl	80012c6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001924:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68db      	ldr	r3, [r3, #12]
 800192c:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d047      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d007      	beq.n	800194e <HAL_ADC_IRQHandler+0x1b2>
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d03f      	beq.n	80019c4 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800194a:	2b00      	cmp	r3, #0
 800194c:	d13a      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001958:	2b40      	cmp	r3, #64	; 0x40
 800195a:	d133      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d12e      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff fdc0 	bl	80014f0 <LL_ADC_INJ_IsConversionOngoing>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d11a      	bne.n	80019ac <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	685a      	ldr	r2, [r3, #4]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001984:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	2b00      	cmp	r3, #0
 800199c:	d112      	bne.n	80019c4 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a2:	f043 0201 	orr.w	r2, r3, #1
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	; 0x54
 80019aa:	e00b      	b.n	80019c4 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019b0:	f043 0210 	orr.w	r2, r3, #16
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	f043 0201 	orr.w	r2, r3, #1
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 fc93 	bl	80022f0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2260      	movs	r2, #96	; 0x60
 80019d0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80019d2:	69bb      	ldr	r3, [r7, #24]
 80019d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d011      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x264>
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00c      	beq.n	8001a00 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019ea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f000 f886 	bl	8001b04 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	2280      	movs	r2, #128	; 0x80
 80019fe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d012      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x294>
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00d      	beq.n	8001a30 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a18:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f000 fc79 	bl	8002318 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d012      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x2c4>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00d      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a48:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001a50:	6878      	ldr	r0, [r7, #4]
 8001a52:	f000 fc6b 	bl	800232c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a5e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	f003 0310 	and.w	r3, r3, #16
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d02a      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x324>
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	f003 0310 	and.w	r3, r3, #16
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d025      	beq.n	8001ac0 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d102      	bne.n	8001a82 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	61fb      	str	r3, [r7, #28]
 8001a80:	e008      	b.n	8001a94 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	f003 0301 	and.w	r3, r3, #1
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d001      	beq.n	8001a94 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001a90:	2301      	movs	r3, #1
 8001a92:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d10e      	bne.n	8001ab8 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a9e:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aaa:	f043 0202 	orr.w	r2, r3, #2
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f830 	bl	8001b18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2210      	movs	r2, #16
 8001abe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d018      	beq.n	8001afc <HAL_ADC_IRQHandler+0x360>
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d013      	beq.n	8001afc <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad8:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	f043 0208 	orr.w	r2, r3, #8
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001af4:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f000 fc04 	bl	8002304 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001afc:	bf00      	nop
 8001afe:	3720      	adds	r7, #32
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001b0c:	bf00      	nop
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b083      	sub	sp, #12
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001b20:	bf00      	nop
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b0b6      	sub	sp, #216	; 0xd8
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d101      	bne.n	8001b4e <HAL_ADC_ConfigChannel+0x22>
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	e3bb      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x79a>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2201      	movs	r2, #1
 8001b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fcb5 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f040 83a0 	bne.w	80022a8 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b05      	cmp	r3, #5
 8001b76:	d824      	bhi.n	8001bc2 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	3b02      	subs	r3, #2
 8001b7e:	2b03      	cmp	r3, #3
 8001b80:	d81b      	bhi.n	8001bba <HAL_ADC_ConfigChannel+0x8e>
 8001b82:	a201      	add	r2, pc, #4	; (adr r2, 8001b88 <HAL_ADC_ConfigChannel+0x5c>)
 8001b84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b88:	08001b99 	.word	0x08001b99
 8001b8c:	08001ba1 	.word	0x08001ba1
 8001b90:	08001ba9 	.word	0x08001ba9
 8001b94:	08001bb1 	.word	0x08001bb1
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001b98:	230c      	movs	r3, #12
 8001b9a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001b9e:	e010      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001ba0:	2312      	movs	r3, #18
 8001ba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001ba6:	e00c      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001ba8:	2318      	movs	r3, #24
 8001baa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bae:	e008      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001bb0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bb8:	e003      	b.n	8001bc2 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001bba:	2306      	movs	r3, #6
 8001bbc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001bc0:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6818      	ldr	r0, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	461a      	mov	r2, r3
 8001bcc:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001bd0:	f7ff fb8c 	bl	80012ec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc76 	bl	80014ca <LL_ADC_REG_IsConversionOngoing>
 8001bde:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7ff fc82 	bl	80014f0 <LL_ADC_INJ_IsConversionOngoing>
 8001bec:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001bf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 81a4 	bne.w	8001f42 <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001bfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f040 819f 	bne.w	8001f42 <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6818      	ldr	r0, [r3, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	6819      	ldr	r1, [r3, #0]
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	461a      	mov	r2, r3
 8001c12:	f7ff fbaa 	bl	800136a <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	695a      	ldr	r2, [r3, #20]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	08db      	lsrs	r3, r3, #3
 8001c22:	f003 0303 	and.w	r3, r3, #3
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d00a      	beq.n	8001c4e <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6818      	ldr	r0, [r3, #0]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	6919      	ldr	r1, [r3, #16]
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001c48:	f7ff fae8 	bl	800121c <LL_ADC_SetOffset>
 8001c4c:	e179      	b.n	8001f42 <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fb05 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d10a      	bne.n	8001c7a <HAL_ADC_ConfigChannel+0x14e>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	2100      	movs	r1, #0
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f7ff fafa 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001c70:	4603      	mov	r3, r0
 8001c72:	0e9b      	lsrs	r3, r3, #26
 8001c74:	f003 021f 	and.w	r2, r3, #31
 8001c78:	e01e      	b.n	8001cb8 <HAL_ADC_ConfigChannel+0x18c>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2100      	movs	r1, #0
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7ff faef 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001c86:	4603      	mov	r3, r0
 8001c88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c8c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001c90:	fa93 f3a3 	rbit	r3, r3
 8001c94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001c98:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001c9c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001ca0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001ca8:	2320      	movs	r3, #32
 8001caa:	e004      	b.n	8001cb6 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001cac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001cb0:	fab3 f383 	clz	r3, r3
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d105      	bne.n	8001cd0 <HAL_ADC_ConfigChannel+0x1a4>
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	0e9b      	lsrs	r3, r3, #26
 8001cca:	f003 031f 	and.w	r3, r3, #31
 8001cce:	e018      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1d6>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001cdc:	fa93 f3a3 	rbit	r3, r3
 8001ce0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ce4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001cec:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001cf4:	2320      	movs	r3, #32
 8001cf6:	e004      	b.n	8001d02 <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001cf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001cfc:	fab3 f383 	clz	r3, r3
 8001d00:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d106      	bne.n	8001d14 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff fabe 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	2101      	movs	r1, #1
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7ff faa2 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d10a      	bne.n	8001d40 <HAL_ADC_ConfigChannel+0x214>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	2101      	movs	r1, #1
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fa97 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001d36:	4603      	mov	r3, r0
 8001d38:	0e9b      	lsrs	r3, r3, #26
 8001d3a:	f003 021f 	and.w	r2, r3, #31
 8001d3e:	e01e      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x252>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2101      	movs	r1, #1
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fa8c 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001d56:	fa93 f3a3 	rbit	r3, r3
 8001d5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001d5e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001d62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001d66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001d6e:	2320      	movs	r3, #32
 8001d70:	e004      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001d72:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001d76:	fab3 f383 	clz	r3, r3
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d105      	bne.n	8001d96 <HAL_ADC_ConfigChannel+0x26a>
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	0e9b      	lsrs	r3, r3, #26
 8001d90:	f003 031f 	and.w	r3, r3, #31
 8001d94:	e018      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x29c>
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d9e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001da2:	fa93 f3a3 	rbit	r3, r3
 8001da6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001db2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d101      	bne.n	8001dbe <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001dba:	2320      	movs	r3, #32
 8001dbc:	e004      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001dbe:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dc2:	fab3 f383 	clz	r3, r3
 8001dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d106      	bne.n	8001dda <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fa5b 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2102      	movs	r1, #2
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7ff fa3f 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001de6:	4603      	mov	r3, r0
 8001de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d10a      	bne.n	8001e06 <HAL_ADC_ConfigChannel+0x2da>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2102      	movs	r1, #2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff fa34 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	0e9b      	lsrs	r3, r3, #26
 8001e00:	f003 021f 	and.w	r2, r3, #31
 8001e04:	e01e      	b.n	8001e44 <HAL_ADC_ConfigChannel+0x318>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	2102      	movs	r1, #2
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7ff fa29 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001e12:	4603      	mov	r3, r0
 8001e14:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e1c:	fa93 f3a3 	rbit	r3, r3
 8001e20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001e24:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e28:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001e2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001e34:	2320      	movs	r3, #32
 8001e36:	e004      	b.n	8001e42 <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001e38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e3c:	fab3 f383 	clz	r3, r3
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d105      	bne.n	8001e5c <HAL_ADC_ConfigChannel+0x330>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	0e9b      	lsrs	r3, r3, #26
 8001e56:	f003 031f 	and.w	r3, r3, #31
 8001e5a:	e014      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x35a>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8001e6a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 8001e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d101      	bne.n	8001e7c <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8001e78:	2320      	movs	r3, #32
 8001e7a:	e004      	b.n	8001e86 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8001e7c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e80:	fab3 f383 	clz	r3, r3
 8001e84:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001e86:	429a      	cmp	r2, r3
 8001e88:	d106      	bne.n	8001e98 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2102      	movs	r1, #2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff f9fc 	bl	8001290 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2103      	movs	r1, #3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff f9e0 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10a      	bne.n	8001ec4 <HAL_ADC_ConfigChannel+0x398>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2103      	movs	r1, #3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff f9d5 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	0e9b      	lsrs	r3, r3, #26
 8001ebe:	f003 021f 	and.w	r2, r3, #31
 8001ec2:	e017      	b.n	8001ef4 <HAL_ADC_ConfigChannel+0x3c8>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2103      	movs	r1, #3
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff f9ca 	bl	8001264 <LL_ADC_GetOffsetChannel>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ede:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8001ee0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 8001ee6:	2320      	movs	r3, #32
 8001ee8:	e003      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8001eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001eec:	fab3 f383 	clz	r3, r3
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_ADC_ConfigChannel+0x3e0>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	0e9b      	lsrs	r3, r3, #26
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	e011      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x404>
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f14:	fa93 f3a3 	rbit	r3, r3
 8001f18:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8001f1a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f1c:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8001f1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d101      	bne.n	8001f28 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8001f24:	2320      	movs	r3, #32
 8001f26:	e003      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8001f28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2103      	movs	r1, #3
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff f9a7 	bl	8001290 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4618      	mov	r0, r3
 8001f48:	f7ff faac 	bl	80014a4 <LL_ADC_IsEnabled>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	f040 8140 	bne.w	80021d4 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	6819      	ldr	r1, [r3, #0]
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	461a      	mov	r2, r3
 8001f62:	f7ff fa2d 	bl	80013c0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	4a8f      	ldr	r2, [pc, #572]	; (80021a8 <HAL_ADC_ConfigChannel+0x67c>)
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	f040 8131 	bne.w	80021d4 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10b      	bne.n	8001f9a <HAL_ADC_ConfigChannel+0x46e>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	0e9b      	lsrs	r3, r3, #26
 8001f88:	3301      	adds	r3, #1
 8001f8a:	f003 031f 	and.w	r3, r3, #31
 8001f8e:	2b09      	cmp	r3, #9
 8001f90:	bf94      	ite	ls
 8001f92:	2301      	movls	r3, #1
 8001f94:	2300      	movhi	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	e019      	b.n	8001fce <HAL_ADC_ConfigChannel+0x4a2>
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001faa:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8001fac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d101      	bne.n	8001fb6 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 8001fb2:	2320      	movs	r3, #32
 8001fb4:	e003      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8001fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f003 031f 	and.w	r3, r3, #31
 8001fc4:	2b09      	cmp	r3, #9
 8001fc6:	bf94      	ite	ls
 8001fc8:	2301      	movls	r3, #1
 8001fca:	2300      	movhi	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d079      	beq.n	80020c6 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d107      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x4c2>
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	0e9b      	lsrs	r3, r3, #26
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	069b      	lsls	r3, r3, #26
 8001fe8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001fec:	e015      	b.n	800201a <HAL_ADC_ConfigChannel+0x4ee>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ff6:	fa93 f3a3 	rbit	r3, r3
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8001ffc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ffe:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002000:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 8002006:	2320      	movs	r3, #32
 8002008:	e003      	b.n	8002012 <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 800200a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200c:	fab3 f383 	clz	r3, r3
 8002010:	b2db      	uxtb	r3, r3
 8002012:	3301      	adds	r3, #1
 8002014:	069b      	lsls	r3, r3, #26
 8002016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002022:	2b00      	cmp	r3, #0
 8002024:	d109      	bne.n	800203a <HAL_ADC_ConfigChannel+0x50e>
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	0e9b      	lsrs	r3, r3, #26
 800202c:	3301      	adds	r3, #1
 800202e:	f003 031f 	and.w	r3, r3, #31
 8002032:	2101      	movs	r1, #1
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	e017      	b.n	800206a <HAL_ADC_ConfigChannel+0x53e>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002042:	fa93 f3a3 	rbit	r3, r3
 8002046:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800204a:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800204c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 8002052:	2320      	movs	r3, #32
 8002054:	e003      	b.n	800205e <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002056:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002058:	fab3 f383 	clz	r3, r3
 800205c:	b2db      	uxtb	r3, r3
 800205e:	3301      	adds	r3, #1
 8002060:	f003 031f 	and.w	r3, r3, #31
 8002064:	2101      	movs	r1, #1
 8002066:	fa01 f303 	lsl.w	r3, r1, r3
 800206a:	ea42 0103 	orr.w	r1, r2, r3
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002076:	2b00      	cmp	r3, #0
 8002078:	d10a      	bne.n	8002090 <HAL_ADC_ConfigChannel+0x564>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	0e9b      	lsrs	r3, r3, #26
 8002080:	3301      	adds	r3, #1
 8002082:	f003 021f 	and.w	r2, r3, #31
 8002086:	4613      	mov	r3, r2
 8002088:	005b      	lsls	r3, r3, #1
 800208a:	4413      	add	r3, r2
 800208c:	051b      	lsls	r3, r3, #20
 800208e:	e018      	b.n	80020c2 <HAL_ADC_ConfigChannel+0x596>
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80020a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 80020ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	3301      	adds	r3, #1
 80020b6:	f003 021f 	and.w	r2, r3, #31
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020c2:	430b      	orrs	r3, r1
 80020c4:	e081      	b.n	80021ca <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d107      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x5b6>
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	0e9b      	lsrs	r3, r3, #26
 80020d8:	3301      	adds	r3, #1
 80020da:	069b      	lsls	r3, r3, #26
 80020dc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e0:	e015      	b.n	800210e <HAL_ADC_ConfigChannel+0x5e2>
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020ea:	fa93 f3a3 	rbit	r3, r3
 80020ee:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80020f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80020fa:	2320      	movs	r3, #32
 80020fc:	e003      	b.n	8002106 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80020fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002100:	fab3 f383 	clz	r3, r3
 8002104:	b2db      	uxtb	r3, r3
 8002106:	3301      	adds	r3, #1
 8002108:	069b      	lsls	r3, r3, #26
 800210a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002116:	2b00      	cmp	r3, #0
 8002118:	d109      	bne.n	800212e <HAL_ADC_ConfigChannel+0x602>
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	0e9b      	lsrs	r3, r3, #26
 8002120:	3301      	adds	r3, #1
 8002122:	f003 031f 	and.w	r3, r3, #31
 8002126:	2101      	movs	r1, #1
 8002128:	fa01 f303 	lsl.w	r3, r1, r3
 800212c:	e017      	b.n	800215e <HAL_ADC_ConfigChannel+0x632>
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	fa93 f3a3 	rbit	r3, r3
 800213a:	61bb      	str	r3, [r7, #24]
  return result;
 800213c:	69bb      	ldr	r3, [r7, #24]
 800213e:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8002140:	6a3b      	ldr	r3, [r7, #32]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d101      	bne.n	800214a <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002146:	2320      	movs	r3, #32
 8002148:	e003      	b.n	8002152 <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 800214a:	6a3b      	ldr	r3, [r7, #32]
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	b2db      	uxtb	r3, r3
 8002152:	3301      	adds	r3, #1
 8002154:	f003 031f 	and.w	r3, r3, #31
 8002158:	2101      	movs	r1, #1
 800215a:	fa01 f303 	lsl.w	r3, r1, r3
 800215e:	ea42 0103 	orr.w	r1, r2, r3
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10d      	bne.n	800218a <HAL_ADC_ConfigChannel+0x65e>
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	0e9b      	lsrs	r3, r3, #26
 8002174:	3301      	adds	r3, #1
 8002176:	f003 021f 	and.w	r2, r3, #31
 800217a:	4613      	mov	r3, r2
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	4413      	add	r3, r2
 8002180:	3b1e      	subs	r3, #30
 8002182:	051b      	lsls	r3, r3, #20
 8002184:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002188:	e01e      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x69c>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	60fb      	str	r3, [r7, #12]
  return result;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800219c:	697b      	ldr	r3, [r7, #20]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d104      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e006      	b.n	80021b4 <HAL_ADC_ConfigChannel+0x688>
 80021a6:	bf00      	nop
 80021a8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	3301      	adds	r3, #1
 80021b6:	f003 021f 	and.w	r2, r3, #31
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	3b1e      	subs	r3, #30
 80021c2:	051b      	lsls	r3, r3, #20
 80021c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021c8:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021ce:	4619      	mov	r1, r3
 80021d0:	f7ff f8cb 	bl	800136a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	4b3d      	ldr	r3, [pc, #244]	; (80022d0 <HAL_ADC_ConfigChannel+0x7a4>)
 80021da:	4013      	ands	r3, r2
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d06c      	beq.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80021e0:	483c      	ldr	r0, [pc, #240]	; (80022d4 <HAL_ADC_ConfigChannel+0x7a8>)
 80021e2:	f7ff f80d 	bl	8001200 <LL_ADC_GetCommonPathInternalCh>
 80021e6:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a3a      	ldr	r2, [pc, #232]	; (80022d8 <HAL_ADC_ConfigChannel+0x7ac>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d127      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80021f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80021f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d121      	bne.n	8002244 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a35      	ldr	r2, [pc, #212]	; (80022dc <HAL_ADC_ConfigChannel+0x7b0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d157      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800220a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800220e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002212:	4619      	mov	r1, r3
 8002214:	482f      	ldr	r0, [pc, #188]	; (80022d4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002216:	f7fe ffe0 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_ADC_ConfigChannel+0x7b4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	099b      	lsrs	r3, r3, #6
 8002220:	4a30      	ldr	r2, [pc, #192]	; (80022e4 <HAL_ADC_ConfigChannel+0x7b8>)
 8002222:	fba2 2303 	umull	r2, r3, r2, r3
 8002226:	099b      	lsrs	r3, r3, #6
 8002228:	1c5a      	adds	r2, r3, #1
 800222a:	4613      	mov	r3, r2
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002234:	e002      	b.n	800223c <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	3b01      	subs	r3, #1
 800223a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f9      	bne.n	8002236 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002242:	e03a      	b.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a27      	ldr	r2, [pc, #156]	; (80022e8 <HAL_ADC_ConfigChannel+0x7bc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d113      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800224e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002256:	2b00      	cmp	r3, #0
 8002258:	d10d      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a1f      	ldr	r2, [pc, #124]	; (80022dc <HAL_ADC_ConfigChannel+0x7b0>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d12a      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002264:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002268:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800226c:	4619      	mov	r1, r3
 800226e:	4819      	ldr	r0, [pc, #100]	; (80022d4 <HAL_ADC_ConfigChannel+0x7a8>)
 8002270:	f7fe ffb3 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002274:	e021      	b.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4a1c      	ldr	r2, [pc, #112]	; (80022ec <HAL_ADC_ConfigChannel+0x7c0>)
 800227c:	4293      	cmp	r3, r2
 800227e:	d11c      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002280:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d116      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_ADC_ConfigChannel+0x7b0>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d111      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002296:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800229a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800229e:	4619      	mov	r1, r3
 80022a0:	480c      	ldr	r0, [pc, #48]	; (80022d4 <HAL_ADC_ConfigChannel+0x7a8>)
 80022a2:	f7fe ff9a 	bl	80011da <LL_ADC_SetCommonPathInternalCh>
 80022a6:	e008      	b.n	80022ba <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022ac:	f043 0220 	orr.w	r2, r3, #32
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80022c2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	37d8      	adds	r7, #216	; 0xd8
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	80080000 	.word	0x80080000
 80022d4:	50040300 	.word	0x50040300
 80022d8:	c7520000 	.word	0xc7520000
 80022dc:	50040000 	.word	0x50040000
 80022e0:	20000004 	.word	0x20000004
 80022e4:	053e2d63 	.word	0x053e2d63
 80022e8:	cb840000 	.word	0xcb840000
 80022ec:	80000001 	.word	0x80000001

080022f0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b083      	sub	sp, #12
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80022f8:	bf00      	nop
 80022fa:	370c      	adds	r7, #12
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr

08002304 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002334:	bf00      	nop
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e0ed      	b.n	8002542 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3020 	ldrb.w	r3, [r3, #32]
 800236c:	b2db      	uxtb	r3, r3
 800236e:	2b00      	cmp	r3, #0
 8002370:	d102      	bne.n	8002378 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7fe fa20 	bl	80007b8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	681a      	ldr	r2, [r3, #0]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f042 0201 	orr.w	r2, r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7fe ff08 	bl	800119c <HAL_GetTick>
 800238c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800238e:	e012      	b.n	80023b6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002390:	f7fe ff04 	bl	800119c <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	2b0a      	cmp	r3, #10
 800239c:	d90b      	bls.n	80023b6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2205      	movs	r2, #5
 80023ae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0c5      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0e5      	beq.n	8002390 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 0202 	bic.w	r2, r2, #2
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7fe fee2 	bl	800119c <HAL_GetTick>
 80023d8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80023da:	e012      	b.n	8002402 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80023dc:	f7fe fede 	bl	800119c <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	2b0a      	cmp	r3, #10
 80023e8:	d90b      	bls.n	8002402 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	2205      	movs	r2, #5
 80023fa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	e09f      	b.n	8002542 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d1e5      	bne.n	80023dc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	7e1b      	ldrb	r3, [r3, #24]
 8002414:	2b01      	cmp	r3, #1
 8002416:	d108      	bne.n	800242a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002426:	601a      	str	r2, [r3, #0]
 8002428:	e007      	b.n	800243a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002438:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	7e5b      	ldrb	r3, [r3, #25]
 800243e:	2b01      	cmp	r3, #1
 8002440:	d108      	bne.n	8002454 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002450:	601a      	str	r2, [r3, #0]
 8002452:	e007      	b.n	8002464 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	681a      	ldr	r2, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002462:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	7e9b      	ldrb	r3, [r3, #26]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d108      	bne.n	800247e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	e007      	b.n	800248e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0220 	bic.w	r2, r2, #32
 800248c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	7edb      	ldrb	r3, [r3, #27]
 8002492:	2b01      	cmp	r3, #1
 8002494:	d108      	bne.n	80024a8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0210 	bic.w	r2, r2, #16
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e007      	b.n	80024b8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	681a      	ldr	r2, [r3, #0]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f042 0210 	orr.w	r2, r2, #16
 80024b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	7f1b      	ldrb	r3, [r3, #28]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d108      	bne.n	80024d2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 0208 	orr.w	r2, r2, #8
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e007      	b.n	80024e2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0208 	bic.w	r2, r2, #8
 80024e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	7f5b      	ldrb	r3, [r3, #29]
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d108      	bne.n	80024fc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f042 0204 	orr.w	r2, r2, #4
 80024f8:	601a      	str	r2, [r3, #0]
 80024fa:	e007      	b.n	800250c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0204 	bic.w	r2, r2, #4
 800250a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	431a      	orrs	r2, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	431a      	orrs	r2, r3
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	695b      	ldr	r3, [r3, #20]
 8002520:	ea42 0103 	orr.w	r1, r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	1e5a      	subs	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	430a      	orrs	r2, r1
 8002530:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2200      	movs	r2, #0
 8002536:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2201      	movs	r2, #1
 800253c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
	...

0800254c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800255c:	4b0c      	ldr	r3, [pc, #48]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002568:	4013      	ands	r3, r2
 800256a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002574:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002578:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800257c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800257e:	4a04      	ldr	r2, [pc, #16]	; (8002590 <__NVIC_SetPriorityGrouping+0x44>)
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	60d3      	str	r3, [r2, #12]
}
 8002584:	bf00      	nop
 8002586:	3714      	adds	r7, #20
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	e000ed00 	.word	0xe000ed00

08002594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002594:	b480      	push	{r7}
 8002596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002598:	4b04      	ldr	r3, [pc, #16]	; (80025ac <__NVIC_GetPriorityGrouping+0x18>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	f003 0307 	and.w	r3, r3, #7
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000ed00 	.word	0xe000ed00

080025b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	db0b      	blt.n	80025da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025c2:	79fb      	ldrb	r3, [r7, #7]
 80025c4:	f003 021f 	and.w	r2, r3, #31
 80025c8:	4907      	ldr	r1, [pc, #28]	; (80025e8 <__NVIC_EnableIRQ+0x38>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	095b      	lsrs	r3, r3, #5
 80025d0:	2001      	movs	r0, #1
 80025d2:	fa00 f202 	lsl.w	r2, r0, r2
 80025d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025da:	bf00      	nop
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000e100 	.word	0xe000e100

080025ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	6039      	str	r1, [r7, #0]
 80025f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	db0a      	blt.n	8002616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	490c      	ldr	r1, [pc, #48]	; (8002638 <__NVIC_SetPriority+0x4c>)
 8002606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	440b      	add	r3, r1
 8002610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002614:	e00a      	b.n	800262c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	b2da      	uxtb	r2, r3
 800261a:	4908      	ldr	r1, [pc, #32]	; (800263c <__NVIC_SetPriority+0x50>)
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	f003 030f 	and.w	r3, r3, #15
 8002622:	3b04      	subs	r3, #4
 8002624:	0112      	lsls	r2, r2, #4
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	440b      	add	r3, r1
 800262a:	761a      	strb	r2, [r3, #24]
}
 800262c:	bf00      	nop
 800262e:	370c      	adds	r7, #12
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	e000e100 	.word	0xe000e100
 800263c:	e000ed00 	.word	0xe000ed00

08002640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	60f8      	str	r0, [r7, #12]
 8002648:	60b9      	str	r1, [r7, #8]
 800264a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	f1c3 0307 	rsb	r3, r3, #7
 800265a:	2b04      	cmp	r3, #4
 800265c:	bf28      	it	cs
 800265e:	2304      	movcs	r3, #4
 8002660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3304      	adds	r3, #4
 8002666:	2b06      	cmp	r3, #6
 8002668:	d902      	bls.n	8002670 <NVIC_EncodePriority+0x30>
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	3b03      	subs	r3, #3
 800266e:	e000      	b.n	8002672 <NVIC_EncodePriority+0x32>
 8002670:	2300      	movs	r3, #0
 8002672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002674:	f04f 32ff 	mov.w	r2, #4294967295
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43da      	mvns	r2, r3
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	401a      	ands	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002688:	f04f 31ff 	mov.w	r1, #4294967295
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	43d9      	mvns	r1, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	4313      	orrs	r3, r2
         );
}
 800269a:	4618      	mov	r0, r3
 800269c:	3724      	adds	r7, #36	; 0x24
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
	...

080026a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026b8:	d301      	bcc.n	80026be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026ba:	2301      	movs	r3, #1
 80026bc:	e00f      	b.n	80026de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026be:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <SysTick_Config+0x40>)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026c6:	210f      	movs	r1, #15
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295
 80026cc:	f7ff ff8e 	bl	80025ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026d0:	4b05      	ldr	r3, [pc, #20]	; (80026e8 <SysTick_Config+0x40>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026d6:	4b04      	ldr	r3, [pc, #16]	; (80026e8 <SysTick_Config+0x40>)
 80026d8:	2207      	movs	r2, #7
 80026da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3708      	adds	r7, #8
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	e000e010 	.word	0xe000e010

080026ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f7ff ff29 	bl	800254c <__NVIC_SetPriorityGrouping>
}
 80026fa:	bf00      	nop
 80026fc:	3708      	adds	r7, #8
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b086      	sub	sp, #24
 8002706:	af00      	add	r7, sp, #0
 8002708:	4603      	mov	r3, r0
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	607a      	str	r2, [r7, #4]
 800270e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002710:	2300      	movs	r3, #0
 8002712:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002714:	f7ff ff3e 	bl	8002594 <__NVIC_GetPriorityGrouping>
 8002718:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	68b9      	ldr	r1, [r7, #8]
 800271e:	6978      	ldr	r0, [r7, #20]
 8002720:	f7ff ff8e 	bl	8002640 <NVIC_EncodePriority>
 8002724:	4602      	mov	r2, r0
 8002726:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800272a:	4611      	mov	r1, r2
 800272c:	4618      	mov	r0, r3
 800272e:	f7ff ff5d 	bl	80025ec <__NVIC_SetPriority>
}
 8002732:	bf00      	nop
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b082      	sub	sp, #8
 800273e:	af00      	add	r7, sp, #0
 8002740:	4603      	mov	r3, r0
 8002742:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002744:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002748:	4618      	mov	r0, r3
 800274a:	f7ff ff31 	bl	80025b0 <__NVIC_EnableIRQ>
}
 800274e:	bf00      	nop
 8002750:	3708      	adds	r7, #8
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b082      	sub	sp, #8
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f7ff ffa2 	bl	80026a8 <SysTick_Config>
 8002764:	4603      	mov	r3, r0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3708      	adds	r7, #8
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002770:	b480      	push	{r7}
 8002772:	b085      	sub	sp, #20
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e098      	b.n	80028b4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b4d      	ldr	r3, [pc, #308]	; (80028c0 <HAL_DMA_Init+0x150>)
 800278a:	429a      	cmp	r2, r3
 800278c:	d80f      	bhi.n	80027ae <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	461a      	mov	r2, r3
 8002794:	4b4b      	ldr	r3, [pc, #300]	; (80028c4 <HAL_DMA_Init+0x154>)
 8002796:	4413      	add	r3, r2
 8002798:	4a4b      	ldr	r2, [pc, #300]	; (80028c8 <HAL_DMA_Init+0x158>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	009a      	lsls	r2, r3, #2
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a48      	ldr	r2, [pc, #288]	; (80028cc <HAL_DMA_Init+0x15c>)
 80027aa:	641a      	str	r2, [r3, #64]	; 0x40
 80027ac:	e00e      	b.n	80027cc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	461a      	mov	r2, r3
 80027b4:	4b46      	ldr	r3, [pc, #280]	; (80028d0 <HAL_DMA_Init+0x160>)
 80027b6:	4413      	add	r3, r2
 80027b8:	4a43      	ldr	r2, [pc, #268]	; (80028c8 <HAL_DMA_Init+0x158>)
 80027ba:	fba2 2303 	umull	r2, r3, r2, r3
 80027be:	091b      	lsrs	r3, r3, #4
 80027c0:	009a      	lsls	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a42      	ldr	r2, [pc, #264]	; (80028d4 <HAL_DMA_Init+0x164>)
 80027ca:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2202      	movs	r2, #2
 80027d0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80027e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027e6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80027f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	691b      	ldr	r3, [r3, #16]
 80027f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a1b      	ldr	r3, [r3, #32]
 800280e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	4313      	orrs	r3, r2
 8002814:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002826:	d039      	beq.n	800289c <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800282c:	4a27      	ldr	r2, [pc, #156]	; (80028cc <HAL_DMA_Init+0x15c>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d11a      	bne.n	8002868 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002832:	4b29      	ldr	r3, [pc, #164]	; (80028d8 <HAL_DMA_Init+0x168>)
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283a:	f003 031c 	and.w	r3, r3, #28
 800283e:	210f      	movs	r1, #15
 8002840:	fa01 f303 	lsl.w	r3, r1, r3
 8002844:	43db      	mvns	r3, r3
 8002846:	4924      	ldr	r1, [pc, #144]	; (80028d8 <HAL_DMA_Init+0x168>)
 8002848:	4013      	ands	r3, r2
 800284a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800284c:	4b22      	ldr	r3, [pc, #136]	; (80028d8 <HAL_DMA_Init+0x168>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6859      	ldr	r1, [r3, #4]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002858:	f003 031c 	and.w	r3, r3, #28
 800285c:	fa01 f303 	lsl.w	r3, r1, r3
 8002860:	491d      	ldr	r1, [pc, #116]	; (80028d8 <HAL_DMA_Init+0x168>)
 8002862:	4313      	orrs	r3, r2
 8002864:	600b      	str	r3, [r1, #0]
 8002866:	e019      	b.n	800289c <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002868:	4b1c      	ldr	r3, [pc, #112]	; (80028dc <HAL_DMA_Init+0x16c>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002870:	f003 031c 	and.w	r3, r3, #28
 8002874:	210f      	movs	r1, #15
 8002876:	fa01 f303 	lsl.w	r3, r1, r3
 800287a:	43db      	mvns	r3, r3
 800287c:	4917      	ldr	r1, [pc, #92]	; (80028dc <HAL_DMA_Init+0x16c>)
 800287e:	4013      	ands	r3, r2
 8002880:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002882:	4b16      	ldr	r3, [pc, #88]	; (80028dc <HAL_DMA_Init+0x16c>)
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6859      	ldr	r1, [r3, #4]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288e:	f003 031c 	and.w	r3, r3, #28
 8002892:	fa01 f303 	lsl.w	r3, r1, r3
 8002896:	4911      	ldr	r1, [pc, #68]	; (80028dc <HAL_DMA_Init+0x16c>)
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2200      	movs	r2, #0
 80028a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40020407 	.word	0x40020407
 80028c4:	bffdfff8 	.word	0xbffdfff8
 80028c8:	cccccccd 	.word	0xcccccccd
 80028cc:	40020000 	.word	0x40020000
 80028d0:	bffdfbf8 	.word	0xbffdfbf8
 80028d4:	40020400 	.word	0x40020400
 80028d8:	400200a8 	.word	0x400200a8
 80028dc:	400204a8 	.word	0x400204a8

080028e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028e8:	2300      	movs	r3, #0
 80028ea:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d005      	beq.n	8002904 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2204      	movs	r2, #4
 80028fc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
 8002902:	e029      	b.n	8002958 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 020e 	bic.w	r2, r2, #14
 8002912:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	681a      	ldr	r2, [r3, #0]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002928:	f003 021c 	and.w	r2, r3, #28
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d003      	beq.n	8002958 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	4798      	blx	r3
    }
  }
  return status;
 8002958:	7bfb      	ldrb	r3, [r7, #15]
}
 800295a:	4618      	mov	r0, r3
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297e:	f003 031c 	and.w	r3, r3, #28
 8002982:	2204      	movs	r2, #4
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d026      	beq.n	80029dc <HAL_DMA_IRQHandler+0x7a>
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d021      	beq.n	80029dc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 0320 	and.w	r3, r3, #32
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d107      	bne.n	80029b6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0204 	bic.w	r2, r2, #4
 80029b4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ba:	f003 021c 	and.w	r2, r3, #28
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	2104      	movs	r1, #4
 80029c4:	fa01 f202 	lsl.w	r2, r1, r2
 80029c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d071      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80029da:	e06c      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f003 031c 	and.w	r3, r3, #28
 80029e4:	2202      	movs	r2, #2
 80029e6:	409a      	lsls	r2, r3
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02e      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xec>
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d029      	beq.n	8002a4e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d10b      	bne.n	8002a20 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 020a 	bic.w	r2, r2, #10
 8002a16:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a24:	f003 021c 	and.w	r2, r3, #28
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2c:	2102      	movs	r1, #2
 8002a2e:	fa01 f202 	lsl.w	r2, r1, r2
 8002a32:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2200      	movs	r2, #0
 8002a38:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d038      	beq.n	8002ab6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002a4c:	e033      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f003 031c 	and.w	r3, r3, #28
 8002a56:	2208      	movs	r2, #8
 8002a58:	409a      	lsls	r2, r3
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d02a      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x156>
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	f003 0308 	and.w	r3, r3, #8
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d025      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	681a      	ldr	r2, [r3, #0]
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f022 020e 	bic.w	r2, r2, #14
 8002a7a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a80:	f003 021c 	and.w	r2, r3, #28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a88:	2101      	movs	r1, #1
 8002a8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002a8e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2201      	movs	r2, #1
 8002a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002ab6:	bf00      	nop
 8002ab8:	bf00      	nop
}
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b083      	sub	sp, #12
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ace:	b2db      	uxtb	r3, r3
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b087      	sub	sp, #28
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aea:	e148      	b.n	8002d7e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	2101      	movs	r1, #1
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	fa01 f303 	lsl.w	r3, r1, r3
 8002af8:	4013      	ands	r3, r2
 8002afa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f000 813a 	beq.w	8002d78 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 0303 	and.w	r3, r3, #3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d005      	beq.n	8002b1c <HAL_GPIO_Init+0x40>
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d130      	bne.n	8002b7e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	2203      	movs	r2, #3
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	43db      	mvns	r3, r3
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	4013      	ands	r3, r2
 8002b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	68da      	ldr	r2, [r3, #12]
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b40:	693a      	ldr	r2, [r7, #16]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b52:	2201      	movs	r2, #1
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	091b      	lsrs	r3, r3, #4
 8002b68:	f003 0201 	and.w	r2, r3, #1
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b72:	693a      	ldr	r2, [r7, #16]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	f003 0303 	and.w	r3, r3, #3
 8002b86:	2b03      	cmp	r3, #3
 8002b88:	d017      	beq.n	8002bba <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	005b      	lsls	r3, r3, #1
 8002b94:	2203      	movs	r2, #3
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	689a      	ldr	r2, [r3, #8]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	693a      	ldr	r2, [r7, #16]
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f003 0303 	and.w	r3, r3, #3
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d123      	bne.n	8002c0e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002bc6:	697b      	ldr	r3, [r7, #20]
 8002bc8:	08da      	lsrs	r2, r3, #3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	3208      	adds	r2, #8
 8002bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	009b      	lsls	r3, r3, #2
 8002bdc:	220f      	movs	r2, #15
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	43db      	mvns	r3, r3
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	4013      	ands	r3, r2
 8002be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	691a      	ldr	r2, [r3, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c00:	697b      	ldr	r3, [r7, #20]
 8002c02:	08da      	lsrs	r2, r3, #3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3208      	adds	r2, #8
 8002c08:	6939      	ldr	r1, [r7, #16]
 8002c0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4013      	ands	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	005b      	lsls	r3, r3, #1
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	f000 8094 	beq.w	8002d78 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c50:	4b52      	ldr	r3, [pc, #328]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c56:	f043 0301 	orr.w	r3, r3, #1
 8002c5a:	6613      	str	r3, [r2, #96]	; 0x60
 8002c5c:	4b4f      	ldr	r3, [pc, #316]	; (8002d9c <HAL_GPIO_Init+0x2c0>)
 8002c5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	60bb      	str	r3, [r7, #8]
 8002c66:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c68:	4a4d      	ldr	r2, [pc, #308]	; (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c74:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f003 0303 	and.w	r3, r3, #3
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	220f      	movs	r2, #15
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c92:	d00d      	beq.n	8002cb0 <HAL_GPIO_Init+0x1d4>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a43      	ldr	r2, [pc, #268]	; (8002da4 <HAL_GPIO_Init+0x2c8>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d007      	beq.n	8002cac <HAL_GPIO_Init+0x1d0>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a42      	ldr	r2, [pc, #264]	; (8002da8 <HAL_GPIO_Init+0x2cc>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d101      	bne.n	8002ca8 <HAL_GPIO_Init+0x1cc>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e004      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002ca8:	2307      	movs	r3, #7
 8002caa:	e002      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002cac:	2301      	movs	r3, #1
 8002cae:	e000      	b.n	8002cb2 <HAL_GPIO_Init+0x1d6>
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	f002 0203 	and.w	r2, r2, #3
 8002cb8:	0092      	lsls	r2, r2, #2
 8002cba:	4093      	lsls	r3, r2
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002cc2:	4937      	ldr	r1, [pc, #220]	; (8002da0 <HAL_GPIO_Init+0x2c4>)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	089b      	lsrs	r3, r3, #2
 8002cc8:	3302      	adds	r3, #2
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cd0:	4b36      	ldr	r3, [pc, #216]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d003      	beq.n	8002cf4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002cf4:	4a2d      	ldr	r2, [pc, #180]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cfa:	4b2c      	ldr	r3, [pc, #176]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	43db      	mvns	r3, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4013      	ands	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d1e:	4a23      	ldr	r2, [pc, #140]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002d24:	4b21      	ldr	r3, [pc, #132]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4013      	ands	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d48:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	43db      	mvns	r3, r3
 8002d58:	693a      	ldr	r2, [r7, #16]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002d6a:	693a      	ldr	r2, [r7, #16]
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d72:	4a0e      	ldr	r2, [pc, #56]	; (8002dac <HAL_GPIO_Init+0x2d0>)
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	fa22 f303 	lsr.w	r3, r2, r3
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	f47f aeaf 	bne.w	8002aec <HAL_GPIO_Init+0x10>
  }
}
 8002d8e:	bf00      	nop
 8002d90:	bf00      	nop
 8002d92:	371c      	adds	r7, #28
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	40010000 	.word	0x40010000
 8002da4:	48000400 	.word	0x48000400
 8002da8:	48000800 	.word	0x48000800
 8002dac:	40010400 	.word	0x40010400

08002db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	460b      	mov	r3, r1
 8002dba:	807b      	strh	r3, [r7, #2]
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dcc:	e002      	b.n	8002dd4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd4:	bf00      	nop
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e08d      	b.n	8002f0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fde0 	bl	80009cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2224      	movs	r2, #36	; 0x24
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0201 	bic.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685a      	ldr	r2, [r3, #4]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d107      	bne.n	8002e5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	e006      	b.n	8002e68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689a      	ldr	r2, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002e66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	2b02      	cmp	r3, #2
 8002e6e:	d108      	bne.n	8002e82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e7e:	605a      	str	r2, [r3, #4]
 8002e80:	e007      	b.n	8002e92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002ea0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ea4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	68da      	ldr	r2, [r3, #12]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002eb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	695b      	ldr	r3, [r3, #20]
 8002ebe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	699b      	ldr	r3, [r3, #24]
 8002ec6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	69d9      	ldr	r1, [r3, #28]
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a1a      	ldr	r2, [r3, #32]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	430a      	orrs	r2, r1
 8002ede:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f042 0201 	orr.w	r2, r2, #1
 8002eee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2220      	movs	r2, #32
 8002efa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3708      	adds	r7, #8
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}

08002f16 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8002f16:	b580      	push	{r7, lr}
 8002f18:	b084      	sub	sp, #16
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d005      	beq.n	8002f42 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	68ba      	ldr	r2, [r7, #8]
 8002f3c:	68f9      	ldr	r1, [r7, #12]
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	4798      	blx	r3
  }
}
 8002f42:	bf00      	nop
 8002f44:	3710      	adds	r7, #16
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}

08002f4a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002f4a:	b580      	push	{r7, lr}
 8002f4c:	b086      	sub	sp, #24
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	699b      	ldr	r3, [r3, #24]
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00f      	beq.n	8002f8c <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f8a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00f      	beq.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d00a      	beq.n	8002fb6 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa4:	f043 0208 	orr.w	r2, r3, #8
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fb4:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fb6:	697b      	ldr	r3, [r7, #20]
 8002fb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00f      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d00a      	beq.n	8002fe0 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fce:	f043 0202 	orr.w	r2, r3, #2
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fde:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe4:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	f003 030b 	and.w	r3, r3, #11
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8002ff0:	68f9      	ldr	r1, [r7, #12]
 8002ff2:	6878      	ldr	r0, [r7, #4]
 8002ff4:	f000 fb82 	bl	80036fc <I2C_ITError>
  }
}
 8002ff8:	bf00      	nop
 8002ffa:	3718      	adds	r7, #24
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bd80      	pop	{r7, pc}

08003000 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr

08003014 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	460b      	mov	r3, r1
 8003032:	70fb      	strb	r3, [r7, #3]
 8003034:	4613      	mov	r3, r2
 8003036:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003058:	b480      	push	{r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800306c:	b480      	push	{r7}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003074:	bf00      	nop
 8003076:	370c      	adds	r7, #12
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr

08003080 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b086      	sub	sp, #24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003090:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800309c:	2b01      	cmp	r3, #1
 800309e:	d101      	bne.n	80030a4 <I2C_Slave_ISR_IT+0x24>
 80030a0:	2302      	movs	r3, #2
 80030a2:	e0e1      	b.n	8003268 <I2C_Slave_ISR_IT+0x1e8>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d008      	beq.n	80030c8 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80030c0:	6939      	ldr	r1, [r7, #16]
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 f9b4 	bl	8003430 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	f003 0310 	and.w	r3, r3, #16
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d04b      	beq.n	800316a <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d046      	beq.n	800316a <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d128      	bne.n	8003138 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b28      	cmp	r3, #40	; 0x28
 80030f0:	d108      	bne.n	8003104 <I2C_Slave_ISR_IT+0x84>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80030f8:	d104      	bne.n	8003104 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80030fa:	6939      	ldr	r1, [r7, #16]
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 faa9 	bl	8003654 <I2C_ITListenCplt>
 8003102:	e031      	b.n	8003168 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800310a:	b2db      	uxtb	r3, r3
 800310c:	2b29      	cmp	r3, #41	; 0x29
 800310e:	d10e      	bne.n	800312e <I2C_Slave_ISR_IT+0xae>
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003116:	d00a      	beq.n	800312e <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2210      	movs	r2, #16
 800311e:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fc02 	bl	800392a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f926 	bl	8003378 <I2C_ITSlaveSeqCplt>
 800312c:	e01c      	b.n	8003168 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2210      	movs	r2, #16
 8003134:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003136:	e08f      	b.n	8003258 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2210      	movs	r2, #16
 800313e:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	f043 0204 	orr.w	r2, r3, #4
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <I2C_Slave_ISR_IT+0xda>
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003158:	d17e      	bne.n	8003258 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800315e:	4619      	mov	r1, r3
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 facb 	bl	80036fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003166:	e077      	b.n	8003258 <I2C_Slave_ISR_IT+0x1d8>
 8003168:	e076      	b.n	8003258 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f003 0304 	and.w	r3, r3, #4
 8003170:	2b00      	cmp	r3, #0
 8003172:	d02f      	beq.n	80031d4 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800317a:	2b00      	cmp	r3, #0
 800317c:	d02a      	beq.n	80031d4 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003182:	b29b      	uxth	r3, r3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d018      	beq.n	80031ba <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003192:	b2d2      	uxtb	r2, r2
 8003194:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031a4:	3b01      	subs	r3, #1
 80031a6:	b29a      	uxth	r2, r3
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b29a      	uxth	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d14b      	bne.n	800325c <I2C_Slave_ISR_IT+0x1dc>
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ca:	d047      	beq.n	800325c <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f000 f8d3 	bl	8003378 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80031d2:	e043      	b.n	800325c <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	f003 0308 	and.w	r3, r3, #8
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d004      	beq.n	80031f2 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f840 	bl	8003270 <I2C_ITAddrCplt>
 80031f0:	e035      	b.n	800325e <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	f003 0302 	and.w	r3, r3, #2
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d030      	beq.n	800325e <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003202:	2b00      	cmp	r3, #0
 8003204:	d02b      	beq.n	800325e <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320a:	b29b      	uxth	r3, r3
 800320c:	2b00      	cmp	r3, #0
 800320e:	d018      	beq.n	8003242 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003214:	781a      	ldrb	r2, [r3, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	1c5a      	adds	r2, r3, #1
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800322a:	b29b      	uxth	r3, r3
 800322c:	3b01      	subs	r3, #1
 800322e:	b29a      	uxth	r2, r3
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003238:	3b01      	subs	r3, #1
 800323a:	b29a      	uxth	r2, r3
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	851a      	strh	r2, [r3, #40]	; 0x28
 8003240:	e00d      	b.n	800325e <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003248:	d002      	beq.n	8003250 <I2C_Slave_ISR_IT+0x1d0>
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d106      	bne.n	800325e <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 f891 	bl	8003378 <I2C_ITSlaveSeqCplt>
 8003256:	e002      	b.n	800325e <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003258:	bf00      	nop
 800325a:	e000      	b.n	800325e <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800325c:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003266:	2300      	movs	r3, #0
}
 8003268:	4618      	mov	r0, r3
 800326a:	3718      	adds	r7, #24
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}

08003270 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003280:	b2db      	uxtb	r3, r3
 8003282:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003286:	2b28      	cmp	r3, #40	; 0x28
 8003288:	d16a      	bne.n	8003360 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	0c1b      	lsrs	r3, r3, #16
 8003292:	b2db      	uxtb	r3, r3
 8003294:	f003 0301 	and.w	r3, r3, #1
 8003298:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	0c1b      	lsrs	r3, r3, #16
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032a8:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80032b6:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68db      	ldr	r3, [r3, #12]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80032c4:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d138      	bne.n	8003340 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80032ce:	897b      	ldrh	r3, [r7, #10]
 80032d0:	09db      	lsrs	r3, r3, #7
 80032d2:	b29a      	uxth	r2, r3
 80032d4:	89bb      	ldrh	r3, [r7, #12]
 80032d6:	4053      	eors	r3, r2
 80032d8:	b29b      	uxth	r3, r3
 80032da:	f003 0306 	and.w	r3, r3, #6
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d11c      	bne.n	800331c <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80032e2:	897b      	ldrh	r3, [r7, #10]
 80032e4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d13b      	bne.n	8003370 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	2208      	movs	r2, #8
 8003304:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800330e:	89ba      	ldrh	r2, [r7, #12]
 8003310:	7bfb      	ldrb	r3, [r7, #15]
 8003312:	4619      	mov	r1, r3
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f7ff fe87 	bl	8003028 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800331a:	e029      	b.n	8003370 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800331c:	893b      	ldrh	r3, [r7, #8]
 800331e:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003320:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003324:	6878      	ldr	r0, [r7, #4]
 8003326:	f000 fb42 	bl	80039ae <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2200      	movs	r2, #0
 800332e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003332:	89ba      	ldrh	r2, [r7, #12]
 8003334:	7bfb      	ldrb	r3, [r7, #15]
 8003336:	4619      	mov	r1, r3
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f7ff fe75 	bl	8003028 <HAL_I2C_AddrCallback>
}
 800333e:	e017      	b.n	8003370 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003340:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f000 fb32 	bl	80039ae <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003352:	89ba      	ldrh	r2, [r7, #12]
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	4619      	mov	r1, r3
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff fe65 	bl	8003028 <HAL_I2C_AddrCallback>
}
 800335e:	e007      	b.n	8003370 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2208      	movs	r2, #8
 8003366:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2200      	movs	r2, #0
 800336c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003370:	bf00      	nop
 8003372:	3710      	adds	r7, #16
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}

08003378 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b084      	sub	sp, #16
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2200      	movs	r2, #0
 800338c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d008      	beq.n	80033ac <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e00c      	b.n	80033c6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d007      	beq.n	80033c6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033c4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b29      	cmp	r3, #41	; 0x29
 80033d0:	d112      	bne.n	80033f8 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2228      	movs	r2, #40	; 0x28
 80033d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2221      	movs	r2, #33	; 0x21
 80033de:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80033e0:	2101      	movs	r1, #1
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f000 fae3 	bl	80039ae <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f7ff fe05 	bl	8003000 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80033f6:	e017      	b.n	8003428 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b2a      	cmp	r3, #42	; 0x2a
 8003402:	d111      	bne.n	8003428 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2228      	movs	r2, #40	; 0x28
 8003408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2222      	movs	r2, #34	; 0x22
 8003410:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003412:	2102      	movs	r1, #2
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 faca 	bl	80039ae <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7ff fdf6 	bl	8003014 <HAL_I2C_SlaveRxCpltCallback>
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	2220      	movs	r2, #32
 8003454:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b21      	cmp	r3, #33	; 0x21
 800345a:	d002      	beq.n	8003462 <I2C_ITSlaveCplt+0x32>
 800345c:	7bfb      	ldrb	r3, [r7, #15]
 800345e:	2b29      	cmp	r3, #41	; 0x29
 8003460:	d108      	bne.n	8003474 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003462:	f248 0101 	movw	r1, #32769	; 0x8001
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 faa1 	bl	80039ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2221      	movs	r2, #33	; 0x21
 8003470:	631a      	str	r2, [r3, #48]	; 0x30
 8003472:	e019      	b.n	80034a8 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003474:	7bfb      	ldrb	r3, [r7, #15]
 8003476:	2b22      	cmp	r3, #34	; 0x22
 8003478:	d002      	beq.n	8003480 <I2C_ITSlaveCplt+0x50>
 800347a:	7bfb      	ldrb	r3, [r7, #15]
 800347c:	2b2a      	cmp	r3, #42	; 0x2a
 800347e:	d108      	bne.n	8003492 <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003480:	f248 0102 	movw	r1, #32770	; 0x8002
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	f000 fa92 	bl	80039ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2222      	movs	r2, #34	; 0x22
 800348e:	631a      	str	r2, [r3, #48]	; 0x30
 8003490:	e00a      	b.n	80034a8 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003492:	7bfb      	ldrb	r3, [r7, #15]
 8003494:	2b28      	cmp	r3, #40	; 0x28
 8003496:	d107      	bne.n	80034a8 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003498:	f248 0103 	movw	r1, #32771	; 0x8003
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fa86 	bl	80039ae <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034b6:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b62      	ldr	r3, [pc, #392]	; (800364c <I2C_ITSlaveCplt+0x21c>)
 80034c4:	400b      	ands	r3, r1
 80034c6:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 fa2e 	bl	800392a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d013      	beq.n	8003500 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681a      	ldr	r2, [r3, #0]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80034e6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d01f      	beq.n	8003530 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80034fe:	e017      	b.n	8003530 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d012      	beq.n	8003530 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003518:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351e:	2b00      	cmp	r3, #0
 8003520:	d006      	beq.n	8003530 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	b29a      	uxth	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f003 0304 	and.w	r3, r3, #4
 8003536:	2b00      	cmp	r3, #0
 8003538:	d020      	beq.n	800357c <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	b2d2      	uxtb	r2, r2
 800354e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003554:	1c5a      	adds	r2, r3, #1
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003566:	3b01      	subs	r3, #1
 8003568:	b29a      	uxth	r2, r3
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d005      	beq.n	8003592 <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0204 	orr.w	r2, r3, #4
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d010      	beq.n	80035ca <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	4619      	mov	r1, r3
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f8a4 	bl	80036fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b28      	cmp	r3, #40	; 0x28
 80035be:	d141      	bne.n	8003644 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80035c0:	6979      	ldr	r1, [r7, #20]
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f846 	bl	8003654 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035c8:	e03c      	b.n	8003644 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80035d2:	d014      	beq.n	80035fe <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7ff fecf 	bl	8003378 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a1c      	ldr	r2, [pc, #112]	; (8003650 <I2C_ITSlaveCplt+0x220>)
 80035de:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f7ff fd24 	bl	8003044 <HAL_I2C_ListenCpltCallback>
}
 80035fc:	e022      	b.n	8003644 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003604:	b2db      	uxtb	r3, r3
 8003606:	2b22      	cmp	r3, #34	; 0x22
 8003608:	d10e      	bne.n	8003628 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2220      	movs	r2, #32
 800360e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2200      	movs	r2, #0
 8003616:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff fcf7 	bl	8003014 <HAL_I2C_SlaveRxCpltCallback>
}
 8003626:	e00d      	b.n	8003644 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7ff fcde 	bl	8003000 <HAL_I2C_SlaveTxCpltCallback>
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	fe00e800 	.word	0xfe00e800
 8003650:	ffff0000 	.word	0xffff0000

08003654 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <I2C_ITListenCplt+0xa4>)
 8003662:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2220      	movs	r2, #32
 800366e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f003 0304 	and.w	r3, r3, #4
 8003686:	2b00      	cmp	r3, #0
 8003688:	d022      	beq.n	80036d0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d012      	beq.n	80036d0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	3b01      	subs	r3, #1
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ba:	b29b      	uxth	r3, r3
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c8:	f043 0204 	orr.w	r2, r3, #4
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80036d0:	f248 0103 	movw	r1, #32771	; 0x8003
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f96a 	bl	80039ae <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2210      	movs	r2, #16
 80036e0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f7ff fcaa 	bl	8003044 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80036f0:	bf00      	nop
 80036f2:	3708      	adds	r7, #8
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}
 80036f8:	ffff0000 	.word	0xffff0000

080036fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800370c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	4a6d      	ldr	r2, [pc, #436]	; (80038d0 <I2C_ITError+0x1d4>)
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	431a      	orrs	r2, r3
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800372e:	7bfb      	ldrb	r3, [r7, #15]
 8003730:	2b28      	cmp	r3, #40	; 0x28
 8003732:	d005      	beq.n	8003740 <I2C_ITError+0x44>
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b29      	cmp	r3, #41	; 0x29
 8003738:	d002      	beq.n	8003740 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	2b2a      	cmp	r3, #42	; 0x2a
 800373e:	d10b      	bne.n	8003758 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003740:	2103      	movs	r1, #3
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f000 f933 	bl	80039ae <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2228      	movs	r2, #40	; 0x28
 800374c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a60      	ldr	r2, [pc, #384]	; (80038d4 <I2C_ITError+0x1d8>)
 8003754:	635a      	str	r2, [r3, #52]	; 0x34
 8003756:	e030      	b.n	80037ba <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003758:	f248 0103 	movw	r1, #32771	; 0x8003
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f926 	bl	80039ae <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8e1 	bl	800392a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800376e:	b2db      	uxtb	r3, r3
 8003770:	2b60      	cmp	r3, #96	; 0x60
 8003772:	d01f      	beq.n	80037b4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b20      	cmp	r3, #32
 8003788:	d114      	bne.n	80037b4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	699b      	ldr	r3, [r3, #24]
 8003790:	f003 0310 	and.w	r3, r3, #16
 8003794:	2b10      	cmp	r3, #16
 8003796:	d109      	bne.n	80037ac <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2210      	movs	r2, #16
 800379e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	f043 0204 	orr.w	r2, r3, #4
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	2220      	movs	r2, #32
 80037b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d039      	beq.n	800383c <I2C_ITError+0x140>
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b11      	cmp	r3, #17
 80037cc:	d002      	beq.n	80037d4 <I2C_ITError+0xd8>
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	2b21      	cmp	r3, #33	; 0x21
 80037d2:	d133      	bne.n	800383c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037e2:	d107      	bne.n	80037f4 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037f2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f8:	4618      	mov	r0, r3
 80037fa:	f7ff f961 	bl	8002ac0 <HAL_DMA_GetState>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b01      	cmp	r3, #1
 8003802:	d017      	beq.n	8003834 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <I2C_ITError+0x1dc>)
 800380a:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	4618      	mov	r0, r3
 800381a:	f7ff f861 	bl	80028e0 <HAL_DMA_Abort_IT>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d04d      	beq.n	80038c0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800382e:	4610      	mov	r0, r2
 8003830:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003832:	e045      	b.n	80038c0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f851 	bl	80038dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800383a:	e041      	b.n	80038c0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003840:	2b00      	cmp	r3, #0
 8003842:	d039      	beq.n	80038b8 <I2C_ITError+0x1bc>
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b12      	cmp	r3, #18
 8003848:	d002      	beq.n	8003850 <I2C_ITError+0x154>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	2b22      	cmp	r3, #34	; 0x22
 800384e:	d133      	bne.n	80038b8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800385a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800385e:	d107      	bne.n	8003870 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800386e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff f923 	bl	8002ac0 <HAL_DMA_GetState>
 800387a:	4603      	mov	r3, r0
 800387c:	2b01      	cmp	r3, #1
 800387e:	d017      	beq.n	80038b0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003884:	4a14      	ldr	r2, [pc, #80]	; (80038d8 <I2C_ITError+0x1dc>)
 8003886:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003894:	4618      	mov	r0, r3
 8003896:	f7ff f823 	bl	80028e0 <HAL_DMA_Abort_IT>
 800389a:	4603      	mov	r3, r0
 800389c:	2b00      	cmp	r3, #0
 800389e:	d011      	beq.n	80038c4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80038aa:	4610      	mov	r0, r2
 80038ac:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038ae:	e009      	b.n	80038c4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80038b0:	6878      	ldr	r0, [r7, #4]
 80038b2:	f000 f813 	bl	80038dc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038b6:	e005      	b.n	80038c4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f80f 	bl	80038dc <I2C_TreatErrorCallback>
  }
}
 80038be:	e002      	b.n	80038c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80038c0:	bf00      	nop
 80038c2:	e000      	b.n	80038c6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80038c4:	bf00      	nop
}
 80038c6:	bf00      	nop
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	ffff0000 	.word	0xffff0000
 80038d4:	08003081 	.word	0x08003081
 80038d8:	08003973 	.word	0x08003973

080038dc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b082      	sub	sp, #8
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	2b60      	cmp	r3, #96	; 0x60
 80038ee:	d10e      	bne.n	800390e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2220      	movs	r2, #32
 80038f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f7ff fbb0 	bl	800306c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800390c:	e009      	b.n	8003922 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2200      	movs	r2, #0
 8003912:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff fb9b 	bl	8003058 <HAL_I2C_ErrorCallback>
}
 8003922:	bf00      	nop
 8003924:	3708      	adds	r7, #8
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b02      	cmp	r3, #2
 800393e:	d103      	bne.n	8003948 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2200      	movs	r2, #0
 8003946:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b01      	cmp	r3, #1
 8003954:	d007      	beq.n	8003966 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	699a      	ldr	r2, [r3, #24]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f042 0201 	orr.w	r2, r2, #1
 8003964:	619a      	str	r2, [r3, #24]
  }
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr

08003972 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003972:	b580      	push	{r7, lr}
 8003974:	b084      	sub	sp, #16
 8003976:	af00      	add	r7, sp, #0
 8003978:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003984:	2b00      	cmp	r3, #0
 8003986:	d003      	beq.n	8003990 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398c:	2200      	movs	r2, #0
 800398e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d003      	beq.n	80039a0 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399c:	2200      	movs	r2, #0
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f7ff ff9b 	bl	80038dc <I2C_TreatErrorCallback>
}
 80039a6:	bf00      	nop
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}

080039ae <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80039ae:	b480      	push	{r7}
 80039b0:	b085      	sub	sp, #20
 80039b2:	af00      	add	r7, sp, #0
 80039b4:	6078      	str	r0, [r7, #4]
 80039b6:	460b      	mov	r3, r1
 80039b8:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80039be:	887b      	ldrh	r3, [r7, #2]
 80039c0:	f003 0301 	and.w	r3, r3, #1
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00f      	beq.n	80039e8 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80039ce:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039d6:	b2db      	uxtb	r3, r3
 80039d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039dc:	2b28      	cmp	r3, #40	; 0x28
 80039de:	d003      	beq.n	80039e8 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80039e6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80039e8:	887b      	ldrh	r3, [r7, #2]
 80039ea:	f003 0302 	and.w	r3, r3, #2
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d00f      	beq.n	8003a12 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80039f8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a06:	2b28      	cmp	r3, #40	; 0x28
 8003a08:	d003      	beq.n	8003a12 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003a10:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003a12:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da03      	bge.n	8003a22 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003a20:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003a22:	887b      	ldrh	r3, [r7, #2]
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d103      	bne.n	8003a30 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003a2e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003a30:	887b      	ldrh	r3, [r7, #2]
 8003a32:	2b20      	cmp	r3, #32
 8003a34:	d103      	bne.n	8003a3e <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f043 0320 	orr.w	r3, r3, #32
 8003a3c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003a3e:	887b      	ldrh	r3, [r7, #2]
 8003a40:	2b40      	cmp	r3, #64	; 0x40
 8003a42:	d103      	bne.n	8003a4c <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6819      	ldr	r1, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	43da      	mvns	r2, r3
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	400a      	ands	r2, r1
 8003a5c:	601a      	str	r2, [r3, #0]
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
 8003a72:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	d138      	bne.n	8003af2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e032      	b.n	8003af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	2224      	movs	r2, #36	; 0x24
 8003a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681a      	ldr	r2, [r3, #0]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 0201 	bic.w	r2, r2, #1
 8003aac:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003abc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	6819      	ldr	r1, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f042 0201 	orr.w	r2, r2, #1
 8003adc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2200      	movs	r2, #0
 8003aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	e000      	b.n	8003af4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003af2:	2302      	movs	r3, #2
  }
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	370c      	adds	r7, #12
 8003af8:	46bd      	mov	sp, r7
 8003afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afe:	4770      	bx	lr

08003b00 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b20      	cmp	r3, #32
 8003b14:	d139      	bne.n	8003b8a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d101      	bne.n	8003b24 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003b20:	2302      	movs	r3, #2
 8003b22:	e033      	b.n	8003b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2224      	movs	r2, #36	; 0x24
 8003b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0201 	bic.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003b52:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	021b      	lsls	r3, r3, #8
 8003b58:	68fa      	ldr	r2, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681a      	ldr	r2, [r3, #0]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f042 0201 	orr.w	r2, r2, #1
 8003b74:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b9c:	4b05      	ldr	r3, [pc, #20]	; (8003bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a04      	ldr	r2, [pc, #16]	; (8003bb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ba6:	6013      	str	r3, [r2, #0]
}
 8003ba8:	bf00      	nop
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	40007000 	.word	0x40007000

08003bb8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003bbc:	4b04      	ldr	r3, [pc, #16]	; (8003bd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr
 8003bce:	bf00      	nop
 8003bd0:	40007000 	.word	0x40007000

08003bd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003be2:	d130      	bne.n	8003c46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003be4:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d038      	beq.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bfa:	4a1e      	ldr	r2, [pc, #120]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c02:	4b1d      	ldr	r3, [pc, #116]	; (8003c78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	2232      	movs	r2, #50	; 0x32
 8003c08:	fb02 f303 	mul.w	r3, r2, r3
 8003c0c:	4a1b      	ldr	r2, [pc, #108]	; (8003c7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	0c9b      	lsrs	r3, r3, #18
 8003c14:	3301      	adds	r3, #1
 8003c16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c18:	e002      	b.n	8003c20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c20:	4b14      	ldr	r3, [pc, #80]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c22:	695b      	ldr	r3, [r3, #20]
 8003c24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c2c:	d102      	bne.n	8003c34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1f2      	bne.n	8003c1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c34:	4b0f      	ldr	r3, [pc, #60]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c36:	695b      	ldr	r3, [r3, #20]
 8003c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c40:	d110      	bne.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e00f      	b.n	8003c66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c46:	4b0b      	ldr	r3, [pc, #44]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c52:	d007      	beq.n	8003c64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c54:	4b07      	ldr	r3, [pc, #28]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c5c:	4a05      	ldr	r2, [pc, #20]	; (8003c74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c64:	2300      	movs	r3, #0
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3714      	adds	r7, #20
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c70:	4770      	bx	lr
 8003c72:	bf00      	nop
 8003c74:	40007000 	.word	0x40007000
 8003c78:	20000004 	.word	0x20000004
 8003c7c:	431bde83 	.word	0x431bde83

08003c80 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b088      	sub	sp, #32
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d102      	bne.n	8003c94 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c8e:	2301      	movs	r3, #1
 8003c90:	f000 bc02 	b.w	8004498 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c94:	4b96      	ldr	r3, [pc, #600]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f003 030c 	and.w	r3, r3, #12
 8003c9c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c9e:	4b94      	ldr	r3, [pc, #592]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ca0:	68db      	ldr	r3, [r3, #12]
 8003ca2:	f003 0303 	and.w	r3, r3, #3
 8003ca6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f003 0310 	and.w	r3, r3, #16
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	f000 80e4 	beq.w	8003e7e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d007      	beq.n	8003ccc <HAL_RCC_OscConfig+0x4c>
 8003cbc:	69bb      	ldr	r3, [r7, #24]
 8003cbe:	2b0c      	cmp	r3, #12
 8003cc0:	f040 808b 	bne.w	8003dda <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	f040 8087 	bne.w	8003dda <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003ccc:	4b88      	ldr	r3, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d005      	beq.n	8003ce4 <HAL_RCC_OscConfig+0x64>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e3d9      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a1a      	ldr	r2, [r3, #32]
 8003ce8:	4b81      	ldr	r3, [pc, #516]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 0308 	and.w	r3, r3, #8
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d004      	beq.n	8003cfe <HAL_RCC_OscConfig+0x7e>
 8003cf4:	4b7e      	ldr	r3, [pc, #504]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cfc:	e005      	b.n	8003d0a <HAL_RCC_OscConfig+0x8a>
 8003cfe:	4b7c      	ldr	r3, [pc, #496]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d04:	091b      	lsrs	r3, r3, #4
 8003d06:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d223      	bcs.n	8003d56 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 fd8c 	bl	8004830 <RCC_SetFlashLatencyFromMSIRange>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d001      	beq.n	8003d22 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e3ba      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d22:	4b73      	ldr	r3, [pc, #460]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a72      	ldr	r2, [pc, #456]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d28:	f043 0308 	orr.w	r3, r3, #8
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	496d      	ldr	r1, [pc, #436]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d40:	4b6b      	ldr	r3, [pc, #428]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	69db      	ldr	r3, [r3, #28]
 8003d4c:	021b      	lsls	r3, r3, #8
 8003d4e:	4968      	ldr	r1, [pc, #416]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d50:	4313      	orrs	r3, r2
 8003d52:	604b      	str	r3, [r1, #4]
 8003d54:	e025      	b.n	8003da2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d56:	4b66      	ldr	r3, [pc, #408]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a65      	ldr	r2, [pc, #404]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d5c:	f043 0308 	orr.w	r3, r3, #8
 8003d60:	6013      	str	r3, [r2, #0]
 8003d62:	4b63      	ldr	r3, [pc, #396]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	4960      	ldr	r1, [pc, #384]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d74:	4b5e      	ldr	r3, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	69db      	ldr	r3, [r3, #28]
 8003d80:	021b      	lsls	r3, r3, #8
 8003d82:	495b      	ldr	r1, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d109      	bne.n	8003da2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f000 fd4c 	bl	8004830 <RCC_SetFlashLatencyFromMSIRange>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e37a      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003da2:	f000 fc81 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8003da6:	4602      	mov	r2, r0
 8003da8:	4b51      	ldr	r3, [pc, #324]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4950      	ldr	r1, [pc, #320]	; (8003ef4 <HAL_RCC_OscConfig+0x274>)
 8003db4:	5ccb      	ldrb	r3, [r1, r3]
 8003db6:	f003 031f 	and.w	r3, r3, #31
 8003dba:	fa22 f303 	lsr.w	r3, r2, r3
 8003dbe:	4a4e      	ldr	r2, [pc, #312]	; (8003ef8 <HAL_RCC_OscConfig+0x278>)
 8003dc0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003dc2:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7fd f998 	bl	80010fc <HAL_InitTick>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003dd0:	7bfb      	ldrb	r3, [r7, #15]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d052      	beq.n	8003e7c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003dd6:	7bfb      	ldrb	r3, [r7, #15]
 8003dd8:	e35e      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d032      	beq.n	8003e48 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003de2:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a42      	ldr	r2, [pc, #264]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dee:	f7fd f9d5 	bl	800119c <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003df6:	f7fd f9d1 	bl	800119c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e347      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e08:	4b39      	ldr	r3, [pc, #228]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003e14:	4b36      	ldr	r3, [pc, #216]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a35      	ldr	r2, [pc, #212]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e1a:	f043 0308 	orr.w	r3, r3, #8
 8003e1e:	6013      	str	r3, [r2, #0]
 8003e20:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6a1b      	ldr	r3, [r3, #32]
 8003e2c:	4930      	ldr	r1, [pc, #192]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003e32:	4b2f      	ldr	r3, [pc, #188]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	69db      	ldr	r3, [r3, #28]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	492b      	ldr	r1, [pc, #172]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	604b      	str	r3, [r1, #4]
 8003e46:	e01a      	b.n	8003e7e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a28      	ldr	r2, [pc, #160]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f023 0301 	bic.w	r3, r3, #1
 8003e52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e54:	f7fd f9a2 	bl	800119c <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e5c:	f7fd f99e 	bl	800119c <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e314      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e6e:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 0302 	and.w	r3, r3, #2
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1f0      	bne.n	8003e5c <HAL_RCC_OscConfig+0x1dc>
 8003e7a:	e000      	b.n	8003e7e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e7c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0301 	and.w	r3, r3, #1
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d073      	beq.n	8003f72 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	2b08      	cmp	r3, #8
 8003e8e:	d005      	beq.n	8003e9c <HAL_RCC_OscConfig+0x21c>
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	2b0c      	cmp	r3, #12
 8003e94:	d10e      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	2b03      	cmp	r3, #3
 8003e9a:	d10b      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d063      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2f0>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d15f      	bne.n	8003f70 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e2f1      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ebc:	d106      	bne.n	8003ecc <HAL_RCC_OscConfig+0x24c>
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ec4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	e025      	b.n	8003f18 <HAL_RCC_OscConfig+0x298>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ed4:	d114      	bne.n	8003f00 <HAL_RCC_OscConfig+0x280>
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003edc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ee0:	6013      	str	r3, [r2, #0]
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a02      	ldr	r2, [pc, #8]	; (8003ef0 <HAL_RCC_OscConfig+0x270>)
 8003ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eec:	6013      	str	r3, [r2, #0]
 8003eee:	e013      	b.n	8003f18 <HAL_RCC_OscConfig+0x298>
 8003ef0:	40021000 	.word	0x40021000
 8003ef4:	080066d0 	.word	0x080066d0
 8003ef8:	20000004 	.word	0x20000004
 8003efc:	20000008 	.word	0x20000008
 8003f00:	4ba0      	ldr	r3, [pc, #640]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a9f      	ldr	r2, [pc, #636]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f0a:	6013      	str	r3, [r2, #0]
 8003f0c:	4b9d      	ldr	r3, [pc, #628]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a9c      	ldr	r2, [pc, #624]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d013      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fd f93c 	bl	800119c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fd f938 	bl	800119c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e2ae      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003f3a:	4b92      	ldr	r3, [pc, #584]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x2a8>
 8003f46:	e014      	b.n	8003f72 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f48:	f7fd f928 	bl	800119c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f50:	f7fd f924 	bl	800119c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b64      	cmp	r3, #100	; 0x64
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e29a      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f62:	4b88      	ldr	r3, [pc, #544]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x2d0>
 8003f6e:	e000      	b.n	8003f72 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d060      	beq.n	8004040 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d005      	beq.n	8003f90 <HAL_RCC_OscConfig+0x310>
 8003f84:	69bb      	ldr	r3, [r7, #24]
 8003f86:	2b0c      	cmp	r3, #12
 8003f88:	d119      	bne.n	8003fbe <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d116      	bne.n	8003fbe <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f90:	4b7c      	ldr	r3, [pc, #496]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d005      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x328>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d101      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e277      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b76      	ldr	r3, [pc, #472]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	4973      	ldr	r1, [pc, #460]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003fbc:	e040      	b.n	8004040 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d023      	beq.n	800400e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc6:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6e      	ldr	r2, [pc, #440]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd2:	f7fd f8e3 	bl	800119c <HAL_GetTick>
 8003fd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fda:	f7fd f8df 	bl	800119c <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e255      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fec:	4b65      	ldr	r3, [pc, #404]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0f0      	beq.n	8003fda <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff8:	4b62      	ldr	r3, [pc, #392]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	061b      	lsls	r3, r3, #24
 8004006:	495f      	ldr	r1, [pc, #380]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004008:	4313      	orrs	r3, r2
 800400a:	604b      	str	r3, [r1, #4]
 800400c:	e018      	b.n	8004040 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400e:	4b5d      	ldr	r3, [pc, #372]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a5c      	ldr	r2, [pc, #368]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800401a:	f7fd f8bf 	bl	800119c <HAL_GetTick>
 800401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004020:	e008      	b.n	8004034 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004022:	f7fd f8bb 	bl	800119c <HAL_GetTick>
 8004026:	4602      	mov	r2, r0
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	1ad3      	subs	r3, r2, r3
 800402c:	2b02      	cmp	r3, #2
 800402e:	d901      	bls.n	8004034 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e231      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004034:	4b53      	ldr	r3, [pc, #332]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f0      	bne.n	8004022 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0308 	and.w	r3, r3, #8
 8004048:	2b00      	cmp	r3, #0
 800404a:	d03c      	beq.n	80040c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	695b      	ldr	r3, [r3, #20]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d01c      	beq.n	800408e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004054:	4b4b      	ldr	r3, [pc, #300]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004056:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800405a:	4a4a      	ldr	r2, [pc, #296]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 800405c:	f043 0301 	orr.w	r3, r3, #1
 8004060:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004064:	f7fd f89a 	bl	800119c <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800406c:	f7fd f896 	bl	800119c <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e20c      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800407e:	4b41      	ldr	r3, [pc, #260]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004080:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0ef      	beq.n	800406c <HAL_RCC_OscConfig+0x3ec>
 800408c:	e01b      	b.n	80040c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800408e:	4b3d      	ldr	r3, [pc, #244]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004090:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004094:	4a3b      	ldr	r2, [pc, #236]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004096:	f023 0301 	bic.w	r3, r3, #1
 800409a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800409e:	f7fd f87d 	bl	800119c <HAL_GetTick>
 80040a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040a4:	e008      	b.n	80040b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80040a6:	f7fd f879 	bl	800119c <HAL_GetTick>
 80040aa:	4602      	mov	r2, r0
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	d901      	bls.n	80040b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80040b4:	2303      	movs	r3, #3
 80040b6:	e1ef      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80040b8:	4b32      	ldr	r3, [pc, #200]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 80040ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1ef      	bne.n	80040a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0304 	and.w	r3, r3, #4
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80a6 	beq.w	8004220 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80040d8:	4b2a      	ldr	r3, [pc, #168]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 80040da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d10d      	bne.n	8004100 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 80040e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040e8:	4a26      	ldr	r2, [pc, #152]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 80040ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ee:	6593      	str	r3, [r2, #88]	; 0x58
 80040f0:	4b24      	ldr	r3, [pc, #144]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 80040f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040f8:	60bb      	str	r3, [r7, #8]
 80040fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040fc:	2301      	movs	r3, #1
 80040fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004100:	4b21      	ldr	r3, [pc, #132]	; (8004188 <HAL_RCC_OscConfig+0x508>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004108:	2b00      	cmp	r3, #0
 800410a:	d118      	bne.n	800413e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800410c:	4b1e      	ldr	r3, [pc, #120]	; (8004188 <HAL_RCC_OscConfig+0x508>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a1d      	ldr	r2, [pc, #116]	; (8004188 <HAL_RCC_OscConfig+0x508>)
 8004112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004116:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004118:	f7fd f840 	bl	800119c <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800411e:	e008      	b.n	8004132 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004120:	f7fd f83c 	bl	800119c <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	2b02      	cmp	r3, #2
 800412c:	d901      	bls.n	8004132 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800412e:	2303      	movs	r3, #3
 8004130:	e1b2      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_RCC_OscConfig+0x508>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413a:	2b00      	cmp	r3, #0
 800413c:	d0f0      	beq.n	8004120 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	2b01      	cmp	r3, #1
 8004144:	d108      	bne.n	8004158 <HAL_RCC_OscConfig+0x4d8>
 8004146:	4b0f      	ldr	r3, [pc, #60]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414c:	4a0d      	ldr	r2, [pc, #52]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004156:	e029      	b.n	80041ac <HAL_RCC_OscConfig+0x52c>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	2b05      	cmp	r3, #5
 800415e:	d115      	bne.n	800418c <HAL_RCC_OscConfig+0x50c>
 8004160:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004162:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004166:	4a07      	ldr	r2, [pc, #28]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004168:	f043 0304 	orr.w	r3, r3, #4
 800416c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004170:	4b04      	ldr	r3, [pc, #16]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004176:	4a03      	ldr	r2, [pc, #12]	; (8004184 <HAL_RCC_OscConfig+0x504>)
 8004178:	f043 0301 	orr.w	r3, r3, #1
 800417c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004180:	e014      	b.n	80041ac <HAL_RCC_OscConfig+0x52c>
 8004182:	bf00      	nop
 8004184:	40021000 	.word	0x40021000
 8004188:	40007000 	.word	0x40007000
 800418c:	4b9a      	ldr	r3, [pc, #616]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004192:	4a99      	ldr	r2, [pc, #612]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004194:	f023 0301 	bic.w	r3, r3, #1
 8004198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800419c:	4b96      	ldr	r3, [pc, #600]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a2:	4a95      	ldr	r2, [pc, #596]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80041a4:	f023 0304 	bic.w	r3, r3, #4
 80041a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d016      	beq.n	80041e2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b4:	f7fc fff2 	bl	800119c <HAL_GetTick>
 80041b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041ba:	e00a      	b.n	80041d2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041bc:	f7fc ffee 	bl	800119c <HAL_GetTick>
 80041c0:	4602      	mov	r2, r0
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	1ad3      	subs	r3, r2, r3
 80041c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e162      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041d2:	4b89      	ldr	r3, [pc, #548]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80041d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041d8:	f003 0302 	and.w	r3, r3, #2
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d0ed      	beq.n	80041bc <HAL_RCC_OscConfig+0x53c>
 80041e0:	e015      	b.n	800420e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041e2:	f7fc ffdb 	bl	800119c <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041e8:	e00a      	b.n	8004200 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041ea:	f7fc ffd7 	bl	800119c <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d901      	bls.n	8004200 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e14b      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004200:	4b7d      	ldr	r3, [pc, #500]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f003 0302 	and.w	r3, r3, #2
 800420a:	2b00      	cmp	r3, #0
 800420c:	d1ed      	bne.n	80041ea <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800420e:	7ffb      	ldrb	r3, [r7, #31]
 8004210:	2b01      	cmp	r3, #1
 8004212:	d105      	bne.n	8004220 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004214:	4b78      	ldr	r3, [pc, #480]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004218:	4a77      	ldr	r2, [pc, #476]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 800421a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800421e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0320 	and.w	r3, r3, #32
 8004228:	2b00      	cmp	r3, #0
 800422a:	d03c      	beq.n	80042a6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01c      	beq.n	800426e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004234:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004236:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800423a:	4a6f      	ldr	r2, [pc, #444]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 800423c:	f043 0301 	orr.w	r3, r3, #1
 8004240:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004244:	f7fc ffaa 	bl	800119c <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800424c:	f7fc ffa6 	bl	800119c <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b02      	cmp	r3, #2
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e11c      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800425e:	4b66      	ldr	r3, [pc, #408]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004260:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d0ef      	beq.n	800424c <HAL_RCC_OscConfig+0x5cc>
 800426c:	e01b      	b.n	80042a6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800426e:	4b62      	ldr	r3, [pc, #392]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004270:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004274:	4a60      	ldr	r2, [pc, #384]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004276:	f023 0301 	bic.w	r3, r3, #1
 800427a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800427e:	f7fc ff8d 	bl	800119c <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004286:	f7fc ff89 	bl	800119c <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e0ff      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004298:	4b57      	ldr	r3, [pc, #348]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 800429a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1ef      	bne.n	8004286 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	f000 80f3 	beq.w	8004496 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b4:	2b02      	cmp	r3, #2
 80042b6:	f040 80c9 	bne.w	800444c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80042ba:	4b4f      	ldr	r3, [pc, #316]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80042bc:	68db      	ldr	r3, [r3, #12]
 80042be:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	f003 0203 	and.w	r2, r3, #3
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	429a      	cmp	r2, r3
 80042cc:	d12c      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d8:	3b01      	subs	r3, #1
 80042da:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d123      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ea:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042ec:	429a      	cmp	r2, r3
 80042ee:	d11b      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042fa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042fc:	429a      	cmp	r2, r3
 80042fe:	d113      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800430a:	085b      	lsrs	r3, r3, #1
 800430c:	3b01      	subs	r3, #1
 800430e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004310:	429a      	cmp	r2, r3
 8004312:	d109      	bne.n	8004328 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800431e:	085b      	lsrs	r3, r3, #1
 8004320:	3b01      	subs	r3, #1
 8004322:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d06b      	beq.n	8004400 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	2b0c      	cmp	r3, #12
 800432c:	d062      	beq.n	80043f4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800432e:	4b32      	ldr	r3, [pc, #200]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0ac      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800433e:	4b2e      	ldr	r3, [pc, #184]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a2d      	ldr	r2, [pc, #180]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004344:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004348:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800434a:	f7fc ff27 	bl	800119c <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004352:	f7fc ff23 	bl	800119c <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e099      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004364:	4b24      	ldr	r3, [pc, #144]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d1f0      	bne.n	8004352 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004370:	4b21      	ldr	r3, [pc, #132]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 8004372:	68da      	ldr	r2, [r3, #12]
 8004374:	4b21      	ldr	r3, [pc, #132]	; (80043fc <HAL_RCC_OscConfig+0x77c>)
 8004376:	4013      	ands	r3, r2
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800437c:	687a      	ldr	r2, [r7, #4]
 800437e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004380:	3a01      	subs	r2, #1
 8004382:	0112      	lsls	r2, r2, #4
 8004384:	4311      	orrs	r1, r2
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800438a:	0212      	lsls	r2, r2, #8
 800438c:	4311      	orrs	r1, r2
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004392:	0852      	lsrs	r2, r2, #1
 8004394:	3a01      	subs	r2, #1
 8004396:	0552      	lsls	r2, r2, #21
 8004398:	4311      	orrs	r1, r2
 800439a:	687a      	ldr	r2, [r7, #4]
 800439c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800439e:	0852      	lsrs	r2, r2, #1
 80043a0:	3a01      	subs	r2, #1
 80043a2:	0652      	lsls	r2, r2, #25
 80043a4:	4311      	orrs	r1, r2
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80043aa:	06d2      	lsls	r2, r2, #27
 80043ac:	430a      	orrs	r2, r1
 80043ae:	4912      	ldr	r1, [pc, #72]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80043b4:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a0f      	ldr	r2, [pc, #60]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043c0:	4b0d      	ldr	r3, [pc, #52]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043c2:	68db      	ldr	r3, [r3, #12]
 80043c4:	4a0c      	ldr	r2, [pc, #48]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80043ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80043cc:	f7fc fee6 	bl	800119c <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fc fee2 	bl	800119c <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e058      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e6:	4b04      	ldr	r3, [pc, #16]	; (80043f8 <HAL_RCC_OscConfig+0x778>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f0      	beq.n	80043d4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043f2:	e050      	b.n	8004496 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e04f      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
 80043f8:	40021000 	.word	0x40021000
 80043fc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004400:	4b27      	ldr	r3, [pc, #156]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d144      	bne.n	8004496 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800440c:	4b24      	ldr	r3, [pc, #144]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4a23      	ldr	r2, [pc, #140]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004412:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004416:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 800441a:	68db      	ldr	r3, [r3, #12]
 800441c:	4a20      	ldr	r2, [pc, #128]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 800441e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004422:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004424:	f7fc feba 	bl	800119c <HAL_GetTick>
 8004428:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800442a:	e008      	b.n	800443e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800442c:	f7fc feb6 	bl	800119c <HAL_GetTick>
 8004430:	4602      	mov	r2, r0
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	2b02      	cmp	r3, #2
 8004438:	d901      	bls.n	800443e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800443a:	2303      	movs	r3, #3
 800443c:	e02c      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800443e:	4b18      	ldr	r3, [pc, #96]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d0f0      	beq.n	800442c <HAL_RCC_OscConfig+0x7ac>
 800444a:	e024      	b.n	8004496 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d01f      	beq.n	8004492 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004452:	4b13      	ldr	r3, [pc, #76]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a12      	ldr	r2, [pc, #72]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004458:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800445c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800445e:	f7fc fe9d 	bl	800119c <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004466:	f7fc fe99 	bl	800119c <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e00f      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004478:	4b09      	ldr	r3, [pc, #36]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d1f0      	bne.n	8004466 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004484:	4b06      	ldr	r3, [pc, #24]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 8004486:	68da      	ldr	r2, [r3, #12]
 8004488:	4905      	ldr	r1, [pc, #20]	; (80044a0 <HAL_RCC_OscConfig+0x820>)
 800448a:	4b06      	ldr	r3, [pc, #24]	; (80044a4 <HAL_RCC_OscConfig+0x824>)
 800448c:	4013      	ands	r3, r2
 800448e:	60cb      	str	r3, [r1, #12]
 8004490:	e001      	b.n	8004496 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e000      	b.n	8004498 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40021000 	.word	0x40021000
 80044a4:	feeefffc 	.word	0xfeeefffc

080044a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b084      	sub	sp, #16
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d101      	bne.n	80044bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044b8:	2301      	movs	r3, #1
 80044ba:	e0e7      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80044bc:	4b75      	ldr	r3, [pc, #468]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0307 	and.w	r3, r3, #7
 80044c4:	683a      	ldr	r2, [r7, #0]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d910      	bls.n	80044ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044ca:	4b72      	ldr	r3, [pc, #456]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f023 0207 	bic.w	r2, r3, #7
 80044d2:	4970      	ldr	r1, [pc, #448]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044da:	4b6e      	ldr	r3, [pc, #440]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0307 	and.w	r3, r3, #7
 80044e2:	683a      	ldr	r2, [r7, #0]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d001      	beq.n	80044ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e0cf      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d010      	beq.n	800451a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	4b66      	ldr	r3, [pc, #408]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004504:	429a      	cmp	r2, r3
 8004506:	d908      	bls.n	800451a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004508:	4b63      	ldr	r3, [pc, #396]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	4960      	ldr	r1, [pc, #384]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004516:	4313      	orrs	r3, r2
 8004518:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f003 0301 	and.w	r3, r3, #1
 8004522:	2b00      	cmp	r3, #0
 8004524:	d04c      	beq.n	80045c0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	2b03      	cmp	r3, #3
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800452e:	4b5a      	ldr	r3, [pc, #360]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d121      	bne.n	800457e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e0a6      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b02      	cmp	r3, #2
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004546:	4b54      	ldr	r3, [pc, #336]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d115      	bne.n	800457e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e09a      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800455e:	4b4e      	ldr	r3, [pc, #312]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e08e      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800456e:	4b4a      	ldr	r3, [pc, #296]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004576:	2b00      	cmp	r3, #0
 8004578:	d101      	bne.n	800457e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e086      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800457e:	4b46      	ldr	r3, [pc, #280]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f023 0203 	bic.w	r2, r3, #3
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4943      	ldr	r1, [pc, #268]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 800458c:	4313      	orrs	r3, r2
 800458e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004590:	f7fc fe04 	bl	800119c <HAL_GetTick>
 8004594:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	e00a      	b.n	80045ae <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004598:	f7fc fe00 	bl	800119c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e06e      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ae:	4b3a      	ldr	r3, [pc, #232]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 020c 	and.w	r2, r3, #12
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	429a      	cmp	r2, r3
 80045be:	d1eb      	bne.n	8004598 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d010      	beq.n	80045ee <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689a      	ldr	r2, [r3, #8]
 80045d0:	4b31      	ldr	r3, [pc, #196]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045d8:	429a      	cmp	r2, r3
 80045da:	d208      	bcs.n	80045ee <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045dc:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	492b      	ldr	r1, [pc, #172]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045ee:	4b29      	ldr	r3, [pc, #164]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0307 	and.w	r3, r3, #7
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d210      	bcs.n	800461e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045fc:	4b25      	ldr	r3, [pc, #148]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f023 0207 	bic.w	r2, r3, #7
 8004604:	4923      	ldr	r1, [pc, #140]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	4313      	orrs	r3, r2
 800460a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800460c:	4b21      	ldr	r3, [pc, #132]	; (8004694 <HAL_RCC_ClockConfig+0x1ec>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 0307 	and.w	r3, r3, #7
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	429a      	cmp	r2, r3
 8004618:	d001      	beq.n	800461e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e036      	b.n	800468c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0304 	and.w	r3, r3, #4
 8004626:	2b00      	cmp	r3, #0
 8004628:	d008      	beq.n	800463c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800462a:	4b1b      	ldr	r3, [pc, #108]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	4918      	ldr	r1, [pc, #96]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004638:	4313      	orrs	r3, r2
 800463a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0308 	and.w	r3, r3, #8
 8004644:	2b00      	cmp	r3, #0
 8004646:	d009      	beq.n	800465c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004648:	4b13      	ldr	r3, [pc, #76]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	4910      	ldr	r1, [pc, #64]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004658:	4313      	orrs	r3, r2
 800465a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800465c:	f000 f824 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8004660:	4602      	mov	r2, r0
 8004662:	4b0d      	ldr	r3, [pc, #52]	; (8004698 <HAL_RCC_ClockConfig+0x1f0>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	091b      	lsrs	r3, r3, #4
 8004668:	f003 030f 	and.w	r3, r3, #15
 800466c:	490b      	ldr	r1, [pc, #44]	; (800469c <HAL_RCC_ClockConfig+0x1f4>)
 800466e:	5ccb      	ldrb	r3, [r1, r3]
 8004670:	f003 031f 	and.w	r3, r3, #31
 8004674:	fa22 f303 	lsr.w	r3, r2, r3
 8004678:	4a09      	ldr	r2, [pc, #36]	; (80046a0 <HAL_RCC_ClockConfig+0x1f8>)
 800467a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800467c:	4b09      	ldr	r3, [pc, #36]	; (80046a4 <HAL_RCC_ClockConfig+0x1fc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fc fd3b 	bl	80010fc <HAL_InitTick>
 8004686:	4603      	mov	r3, r0
 8004688:	72fb      	strb	r3, [r7, #11]

  return status;
 800468a:	7afb      	ldrb	r3, [r7, #11]
}
 800468c:	4618      	mov	r0, r3
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}
 8004694:	40022000 	.word	0x40022000
 8004698:	40021000 	.word	0x40021000
 800469c:	080066d0 	.word	0x080066d0
 80046a0:	20000004 	.word	0x20000004
 80046a4:	20000008 	.word	0x20000008

080046a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
 80046b2:	2300      	movs	r3, #0
 80046b4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80046b6:	4b3e      	ldr	r3, [pc, #248]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f003 030c 	and.w	r3, r3, #12
 80046be:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80046c0:	4b3b      	ldr	r3, [pc, #236]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <HAL_RCC_GetSysClockFreq+0x34>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	2b0c      	cmp	r3, #12
 80046d4:	d121      	bne.n	800471a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d11e      	bne.n	800471a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80046dc:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0308 	and.w	r3, r3, #8
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d107      	bne.n	80046f8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80046e8:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046ee:	0a1b      	lsrs	r3, r3, #8
 80046f0:	f003 030f 	and.w	r3, r3, #15
 80046f4:	61fb      	str	r3, [r7, #28]
 80046f6:	e005      	b.n	8004704 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046f8:	4b2d      	ldr	r3, [pc, #180]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	091b      	lsrs	r3, r3, #4
 80046fe:	f003 030f 	and.w	r3, r3, #15
 8004702:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004704:	4a2b      	ldr	r2, [pc, #172]	; (80047b4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10d      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004718:	e00a      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	2b04      	cmp	r3, #4
 800471e:	d102      	bne.n	8004726 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004720:	4b25      	ldr	r3, [pc, #148]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004722:	61bb      	str	r3, [r7, #24]
 8004724:	e004      	b.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b08      	cmp	r3, #8
 800472a:	d101      	bne.n	8004730 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800472c:	4b23      	ldr	r3, [pc, #140]	; (80047bc <HAL_RCC_GetSysClockFreq+0x114>)
 800472e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	2b0c      	cmp	r3, #12
 8004734:	d134      	bne.n	80047a0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004736:	4b1e      	ldr	r3, [pc, #120]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f003 0303 	and.w	r3, r3, #3
 800473e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b02      	cmp	r3, #2
 8004744:	d003      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0xa6>
 8004746:	68bb      	ldr	r3, [r7, #8]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d003      	beq.n	8004754 <HAL_RCC_GetSysClockFreq+0xac>
 800474c:	e005      	b.n	800475a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_RCC_GetSysClockFreq+0x110>)
 8004750:	617b      	str	r3, [r7, #20]
      break;
 8004752:	e005      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004754:	4b19      	ldr	r3, [pc, #100]	; (80047bc <HAL_RCC_GetSysClockFreq+0x114>)
 8004756:	617b      	str	r3, [r7, #20]
      break;
 8004758:	e002      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	617b      	str	r3, [r7, #20]
      break;
 800475e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004760:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	091b      	lsrs	r3, r3, #4
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	3301      	adds	r3, #1
 800476c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800476e:	4b10      	ldr	r3, [pc, #64]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	0a1b      	lsrs	r3, r3, #8
 8004774:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	fb03 f202 	mul.w	r2, r3, r2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	fbb2 f3f3 	udiv	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004786:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <HAL_RCC_GetSysClockFreq+0x108>)
 8004788:	68db      	ldr	r3, [r3, #12]
 800478a:	0e5b      	lsrs	r3, r3, #25
 800478c:	f003 0303 	and.w	r3, r3, #3
 8004790:	3301      	adds	r3, #1
 8004792:	005b      	lsls	r3, r3, #1
 8004794:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004796:	697a      	ldr	r2, [r7, #20]
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	fbb2 f3f3 	udiv	r3, r2, r3
 800479e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80047a0:	69bb      	ldr	r3, [r7, #24]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3724      	adds	r7, #36	; 0x24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	40021000 	.word	0x40021000
 80047b4:	080066e8 	.word	0x080066e8
 80047b8:	00f42400 	.word	0x00f42400
 80047bc:	007a1200 	.word	0x007a1200

080047c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047c0:	b480      	push	{r7}
 80047c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047c4:	4b03      	ldr	r3, [pc, #12]	; (80047d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80047c6:	681b      	ldr	r3, [r3, #0]
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
 80047d2:	bf00      	nop
 80047d4:	20000004 	.word	0x20000004

080047d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80047dc:	f7ff fff0 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 80047e0:	4602      	mov	r2, r0
 80047e2:	4b06      	ldr	r3, [pc, #24]	; (80047fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	0a1b      	lsrs	r3, r3, #8
 80047e8:	f003 0307 	and.w	r3, r3, #7
 80047ec:	4904      	ldr	r1, [pc, #16]	; (8004800 <HAL_RCC_GetPCLK1Freq+0x28>)
 80047ee:	5ccb      	ldrb	r3, [r1, r3]
 80047f0:	f003 031f 	and.w	r3, r3, #31
 80047f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	40021000 	.word	0x40021000
 8004800:	080066e0 	.word	0x080066e0

08004804 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004808:	f7ff ffda 	bl	80047c0 <HAL_RCC_GetHCLKFreq>
 800480c:	4602      	mov	r2, r0
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	0adb      	lsrs	r3, r3, #11
 8004814:	f003 0307 	and.w	r3, r3, #7
 8004818:	4904      	ldr	r1, [pc, #16]	; (800482c <HAL_RCC_GetPCLK2Freq+0x28>)
 800481a:	5ccb      	ldrb	r3, [r1, r3]
 800481c:	f003 031f 	and.w	r3, r3, #31
 8004820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004824:	4618      	mov	r0, r3
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	080066e0 	.word	0x080066e0

08004830 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004838:	2300      	movs	r3, #0
 800483a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800483c:	4b2a      	ldr	r3, [pc, #168]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800483e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004840:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004848:	f7ff f9b6 	bl	8003bb8 <HAL_PWREx_GetVoltageRange>
 800484c:	6178      	str	r0, [r7, #20]
 800484e:	e014      	b.n	800487a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004850:	4b25      	ldr	r3, [pc, #148]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004854:	4a24      	ldr	r2, [pc, #144]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800485a:	6593      	str	r3, [r2, #88]	; 0x58
 800485c:	4b22      	ldr	r3, [pc, #136]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800485e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004860:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004868:	f7ff f9a6 	bl	8003bb8 <HAL_PWREx_GetVoltageRange>
 800486c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800486e:	4b1e      	ldr	r3, [pc, #120]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004872:	4a1d      	ldr	r2, [pc, #116]	; (80048e8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004878:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004880:	d10b      	bne.n	800489a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b80      	cmp	r3, #128	; 0x80
 8004886:	d919      	bls.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2ba0      	cmp	r3, #160	; 0xa0
 800488c:	d902      	bls.n	8004894 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800488e:	2302      	movs	r3, #2
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	e013      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004894:	2301      	movs	r3, #1
 8004896:	613b      	str	r3, [r7, #16]
 8004898:	e010      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b80      	cmp	r3, #128	; 0x80
 800489e:	d902      	bls.n	80048a6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80048a0:	2303      	movs	r3, #3
 80048a2:	613b      	str	r3, [r7, #16]
 80048a4:	e00a      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2b80      	cmp	r3, #128	; 0x80
 80048aa:	d102      	bne.n	80048b2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80048ac:	2302      	movs	r3, #2
 80048ae:	613b      	str	r3, [r7, #16]
 80048b0:	e004      	b.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2b70      	cmp	r3, #112	; 0x70
 80048b6:	d101      	bne.n	80048bc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80048b8:	2301      	movs	r3, #1
 80048ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80048bc:	4b0b      	ldr	r3, [pc, #44]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f023 0207 	bic.w	r2, r3, #7
 80048c4:	4909      	ldr	r1, [pc, #36]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80048cc:	4b07      	ldr	r3, [pc, #28]	; (80048ec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d001      	beq.n	80048de <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e000      	b.n	80048e0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40021000 	.word	0x40021000
 80048ec:	40022000 	.word	0x40022000

080048f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b086      	sub	sp, #24
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80048f8:	2300      	movs	r3, #0
 80048fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80048fc:	2300      	movs	r3, #0
 80048fe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004908:	2b00      	cmp	r3, #0
 800490a:	d031      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004910:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004914:	d01a      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004916:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800491a:	d814      	bhi.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800491c:	2b00      	cmp	r3, #0
 800491e:	d009      	beq.n	8004934 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004920:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004924:	d10f      	bne.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004926:	4b5d      	ldr	r3, [pc, #372]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004928:	68db      	ldr	r3, [r3, #12]
 800492a:	4a5c      	ldr	r2, [pc, #368]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004930:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004932:	e00c      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	3304      	adds	r3, #4
 8004938:	2100      	movs	r1, #0
 800493a:	4618      	mov	r0, r3
 800493c:	f000 f9de 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004940:	4603      	mov	r3, r0
 8004942:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004944:	e003      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004946:	2301      	movs	r3, #1
 8004948:	74fb      	strb	r3, [r7, #19]
      break;
 800494a:	e000      	b.n	800494e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800494c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800494e:	7cfb      	ldrb	r3, [r7, #19]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10b      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004954:	4b51      	ldr	r3, [pc, #324]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800495a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004962:	494e      	ldr	r1, [pc, #312]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004964:	4313      	orrs	r3, r2
 8004966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7cfb      	ldrb	r3, [r7, #19]
 800496e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004978:	2b00      	cmp	r3, #0
 800497a:	f000 809e 	beq.w	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800497e:	2300      	movs	r3, #0
 8004980:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004982:	4b46      	ldr	r3, [pc, #280]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d101      	bne.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800498e:	2301      	movs	r3, #1
 8004990:	e000      	b.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004992:	2300      	movs	r3, #0
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00d      	beq.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	4b40      	ldr	r3, [pc, #256]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800499c:	4a3f      	ldr	r2, [pc, #252]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800499e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a2:	6593      	str	r3, [r2, #88]	; 0x58
 80049a4:	4b3d      	ldr	r3, [pc, #244]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ac:	60bb      	str	r3, [r7, #8]
 80049ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049b0:	2301      	movs	r3, #1
 80049b2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049b4:	4b3a      	ldr	r3, [pc, #232]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a39      	ldr	r2, [pc, #228]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049c0:	f7fc fbec 	bl	800119c <HAL_GetTick>
 80049c4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049c6:	e009      	b.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049c8:	f7fc fbe8 	bl	800119c <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d902      	bls.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	74fb      	strb	r3, [r7, #19]
        break;
 80049da:	e005      	b.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049dc:	4b30      	ldr	r3, [pc, #192]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d0ef      	beq.n	80049c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80049e8:	7cfb      	ldrb	r3, [r7, #19]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d15a      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ee:	4b2b      	ldr	r3, [pc, #172]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80049f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049f8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d01e      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a04:	697a      	ldr	r2, [r7, #20]
 8004a06:	429a      	cmp	r2, r3
 8004a08:	d019      	beq.n	8004a3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a0a:	4b24      	ldr	r3, [pc, #144]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a16:	4b21      	ldr	r3, [pc, #132]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1c:	4a1f      	ldr	r2, [pc, #124]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a26:	4b1d      	ldr	r3, [pc, #116]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2c:	4a1b      	ldr	r2, [pc, #108]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d016      	beq.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a48:	f7fc fba8 	bl	800119c <HAL_GetTick>
 8004a4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a4e:	e00b      	b.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a50:	f7fc fba4 	bl	800119c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d902      	bls.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	74fb      	strb	r3, [r7, #19]
            break;
 8004a66:	e006      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	4b0c      	ldr	r3, [pc, #48]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d0ec      	beq.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004a76:	7cfb      	ldrb	r3, [r7, #19]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10b      	bne.n	8004a94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a7c:	4b07      	ldr	r3, [pc, #28]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a8a:	4904      	ldr	r1, [pc, #16]	; (8004a9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004a92:	e009      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
 8004a98:	e006      	b.n	8004aa8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004a9a:	bf00      	nop
 8004a9c:	40021000 	.word	0x40021000
 8004aa0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004aa4:	7cfb      	ldrb	r3, [r7, #19]
 8004aa6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004aa8:	7c7b      	ldrb	r3, [r7, #17]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d105      	bne.n	8004aba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004aae:	4b8a      	ldr	r3, [pc, #552]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ab2:	4a89      	ldr	r2, [pc, #548]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ab8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d00a      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ac6:	4b84      	ldr	r3, [pc, #528]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004acc:	f023 0203 	bic.w	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	4980      	ldr	r1, [pc, #512]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f003 0302 	and.w	r3, r3, #2
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00a      	beq.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ae8:	4b7b      	ldr	r3, [pc, #492]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004aee:	f023 020c 	bic.w	r2, r3, #12
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af6:	4978      	ldr	r1, [pc, #480]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0320 	and.w	r3, r3, #32
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d00a      	beq.n	8004b20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b0a:	4b73      	ldr	r3, [pc, #460]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b18:	496f      	ldr	r1, [pc, #444]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00a      	beq.n	8004b42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b2c:	4b6a      	ldr	r3, [pc, #424]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3a:	4967      	ldr	r1, [pc, #412]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d00a      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b4e:	4b62      	ldr	r3, [pc, #392]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b5c:	495e      	ldr	r1, [pc, #376]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b5e:	4313      	orrs	r3, r2
 8004b60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d00a      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004b70:	4b59      	ldr	r3, [pc, #356]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7e:	4956      	ldr	r1, [pc, #344]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b80:	4313      	orrs	r3, r2
 8004b82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d00a      	beq.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004b92:	4b51      	ldr	r3, [pc, #324]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ba0:	494d      	ldr	r1, [pc, #308]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d028      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004bb4:	4b48      	ldr	r3, [pc, #288]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bc2:	4945      	ldr	r1, [pc, #276]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004bd2:	d106      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bd4:	4b40      	ldr	r3, [pc, #256]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	4a3f      	ldr	r2, [pc, #252]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004bde:	60d3      	str	r3, [r2, #12]
 8004be0:	e011      	b.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004be6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004bea:	d10c      	bne.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	3304      	adds	r3, #4
 8004bf0:	2101      	movs	r1, #1
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f000 f882 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004bfc:	7cfb      	ldrb	r3, [r7, #19]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004c02:	7cfb      	ldrb	r3, [r7, #19]
 8004c04:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d028      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c12:	4b31      	ldr	r3, [pc, #196]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c18:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c20:	492d      	ldr	r1, [pc, #180]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c22:	4313      	orrs	r3, r2
 8004c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c30:	d106      	bne.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c32:	4b29      	ldr	r3, [pc, #164]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	4a28      	ldr	r2, [pc, #160]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c3c:	60d3      	str	r3, [r2, #12]
 8004c3e:	e011      	b.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c44:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c48:	d10c      	bne.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	2101      	movs	r1, #1
 8004c50:	4618      	mov	r0, r3
 8004c52:	f000 f853 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004c56:	4603      	mov	r3, r0
 8004c58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d001      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d01c      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004c70:	4b19      	ldr	r3, [pc, #100]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c76:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c7e:	4916      	ldr	r1, [pc, #88]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c8e:	d10c      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	3304      	adds	r3, #4
 8004c94:	2102      	movs	r1, #2
 8004c96:	4618      	mov	r0, r3
 8004c98:	f000 f830 	bl	8004cfc <RCCEx_PLLSAI1_Config>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004ca0:	7cfb      	ldrb	r3, [r7, #19]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004ca6:	7cfb      	ldrb	r3, [r7, #19]
 8004ca8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00a      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004ccc:	7cbb      	ldrb	r3, [r7, #18]
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40021000 	.word	0x40021000

08004cdc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ce0:	4b05      	ldr	r3, [pc, #20]	; (8004cf8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a04      	ldr	r2, [pc, #16]	; (8004cf8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ce6:	f043 0304 	orr.w	r3, r3, #4
 8004cea:	6013      	str	r3, [r2, #0]
}
 8004cec:	bf00      	nop
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf4:	4770      	bx	lr
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000

08004cfc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004d06:	2300      	movs	r3, #0
 8004d08:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004d0a:	4b74      	ldr	r3, [pc, #464]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d0c:	68db      	ldr	r3, [r3, #12]
 8004d0e:	f003 0303 	and.w	r3, r3, #3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d018      	beq.n	8004d48 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004d16:	4b71      	ldr	r3, [pc, #452]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	f003 0203 	and.w	r2, r3, #3
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10d      	bne.n	8004d42 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
       ||
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004d2e:	4b6b      	ldr	r3, [pc, #428]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	091b      	lsrs	r3, r3, #4
 8004d34:	f003 0307 	and.w	r3, r3, #7
 8004d38:	1c5a      	adds	r2, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
       ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d047      	beq.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	e044      	b.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b03      	cmp	r3, #3
 8004d4e:	d018      	beq.n	8004d82 <RCCEx_PLLSAI1_Config+0x86>
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d825      	bhi.n	8004da0 <RCCEx_PLLSAI1_Config+0xa4>
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d002      	beq.n	8004d5e <RCCEx_PLLSAI1_Config+0x62>
 8004d58:	2b02      	cmp	r3, #2
 8004d5a:	d009      	beq.n	8004d70 <RCCEx_PLLSAI1_Config+0x74>
 8004d5c:	e020      	b.n	8004da0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004d5e:	4b5f      	ldr	r3, [pc, #380]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11d      	bne.n	8004da6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d6e:	e01a      	b.n	8004da6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004d70:	4b5a      	ldr	r3, [pc, #360]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d116      	bne.n	8004daa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d80:	e013      	b.n	8004daa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d82:	4b56      	ldr	r3, [pc, #344]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d8e:	4b53      	ldr	r3, [pc, #332]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d109      	bne.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d9e:	e006      	b.n	8004dae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e004      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004da6:	bf00      	nop
 8004da8:	e002      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004daa:	bf00      	nop
 8004dac:	e000      	b.n	8004db0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004dae:	bf00      	nop
    }

    if(status == HAL_OK)
 8004db0:	7bfb      	ldrb	r3, [r7, #15]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d10d      	bne.n	8004dd2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004db6:	4b49      	ldr	r3, [pc, #292]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6819      	ldr	r1, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	011b      	lsls	r3, r3, #4
 8004dca:	430b      	orrs	r3, r1
 8004dcc:	4943      	ldr	r1, [pc, #268]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d17c      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004dd8:	4b40      	ldr	r3, [pc, #256]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a3f      	ldr	r2, [pc, #252]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004dde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004de2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004de4:	f7fc f9da 	bl	800119c <HAL_GetTick>
 8004de8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004dea:	e009      	b.n	8004e00 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004dec:	f7fc f9d6 	bl	800119c <HAL_GetTick>
 8004df0:	4602      	mov	r2, r0
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	1ad3      	subs	r3, r2, r3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d902      	bls.n	8004e00 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004dfa:	2303      	movs	r3, #3
 8004dfc:	73fb      	strb	r3, [r7, #15]
        break;
 8004dfe:	e005      	b.n	8004e0c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004e00:	4b36      	ldr	r3, [pc, #216]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ef      	bne.n	8004dec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004e0c:	7bfb      	ldrb	r3, [r7, #15]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d15f      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e18:	4b30      	ldr	r3, [pc, #192]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e1a:	691b      	ldr	r3, [r3, #16]
 8004e1c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8004e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6892      	ldr	r2, [r2, #8]
 8004e28:	0211      	lsls	r1, r2, #8
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68d2      	ldr	r2, [r2, #12]
 8004e2e:	06d2      	lsls	r2, r2, #27
 8004e30:	430a      	orrs	r2, r1
 8004e32:	492a      	ldr	r1, [pc, #168]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	610b      	str	r3, [r1, #16]
 8004e38:	e027      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d112      	bne.n	8004e66 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e40:	4b26      	ldr	r3, [pc, #152]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e42:	691b      	ldr	r3, [r3, #16]
 8004e44:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8004e48:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	6892      	ldr	r2, [r2, #8]
 8004e50:	0211      	lsls	r1, r2, #8
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	6912      	ldr	r2, [r2, #16]
 8004e56:	0852      	lsrs	r2, r2, #1
 8004e58:	3a01      	subs	r2, #1
 8004e5a:	0552      	lsls	r2, r2, #21
 8004e5c:	430a      	orrs	r2, r1
 8004e5e:	491f      	ldr	r1, [pc, #124]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	610b      	str	r3, [r1, #16]
 8004e64:	e011      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004e66:	4b1d      	ldr	r3, [pc, #116]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8004e6e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	6892      	ldr	r2, [r2, #8]
 8004e76:	0211      	lsls	r1, r2, #8
 8004e78:	687a      	ldr	r2, [r7, #4]
 8004e7a:	6952      	ldr	r2, [r2, #20]
 8004e7c:	0852      	lsrs	r2, r2, #1
 8004e7e:	3a01      	subs	r2, #1
 8004e80:	0652      	lsls	r2, r2, #25
 8004e82:	430a      	orrs	r2, r1
 8004e84:	4915      	ldr	r1, [pc, #84]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e86:	4313      	orrs	r3, r2
 8004e88:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004e8a:	4b14      	ldr	r3, [pc, #80]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a13      	ldr	r2, [pc, #76]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004e90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004e94:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e96:	f7fc f981 	bl	800119c <HAL_GetTick>
 8004e9a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004e9c:	e009      	b.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004e9e:	f7fc f97d 	bl	800119c <HAL_GetTick>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	1ad3      	subs	r3, r2, r3
 8004ea8:	2b02      	cmp	r3, #2
 8004eaa:	d902      	bls.n	8004eb2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8004eac:	2303      	movs	r3, #3
 8004eae:	73fb      	strb	r3, [r7, #15]
          break;
 8004eb0:	e005      	b.n	8004ebe <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004eb2:	4b0a      	ldr	r3, [pc, #40]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0ef      	beq.n	8004e9e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8004ebe:	7bfb      	ldrb	r3, [r7, #15]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d106      	bne.n	8004ed2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ec4:	4b05      	ldr	r3, [pc, #20]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ec6:	691a      	ldr	r2, [r3, #16]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	699b      	ldr	r3, [r3, #24]
 8004ecc:	4903      	ldr	r1, [pc, #12]	; (8004edc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ed2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	40021000 	.word	0x40021000

08004ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d101      	bne.n	8004ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e049      	b.n	8004f86 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d106      	bne.n	8004f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	f7fb ffc4 	bl	8000e94 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2202      	movs	r2, #2
 8004f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3304      	adds	r3, #4
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4610      	mov	r0, r2
 8004f20:	f000 fb0e 	bl	8005540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d101      	bne.n	8004fa0 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e049      	b.n	8005034 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d106      	bne.n	8004fba <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2200      	movs	r2, #0
 8004fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f841 	bl	800503c <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2202      	movs	r2, #2
 8004fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	3304      	adds	r3, #4
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4610      	mov	r0, r2
 8004fce:	f000 fab7 	bl	8005540 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2201      	movs	r2, #1
 8004fde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2201      	movs	r2, #1
 8004fe6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2201      	movs	r2, #1
 8005016:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2201      	movs	r2, #1
 800501e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2201      	movs	r2, #1
 8005026:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3708      	adds	r7, #8
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d020      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	f003 0302 	and.w	r3, r3, #2
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01b      	beq.n	80050b4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f06f 0202 	mvn.w	r2, #2
 8005084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	699b      	ldr	r3, [r3, #24]
 8005092:	f003 0303 	and.w	r3, r3, #3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fa31 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 80050a0:	e005      	b.n	80050ae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	f000 fa23 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 fa34 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d020      	beq.n	8005100 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01b      	beq.n	8005100 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f06f 0204 	mvn.w	r2, #4
 80050d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2202      	movs	r2, #2
 80050d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	699b      	ldr	r3, [r3, #24]
 80050de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 fa0b 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 80050ec:	e005      	b.n	80050fa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ee:	6878      	ldr	r0, [r7, #4]
 80050f0:	f000 f9fd 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f000 fa0e 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d020      	beq.n	800514c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d01b      	beq.n	800514c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f06f 0208 	mvn.w	r2, #8
 800511c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2204      	movs	r2, #4
 8005122:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	69db      	ldr	r3, [r3, #28]
 800512a:	f003 0303 	and.w	r3, r3, #3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005132:	6878      	ldr	r0, [r7, #4]
 8005134:	f000 f9e5 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 8005138:	e005      	b.n	8005146 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f000 f9d7 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005140:	6878      	ldr	r0, [r7, #4]
 8005142:	f000 f9e8 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b00      	cmp	r3, #0
 8005154:	d020      	beq.n	8005198 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	f003 0310 	and.w	r3, r3, #16
 800515c:	2b00      	cmp	r3, #0
 800515e:	d01b      	beq.n	8005198 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f06f 0210 	mvn.w	r2, #16
 8005168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2208      	movs	r2, #8
 800516e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	2b00      	cmp	r3, #0
 800517c:	d003      	beq.n	8005186 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f9bf 	bl	8005502 <HAL_TIM_IC_CaptureCallback>
 8005184:	e005      	b.n	8005192 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 f9b1 	bl	80054ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f000 f9c2 	bl	8005516 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d00c      	beq.n	80051bc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f06f 0201 	mvn.w	r2, #1
 80051b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051b6:	6878      	ldr	r0, [r7, #4]
 80051b8:	f000 f98f 	bl	80054da <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00c      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f000 fd9c 	bl	8005d18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00c      	beq.n	8005204 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d007      	beq.n	8005204 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fd94 	bl	8005d2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00c      	beq.n	8005228 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f981 	bl	800552a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0320 	and.w	r3, r3, #32
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00c      	beq.n	800524c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f003 0320 	and.w	r3, r3, #32
 8005238:	2b00      	cmp	r3, #0
 800523a:	d007      	beq.n	800524c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f06f 0220 	mvn.w	r2, #32
 8005244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005246:	6878      	ldr	r0, [r7, #4]
 8005248:	f000 fd5c 	bl	8005d04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800524c:	bf00      	nop
 800524e:	3710      	adds	r7, #16
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b086      	sub	sp, #24
 8005258:	af00      	add	r7, sp, #0
 800525a:	60f8      	str	r0, [r7, #12]
 800525c:	60b9      	str	r1, [r7, #8]
 800525e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005260:	2300      	movs	r3, #0
 8005262:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800526a:	2b01      	cmp	r3, #1
 800526c:	d101      	bne.n	8005272 <HAL_TIM_OC_ConfigChannel+0x1e>
 800526e:	2302      	movs	r3, #2
 8005270:	e066      	b.n	8005340 <HAL_TIM_OC_ConfigChannel+0xec>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2b14      	cmp	r3, #20
 800527e:	d857      	bhi.n	8005330 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005280:	a201      	add	r2, pc, #4	; (adr r2, 8005288 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005286:	bf00      	nop
 8005288:	080052dd 	.word	0x080052dd
 800528c:	08005331 	.word	0x08005331
 8005290:	08005331 	.word	0x08005331
 8005294:	08005331 	.word	0x08005331
 8005298:	080052eb 	.word	0x080052eb
 800529c:	08005331 	.word	0x08005331
 80052a0:	08005331 	.word	0x08005331
 80052a4:	08005331 	.word	0x08005331
 80052a8:	080052f9 	.word	0x080052f9
 80052ac:	08005331 	.word	0x08005331
 80052b0:	08005331 	.word	0x08005331
 80052b4:	08005331 	.word	0x08005331
 80052b8:	08005307 	.word	0x08005307
 80052bc:	08005331 	.word	0x08005331
 80052c0:	08005331 	.word	0x08005331
 80052c4:	08005331 	.word	0x08005331
 80052c8:	08005315 	.word	0x08005315
 80052cc:	08005331 	.word	0x08005331
 80052d0:	08005331 	.word	0x08005331
 80052d4:	08005331 	.word	0x08005331
 80052d8:	08005323 	.word	0x08005323
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f000 f990 	bl	8005608 <TIM_OC1_SetConfig>
      break;
 80052e8:	e025      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fa05 	bl	8005700 <TIM_OC2_SetConfig>
      break;
 80052f6:	e01e      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	68b9      	ldr	r1, [r7, #8]
 80052fe:	4618      	mov	r0, r3
 8005300:	f000 fa78 	bl	80057f4 <TIM_OC3_SetConfig>
      break;
 8005304:	e017      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 fae9 	bl	80058e4 <TIM_OC4_SetConfig>
      break;
 8005312:	e010      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68b9      	ldr	r1, [r7, #8]
 800531a:	4618      	mov	r0, r3
 800531c:	f000 fb40 	bl	80059a0 <TIM_OC5_SetConfig>
      break;
 8005320:	e009      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68b9      	ldr	r1, [r7, #8]
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fb91 	bl	8005a50 <TIM_OC6_SetConfig>
      break;
 800532e:	e002      	b.n	8005336 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	75fb      	strb	r3, [r7, #23]
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800533e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005340:	4618      	mov	r0, r3
 8005342:	3718      	adds	r7, #24
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005352:	2300      	movs	r3, #0
 8005354:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535c:	2b01      	cmp	r3, #1
 800535e:	d101      	bne.n	8005364 <HAL_TIM_ConfigClockSource+0x1c>
 8005360:	2302      	movs	r3, #2
 8005362:	e0b6      	b.n	80054d2 <HAL_TIM_ConfigClockSource+0x18a>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2201      	movs	r2, #1
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2202      	movs	r2, #2
 8005370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689b      	ldr	r3, [r3, #8]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005382:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005386:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68ba      	ldr	r2, [r7, #8]
 8005396:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d03e      	beq.n	8005420 <HAL_TIM_ConfigClockSource+0xd8>
 80053a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a6:	f200 8087 	bhi.w	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	f000 8086 	beq.w	80054be <HAL_TIM_ConfigClockSource+0x176>
 80053b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053b6:	d87f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053b8:	2b70      	cmp	r3, #112	; 0x70
 80053ba:	d01a      	beq.n	80053f2 <HAL_TIM_ConfigClockSource+0xaa>
 80053bc:	2b70      	cmp	r3, #112	; 0x70
 80053be:	d87b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053c0:	2b60      	cmp	r3, #96	; 0x60
 80053c2:	d050      	beq.n	8005466 <HAL_TIM_ConfigClockSource+0x11e>
 80053c4:	2b60      	cmp	r3, #96	; 0x60
 80053c6:	d877      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053c8:	2b50      	cmp	r3, #80	; 0x50
 80053ca:	d03c      	beq.n	8005446 <HAL_TIM_ConfigClockSource+0xfe>
 80053cc:	2b50      	cmp	r3, #80	; 0x50
 80053ce:	d873      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053d0:	2b40      	cmp	r3, #64	; 0x40
 80053d2:	d058      	beq.n	8005486 <HAL_TIM_ConfigClockSource+0x13e>
 80053d4:	2b40      	cmp	r3, #64	; 0x40
 80053d6:	d86f      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053d8:	2b30      	cmp	r3, #48	; 0x30
 80053da:	d064      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15e>
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d86b      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053e0:	2b20      	cmp	r3, #32
 80053e2:	d060      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15e>
 80053e4:	2b20      	cmp	r3, #32
 80053e6:	d867      	bhi.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d05c      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15e>
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	d05a      	beq.n	80054a6 <HAL_TIM_ConfigClockSource+0x15e>
 80053f0:	e062      	b.n	80054b8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005402:	f000 fbf9 	bl	8005bf8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005414:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	609a      	str	r2, [r3, #8]
      break;
 800541e:	e04f      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005430:	f000 fbe2 	bl	8005bf8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005442:	609a      	str	r2, [r3, #8]
      break;
 8005444:	e03c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	461a      	mov	r2, r3
 8005454:	f000 fb56 	bl	8005b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	2150      	movs	r1, #80	; 0x50
 800545e:	4618      	mov	r0, r3
 8005460:	f000 fbaf 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 8005464:	e02c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	461a      	mov	r2, r3
 8005474:	f000 fb75 	bl	8005b62 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2160      	movs	r1, #96	; 0x60
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fb9f 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 8005484:	e01c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	461a      	mov	r2, r3
 8005494:	f000 fb36 	bl	8005b04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	2140      	movs	r1, #64	; 0x40
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 fb8f 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 80054a4:	e00c      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4619      	mov	r1, r3
 80054b0:	4610      	mov	r0, r2
 80054b2:	f000 fb86 	bl	8005bc2 <TIM_ITRx_SetConfig>
      break;
 80054b6:	e003      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80054b8:	2301      	movs	r3, #1
 80054ba:	73fb      	strb	r3, [r7, #15]
      break;
 80054bc:	e000      	b.n	80054c0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 80054be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	2201      	movs	r2, #1
 80054c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054ee:	b480      	push	{r7}
 80054f0:	b083      	sub	sp, #12
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054f6:	bf00      	nop
 80054f8:	370c      	adds	r7, #12
 80054fa:	46bd      	mov	sp, r7
 80054fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005500:	4770      	bx	lr

08005502 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005502:	b480      	push	{r7}
 8005504:	b083      	sub	sp, #12
 8005506:	af00      	add	r7, sp, #0
 8005508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800550a:	bf00      	nop
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800551e:	bf00      	nop
 8005520:	370c      	adds	r7, #12
 8005522:	46bd      	mov	sp, r7
 8005524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005528:	4770      	bx	lr

0800552a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800552a:	b480      	push	{r7}
 800552c:	b083      	sub	sp, #12
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005532:	bf00      	nop
 8005534:	370c      	adds	r7, #12
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
	...

08005540 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005540:	b480      	push	{r7}
 8005542:	b085      	sub	sp, #20
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a2a      	ldr	r2, [pc, #168]	; (80055fc <TIM_Base_SetConfig+0xbc>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x20>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a21      	ldr	r2, [pc, #132]	; (80055fc <TIM_Base_SetConfig+0xbc>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00b      	beq.n	8005592 <TIM_Base_SetConfig+0x52>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d007      	beq.n	8005592 <TIM_Base_SetConfig+0x52>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a1e      	ldr	r2, [pc, #120]	; (8005600 <TIM_Base_SetConfig+0xc0>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d003      	beq.n	8005592 <TIM_Base_SetConfig+0x52>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <TIM_Base_SetConfig+0xc4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d108      	bne.n	80055a4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005598:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	689a      	ldr	r2, [r3, #8]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	681a      	ldr	r2, [r3, #0]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a0c      	ldr	r2, [pc, #48]	; (80055fc <TIM_Base_SetConfig+0xbc>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_Base_SetConfig+0xa0>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a0b      	ldr	r2, [pc, #44]	; (8005600 <TIM_Base_SetConfig+0xc0>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0xa0>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a0a      	ldr	r2, [pc, #40]	; (8005604 <TIM_Base_SetConfig+0xc4>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d103      	bne.n	80055e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	615a      	str	r2, [r3, #20]
}
 80055ee:	bf00      	nop
 80055f0:	3714      	adds	r7, #20
 80055f2:	46bd      	mov	sp, r7
 80055f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f8:	4770      	bx	lr
 80055fa:	bf00      	nop
 80055fc:	40012c00 	.word	0x40012c00
 8005600:	40014000 	.word	0x40014000
 8005604:	40014400 	.word	0x40014400

08005608 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005608:	b480      	push	{r7}
 800560a:	b087      	sub	sp, #28
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
 8005610:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a1b      	ldr	r3, [r3, #32]
 8005616:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	f023 0201 	bic.w	r2, r3, #1
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	699b      	ldr	r3, [r3, #24]
 800562e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800563a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f023 0303 	bic.w	r3, r3, #3
 8005642:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	f023 0302 	bic.w	r3, r3, #2
 8005654:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	697a      	ldr	r2, [r7, #20]
 800565c:	4313      	orrs	r3, r2
 800565e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a24      	ldr	r2, [pc, #144]	; (80056f4 <TIM_OC1_SetConfig+0xec>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_OC1_SetConfig+0x70>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a23      	ldr	r2, [pc, #140]	; (80056f8 <TIM_OC1_SetConfig+0xf0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_OC1_SetConfig+0x70>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a22      	ldr	r2, [pc, #136]	; (80056fc <TIM_OC1_SetConfig+0xf4>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d10c      	bne.n	8005692 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	f023 0308 	bic.w	r3, r3, #8
 800567e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	697a      	ldr	r2, [r7, #20]
 8005686:	4313      	orrs	r3, r2
 8005688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	f023 0304 	bic.w	r3, r3, #4
 8005690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	4a17      	ldr	r2, [pc, #92]	; (80056f4 <TIM_OC1_SetConfig+0xec>)
 8005696:	4293      	cmp	r3, r2
 8005698:	d007      	beq.n	80056aa <TIM_OC1_SetConfig+0xa2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a16      	ldr	r2, [pc, #88]	; (80056f8 <TIM_OC1_SetConfig+0xf0>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d003      	beq.n	80056aa <TIM_OC1_SetConfig+0xa2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a15      	ldr	r2, [pc, #84]	; (80056fc <TIM_OC1_SetConfig+0xf4>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d111      	bne.n	80056ce <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	695b      	ldr	r3, [r3, #20]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	4313      	orrs	r3, r2
 80056c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	699b      	ldr	r3, [r3, #24]
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68fa      	ldr	r2, [r7, #12]
 80056d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	697a      	ldr	r2, [r7, #20]
 80056e6:	621a      	str	r2, [r3, #32]
}
 80056e8:	bf00      	nop
 80056ea:	371c      	adds	r7, #28
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr
 80056f4:	40012c00 	.word	0x40012c00
 80056f8:	40014000 	.word	0x40014000
 80056fc:	40014400 	.word	0x40014400

08005700 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005700:	b480      	push	{r7}
 8005702:	b087      	sub	sp, #28
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	6a1b      	ldr	r3, [r3, #32]
 800570e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f023 0210 	bic.w	r2, r3, #16
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	685b      	ldr	r3, [r3, #4]
 8005720:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800572e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005732:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800573a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	021b      	lsls	r3, r3, #8
 8005742:	68fa      	ldr	r2, [r7, #12]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f023 0320 	bic.w	r3, r3, #32
 800574e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	011b      	lsls	r3, r3, #4
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a22      	ldr	r2, [pc, #136]	; (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d10d      	bne.n	8005780 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800576a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	011b      	lsls	r3, r3, #4
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a19      	ldr	r2, [pc, #100]	; (80057e8 <TIM_OC2_SetConfig+0xe8>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d007      	beq.n	8005798 <TIM_OC2_SetConfig+0x98>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a18      	ldr	r2, [pc, #96]	; (80057ec <TIM_OC2_SetConfig+0xec>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d003      	beq.n	8005798 <TIM_OC2_SetConfig+0x98>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <TIM_OC2_SetConfig+0xf0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d113      	bne.n	80057c0 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005798:	693b      	ldr	r3, [r7, #16]
 800579a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800579e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	695b      	ldr	r3, [r3, #20]
 80057ac:	009b      	lsls	r3, r3, #2
 80057ae:	693a      	ldr	r2, [r7, #16]
 80057b0:	4313      	orrs	r3, r2
 80057b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685a      	ldr	r2, [r3, #4]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	621a      	str	r2, [r3, #32]
}
 80057da:	bf00      	nop
 80057dc:	371c      	adds	r7, #28
 80057de:	46bd      	mov	sp, r7
 80057e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e4:	4770      	bx	lr
 80057e6:	bf00      	nop
 80057e8:	40012c00 	.word	0x40012c00
 80057ec:	40014000 	.word	0x40014000
 80057f0:	40014400 	.word	0x40014400

080057f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b087      	sub	sp, #28
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6a1b      	ldr	r3, [r3, #32]
 8005802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a1b      	ldr	r3, [r3, #32]
 8005808:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005826:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	f023 0303 	bic.w	r3, r3, #3
 800582e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005840:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	689b      	ldr	r3, [r3, #8]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	4313      	orrs	r3, r2
 800584c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a21      	ldr	r2, [pc, #132]	; (80058d8 <TIM_OC3_SetConfig+0xe4>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d10d      	bne.n	8005872 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800585c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	68db      	ldr	r3, [r3, #12]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	697a      	ldr	r2, [r7, #20]
 8005866:	4313      	orrs	r3, r2
 8005868:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005870:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <TIM_OC3_SetConfig+0xe4>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d007      	beq.n	800588a <TIM_OC3_SetConfig+0x96>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	4a17      	ldr	r2, [pc, #92]	; (80058dc <TIM_OC3_SetConfig+0xe8>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d003      	beq.n	800588a <TIM_OC3_SetConfig+0x96>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a16      	ldr	r2, [pc, #88]	; (80058e0 <TIM_OC3_SetConfig+0xec>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d113      	bne.n	80058b2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800588a:	693b      	ldr	r3, [r7, #16]
 800588c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005890:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005898:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	011b      	lsls	r3, r3, #4
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	699b      	ldr	r3, [r3, #24]
 80058aa:	011b      	lsls	r3, r3, #4
 80058ac:	693a      	ldr	r2, [r7, #16]
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	685a      	ldr	r2, [r3, #4]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	621a      	str	r2, [r3, #32]
}
 80058cc:	bf00      	nop
 80058ce:	371c      	adds	r7, #28
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr
 80058d8:	40012c00 	.word	0x40012c00
 80058dc:	40014000 	.word	0x40014000
 80058e0:	40014400 	.word	0x40014400

080058e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a1b      	ldr	r3, [r3, #32]
 80058f2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a1b      	ldr	r3, [r3, #32]
 80058f8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	69db      	ldr	r3, [r3, #28]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	021b      	lsls	r3, r3, #8
 8005926:	68fa      	ldr	r2, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005932:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	031b      	lsls	r3, r3, #12
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a14      	ldr	r2, [pc, #80]	; (8005994 <TIM_OC4_SetConfig+0xb0>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d007      	beq.n	8005958 <TIM_OC4_SetConfig+0x74>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a13      	ldr	r2, [pc, #76]	; (8005998 <TIM_OC4_SetConfig+0xb4>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d003      	beq.n	8005958 <TIM_OC4_SetConfig+0x74>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a12      	ldr	r2, [pc, #72]	; (800599c <TIM_OC4_SetConfig+0xb8>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d109      	bne.n	800596c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800595e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	695b      	ldr	r3, [r3, #20]
 8005964:	019b      	lsls	r3, r3, #6
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4313      	orrs	r3, r2
 800596a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	697a      	ldr	r2, [r7, #20]
 8005970:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68fa      	ldr	r2, [r7, #12]
 8005976:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685a      	ldr	r2, [r3, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	621a      	str	r2, [r3, #32]
}
 8005986:	bf00      	nop
 8005988:	371c      	adds	r7, #28
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	40012c00 	.word	0x40012c00
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400

080059a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	6a1b      	ldr	r3, [r3, #32]
 80059b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68fa      	ldr	r2, [r7, #12]
 80059da:	4313      	orrs	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80059e4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	689b      	ldr	r3, [r3, #8]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	693a      	ldr	r2, [r7, #16]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	4a13      	ldr	r2, [pc, #76]	; (8005a44 <TIM_OC5_SetConfig+0xa4>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d007      	beq.n	8005a0a <TIM_OC5_SetConfig+0x6a>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	4a12      	ldr	r2, [pc, #72]	; (8005a48 <TIM_OC5_SetConfig+0xa8>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d003      	beq.n	8005a0a <TIM_OC5_SetConfig+0x6a>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <TIM_OC5_SetConfig+0xac>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d109      	bne.n	8005a1e <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	021b      	lsls	r3, r3, #8
 8005a18:	697a      	ldr	r2, [r7, #20]
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	68fa      	ldr	r2, [r7, #12]
 8005a28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	685a      	ldr	r2, [r3, #4]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	693a      	ldr	r2, [r7, #16]
 8005a36:	621a      	str	r2, [r3, #32]
}
 8005a38:	bf00      	nop
 8005a3a:	371c      	adds	r7, #28
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr
 8005a44:	40012c00 	.word	0x40012c00
 8005a48:	40014000 	.word	0x40014000
 8005a4c:	40014400 	.word	0x40014400

08005a50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	6a1b      	ldr	r3, [r3, #32]
 8005a64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	021b      	lsls	r3, r3, #8
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	051b      	lsls	r3, r3, #20
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	4a14      	ldr	r2, [pc, #80]	; (8005af8 <TIM_OC6_SetConfig+0xa8>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d007      	beq.n	8005abc <TIM_OC6_SetConfig+0x6c>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	4a13      	ldr	r2, [pc, #76]	; (8005afc <TIM_OC6_SetConfig+0xac>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <TIM_OC6_SetConfig+0x6c>
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4a12      	ldr	r2, [pc, #72]	; (8005b00 <TIM_OC6_SetConfig+0xb0>)
 8005ab8:	4293      	cmp	r3, r2
 8005aba:	d109      	bne.n	8005ad0 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ac2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	695b      	ldr	r3, [r3, #20]
 8005ac8:	029b      	lsls	r3, r3, #10
 8005aca:	697a      	ldr	r2, [r7, #20]
 8005acc:	4313      	orrs	r3, r2
 8005ace:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	697a      	ldr	r2, [r7, #20]
 8005ad4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	68fa      	ldr	r2, [r7, #12]
 8005ada:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	685a      	ldr	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	621a      	str	r2, [r3, #32]
}
 8005aea:	bf00      	nop
 8005aec:	371c      	adds	r7, #28
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr
 8005af6:	bf00      	nop
 8005af8:	40012c00 	.word	0x40012c00
 8005afc:	40014000 	.word	0x40014000
 8005b00:	40014400 	.word	0x40014400

08005b04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	6a1b      	ldr	r3, [r3, #32]
 8005b1a:	f023 0201 	bic.w	r2, r3, #1
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b28:	693b      	ldr	r3, [r7, #16]
 8005b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	011b      	lsls	r3, r3, #4
 8005b34:	693a      	ldr	r2, [r7, #16]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	f023 030a 	bic.w	r3, r3, #10
 8005b40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	693a      	ldr	r2, [r7, #16]
 8005b4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	621a      	str	r2, [r3, #32]
}
 8005b56:	bf00      	nop
 8005b58:	371c      	adds	r7, #28
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b087      	sub	sp, #28
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a1b      	ldr	r3, [r3, #32]
 8005b72:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	f023 0210 	bic.w	r2, r3, #16
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	699b      	ldr	r3, [r3, #24]
 8005b84:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b8c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	031b      	lsls	r3, r3, #12
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	4313      	orrs	r3, r2
 8005b96:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b9e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	697a      	ldr	r2, [r7, #20]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bc2:	b480      	push	{r7}
 8005bc4:	b085      	sub	sp, #20
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	f043 0307 	orr.w	r3, r3, #7
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	609a      	str	r2, [r3, #8]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b087      	sub	sp, #28
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c0c:	697b      	ldr	r3, [r7, #20]
 8005c0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c12:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	021a      	lsls	r2, r3, #8
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	431a      	orrs	r2, r3
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	697a      	ldr	r2, [r7, #20]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	697a      	ldr	r2, [r7, #20]
 8005c2a:	609a      	str	r2, [r3, #8]
}
 8005c2c:	bf00      	nop
 8005c2e:	371c      	adds	r7, #28
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d101      	bne.n	8005c50 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	e04f      	b.n	8005cf0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	2201      	movs	r2, #1
 8005c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2202      	movs	r2, #2
 8005c5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a21      	ldr	r2, [pc, #132]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005c76:	4293      	cmp	r3, r2
 8005c78:	d108      	bne.n	8005c8c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005c80:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	68fa      	ldr	r2, [r7, #12]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	68fa      	ldr	r2, [r7, #12]
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	4a14      	ldr	r2, [pc, #80]	; (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d009      	beq.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cb8:	d004      	beq.n	8005cc4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4a10      	ldr	r2, [pc, #64]	; (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d10c      	bne.n	8005cde <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005cca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	68ba      	ldr	r2, [r7, #8]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cee:	2300      	movs	r3, #0
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40014000 	.word	0x40014000

08005d04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b083      	sub	sp, #12
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d0c:	bf00      	nop
 8005d0e:	370c      	adds	r7, #12
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b083      	sub	sp, #12
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d20:	bf00      	nop
 8005d22:	370c      	adds	r7, #12
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr

08005d2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e040      	b.n	8005dd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d106      	bne.n	8005d68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f7fb f91e 	bl	8000fa4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2224      	movs	r2, #36	; 0x24
 8005d6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f022 0201 	bic.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d002      	beq.n	8005d8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f000 fa54 	bl	8006234 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f825 	bl	8005ddc <UART_SetConfig>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	e01b      	b.n	8005dd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005daa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005dcc:	6878      	ldr	r0, [r7, #4]
 8005dce:	f000 fad3 	bl	8006378 <UART_CheckIdleState>
 8005dd2:	4603      	mov	r3, r0
}
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	3708      	adds	r7, #8
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	bd80      	pop	{r7, pc}

08005ddc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005de0:	b08a      	sub	sp, #40	; 0x28
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	431a      	orrs	r2, r3
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	69db      	ldr	r3, [r3, #28]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4bb4      	ldr	r3, [pc, #720]	; (80060dc <UART_SetConfig+0x300>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	68fa      	ldr	r2, [r7, #12]
 8005e10:	6812      	ldr	r2, [r2, #0]
 8005e12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005e14:	430b      	orrs	r3, r1
 8005e16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	68da      	ldr	r2, [r3, #12]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	4aa9      	ldr	r2, [pc, #676]	; (80060e0 <UART_SetConfig+0x304>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d004      	beq.n	8005e48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1b      	ldr	r3, [r3, #32]
 8005e42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e44:	4313      	orrs	r3, r2
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e58:	430a      	orrs	r2, r1
 8005e5a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4aa0      	ldr	r2, [pc, #640]	; (80060e4 <UART_SetConfig+0x308>)
 8005e62:	4293      	cmp	r3, r2
 8005e64:	d126      	bne.n	8005eb4 <UART_SetConfig+0xd8>
 8005e66:	4ba0      	ldr	r3, [pc, #640]	; (80060e8 <UART_SetConfig+0x30c>)
 8005e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e6c:	f003 0303 	and.w	r3, r3, #3
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d81b      	bhi.n	8005eac <UART_SetConfig+0xd0>
 8005e74:	a201      	add	r2, pc, #4	; (adr r2, 8005e7c <UART_SetConfig+0xa0>)
 8005e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7a:	bf00      	nop
 8005e7c:	08005e8d 	.word	0x08005e8d
 8005e80:	08005e9d 	.word	0x08005e9d
 8005e84:	08005e95 	.word	0x08005e95
 8005e88:	08005ea5 	.word	0x08005ea5
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e92:	e080      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005e94:	2302      	movs	r3, #2
 8005e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005e9a:	e07c      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005e9c:	2304      	movs	r3, #4
 8005e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005ea2:	e078      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005ea4:	2308      	movs	r3, #8
 8005ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eaa:	e074      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005eac:	2310      	movs	r3, #16
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005eb2:	e070      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a8c      	ldr	r2, [pc, #560]	; (80060ec <UART_SetConfig+0x310>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d138      	bne.n	8005f30 <UART_SetConfig+0x154>
 8005ebe:	4b8a      	ldr	r3, [pc, #552]	; (80060e8 <UART_SetConfig+0x30c>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ec4:	f003 030c 	and.w	r3, r3, #12
 8005ec8:	2b0c      	cmp	r3, #12
 8005eca:	d82d      	bhi.n	8005f28 <UART_SetConfig+0x14c>
 8005ecc:	a201      	add	r2, pc, #4	; (adr r2, 8005ed4 <UART_SetConfig+0xf8>)
 8005ece:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ed2:	bf00      	nop
 8005ed4:	08005f09 	.word	0x08005f09
 8005ed8:	08005f29 	.word	0x08005f29
 8005edc:	08005f29 	.word	0x08005f29
 8005ee0:	08005f29 	.word	0x08005f29
 8005ee4:	08005f19 	.word	0x08005f19
 8005ee8:	08005f29 	.word	0x08005f29
 8005eec:	08005f29 	.word	0x08005f29
 8005ef0:	08005f29 	.word	0x08005f29
 8005ef4:	08005f11 	.word	0x08005f11
 8005ef8:	08005f29 	.word	0x08005f29
 8005efc:	08005f29 	.word	0x08005f29
 8005f00:	08005f29 	.word	0x08005f29
 8005f04:	08005f21 	.word	0x08005f21
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f0e:	e042      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f10:	2302      	movs	r3, #2
 8005f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f16:	e03e      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f1e:	e03a      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f26:	e036      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f2e:	e032      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a6a      	ldr	r2, [pc, #424]	; (80060e0 <UART_SetConfig+0x304>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d12a      	bne.n	8005f90 <UART_SetConfig+0x1b4>
 8005f3a:	4b6b      	ldr	r3, [pc, #428]	; (80060e8 <UART_SetConfig+0x30c>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f44:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f48:	d01a      	beq.n	8005f80 <UART_SetConfig+0x1a4>
 8005f4a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f4e:	d81b      	bhi.n	8005f88 <UART_SetConfig+0x1ac>
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f54:	d00c      	beq.n	8005f70 <UART_SetConfig+0x194>
 8005f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5a:	d815      	bhi.n	8005f88 <UART_SetConfig+0x1ac>
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <UART_SetConfig+0x18c>
 8005f60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f64:	d008      	beq.n	8005f78 <UART_SetConfig+0x19c>
 8005f66:	e00f      	b.n	8005f88 <UART_SetConfig+0x1ac>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f6e:	e012      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f70:	2302      	movs	r3, #2
 8005f72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f76:	e00e      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f78:	2304      	movs	r3, #4
 8005f7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f7e:	e00a      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f80:	2308      	movs	r3, #8
 8005f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f86:	e006      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f88:	2310      	movs	r3, #16
 8005f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005f8e:	e002      	b.n	8005f96 <UART_SetConfig+0x1ba>
 8005f90:	2310      	movs	r3, #16
 8005f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a51      	ldr	r2, [pc, #324]	; (80060e0 <UART_SetConfig+0x304>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d17a      	bne.n	8006096 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fa0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d824      	bhi.n	8005ff2 <UART_SetConfig+0x216>
 8005fa8:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x1d4>)
 8005faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fae:	bf00      	nop
 8005fb0:	08005fd5 	.word	0x08005fd5
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fdd 	.word	0x08005fdd
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005fe3 	.word	0x08005fe3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005ff3 	.word	0x08005ff3
 8005fcc:	08005ff3 	.word	0x08005ff3
 8005fd0:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fd4:	f7fe fc00 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 8005fd8:	61f8      	str	r0, [r7, #28]
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b44      	ldr	r3, [pc, #272]	; (80060f0 <UART_SetConfig+0x314>)
 8005fde:	61fb      	str	r3, [r7, #28]
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fe fb61 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8005fe6:	61f8      	str	r0, [r7, #28]
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	61fb      	str	r3, [r7, #28]
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8005ffc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ffe:	69fb      	ldr	r3, [r7, #28]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8107 	beq.w	8006214 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	685a      	ldr	r2, [r3, #4]
 800600a:	4613      	mov	r3, r2
 800600c:	005b      	lsls	r3, r3, #1
 800600e:	4413      	add	r3, r2
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	429a      	cmp	r2, r3
 8006014:	d305      	bcc.n	8006022 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800601c:	69fa      	ldr	r2, [r7, #28]
 800601e:	429a      	cmp	r2, r3
 8006020:	d903      	bls.n	800602a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006028:	e0f4      	b.n	8006214 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	2200      	movs	r2, #0
 800602e:	461c      	mov	r4, r3
 8006030:	4615      	mov	r5, r2
 8006032:	f04f 0200 	mov.w	r2, #0
 8006036:	f04f 0300 	mov.w	r3, #0
 800603a:	022b      	lsls	r3, r5, #8
 800603c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006040:	0222      	lsls	r2, r4, #8
 8006042:	68f9      	ldr	r1, [r7, #12]
 8006044:	6849      	ldr	r1, [r1, #4]
 8006046:	0849      	lsrs	r1, r1, #1
 8006048:	2000      	movs	r0, #0
 800604a:	4688      	mov	r8, r1
 800604c:	4681      	mov	r9, r0
 800604e:	eb12 0a08 	adds.w	sl, r2, r8
 8006052:	eb43 0b09 	adc.w	fp, r3, r9
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	603b      	str	r3, [r7, #0]
 800605e:	607a      	str	r2, [r7, #4]
 8006060:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006064:	4650      	mov	r0, sl
 8006066:	4659      	mov	r1, fp
 8006068:	f7fa f8b0 	bl	80001cc <__aeabi_uldivmod>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4613      	mov	r3, r2
 8006072:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800607a:	d308      	bcc.n	800608e <UART_SetConfig+0x2b2>
 800607c:	69bb      	ldr	r3, [r7, #24]
 800607e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006082:	d204      	bcs.n	800608e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	69ba      	ldr	r2, [r7, #24]
 800608a:	60da      	str	r2, [r3, #12]
 800608c:	e0c2      	b.n	8006214 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006094:	e0be      	b.n	8006214 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609e:	d16a      	bne.n	8006176 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80060a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80060a4:	2b08      	cmp	r3, #8
 80060a6:	d834      	bhi.n	8006112 <UART_SetConfig+0x336>
 80060a8:	a201      	add	r2, pc, #4	; (adr r2, 80060b0 <UART_SetConfig+0x2d4>)
 80060aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ae:	bf00      	nop
 80060b0:	080060d5 	.word	0x080060d5
 80060b4:	080060f5 	.word	0x080060f5
 80060b8:	080060fd 	.word	0x080060fd
 80060bc:	08006113 	.word	0x08006113
 80060c0:	08006103 	.word	0x08006103
 80060c4:	08006113 	.word	0x08006113
 80060c8:	08006113 	.word	0x08006113
 80060cc:	08006113 	.word	0x08006113
 80060d0:	0800610b 	.word	0x0800610b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060d4:	f7fe fb80 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80060d8:	61f8      	str	r0, [r7, #28]
        break;
 80060da:	e020      	b.n	800611e <UART_SetConfig+0x342>
 80060dc:	efff69f3 	.word	0xefff69f3
 80060e0:	40008000 	.word	0x40008000
 80060e4:	40013800 	.word	0x40013800
 80060e8:	40021000 	.word	0x40021000
 80060ec:	40004400 	.word	0x40004400
 80060f0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060f4:	f7fe fb86 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80060f8:	61f8      	str	r0, [r7, #28]
        break;
 80060fa:	e010      	b.n	800611e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060fc:	4b4c      	ldr	r3, [pc, #304]	; (8006230 <UART_SetConfig+0x454>)
 80060fe:	61fb      	str	r3, [r7, #28]
        break;
 8006100:	e00d      	b.n	800611e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006102:	f7fe fad1 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 8006106:	61f8      	str	r0, [r7, #28]
        break;
 8006108:	e009      	b.n	800611e <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800610a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610e:	61fb      	str	r3, [r7, #28]
        break;
 8006110:	e005      	b.n	800611e <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8006112:	2300      	movs	r3, #0
 8006114:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800611c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800611e:	69fb      	ldr	r3, [r7, #28]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d077      	beq.n	8006214 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	005a      	lsls	r2, r3, #1
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	085b      	lsrs	r3, r3, #1
 800612e:	441a      	add	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800613a:	69bb      	ldr	r3, [r7, #24]
 800613c:	2b0f      	cmp	r3, #15
 800613e:	d916      	bls.n	800616e <UART_SetConfig+0x392>
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006146:	d212      	bcs.n	800616e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	b29b      	uxth	r3, r3
 800614c:	f023 030f 	bic.w	r3, r3, #15
 8006150:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	085b      	lsrs	r3, r3, #1
 8006156:	b29b      	uxth	r3, r3
 8006158:	f003 0307 	and.w	r3, r3, #7
 800615c:	b29a      	uxth	r2, r3
 800615e:	8afb      	ldrh	r3, [r7, #22]
 8006160:	4313      	orrs	r3, r2
 8006162:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	8afa      	ldrh	r2, [r7, #22]
 800616a:	60da      	str	r2, [r3, #12]
 800616c:	e052      	b.n	8006214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006174:	e04e      	b.n	8006214 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006176:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800617a:	2b08      	cmp	r3, #8
 800617c:	d827      	bhi.n	80061ce <UART_SetConfig+0x3f2>
 800617e:	a201      	add	r2, pc, #4	; (adr r2, 8006184 <UART_SetConfig+0x3a8>)
 8006180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006184:	080061a9 	.word	0x080061a9
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061b9 	.word	0x080061b9
 8006190:	080061cf 	.word	0x080061cf
 8006194:	080061bf 	.word	0x080061bf
 8006198:	080061cf 	.word	0x080061cf
 800619c:	080061cf 	.word	0x080061cf
 80061a0:	080061cf 	.word	0x080061cf
 80061a4:	080061c7 	.word	0x080061c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061a8:	f7fe fb16 	bl	80047d8 <HAL_RCC_GetPCLK1Freq>
 80061ac:	61f8      	str	r0, [r7, #28]
        break;
 80061ae:	e014      	b.n	80061da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b0:	f7fe fb28 	bl	8004804 <HAL_RCC_GetPCLK2Freq>
 80061b4:	61f8      	str	r0, [r7, #28]
        break;
 80061b6:	e010      	b.n	80061da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b1d      	ldr	r3, [pc, #116]	; (8006230 <UART_SetConfig+0x454>)
 80061ba:	61fb      	str	r3, [r7, #28]
        break;
 80061bc:	e00d      	b.n	80061da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fe fa73 	bl	80046a8 <HAL_RCC_GetSysClockFreq>
 80061c2:	61f8      	str	r0, [r7, #28]
        break;
 80061c4:	e009      	b.n	80061da <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ca:	61fb      	str	r3, [r7, #28]
        break;
 80061cc:	e005      	b.n	80061da <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80061ce:	2300      	movs	r3, #0
 80061d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80061d2:	2301      	movs	r3, #1
 80061d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80061d8:	bf00      	nop
    }

    if (pclk != 0U)
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d019      	beq.n	8006214 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	085a      	lsrs	r2, r3, #1
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	441a      	add	r2, r3
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80061f2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061f4:	69bb      	ldr	r3, [r7, #24]
 80061f6:	2b0f      	cmp	r3, #15
 80061f8:	d909      	bls.n	800620e <UART_SetConfig+0x432>
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006200:	d205      	bcs.n	800620e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006202:	69bb      	ldr	r3, [r7, #24]
 8006204:	b29a      	uxth	r2, r3
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	60da      	str	r2, [r3, #12]
 800620c:	e002      	b.n	8006214 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006220:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006224:	4618      	mov	r0, r3
 8006226:	3728      	adds	r7, #40	; 0x28
 8006228:	46bd      	mov	sp, r7
 800622a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800622e:	bf00      	nop
 8006230:	00f42400 	.word	0x00f42400

08006234 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006234:	b480      	push	{r7}
 8006236:	b083      	sub	sp, #12
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	f003 0308 	and.w	r3, r3, #8
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006262:	f003 0301 	and.w	r3, r3, #1
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006284:	f003 0302 	and.w	r3, r3, #2
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062a6:	f003 0304 	and.w	r3, r3, #4
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00a      	beq.n	80062c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	430a      	orrs	r2, r1
 80062c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d00a      	beq.n	80062e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	430a      	orrs	r2, r1
 80062e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ea:	f003 0320 	and.w	r3, r3, #32
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00a      	beq.n	8006308 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	430a      	orrs	r2, r1
 8006306:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006310:	2b00      	cmp	r3, #0
 8006312:	d01a      	beq.n	800634a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	685b      	ldr	r3, [r3, #4]
 800631a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	430a      	orrs	r2, r1
 8006328:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800632e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006332:	d10a      	bne.n	800634a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	430a      	orrs	r2, r1
 8006348:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006352:	2b00      	cmp	r3, #0
 8006354:	d00a      	beq.n	800636c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	430a      	orrs	r2, r1
 800636a:	605a      	str	r2, [r3, #4]
  }
}
 800636c:	bf00      	nop
 800636e:	370c      	adds	r7, #12
 8006370:	46bd      	mov	sp, r7
 8006372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006376:	4770      	bx	lr

08006378 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b098      	sub	sp, #96	; 0x60
 800637c:	af02      	add	r7, sp, #8
 800637e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006388:	f7fa ff08 	bl	800119c <HAL_GetTick>
 800638c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0308 	and.w	r3, r3, #8
 8006398:	2b08      	cmp	r3, #8
 800639a:	d12e      	bne.n	80063fa <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800639c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063a0:	9300      	str	r3, [sp, #0]
 80063a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063a4:	2200      	movs	r2, #0
 80063a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 f88c 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 80063b0:	4603      	mov	r3, r0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d021      	beq.n	80063fa <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063be:	e853 3f00 	ldrex	r3, [r3]
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80063c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80063ca:	653b      	str	r3, [r7, #80]	; 0x50
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	461a      	mov	r2, r3
 80063d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d4:	647b      	str	r3, [r7, #68]	; 0x44
 80063d6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063d8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80063da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80063dc:	e841 2300 	strex	r3, r2, [r1]
 80063e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80063e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d1e6      	bne.n	80063b6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063f6:	2303      	movs	r3, #3
 80063f8:	e062      	b.n	80064c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b04      	cmp	r3, #4
 8006406:	d149      	bne.n	800649c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006408:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006410:	2200      	movs	r2, #0
 8006412:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f856 	bl	80064c8 <UART_WaitOnFlagUntilTimeout>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d03c      	beq.n	800649c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	e853 3f00 	ldrex	r3, [r3]
 800642e:	623b      	str	r3, [r7, #32]
   return(result);
 8006430:	6a3b      	ldr	r3, [r7, #32]
 8006432:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006436:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	461a      	mov	r2, r3
 800643e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006440:	633b      	str	r3, [r7, #48]	; 0x30
 8006442:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006444:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006446:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006448:	e841 2300 	strex	r3, r2, [r1]
 800644c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800644e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1e6      	bne.n	8006422 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	3308      	adds	r3, #8
 800645a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	e853 3f00 	ldrex	r3, [r3]
 8006462:	60fb      	str	r3, [r7, #12]
   return(result);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0301 	bic.w	r3, r3, #1
 800646a:	64bb      	str	r3, [r7, #72]	; 0x48
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	3308      	adds	r3, #8
 8006472:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006474:	61fa      	str	r2, [r7, #28]
 8006476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006478:	69b9      	ldr	r1, [r7, #24]
 800647a:	69fa      	ldr	r2, [r7, #28]
 800647c:	e841 2300 	strex	r3, r2, [r1]
 8006480:	617b      	str	r3, [r7, #20]
   return(result);
 8006482:	697b      	ldr	r3, [r7, #20]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d1e5      	bne.n	8006454 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2220      	movs	r2, #32
 800648c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e011      	b.n	80064c0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2220      	movs	r2, #32
 80064a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3758      	adds	r7, #88	; 0x58
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064d8:	e049      	b.n	800656e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e0:	d045      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064e2:	f7fa fe5b 	bl	800119c <HAL_GetTick>
 80064e6:	4602      	mov	r2, r0
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	1ad3      	subs	r3, r2, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d302      	bcc.n	80064f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80064f2:	69bb      	ldr	r3, [r7, #24]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d101      	bne.n	80064fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064f8:	2303      	movs	r3, #3
 80064fa:	e048      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d031      	beq.n	800656e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	69db      	ldr	r3, [r3, #28]
 8006510:	f003 0308 	and.w	r3, r3, #8
 8006514:	2b08      	cmp	r3, #8
 8006516:	d110      	bne.n	800653a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2208      	movs	r2, #8
 800651e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006520:	68f8      	ldr	r0, [r7, #12]
 8006522:	f000 f838 	bl	8006596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2208      	movs	r2, #8
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2200      	movs	r2, #0
 8006532:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e029      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	69db      	ldr	r3, [r3, #28]
 8006540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006548:	d111      	bne.n	800656e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006552:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 f81e 	bl	8006596 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2220      	movs	r2, #32
 800655e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	2200      	movs	r2, #0
 8006566:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800656a:	2303      	movs	r3, #3
 800656c:	e00f      	b.n	800658e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	4013      	ands	r3, r2
 8006578:	68ba      	ldr	r2, [r7, #8]
 800657a:	429a      	cmp	r2, r3
 800657c:	bf0c      	ite	eq
 800657e:	2301      	moveq	r3, #1
 8006580:	2300      	movne	r3, #0
 8006582:	b2db      	uxtb	r3, r3
 8006584:	461a      	mov	r2, r3
 8006586:	79fb      	ldrb	r3, [r7, #7]
 8006588:	429a      	cmp	r2, r3
 800658a:	d0a6      	beq.n	80064da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006596:	b480      	push	{r7}
 8006598:	b095      	sub	sp, #84	; 0x54
 800659a:	af00      	add	r7, sp, #0
 800659c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	461a      	mov	r2, r3
 80065ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065bc:	643b      	str	r3, [r7, #64]	; 0x40
 80065be:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065c2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e6      	bne.n	800659e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	3308      	adds	r3, #8
 80065d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	e853 3f00 	ldrex	r3, [r3]
 80065de:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	3308      	adds	r3, #8
 80065ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f8:	e841 2300 	strex	r3, r2, [r1]
 80065fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d1e5      	bne.n	80065d0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006608:	2b01      	cmp	r3, #1
 800660a:	d118      	bne.n	800663e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	e853 3f00 	ldrex	r3, [r3]
 8006618:	60bb      	str	r3, [r7, #8]
   return(result);
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	f023 0310 	bic.w	r3, r3, #16
 8006620:	647b      	str	r3, [r7, #68]	; 0x44
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	461a      	mov	r2, r3
 8006628:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662e:	6979      	ldr	r1, [r7, #20]
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	e841 2300 	strex	r3, r2, [r1]
 8006636:	613b      	str	r3, [r7, #16]
   return(result);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d1e6      	bne.n	800660c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2220      	movs	r2, #32
 8006642:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2200      	movs	r2, #0
 800664a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2200      	movs	r2, #0
 8006650:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006652:	bf00      	nop
 8006654:	3754      	adds	r7, #84	; 0x54
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <memset>:
 800665e:	4402      	add	r2, r0
 8006660:	4603      	mov	r3, r0
 8006662:	4293      	cmp	r3, r2
 8006664:	d100      	bne.n	8006668 <memset+0xa>
 8006666:	4770      	bx	lr
 8006668:	f803 1b01 	strb.w	r1, [r3], #1
 800666c:	e7f9      	b.n	8006662 <memset+0x4>
	...

08006670 <__libc_init_array>:
 8006670:	b570      	push	{r4, r5, r6, lr}
 8006672:	4d0d      	ldr	r5, [pc, #52]	; (80066a8 <__libc_init_array+0x38>)
 8006674:	4c0d      	ldr	r4, [pc, #52]	; (80066ac <__libc_init_array+0x3c>)
 8006676:	1b64      	subs	r4, r4, r5
 8006678:	10a4      	asrs	r4, r4, #2
 800667a:	2600      	movs	r6, #0
 800667c:	42a6      	cmp	r6, r4
 800667e:	d109      	bne.n	8006694 <__libc_init_array+0x24>
 8006680:	4d0b      	ldr	r5, [pc, #44]	; (80066b0 <__libc_init_array+0x40>)
 8006682:	4c0c      	ldr	r4, [pc, #48]	; (80066b4 <__libc_init_array+0x44>)
 8006684:	f000 f818 	bl	80066b8 <_init>
 8006688:	1b64      	subs	r4, r4, r5
 800668a:	10a4      	asrs	r4, r4, #2
 800668c:	2600      	movs	r6, #0
 800668e:	42a6      	cmp	r6, r4
 8006690:	d105      	bne.n	800669e <__libc_init_array+0x2e>
 8006692:	bd70      	pop	{r4, r5, r6, pc}
 8006694:	f855 3b04 	ldr.w	r3, [r5], #4
 8006698:	4798      	blx	r3
 800669a:	3601      	adds	r6, #1
 800669c:	e7ee      	b.n	800667c <__libc_init_array+0xc>
 800669e:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a2:	4798      	blx	r3
 80066a4:	3601      	adds	r6, #1
 80066a6:	e7f2      	b.n	800668e <__libc_init_array+0x1e>
 80066a8:	08006720 	.word	0x08006720
 80066ac:	08006720 	.word	0x08006720
 80066b0:	08006720 	.word	0x08006720
 80066b4:	08006724 	.word	0x08006724

080066b8 <_init>:
 80066b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ba:	bf00      	nop
 80066bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066be:	bc08      	pop	{r3}
 80066c0:	469e      	mov	lr, r3
 80066c2:	4770      	bx	lr

080066c4 <_fini>:
 80066c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c6:	bf00      	nop
 80066c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ca:	bc08      	pop	{r3}
 80066cc:	469e      	mov	lr, r3
 80066ce:	4770      	bx	lr
