
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063fc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d8  0800658c  0800658c  0001658c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006664  08006664  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800666c  0800666c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800666c  0800666c  0001666c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08006674  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  2000005c  080066d0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  080066d0  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013059  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000280d  00000000  00000000  00033128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001088  00000000  00000000  00035938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cc9  00000000  00000000  000369c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022255  00000000  00000000  00037689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e3b  00000000  00000000  000598de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2e22  00000000  00000000  0006d719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004aac  00000000  00000000  0014053c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000085  00000000  00000000  00144fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006574 	.word	0x08006574

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08006574 	.word	0x08006574

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t convCompleted = 0;
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000586:	2201      	movs	r2, #1
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	370c      	adds	r7, #12
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	200002b4 	.word	0x200002b4

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b082      	sub	sp, #8
 80005a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a2:	f000 fd96 	bl	80010d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a6:	f000 f90b 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005aa:	f000 fa7d 	bl	8000aa8 <MX_GPIO_Init>
  MX_DMA_Init();
 80005ae:	f000 fa4d 	bl	8000a4c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80005b2:	f000 fa1b 	bl	80009ec <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80005b6:	f000 f965 	bl	8000884 <MX_ADC1_Init>
  MX_I2C1_Init();
 80005ba:	f000 f9d7 	bl	800096c <MX_I2C1_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80005be:	2202      	movs	r2, #2
 80005c0:	496b      	ldr	r1, [pc, #428]	; (8000770 <main+0x1d4>)
 80005c2:	486c      	ldr	r0, [pc, #432]	; (8000774 <main+0x1d8>)
 80005c4:	f001 f93a 	bl	800183c <HAL_ADC_Start_DMA>
	  while(!convCompleted);
 80005c8:	bf00      	nop
 80005ca:	4b6b      	ldr	r3, [pc, #428]	; (8000778 <main+0x1dc>)
 80005cc:	781b      	ldrb	r3, [r3, #0]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d0fb      	beq.n	80005ca <main+0x2e>

	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005d2:	2300      	movs	r3, #0
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	e00a      	b.n	80005ee <main+0x52>
		  rawE = (uint16_t) rawValues[0];
 80005d8:	4b65      	ldr	r3, [pc, #404]	; (8000770 <main+0x1d4>)
 80005da:	881a      	ldrh	r2, [r3, #0]
 80005dc:	4b67      	ldr	r3, [pc, #412]	; (800077c <main+0x1e0>)
 80005de:	801a      	strh	r2, [r3, #0]
		  rawF = (uint16_t) rawValues[1];
 80005e0:	4b63      	ldr	r3, [pc, #396]	; (8000770 <main+0x1d4>)
 80005e2:	885a      	ldrh	r2, [r3, #2]
 80005e4:	4b66      	ldr	r3, [pc, #408]	; (8000780 <main+0x1e4>)
 80005e6:	801a      	strh	r2, [r3, #0]
	  for(uint8_t i=0; i<hadc1.Init.NbrOfConversion; i++){
 80005e8:	79fb      	ldrb	r3, [r7, #7]
 80005ea:	3301      	adds	r3, #1
 80005ec:	71fb      	strb	r3, [r7, #7]
 80005ee:	79fa      	ldrb	r2, [r7, #7]
 80005f0:	4b60      	ldr	r3, [pc, #384]	; (8000774 <main+0x1d8>)
 80005f2:	69db      	ldr	r3, [r3, #28]
 80005f4:	429a      	cmp	r2, r3
 80005f6:	d3ef      	bcc.n	80005d8 <main+0x3c>
	  }

	  voltageE = unitValue * rawE;
 80005f8:	4b60      	ldr	r3, [pc, #384]	; (800077c <main+0x1e0>)
 80005fa:	881b      	ldrh	r3, [r3, #0]
 80005fc:	ee07 3a90 	vmov	s15, r3
 8000600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000604:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000784 <main+0x1e8>
 8000608:	ee67 7a87 	vmul.f32	s15, s15, s14
 800060c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000610:	ee17 3a90 	vmov	r3, s15
 8000614:	b29a      	uxth	r2, r3
 8000616:	4b5c      	ldr	r3, [pc, #368]	; (8000788 <main+0x1ec>)
 8000618:	801a      	strh	r2, [r3, #0]
	  voltageF = unitValue * rawF;
 800061a:	4b59      	ldr	r3, [pc, #356]	; (8000780 <main+0x1e4>)
 800061c:	881b      	ldrh	r3, [r3, #0]
 800061e:	ee07 3a90 	vmov	s15, r3
 8000622:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000626:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8000784 <main+0x1e8>
 800062a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800062e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000632:	ee17 3a90 	vmov	r3, s15
 8000636:	b29a      	uxth	r2, r3
 8000638:	4b54      	ldr	r3, [pc, #336]	; (800078c <main+0x1f0>)
 800063a:	801a      	strh	r2, [r3, #0]

	  currentE = (voltageE - offset) * sensitivity;
 800063c:	4b52      	ldr	r3, [pc, #328]	; (8000788 <main+0x1ec>)
 800063e:	881b      	ldrh	r3, [r3, #0]
 8000640:	ee07 3a90 	vmov	s15, r3
 8000644:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000648:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8000790 <main+0x1f4>
 800064c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000650:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8000794 <main+0x1f8>
 8000654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000658:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800065c:	ee17 3a90 	vmov	r3, s15
 8000660:	b29a      	uxth	r2, r3
 8000662:	4b4d      	ldr	r3, [pc, #308]	; (8000798 <main+0x1fc>)
 8000664:	801a      	strh	r2, [r3, #0]
	  currentF = (voltageF - offset) * sensitivity;
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <main+0x1f0>)
 8000668:	881b      	ldrh	r3, [r3, #0]
 800066a:	ee07 3a90 	vmov	s15, r3
 800066e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000672:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8000790 <main+0x1f4>
 8000676:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800067a:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8000794 <main+0x1f8>
 800067e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000682:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000686:	ee17 3a90 	vmov	r3, s15
 800068a:	b29a      	uxth	r2, r3
 800068c:	4b43      	ldr	r3, [pc, #268]	; (800079c <main+0x200>)
 800068e:	801a      	strh	r2, [r3, #0]

	  sprintf(msg, "rawE: %hu ", rawE);
 8000690:	4b3a      	ldr	r3, [pc, #232]	; (800077c <main+0x1e0>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	461a      	mov	r2, r3
 8000696:	4942      	ldr	r1, [pc, #264]	; (80007a0 <main+0x204>)
 8000698:	4842      	ldr	r0, [pc, #264]	; (80007a4 <main+0x208>)
 800069a:	f005 fac7 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800069e:	4841      	ldr	r0, [pc, #260]	; (80007a4 <main+0x208>)
 80006a0:	f7ff fd96 	bl	80001d0 <strlen>
 80006a4:	4603      	mov	r3, r0
 80006a6:	b29a      	uxth	r2, r3
 80006a8:	f04f 33ff 	mov.w	r3, #4294967295
 80006ac:	493d      	ldr	r1, [pc, #244]	; (80007a4 <main+0x208>)
 80006ae:	483e      	ldr	r0, [pc, #248]	; (80007a8 <main+0x20c>)
 80006b0:	f004 fdf0 	bl	8005294 <HAL_UART_Transmit>

	  sprintf(msg, "\trawF: %hu ", rawF);
 80006b4:	4b32      	ldr	r3, [pc, #200]	; (8000780 <main+0x1e4>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	493c      	ldr	r1, [pc, #240]	; (80007ac <main+0x210>)
 80006bc:	4839      	ldr	r0, [pc, #228]	; (80007a4 <main+0x208>)
 80006be:	f005 fab5 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);\
 80006c2:	4838      	ldr	r0, [pc, #224]	; (80007a4 <main+0x208>)
 80006c4:	f7ff fd84 	bl	80001d0 <strlen>
 80006c8:	4603      	mov	r3, r0
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	f04f 33ff 	mov.w	r3, #4294967295
 80006d0:	4934      	ldr	r1, [pc, #208]	; (80007a4 <main+0x208>)
 80006d2:	4835      	ldr	r0, [pc, #212]	; (80007a8 <main+0x20c>)
 80006d4:	f004 fdde 	bl	8005294 <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageE: %hu ", voltageE);
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <main+0x1ec>)
 80006da:	881b      	ldrh	r3, [r3, #0]
 80006dc:	461a      	mov	r2, r3
 80006de:	4934      	ldr	r1, [pc, #208]	; (80007b0 <main+0x214>)
 80006e0:	4830      	ldr	r0, [pc, #192]	; (80007a4 <main+0x208>)
 80006e2:	f005 faa3 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 80006e6:	482f      	ldr	r0, [pc, #188]	; (80007a4 <main+0x208>)
 80006e8:	f7ff fd72 	bl	80001d0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f04f 33ff 	mov.w	r3, #4294967295
 80006f4:	492b      	ldr	r1, [pc, #172]	; (80007a4 <main+0x208>)
 80006f6:	482c      	ldr	r0, [pc, #176]	; (80007a8 <main+0x20c>)
 80006f8:	f004 fdcc 	bl	8005294 <HAL_UART_Transmit>

	  sprintf(msg, "\tvoltageF: %hu ", voltageF);
 80006fc:	4b23      	ldr	r3, [pc, #140]	; (800078c <main+0x1f0>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	461a      	mov	r2, r3
 8000702:	492c      	ldr	r1, [pc, #176]	; (80007b4 <main+0x218>)
 8000704:	4827      	ldr	r0, [pc, #156]	; (80007a4 <main+0x208>)
 8000706:	f005 fa91 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800070a:	4826      	ldr	r0, [pc, #152]	; (80007a4 <main+0x208>)
 800070c:	f7ff fd60 	bl	80001d0 <strlen>
 8000710:	4603      	mov	r3, r0
 8000712:	b29a      	uxth	r2, r3
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	4922      	ldr	r1, [pc, #136]	; (80007a4 <main+0x208>)
 800071a:	4823      	ldr	r0, [pc, #140]	; (80007a8 <main+0x20c>)
 800071c:	f004 fdba 	bl	8005294 <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentE: %hu ", currentE);
 8000720:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <main+0x1fc>)
 8000722:	881b      	ldrh	r3, [r3, #0]
 8000724:	461a      	mov	r2, r3
 8000726:	4924      	ldr	r1, [pc, #144]	; (80007b8 <main+0x21c>)
 8000728:	481e      	ldr	r0, [pc, #120]	; (80007a4 <main+0x208>)
 800072a:	f005 fa7f 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 800072e:	481d      	ldr	r0, [pc, #116]	; (80007a4 <main+0x208>)
 8000730:	f7ff fd4e 	bl	80001d0 <strlen>
 8000734:	4603      	mov	r3, r0
 8000736:	b29a      	uxth	r2, r3
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	4919      	ldr	r1, [pc, #100]	; (80007a4 <main+0x208>)
 800073e:	481a      	ldr	r0, [pc, #104]	; (80007a8 <main+0x20c>)
 8000740:	f004 fda8 	bl	8005294 <HAL_UART_Transmit>

	  sprintf(msg, "\tcurrentF: %hu \r\n", currentF);
 8000744:	4b15      	ldr	r3, [pc, #84]	; (800079c <main+0x200>)
 8000746:	881b      	ldrh	r3, [r3, #0]
 8000748:	461a      	mov	r2, r3
 800074a:	491c      	ldr	r1, [pc, #112]	; (80007bc <main+0x220>)
 800074c:	4815      	ldr	r0, [pc, #84]	; (80007a4 <main+0x208>)
 800074e:	f005 fa6d 	bl	8005c2c <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t *) msg, strlen(msg), HAL_MAX_DELAY);
 8000752:	4814      	ldr	r0, [pc, #80]	; (80007a4 <main+0x208>)
 8000754:	f7ff fd3c 	bl	80001d0 <strlen>
 8000758:	4603      	mov	r3, r0
 800075a:	b29a      	uxth	r2, r3
 800075c:	f04f 33ff 	mov.w	r3, #4294967295
 8000760:	4910      	ldr	r1, [pc, #64]	; (80007a4 <main+0x208>)
 8000762:	4811      	ldr	r0, [pc, #68]	; (80007a8 <main+0x20c>)
 8000764:	f004 fd96 	bl	8005294 <HAL_UART_Transmit>

	  HAL_Delay(250);
 8000768:	20fa      	movs	r0, #250	; 0xfa
 800076a:	f000 fd27 	bl	80011bc <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 800076e:	e726      	b.n	80005be <main+0x22>
 8000770:	20000294 	.word	0x20000294
 8000774:	20000078 	.word	0x20000078
 8000778:	200002b4 	.word	0x200002b4
 800077c:	20000298 	.word	0x20000298
 8000780:	2000029a 	.word	0x2000029a
 8000784:	3f4e4000 	.word	0x3f4e4000
 8000788:	2000029c 	.word	0x2000029c
 800078c:	2000029e 	.word	0x2000029e
 8000790:	43a10000 	.word	0x43a10000
 8000794:	40726c9b 	.word	0x40726c9b
 8000798:	20000290 	.word	0x20000290
 800079c:	20000292 	.word	0x20000292
 80007a0:	0800658c 	.word	0x0800658c
 80007a4:	200002a0 	.word	0x200002a0
 80007a8:	20000208 	.word	0x20000208
 80007ac:	08006598 	.word	0x08006598
 80007b0:	080065a4 	.word	0x080065a4
 80007b4:	080065b4 	.word	0x080065b4
 80007b8:	080065c4 	.word	0x080065c4
 80007bc:	080065d4 	.word	0x080065d4

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b096      	sub	sp, #88	; 0x58
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0314 	add.w	r3, r7, #20
 80007ca:	2244      	movs	r2, #68	; 0x44
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f005 fa4c 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
 80007e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e6:	f003 fb81 	bl	8003eec <HAL_PWREx_ControlVoltageScaling>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80007f0:	f000 f9a4 	bl	8000b3c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007f4:	f003 fb5c 	bl	8003eb0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80007f8:	4b21      	ldr	r3, [pc, #132]	; (8000880 <SystemClock_Config+0xc0>)
 80007fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80007fe:	4a20      	ldr	r2, [pc, #128]	; (8000880 <SystemClock_Config+0xc0>)
 8000800:	f023 0318 	bic.w	r3, r3, #24
 8000804:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000808:	2314      	movs	r3, #20
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800080c:	2301      	movs	r3, #1
 800080e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000810:	2301      	movs	r3, #1
 8000812:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000818:	2360      	movs	r3, #96	; 0x60
 800081a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081c:	2302      	movs	r3, #2
 800081e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000820:	2301      	movs	r3, #1
 8000822:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000824:	2301      	movs	r3, #1
 8000826:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000828:	2310      	movs	r3, #16
 800082a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800082c:	2307      	movs	r3, #7
 800082e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000830:	2302      	movs	r3, #2
 8000832:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000834:	2302      	movs	r3, #2
 8000836:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000838:	f107 0314 	add.w	r3, r7, #20
 800083c:	4618      	mov	r0, r3
 800083e:	f003 fbab 	bl	8003f98 <HAL_RCC_OscConfig>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000848:	f000 f978 	bl	8000b3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800084c:	230f      	movs	r3, #15
 800084e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000850:	2303      	movs	r3, #3
 8000852:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000854:	2300      	movs	r3, #0
 8000856:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800085c:	2300      	movs	r3, #0
 800085e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000860:	463b      	mov	r3, r7
 8000862:	2101      	movs	r1, #1
 8000864:	4618      	mov	r0, r3
 8000866:	f003 ffab 	bl	80047c0 <HAL_RCC_ClockConfig>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000870:	f000 f964 	bl	8000b3c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000874:	f004 fbbe 	bl	8004ff4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000878:	bf00      	nop
 800087a:	3758      	adds	r7, #88	; 0x58
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	40021000 	.word	0x40021000

08000884 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b086      	sub	sp, #24
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
 8000896:	611a      	str	r2, [r3, #16]
 8000898:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800089a:	4b30      	ldr	r3, [pc, #192]	; (800095c <MX_ADC1_Init+0xd8>)
 800089c:	4a30      	ldr	r2, [pc, #192]	; (8000960 <MX_ADC1_Init+0xdc>)
 800089e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a0:	4b2e      	ldr	r3, [pc, #184]	; (800095c <MX_ADC1_Init+0xd8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008a6:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_ADC1_Init+0xd8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ac:	4b2b      	ldr	r3, [pc, #172]	; (800095c <MX_ADC1_Init+0xd8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_ADC1_Init+0xd8>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_ADC1_Init+0xd8>)
 80008ba:	2204      	movs	r2, #4
 80008bc:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_ADC1_Init+0xd8>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_ADC1_Init+0xd8>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_ADC1_Init+0xd8>)
 80008cc:	2202      	movs	r2, #2
 80008ce:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_ADC1_Init+0xd8>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d8:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_ADC1_Init+0xd8>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008de:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ADC1_Init+0xd8>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e4:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_ADC1_Init+0xd8>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008ec:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_ADC1_Init+0xd8>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ADC1_Init+0xd8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008fa:	4818      	ldr	r0, [pc, #96]	; (800095c <MX_ADC1_Init+0xd8>)
 80008fc:	f000 fe5c 	bl	80015b8 <HAL_ADC_Init>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000906:	f000 f919 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_ADC1_Init+0xe0>)
 800090c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800090e:	2306      	movs	r3, #6
 8000910:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8000912:	2307      	movs	r3, #7
 8000914:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000916:	237f      	movs	r3, #127	; 0x7f
 8000918:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800091a:	2304      	movs	r3, #4
 800091c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000922:	463b      	mov	r3, r7
 8000924:	4619      	mov	r1, r3
 8000926:	480d      	ldr	r0, [pc, #52]	; (800095c <MX_ADC1_Init+0xd8>)
 8000928:	f001 f9de 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000932:	f000 f903 	bl	8000b3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000936:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_ADC1_Init+0xe4>)
 8000938:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800093a:	230c      	movs	r3, #12
 800093c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093e:	463b      	mov	r3, r7
 8000940:	4619      	mov	r1, r3
 8000942:	4806      	ldr	r0, [pc, #24]	; (800095c <MX_ADC1_Init+0xd8>)
 8000944:	f001 f9d0 	bl	8001ce8 <HAL_ADC_ConfigChannel>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800094e:	f000 f8f5 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000952:	bf00      	nop
 8000954:	3718      	adds	r7, #24
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000078 	.word	0x20000078
 8000960:	50040000 	.word	0x50040000
 8000964:	14f00020 	.word	0x14f00020
 8000968:	19200040 	.word	0x19200040

0800096c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000970:	4b1b      	ldr	r3, [pc, #108]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000972:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <MX_I2C1_Init+0x78>)
 8000974:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8000976:	4b1a      	ldr	r3, [pc, #104]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000978:	4a1b      	ldr	r2, [pc, #108]	; (80009e8 <MX_I2C1_Init+0x7c>)
 800097a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <MX_I2C1_Init+0x74>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000982:	4b17      	ldr	r3, [pc, #92]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000984:	2201      	movs	r2, #1
 8000986:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_I2C1_Init+0x74>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800098e:	4b14      	ldr	r3, [pc, #80]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000994:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <MX_I2C1_Init+0x74>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_I2C1_Init+0x74>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009a0:	4b0f      	ldr	r3, [pc, #60]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009a6:	480e      	ldr	r0, [pc, #56]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009a8:	f002 fba6 	bl	80030f8 <HAL_I2C_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80009b2:	f000 f8c3 	bl	8000b3c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009b6:	2100      	movs	r1, #0
 80009b8:	4809      	ldr	r0, [pc, #36]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009ba:	f003 f9e2 	bl	8003d82 <HAL_I2CEx_ConfigAnalogFilter>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80009c4:	f000 f8ba 	bl	8000b3c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009c8:	2100      	movs	r1, #0
 80009ca:	4805      	ldr	r0, [pc, #20]	; (80009e0 <MX_I2C1_Init+0x74>)
 80009cc:	f003 fa24 	bl	8003e18 <HAL_I2CEx_ConfigDigitalFilter>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80009d6:	f000 f8b1 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	20000124 	.word	0x20000124
 80009e4:	40005400 	.word	0x40005400
 80009e8:	00707cbb 	.word	0x00707cbb

080009ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <MX_USART2_UART_Init+0x5c>)
 80009f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 80009f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a12:	220c      	movs	r2, #12
 8000a14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_USART2_UART_Init+0x58>)
 8000a30:	f004 fbe2 	bl	80051f8 <HAL_UART_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a3a:	f000 f87f 	bl	8000b3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000208 	.word	0x20000208
 8000a48:	40004400 	.word	0x40004400

08000a4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_DMA_Init+0x58>)
 8000a54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a56:	4a13      	ldr	r2, [pc, #76]	; (8000aa4 <MX_DMA_Init+0x58>)
 8000a58:	f043 0301 	orr.w	r3, r3, #1
 8000a5c:	6493      	str	r3, [r2, #72]	; 0x48
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_DMA_Init+0x58>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a62:	f003 0301 	and.w	r3, r3, #1
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	200b      	movs	r0, #11
 8000a70:	f001 ff43 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a74:	200b      	movs	r0, #11
 8000a76:	f001 ff5c 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2010      	movs	r0, #16
 8000a80:	f001 ff3b 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a84:	2010      	movs	r0, #16
 8000a86:	f001 ff54 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	2011      	movs	r0, #17
 8000a90:	f001 ff33 	bl	80028fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a94:	2011      	movs	r0, #17
 8000a96:	f001 ff4c 	bl	8002932 <HAL_NVIC_EnableIRQ>

}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b088      	sub	sp, #32
 8000aac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aae:	f107 030c 	add.w	r3, r7, #12
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	601a      	str	r2, [r3, #0]
 8000ab6:	605a      	str	r2, [r3, #4]
 8000ab8:	609a      	str	r2, [r3, #8]
 8000aba:	60da      	str	r2, [r3, #12]
 8000abc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000abe:	4b1d      	ldr	r3, [pc, #116]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a1c      	ldr	r2, [pc, #112]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ac4:	f043 0304 	orr.w	r3, r3, #4
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b1a      	ldr	r3, [pc, #104]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0304 	and.w	r3, r3, #4
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	4b17      	ldr	r3, [pc, #92]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	4a16      	ldr	r2, [pc, #88]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000ae4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ae6:	f003 0301 	and.w	r3, r3, #1
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000af0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af2:	4a10      	ldr	r2, [pc, #64]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000af4:	f043 0302 	orr.w	r3, r3, #2
 8000af8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_GPIO_Init+0x8c>)
 8000afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000afe:	f003 0302 	and.w	r3, r3, #2
 8000b02:	603b      	str	r3, [r7, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	2108      	movs	r1, #8
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000b0c:	f002 fadc 	bl	80030c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000b10:	2308      	movs	r3, #8
 8000b12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b14:	2301      	movs	r3, #1
 8000b16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000b20:	f107 030c 	add.w	r3, r7, #12
 8000b24:	4619      	mov	r1, r3
 8000b26:	4804      	ldr	r0, [pc, #16]	; (8000b38 <MX_GPIO_Init+0x90>)
 8000b28:	f002 f964 	bl	8002df4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2c:	bf00      	nop
 8000b2e:	3720      	adds	r7, #32
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	48000400 	.word	0x48000400

08000b3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b40:	b672      	cpsid	i
}
 8000b42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <Error_Handler+0x8>
	...

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <HAL_MspInit+0x44>)
 8000b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b52:	4a0e      	ldr	r2, [pc, #56]	; (8000b8c <HAL_MspInit+0x44>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6613      	str	r3, [r2, #96]	; 0x60
 8000b5a:	4b0c      	ldr	r3, [pc, #48]	; (8000b8c <HAL_MspInit+0x44>)
 8000b5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b5e:	f003 0301 	and.w	r3, r3, #1
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b66:	4b09      	ldr	r3, [pc, #36]	; (8000b8c <HAL_MspInit+0x44>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	4a08      	ldr	r2, [pc, #32]	; (8000b8c <HAL_MspInit+0x44>)
 8000b6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b70:	6593      	str	r3, [r2, #88]	; 0x58
 8000b72:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_MspInit+0x44>)
 8000b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr
 8000b8a:	bf00      	nop
 8000b8c:	40021000 	.word	0x40021000

08000b90 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b09e      	sub	sp, #120	; 0x78
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	2254      	movs	r2, #84	; 0x54
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f005 f85b 	bl	8005c6c <memset>
  if(hadc->Instance==ADC1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a3f      	ldr	r2, [pc, #252]	; (8000cb8 <HAL_ADC_MspInit+0x128>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d176      	bne.n	8000cae <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000bc0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8000bc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000bca:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000bd0:	2301      	movs	r3, #1
 8000bd2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8000bd4:	2310      	movs	r3, #16
 8000bd6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8000be4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bea:	f107 0310 	add.w	r3, r7, #16
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f004 f80a 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000bfa:	f7ff ff9f 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000bfe:	4b2f      	ldr	r3, [pc, #188]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c02:	4a2e      	ldr	r2, [pc, #184]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c04:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0a:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c16:	4b29      	ldr	r3, [pc, #164]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1a:	4a28      	ldr	r2, [pc, #160]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c1c:	f043 0301 	orr.w	r3, r3, #1
 8000c20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c22:	4b26      	ldr	r3, [pc, #152]	; (8000cbc <HAL_ADC_MspInit+0x12c>)
 8000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c26:	f003 0301 	and.w	r3, r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c2e:	2303      	movs	r3, #3
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c32:	230b      	movs	r3, #11
 8000c34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c3e:	4619      	mov	r1, r3
 8000c40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c44:	f002 f8d6 	bl	8002df4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000c48:	4b1d      	ldr	r3, [pc, #116]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c4a:	4a1e      	ldr	r2, [pc, #120]	; (8000cc4 <HAL_ADC_MspInit+0x134>)
 8000c4c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c62:	2280      	movs	r2, #128	; 0x80
 8000c64:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c68:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000c6c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c74:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000c76:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c78:	2220      	movs	r2, #32
 8000c7a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000c7c:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000c82:	480f      	ldr	r0, [pc, #60]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c84:	f001 fe70 	bl	8002968 <HAL_DMA_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 8000c8e:	f7ff ff55 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	4a0a      	ldr	r2, [pc, #40]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c96:	64da      	str	r2, [r3, #76]	; 0x4c
 8000c98:	4a09      	ldr	r2, [pc, #36]	; (8000cc0 <HAL_ADC_MspInit+0x130>)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f001 fe29 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f001 fe42 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	3778      	adds	r7, #120	; 0x78
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	50040000 	.word	0x50040000
 8000cbc:	40021000 	.word	0x40021000
 8000cc0:	200000dc 	.word	0x200000dc
 8000cc4:	40020008 	.word	0x40020008

08000cc8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b09e      	sub	sp, #120	; 0x78
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	2254      	movs	r2, #84	; 0x54
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f004 ffbf 	bl	8005c6c <memset>
  if(hi2c->Instance==I2C1)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a50      	ldr	r2, [pc, #320]	; (8000e34 <HAL_I2C_MspInit+0x16c>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	f040 8098 	bne.w	8000e2a <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cfa:	2340      	movs	r3, #64	; 0x40
 8000cfc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 ff7e 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000d12:	f7ff ff13 	bl	8000b3c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d16:	4b48      	ldr	r3, [pc, #288]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d1a:	4a47      	ldr	r2, [pc, #284]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d1c:	f043 0302 	orr.w	r3, r3, #2
 8000d20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d22:	4b45      	ldr	r3, [pc, #276]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d2e:	23c0      	movs	r3, #192	; 0xc0
 8000d30:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d32:	2312      	movs	r3, #18
 8000d34:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	2301      	movs	r3, #1
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d3a:	2303      	movs	r3, #3
 8000d3c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d3e:	2304      	movs	r3, #4
 8000d40:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d46:	4619      	mov	r1, r3
 8000d48:	483c      	ldr	r0, [pc, #240]	; (8000e3c <HAL_I2C_MspInit+0x174>)
 8000d4a:	f002 f853 	bl	8002df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	4a39      	ldr	r2, [pc, #228]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d54:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d58:	6593      	str	r3, [r2, #88]	; 0x58
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_I2C_MspInit+0x170>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000d66:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d68:	4a36      	ldr	r2, [pc, #216]	; (8000e44 <HAL_I2C_MspInit+0x17c>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000d6c:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d6e:	2203      	movs	r2, #3
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b30      	ldr	r3, [pc, #192]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000d9c:	4828      	ldr	r0, [pc, #160]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000d9e:	f001 fde3 	bl	8002968 <HAL_DMA_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8000da8:	f7ff fec8 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a24      	ldr	r2, [pc, #144]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000db0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000db2:	4a23      	ldr	r2, [pc, #140]	; (8000e40 <HAL_I2C_MspInit+0x178>)
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000db8:	4b23      	ldr	r3, [pc, #140]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <HAL_I2C_MspInit+0x184>)
 8000dbc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000dbe:	4b22      	ldr	r3, [pc, #136]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc4:	4b20      	ldr	r3, [pc, #128]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dc6:	2210      	movs	r2, #16
 8000dc8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dca:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dd2:	2280      	movs	r2, #128	; 0x80
 8000dd4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd6:	4b1c      	ldr	r3, [pc, #112]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000de2:	4b19      	ldr	r3, [pc, #100]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000de8:	4b17      	ldr	r3, [pc, #92]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000dee:	4816      	ldr	r0, [pc, #88]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000df0:	f001 fdba 	bl	8002968 <HAL_DMA_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8000dfa:	f7ff fe9f 	bl	8000b3c <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a11      	ldr	r2, [pc, #68]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000e02:	639a      	str	r2, [r3, #56]	; 0x38
 8000e04:	4a10      	ldr	r2, [pc, #64]	; (8000e48 <HAL_I2C_MspInit+0x180>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	201f      	movs	r0, #31
 8000e10:	f001 fd73 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000e14:	201f      	movs	r0, #31
 8000e16:	f001 fd8c 	bl	8002932 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2020      	movs	r0, #32
 8000e20:	f001 fd6b 	bl	80028fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000e24:	2020      	movs	r0, #32
 8000e26:	f001 fd84 	bl	8002932 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	3778      	adds	r7, #120	; 0x78
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40005400 	.word	0x40005400
 8000e38:	40021000 	.word	0x40021000
 8000e3c:	48000400 	.word	0x48000400
 8000e40:	20000178 	.word	0x20000178
 8000e44:	40020080 	.word	0x40020080
 8000e48:	200001c0 	.word	0x200001c0
 8000e4c:	4002006c 	.word	0x4002006c

08000e50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09e      	sub	sp, #120	; 0x78
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2254      	movs	r2, #84	; 0x54
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f004 fefb 	bl	8005c6c <memset>
  if(huart->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <HAL_UART_MspInit+0xcc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d148      	bne.n	8000f12 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f003 febb 	bl	8004c08 <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e98:	f7ff fe50 	bl	8000b3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000edc:	2307      	movs	r3, #7
 8000ede:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f001 ff83 	bl	8002df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f00:	2303      	movs	r3, #3
 8000f02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f001 ff71 	bl	8002df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3778      	adds	r7, #120	; 0x78
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f28:	e7fe      	b.n	8000f28 <NMI_Handler+0x4>

08000f2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	e7fe      	b.n	8000f34 <MemManage_Handler+0x4>

08000f36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f36:	b480      	push	{r7}
 8000f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3a:	e7fe      	b.n	8000f3a <BusFault_Handler+0x4>

08000f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f40:	e7fe      	b.n	8000f40 <UsageFault_Handler+0x4>

08000f42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f42:	b480      	push	{r7}
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr

08000f5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f62:	bf00      	nop
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f904 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	bf00      	nop
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <DMA1_Channel1_IRQHandler+0x10>)
 8000f7e:	f001 fe4c 	bl	8002c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200000dc 	.word	0x200000dc

08000f8c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <DMA1_Channel6_IRQHandler+0x10>)
 8000f92:	f001 fe42 	bl	8002c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	200001c0 	.word	0x200001c0

08000fa0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <DMA1_Channel7_IRQHandler+0x10>)
 8000fa6:	f001 fe38 	bl	8002c1a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	20000178 	.word	0x20000178

08000fb4 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000fb8:	4802      	ldr	r0, [pc, #8]	; (8000fc4 <ADC1_IRQHandler+0x10>)
 8000fba:	f000 fcc3 	bl	8001944 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000fbe:	bf00      	nop
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000078 	.word	0x20000078

08000fc8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000fcc:	4802      	ldr	r0, [pc, #8]	; (8000fd8 <I2C1_EV_IRQHandler+0x10>)
 8000fce:	f002 f92e 	bl	800322e <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	20000124 	.word	0x20000124

08000fdc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <I2C1_ER_IRQHandler+0x10>)
 8000fe2:	f002 f93e 	bl	8003262 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000124 	.word	0x20000124

08000ff0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b086      	sub	sp, #24
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ff8:	4a14      	ldr	r2, [pc, #80]	; (800104c <_sbrk+0x5c>)
 8000ffa:	4b15      	ldr	r3, [pc, #84]	; (8001050 <_sbrk+0x60>)
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	2b00      	cmp	r3, #0
 800100a:	d102      	bne.n	8001012 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800100c:	4b11      	ldr	r3, [pc, #68]	; (8001054 <_sbrk+0x64>)
 800100e:	4a12      	ldr	r2, [pc, #72]	; (8001058 <_sbrk+0x68>)
 8001010:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <_sbrk+0x64>)
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	4413      	add	r3, r2
 800101a:	693a      	ldr	r2, [r7, #16]
 800101c:	429a      	cmp	r2, r3
 800101e:	d207      	bcs.n	8001030 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001020:	f004 fe2c 	bl	8005c7c <__errno>
 8001024:	4603      	mov	r3, r0
 8001026:	220c      	movs	r2, #12
 8001028:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e009      	b.n	8001044 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001030:	4b08      	ldr	r3, [pc, #32]	; (8001054 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001036:	4b07      	ldr	r3, [pc, #28]	; (8001054 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	4a05      	ldr	r2, [pc, #20]	; (8001054 <_sbrk+0x64>)
 8001040:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001042:	68fb      	ldr	r3, [r7, #12]
}
 8001044:	4618      	mov	r0, r3
 8001046:	3718      	adds	r7, #24
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20010000 	.word	0x20010000
 8001050:	00000400 	.word	0x00000400
 8001054:	200002b8 	.word	0x200002b8
 8001058:	20000408 	.word	0x20000408

0800105c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <SystemInit+0x20>)
 8001062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001066:	4a05      	ldr	r2, [pc, #20]	; (800107c <SystemInit+0x20>)
 8001068:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800106c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001080:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001084:	f7ff ffea 	bl	800105c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001088:	480c      	ldr	r0, [pc, #48]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 800108a:	490d      	ldr	r1, [pc, #52]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800108c:	4a0d      	ldr	r2, [pc, #52]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001090:	e002      	b.n	8001098 <LoopCopyDataInit>

08001092 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001092:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001094:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001096:	3304      	adds	r3, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001098:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800109a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800109c:	d3f9      	bcc.n	8001092 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109e:	4a0a      	ldr	r2, [pc, #40]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80010a0:	4c0a      	ldr	r4, [pc, #40]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 80010a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a4:	e001      	b.n	80010aa <LoopFillZerobss>

080010a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a8:	3204      	adds	r2, #4

080010aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ac:	d3fb      	bcc.n	80010a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ae:	f004 fdeb 	bl	8005c88 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010b2:	f7ff fa73 	bl	800059c <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010b8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010c4:	08006674 	.word	0x08006674
  ldr r2, =_sbss
 80010c8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010cc:	20000408 	.word	0x20000408

080010d0 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <CAN1_RX0_IRQHandler>

080010d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d8:	2300      	movs	r3, #0
 80010da:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010dc:	2003      	movs	r0, #3
 80010de:	f001 fc01 	bl	80028e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e2:	2000      	movs	r0, #0
 80010e4:	f000 f80e 	bl	8001104 <HAL_InitTick>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d002      	beq.n	80010f4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e001      	b.n	80010f8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f4:	f7ff fd28 	bl	8000b48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f8:	79fb      	ldrb	r3, [r7, #7]
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800110c:	2300      	movs	r3, #0
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001110:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_InitTick+0x6c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d023      	beq.n	8001160 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001118:	4b16      	ldr	r3, [pc, #88]	; (8001174 <HAL_InitTick+0x70>)
 800111a:	681a      	ldr	r2, [r3, #0]
 800111c:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_InitTick+0x6c>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001126:	fbb3 f3f1 	udiv	r3, r3, r1
 800112a:	fbb2 f3f3 	udiv	r3, r2, r3
 800112e:	4618      	mov	r0, r3
 8001130:	f001 fc0d 	bl	800294e <HAL_SYSTICK_Config>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b0f      	cmp	r3, #15
 800113e:	d809      	bhi.n	8001154 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001140:	2200      	movs	r2, #0
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	f04f 30ff 	mov.w	r0, #4294967295
 8001148:	f001 fbd7 	bl	80028fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114c:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x74>)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6013      	str	r3, [r2, #0]
 8001152:	e007      	b.n	8001164 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001154:	2301      	movs	r3, #1
 8001156:	73fb      	strb	r3, [r7, #15]
 8001158:	e004      	b.n	8001164 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	73fb      	strb	r3, [r7, #15]
 800115e:	e001      	b.n	8001164 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001160:	2301      	movs	r3, #1
 8001162:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	20000008 	.word	0x20000008
 8001174:	20000000 	.word	0x20000000
 8001178:	20000004 	.word	0x20000004

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <HAL_IncTick+0x20>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	461a      	mov	r2, r3
 8001186:	4b06      	ldr	r3, [pc, #24]	; (80011a0 <HAL_IncTick+0x24>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4413      	add	r3, r2
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <HAL_IncTick+0x24>)
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000008 	.word	0x20000008
 80011a0:	200002bc 	.word	0x200002bc

080011a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  return uwTick;
 80011a8:	4b03      	ldr	r3, [pc, #12]	; (80011b8 <HAL_GetTick+0x14>)
 80011aa:	681b      	ldr	r3, [r3, #0]
}
 80011ac:	4618      	mov	r0, r3
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
 80011b6:	bf00      	nop
 80011b8:	200002bc 	.word	0x200002bc

080011bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b084      	sub	sp, #16
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011c4:	f7ff ffee 	bl	80011a4 <HAL_GetTick>
 80011c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011d4:	d005      	beq.n	80011e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80011d6:	4b0a      	ldr	r3, [pc, #40]	; (8001200 <HAL_Delay+0x44>)
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	4413      	add	r3, r2
 80011e0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011e2:	bf00      	nop
 80011e4:	f7ff ffde 	bl	80011a4 <HAL_GetTick>
 80011e8:	4602      	mov	r2, r0
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	1ad3      	subs	r3, r2, r3
 80011ee:	68fa      	ldr	r2, [r7, #12]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d8f7      	bhi.n	80011e4 <HAL_Delay+0x28>
  {
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3710      	adds	r7, #16
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000008 	.word	0x20000008

08001204 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	431a      	orrs	r2, r3
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	609a      	str	r2, [r3, #8]
}
 800121e:	bf00      	nop
 8001220:	370c      	adds	r7, #12
 8001222:	46bd      	mov	sp, r7
 8001224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001228:	4770      	bx	lr

0800122a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800122a:	b480      	push	{r7}
 800122c:	b083      	sub	sp, #12
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
 8001232:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	431a      	orrs	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
}
 8001244:	bf00      	nop
 8001246:	370c      	adds	r7, #12
 8001248:	46bd      	mov	sp, r7
 800124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124e:	4770      	bx	lr

08001250 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800126c:	b480      	push	{r7}
 800126e:	b087      	sub	sp, #28
 8001270:	af00      	add	r7, sp, #0
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	60b9      	str	r1, [r7, #8]
 8001276:	607a      	str	r2, [r7, #4]
 8001278:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3360      	adds	r3, #96	; 0x60
 800127e:	461a      	mov	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	4413      	add	r3, r2
 8001286:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001288:	697b      	ldr	r3, [r7, #20]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <LL_ADC_SetOffset+0x44>)
 800128e:	4013      	ands	r3, r2
 8001290:	687a      	ldr	r2, [r7, #4]
 8001292:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001296:	683a      	ldr	r2, [r7, #0]
 8001298:	430a      	orrs	r2, r1
 800129a:	4313      	orrs	r3, r2
 800129c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012a4:	bf00      	nop
 80012a6:	371c      	adds	r7, #28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr
 80012b0:	03fff000 	.word	0x03fff000

080012b4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	3360      	adds	r3, #96	; 0x60
 80012c2:	461a      	mov	r2, r3
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3714      	adds	r7, #20
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b087      	sub	sp, #28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	3360      	adds	r3, #96	; 0x60
 80012f0:	461a      	mov	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4413      	add	r3, r2
 80012f8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	431a      	orrs	r2, r3
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800130a:	bf00      	nop
 800130c:	371c      	adds	r7, #28
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001326:	2b00      	cmp	r3, #0
 8001328:	d101      	bne.n	800132e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800132a:	2301      	movs	r3, #1
 800132c:	e000      	b.n	8001330 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr

0800133c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800133c:	b480      	push	{r7}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	3330      	adds	r3, #48	; 0x30
 800134c:	461a      	mov	r2, r3
 800134e:	68bb      	ldr	r3, [r7, #8]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	4413      	add	r3, r2
 800135a:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	f003 031f 	and.w	r3, r3, #31
 8001366:	211f      	movs	r1, #31
 8001368:	fa01 f303 	lsl.w	r3, r1, r3
 800136c:	43db      	mvns	r3, r3
 800136e:	401a      	ands	r2, r3
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	0e9b      	lsrs	r3, r3, #26
 8001374:	f003 011f 	and.w	r1, r3, #31
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	f003 031f 	and.w	r3, r3, #31
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	431a      	orrs	r2, r3
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001388:	bf00      	nop
 800138a:	371c      	adds	r7, #28
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b087      	sub	sp, #28
 80013be:	af00      	add	r7, sp, #0
 80013c0:	60f8      	str	r0, [r7, #12]
 80013c2:	60b9      	str	r1, [r7, #8]
 80013c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	3314      	adds	r3, #20
 80013ca:	461a      	mov	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	0e5b      	lsrs	r3, r3, #25
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	4413      	add	r3, r2
 80013d8:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	0d1b      	lsrs	r3, r3, #20
 80013e2:	f003 031f 	and.w	r3, r3, #31
 80013e6:	2107      	movs	r1, #7
 80013e8:	fa01 f303 	lsl.w	r3, r1, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	401a      	ands	r2, r3
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	0d1b      	lsrs	r3, r3, #20
 80013f4:	f003 031f 	and.w	r3, r3, #31
 80013f8:	6879      	ldr	r1, [r7, #4]
 80013fa:	fa01 f303 	lsl.w	r3, r1, r3
 80013fe:	431a      	orrs	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001404:	bf00      	nop
 8001406:	371c      	adds	r7, #28
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	60b9      	str	r1, [r7, #8]
 800141a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001428:	43db      	mvns	r3, r3
 800142a:	401a      	ands	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0318 	and.w	r3, r3, #24
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001434:	40d9      	lsrs	r1, r3
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	400b      	ands	r3, r1
 800143a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800143e:	431a      	orrs	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	0007ffff 	.word	0x0007ffff

08001458 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001468:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800146c:	687a      	ldr	r2, [r7, #4]
 800146e:	6093      	str	r3, [r2, #8]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr

0800147c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	689b      	ldr	r3, [r3, #8]
 8001488:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800148c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001490:	d101      	bne.n	8001496 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001492:	2301      	movs	r3, #1
 8001494:	e000      	b.n	8001498 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80014b4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80014b8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80014e0:	d101      	bne.n	80014e6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80014e2:	2301      	movs	r3, #1
 80014e4:	e000      	b.n	80014e8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80014e6:	2300      	movs	r3, #0
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	689b      	ldr	r3, [r3, #8]
 8001500:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001504:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001508:	f043 0201 	orr.w	r2, r3, #1
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001510:	bf00      	nop
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <LL_ADC_IsEnabled+0x18>
 8001530:	2301      	movs	r3, #1
 8001532:	e000      	b.n	8001536 <LL_ADC_IsEnabled+0x1a>
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr

08001542 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001542:	b480      	push	{r7}
 8001544:	b083      	sub	sp, #12
 8001546:	af00      	add	r7, sp, #0
 8001548:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001552:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001556:	f043 0204 	orr.w	r2, r3, #4
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800156a:	b480      	push	{r7}
 800156c:	b083      	sub	sp, #12
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	689b      	ldr	r3, [r3, #8]
 8001576:	f003 0304 	and.w	r3, r3, #4
 800157a:	2b04      	cmp	r3, #4
 800157c:	d101      	bne.n	8001582 <LL_ADC_REG_IsConversionOngoing+0x18>
 800157e:	2301      	movs	r3, #1
 8001580:	e000      	b.n	8001584 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	689b      	ldr	r3, [r3, #8]
 800159c:	f003 0308 	and.w	r3, r3, #8
 80015a0:	2b08      	cmp	r3, #8
 80015a2:	d101      	bne.n	80015a8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80015a4:	2301      	movs	r3, #1
 80015a6:	e000      	b.n	80015aa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
	...

080015b8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b088      	sub	sp, #32
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015c0:	2300      	movs	r3, #0
 80015c2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e126      	b.n	8001820 <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	691b      	ldr	r3, [r3, #16]
 80015d6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d109      	bne.n	80015f4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff fad5 	bl	8000b90 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2200      	movs	r2, #0
 80015ea:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2200      	movs	r2, #0
 80015f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff3f 	bl	800147c <LL_ADC_IsDeepPowerDownEnabled>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d004      	beq.n	800160e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff ff25 	bl	8001458 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff ff5a 	bl	80014cc <LL_ADC_IsInternalRegulatorEnabled>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d115      	bne.n	800164a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff ff3e 	bl	80014a4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001628:	4b7f      	ldr	r3, [pc, #508]	; (8001828 <HAL_ADC_Init+0x270>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	099b      	lsrs	r3, r3, #6
 800162e:	4a7f      	ldr	r2, [pc, #508]	; (800182c <HAL_ADC_Init+0x274>)
 8001630:	fba2 2303 	umull	r2, r3, r2, r3
 8001634:	099b      	lsrs	r3, r3, #6
 8001636:	3301      	adds	r3, #1
 8001638:	005b      	lsls	r3, r3, #1
 800163a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800163c:	e002      	b.n	8001644 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	3b01      	subs	r3, #1
 8001642:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d1f9      	bne.n	800163e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff ff3c 	bl	80014cc <LL_ADC_IsInternalRegulatorEnabled>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d10d      	bne.n	8001676 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800165e:	f043 0210 	orr.w	r2, r3, #16
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f7ff ff75 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001680:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001686:	f003 0310 	and.w	r3, r3, #16
 800168a:	2b00      	cmp	r3, #0
 800168c:	f040 80bf 	bne.w	800180e <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2b00      	cmp	r3, #0
 8001694:	f040 80bb 	bne.w	800180e <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80016a0:	f043 0202 	orr.w	r2, r3, #2
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f7ff ff35 	bl	800151c <LL_ADC_IsEnabled>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d10b      	bne.n	80016d0 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80016b8:	485d      	ldr	r0, [pc, #372]	; (8001830 <HAL_ADC_Init+0x278>)
 80016ba:	f7ff ff2f 	bl	800151c <LL_ADC_IsEnabled>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	4619      	mov	r1, r3
 80016ca:	485a      	ldr	r0, [pc, #360]	; (8001834 <HAL_ADC_Init+0x27c>)
 80016cc:	f7ff fd9a 	bl	8001204 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e5b      	ldrb	r3, [r3, #25]
 80016d4:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016da:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80016e0:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80016e6:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ee:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80016f0:	4313      	orrs	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016fa:	2b01      	cmp	r3, #1
 80016fc:	d106      	bne.n	800170c <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001702:	3b01      	subs	r3, #1
 8001704:	045b      	lsls	r3, r3, #17
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4313      	orrs	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001710:	2b00      	cmp	r3, #0
 8001712:	d009      	beq.n	8001728 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001718:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001720:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001722:	69ba      	ldr	r2, [r7, #24]
 8001724:	4313      	orrs	r3, r2
 8001726:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	68da      	ldr	r2, [r3, #12]
 800172e:	4b42      	ldr	r3, [pc, #264]	; (8001838 <HAL_ADC_Init+0x280>)
 8001730:	4013      	ands	r3, r2
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	6812      	ldr	r2, [r2, #0]
 8001736:	69b9      	ldr	r1, [r7, #24]
 8001738:	430b      	orrs	r3, r1
 800173a:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff25 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001746:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d13d      	bne.n	80017ca <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800174e:	693b      	ldr	r3, [r7, #16]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d13a      	bne.n	80017ca <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001758:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001760:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001770:	f023 0302 	bic.w	r3, r3, #2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	69b9      	ldr	r1, [r7, #24]
 800177a:	430b      	orrs	r3, r1
 800177c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001784:	2b01      	cmp	r3, #1
 8001786:	d118      	bne.n	80017ba <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800179a:	687a      	ldr	r2, [r7, #4]
 800179c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800179e:	4311      	orrs	r1, r2
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80017a4:	4311      	orrs	r1, r2
 80017a6:	687a      	ldr	r2, [r7, #4]
 80017a8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80017aa:	430a      	orrs	r2, r1
 80017ac:	431a      	orrs	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f042 0201 	orr.w	r2, r2, #1
 80017b6:	611a      	str	r2, [r3, #16]
 80017b8:	e007      	b.n	80017ca <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	691a      	ldr	r2, [r3, #16]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f022 0201 	bic.w	r2, r2, #1
 80017c8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	691b      	ldr	r3, [r3, #16]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10c      	bne.n	80017ec <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d8:	f023 010f 	bic.w	r1, r3, #15
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	631a      	str	r2, [r3, #48]	; 0x30
 80017ea:	e007      	b.n	80017fc <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020f 	bic.w	r2, r2, #15
 80017fa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001800:	f023 0303 	bic.w	r3, r3, #3
 8001804:	f043 0201 	orr.w	r2, r3, #1
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
 800180c:	e007      	b.n	800181e <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001812:	f043 0210 	orr.w	r2, r3, #16
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800181a:	2301      	movs	r3, #1
 800181c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800181e:	7ffb      	ldrb	r3, [r7, #31]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3720      	adds	r7, #32
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20000000 	.word	0x20000000
 800182c:	053e2d63 	.word	0x053e2d63
 8001830:	50040000 	.word	0x50040000
 8001834:	50040300 	.word	0x50040300
 8001838:	fff0c007 	.word	0xfff0c007

0800183c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff fe8c 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d167      	bne.n	8001928 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_ADC_Start_DMA+0x2a>
 8001862:	2302      	movs	r3, #2
 8001864:	e063      	b.n	800192e <HAL_ADC_Start_DMA+0xf2>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800186e:	68f8      	ldr	r0, [r7, #12]
 8001870:	f000 fe1c 	bl	80024ac <ADC_Enable>
 8001874:	4603      	mov	r3, r0
 8001876:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001878:	7dfb      	ldrb	r3, [r7, #23]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d14f      	bne.n	800191e <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001882:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001886:	f023 0301 	bic.w	r3, r3, #1
 800188a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001896:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d006      	beq.n	80018ac <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a2:	f023 0206 	bic.w	r2, r3, #6
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	659a      	str	r2, [r3, #88]	; 0x58
 80018aa:	e002      	b.n	80018b2 <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b6:	4a20      	ldr	r2, [pc, #128]	; (8001938 <HAL_ADC_Start_DMA+0xfc>)
 80018b8:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018be:	4a1f      	ldr	r2, [pc, #124]	; (800193c <HAL_ADC_Start_DMA+0x100>)
 80018c0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018c6:	4a1e      	ldr	r2, [pc, #120]	; (8001940 <HAL_ADC_Start_DMA+0x104>)
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	221c      	movs	r2, #28
 80018d0:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2200      	movs	r2, #0
 80018d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	685a      	ldr	r2, [r3, #4]
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f042 0210 	orr.w	r2, r2, #16
 80018e8:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	68da      	ldr	r2, [r3, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f042 0201 	orr.w	r2, r2, #1
 80018f8:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	3340      	adds	r3, #64	; 0x40
 8001904:	4619      	mov	r1, r3
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f001 f8e5 	bl	8002ad8 <HAL_DMA_Start_IT>
 800190e:	4603      	mov	r3, r0
 8001910:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4618      	mov	r0, r3
 8001918:	f7ff fe13 	bl	8001542 <LL_ADC_REG_StartConversion>
 800191c:	e006      	b.n	800192c <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	2200      	movs	r2, #0
 8001922:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8001926:	e001      	b.n	800192c <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001928:	2302      	movs	r3, #2
 800192a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800192c:	7dfb      	ldrb	r3, [r7, #23]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3718      	adds	r7, #24
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	080025b9 	.word	0x080025b9
 800193c:	08002691 	.word	0x08002691
 8001940:	080026ad 	.word	0x080026ad

08001944 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b088      	sub	sp, #32
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b00      	cmp	r3, #0
 8001968:	d017      	beq.n	800199a <HAL_ADC_IRQHandler+0x56>
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d012      	beq.n	800199a <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001984:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f000 fecf 	bl	8002730 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2202      	movs	r2, #2
 8001998:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	f003 0304 	and.w	r3, r3, #4
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d004      	beq.n	80019ae <HAL_ADC_IRQHandler+0x6a>
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	f003 0304 	and.w	r3, r3, #4
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d109      	bne.n	80019c2 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d05e      	beq.n	8001a76 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d059      	beq.n	8001a76 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff fc99 	bl	8001316 <LL_ADC_REG_IsTriggerSourceSWStart>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d03e      	beq.n	8001a68 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d135      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b08      	cmp	r3, #8
 8001a08:	d12e      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7ff fdab 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d11a      	bne.n	8001a50 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	685a      	ldr	r2, [r3, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f022 020c 	bic.w	r2, r2, #12
 8001a28:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d112      	bne.n	8001a68 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a46:	f043 0201 	orr.w	r2, r3, #1
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	655a      	str	r2, [r3, #84]	; 0x54
 8001a4e:	e00b      	b.n	8001a68 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a54:	f043 0210 	orr.w	r2, r3, #16
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a60:	f043 0201 	orr.w	r2, r3, #1
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7fe fd87 	bl	800057c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	220c      	movs	r2, #12
 8001a74:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a76:	69bb      	ldr	r3, [r7, #24]
 8001a78:	f003 0320 	and.w	r3, r3, #32
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d004      	beq.n	8001a8a <HAL_ADC_IRQHandler+0x146>
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	f003 0320 	and.w	r3, r3, #32
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d072      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d06d      	beq.n	8001b7a <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aa2:	f003 0310 	and.w	r3, r3, #16
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d105      	bne.n	8001ab6 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aae:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fc6a 	bl	8001394 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001ac0:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7ff fc25 	bl	8001316 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001acc:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d047      	beq.n	8001b6c <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d007      	beq.n	8001af6 <HAL_ADC_IRQHandler+0x1b2>
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d03f      	beq.n	8001b6c <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001aec:	693b      	ldr	r3, [r7, #16]
 8001aee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d13a      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b00:	2b40      	cmp	r3, #64	; 0x40
 8001b02:	d133      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d12e      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fd3c 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d11a      	bne.n	8001b54 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001b2c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d112      	bne.n	8001b6c <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4a:	f043 0201 	orr.w	r2, r3, #1
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
 8001b52:	e00b      	b.n	8001b6c <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b58:	f043 0210 	orr.w	r2, r3, #16
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b64:	f043 0201 	orr.w	r2, r3, #1
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 fdb7 	bl	80026e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	2260      	movs	r2, #96	; 0x60
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d011      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x264>
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d00c      	beq.n	8001ba8 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f890 	bl	8001cc0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2280      	movs	r2, #128	; 0x80
 8001ba6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001ba8:	69bb      	ldr	r3, [r7, #24]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <HAL_ADC_IRQHandler+0x294>
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00d      	beq.n	8001bd8 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 fd9d 	bl	8002708 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bd6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d012      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x2c4>
 8001be2:	697b      	ldr	r3, [r7, #20]
 8001be4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d00d      	beq.n	8001c08 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 fd8f 	bl	800271c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001c06:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	f003 0310 	and.w	r3, r3, #16
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d02a      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x324>
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d025      	beq.n	8001c68 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d102      	bne.n	8001c2a <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001c24:	2301      	movs	r3, #1
 8001c26:	61fb      	str	r3, [r7, #28]
 8001c28:	e008      	b.n	8001c3c <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	68db      	ldr	r3, [r3, #12]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d10e      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c46:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c52:	f043 0202 	orr.w	r2, r3, #2
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f83a 	bl	8001cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2210      	movs	r2, #16
 8001c66:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d018      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x360>
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d013      	beq.n	8001ca4 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c80:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c8c:	f043 0208 	orr.w	r2, r3, #8
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c9c:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001c9e:	6878      	ldr	r0, [r7, #4]
 8001ca0:	f000 fd28 	bl	80026f4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001ca4:	bf00      	nop
 8001ca6:	3720      	adds	r7, #32
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b083      	sub	sp, #12
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001cdc:	bf00      	nop
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b0b6      	sub	sp, #216	; 0xd8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d101      	bne.n	8001d0a <HAL_ADC_ConfigChannel+0x22>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e3bb      	b.n	8002482 <HAL_ADC_ConfigChannel+0x79a>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff fc27 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	f040 83a0 	bne.w	8002464 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	2b05      	cmp	r3, #5
 8001d32:	d824      	bhi.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	3b02      	subs	r3, #2
 8001d3a:	2b03      	cmp	r3, #3
 8001d3c:	d81b      	bhi.n	8001d76 <HAL_ADC_ConfigChannel+0x8e>
 8001d3e:	a201      	add	r2, pc, #4	; (adr r2, 8001d44 <HAL_ADC_ConfigChannel+0x5c>)
 8001d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d44:	08001d55 	.word	0x08001d55
 8001d48:	08001d5d 	.word	0x08001d5d
 8001d4c:	08001d65 	.word	0x08001d65
 8001d50:	08001d6d 	.word	0x08001d6d
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001d54:	230c      	movs	r3, #12
 8001d56:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d5a:	e010      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001d5c:	2312      	movs	r3, #18
 8001d5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d62:	e00c      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001d64:	2318      	movs	r3, #24
 8001d66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d6a:	e008      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001d6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d74:	e003      	b.n	8001d7e <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001d76:	2306      	movs	r3, #6
 8001d78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001d7c:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6818      	ldr	r0, [r3, #0]
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	461a      	mov	r2, r3
 8001d88:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001d8c:	f7ff fad6 	bl	800133c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fbe8 	bl	800156a <LL_ADC_REG_IsConversionOngoing>
 8001d9a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fbf4 	bl	8001590 <LL_ADC_INJ_IsConversionOngoing>
 8001da8:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001dac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	f040 81a4 	bne.w	80020fe <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001db6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	f040 819f 	bne.w	80020fe <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6818      	ldr	r0, [r3, #0]
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	6819      	ldr	r1, [r3, #0]
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	461a      	mov	r2, r3
 8001dce:	f7ff faf4 	bl	80013ba <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	08db      	lsrs	r3, r3, #3
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b04      	cmp	r3, #4
 8001df2:	d00a      	beq.n	8001e0a <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	6818      	ldr	r0, [r3, #0]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	6919      	ldr	r1, [r3, #16]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001e04:	f7ff fa32 	bl	800126c <LL_ADC_SetOffset>
 8001e08:	e179      	b.n	80020fe <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2100      	movs	r1, #0
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fa4f 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x14e>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2100      	movs	r1, #0
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fa44 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	0e9b      	lsrs	r3, r3, #26
 8001e30:	f003 021f 	and.w	r2, r3, #31
 8001e34:	e01e      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x18c>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fa39 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e58:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e5c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001e64:	2320      	movs	r3, #32
 8001e66:	e004      	b.n	8001e72 <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001e68:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1a4>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	e018      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1d6>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e94:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e98:	fa93 f3a3 	rbit	r3, r3
 8001e9c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001ea0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001ea8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d101      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001eb0:	2320      	movs	r3, #32
 8001eb2:	e004      	b.n	8001ebe <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001eb4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001eb8:	fab3 f383 	clz	r3, r3
 8001ebc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d106      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	2100      	movs	r1, #0
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f7ff fa08 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff f9ec 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10a      	bne.n	8001efc <HAL_ADC_ConfigChannel+0x214>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2101      	movs	r1, #1
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7ff f9e1 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	0e9b      	lsrs	r3, r3, #26
 8001ef6:	f003 021f 	and.w	r2, r3, #31
 8001efa:	e01e      	b.n	8001f3a <HAL_ADC_ConfigChannel+0x252>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	2101      	movs	r1, #1
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff f9d6 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f12:	fa93 f3a3 	rbit	r3, r3
 8001f16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001f22:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001f2a:	2320      	movs	r3, #32
 8001f2c:	e004      	b.n	8001f38 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001f2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001f32:	fab3 f383 	clz	r3, r3
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d105      	bne.n	8001f52 <HAL_ADC_ConfigChannel+0x26a>
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	0e9b      	lsrs	r3, r3, #26
 8001f4c:	f003 031f 	and.w	r3, r3, #31
 8001f50:	e018      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x29c>
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f5e:	fa93 f3a3 	rbit	r3, r3
 8001f62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8001f66:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f6a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 8001f6e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8001f76:	2320      	movs	r3, #32
 8001f78:	e004      	b.n	8001f84 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8001f7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f84:	429a      	cmp	r2, r3
 8001f86:	d106      	bne.n	8001f96 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	2101      	movs	r1, #1
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7ff f9a5 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	2102      	movs	r1, #2
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7ff f989 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d10a      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x2da>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2102      	movs	r1, #2
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff f97e 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	0e9b      	lsrs	r3, r3, #26
 8001fbc:	f003 021f 	and.w	r2, r3, #31
 8001fc0:	e01e      	b.n	8002000 <HAL_ADC_ConfigChannel+0x318>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2102      	movs	r1, #2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff f973 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001fd8:	fa93 f3a3 	rbit	r3, r3
 8001fdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 8001fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8001fe8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d101      	bne.n	8001ff4 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 8001ff0:	2320      	movs	r3, #32
 8001ff2:	e004      	b.n	8001ffe <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 8001ff4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001ff8:	fab3 f383 	clz	r3, r3
 8001ffc:	b2db      	uxtb	r3, r3
 8001ffe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x330>
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	0e9b      	lsrs	r3, r3, #26
 8002012:	f003 031f 	and.w	r3, r3, #31
 8002016:	e014      	b.n	8002042 <HAL_ADC_ConfigChannel+0x35a>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002020:	fa93 f3a3 	rbit	r3, r3
 8002024:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 8002026:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002028:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 800202c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002030:	2b00      	cmp	r3, #0
 8002032:	d101      	bne.n	8002038 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 8002034:	2320      	movs	r3, #32
 8002036:	e004      	b.n	8002042 <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 8002038:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800203c:	fab3 f383 	clz	r3, r3
 8002040:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002042:	429a      	cmp	r2, r3
 8002044:	d106      	bne.n	8002054 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	2200      	movs	r2, #0
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff f946 	bl	80012e0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2103      	movs	r1, #3
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff f92a 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8002060:	4603      	mov	r3, r0
 8002062:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10a      	bne.n	8002080 <HAL_ADC_ConfigChannel+0x398>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2103      	movs	r1, #3
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f91f 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 8002076:	4603      	mov	r3, r0
 8002078:	0e9b      	lsrs	r3, r3, #26
 800207a:	f003 021f 	and.w	r2, r3, #31
 800207e:	e017      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x3c8>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2103      	movs	r1, #3
 8002086:	4618      	mov	r0, r3
 8002088:	f7ff f914 	bl	80012b4 <LL_ADC_GetOffsetChannel>
 800208c:	4603      	mov	r3, r0
 800208e:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002090:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002092:	fa93 f3a3 	rbit	r3, r3
 8002096:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209a:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 800209c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d101      	bne.n	80020a6 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 80020a2:	2320      	movs	r3, #32
 80020a4:	e003      	b.n	80020ae <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 80020a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80020a8:	fab3 f383 	clz	r3, r3
 80020ac:	b2db      	uxtb	r3, r3
 80020ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d105      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x3e0>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	0e9b      	lsrs	r3, r3, #26
 80020c2:	f003 031f 	and.w	r3, r3, #31
 80020c6:	e011      	b.n	80020ec <HAL_ADC_ConfigChannel+0x404>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80020d0:	fa93 f3a3 	rbit	r3, r3
 80020d4:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 80020d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80020d8:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 80020da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e003      	b.n	80020ec <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80020e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80020e6:	fab3 f383 	clz	r3, r3
 80020ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2200      	movs	r2, #0
 80020f6:	2103      	movs	r1, #3
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff f8f1 	bl	80012e0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4618      	mov	r0, r3
 8002104:	f7ff fa0a 	bl	800151c <LL_ADC_IsEnabled>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	f040 8140 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	6819      	ldr	r1, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	461a      	mov	r2, r3
 800211e:	f7ff f977 	bl	8001410 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a8f      	ldr	r2, [pc, #572]	; (8002364 <HAL_ADC_ConfigChannel+0x67c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	f040 8131 	bne.w	8002390 <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10b      	bne.n	8002156 <HAL_ADC_ConfigChannel+0x46e>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	0e9b      	lsrs	r3, r3, #26
 8002144:	3301      	adds	r3, #1
 8002146:	f003 031f 	and.w	r3, r3, #31
 800214a:	2b09      	cmp	r3, #9
 800214c:	bf94      	ite	ls
 800214e:	2301      	movls	r3, #1
 8002150:	2300      	movhi	r3, #0
 8002152:	b2db      	uxtb	r3, r3
 8002154:	e019      	b.n	800218a <HAL_ADC_ConfigChannel+0x4a2>
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800215c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800215e:	fa93 f3a3 	rbit	r3, r3
 8002162:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002164:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002166:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002168:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800216a:	2b00      	cmp	r3, #0
 800216c:	d101      	bne.n	8002172 <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800216e:	2320      	movs	r3, #32
 8002170:	e003      	b.n	800217a <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 8002172:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002174:	fab3 f383 	clz	r3, r3
 8002178:	b2db      	uxtb	r3, r3
 800217a:	3301      	adds	r3, #1
 800217c:	f003 031f 	and.w	r3, r3, #31
 8002180:	2b09      	cmp	r3, #9
 8002182:	bf94      	ite	ls
 8002184:	2301      	movls	r3, #1
 8002186:	2300      	movhi	r3, #0
 8002188:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800218a:	2b00      	cmp	r3, #0
 800218c:	d079      	beq.n	8002282 <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002196:	2b00      	cmp	r3, #0
 8002198:	d107      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x4c2>
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0e9b      	lsrs	r3, r3, #26
 80021a0:	3301      	adds	r3, #1
 80021a2:	069b      	lsls	r3, r3, #26
 80021a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021a8:	e015      	b.n	80021d6 <HAL_ADC_ConfigChannel+0x4ee>
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ba:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 80021c2:	2320      	movs	r3, #32
 80021c4:	e003      	b.n	80021ce <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 80021c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	3301      	adds	r3, #1
 80021d0:	069b      	lsls	r3, r3, #26
 80021d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_ADC_ConfigChannel+0x50e>
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	0e9b      	lsrs	r3, r3, #26
 80021e8:	3301      	adds	r3, #1
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	2101      	movs	r1, #1
 80021f0:	fa01 f303 	lsl.w	r3, r1, r3
 80021f4:	e017      	b.n	8002226 <HAL_ADC_ConfigChannel+0x53e>
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002206:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800220a:	2b00      	cmp	r3, #0
 800220c:	d101      	bne.n	8002212 <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 800220e:	2320      	movs	r3, #32
 8002210:	e003      	b.n	800221a <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 8002212:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	ea42 0103 	orr.w	r1, r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <HAL_ADC_ConfigChannel+0x564>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	051b      	lsls	r3, r3, #20
 800224a:	e018      	b.n	800227e <HAL_ADC_ConfigChannel+0x596>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002254:	fa93 f3a3 	rbit	r3, r3
 8002258:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 800225a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800225c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800225e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002260:	2b00      	cmp	r3, #0
 8002262:	d101      	bne.n	8002268 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002264:	2320      	movs	r3, #32
 8002266:	e003      	b.n	8002270 <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002268:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226a:	fab3 f383 	clz	r3, r3
 800226e:	b2db      	uxtb	r3, r3
 8002270:	3301      	adds	r3, #1
 8002272:	f003 021f 	and.w	r2, r3, #31
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227e:	430b      	orrs	r3, r1
 8002280:	e081      	b.n	8002386 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d107      	bne.n	800229e <HAL_ADC_ConfigChannel+0x5b6>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	3301      	adds	r3, #1
 8002296:	069b      	lsls	r3, r3, #26
 8002298:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800229c:	e015      	b.n	80022ca <HAL_ADC_ConfigChannel+0x5e2>
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d101      	bne.n	80022ba <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 80022b6:	2320      	movs	r3, #32
 80022b8:	e003      	b.n	80022c2 <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 80022ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022bc:	fab3 f383 	clz	r3, r3
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	3301      	adds	r3, #1
 80022c4:	069b      	lsls	r3, r3, #26
 80022c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d109      	bne.n	80022ea <HAL_ADC_ConfigChannel+0x602>
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	0e9b      	lsrs	r3, r3, #26
 80022dc:	3301      	adds	r3, #1
 80022de:	f003 031f 	and.w	r3, r3, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f303 	lsl.w	r3, r1, r3
 80022e8:	e017      	b.n	800231a <HAL_ADC_ConfigChannel+0x632>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	fa93 f3a3 	rbit	r3, r3
 80022f6:	61bb      	str	r3, [r7, #24]
  return result;
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80022fc:	6a3b      	ldr	r3, [r7, #32]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 8002302:	2320      	movs	r3, #32
 8002304:	e003      	b.n	800230e <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 8002306:	6a3b      	ldr	r3, [r7, #32]
 8002308:	fab3 f383 	clz	r3, r3
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f003 031f 	and.w	r3, r3, #31
 8002314:	2101      	movs	r1, #1
 8002316:	fa01 f303 	lsl.w	r3, r1, r3
 800231a:	ea42 0103 	orr.w	r1, r2, r3
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10d      	bne.n	8002346 <HAL_ADC_ConfigChannel+0x65e>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	0e9b      	lsrs	r3, r3, #26
 8002330:	3301      	adds	r3, #1
 8002332:	f003 021f 	and.w	r2, r3, #31
 8002336:	4613      	mov	r3, r2
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	4413      	add	r3, r2
 800233c:	3b1e      	subs	r3, #30
 800233e:	051b      	lsls	r3, r3, #20
 8002340:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002344:	e01e      	b.n	8002384 <HAL_ADC_ConfigChannel+0x69c>
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	fa93 f3a3 	rbit	r3, r3
 8002352:	60fb      	str	r3, [r7, #12]
  return result;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d104      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800235e:	2320      	movs	r3, #32
 8002360:	e006      	b.n	8002370 <HAL_ADC_ConfigChannel+0x688>
 8002362:	bf00      	nop
 8002364:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	fab3 f383 	clz	r3, r3
 800236e:	b2db      	uxtb	r3, r3
 8002370:	3301      	adds	r3, #1
 8002372:	f003 021f 	and.w	r2, r3, #31
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	3b1e      	subs	r3, #30
 800237e:	051b      	lsls	r3, r3, #20
 8002380:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002384:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238a:	4619      	mov	r1, r3
 800238c:	f7ff f815 	bl	80013ba <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b3d      	ldr	r3, [pc, #244]	; (800248c <HAL_ADC_ConfigChannel+0x7a4>)
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d06c      	beq.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800239c:	483c      	ldr	r0, [pc, #240]	; (8002490 <HAL_ADC_ConfigChannel+0x7a8>)
 800239e:	f7fe ff57 	bl	8001250 <LL_ADC_GetCommonPathInternalCh>
 80023a2:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a3a      	ldr	r2, [pc, #232]	; (8002494 <HAL_ADC_ConfigChannel+0x7ac>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d127      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80023b0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d121      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a35      	ldr	r2, [pc, #212]	; (8002498 <HAL_ADC_ConfigChannel+0x7b0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d157      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80023ca:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023ce:	4619      	mov	r1, r3
 80023d0:	482f      	ldr	r0, [pc, #188]	; (8002490 <HAL_ADC_ConfigChannel+0x7a8>)
 80023d2:	f7fe ff2a 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023d6:	4b31      	ldr	r3, [pc, #196]	; (800249c <HAL_ADC_ConfigChannel+0x7b4>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	099b      	lsrs	r3, r3, #6
 80023dc:	4a30      	ldr	r2, [pc, #192]	; (80024a0 <HAL_ADC_ConfigChannel+0x7b8>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	099b      	lsrs	r3, r3, #6
 80023e4:	1c5a      	adds	r2, r3, #1
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f0:	e002      	b.n	80023f8 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	3b01      	subs	r3, #1
 80023f6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d1f9      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023fe:	e03a      	b.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a27      	ldr	r2, [pc, #156]	; (80024a4 <HAL_ADC_ConfigChannel+0x7bc>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d113      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800240a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800240e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10d      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a1f      	ldr	r2, [pc, #124]	; (8002498 <HAL_ADC_ConfigChannel+0x7b0>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d12a      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002420:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002428:	4619      	mov	r1, r3
 800242a:	4819      	ldr	r0, [pc, #100]	; (8002490 <HAL_ADC_ConfigChannel+0x7a8>)
 800242c:	f7fe fefd 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002430:	e021      	b.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a1c      	ldr	r2, [pc, #112]	; (80024a8 <HAL_ADC_ConfigChannel+0x7c0>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d11c      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800243c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002440:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d116      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_ADC_ConfigChannel+0x7b0>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d111      	bne.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002452:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002456:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800245a:	4619      	mov	r1, r3
 800245c:	480c      	ldr	r0, [pc, #48]	; (8002490 <HAL_ADC_ConfigChannel+0x7a8>)
 800245e:	f7fe fee4 	bl	800122a <LL_ADC_SetCommonPathInternalCh>
 8002462:	e008      	b.n	8002476 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800247e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002482:	4618      	mov	r0, r3
 8002484:	37d8      	adds	r7, #216	; 0xd8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	80080000 	.word	0x80080000
 8002490:	50040300 	.word	0x50040300
 8002494:	c7520000 	.word	0xc7520000
 8002498:	50040000 	.word	0x50040000
 800249c:	20000000 	.word	0x20000000
 80024a0:	053e2d63 	.word	0x053e2d63
 80024a4:	cb840000 	.word	0xcb840000
 80024a8:	80000001 	.word	0x80000001

080024ac <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80024b4:	2300      	movs	r3, #0
 80024b6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7ff f82d 	bl	800151c <LL_ADC_IsEnabled>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d169      	bne.n	800259c <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	4b36      	ldr	r3, [pc, #216]	; (80025a8 <ADC_Enable+0xfc>)
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d00d      	beq.n	80024f2 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0210 	orr.w	r2, r3, #16
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e6:	f043 0201 	orr.w	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e055      	b.n	800259e <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe fffc 	bl	80014f4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80024fc:	482b      	ldr	r0, [pc, #172]	; (80025ac <ADC_Enable+0x100>)
 80024fe:	f7fe fea7 	bl	8001250 <LL_ADC_GetCommonPathInternalCh>
 8002502:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002504:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002508:	2b00      	cmp	r3, #0
 800250a:	d013      	beq.n	8002534 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800250c:	4b28      	ldr	r3, [pc, #160]	; (80025b0 <ADC_Enable+0x104>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	099b      	lsrs	r3, r3, #6
 8002512:	4a28      	ldr	r2, [pc, #160]	; (80025b4 <ADC_Enable+0x108>)
 8002514:	fba2 2303 	umull	r2, r3, r2, r3
 8002518:	099b      	lsrs	r3, r3, #6
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002526:	e002      	b.n	800252e <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	3b01      	subs	r3, #1
 800252c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800252e:	68bb      	ldr	r3, [r7, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f9      	bne.n	8002528 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002534:	f7fe fe36 	bl	80011a4 <HAL_GetTick>
 8002538:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800253a:	e028      	b.n	800258e <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4618      	mov	r0, r3
 8002542:	f7fe ffeb 	bl	800151c <LL_ADC_IsEnabled>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d104      	bne.n	8002556 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4618      	mov	r0, r3
 8002552:	f7fe ffcf 	bl	80014f4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002556:	f7fe fe25 	bl	80011a4 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d914      	bls.n	800258e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b01      	cmp	r3, #1
 8002570:	d00d      	beq.n	800258e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002576:	f043 0210 	orr.w	r2, r3, #16
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e007      	b.n	800259e <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d1cf      	bne.n	800253c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800259c:	2300      	movs	r3, #0
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	8000003f 	.word	0x8000003f
 80025ac:	50040300 	.word	0x50040300
 80025b0:	20000000 	.word	0x20000000
 80025b4:	053e2d63 	.word	0x053e2d63

080025b8 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d14b      	bne.n	800266a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d021      	beq.n	8002630 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4618      	mov	r0, r3
 80025f2:	f7fe fe90 	bl	8001316 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d032      	beq.n	8002662 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d12b      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d11f      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002626:	f043 0201 	orr.w	r2, r3, #1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
 800262e:	e018      	b.n	8002662 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d111      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002642:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800264e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265a:	f043 0201 	orr.w	r2, r3, #1
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002662:	68f8      	ldr	r0, [r7, #12]
 8002664:	f7fd ff8a 	bl	800057c <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002668:	e00e      	b.n	8002688 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002676:	68f8      	ldr	r0, [r7, #12]
 8002678:	f7ff fb2c 	bl	8001cd4 <HAL_ADC_ErrorCallback>
}
 800267c:	e004      	b.n	8002688 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	4798      	blx	r3
}
 8002688:	bf00      	nop
 800268a:	3710      	adds	r7, #16
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}

08002690 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800269e:	68f8      	ldr	r0, [r7, #12]
 80026a0:	f7ff fb04 	bl	8001cac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026a4:	bf00      	nop
 80026a6:	3710      	adds	r7, #16
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd80      	pop	{r7, pc}

080026ac <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b084      	sub	sp, #16
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b8:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f043 0204 	orr.w	r2, r3, #4
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80026d2:	68f8      	ldr	r0, [r7, #12]
 80026d4:	f7ff fafe 	bl	8001cd4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80026d8:	bf00      	nop
 80026da:	3710      	adds	r7, #16
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80026fc:	bf00      	nop
 80026fe:	370c      	adds	r7, #12
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002710:	bf00      	nop
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr

08002744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002744:	b480      	push	{r7}
 8002746:	b085      	sub	sp, #20
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f003 0307 	and.w	r3, r3, #7
 8002752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002754:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002760:	4013      	ands	r3, r2
 8002762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800276c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002770:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002776:	4a04      	ldr	r2, [pc, #16]	; (8002788 <__NVIC_SetPriorityGrouping+0x44>)
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	60d3      	str	r3, [r2, #12]
}
 800277c:	bf00      	nop
 800277e:	3714      	adds	r7, #20
 8002780:	46bd      	mov	sp, r7
 8002782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002786:	4770      	bx	lr
 8002788:	e000ed00 	.word	0xe000ed00

0800278c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002790:	4b04      	ldr	r3, [pc, #16]	; (80027a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0307 	and.w	r3, r3, #7
}
 800279a:	4618      	mov	r0, r3
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	4603      	mov	r3, r0
 80027b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	db0b      	blt.n	80027d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ba:	79fb      	ldrb	r3, [r7, #7]
 80027bc:	f003 021f 	and.w	r2, r3, #31
 80027c0:	4907      	ldr	r1, [pc, #28]	; (80027e0 <__NVIC_EnableIRQ+0x38>)
 80027c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	2001      	movs	r0, #1
 80027ca:	fa00 f202 	lsl.w	r2, r0, r2
 80027ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027d2:	bf00      	nop
 80027d4:	370c      	adds	r7, #12
 80027d6:	46bd      	mov	sp, r7
 80027d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027dc:	4770      	bx	lr
 80027de:	bf00      	nop
 80027e0:	e000e100 	.word	0xe000e100

080027e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	6039      	str	r1, [r7, #0]
 80027ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	db0a      	blt.n	800280e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	490c      	ldr	r1, [pc, #48]	; (8002830 <__NVIC_SetPriority+0x4c>)
 80027fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002802:	0112      	lsls	r2, r2, #4
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	440b      	add	r3, r1
 8002808:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800280c:	e00a      	b.n	8002824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	4908      	ldr	r1, [pc, #32]	; (8002834 <__NVIC_SetPriority+0x50>)
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	3b04      	subs	r3, #4
 800281c:	0112      	lsls	r2, r2, #4
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	440b      	add	r3, r1
 8002822:	761a      	strb	r2, [r3, #24]
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr
 8002830:	e000e100 	.word	0xe000e100
 8002834:	e000ed00 	.word	0xe000ed00

08002838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002838:	b480      	push	{r7}
 800283a:	b089      	sub	sp, #36	; 0x24
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f1c3 0307 	rsb	r3, r3, #7
 8002852:	2b04      	cmp	r3, #4
 8002854:	bf28      	it	cs
 8002856:	2304      	movcs	r3, #4
 8002858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800285a:	69fb      	ldr	r3, [r7, #28]
 800285c:	3304      	adds	r3, #4
 800285e:	2b06      	cmp	r3, #6
 8002860:	d902      	bls.n	8002868 <NVIC_EncodePriority+0x30>
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3b03      	subs	r3, #3
 8002866:	e000      	b.n	800286a <NVIC_EncodePriority+0x32>
 8002868:	2300      	movs	r3, #0
 800286a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800286c:	f04f 32ff 	mov.w	r2, #4294967295
 8002870:	69bb      	ldr	r3, [r7, #24]
 8002872:	fa02 f303 	lsl.w	r3, r2, r3
 8002876:	43da      	mvns	r2, r3
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	401a      	ands	r2, r3
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002880:	f04f 31ff 	mov.w	r1, #4294967295
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	fa01 f303 	lsl.w	r3, r1, r3
 800288a:	43d9      	mvns	r1, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	4313      	orrs	r3, r2
         );
}
 8002892:	4618      	mov	r0, r3
 8002894:	3724      	adds	r7, #36	; 0x24
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
	...

080028a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028b0:	d301      	bcc.n	80028b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00f      	b.n	80028d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028b6:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <SysTick_Config+0x40>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	3b01      	subs	r3, #1
 80028bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028be:	210f      	movs	r1, #15
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295
 80028c4:	f7ff ff8e 	bl	80027e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028c8:	4b05      	ldr	r3, [pc, #20]	; (80028e0 <SysTick_Config+0x40>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ce:	4b04      	ldr	r3, [pc, #16]	; (80028e0 <SysTick_Config+0x40>)
 80028d0:	2207      	movs	r2, #7
 80028d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3708      	adds	r7, #8
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	e000e010 	.word	0xe000e010

080028e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f7ff ff29 	bl	8002744 <__NVIC_SetPriorityGrouping>
}
 80028f2:	bf00      	nop
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b086      	sub	sp, #24
 80028fe:	af00      	add	r7, sp, #0
 8002900:	4603      	mov	r3, r0
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002908:	2300      	movs	r3, #0
 800290a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800290c:	f7ff ff3e 	bl	800278c <__NVIC_GetPriorityGrouping>
 8002910:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	68b9      	ldr	r1, [r7, #8]
 8002916:	6978      	ldr	r0, [r7, #20]
 8002918:	f7ff ff8e 	bl	8002838 <NVIC_EncodePriority>
 800291c:	4602      	mov	r2, r0
 800291e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002922:	4611      	mov	r1, r2
 8002924:	4618      	mov	r0, r3
 8002926:	f7ff ff5d 	bl	80027e4 <__NVIC_SetPriority>
}
 800292a:	bf00      	nop
 800292c:	3718      	adds	r7, #24
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800293c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff31 	bl	80027a8 <__NVIC_EnableIRQ>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ffa2 	bl	80028a0 <SysTick_Config>
 800295c:	4603      	mov	r3, r0
}
 800295e:	4618      	mov	r0, r3
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}
	...

08002968 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d101      	bne.n	800297a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e098      	b.n	8002aac <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	461a      	mov	r2, r3
 8002980:	4b4d      	ldr	r3, [pc, #308]	; (8002ab8 <HAL_DMA_Init+0x150>)
 8002982:	429a      	cmp	r2, r3
 8002984:	d80f      	bhi.n	80029a6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	461a      	mov	r2, r3
 800298c:	4b4b      	ldr	r3, [pc, #300]	; (8002abc <HAL_DMA_Init+0x154>)
 800298e:	4413      	add	r3, r2
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_DMA_Init+0x158>)
 8002992:	fba2 2303 	umull	r2, r3, r2, r3
 8002996:	091b      	lsrs	r3, r3, #4
 8002998:	009a      	lsls	r2, r3, #2
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a48      	ldr	r2, [pc, #288]	; (8002ac4 <HAL_DMA_Init+0x15c>)
 80029a2:	641a      	str	r2, [r3, #64]	; 0x40
 80029a4:	e00e      	b.n	80029c4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b46      	ldr	r3, [pc, #280]	; (8002ac8 <HAL_DMA_Init+0x160>)
 80029ae:	4413      	add	r3, r2
 80029b0:	4a43      	ldr	r2, [pc, #268]	; (8002ac0 <HAL_DMA_Init+0x158>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	091b      	lsrs	r3, r3, #4
 80029b8:	009a      	lsls	r2, r3, #2
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	4a42      	ldr	r2, [pc, #264]	; (8002acc <HAL_DMA_Init+0x164>)
 80029c2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2202      	movs	r2, #2
 80029c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80029da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029de:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80029e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	691b      	ldr	r3, [r3, #16]
 80029ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80029f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	68fa      	ldr	r2, [r7, #12]
 8002a14:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a1e:	d039      	beq.n	8002a94 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a24:	4a27      	ldr	r2, [pc, #156]	; (8002ac4 <HAL_DMA_Init+0x15c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d11a      	bne.n	8002a60 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a2a:	4b29      	ldr	r3, [pc, #164]	; (8002ad0 <HAL_DMA_Init+0x168>)
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a32:	f003 031c 	and.w	r3, r3, #28
 8002a36:	210f      	movs	r1, #15
 8002a38:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3c:	43db      	mvns	r3, r3
 8002a3e:	4924      	ldr	r1, [pc, #144]	; (8002ad0 <HAL_DMA_Init+0x168>)
 8002a40:	4013      	ands	r3, r2
 8002a42:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_DMA_Init+0x168>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6859      	ldr	r1, [r3, #4]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f003 031c 	and.w	r3, r3, #28
 8002a54:	fa01 f303 	lsl.w	r3, r1, r3
 8002a58:	491d      	ldr	r1, [pc, #116]	; (8002ad0 <HAL_DMA_Init+0x168>)
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]
 8002a5e:	e019      	b.n	8002a94 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002a60:	4b1c      	ldr	r3, [pc, #112]	; (8002ad4 <HAL_DMA_Init+0x16c>)
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a68:	f003 031c 	and.w	r3, r3, #28
 8002a6c:	210f      	movs	r1, #15
 8002a6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a72:	43db      	mvns	r3, r3
 8002a74:	4917      	ldr	r1, [pc, #92]	; (8002ad4 <HAL_DMA_Init+0x16c>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002a7a:	4b16      	ldr	r3, [pc, #88]	; (8002ad4 <HAL_DMA_Init+0x16c>)
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6859      	ldr	r1, [r3, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a86:	f003 031c 	and.w	r3, r3, #28
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	4911      	ldr	r1, [pc, #68]	; (8002ad4 <HAL_DMA_Init+0x16c>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2200      	movs	r2, #0
 8002a98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40020407 	.word	0x40020407
 8002abc:	bffdfff8 	.word	0xbffdfff8
 8002ac0:	cccccccd 	.word	0xcccccccd
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	bffdfbf8 	.word	0xbffdfbf8
 8002acc:	40020400 	.word	0x40020400
 8002ad0:	400200a8 	.word	0x400200a8
 8002ad4:	400204a8 	.word	0x400204a8

08002ad8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d101      	bne.n	8002af8 <HAL_DMA_Start_IT+0x20>
 8002af4:	2302      	movs	r3, #2
 8002af6:	e04b      	b.n	8002b90 <HAL_DMA_Start_IT+0xb8>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2201      	movs	r2, #1
 8002afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d13a      	bne.n	8002b82 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2202      	movs	r2, #2
 8002b10:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0201 	bic.w	r2, r2, #1
 8002b28:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	68b9      	ldr	r1, [r7, #8]
 8002b30:	68f8      	ldr	r0, [r7, #12]
 8002b32:	f000 f92f 	bl	8002d94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d008      	beq.n	8002b50 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681a      	ldr	r2, [r3, #0]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f042 020e 	orr.w	r2, r2, #14
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	e00f      	b.n	8002b70 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681a      	ldr	r2, [r3, #0]
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f022 0204 	bic.w	r2, r2, #4
 8002b5e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f042 020a 	orr.w	r2, r2, #10
 8002b6e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f042 0201 	orr.w	r2, r2, #1
 8002b7e:	601a      	str	r2, [r3, #0]
 8002b80:	e005      	b.n	8002b8e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d005      	beq.n	8002bbc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2204      	movs	r2, #4
 8002bb4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	73fb      	strb	r3, [r7, #15]
 8002bba:	e029      	b.n	8002c10 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f022 020e 	bic.w	r2, r2, #14
 8002bca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f022 0201 	bic.w	r2, r2, #1
 8002bda:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	f003 021c 	and.w	r2, r3, #28
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be8:	2101      	movs	r1, #1
 8002bea:	fa01 f202 	lsl.w	r2, r1, r2
 8002bee:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2201      	movs	r2, #1
 8002bf4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d003      	beq.n	8002c10 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	4798      	blx	r3
    }
  }
  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b084      	sub	sp, #16
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c36:	f003 031c 	and.w	r3, r3, #28
 8002c3a:	2204      	movs	r2, #4
 8002c3c:	409a      	lsls	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	4013      	ands	r3, r2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d026      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x7a>
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	f003 0304 	and.w	r3, r3, #4
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d021      	beq.n	8002c94 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0320 	and.w	r3, r3, #32
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d107      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 0204 	bic.w	r2, r2, #4
 8002c6c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c72:	f003 021c 	and.w	r2, r3, #28
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	fa01 f202 	lsl.w	r2, r1, r2
 8002c80:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d071      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002c92:	e06c      	b.n	8002d6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c98:	f003 031c 	and.w	r3, r3, #28
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d02e      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xec>
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d029      	beq.n	8002d06 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 0320 	and.w	r3, r3, #32
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d10b      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 020a 	bic.w	r2, r2, #10
 8002cce:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cdc:	f003 021c 	and.w	r2, r3, #28
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	2102      	movs	r1, #2
 8002ce6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d038      	beq.n	8002d6e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002d04:	e033      	b.n	8002d6e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	f003 031c 	and.w	r3, r3, #28
 8002d0e:	2208      	movs	r2, #8
 8002d10:	409a      	lsls	r2, r3
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	4013      	ands	r3, r2
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d02a      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x156>
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	f003 0308 	and.w	r3, r3, #8
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d025      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f022 020e 	bic.w	r2, r2, #14
 8002d32:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d38:	f003 021c 	and.w	r2, r3, #28
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	2101      	movs	r1, #1
 8002d42:	fa01 f202 	lsl.w	r2, r1, r2
 8002d46:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2201      	movs	r2, #1
 8002d52:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d004      	beq.n	8002d70 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002d6e:	bf00      	nop
 8002d70:	bf00      	nop
}
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d86:	b2db      	uxtb	r3, r3
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr

08002d94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	60f8      	str	r0, [r7, #12]
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	f003 021c 	and.w	r2, r3, #28
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	2101      	movs	r1, #1
 8002db0:	fa01 f202 	lsl.w	r2, r1, r2
 8002db4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	683a      	ldr	r2, [r7, #0]
 8002dbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d108      	bne.n	8002dd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	687a      	ldr	r2, [r7, #4]
 8002dcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002dd6:	e007      	b.n	8002de8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	60da      	str	r2, [r3, #12]
}
 8002de8:	bf00      	nop
 8002dea:	3714      	adds	r7, #20
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e02:	e148      	b.n	8003096 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	2101      	movs	r1, #1
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002e10:	4013      	ands	r3, r2
 8002e12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	f000 813a 	beq.w	8003090 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f003 0303 	and.w	r3, r3, #3
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d005      	beq.n	8002e34 <HAL_GPIO_Init+0x40>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f003 0303 	and.w	r3, r3, #3
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d130      	bne.n	8002e96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	2203      	movs	r2, #3
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	68da      	ldr	r2, [r3, #12]
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	693a      	ldr	r2, [r7, #16]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	693a      	ldr	r2, [r7, #16]
 8002e62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e72:	43db      	mvns	r3, r3
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4013      	ands	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	091b      	lsrs	r3, r3, #4
 8002e80:	f003 0201 	and.w	r2, r3, #1
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8a:	693a      	ldr	r2, [r7, #16]
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f003 0303 	and.w	r3, r3, #3
 8002e9e:	2b03      	cmp	r3, #3
 8002ea0:	d017      	beq.n	8002ed2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	005b      	lsls	r3, r3, #1
 8002eac:	2203      	movs	r2, #3
 8002eae:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb2:	43db      	mvns	r3, r3
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	689a      	ldr	r2, [r3, #8]
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	693a      	ldr	r2, [r7, #16]
 8002ed0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d123      	bne.n	8002f26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	08da      	lsrs	r2, r3, #3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	3208      	adds	r2, #8
 8002ee6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0307 	and.w	r3, r3, #7
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	220f      	movs	r2, #15
 8002ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8002efa:	43db      	mvns	r3, r3
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	4013      	ands	r3, r2
 8002f00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	691a      	ldr	r2, [r3, #16]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	f003 0307 	and.w	r3, r3, #7
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4313      	orrs	r3, r2
 8002f16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	08da      	lsrs	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	3208      	adds	r2, #8
 8002f20:	6939      	ldr	r1, [r7, #16]
 8002f22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	693a      	ldr	r2, [r7, #16]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0203 	and.w	r2, r3, #3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4e:	693a      	ldr	r2, [r7, #16]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	693a      	ldr	r2, [r7, #16]
 8002f58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 8094 	beq.w	8003090 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f68:	4b52      	ldr	r3, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x2c0>)
 8002f6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f6c:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <HAL_GPIO_Init+0x2c0>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6613      	str	r3, [r2, #96]	; 0x60
 8002f74:	4b4f      	ldr	r3, [pc, #316]	; (80030b4 <HAL_GPIO_Init+0x2c0>)
 8002f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002f80:	4a4d      	ldr	r2, [pc, #308]	; (80030b8 <HAL_GPIO_Init+0x2c4>)
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0303 	and.w	r3, r3, #3
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	220f      	movs	r2, #15
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002faa:	d00d      	beq.n	8002fc8 <HAL_GPIO_Init+0x1d4>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a43      	ldr	r2, [pc, #268]	; (80030bc <HAL_GPIO_Init+0x2c8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d007      	beq.n	8002fc4 <HAL_GPIO_Init+0x1d0>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a42      	ldr	r2, [pc, #264]	; (80030c0 <HAL_GPIO_Init+0x2cc>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d101      	bne.n	8002fc0 <HAL_GPIO_Init+0x1cc>
 8002fbc:	2302      	movs	r3, #2
 8002fbe:	e004      	b.n	8002fca <HAL_GPIO_Init+0x1d6>
 8002fc0:	2307      	movs	r3, #7
 8002fc2:	e002      	b.n	8002fca <HAL_GPIO_Init+0x1d6>
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_GPIO_Init+0x1d6>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	f002 0203 	and.w	r2, r2, #3
 8002fd0:	0092      	lsls	r2, r2, #2
 8002fd2:	4093      	lsls	r3, r2
 8002fd4:	693a      	ldr	r2, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002fda:	4937      	ldr	r1, [pc, #220]	; (80030b8 <HAL_GPIO_Init+0x2c4>)
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	089b      	lsrs	r3, r3, #2
 8002fe0:	3302      	adds	r3, #2
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fe8:	4b36      	ldr	r3, [pc, #216]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	43db      	mvns	r3, r3
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003000:	2b00      	cmp	r3, #0
 8003002:	d003      	beq.n	800300c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003004:	693a      	ldr	r2, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800300c:	4a2d      	ldr	r2, [pc, #180]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003012:	4b2c      	ldr	r3, [pc, #176]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003014:	68db      	ldr	r3, [r3, #12]
 8003016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	43db      	mvns	r3, r3
 800301c:	693a      	ldr	r2, [r7, #16]
 800301e:	4013      	ands	r3, r2
 8003020:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	4313      	orrs	r3, r2
 8003034:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003036:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800303c:	4b21      	ldr	r3, [pc, #132]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003058:	693a      	ldr	r2, [r7, #16]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4313      	orrs	r3, r2
 800305e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003060:	4a18      	ldr	r2, [pc, #96]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003066:	4b17      	ldr	r3, [pc, #92]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	43db      	mvns	r3, r3
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4013      	ands	r3, r2
 8003074:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003082:	693a      	ldr	r2, [r7, #16]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800308a:	4a0e      	ldr	r2, [pc, #56]	; (80030c4 <HAL_GPIO_Init+0x2d0>)
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	3301      	adds	r3, #1
 8003094:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	697b      	ldr	r3, [r7, #20]
 800309c:	fa22 f303 	lsr.w	r3, r2, r3
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f47f aeaf 	bne.w	8002e04 <HAL_GPIO_Init+0x10>
  }
}
 80030a6:	bf00      	nop
 80030a8:	bf00      	nop
 80030aa:	371c      	adds	r7, #28
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr
 80030b4:	40021000 	.word	0x40021000
 80030b8:	40010000 	.word	0x40010000
 80030bc:	48000400 	.word	0x48000400
 80030c0:	48000800 	.word	0x48000800
 80030c4:	40010400 	.word	0x40010400

080030c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	460b      	mov	r3, r1
 80030d2:	807b      	strh	r3, [r7, #2]
 80030d4:	4613      	mov	r3, r2
 80030d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030d8:	787b      	ldrb	r3, [r7, #1]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d003      	beq.n	80030e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030de:	887a      	ldrh	r2, [r7, #2]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80030e4:	e002      	b.n	80030ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80030e6:	887a      	ldrh	r2, [r7, #2]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80030ec:	bf00      	nop
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fdd2 	bl	8000cc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2224      	movs	r2, #36	; 0x24
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0201 	bic.w	r2, r2, #1
 800313a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003148:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003158:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d107      	bne.n	8003172 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	e006      	b.n	8003180 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689a      	ldr	r2, [r3, #8]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800317e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d108      	bne.n	800319a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685a      	ldr	r2, [r3, #4]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003196:	605a      	str	r2, [r3, #4]
 8003198:	e007      	b.n	80031aa <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685a      	ldr	r2, [r3, #4]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031a8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80031bc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	68da      	ldr	r2, [r3, #12]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031cc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	691a      	ldr	r2, [r3, #16]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	69d9      	ldr	r1, [r3, #28]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6a1a      	ldr	r2, [r3, #32]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	430a      	orrs	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f042 0201 	orr.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2220      	movs	r2, #32
 8003212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	3708      	adds	r7, #8
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}

0800322e <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800322e:	b580      	push	{r7, lr}
 8003230:	b084      	sub	sp, #16
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699b      	ldr	r3, [r3, #24]
 800323c:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324a:	2b00      	cmp	r3, #0
 800324c:	d005      	beq.n	800325a <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003252:	68ba      	ldr	r2, [r7, #8]
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
  }
}
 800325a:	bf00      	nop
 800325c:	3710      	adds	r7, #16
 800325e:	46bd      	mov	sp, r7
 8003260:	bd80      	pop	{r7, pc}

08003262 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003262:	b580      	push	{r7, lr}
 8003264:	b086      	sub	sp, #24
 8003266:	af00      	add	r7, sp, #0
 8003268:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	699b      	ldr	r3, [r3, #24]
 8003270:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00f      	beq.n	80032a4 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003292:	f043 0201 	orr.w	r2, r3, #1
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032a2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00f      	beq.n	80032ce <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d00a      	beq.n	80032ce <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032bc:	f043 0208 	orr.w	r2, r3, #8
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032cc:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00f      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e6:	f043 0202 	orr.w	r2, r3, #2
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032f6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	f003 030b 	and.w	r3, r3, #11
 8003304:	2b00      	cmp	r3, #0
 8003306:	d003      	beq.n	8003310 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8003308:	68f9      	ldr	r1, [r7, #12]
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f000 fb82 	bl	8003a14 <I2C_ITError>
  }
}
 8003310:	bf00      	nop
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003320:	bf00      	nop
 8003322:	370c      	adds	r7, #12
 8003324:	46bd      	mov	sp, r7
 8003326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332a:	4770      	bx	lr

0800332c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800332c:	b480      	push	{r7}
 800332e:	b083      	sub	sp, #12
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003334:	bf00      	nop
 8003336:	370c      	adds	r7, #12
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr

08003340 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003340:	b480      	push	{r7}
 8003342:	b083      	sub	sp, #12
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	70fb      	strb	r3, [r7, #3]
 800334c:	4613      	mov	r3, r2
 800334e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800335c:	b480      	push	{r7}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003364:	bf00      	nop
 8003366:	370c      	adds	r7, #12
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003370:	b480      	push	{r7}
 8003372:	b083      	sub	sp, #12
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003378:	bf00      	nop
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d101      	bne.n	80033bc <I2C_Slave_ISR_IT+0x24>
 80033b8:	2302      	movs	r3, #2
 80033ba:	e0e1      	b.n	8003580 <I2C_Slave_ISR_IT+0x1e8>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2201      	movs	r2, #1
 80033c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f003 0320 	and.w	r3, r3, #32
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d008      	beq.n	80033e0 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80033d8:	6939      	ldr	r1, [r7, #16]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f9b4 	bl	8003748 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f003 0310 	and.w	r3, r3, #16
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d04b      	beq.n	8003482 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d046      	beq.n	8003482 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d128      	bne.n	8003450 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b28      	cmp	r3, #40	; 0x28
 8003408:	d108      	bne.n	800341c <I2C_Slave_ISR_IT+0x84>
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003410:	d104      	bne.n	800341c <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003412:	6939      	ldr	r1, [r7, #16]
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 faa9 	bl	800396c <I2C_ITListenCplt>
 800341a:	e031      	b.n	8003480 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b29      	cmp	r3, #41	; 0x29
 8003426:	d10e      	bne.n	8003446 <I2C_Slave_ISR_IT+0xae>
 8003428:	697b      	ldr	r3, [r7, #20]
 800342a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800342e:	d00a      	beq.n	8003446 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	2210      	movs	r2, #16
 8003436:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 fc02 	bl	8003c42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 f926 	bl	8003690 <I2C_ITSlaveSeqCplt>
 8003444:	e01c      	b.n	8003480 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800344e:	e08f      	b.n	8003570 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2210      	movs	r2, #16
 8003456:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800345c:	f043 0204 	orr.w	r2, r3, #4
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <I2C_Slave_ISR_IT+0xda>
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003470:	d17e      	bne.n	8003570 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003476:	4619      	mov	r1, r3
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 facb 	bl	8003a14 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800347e:	e077      	b.n	8003570 <I2C_Slave_ISR_IT+0x1d8>
 8003480:	e076      	b.n	8003570 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02f      	beq.n	80034ec <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003492:	2b00      	cmp	r3, #0
 8003494:	d02a      	beq.n	80034ec <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349a:	b29b      	uxth	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d018      	beq.n	80034d2 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	b2d2      	uxtb	r2, r2
 80034ac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b2:	1c5a      	adds	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29a      	uxth	r2, r3
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d14b      	bne.n	8003574 <I2C_Slave_ISR_IT+0x1dc>
 80034dc:	697b      	ldr	r3, [r7, #20]
 80034de:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e2:	d047      	beq.n	8003574 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80034e4:	68f8      	ldr	r0, [r7, #12]
 80034e6:	f000 f8d3 	bl	8003690 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80034ea:	e043      	b.n	8003574 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	f003 0308 	and.w	r3, r3, #8
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d009      	beq.n	800350a <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d004      	beq.n	800350a <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003500:	6939      	ldr	r1, [r7, #16]
 8003502:	68f8      	ldr	r0, [r7, #12]
 8003504:	f000 f840 	bl	8003588 <I2C_ITAddrCplt>
 8003508:	e035      	b.n	8003576 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800350a:	693b      	ldr	r3, [r7, #16]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d030      	beq.n	8003576 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800351a:	2b00      	cmp	r3, #0
 800351c:	d02b      	beq.n	8003576 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003522:	b29b      	uxth	r3, r3
 8003524:	2b00      	cmp	r3, #0
 8003526:	d018      	beq.n	800355a <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	781a      	ldrb	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003538:	1c5a      	adds	r2, r3, #1
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003542:	b29b      	uxth	r3, r3
 8003544:	3b01      	subs	r3, #1
 8003546:	b29a      	uxth	r2, r3
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003550:	3b01      	subs	r3, #1
 8003552:	b29a      	uxth	r2, r3
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	851a      	strh	r2, [r3, #40]	; 0x28
 8003558:	e00d      	b.n	8003576 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003560:	d002      	beq.n	8003568 <I2C_Slave_ISR_IT+0x1d0>
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d106      	bne.n	8003576 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f891 	bl	8003690 <I2C_ITSlaveSeqCplt>
 800356e:	e002      	b.n	8003576 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003570:	bf00      	nop
 8003572:	e000      	b.n	8003576 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003574:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2200      	movs	r2, #0
 800357a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800357e:	2300      	movs	r3, #0
}
 8003580:	4618      	mov	r0, r3
 8003582:	3718      	adds	r7, #24
 8003584:	46bd      	mov	sp, r7
 8003586:	bd80      	pop	{r7, pc}

08003588 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003598:	b2db      	uxtb	r3, r3
 800359a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800359e:	2b28      	cmp	r3, #40	; 0x28
 80035a0:	d16a      	bne.n	8003678 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	699b      	ldr	r3, [r3, #24]
 80035a8:	0c1b      	lsrs	r3, r3, #16
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	0c1b      	lsrs	r3, r3, #16
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035c0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	689b      	ldr	r3, [r3, #8]
 80035c8:	b29b      	uxth	r3, r3
 80035ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80035ce:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 80035dc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	68db      	ldr	r3, [r3, #12]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d138      	bne.n	8003658 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80035e6:	897b      	ldrh	r3, [r7, #10]
 80035e8:	09db      	lsrs	r3, r3, #7
 80035ea:	b29a      	uxth	r2, r3
 80035ec:	89bb      	ldrh	r3, [r7, #12]
 80035ee:	4053      	eors	r3, r2
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	f003 0306 	and.w	r3, r3, #6
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d11c      	bne.n	8003634 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80035fa:	897b      	ldrh	r3, [r7, #10]
 80035fc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003602:	1c5a      	adds	r2, r3, #1
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800360c:	2b02      	cmp	r3, #2
 800360e:	d13b      	bne.n	8003688 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2208      	movs	r2, #8
 800361c:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003626:	89ba      	ldrh	r2, [r7, #12]
 8003628:	7bfb      	ldrb	r3, [r7, #15]
 800362a:	4619      	mov	r1, r3
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f7ff fe87 	bl	8003340 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003632:	e029      	b.n	8003688 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003634:	893b      	ldrh	r3, [r7, #8]
 8003636:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 fb42 	bl	8003cc6 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800364a:	89ba      	ldrh	r2, [r7, #12]
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	4619      	mov	r1, r3
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fe75 	bl	8003340 <HAL_I2C_AddrCallback>
}
 8003656:	e017      	b.n	8003688 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003658:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fb32 	bl	8003cc6 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800366a:	89ba      	ldrh	r2, [r7, #12]
 800366c:	7bfb      	ldrb	r3, [r7, #15]
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff fe65 	bl	8003340 <HAL_I2C_AddrCallback>
}
 8003676:	e007      	b.n	8003688 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2208      	movs	r2, #8
 800367e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2200      	movs	r2, #0
 8003684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d008      	beq.n	80036c4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	e00c      	b.n	80036de <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d007      	beq.n	80036de <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036dc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b29      	cmp	r3, #41	; 0x29
 80036e8:	d112      	bne.n	8003710 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2228      	movs	r2, #40	; 0x28
 80036ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2221      	movs	r2, #33	; 0x21
 80036f6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80036f8:	2101      	movs	r1, #1
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fae3 	bl	8003cc6 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003708:	6878      	ldr	r0, [r7, #4]
 800370a:	f7ff fe05 	bl	8003318 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800370e:	e017      	b.n	8003740 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003716:	b2db      	uxtb	r3, r3
 8003718:	2b2a      	cmp	r3, #42	; 0x2a
 800371a:	d111      	bne.n	8003740 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2228      	movs	r2, #40	; 0x28
 8003720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2222      	movs	r2, #34	; 0x22
 8003728:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800372a:	2102      	movs	r1, #2
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	f000 faca 	bl	8003cc6 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2200      	movs	r2, #0
 8003736:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff fdf6 	bl	800332c <HAL_I2C_SlaveRxCpltCallback>
}
 8003740:	bf00      	nop
 8003742:	3710      	adds	r7, #16
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b086      	sub	sp, #24
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003764:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2220      	movs	r2, #32
 800376c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800376e:	7bfb      	ldrb	r3, [r7, #15]
 8003770:	2b21      	cmp	r3, #33	; 0x21
 8003772:	d002      	beq.n	800377a <I2C_ITSlaveCplt+0x32>
 8003774:	7bfb      	ldrb	r3, [r7, #15]
 8003776:	2b29      	cmp	r3, #41	; 0x29
 8003778:	d108      	bne.n	800378c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800377a:	f248 0101 	movw	r1, #32769	; 0x8001
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 faa1 	bl	8003cc6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2221      	movs	r2, #33	; 0x21
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
 800378a:	e019      	b.n	80037c0 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	2b22      	cmp	r3, #34	; 0x22
 8003790:	d002      	beq.n	8003798 <I2C_ITSlaveCplt+0x50>
 8003792:	7bfb      	ldrb	r3, [r7, #15]
 8003794:	2b2a      	cmp	r3, #42	; 0x2a
 8003796:	d108      	bne.n	80037aa <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003798:	f248 0102 	movw	r1, #32770	; 0x8002
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fa92 	bl	8003cc6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2222      	movs	r2, #34	; 0x22
 80037a6:	631a      	str	r2, [r3, #48]	; 0x30
 80037a8:	e00a      	b.n	80037c0 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 80037aa:	7bfb      	ldrb	r3, [r7, #15]
 80037ac:	2b28      	cmp	r3, #40	; 0x28
 80037ae:	d107      	bne.n	80037c0 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 80037b0:	f248 0103 	movw	r1, #32771	; 0x8003
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f000 fa86 	bl	8003cc6 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	6859      	ldr	r1, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	4b62      	ldr	r3, [pc, #392]	; (8003964 <I2C_ITSlaveCplt+0x21c>)
 80037dc:	400b      	ands	r3, r1
 80037de:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fa2e 	bl	8003c42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d013      	beq.n	8003818 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037fe:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	2b00      	cmp	r3, #0
 8003806:	d01f      	beq.n	8003848 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	b29a      	uxth	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003816:	e017      	b.n	8003848 <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d012      	beq.n	8003848 <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003830:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003836:	2b00      	cmp	r3, #0
 8003838:	d006      	beq.n	8003848 <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	b29a      	uxth	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003848:	697b      	ldr	r3, [r7, #20]
 800384a:	f003 0304 	and.w	r3, r3, #4
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f023 0304 	bic.w	r3, r3, #4
 8003858:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	b2d2      	uxtb	r2, r2
 8003866:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00c      	beq.n	8003894 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800387e:	3b01      	subs	r3, #1
 8003880:	b29a      	uxth	r2, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800388a:	b29b      	uxth	r3, r3
 800388c:	3b01      	subs	r3, #1
 800388e:	b29a      	uxth	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d005      	beq.n	80038aa <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a2:	f043 0204 	orr.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d010      	beq.n	80038e2 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038c4:	4619      	mov	r1, r3
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f000 f8a4 	bl	8003a14 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d2:	b2db      	uxtb	r3, r3
 80038d4:	2b28      	cmp	r3, #40	; 0x28
 80038d6:	d141      	bne.n	800395c <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80038d8:	6979      	ldr	r1, [r7, #20]
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 f846 	bl	800396c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80038e0:	e03c      	b.n	800395c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80038ea:	d014      	beq.n	8003916 <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f7ff fecf 	bl	8003690 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a1c      	ldr	r2, [pc, #112]	; (8003968 <I2C_ITSlaveCplt+0x220>)
 80038f6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2220      	movs	r2, #32
 80038fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f7ff fd24 	bl	800335c <HAL_I2C_ListenCpltCallback>
}
 8003914:	e022      	b.n	800395c <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800391c:	b2db      	uxtb	r3, r3
 800391e:	2b22      	cmp	r3, #34	; 0x22
 8003920:	d10e      	bne.n	8003940 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff fcf7 	bl	800332c <HAL_I2C_SlaveRxCpltCallback>
}
 800393e:	e00d      	b.n	800395c <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2220      	movs	r2, #32
 8003944:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7ff fcde 	bl	8003318 <HAL_I2C_SlaveTxCpltCallback>
}
 800395c:	bf00      	nop
 800395e:	3718      	adds	r7, #24
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	fe00e800 	.word	0xfe00e800
 8003968:	ffff0000 	.word	0xffff0000

0800396c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	4a25      	ldr	r2, [pc, #148]	; (8003a10 <I2C_ITListenCplt+0xa4>)
 800397a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2220      	movs	r2, #32
 8003986:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	f003 0304 	and.w	r3, r3, #4
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d022      	beq.n	80039e8 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ac:	b2d2      	uxtb	r2, r2
 80039ae:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	1c5a      	adds	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d012      	beq.n	80039e8 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c6:	3b01      	subs	r3, #1
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e0:	f043 0204 	orr.w	r2, r3, #4
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039e8:	f248 0103 	movw	r1, #32771	; 0x8003
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f96a 	bl	8003cc6 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2210      	movs	r2, #16
 80039f8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f7ff fcaa 	bl	800335c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003a08:	bf00      	nop
 8003a0a:	3708      	adds	r7, #8
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	ffff0000 	.word	0xffff0000

08003a14 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a6d      	ldr	r2, [pc, #436]	; (8003be8 <I2C_ITError+0x1d4>)
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	431a      	orrs	r2, r3
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003a46:	7bfb      	ldrb	r3, [r7, #15]
 8003a48:	2b28      	cmp	r3, #40	; 0x28
 8003a4a:	d005      	beq.n	8003a58 <I2C_ITError+0x44>
 8003a4c:	7bfb      	ldrb	r3, [r7, #15]
 8003a4e:	2b29      	cmp	r3, #41	; 0x29
 8003a50:	d002      	beq.n	8003a58 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003a52:	7bfb      	ldrb	r3, [r7, #15]
 8003a54:	2b2a      	cmp	r3, #42	; 0x2a
 8003a56:	d10b      	bne.n	8003a70 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a58:	2103      	movs	r1, #3
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f000 f933 	bl	8003cc6 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2228      	movs	r2, #40	; 0x28
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a60      	ldr	r2, [pc, #384]	; (8003bec <I2C_ITError+0x1d8>)
 8003a6c:	635a      	str	r2, [r3, #52]	; 0x34
 8003a6e:	e030      	b.n	8003ad2 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003a70:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f926 	bl	8003cc6 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a7a:	6878      	ldr	r0, [r7, #4]
 8003a7c:	f000 f8e1 	bl	8003c42 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b60      	cmp	r3, #96	; 0x60
 8003a8a:	d01f      	beq.n	8003acc <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2220      	movs	r2, #32
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	f003 0320 	and.w	r3, r3, #32
 8003a9e:	2b20      	cmp	r3, #32
 8003aa0:	d114      	bne.n	8003acc <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0310 	and.w	r3, r3, #16
 8003aac:	2b10      	cmp	r3, #16
 8003aae:	d109      	bne.n	8003ac4 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2210      	movs	r2, #16
 8003ab6:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f043 0204 	orr.w	r2, r3, #4
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d039      	beq.n	8003b54 <I2C_ITError+0x140>
 8003ae0:	68bb      	ldr	r3, [r7, #8]
 8003ae2:	2b11      	cmp	r3, #17
 8003ae4:	d002      	beq.n	8003aec <I2C_ITError+0xd8>
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	2b21      	cmp	r3, #33	; 0x21
 8003aea:	d133      	bne.n	8003b54 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003af6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003afa:	d107      	bne.n	8003b0c <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b0a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7ff f931 	bl	8002d78 <HAL_DMA_GetState>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d017      	beq.n	8003b4c <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b20:	4a33      	ldr	r2, [pc, #204]	; (8003bf0 <I2C_ITError+0x1dc>)
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7ff f831 	bl	8002b98 <HAL_DMA_Abort_IT>
 8003b36:	4603      	mov	r3, r0
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d04d      	beq.n	8003bd8 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003b46:	4610      	mov	r0, r2
 8003b48:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b4a:	e045      	b.n	8003bd8 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f000 f851 	bl	8003bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003b52:	e041      	b.n	8003bd8 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d039      	beq.n	8003bd0 <I2C_ITError+0x1bc>
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b12      	cmp	r3, #18
 8003b60:	d002      	beq.n	8003b68 <I2C_ITError+0x154>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b22      	cmp	r3, #34	; 0x22
 8003b66:	d133      	bne.n	8003bd0 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d107      	bne.n	8003b88 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	681a      	ldr	r2, [r3, #0]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b86:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	f7ff f8f3 	bl	8002d78 <HAL_DMA_GetState>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d017      	beq.n	8003bc8 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9c:	4a14      	ldr	r2, [pc, #80]	; (8003bf0 <I2C_ITError+0x1dc>)
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fff3 	bl	8002b98 <HAL_DMA_Abort_IT>
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d011      	beq.n	8003bdc <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bc6:	e009      	b.n	8003bdc <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f813 	bl	8003bf4 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bce:	e005      	b.n	8003bdc <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f000 f80f 	bl	8003bf4 <I2C_TreatErrorCallback>
  }
}
 8003bd6:	e002      	b.n	8003bde <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003bd8:	bf00      	nop
 8003bda:	e000      	b.n	8003bde <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003bdc:	bf00      	nop
}
 8003bde:	bf00      	nop
 8003be0:	3710      	adds	r7, #16
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
 8003be6:	bf00      	nop
 8003be8:	ffff0000 	.word	0xffff0000
 8003bec:	08003399 	.word	0x08003399
 8003bf0:	08003c8b 	.word	0x08003c8b

08003bf4 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c02:	b2db      	uxtb	r3, r3
 8003c04:	2b60      	cmp	r3, #96	; 0x60
 8003c06:	d10e      	bne.n	8003c26 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fbb0 	bl	8003384 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c24:	e009      	b.n	8003c3a <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003c34:	6878      	ldr	r0, [r7, #4]
 8003c36:	f7ff fb9b 	bl	8003370 <HAL_I2C_ErrorCallback>
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b083      	sub	sp, #12
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	699b      	ldr	r3, [r3, #24]
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d103      	bne.n	8003c60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d007      	beq.n	8003c7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699a      	ldr	r2, [r3, #24]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f042 0201 	orr.w	r2, r2, #1
 8003c7c:	619a      	str	r2, [r3, #24]
  }
}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003c8a:	b580      	push	{r7, lr}
 8003c8c:	b084      	sub	sp, #16
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d003      	beq.n	8003cb8 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003cb8:	68f8      	ldr	r0, [r7, #12]
 8003cba:	f7ff ff9b 	bl	8003bf4 <I2C_TreatErrorCallback>
}
 8003cbe:	bf00      	nop
 8003cc0:	3710      	adds	r7, #16
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}

08003cc6 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b085      	sub	sp, #20
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
 8003cce:	460b      	mov	r3, r1
 8003cd0:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003cd6:	887b      	ldrh	r3, [r7, #2]
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00f      	beq.n	8003d00 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003ce6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cf4:	2b28      	cmp	r3, #40	; 0x28
 8003cf6:	d003      	beq.n	8003d00 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003cfe:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003d00:	887b      	ldrh	r3, [r7, #2]
 8003d02:	f003 0302 	and.w	r3, r3, #2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00f      	beq.n	8003d2a <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003d10:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003d1e:	2b28      	cmp	r3, #40	; 0x28
 8003d20:	d003      	beq.n	8003d2a <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003d28:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003d2a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	da03      	bge.n	8003d3a <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003d3a:	887b      	ldrh	r3, [r7, #2]
 8003d3c:	2b10      	cmp	r3, #16
 8003d3e:	d103      	bne.n	8003d48 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003d46:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003d48:	887b      	ldrh	r3, [r7, #2]
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	d103      	bne.n	8003d56 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f043 0320 	orr.w	r3, r3, #32
 8003d54:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003d56:	887b      	ldrh	r3, [r7, #2]
 8003d58:	2b40      	cmp	r3, #64	; 0x40
 8003d5a:	d103      	bne.n	8003d64 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d62:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6819      	ldr	r1, [r3, #0]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	43da      	mvns	r2, r3
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	400a      	ands	r2, r1
 8003d74:	601a      	str	r2, [r3, #0]
}
 8003d76:	bf00      	nop
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr

08003d82 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003d82:	b480      	push	{r7}
 8003d84:	b083      	sub	sp, #12
 8003d86:	af00      	add	r7, sp, #0
 8003d88:	6078      	str	r0, [r7, #4]
 8003d8a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b20      	cmp	r3, #32
 8003d96:	d138      	bne.n	8003e0a <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d101      	bne.n	8003da6 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003da2:	2302      	movs	r3, #2
 8003da4:	e032      	b.n	8003e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2224      	movs	r2, #36	; 0x24
 8003db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0201 	bic.w	r2, r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003dd4:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	6819      	ldr	r1, [r3, #0]
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	430a      	orrs	r2, r1
 8003de4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f042 0201 	orr.w	r2, r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2220      	movs	r2, #32
 8003dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e06:	2300      	movs	r3, #0
 8003e08:	e000      	b.n	8003e0c <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e0a:	2302      	movs	r3, #2
  }
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr

08003e18 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	b085      	sub	sp, #20
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b20      	cmp	r3, #32
 8003e2c:	d139      	bne.n	8003ea2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e033      	b.n	8003ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2224      	movs	r2, #36	; 0x24
 8003e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f022 0201 	bic.w	r2, r2, #1
 8003e5a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e6a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	68fa      	ldr	r2, [r7, #12]
 8003e72:	4313      	orrs	r3, r2
 8003e74:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f042 0201 	orr.w	r2, r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e000      	b.n	8003ea4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003ea2:	2302      	movs	r3, #2
  }
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3714      	adds	r7, #20
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003eb4:	4b05      	ldr	r3, [pc, #20]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a04      	ldr	r2, [pc, #16]	; (8003ecc <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ebe:	6013      	str	r3, [r2, #0]
}
 8003ec0:	bf00      	nop
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
 8003eca:	bf00      	nop
 8003ecc:	40007000 	.word	0x40007000

08003ed0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003ed4:	4b04      	ldr	r3, [pc, #16]	; (8003ee8 <HAL_PWREx_GetVoltageRange+0x18>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40007000 	.word	0x40007000

08003eec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b085      	sub	sp, #20
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efa:	d130      	bne.n	8003f5e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003efc:	4b23      	ldr	r3, [pc, #140]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f08:	d038      	beq.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f0a:	4b20      	ldr	r3, [pc, #128]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f18:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003f1a:	4b1d      	ldr	r3, [pc, #116]	; (8003f90 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2232      	movs	r2, #50	; 0x32
 8003f20:	fb02 f303 	mul.w	r3, r2, r3
 8003f24:	4a1b      	ldr	r2, [pc, #108]	; (8003f94 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003f26:	fba2 2303 	umull	r2, r3, r2, r3
 8003f2a:	0c9b      	lsrs	r3, r3, #18
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f30:	e002      	b.n	8003f38 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3b01      	subs	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003f38:	4b14      	ldr	r3, [pc, #80]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f44:	d102      	bne.n	8003f4c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1f2      	bne.n	8003f32 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003f4c:	4b0f      	ldr	r3, [pc, #60]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f58:	d110      	bne.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003f5a:	2303      	movs	r3, #3
 8003f5c:	e00f      	b.n	8003f7e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f6a:	d007      	beq.n	8003f7c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003f6c:	4b07      	ldr	r3, [pc, #28]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f74:	4a05      	ldr	r2, [pc, #20]	; (8003f8c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003f76:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f7a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3714      	adds	r7, #20
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
 8003f8a:	bf00      	nop
 8003f8c:	40007000 	.word	0x40007000
 8003f90:	20000000 	.word	0x20000000
 8003f94:	431bde83 	.word	0x431bde83

08003f98 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b088      	sub	sp, #32
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d102      	bne.n	8003fac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	f000 bc02 	b.w	80047b0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fac:	4b96      	ldr	r3, [pc, #600]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fb6:	4b94      	ldr	r3, [pc, #592]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f003 0303 	and.w	r3, r3, #3
 8003fbe:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0310 	and.w	r3, r3, #16
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f000 80e4 	beq.w	8004196 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fce:	69bb      	ldr	r3, [r7, #24]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d007      	beq.n	8003fe4 <HAL_RCC_OscConfig+0x4c>
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	2b0c      	cmp	r3, #12
 8003fd8:	f040 808b 	bne.w	80040f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	f040 8087 	bne.w	80040f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003fe4:	4b88      	ldr	r3, [pc, #544]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d005      	beq.n	8003ffc <HAL_RCC_OscConfig+0x64>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	699b      	ldr	r3, [r3, #24]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d101      	bne.n	8003ffc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e3d9      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a1a      	ldr	r2, [r3, #32]
 8004000:	4b81      	ldr	r3, [pc, #516]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d004      	beq.n	8004016 <HAL_RCC_OscConfig+0x7e>
 800400c:	4b7e      	ldr	r3, [pc, #504]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004014:	e005      	b.n	8004022 <HAL_RCC_OscConfig+0x8a>
 8004016:	4b7c      	ldr	r3, [pc, #496]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004018:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800401c:	091b      	lsrs	r3, r3, #4
 800401e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004022:	4293      	cmp	r3, r2
 8004024:	d223      	bcs.n	800406e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a1b      	ldr	r3, [r3, #32]
 800402a:	4618      	mov	r0, r3
 800402c:	f000 fd8c 	bl	8004b48 <RCC_SetFlashLatencyFromMSIRange>
 8004030:	4603      	mov	r3, r0
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004036:	2301      	movs	r3, #1
 8004038:	e3ba      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800403a:	4b73      	ldr	r3, [pc, #460]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4a72      	ldr	r2, [pc, #456]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004040:	f043 0308 	orr.w	r3, r3, #8
 8004044:	6013      	str	r3, [r2, #0]
 8004046:	4b70      	ldr	r3, [pc, #448]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	496d      	ldr	r1, [pc, #436]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004054:	4313      	orrs	r3, r2
 8004056:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004058:	4b6b      	ldr	r3, [pc, #428]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	69db      	ldr	r3, [r3, #28]
 8004064:	021b      	lsls	r3, r3, #8
 8004066:	4968      	ldr	r1, [pc, #416]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004068:	4313      	orrs	r3, r2
 800406a:	604b      	str	r3, [r1, #4]
 800406c:	e025      	b.n	80040ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800406e:	4b66      	ldr	r3, [pc, #408]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a65      	ldr	r2, [pc, #404]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004074:	f043 0308 	orr.w	r3, r3, #8
 8004078:	6013      	str	r3, [r2, #0]
 800407a:	4b63      	ldr	r3, [pc, #396]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6a1b      	ldr	r3, [r3, #32]
 8004086:	4960      	ldr	r1, [pc, #384]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004088:	4313      	orrs	r3, r2
 800408a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800408c:	4b5e      	ldr	r3, [pc, #376]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	69db      	ldr	r3, [r3, #28]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	495b      	ldr	r1, [pc, #364]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800409c:	4313      	orrs	r3, r2
 800409e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d109      	bne.n	80040ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f000 fd4c 	bl	8004b48 <RCC_SetFlashLatencyFromMSIRange>
 80040b0:	4603      	mov	r3, r0
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d001      	beq.n	80040ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e37a      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040ba:	f000 fc81 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80040be:	4602      	mov	r2, r0
 80040c0:	4b51      	ldr	r3, [pc, #324]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	091b      	lsrs	r3, r3, #4
 80040c6:	f003 030f 	and.w	r3, r3, #15
 80040ca:	4950      	ldr	r1, [pc, #320]	; (800420c <HAL_RCC_OscConfig+0x274>)
 80040cc:	5ccb      	ldrb	r3, [r1, r3]
 80040ce:	f003 031f 	and.w	r3, r3, #31
 80040d2:	fa22 f303 	lsr.w	r3, r2, r3
 80040d6:	4a4e      	ldr	r2, [pc, #312]	; (8004210 <HAL_RCC_OscConfig+0x278>)
 80040d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80040da:	4b4e      	ldr	r3, [pc, #312]	; (8004214 <HAL_RCC_OscConfig+0x27c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fd f810 	bl	8001104 <HAL_InitTick>
 80040e4:	4603      	mov	r3, r0
 80040e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80040e8:	7bfb      	ldrb	r3, [r7, #15]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d052      	beq.n	8004194 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80040ee:	7bfb      	ldrb	r3, [r7, #15]
 80040f0:	e35e      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	699b      	ldr	r3, [r3, #24]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d032      	beq.n	8004160 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a42      	ldr	r2, [pc, #264]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004100:	f043 0301 	orr.w	r3, r3, #1
 8004104:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004106:	f7fd f84d 	bl	80011a4 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800410e:	f7fd f849 	bl	80011a4 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e347      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004120:	4b39      	ldr	r3, [pc, #228]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800412c:	4b36      	ldr	r3, [pc, #216]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	4a35      	ldr	r2, [pc, #212]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004132:	f043 0308 	orr.w	r3, r3, #8
 8004136:	6013      	str	r3, [r2, #0]
 8004138:	4b33      	ldr	r3, [pc, #204]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	4930      	ldr	r1, [pc, #192]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004146:	4313      	orrs	r3, r2
 8004148:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800414a:	4b2f      	ldr	r3, [pc, #188]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	69db      	ldr	r3, [r3, #28]
 8004156:	021b      	lsls	r3, r3, #8
 8004158:	492b      	ldr	r1, [pc, #172]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 800415a:	4313      	orrs	r3, r2
 800415c:	604b      	str	r3, [r1, #4]
 800415e:	e01a      	b.n	8004196 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004160:	4b29      	ldr	r3, [pc, #164]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a28      	ldr	r2, [pc, #160]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800416c:	f7fd f81a 	bl	80011a4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004174:	f7fd f816 	bl	80011a4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e314      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004186:	4b20      	ldr	r3, [pc, #128]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x1dc>
 8004192:	e000      	b.n	8004196 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004194:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d073      	beq.n	800428a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80041a2:	69bb      	ldr	r3, [r7, #24]
 80041a4:	2b08      	cmp	r3, #8
 80041a6:	d005      	beq.n	80041b4 <HAL_RCC_OscConfig+0x21c>
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	2b0c      	cmp	r3, #12
 80041ac:	d10e      	bne.n	80041cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2b03      	cmp	r3, #3
 80041b2:	d10b      	bne.n	80041cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041b4:	4b14      	ldr	r3, [pc, #80]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d063      	beq.n	8004288 <HAL_RCC_OscConfig+0x2f0>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d15f      	bne.n	8004288 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e2f1      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041d4:	d106      	bne.n	80041e4 <HAL_RCC_OscConfig+0x24c>
 80041d6:	4b0c      	ldr	r3, [pc, #48]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a0b      	ldr	r2, [pc, #44]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041e0:	6013      	str	r3, [r2, #0]
 80041e2:	e025      	b.n	8004230 <HAL_RCC_OscConfig+0x298>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041ec:	d114      	bne.n	8004218 <HAL_RCC_OscConfig+0x280>
 80041ee:	4b06      	ldr	r3, [pc, #24]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a05      	ldr	r2, [pc, #20]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	4b03      	ldr	r3, [pc, #12]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	4a02      	ldr	r2, [pc, #8]	; (8004208 <HAL_RCC_OscConfig+0x270>)
 8004200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004204:	6013      	str	r3, [r2, #0]
 8004206:	e013      	b.n	8004230 <HAL_RCC_OscConfig+0x298>
 8004208:	40021000 	.word	0x40021000
 800420c:	080065e8 	.word	0x080065e8
 8004210:	20000000 	.word	0x20000000
 8004214:	20000004 	.word	0x20000004
 8004218:	4ba0      	ldr	r3, [pc, #640]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a9f      	ldr	r2, [pc, #636]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	6013      	str	r3, [r2, #0]
 8004224:	4b9d      	ldr	r3, [pc, #628]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a9c      	ldr	r2, [pc, #624]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800422a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800422e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d013      	beq.n	8004260 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fc ffb4 	bl	80011a4 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004240:	f7fc ffb0 	bl	80011a4 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b64      	cmp	r3, #100	; 0x64
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e2ae      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004252:	4b92      	ldr	r3, [pc, #584]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d0f0      	beq.n	8004240 <HAL_RCC_OscConfig+0x2a8>
 800425e:	e014      	b.n	800428a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004260:	f7fc ffa0 	bl	80011a4 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004266:	e008      	b.n	800427a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004268:	f7fc ff9c 	bl	80011a4 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	2b64      	cmp	r3, #100	; 0x64
 8004274:	d901      	bls.n	800427a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004276:	2303      	movs	r3, #3
 8004278:	e29a      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800427a:	4b88      	ldr	r3, [pc, #544]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1f0      	bne.n	8004268 <HAL_RCC_OscConfig+0x2d0>
 8004286:	e000      	b.n	800428a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0302 	and.w	r3, r3, #2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d060      	beq.n	8004358 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d005      	beq.n	80042a8 <HAL_RCC_OscConfig+0x310>
 800429c:	69bb      	ldr	r3, [r7, #24]
 800429e:	2b0c      	cmp	r3, #12
 80042a0:	d119      	bne.n	80042d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	2b02      	cmp	r3, #2
 80042a6:	d116      	bne.n	80042d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042a8:	4b7c      	ldr	r3, [pc, #496]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d005      	beq.n	80042c0 <HAL_RCC_OscConfig+0x328>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d101      	bne.n	80042c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80042bc:	2301      	movs	r3, #1
 80042be:	e277      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042c0:	4b76      	ldr	r3, [pc, #472]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80042c2:	685b      	ldr	r3, [r3, #4]
 80042c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	061b      	lsls	r3, r3, #24
 80042ce:	4973      	ldr	r1, [pc, #460]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80042d0:	4313      	orrs	r3, r2
 80042d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80042d4:	e040      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	68db      	ldr	r3, [r3, #12]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d023      	beq.n	8004326 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042de:	4b6f      	ldr	r3, [pc, #444]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a6e      	ldr	r2, [pc, #440]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80042e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042ea:	f7fc ff5b 	bl	80011a4 <HAL_GetTick>
 80042ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f0:	e008      	b.n	8004304 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042f2:	f7fc ff57 	bl	80011a4 <HAL_GetTick>
 80042f6:	4602      	mov	r2, r0
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	1ad3      	subs	r3, r2, r3
 80042fc:	2b02      	cmp	r3, #2
 80042fe:	d901      	bls.n	8004304 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004300:	2303      	movs	r3, #3
 8004302:	e255      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	4b65      	ldr	r3, [pc, #404]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800430c:	2b00      	cmp	r3, #0
 800430e:	d0f0      	beq.n	80042f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004310:	4b62      	ldr	r3, [pc, #392]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	691b      	ldr	r3, [r3, #16]
 800431c:	061b      	lsls	r3, r3, #24
 800431e:	495f      	ldr	r1, [pc, #380]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004320:	4313      	orrs	r3, r2
 8004322:	604b      	str	r3, [r1, #4]
 8004324:	e018      	b.n	8004358 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004326:	4b5d      	ldr	r3, [pc, #372]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a5c      	ldr	r2, [pc, #368]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800432c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004330:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004332:	f7fc ff37 	bl	80011a4 <HAL_GetTick>
 8004336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004338:	e008      	b.n	800434c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800433a:	f7fc ff33 	bl	80011a4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	2b02      	cmp	r3, #2
 8004346:	d901      	bls.n	800434c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004348:	2303      	movs	r3, #3
 800434a:	e231      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800434c:	4b53      	ldr	r3, [pc, #332]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1f0      	bne.n	800433a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b00      	cmp	r3, #0
 8004362:	d03c      	beq.n	80043de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	695b      	ldr	r3, [r3, #20]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01c      	beq.n	80043a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800436c:	4b4b      	ldr	r3, [pc, #300]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800436e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004372:	4a4a      	ldr	r2, [pc, #296]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004374:	f043 0301 	orr.w	r3, r3, #1
 8004378:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800437c:	f7fc ff12 	bl	80011a4 <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004384:	f7fc ff0e 	bl	80011a4 <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e20c      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004396:	4b41      	ldr	r3, [pc, #260]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004398:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d0ef      	beq.n	8004384 <HAL_RCC_OscConfig+0x3ec>
 80043a4:	e01b      	b.n	80043de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043a6:	4b3d      	ldr	r3, [pc, #244]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80043a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ac:	4a3b      	ldr	r2, [pc, #236]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043b6:	f7fc fef5 	bl	80011a4 <HAL_GetTick>
 80043ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043bc:	e008      	b.n	80043d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043be:	f7fc fef1 	bl	80011a4 <HAL_GetTick>
 80043c2:	4602      	mov	r2, r0
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	1ad3      	subs	r3, r2, r3
 80043c8:	2b02      	cmp	r3, #2
 80043ca:	d901      	bls.n	80043d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e1ef      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043d0:	4b32      	ldr	r3, [pc, #200]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80043d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043d6:	f003 0302 	and.w	r3, r3, #2
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d1ef      	bne.n	80043be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 0304 	and.w	r3, r3, #4
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 80a6 	beq.w	8004538 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043ec:	2300      	movs	r3, #0
 80043ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80043f0:	4b2a      	ldr	r3, [pc, #168]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80043f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d10d      	bne.n	8004418 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043fc:	4b27      	ldr	r3, [pc, #156]	; (800449c <HAL_RCC_OscConfig+0x504>)
 80043fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004400:	4a26      	ldr	r2, [pc, #152]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004402:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004406:	6593      	str	r3, [r2, #88]	; 0x58
 8004408:	4b24      	ldr	r3, [pc, #144]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	60bb      	str	r3, [r7, #8]
 8004412:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004414:	2301      	movs	r3, #1
 8004416:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004418:	4b21      	ldr	r3, [pc, #132]	; (80044a0 <HAL_RCC_OscConfig+0x508>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004420:	2b00      	cmp	r3, #0
 8004422:	d118      	bne.n	8004456 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004424:	4b1e      	ldr	r3, [pc, #120]	; (80044a0 <HAL_RCC_OscConfig+0x508>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <HAL_RCC_OscConfig+0x508>)
 800442a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800442e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004430:	f7fc feb8 	bl	80011a4 <HAL_GetTick>
 8004434:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004436:	e008      	b.n	800444a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004438:	f7fc feb4 	bl	80011a4 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	2b02      	cmp	r3, #2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e1b2      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <HAL_RCC_OscConfig+0x508>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0f0      	beq.n	8004438 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d108      	bne.n	8004470 <HAL_RCC_OscConfig+0x4d8>
 800445e:	4b0f      	ldr	r3, [pc, #60]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004464:	4a0d      	ldr	r2, [pc, #52]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004466:	f043 0301 	orr.w	r3, r3, #1
 800446a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800446e:	e029      	b.n	80044c4 <HAL_RCC_OscConfig+0x52c>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b05      	cmp	r3, #5
 8004476:	d115      	bne.n	80044a4 <HAL_RCC_OscConfig+0x50c>
 8004478:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800447a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447e:	4a07      	ldr	r2, [pc, #28]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004480:	f043 0304 	orr.w	r3, r3, #4
 8004484:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004488:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_OscConfig+0x504>)
 800448a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448e:	4a03      	ldr	r2, [pc, #12]	; (800449c <HAL_RCC_OscConfig+0x504>)
 8004490:	f043 0301 	orr.w	r3, r3, #1
 8004494:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004498:	e014      	b.n	80044c4 <HAL_RCC_OscConfig+0x52c>
 800449a:	bf00      	nop
 800449c:	40021000 	.word	0x40021000
 80044a0:	40007000 	.word	0x40007000
 80044a4:	4b9a      	ldr	r3, [pc, #616]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80044a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044aa:	4a99      	ldr	r2, [pc, #612]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80044b4:	4b96      	ldr	r3, [pc, #600]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80044b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044ba:	4a95      	ldr	r2, [pc, #596]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80044bc:	f023 0304 	bic.w	r3, r3, #4
 80044c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d016      	beq.n	80044fa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044cc:	f7fc fe6a 	bl	80011a4 <HAL_GetTick>
 80044d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d4:	f7fc fe66 	bl	80011a4 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e162      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044ea:	4b89      	ldr	r3, [pc, #548]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80044ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f0:	f003 0302 	and.w	r3, r3, #2
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d0ed      	beq.n	80044d4 <HAL_RCC_OscConfig+0x53c>
 80044f8:	e015      	b.n	8004526 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044fa:	f7fc fe53 	bl	80011a4 <HAL_GetTick>
 80044fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004500:	e00a      	b.n	8004518 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004502:	f7fc fe4f 	bl	80011a4 <HAL_GetTick>
 8004506:	4602      	mov	r2, r0
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	1ad3      	subs	r3, r2, r3
 800450c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004510:	4293      	cmp	r3, r2
 8004512:	d901      	bls.n	8004518 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e14b      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004518:	4b7d      	ldr	r3, [pc, #500]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800451a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d1ed      	bne.n	8004502 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004526:	7ffb      	ldrb	r3, [r7, #31]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d105      	bne.n	8004538 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800452c:	4b78      	ldr	r3, [pc, #480]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800452e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004530:	4a77      	ldr	r2, [pc, #476]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004532:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004536:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0320 	and.w	r3, r3, #32
 8004540:	2b00      	cmp	r3, #0
 8004542:	d03c      	beq.n	80045be <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004548:	2b00      	cmp	r3, #0
 800454a:	d01c      	beq.n	8004586 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800454c:	4b70      	ldr	r3, [pc, #448]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800454e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004552:	4a6f      	ldr	r2, [pc, #444]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004554:	f043 0301 	orr.w	r3, r3, #1
 8004558:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800455c:	f7fc fe22 	bl	80011a4 <HAL_GetTick>
 8004560:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004562:	e008      	b.n	8004576 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004564:	f7fc fe1e 	bl	80011a4 <HAL_GetTick>
 8004568:	4602      	mov	r2, r0
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	2b02      	cmp	r3, #2
 8004570:	d901      	bls.n	8004576 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004572:	2303      	movs	r3, #3
 8004574:	e11c      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004576:	4b66      	ldr	r3, [pc, #408]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004578:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800457c:	f003 0302 	and.w	r3, r3, #2
 8004580:	2b00      	cmp	r3, #0
 8004582:	d0ef      	beq.n	8004564 <HAL_RCC_OscConfig+0x5cc>
 8004584:	e01b      	b.n	80045be <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004586:	4b62      	ldr	r3, [pc, #392]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004588:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800458c:	4a60      	ldr	r2, [pc, #384]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800458e:	f023 0301 	bic.w	r3, r3, #1
 8004592:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004596:	f7fc fe05 	bl	80011a4 <HAL_GetTick>
 800459a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800459c:	e008      	b.n	80045b0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800459e:	f7fc fe01 	bl	80011a4 <HAL_GetTick>
 80045a2:	4602      	mov	r2, r0
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	1ad3      	subs	r3, r2, r3
 80045a8:	2b02      	cmp	r3, #2
 80045aa:	d901      	bls.n	80045b0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80045ac:	2303      	movs	r3, #3
 80045ae:	e0ff      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80045b0:	4b57      	ldr	r3, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80045b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ef      	bne.n	800459e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80f3 	beq.w	80047ae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	f040 80c9 	bne.w	8004764 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80045d2:	4b4f      	ldr	r3, [pc, #316]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	f003 0203 	and.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d12c      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f0:	3b01      	subs	r3, #1
 80045f2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d123      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004602:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d11b      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004608:	697b      	ldr	r3, [r7, #20]
 800460a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d113      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004622:	085b      	lsrs	r3, r3, #1
 8004624:	3b01      	subs	r3, #1
 8004626:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004628:	429a      	cmp	r2, r3
 800462a:	d109      	bne.n	8004640 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004636:	085b      	lsrs	r3, r3, #1
 8004638:	3b01      	subs	r3, #1
 800463a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800463c:	429a      	cmp	r2, r3
 800463e:	d06b      	beq.n	8004718 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	2b0c      	cmp	r3, #12
 8004644:	d062      	beq.n	800470c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004646:	4b32      	ldr	r3, [pc, #200]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e0ac      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004656:	4b2e      	ldr	r3, [pc, #184]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2d      	ldr	r2, [pc, #180]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800465c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004660:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004662:	f7fc fd9f 	bl	80011a4 <HAL_GetTick>
 8004666:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004668:	e008      	b.n	800467c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800466a:	f7fc fd9b 	bl	80011a4 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d901      	bls.n	800467c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	e099      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800467c:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1f0      	bne.n	800466a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 800468a:	68da      	ldr	r2, [r3, #12]
 800468c:	4b21      	ldr	r3, [pc, #132]	; (8004714 <HAL_RCC_OscConfig+0x77c>)
 800468e:	4013      	ands	r3, r2
 8004690:	687a      	ldr	r2, [r7, #4]
 8004692:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004698:	3a01      	subs	r2, #1
 800469a:	0112      	lsls	r2, r2, #4
 800469c:	4311      	orrs	r1, r2
 800469e:	687a      	ldr	r2, [r7, #4]
 80046a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80046a2:	0212      	lsls	r2, r2, #8
 80046a4:	4311      	orrs	r1, r2
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80046aa:	0852      	lsrs	r2, r2, #1
 80046ac:	3a01      	subs	r2, #1
 80046ae:	0552      	lsls	r2, r2, #21
 80046b0:	4311      	orrs	r1, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80046b6:	0852      	lsrs	r2, r2, #1
 80046b8:	3a01      	subs	r2, #1
 80046ba:	0652      	lsls	r2, r2, #25
 80046bc:	4311      	orrs	r1, r2
 80046be:	687a      	ldr	r2, [r7, #4]
 80046c0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80046c2:	06d2      	lsls	r2, r2, #27
 80046c4:	430a      	orrs	r2, r1
 80046c6:	4912      	ldr	r1, [pc, #72]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80046c8:	4313      	orrs	r3, r2
 80046ca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80046cc:	4b10      	ldr	r3, [pc, #64]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a0f      	ldr	r2, [pc, #60]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80046d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046d6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80046d8:	4b0d      	ldr	r3, [pc, #52]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4a0c      	ldr	r2, [pc, #48]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 80046de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80046e2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80046e4:	f7fc fd5e 	bl	80011a4 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046ec:	f7fc fd5a 	bl	80011a4 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e058      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80046fe:	4b04      	ldr	r3, [pc, #16]	; (8004710 <HAL_RCC_OscConfig+0x778>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800470a:	e050      	b.n	80047ae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e04f      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
 8004710:	40021000 	.word	0x40021000
 8004714:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004718:	4b27      	ldr	r3, [pc, #156]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d144      	bne.n	80047ae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004724:	4b24      	ldr	r3, [pc, #144]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 800472a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800472e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004730:	4b21      	ldr	r3, [pc, #132]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	4a20      	ldr	r2, [pc, #128]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004736:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800473a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800473c:	f7fc fd32 	bl	80011a4 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004742:	e008      	b.n	8004756 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004744:	f7fc fd2e 	bl	80011a4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	2b02      	cmp	r3, #2
 8004750:	d901      	bls.n	8004756 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e02c      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004756:	4b18      	ldr	r3, [pc, #96]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800475e:	2b00      	cmp	r3, #0
 8004760:	d0f0      	beq.n	8004744 <HAL_RCC_OscConfig+0x7ac>
 8004762:	e024      	b.n	80047ae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b0c      	cmp	r3, #12
 8004768:	d01f      	beq.n	80047aa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800476a:	4b13      	ldr	r3, [pc, #76]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a12      	ldr	r2, [pc, #72]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004770:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004774:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004776:	f7fc fd15 	bl	80011a4 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800477e:	f7fc fd11 	bl	80011a4 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e00f      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1f0      	bne.n	800477e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800479c:	4b06      	ldr	r3, [pc, #24]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	4905      	ldr	r1, [pc, #20]	; (80047b8 <HAL_RCC_OscConfig+0x820>)
 80047a2:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_RCC_OscConfig+0x824>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	60cb      	str	r3, [r1, #12]
 80047a8:	e001      	b.n	80047ae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3720      	adds	r7, #32
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}
 80047b8:	40021000 	.word	0x40021000
 80047bc:	feeefffc 	.word	0xfeeefffc

080047c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b084      	sub	sp, #16
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e0e7      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80047d4:	4b75      	ldr	r3, [pc, #468]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0307 	and.w	r3, r3, #7
 80047dc:	683a      	ldr	r2, [r7, #0]
 80047de:	429a      	cmp	r2, r3
 80047e0:	d910      	bls.n	8004804 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047e2:	4b72      	ldr	r3, [pc, #456]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f023 0207 	bic.w	r2, r3, #7
 80047ea:	4970      	ldr	r1, [pc, #448]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	4313      	orrs	r3, r2
 80047f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0307 	and.w	r3, r3, #7
 80047fa:	683a      	ldr	r2, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e0cf      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0302 	and.w	r3, r3, #2
 800480c:	2b00      	cmp	r3, #0
 800480e:	d010      	beq.n	8004832 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689a      	ldr	r2, [r3, #8]
 8004814:	4b66      	ldr	r3, [pc, #408]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800481c:	429a      	cmp	r2, r3
 800481e:	d908      	bls.n	8004832 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004820:	4b63      	ldr	r3, [pc, #396]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	4960      	ldr	r1, [pc, #384]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 800482e:	4313      	orrs	r3, r2
 8004830:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0301 	and.w	r3, r3, #1
 800483a:	2b00      	cmp	r3, #0
 800483c:	d04c      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2b03      	cmp	r3, #3
 8004844:	d107      	bne.n	8004856 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004846:	4b5a      	ldr	r3, [pc, #360]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800484e:	2b00      	cmp	r3, #0
 8004850:	d121      	bne.n	8004896 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e0a6      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d107      	bne.n	800486e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800485e:	4b54      	ldr	r3, [pc, #336]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004866:	2b00      	cmp	r3, #0
 8004868:	d115      	bne.n	8004896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e09a      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	2b00      	cmp	r3, #0
 8004874:	d107      	bne.n	8004886 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004876:	4b4e      	ldr	r3, [pc, #312]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d109      	bne.n	8004896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e08e      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004886:	4b4a      	ldr	r3, [pc, #296]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800488e:	2b00      	cmp	r3, #0
 8004890:	d101      	bne.n	8004896 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004892:	2301      	movs	r3, #1
 8004894:	e086      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004896:	4b46      	ldr	r3, [pc, #280]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f023 0203 	bic.w	r2, r3, #3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4943      	ldr	r1, [pc, #268]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048a8:	f7fc fc7c 	bl	80011a4 <HAL_GetTick>
 80048ac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048b0:	f7fc fc78 	bl	80011a4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e06e      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048c6:	4b3a      	ldr	r3, [pc, #232]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 020c 	and.w	r2, r3, #12
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	009b      	lsls	r3, r3, #2
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d1eb      	bne.n	80048b0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d010      	beq.n	8004906 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689a      	ldr	r2, [r3, #8]
 80048e8:	4b31      	ldr	r3, [pc, #196]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80048ea:	689b      	ldr	r3, [r3, #8]
 80048ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d208      	bcs.n	8004906 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f4:	4b2e      	ldr	r3, [pc, #184]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	492b      	ldr	r1, [pc, #172]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004906:	4b29      	ldr	r3, [pc, #164]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0307 	and.w	r3, r3, #7
 800490e:	683a      	ldr	r2, [r7, #0]
 8004910:	429a      	cmp	r2, r3
 8004912:	d210      	bcs.n	8004936 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004914:	4b25      	ldr	r3, [pc, #148]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f023 0207 	bic.w	r2, r3, #7
 800491c:	4923      	ldr	r1, [pc, #140]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	4313      	orrs	r3, r2
 8004922:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004924:	4b21      	ldr	r3, [pc, #132]	; (80049ac <HAL_RCC_ClockConfig+0x1ec>)
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 0307 	and.w	r3, r3, #7
 800492c:	683a      	ldr	r2, [r7, #0]
 800492e:	429a      	cmp	r2, r3
 8004930:	d001      	beq.n	8004936 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e036      	b.n	80049a4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d008      	beq.n	8004954 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004942:	4b1b      	ldr	r3, [pc, #108]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	4918      	ldr	r1, [pc, #96]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004950:	4313      	orrs	r3, r2
 8004952:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f003 0308 	and.w	r3, r3, #8
 800495c:	2b00      	cmp	r3, #0
 800495e:	d009      	beq.n	8004974 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004960:	4b13      	ldr	r3, [pc, #76]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	00db      	lsls	r3, r3, #3
 800496e:	4910      	ldr	r1, [pc, #64]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 8004970:	4313      	orrs	r3, r2
 8004972:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004974:	f000 f824 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8004978:	4602      	mov	r2, r0
 800497a:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_RCC_ClockConfig+0x1f0>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	091b      	lsrs	r3, r3, #4
 8004980:	f003 030f 	and.w	r3, r3, #15
 8004984:	490b      	ldr	r1, [pc, #44]	; (80049b4 <HAL_RCC_ClockConfig+0x1f4>)
 8004986:	5ccb      	ldrb	r3, [r1, r3]
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
 8004990:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <HAL_RCC_ClockConfig+0x1f8>)
 8004992:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004994:	4b09      	ldr	r3, [pc, #36]	; (80049bc <HAL_RCC_ClockConfig+0x1fc>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fc fbb3 	bl	8001104 <HAL_InitTick>
 800499e:	4603      	mov	r3, r0
 80049a0:	72fb      	strb	r3, [r7, #11]

  return status;
 80049a2:	7afb      	ldrb	r3, [r7, #11]
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	3710      	adds	r7, #16
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40022000 	.word	0x40022000
 80049b0:	40021000 	.word	0x40021000
 80049b4:	080065e8 	.word	0x080065e8
 80049b8:	20000000 	.word	0x20000000
 80049bc:	20000004 	.word	0x20000004

080049c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b089      	sub	sp, #36	; 0x24
 80049c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80049c6:	2300      	movs	r3, #0
 80049c8:	61fb      	str	r3, [r7, #28]
 80049ca:	2300      	movs	r3, #0
 80049cc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049ce:	4b3e      	ldr	r3, [pc, #248]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049d0:	689b      	ldr	r3, [r3, #8]
 80049d2:	f003 030c 	and.w	r3, r3, #12
 80049d6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d8:	4b3b      	ldr	r3, [pc, #236]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0303 	and.w	r3, r3, #3
 80049e0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d005      	beq.n	80049f4 <HAL_RCC_GetSysClockFreq+0x34>
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	2b0c      	cmp	r3, #12
 80049ec:	d121      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d11e      	bne.n	8004a32 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80049f4:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d107      	bne.n	8004a10 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004a00:	4b31      	ldr	r3, [pc, #196]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a06:	0a1b      	lsrs	r3, r3, #8
 8004a08:	f003 030f 	and.w	r3, r3, #15
 8004a0c:	61fb      	str	r3, [r7, #28]
 8004a0e:	e005      	b.n	8004a1c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004a10:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	091b      	lsrs	r3, r3, #4
 8004a16:	f003 030f 	and.w	r3, r3, #15
 8004a1a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004a1c:	4a2b      	ldr	r2, [pc, #172]	; (8004acc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a24:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a26:	693b      	ldr	r3, [r7, #16]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d10d      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	2b04      	cmp	r3, #4
 8004a36:	d102      	bne.n	8004a3e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004a38:	4b25      	ldr	r3, [pc, #148]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e004      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	2b08      	cmp	r3, #8
 8004a42:	d101      	bne.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004a44:	4b23      	ldr	r3, [pc, #140]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a46:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	2b0c      	cmp	r3, #12
 8004a4c:	d134      	bne.n	8004ab8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a4e:	4b1e      	ldr	r3, [pc, #120]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f003 0303 	and.w	r3, r3, #3
 8004a56:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b02      	cmp	r3, #2
 8004a5c:	d003      	beq.n	8004a66 <HAL_RCC_GetSysClockFreq+0xa6>
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b03      	cmp	r3, #3
 8004a62:	d003      	beq.n	8004a6c <HAL_RCC_GetSysClockFreq+0xac>
 8004a64:	e005      	b.n	8004a72 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004a66:	4b1a      	ldr	r3, [pc, #104]	; (8004ad0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004a68:	617b      	str	r3, [r7, #20]
      break;
 8004a6a:	e005      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004a6c:	4b19      	ldr	r3, [pc, #100]	; (8004ad4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004a6e:	617b      	str	r3, [r7, #20]
      break;
 8004a70:	e002      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	617b      	str	r3, [r7, #20]
      break;
 8004a76:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a78:	4b13      	ldr	r3, [pc, #76]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	091b      	lsrs	r3, r3, #4
 8004a7e:	f003 0307 	and.w	r3, r3, #7
 8004a82:	3301      	adds	r3, #1
 8004a84:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004a90:	697a      	ldr	r2, [r7, #20]
 8004a92:	fb03 f202 	mul.w	r2, r3, r2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a9e:	4b0a      	ldr	r3, [pc, #40]	; (8004ac8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	0e5b      	lsrs	r3, r3, #25
 8004aa4:	f003 0303 	and.w	r3, r3, #3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	005b      	lsls	r3, r3, #1
 8004aac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ab6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004ab8:	69bb      	ldr	r3, [r7, #24]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3724      	adds	r7, #36	; 0x24
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	08006600 	.word	0x08006600
 8004ad0:	00f42400 	.word	0x00f42400
 8004ad4:	007a1200 	.word	0x007a1200

08004ad8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004adc:	4b03      	ldr	r3, [pc, #12]	; (8004aec <HAL_RCC_GetHCLKFreq+0x14>)
 8004ade:	681b      	ldr	r3, [r3, #0]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	20000000 	.word	0x20000000

08004af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004af4:	f7ff fff0 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0a1b      	lsrs	r3, r3, #8
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4904      	ldr	r1, [pc, #16]	; (8004b18 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	f003 031f 	and.w	r3, r3, #31
 8004b0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	40021000 	.word	0x40021000
 8004b18:	080065f8 	.word	0x080065f8

08004b1c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004b20:	f7ff ffda 	bl	8004ad8 <HAL_RCC_GetHCLKFreq>
 8004b24:	4602      	mov	r2, r0
 8004b26:	4b06      	ldr	r3, [pc, #24]	; (8004b40 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	0adb      	lsrs	r3, r3, #11
 8004b2c:	f003 0307 	and.w	r3, r3, #7
 8004b30:	4904      	ldr	r1, [pc, #16]	; (8004b44 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004b32:	5ccb      	ldrb	r3, [r1, r3]
 8004b34:	f003 031f 	and.w	r3, r3, #31
 8004b38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40021000 	.word	0x40021000
 8004b44:	080065f8 	.word	0x080065f8

08004b48 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b086      	sub	sp, #24
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004b50:	2300      	movs	r3, #0
 8004b52:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004b54:	4b2a      	ldr	r3, [pc, #168]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d003      	beq.n	8004b68 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004b60:	f7ff f9b6 	bl	8003ed0 <HAL_PWREx_GetVoltageRange>
 8004b64:	6178      	str	r0, [r7, #20]
 8004b66:	e014      	b.n	8004b92 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b68:	4b25      	ldr	r3, [pc, #148]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b6c:	4a24      	ldr	r2, [pc, #144]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b72:	6593      	str	r3, [r2, #88]	; 0x58
 8004b74:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004b80:	f7ff f9a6 	bl	8003ed0 <HAL_PWREx_GetVoltageRange>
 8004b84:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004b86:	4b1e      	ldr	r3, [pc, #120]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b8a:	4a1d      	ldr	r2, [pc, #116]	; (8004c00 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b90:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b98:	d10b      	bne.n	8004bb2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b80      	cmp	r3, #128	; 0x80
 8004b9e:	d919      	bls.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2ba0      	cmp	r3, #160	; 0xa0
 8004ba4:	d902      	bls.n	8004bac <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004ba6:	2302      	movs	r3, #2
 8004ba8:	613b      	str	r3, [r7, #16]
 8004baa:	e013      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bac:	2301      	movs	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	e010      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d902      	bls.n	8004bbe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004bb8:	2303      	movs	r3, #3
 8004bba:	613b      	str	r3, [r7, #16]
 8004bbc:	e00a      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d102      	bne.n	8004bca <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	613b      	str	r3, [r7, #16]
 8004bc8:	e004      	b.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d101      	bne.n	8004bd4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f023 0207 	bic.w	r2, r3, #7
 8004bdc:	4909      	ldr	r1, [pc, #36]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004be4:	4b07      	ldr	r3, [pc, #28]	; (8004c04 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f003 0307 	and.w	r3, r3, #7
 8004bec:	693a      	ldr	r2, [r7, #16]
 8004bee:	429a      	cmp	r2, r3
 8004bf0:	d001      	beq.n	8004bf6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	e000      	b.n	8004bf8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3718      	adds	r7, #24
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	40021000 	.word	0x40021000
 8004c04:	40022000 	.word	0x40022000

08004c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b086      	sub	sp, #24
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004c10:	2300      	movs	r3, #0
 8004c12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004c14:	2300      	movs	r3, #0
 8004c16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d031      	beq.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c28:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c2c:	d01a      	beq.n	8004c64 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004c2e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004c32:	d814      	bhi.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d009      	beq.n	8004c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004c38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004c3c:	d10f      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004c3e:	4b5d      	ldr	r3, [pc, #372]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c40:	68db      	ldr	r3, [r3, #12]
 8004c42:	4a5c      	ldr	r2, [pc, #368]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c48:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c4a:	e00c      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	2100      	movs	r1, #0
 8004c52:	4618      	mov	r0, r3
 8004c54:	f000 f9de 	bl	8005014 <RCCEx_PLLSAI1_Config>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004c5c:	e003      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	74fb      	strb	r3, [r7, #19]
      break;
 8004c62:	e000      	b.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004c64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c66:	7cfb      	ldrb	r3, [r7, #19]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d10b      	bne.n	8004c84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c6c:	4b51      	ldr	r3, [pc, #324]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c72:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	494e      	ldr	r1, [pc, #312]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004c82:	e001      	b.n	8004c88 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c84:	7cfb      	ldrb	r3, [r7, #19]
 8004c86:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f000 809e 	beq.w	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c96:	2300      	movs	r3, #0
 8004c98:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004c9a:	4b46      	ldr	r3, [pc, #280]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e000      	b.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004caa:	2300      	movs	r3, #0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d00d      	beq.n	8004ccc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cb0:	4b40      	ldr	r3, [pc, #256]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb4:	4a3f      	ldr	r2, [pc, #252]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cba:	6593      	str	r3, [r2, #88]	; 0x58
 8004cbc:	4b3d      	ldr	r3, [pc, #244]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cc4:	60bb      	str	r3, [r7, #8]
 8004cc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ccc:	4b3a      	ldr	r3, [pc, #232]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a39      	ldr	r2, [pc, #228]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cd6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004cd8:	f7fc fa64 	bl	80011a4 <HAL_GetTick>
 8004cdc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cde:	e009      	b.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ce0:	f7fc fa60 	bl	80011a4 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d902      	bls.n	8004cf4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	74fb      	strb	r3, [r7, #19]
        break;
 8004cf2:	e005      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004cf4:	4b30      	ldr	r3, [pc, #192]	; (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d0ef      	beq.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004d00:	7cfb      	ldrb	r3, [r7, #19]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d15a      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004d06:	4b2b      	ldr	r3, [pc, #172]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d01e      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d019      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004d22:	4b24      	ldr	r3, [pc, #144]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004d2e:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d34:	4a1f      	ldr	r2, [pc, #124]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004d3e:	4b1d      	ldr	r3, [pc, #116]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d44:	4a1b      	ldr	r2, [pc, #108]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004d4e:	4a19      	ldr	r2, [pc, #100]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d016      	beq.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fc fa20 	bl	80011a4 <HAL_GetTick>
 8004d64:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d66:	e00b      	b.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fc fa1c 	bl	80011a4 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d902      	bls.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	74fb      	strb	r3, [r7, #19]
            break;
 8004d7e:	e006      	b.n	8004d8e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004d80:	4b0c      	ldr	r3, [pc, #48]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d86:	f003 0302 	and.w	r3, r3, #2
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d0ec      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004d8e:	7cfb      	ldrb	r3, [r7, #19]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d10b      	bne.n	8004dac <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d94:	4b07      	ldr	r3, [pc, #28]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004d96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da2:	4904      	ldr	r1, [pc, #16]	; (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004daa:	e009      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004dac:	7cfb      	ldrb	r3, [r7, #19]
 8004dae:	74bb      	strb	r3, [r7, #18]
 8004db0:	e006      	b.n	8004dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8004db2:	bf00      	nop
 8004db4:	40021000 	.word	0x40021000
 8004db8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbc:	7cfb      	ldrb	r3, [r7, #19]
 8004dbe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dc0:	7c7b      	ldrb	r3, [r7, #17]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d105      	bne.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dc6:	4b8a      	ldr	r3, [pc, #552]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dca:	4a89      	ldr	r2, [pc, #548]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004dd0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0301 	and.w	r3, r3, #1
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004dde:	4b84      	ldr	r3, [pc, #528]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004de4:	f023 0203 	bic.w	r2, r3, #3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6a1b      	ldr	r3, [r3, #32]
 8004dec:	4980      	ldr	r1, [pc, #512]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004e00:	4b7b      	ldr	r3, [pc, #492]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e06:	f023 020c 	bic.w	r2, r3, #12
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0e:	4978      	ldr	r1, [pc, #480]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e10:	4313      	orrs	r3, r2
 8004e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d00a      	beq.n	8004e38 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e22:	4b73      	ldr	r3, [pc, #460]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e28:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e30:	496f      	ldr	r1, [pc, #444]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e32:	4313      	orrs	r3, r2
 8004e34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d00a      	beq.n	8004e5a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e44:	4b6a      	ldr	r3, [pc, #424]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e4a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	4967      	ldr	r1, [pc, #412]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e54:	4313      	orrs	r3, r2
 8004e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d00a      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004e66:	4b62      	ldr	r3, [pc, #392]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	495e      	ldr	r1, [pc, #376]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00a      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e88:	4b59      	ldr	r3, [pc, #356]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e8e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e96:	4956      	ldr	r1, [pc, #344]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d00a      	beq.n	8004ec0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004eaa:	4b51      	ldr	r3, [pc, #324]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb8:	494d      	ldr	r1, [pc, #308]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eba:	4313      	orrs	r3, r2
 8004ebc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d028      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ecc:	4b48      	ldr	r3, [pc, #288]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ece:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ed2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eda:	4945      	ldr	r1, [pc, #276]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004edc:	4313      	orrs	r3, r2
 8004ede:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004eea:	d106      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004eec:	4b40      	ldr	r3, [pc, #256]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004eee:	68db      	ldr	r3, [r3, #12]
 8004ef0:	4a3f      	ldr	r2, [pc, #252]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004ef2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ef6:	60d3      	str	r3, [r2, #12]
 8004ef8:	e011      	b.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f02:	d10c      	bne.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	2101      	movs	r1, #1
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 f882 	bl	8005014 <RCCEx_PLLSAI1_Config>
 8004f10:	4603      	mov	r3, r0
 8004f12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004f14:	7cfb      	ldrb	r3, [r7, #19]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d001      	beq.n	8004f1e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8004f1a:	7cfb      	ldrb	r3, [r7, #19]
 8004f1c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d028      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f2a:	4b31      	ldr	r3, [pc, #196]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	492d      	ldr	r1, [pc, #180]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004f48:	d106      	bne.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f4a:	4b29      	ldr	r3, [pc, #164]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	4a28      	ldr	r2, [pc, #160]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004f54:	60d3      	str	r3, [r2, #12]
 8004f56:	e011      	b.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004f60:	d10c      	bne.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	3304      	adds	r3, #4
 8004f66:	2101      	movs	r1, #1
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f000 f853 	bl	8005014 <RCCEx_PLLSAI1_Config>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004f72:	7cfb      	ldrb	r3, [r7, #19]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d001      	beq.n	8004f7c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d01c      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f88:	4b19      	ldr	r3, [pc, #100]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f8e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f96:	4916      	ldr	r1, [pc, #88]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fa2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004fa6:	d10c      	bne.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	3304      	adds	r3, #4
 8004fac:	2102      	movs	r1, #2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 f830 	bl	8005014 <RCCEx_PLLSAI1_Config>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004fb8:	7cfb      	ldrb	r3, [r7, #19]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d001      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004fbe:	7cfb      	ldrb	r3, [r7, #19]
 8004fc0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d00a      	beq.n	8004fe4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004fce:	4b08      	ldr	r3, [pc, #32]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004fd4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fdc:	4904      	ldr	r1, [pc, #16]	; (8004ff0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004fe4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40021000 	.word	0x40021000

08004ff4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8004ff8:	4b05      	ldr	r3, [pc, #20]	; (8005010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a04      	ldr	r2, [pc, #16]	; (8005010 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8004ffe:	f043 0304 	orr.w	r3, r3, #4
 8005002:	6013      	str	r3, [r2, #0]
}
 8005004:	bf00      	nop
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr
 800500e:	bf00      	nop
 8005010:	40021000 	.word	0x40021000

08005014 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800501e:	2300      	movs	r3, #0
 8005020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005022:	4b74      	ldr	r3, [pc, #464]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	f003 0303 	and.w	r3, r3, #3
 800502a:	2b00      	cmp	r3, #0
 800502c:	d018      	beq.n	8005060 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800502e:	4b71      	ldr	r3, [pc, #452]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0203 	and.w	r2, r3, #3
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d10d      	bne.n	800505a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
       ||
 8005042:	2b00      	cmp	r3, #0
 8005044:	d009      	beq.n	800505a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005046:	4b6b      	ldr	r3, [pc, #428]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005048:	68db      	ldr	r3, [r3, #12]
 800504a:	091b      	lsrs	r3, r3, #4
 800504c:	f003 0307 	and.w	r3, r3, #7
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
       ||
 8005056:	429a      	cmp	r2, r3
 8005058:	d047      	beq.n	80050ea <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	73fb      	strb	r3, [r7, #15]
 800505e:	e044      	b.n	80050ea <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	2b03      	cmp	r3, #3
 8005066:	d018      	beq.n	800509a <RCCEx_PLLSAI1_Config+0x86>
 8005068:	2b03      	cmp	r3, #3
 800506a:	d825      	bhi.n	80050b8 <RCCEx_PLLSAI1_Config+0xa4>
 800506c:	2b01      	cmp	r3, #1
 800506e:	d002      	beq.n	8005076 <RCCEx_PLLSAI1_Config+0x62>
 8005070:	2b02      	cmp	r3, #2
 8005072:	d009      	beq.n	8005088 <RCCEx_PLLSAI1_Config+0x74>
 8005074:	e020      	b.n	80050b8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005076:	4b5f      	ldr	r3, [pc, #380]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d11d      	bne.n	80050be <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005086:	e01a      	b.n	80050be <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005088:	4b5a      	ldr	r3, [pc, #360]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005090:	2b00      	cmp	r3, #0
 8005092:	d116      	bne.n	80050c2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005094:	2301      	movs	r3, #1
 8005096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005098:	e013      	b.n	80050c2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800509a:	4b56      	ldr	r3, [pc, #344]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d10f      	bne.n	80050c6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80050a6:	4b53      	ldr	r3, [pc, #332]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d109      	bne.n	80050c6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80050b2:	2301      	movs	r3, #1
 80050b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80050b6:	e006      	b.n	80050c6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	73fb      	strb	r3, [r7, #15]
      break;
 80050bc:	e004      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050be:	bf00      	nop
 80050c0:	e002      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050c2:	bf00      	nop
 80050c4:	e000      	b.n	80050c8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80050c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80050c8:	7bfb      	ldrb	r3, [r7, #15]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d10d      	bne.n	80050ea <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80050ce:	4b49      	ldr	r3, [pc, #292]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6819      	ldr	r1, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	3b01      	subs	r3, #1
 80050e0:	011b      	lsls	r3, r3, #4
 80050e2:	430b      	orrs	r3, r1
 80050e4:	4943      	ldr	r1, [pc, #268]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80050ea:	7bfb      	ldrb	r3, [r7, #15]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d17c      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80050f0:	4b40      	ldr	r3, [pc, #256]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a3f      	ldr	r2, [pc, #252]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80050f6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80050fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050fc:	f7fc f852 	bl	80011a4 <HAL_GetTick>
 8005100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005102:	e009      	b.n	8005118 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005104:	f7fc f84e 	bl	80011a4 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	2b02      	cmp	r3, #2
 8005110:	d902      	bls.n	8005118 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005112:	2303      	movs	r3, #3
 8005114:	73fb      	strb	r3, [r7, #15]
        break;
 8005116:	e005      	b.n	8005124 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005118:	4b36      	ldr	r3, [pc, #216]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1ef      	bne.n	8005104 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005124:	7bfb      	ldrb	r3, [r7, #15]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d15f      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005130:	4b30      	ldr	r3, [pc, #192]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8005138:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	6892      	ldr	r2, [r2, #8]
 8005140:	0211      	lsls	r1, r2, #8
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	68d2      	ldr	r2, [r2, #12]
 8005146:	06d2      	lsls	r2, r2, #27
 8005148:	430a      	orrs	r2, r1
 800514a:	492a      	ldr	r1, [pc, #168]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800514c:	4313      	orrs	r3, r2
 800514e:	610b      	str	r3, [r1, #16]
 8005150:	e027      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d112      	bne.n	800517e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005158:	4b26      	ldr	r3, [pc, #152]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005160:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005164:	687a      	ldr	r2, [r7, #4]
 8005166:	6892      	ldr	r2, [r2, #8]
 8005168:	0211      	lsls	r1, r2, #8
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6912      	ldr	r2, [r2, #16]
 800516e:	0852      	lsrs	r2, r2, #1
 8005170:	3a01      	subs	r2, #1
 8005172:	0552      	lsls	r2, r2, #21
 8005174:	430a      	orrs	r2, r1
 8005176:	491f      	ldr	r1, [pc, #124]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005178:	4313      	orrs	r3, r2
 800517a:	610b      	str	r3, [r1, #16]
 800517c:	e011      	b.n	80051a2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800517e:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005186:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800518a:	687a      	ldr	r2, [r7, #4]
 800518c:	6892      	ldr	r2, [r2, #8]
 800518e:	0211      	lsls	r1, r2, #8
 8005190:	687a      	ldr	r2, [r7, #4]
 8005192:	6952      	ldr	r2, [r2, #20]
 8005194:	0852      	lsrs	r2, r2, #1
 8005196:	3a01      	subs	r2, #1
 8005198:	0652      	lsls	r2, r2, #25
 800519a:	430a      	orrs	r2, r1
 800519c:	4915      	ldr	r1, [pc, #84]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80051a2:	4b14      	ldr	r3, [pc, #80]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80051ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051ae:	f7fb fff9 	bl	80011a4 <HAL_GetTick>
 80051b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051b4:	e009      	b.n	80051ca <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80051b6:	f7fb fff5 	bl	80011a4 <HAL_GetTick>
 80051ba:	4602      	mov	r2, r0
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	1ad3      	subs	r3, r2, r3
 80051c0:	2b02      	cmp	r3, #2
 80051c2:	d902      	bls.n	80051ca <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	73fb      	strb	r3, [r7, #15]
          break;
 80051c8:	e005      	b.n	80051d6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80051ca:	4b0a      	ldr	r3, [pc, #40]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d0ef      	beq.n	80051b6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d106      	bne.n	80051ea <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80051dc:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051de:	691a      	ldr	r2, [r3, #16]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	699b      	ldr	r3, [r3, #24]
 80051e4:	4903      	ldr	r1, [pc, #12]	; (80051f4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40021000 	.word	0x40021000

080051f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d101      	bne.n	800520a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e040      	b.n	800528c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d106      	bne.n	8005220 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2200      	movs	r2, #0
 8005216:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f7fb fe18 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2224      	movs	r2, #36	; 0x24
 8005224:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f022 0201 	bic.w	r2, r2, #1
 8005234:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fade 	bl	8005800 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 f8af 	bl	80053a8 <UART_SetConfig>
 800524a:	4603      	mov	r3, r0
 800524c:	2b01      	cmp	r3, #1
 800524e:	d101      	bne.n	8005254 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e01b      	b.n	800528c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685a      	ldr	r2, [r3, #4]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005262:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689a      	ldr	r2, [r3, #8]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005272:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f042 0201 	orr.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 fb5d 	bl	8005944 <UART_CheckIdleState>
 800528a:	4603      	mov	r3, r0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3708      	adds	r7, #8
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}

08005294 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af02      	add	r7, sp, #8
 800529a:	60f8      	str	r0, [r7, #12]
 800529c:	60b9      	str	r1, [r7, #8]
 800529e:	603b      	str	r3, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052a8:	2b20      	cmp	r3, #32
 80052aa:	d178      	bne.n	800539e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d002      	beq.n	80052b8 <HAL_UART_Transmit+0x24>
 80052b2:	88fb      	ldrh	r3, [r7, #6]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e071      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2221      	movs	r2, #33	; 0x21
 80052c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052ca:	f7fb ff6b 	bl	80011a4 <HAL_GetTick>
 80052ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	88fa      	ldrh	r2, [r7, #6]
 80052d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	88fa      	ldrh	r2, [r7, #6]
 80052dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052e8:	d108      	bne.n	80052fc <HAL_UART_Transmit+0x68>
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d104      	bne.n	80052fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80052f2:	2300      	movs	r3, #0
 80052f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	61bb      	str	r3, [r7, #24]
 80052fa:	e003      	b.n	8005304 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005304:	e030      	b.n	8005368 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	9300      	str	r3, [sp, #0]
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	2200      	movs	r2, #0
 800530e:	2180      	movs	r1, #128	; 0x80
 8005310:	68f8      	ldr	r0, [r7, #12]
 8005312:	f000 fbbf 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005316:	4603      	mov	r3, r0
 8005318:	2b00      	cmp	r3, #0
 800531a:	d004      	beq.n	8005326 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e03c      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d10b      	bne.n	8005344 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	881a      	ldrh	r2, [r3, #0]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005338:	b292      	uxth	r2, r2
 800533a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	3302      	adds	r3, #2
 8005340:	61bb      	str	r3, [r7, #24]
 8005342:	e008      	b.n	8005356 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005344:	69fb      	ldr	r3, [r7, #28]
 8005346:	781a      	ldrb	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	b292      	uxth	r2, r2
 800534e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	3301      	adds	r3, #1
 8005354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800535c:	b29b      	uxth	r3, r3
 800535e:	3b01      	subs	r3, #1
 8005360:	b29a      	uxth	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800536e:	b29b      	uxth	r3, r3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d1c8      	bne.n	8005306 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	2200      	movs	r2, #0
 800537c:	2140      	movs	r1, #64	; 0x40
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f000 fb88 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d004      	beq.n	8005394 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	2220      	movs	r2, #32
 800538e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e005      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2220      	movs	r2, #32
 8005398:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800539a:	2300      	movs	r3, #0
 800539c:	e000      	b.n	80053a0 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800539e:	2302      	movs	r3, #2
  }
}
 80053a0:	4618      	mov	r0, r3
 80053a2:	3720      	adds	r7, #32
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bd80      	pop	{r7, pc}

080053a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053ac:	b08a      	sub	sp, #40	; 0x28
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4bb4      	ldr	r3, [pc, #720]	; (80056a8 <UART_SetConfig+0x300>)
 80053d8:	4013      	ands	r3, r2
 80053da:	68fa      	ldr	r2, [r7, #12]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4aa9      	ldr	r2, [pc, #676]	; (80056ac <UART_SetConfig+0x304>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d004      	beq.n	8005414 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6a1b      	ldr	r3, [r3, #32]
 800540e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005410:	4313      	orrs	r3, r2
 8005412:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005424:	430a      	orrs	r2, r1
 8005426:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4aa0      	ldr	r2, [pc, #640]	; (80056b0 <UART_SetConfig+0x308>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d126      	bne.n	8005480 <UART_SetConfig+0xd8>
 8005432:	4ba0      	ldr	r3, [pc, #640]	; (80056b4 <UART_SetConfig+0x30c>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f003 0303 	and.w	r3, r3, #3
 800543c:	2b03      	cmp	r3, #3
 800543e:	d81b      	bhi.n	8005478 <UART_SetConfig+0xd0>
 8005440:	a201      	add	r2, pc, #4	; (adr r2, 8005448 <UART_SetConfig+0xa0>)
 8005442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005446:	bf00      	nop
 8005448:	08005459 	.word	0x08005459
 800544c:	08005469 	.word	0x08005469
 8005450:	08005461 	.word	0x08005461
 8005454:	08005471 	.word	0x08005471
 8005458:	2301      	movs	r3, #1
 800545a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800545e:	e080      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005460:	2302      	movs	r3, #2
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005466:	e07c      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005468:	2304      	movs	r3, #4
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800546e:	e078      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005470:	2308      	movs	r3, #8
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005476:	e074      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005478:	2310      	movs	r3, #16
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800547e:	e070      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a8c      	ldr	r2, [pc, #560]	; (80056b8 <UART_SetConfig+0x310>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d138      	bne.n	80054fc <UART_SetConfig+0x154>
 800548a:	4b8a      	ldr	r3, [pc, #552]	; (80056b4 <UART_SetConfig+0x30c>)
 800548c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005490:	f003 030c 	and.w	r3, r3, #12
 8005494:	2b0c      	cmp	r3, #12
 8005496:	d82d      	bhi.n	80054f4 <UART_SetConfig+0x14c>
 8005498:	a201      	add	r2, pc, #4	; (adr r2, 80054a0 <UART_SetConfig+0xf8>)
 800549a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800549e:	bf00      	nop
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054f5 	.word	0x080054f5
 80054a8:	080054f5 	.word	0x080054f5
 80054ac:	080054f5 	.word	0x080054f5
 80054b0:	080054e5 	.word	0x080054e5
 80054b4:	080054f5 	.word	0x080054f5
 80054b8:	080054f5 	.word	0x080054f5
 80054bc:	080054f5 	.word	0x080054f5
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054f5 	.word	0x080054f5
 80054c8:	080054f5 	.word	0x080054f5
 80054cc:	080054f5 	.word	0x080054f5
 80054d0:	080054ed 	.word	0x080054ed
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054da:	e042      	b.n	8005562 <UART_SetConfig+0x1ba>
 80054dc:	2302      	movs	r3, #2
 80054de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054e2:	e03e      	b.n	8005562 <UART_SetConfig+0x1ba>
 80054e4:	2304      	movs	r3, #4
 80054e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054ea:	e03a      	b.n	8005562 <UART_SetConfig+0x1ba>
 80054ec:	2308      	movs	r3, #8
 80054ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054f2:	e036      	b.n	8005562 <UART_SetConfig+0x1ba>
 80054f4:	2310      	movs	r3, #16
 80054f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80054fa:	e032      	b.n	8005562 <UART_SetConfig+0x1ba>
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a6a      	ldr	r2, [pc, #424]	; (80056ac <UART_SetConfig+0x304>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d12a      	bne.n	800555c <UART_SetConfig+0x1b4>
 8005506:	4b6b      	ldr	r3, [pc, #428]	; (80056b4 <UART_SetConfig+0x30c>)
 8005508:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800550c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005510:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005514:	d01a      	beq.n	800554c <UART_SetConfig+0x1a4>
 8005516:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800551a:	d81b      	bhi.n	8005554 <UART_SetConfig+0x1ac>
 800551c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005520:	d00c      	beq.n	800553c <UART_SetConfig+0x194>
 8005522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005526:	d815      	bhi.n	8005554 <UART_SetConfig+0x1ac>
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <UART_SetConfig+0x18c>
 800552c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005530:	d008      	beq.n	8005544 <UART_SetConfig+0x19c>
 8005532:	e00f      	b.n	8005554 <UART_SetConfig+0x1ac>
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800553a:	e012      	b.n	8005562 <UART_SetConfig+0x1ba>
 800553c:	2302      	movs	r3, #2
 800553e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005542:	e00e      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005544:	2304      	movs	r3, #4
 8005546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800554a:	e00a      	b.n	8005562 <UART_SetConfig+0x1ba>
 800554c:	2308      	movs	r3, #8
 800554e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8005552:	e006      	b.n	8005562 <UART_SetConfig+0x1ba>
 8005554:	2310      	movs	r3, #16
 8005556:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800555a:	e002      	b.n	8005562 <UART_SetConfig+0x1ba>
 800555c:	2310      	movs	r3, #16
 800555e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a51      	ldr	r2, [pc, #324]	; (80056ac <UART_SetConfig+0x304>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d17a      	bne.n	8005662 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800556c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005570:	2b08      	cmp	r3, #8
 8005572:	d824      	bhi.n	80055be <UART_SetConfig+0x216>
 8005574:	a201      	add	r2, pc, #4	; (adr r2, 800557c <UART_SetConfig+0x1d4>)
 8005576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800557a:	bf00      	nop
 800557c:	080055a1 	.word	0x080055a1
 8005580:	080055bf 	.word	0x080055bf
 8005584:	080055a9 	.word	0x080055a9
 8005588:	080055bf 	.word	0x080055bf
 800558c:	080055af 	.word	0x080055af
 8005590:	080055bf 	.word	0x080055bf
 8005594:	080055bf 	.word	0x080055bf
 8005598:	080055bf 	.word	0x080055bf
 800559c:	080055b7 	.word	0x080055b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055a0:	f7ff faa6 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 80055a4:	61f8      	str	r0, [r7, #28]
        break;
 80055a6:	e010      	b.n	80055ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80055a8:	4b44      	ldr	r3, [pc, #272]	; (80056bc <UART_SetConfig+0x314>)
 80055aa:	61fb      	str	r3, [r7, #28]
        break;
 80055ac:	e00d      	b.n	80055ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80055ae:	f7ff fa07 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80055b2:	61f8      	str	r0, [r7, #28]
        break;
 80055b4:	e009      	b.n	80055ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80055b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055ba:	61fb      	str	r3, [r7, #28]
        break;
 80055bc:	e005      	b.n	80055ca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80055be:	2300      	movs	r3, #0
 80055c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80055c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	f000 8107 	beq.w	80057e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685a      	ldr	r2, [r3, #4]
 80055d6:	4613      	mov	r3, r2
 80055d8:	005b      	lsls	r3, r3, #1
 80055da:	4413      	add	r3, r2
 80055dc:	69fa      	ldr	r2, [r7, #28]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d305      	bcc.n	80055ee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	685b      	ldr	r3, [r3, #4]
 80055e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80055e8:	69fa      	ldr	r2, [r7, #28]
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d903      	bls.n	80055f6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
 80055f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80055f4:	e0f4      	b.n	80057e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	2200      	movs	r2, #0
 80055fa:	461c      	mov	r4, r3
 80055fc:	4615      	mov	r5, r2
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	022b      	lsls	r3, r5, #8
 8005608:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800560c:	0222      	lsls	r2, r4, #8
 800560e:	68f9      	ldr	r1, [r7, #12]
 8005610:	6849      	ldr	r1, [r1, #4]
 8005612:	0849      	lsrs	r1, r1, #1
 8005614:	2000      	movs	r0, #0
 8005616:	4688      	mov	r8, r1
 8005618:	4681      	mov	r9, r0
 800561a:	eb12 0a08 	adds.w	sl, r2, r8
 800561e:	eb43 0b09 	adc.w	fp, r3, r9
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	607a      	str	r2, [r7, #4]
 800562c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005630:	4650      	mov	r0, sl
 8005632:	4659      	mov	r1, fp
 8005634:	f7fa fe24 	bl	8000280 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4613      	mov	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005640:	69bb      	ldr	r3, [r7, #24]
 8005642:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005646:	d308      	bcc.n	800565a <UART_SetConfig+0x2b2>
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800564e:	d204      	bcs.n	800565a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	69ba      	ldr	r2, [r7, #24]
 8005656:	60da      	str	r2, [r3, #12]
 8005658:	e0c2      	b.n	80057e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005660:	e0be      	b.n	80057e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800566a:	d16a      	bne.n	8005742 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800566c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005670:	2b08      	cmp	r3, #8
 8005672:	d834      	bhi.n	80056de <UART_SetConfig+0x336>
 8005674:	a201      	add	r2, pc, #4	; (adr r2, 800567c <UART_SetConfig+0x2d4>)
 8005676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800567a:	bf00      	nop
 800567c:	080056a1 	.word	0x080056a1
 8005680:	080056c1 	.word	0x080056c1
 8005684:	080056c9 	.word	0x080056c9
 8005688:	080056df 	.word	0x080056df
 800568c:	080056cf 	.word	0x080056cf
 8005690:	080056df 	.word	0x080056df
 8005694:	080056df 	.word	0x080056df
 8005698:	080056df 	.word	0x080056df
 800569c:	080056d7 	.word	0x080056d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80056a0:	f7ff fa26 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 80056a4:	61f8      	str	r0, [r7, #28]
        break;
 80056a6:	e020      	b.n	80056ea <UART_SetConfig+0x342>
 80056a8:	efff69f3 	.word	0xefff69f3
 80056ac:	40008000 	.word	0x40008000
 80056b0:	40013800 	.word	0x40013800
 80056b4:	40021000 	.word	0x40021000
 80056b8:	40004400 	.word	0x40004400
 80056bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80056c0:	f7ff fa2c 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 80056c4:	61f8      	str	r0, [r7, #28]
        break;
 80056c6:	e010      	b.n	80056ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80056c8:	4b4c      	ldr	r3, [pc, #304]	; (80057fc <UART_SetConfig+0x454>)
 80056ca:	61fb      	str	r3, [r7, #28]
        break;
 80056cc:	e00d      	b.n	80056ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80056ce:	f7ff f977 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80056d2:	61f8      	str	r0, [r7, #28]
        break;
 80056d4:	e009      	b.n	80056ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80056d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80056da:	61fb      	str	r3, [r7, #28]
        break;
 80056dc:	e005      	b.n	80056ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80056de:	2300      	movs	r3, #0
 80056e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80056e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056ea:	69fb      	ldr	r3, [r7, #28]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d077      	beq.n	80057e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	005a      	lsls	r2, r3, #1
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	085b      	lsrs	r3, r3, #1
 80056fa:	441a      	add	r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	fbb2 f3f3 	udiv	r3, r2, r3
 8005704:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005706:	69bb      	ldr	r3, [r7, #24]
 8005708:	2b0f      	cmp	r3, #15
 800570a:	d916      	bls.n	800573a <UART_SetConfig+0x392>
 800570c:	69bb      	ldr	r3, [r7, #24]
 800570e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005712:	d212      	bcs.n	800573a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005714:	69bb      	ldr	r3, [r7, #24]
 8005716:	b29b      	uxth	r3, r3
 8005718:	f023 030f 	bic.w	r3, r3, #15
 800571c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	085b      	lsrs	r3, r3, #1
 8005722:	b29b      	uxth	r3, r3
 8005724:	f003 0307 	and.w	r3, r3, #7
 8005728:	b29a      	uxth	r2, r3
 800572a:	8afb      	ldrh	r3, [r7, #22]
 800572c:	4313      	orrs	r3, r2
 800572e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	8afa      	ldrh	r2, [r7, #22]
 8005736:	60da      	str	r2, [r3, #12]
 8005738:	e052      	b.n	80057e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8005740:	e04e      	b.n	80057e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005742:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005746:	2b08      	cmp	r3, #8
 8005748:	d827      	bhi.n	800579a <UART_SetConfig+0x3f2>
 800574a:	a201      	add	r2, pc, #4	; (adr r2, 8005750 <UART_SetConfig+0x3a8>)
 800574c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005750:	08005775 	.word	0x08005775
 8005754:	0800577d 	.word	0x0800577d
 8005758:	08005785 	.word	0x08005785
 800575c:	0800579b 	.word	0x0800579b
 8005760:	0800578b 	.word	0x0800578b
 8005764:	0800579b 	.word	0x0800579b
 8005768:	0800579b 	.word	0x0800579b
 800576c:	0800579b 	.word	0x0800579b
 8005770:	08005793 	.word	0x08005793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005774:	f7ff f9bc 	bl	8004af0 <HAL_RCC_GetPCLK1Freq>
 8005778:	61f8      	str	r0, [r7, #28]
        break;
 800577a:	e014      	b.n	80057a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800577c:	f7ff f9ce 	bl	8004b1c <HAL_RCC_GetPCLK2Freq>
 8005780:	61f8      	str	r0, [r7, #28]
        break;
 8005782:	e010      	b.n	80057a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005784:	4b1d      	ldr	r3, [pc, #116]	; (80057fc <UART_SetConfig+0x454>)
 8005786:	61fb      	str	r3, [r7, #28]
        break;
 8005788:	e00d      	b.n	80057a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800578a:	f7ff f919 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 800578e:	61f8      	str	r0, [r7, #28]
        break;
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005792:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005796:	61fb      	str	r3, [r7, #28]
        break;
 8005798:	e005      	b.n	80057a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800579a:	2300      	movs	r3, #0
 800579c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80057a4:	bf00      	nop
    }

    if (pclk != 0U)
 80057a6:	69fb      	ldr	r3, [r7, #28]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d019      	beq.n	80057e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	085a      	lsrs	r2, r3, #1
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	441a      	add	r2, r3
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80057be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	2b0f      	cmp	r3, #15
 80057c4:	d909      	bls.n	80057da <UART_SetConfig+0x432>
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057cc:	d205      	bcs.n	80057da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ce:	69bb      	ldr	r3, [r7, #24]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e002      	b.n	80057e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2200      	movs	r2, #0
 80057ea:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80057ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3728      	adds	r7, #40	; 0x28
 80057f4:	46bd      	mov	sp, r7
 80057f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057fa:	bf00      	nop
 80057fc:	00f42400 	.word	0x00f42400

08005800 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005800:	b480      	push	{r7}
 8005802:	b083      	sub	sp, #12
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	f003 0308 	and.w	r3, r3, #8
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	430a      	orrs	r2, r1
 8005828:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582e:	f003 0301 	and.w	r3, r3, #1
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	430a      	orrs	r2, r1
 800584a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	f003 0302 	and.w	r3, r3, #2
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00a      	beq.n	800586e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005872:	f003 0304 	and.w	r3, r3, #4
 8005876:	2b00      	cmp	r3, #0
 8005878:	d00a      	beq.n	8005890 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	430a      	orrs	r2, r1
 800588e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005894:	f003 0310 	and.w	r3, r3, #16
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00a      	beq.n	80058b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d00a      	beq.n	80058d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	430a      	orrs	r2, r1
 80058d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d01a      	beq.n	8005916 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	430a      	orrs	r2, r1
 80058f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80058fe:	d10a      	bne.n	8005916 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800591a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00a      	beq.n	8005938 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	430a      	orrs	r2, r1
 8005936:	605a      	str	r2, [r3, #4]
  }
}
 8005938:	bf00      	nop
 800593a:	370c      	adds	r7, #12
 800593c:	46bd      	mov	sp, r7
 800593e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005942:	4770      	bx	lr

08005944 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b098      	sub	sp, #96	; 0x60
 8005948:	af02      	add	r7, sp, #8
 800594a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005954:	f7fb fc26 	bl	80011a4 <HAL_GetTick>
 8005958:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0308 	and.w	r3, r3, #8
 8005964:	2b08      	cmp	r3, #8
 8005966:	d12e      	bne.n	80059c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005968:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800596c:	9300      	str	r3, [sp, #0]
 800596e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005970:	2200      	movs	r2, #0
 8005972:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005976:	6878      	ldr	r0, [r7, #4]
 8005978:	f000 f88c 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 800597c:	4603      	mov	r3, r0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d021      	beq.n	80059c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598a:	e853 3f00 	ldrex	r3, [r3]
 800598e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005990:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005992:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005996:	653b      	str	r3, [r7, #80]	; 0x50
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	461a      	mov	r2, r3
 800599e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059a0:	647b      	str	r3, [r7, #68]	; 0x44
 80059a2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a8:	e841 2300 	strex	r3, r2, [r1]
 80059ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d1e6      	bne.n	8005982 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2220      	movs	r2, #32
 80059b8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e062      	b.n	8005a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0304 	and.w	r3, r3, #4
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d149      	bne.n	8005a68 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059dc:	2200      	movs	r2, #0
 80059de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 f856 	bl	8005a94 <UART_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d03c      	beq.n	8005a68 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f6:	e853 3f00 	ldrex	r3, [r3]
 80059fa:	623b      	str	r3, [r7, #32]
   return(result);
 80059fc:	6a3b      	ldr	r3, [r7, #32]
 80059fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	461a      	mov	r2, r3
 8005a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8005a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a10:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a14:	e841 2300 	strex	r3, r2, [r1]
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d1e6      	bne.n	80059ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	3308      	adds	r3, #8
 8005a26:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a28:	693b      	ldr	r3, [r7, #16]
 8005a2a:	e853 3f00 	ldrex	r3, [r3]
 8005a2e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3308      	adds	r3, #8
 8005a3e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a40:	61fa      	str	r2, [r7, #28]
 8005a42:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a44:	69b9      	ldr	r1, [r7, #24]
 8005a46:	69fa      	ldr	r2, [r7, #28]
 8005a48:	e841 2300 	strex	r3, r2, [r1]
 8005a4c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d1e5      	bne.n	8005a20 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a64:	2303      	movs	r3, #3
 8005a66:	e011      	b.n	8005a8c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3758      	adds	r7, #88	; 0x58
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	60f8      	str	r0, [r7, #12]
 8005a9c:	60b9      	str	r1, [r7, #8]
 8005a9e:	603b      	str	r3, [r7, #0]
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa4:	e049      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d045      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aae:	f7fb fb79 	bl	80011a4 <HAL_GetTick>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d302      	bcc.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d101      	bne.n	8005ac8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e048      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 0304 	and.w	r3, r3, #4
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d031      	beq.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	69db      	ldr	r3, [r3, #28]
 8005adc:	f003 0308 	and.w	r3, r3, #8
 8005ae0:	2b08      	cmp	r3, #8
 8005ae2:	d110      	bne.n	8005b06 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	2208      	movs	r2, #8
 8005aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f000 f838 	bl	8005b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2208      	movs	r2, #8
 8005af6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e029      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	69db      	ldr	r3, [r3, #28]
 8005b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b14:	d111      	bne.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b1e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b20:	68f8      	ldr	r0, [r7, #12]
 8005b22:	f000 f81e 	bl	8005b62 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2220      	movs	r2, #32
 8005b2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b36:	2303      	movs	r3, #3
 8005b38:	e00f      	b.n	8005b5a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	69da      	ldr	r2, [r3, #28]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	4013      	ands	r3, r2
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	429a      	cmp	r2, r3
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	461a      	mov	r2, r3
 8005b52:	79fb      	ldrb	r3, [r7, #7]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d0a6      	beq.n	8005aa6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b095      	sub	sp, #84	; 0x54
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b72:	e853 3f00 	ldrex	r3, [r3]
 8005b76:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	461a      	mov	r2, r3
 8005b86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b88:	643b      	str	r3, [r7, #64]	; 0x40
 8005b8a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b90:	e841 2300 	strex	r3, r2, [r1]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d1e6      	bne.n	8005b6a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	3308      	adds	r3, #8
 8005ba2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	e853 3f00 	ldrex	r3, [r3]
 8005baa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	f023 0301 	bic.w	r3, r3, #1
 8005bb2:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3308      	adds	r3, #8
 8005bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bbc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e5      	bne.n	8005b9c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d118      	bne.n	8005c0a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	e853 3f00 	ldrex	r3, [r3]
 8005be4:	60bb      	str	r3, [r7, #8]
   return(result);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	f023 0310 	bic.w	r3, r3, #16
 8005bec:	647b      	str	r3, [r7, #68]	; 0x44
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfa:	6979      	ldr	r1, [r7, #20]
 8005bfc:	69ba      	ldr	r2, [r7, #24]
 8005bfe:	e841 2300 	strex	r3, r2, [r1]
 8005c02:	613b      	str	r3, [r7, #16]
   return(result);
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d1e6      	bne.n	8005bd8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	2220      	movs	r2, #32
 8005c0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c1e:	bf00      	nop
 8005c20:	3754      	adds	r7, #84	; 0x54
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <siprintf>:
 8005c2c:	b40e      	push	{r1, r2, r3}
 8005c2e:	b500      	push	{lr}
 8005c30:	b09c      	sub	sp, #112	; 0x70
 8005c32:	ab1d      	add	r3, sp, #116	; 0x74
 8005c34:	9002      	str	r0, [sp, #8]
 8005c36:	9006      	str	r0, [sp, #24]
 8005c38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005c3c:	4809      	ldr	r0, [pc, #36]	; (8005c64 <siprintf+0x38>)
 8005c3e:	9107      	str	r1, [sp, #28]
 8005c40:	9104      	str	r1, [sp, #16]
 8005c42:	4909      	ldr	r1, [pc, #36]	; (8005c68 <siprintf+0x3c>)
 8005c44:	f853 2b04 	ldr.w	r2, [r3], #4
 8005c48:	9105      	str	r1, [sp, #20]
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	9301      	str	r3, [sp, #4]
 8005c4e:	a902      	add	r1, sp, #8
 8005c50:	f000 f992 	bl	8005f78 <_svfiprintf_r>
 8005c54:	9b02      	ldr	r3, [sp, #8]
 8005c56:	2200      	movs	r2, #0
 8005c58:	701a      	strb	r2, [r3, #0]
 8005c5a:	b01c      	add	sp, #112	; 0x70
 8005c5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005c60:	b003      	add	sp, #12
 8005c62:	4770      	bx	lr
 8005c64:	20000058 	.word	0x20000058
 8005c68:	ffff0208 	.word	0xffff0208

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <__errno>:
 8005c7c:	4b01      	ldr	r3, [pc, #4]	; (8005c84 <__errno+0x8>)
 8005c7e:	6818      	ldr	r0, [r3, #0]
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	20000058 	.word	0x20000058

08005c88 <__libc_init_array>:
 8005c88:	b570      	push	{r4, r5, r6, lr}
 8005c8a:	4d0d      	ldr	r5, [pc, #52]	; (8005cc0 <__libc_init_array+0x38>)
 8005c8c:	4c0d      	ldr	r4, [pc, #52]	; (8005cc4 <__libc_init_array+0x3c>)
 8005c8e:	1b64      	subs	r4, r4, r5
 8005c90:	10a4      	asrs	r4, r4, #2
 8005c92:	2600      	movs	r6, #0
 8005c94:	42a6      	cmp	r6, r4
 8005c96:	d109      	bne.n	8005cac <__libc_init_array+0x24>
 8005c98:	4d0b      	ldr	r5, [pc, #44]	; (8005cc8 <__libc_init_array+0x40>)
 8005c9a:	4c0c      	ldr	r4, [pc, #48]	; (8005ccc <__libc_init_array+0x44>)
 8005c9c:	f000 fc6a 	bl	8006574 <_init>
 8005ca0:	1b64      	subs	r4, r4, r5
 8005ca2:	10a4      	asrs	r4, r4, #2
 8005ca4:	2600      	movs	r6, #0
 8005ca6:	42a6      	cmp	r6, r4
 8005ca8:	d105      	bne.n	8005cb6 <__libc_init_array+0x2e>
 8005caa:	bd70      	pop	{r4, r5, r6, pc}
 8005cac:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cb0:	4798      	blx	r3
 8005cb2:	3601      	adds	r6, #1
 8005cb4:	e7ee      	b.n	8005c94 <__libc_init_array+0xc>
 8005cb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cba:	4798      	blx	r3
 8005cbc:	3601      	adds	r6, #1
 8005cbe:	e7f2      	b.n	8005ca6 <__libc_init_array+0x1e>
 8005cc0:	0800666c 	.word	0x0800666c
 8005cc4:	0800666c 	.word	0x0800666c
 8005cc8:	0800666c 	.word	0x0800666c
 8005ccc:	08006670 	.word	0x08006670

08005cd0 <__retarget_lock_acquire_recursive>:
 8005cd0:	4770      	bx	lr

08005cd2 <__retarget_lock_release_recursive>:
 8005cd2:	4770      	bx	lr

08005cd4 <_free_r>:
 8005cd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cd6:	2900      	cmp	r1, #0
 8005cd8:	d044      	beq.n	8005d64 <_free_r+0x90>
 8005cda:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cde:	9001      	str	r0, [sp, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f1a1 0404 	sub.w	r4, r1, #4
 8005ce6:	bfb8      	it	lt
 8005ce8:	18e4      	addlt	r4, r4, r3
 8005cea:	f000 f8df 	bl	8005eac <__malloc_lock>
 8005cee:	4a1e      	ldr	r2, [pc, #120]	; (8005d68 <_free_r+0x94>)
 8005cf0:	9801      	ldr	r0, [sp, #4]
 8005cf2:	6813      	ldr	r3, [r2, #0]
 8005cf4:	b933      	cbnz	r3, 8005d04 <_free_r+0x30>
 8005cf6:	6063      	str	r3, [r4, #4]
 8005cf8:	6014      	str	r4, [r2, #0]
 8005cfa:	b003      	add	sp, #12
 8005cfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d00:	f000 b8da 	b.w	8005eb8 <__malloc_unlock>
 8005d04:	42a3      	cmp	r3, r4
 8005d06:	d908      	bls.n	8005d1a <_free_r+0x46>
 8005d08:	6825      	ldr	r5, [r4, #0]
 8005d0a:	1961      	adds	r1, r4, r5
 8005d0c:	428b      	cmp	r3, r1
 8005d0e:	bf01      	itttt	eq
 8005d10:	6819      	ldreq	r1, [r3, #0]
 8005d12:	685b      	ldreq	r3, [r3, #4]
 8005d14:	1949      	addeq	r1, r1, r5
 8005d16:	6021      	streq	r1, [r4, #0]
 8005d18:	e7ed      	b.n	8005cf6 <_free_r+0x22>
 8005d1a:	461a      	mov	r2, r3
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	b10b      	cbz	r3, 8005d24 <_free_r+0x50>
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d9fa      	bls.n	8005d1a <_free_r+0x46>
 8005d24:	6811      	ldr	r1, [r2, #0]
 8005d26:	1855      	adds	r5, r2, r1
 8005d28:	42a5      	cmp	r5, r4
 8005d2a:	d10b      	bne.n	8005d44 <_free_r+0x70>
 8005d2c:	6824      	ldr	r4, [r4, #0]
 8005d2e:	4421      	add	r1, r4
 8005d30:	1854      	adds	r4, r2, r1
 8005d32:	42a3      	cmp	r3, r4
 8005d34:	6011      	str	r1, [r2, #0]
 8005d36:	d1e0      	bne.n	8005cfa <_free_r+0x26>
 8005d38:	681c      	ldr	r4, [r3, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	6053      	str	r3, [r2, #4]
 8005d3e:	440c      	add	r4, r1
 8005d40:	6014      	str	r4, [r2, #0]
 8005d42:	e7da      	b.n	8005cfa <_free_r+0x26>
 8005d44:	d902      	bls.n	8005d4c <_free_r+0x78>
 8005d46:	230c      	movs	r3, #12
 8005d48:	6003      	str	r3, [r0, #0]
 8005d4a:	e7d6      	b.n	8005cfa <_free_r+0x26>
 8005d4c:	6825      	ldr	r5, [r4, #0]
 8005d4e:	1961      	adds	r1, r4, r5
 8005d50:	428b      	cmp	r3, r1
 8005d52:	bf04      	itt	eq
 8005d54:	6819      	ldreq	r1, [r3, #0]
 8005d56:	685b      	ldreq	r3, [r3, #4]
 8005d58:	6063      	str	r3, [r4, #4]
 8005d5a:	bf04      	itt	eq
 8005d5c:	1949      	addeq	r1, r1, r5
 8005d5e:	6021      	streq	r1, [r4, #0]
 8005d60:	6054      	str	r4, [r2, #4]
 8005d62:	e7ca      	b.n	8005cfa <_free_r+0x26>
 8005d64:	b003      	add	sp, #12
 8005d66:	bd30      	pop	{r4, r5, pc}
 8005d68:	20000400 	.word	0x20000400

08005d6c <sbrk_aligned>:
 8005d6c:	b570      	push	{r4, r5, r6, lr}
 8005d6e:	4e0e      	ldr	r6, [pc, #56]	; (8005da8 <sbrk_aligned+0x3c>)
 8005d70:	460c      	mov	r4, r1
 8005d72:	6831      	ldr	r1, [r6, #0]
 8005d74:	4605      	mov	r5, r0
 8005d76:	b911      	cbnz	r1, 8005d7e <sbrk_aligned+0x12>
 8005d78:	f000 fba6 	bl	80064c8 <_sbrk_r>
 8005d7c:	6030      	str	r0, [r6, #0]
 8005d7e:	4621      	mov	r1, r4
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 fba1 	bl	80064c8 <_sbrk_r>
 8005d86:	1c43      	adds	r3, r0, #1
 8005d88:	d00a      	beq.n	8005da0 <sbrk_aligned+0x34>
 8005d8a:	1cc4      	adds	r4, r0, #3
 8005d8c:	f024 0403 	bic.w	r4, r4, #3
 8005d90:	42a0      	cmp	r0, r4
 8005d92:	d007      	beq.n	8005da4 <sbrk_aligned+0x38>
 8005d94:	1a21      	subs	r1, r4, r0
 8005d96:	4628      	mov	r0, r5
 8005d98:	f000 fb96 	bl	80064c8 <_sbrk_r>
 8005d9c:	3001      	adds	r0, #1
 8005d9e:	d101      	bne.n	8005da4 <sbrk_aligned+0x38>
 8005da0:	f04f 34ff 	mov.w	r4, #4294967295
 8005da4:	4620      	mov	r0, r4
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
 8005da8:	20000404 	.word	0x20000404

08005dac <_malloc_r>:
 8005dac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005db0:	1ccd      	adds	r5, r1, #3
 8005db2:	f025 0503 	bic.w	r5, r5, #3
 8005db6:	3508      	adds	r5, #8
 8005db8:	2d0c      	cmp	r5, #12
 8005dba:	bf38      	it	cc
 8005dbc:	250c      	movcc	r5, #12
 8005dbe:	2d00      	cmp	r5, #0
 8005dc0:	4607      	mov	r7, r0
 8005dc2:	db01      	blt.n	8005dc8 <_malloc_r+0x1c>
 8005dc4:	42a9      	cmp	r1, r5
 8005dc6:	d905      	bls.n	8005dd4 <_malloc_r+0x28>
 8005dc8:	230c      	movs	r3, #12
 8005dca:	603b      	str	r3, [r7, #0]
 8005dcc:	2600      	movs	r6, #0
 8005dce:	4630      	mov	r0, r6
 8005dd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dd4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005ea8 <_malloc_r+0xfc>
 8005dd8:	f000 f868 	bl	8005eac <__malloc_lock>
 8005ddc:	f8d8 3000 	ldr.w	r3, [r8]
 8005de0:	461c      	mov	r4, r3
 8005de2:	bb5c      	cbnz	r4, 8005e3c <_malloc_r+0x90>
 8005de4:	4629      	mov	r1, r5
 8005de6:	4638      	mov	r0, r7
 8005de8:	f7ff ffc0 	bl	8005d6c <sbrk_aligned>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	4604      	mov	r4, r0
 8005df0:	d155      	bne.n	8005e9e <_malloc_r+0xf2>
 8005df2:	f8d8 4000 	ldr.w	r4, [r8]
 8005df6:	4626      	mov	r6, r4
 8005df8:	2e00      	cmp	r6, #0
 8005dfa:	d145      	bne.n	8005e88 <_malloc_r+0xdc>
 8005dfc:	2c00      	cmp	r4, #0
 8005dfe:	d048      	beq.n	8005e92 <_malloc_r+0xe6>
 8005e00:	6823      	ldr	r3, [r4, #0]
 8005e02:	4631      	mov	r1, r6
 8005e04:	4638      	mov	r0, r7
 8005e06:	eb04 0903 	add.w	r9, r4, r3
 8005e0a:	f000 fb5d 	bl	80064c8 <_sbrk_r>
 8005e0e:	4581      	cmp	r9, r0
 8005e10:	d13f      	bne.n	8005e92 <_malloc_r+0xe6>
 8005e12:	6821      	ldr	r1, [r4, #0]
 8005e14:	1a6d      	subs	r5, r5, r1
 8005e16:	4629      	mov	r1, r5
 8005e18:	4638      	mov	r0, r7
 8005e1a:	f7ff ffa7 	bl	8005d6c <sbrk_aligned>
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d037      	beq.n	8005e92 <_malloc_r+0xe6>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	442b      	add	r3, r5
 8005e26:	6023      	str	r3, [r4, #0]
 8005e28:	f8d8 3000 	ldr.w	r3, [r8]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d038      	beq.n	8005ea2 <_malloc_r+0xf6>
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	42a2      	cmp	r2, r4
 8005e34:	d12b      	bne.n	8005e8e <_malloc_r+0xe2>
 8005e36:	2200      	movs	r2, #0
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	e00f      	b.n	8005e5c <_malloc_r+0xb0>
 8005e3c:	6822      	ldr	r2, [r4, #0]
 8005e3e:	1b52      	subs	r2, r2, r5
 8005e40:	d41f      	bmi.n	8005e82 <_malloc_r+0xd6>
 8005e42:	2a0b      	cmp	r2, #11
 8005e44:	d917      	bls.n	8005e76 <_malloc_r+0xca>
 8005e46:	1961      	adds	r1, r4, r5
 8005e48:	42a3      	cmp	r3, r4
 8005e4a:	6025      	str	r5, [r4, #0]
 8005e4c:	bf18      	it	ne
 8005e4e:	6059      	strne	r1, [r3, #4]
 8005e50:	6863      	ldr	r3, [r4, #4]
 8005e52:	bf08      	it	eq
 8005e54:	f8c8 1000 	streq.w	r1, [r8]
 8005e58:	5162      	str	r2, [r4, r5]
 8005e5a:	604b      	str	r3, [r1, #4]
 8005e5c:	4638      	mov	r0, r7
 8005e5e:	f104 060b 	add.w	r6, r4, #11
 8005e62:	f000 f829 	bl	8005eb8 <__malloc_unlock>
 8005e66:	f026 0607 	bic.w	r6, r6, #7
 8005e6a:	1d23      	adds	r3, r4, #4
 8005e6c:	1af2      	subs	r2, r6, r3
 8005e6e:	d0ae      	beq.n	8005dce <_malloc_r+0x22>
 8005e70:	1b9b      	subs	r3, r3, r6
 8005e72:	50a3      	str	r3, [r4, r2]
 8005e74:	e7ab      	b.n	8005dce <_malloc_r+0x22>
 8005e76:	42a3      	cmp	r3, r4
 8005e78:	6862      	ldr	r2, [r4, #4]
 8005e7a:	d1dd      	bne.n	8005e38 <_malloc_r+0x8c>
 8005e7c:	f8c8 2000 	str.w	r2, [r8]
 8005e80:	e7ec      	b.n	8005e5c <_malloc_r+0xb0>
 8005e82:	4623      	mov	r3, r4
 8005e84:	6864      	ldr	r4, [r4, #4]
 8005e86:	e7ac      	b.n	8005de2 <_malloc_r+0x36>
 8005e88:	4634      	mov	r4, r6
 8005e8a:	6876      	ldr	r6, [r6, #4]
 8005e8c:	e7b4      	b.n	8005df8 <_malloc_r+0x4c>
 8005e8e:	4613      	mov	r3, r2
 8005e90:	e7cc      	b.n	8005e2c <_malloc_r+0x80>
 8005e92:	230c      	movs	r3, #12
 8005e94:	603b      	str	r3, [r7, #0]
 8005e96:	4638      	mov	r0, r7
 8005e98:	f000 f80e 	bl	8005eb8 <__malloc_unlock>
 8005e9c:	e797      	b.n	8005dce <_malloc_r+0x22>
 8005e9e:	6025      	str	r5, [r4, #0]
 8005ea0:	e7dc      	b.n	8005e5c <_malloc_r+0xb0>
 8005ea2:	605b      	str	r3, [r3, #4]
 8005ea4:	deff      	udf	#255	; 0xff
 8005ea6:	bf00      	nop
 8005ea8:	20000400 	.word	0x20000400

08005eac <__malloc_lock>:
 8005eac:	4801      	ldr	r0, [pc, #4]	; (8005eb4 <__malloc_lock+0x8>)
 8005eae:	f7ff bf0f 	b.w	8005cd0 <__retarget_lock_acquire_recursive>
 8005eb2:	bf00      	nop
 8005eb4:	200003fc 	.word	0x200003fc

08005eb8 <__malloc_unlock>:
 8005eb8:	4801      	ldr	r0, [pc, #4]	; (8005ec0 <__malloc_unlock+0x8>)
 8005eba:	f7ff bf0a 	b.w	8005cd2 <__retarget_lock_release_recursive>
 8005ebe:	bf00      	nop
 8005ec0:	200003fc 	.word	0x200003fc

08005ec4 <__ssputs_r>:
 8005ec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec8:	688e      	ldr	r6, [r1, #8]
 8005eca:	461f      	mov	r7, r3
 8005ecc:	42be      	cmp	r6, r7
 8005ece:	680b      	ldr	r3, [r1, #0]
 8005ed0:	4682      	mov	sl, r0
 8005ed2:	460c      	mov	r4, r1
 8005ed4:	4690      	mov	r8, r2
 8005ed6:	d82c      	bhi.n	8005f32 <__ssputs_r+0x6e>
 8005ed8:	898a      	ldrh	r2, [r1, #12]
 8005eda:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ede:	d026      	beq.n	8005f2e <__ssputs_r+0x6a>
 8005ee0:	6965      	ldr	r5, [r4, #20]
 8005ee2:	6909      	ldr	r1, [r1, #16]
 8005ee4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ee8:	eba3 0901 	sub.w	r9, r3, r1
 8005eec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005ef0:	1c7b      	adds	r3, r7, #1
 8005ef2:	444b      	add	r3, r9
 8005ef4:	106d      	asrs	r5, r5, #1
 8005ef6:	429d      	cmp	r5, r3
 8005ef8:	bf38      	it	cc
 8005efa:	461d      	movcc	r5, r3
 8005efc:	0553      	lsls	r3, r2, #21
 8005efe:	d527      	bpl.n	8005f50 <__ssputs_r+0x8c>
 8005f00:	4629      	mov	r1, r5
 8005f02:	f7ff ff53 	bl	8005dac <_malloc_r>
 8005f06:	4606      	mov	r6, r0
 8005f08:	b360      	cbz	r0, 8005f64 <__ssputs_r+0xa0>
 8005f0a:	6921      	ldr	r1, [r4, #16]
 8005f0c:	464a      	mov	r2, r9
 8005f0e:	f000 faeb 	bl	80064e8 <memcpy>
 8005f12:	89a3      	ldrh	r3, [r4, #12]
 8005f14:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1c:	81a3      	strh	r3, [r4, #12]
 8005f1e:	6126      	str	r6, [r4, #16]
 8005f20:	6165      	str	r5, [r4, #20]
 8005f22:	444e      	add	r6, r9
 8005f24:	eba5 0509 	sub.w	r5, r5, r9
 8005f28:	6026      	str	r6, [r4, #0]
 8005f2a:	60a5      	str	r5, [r4, #8]
 8005f2c:	463e      	mov	r6, r7
 8005f2e:	42be      	cmp	r6, r7
 8005f30:	d900      	bls.n	8005f34 <__ssputs_r+0x70>
 8005f32:	463e      	mov	r6, r7
 8005f34:	6820      	ldr	r0, [r4, #0]
 8005f36:	4632      	mov	r2, r6
 8005f38:	4641      	mov	r1, r8
 8005f3a:	f000 faab 	bl	8006494 <memmove>
 8005f3e:	68a3      	ldr	r3, [r4, #8]
 8005f40:	1b9b      	subs	r3, r3, r6
 8005f42:	60a3      	str	r3, [r4, #8]
 8005f44:	6823      	ldr	r3, [r4, #0]
 8005f46:	4433      	add	r3, r6
 8005f48:	6023      	str	r3, [r4, #0]
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	462a      	mov	r2, r5
 8005f52:	f000 fad7 	bl	8006504 <_realloc_r>
 8005f56:	4606      	mov	r6, r0
 8005f58:	2800      	cmp	r0, #0
 8005f5a:	d1e0      	bne.n	8005f1e <__ssputs_r+0x5a>
 8005f5c:	6921      	ldr	r1, [r4, #16]
 8005f5e:	4650      	mov	r0, sl
 8005f60:	f7ff feb8 	bl	8005cd4 <_free_r>
 8005f64:	230c      	movs	r3, #12
 8005f66:	f8ca 3000 	str.w	r3, [sl]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005f70:	81a3      	strh	r3, [r4, #12]
 8005f72:	f04f 30ff 	mov.w	r0, #4294967295
 8005f76:	e7e9      	b.n	8005f4c <__ssputs_r+0x88>

08005f78 <_svfiprintf_r>:
 8005f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f7c:	4698      	mov	r8, r3
 8005f7e:	898b      	ldrh	r3, [r1, #12]
 8005f80:	061b      	lsls	r3, r3, #24
 8005f82:	b09d      	sub	sp, #116	; 0x74
 8005f84:	4607      	mov	r7, r0
 8005f86:	460d      	mov	r5, r1
 8005f88:	4614      	mov	r4, r2
 8005f8a:	d50e      	bpl.n	8005faa <_svfiprintf_r+0x32>
 8005f8c:	690b      	ldr	r3, [r1, #16]
 8005f8e:	b963      	cbnz	r3, 8005faa <_svfiprintf_r+0x32>
 8005f90:	2140      	movs	r1, #64	; 0x40
 8005f92:	f7ff ff0b 	bl	8005dac <_malloc_r>
 8005f96:	6028      	str	r0, [r5, #0]
 8005f98:	6128      	str	r0, [r5, #16]
 8005f9a:	b920      	cbnz	r0, 8005fa6 <_svfiprintf_r+0x2e>
 8005f9c:	230c      	movs	r3, #12
 8005f9e:	603b      	str	r3, [r7, #0]
 8005fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa4:	e0d0      	b.n	8006148 <_svfiprintf_r+0x1d0>
 8005fa6:	2340      	movs	r3, #64	; 0x40
 8005fa8:	616b      	str	r3, [r5, #20]
 8005faa:	2300      	movs	r3, #0
 8005fac:	9309      	str	r3, [sp, #36]	; 0x24
 8005fae:	2320      	movs	r3, #32
 8005fb0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005fb4:	f8cd 800c 	str.w	r8, [sp, #12]
 8005fb8:	2330      	movs	r3, #48	; 0x30
 8005fba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006160 <_svfiprintf_r+0x1e8>
 8005fbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005fc2:	f04f 0901 	mov.w	r9, #1
 8005fc6:	4623      	mov	r3, r4
 8005fc8:	469a      	mov	sl, r3
 8005fca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005fce:	b10a      	cbz	r2, 8005fd4 <_svfiprintf_r+0x5c>
 8005fd0:	2a25      	cmp	r2, #37	; 0x25
 8005fd2:	d1f9      	bne.n	8005fc8 <_svfiprintf_r+0x50>
 8005fd4:	ebba 0b04 	subs.w	fp, sl, r4
 8005fd8:	d00b      	beq.n	8005ff2 <_svfiprintf_r+0x7a>
 8005fda:	465b      	mov	r3, fp
 8005fdc:	4622      	mov	r2, r4
 8005fde:	4629      	mov	r1, r5
 8005fe0:	4638      	mov	r0, r7
 8005fe2:	f7ff ff6f 	bl	8005ec4 <__ssputs_r>
 8005fe6:	3001      	adds	r0, #1
 8005fe8:	f000 80a9 	beq.w	800613e <_svfiprintf_r+0x1c6>
 8005fec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005fee:	445a      	add	r2, fp
 8005ff0:	9209      	str	r2, [sp, #36]	; 0x24
 8005ff2:	f89a 3000 	ldrb.w	r3, [sl]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f000 80a1 	beq.w	800613e <_svfiprintf_r+0x1c6>
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	f04f 32ff 	mov.w	r2, #4294967295
 8006002:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006006:	f10a 0a01 	add.w	sl, sl, #1
 800600a:	9304      	str	r3, [sp, #16]
 800600c:	9307      	str	r3, [sp, #28]
 800600e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006012:	931a      	str	r3, [sp, #104]	; 0x68
 8006014:	4654      	mov	r4, sl
 8006016:	2205      	movs	r2, #5
 8006018:	f814 1b01 	ldrb.w	r1, [r4], #1
 800601c:	4850      	ldr	r0, [pc, #320]	; (8006160 <_svfiprintf_r+0x1e8>)
 800601e:	f7fa f8df 	bl	80001e0 <memchr>
 8006022:	9a04      	ldr	r2, [sp, #16]
 8006024:	b9d8      	cbnz	r0, 800605e <_svfiprintf_r+0xe6>
 8006026:	06d0      	lsls	r0, r2, #27
 8006028:	bf44      	itt	mi
 800602a:	2320      	movmi	r3, #32
 800602c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006030:	0711      	lsls	r1, r2, #28
 8006032:	bf44      	itt	mi
 8006034:	232b      	movmi	r3, #43	; 0x2b
 8006036:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800603a:	f89a 3000 	ldrb.w	r3, [sl]
 800603e:	2b2a      	cmp	r3, #42	; 0x2a
 8006040:	d015      	beq.n	800606e <_svfiprintf_r+0xf6>
 8006042:	9a07      	ldr	r2, [sp, #28]
 8006044:	4654      	mov	r4, sl
 8006046:	2000      	movs	r0, #0
 8006048:	f04f 0c0a 	mov.w	ip, #10
 800604c:	4621      	mov	r1, r4
 800604e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006052:	3b30      	subs	r3, #48	; 0x30
 8006054:	2b09      	cmp	r3, #9
 8006056:	d94d      	bls.n	80060f4 <_svfiprintf_r+0x17c>
 8006058:	b1b0      	cbz	r0, 8006088 <_svfiprintf_r+0x110>
 800605a:	9207      	str	r2, [sp, #28]
 800605c:	e014      	b.n	8006088 <_svfiprintf_r+0x110>
 800605e:	eba0 0308 	sub.w	r3, r0, r8
 8006062:	fa09 f303 	lsl.w	r3, r9, r3
 8006066:	4313      	orrs	r3, r2
 8006068:	9304      	str	r3, [sp, #16]
 800606a:	46a2      	mov	sl, r4
 800606c:	e7d2      	b.n	8006014 <_svfiprintf_r+0x9c>
 800606e:	9b03      	ldr	r3, [sp, #12]
 8006070:	1d19      	adds	r1, r3, #4
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	9103      	str	r1, [sp, #12]
 8006076:	2b00      	cmp	r3, #0
 8006078:	bfbb      	ittet	lt
 800607a:	425b      	neglt	r3, r3
 800607c:	f042 0202 	orrlt.w	r2, r2, #2
 8006080:	9307      	strge	r3, [sp, #28]
 8006082:	9307      	strlt	r3, [sp, #28]
 8006084:	bfb8      	it	lt
 8006086:	9204      	strlt	r2, [sp, #16]
 8006088:	7823      	ldrb	r3, [r4, #0]
 800608a:	2b2e      	cmp	r3, #46	; 0x2e
 800608c:	d10c      	bne.n	80060a8 <_svfiprintf_r+0x130>
 800608e:	7863      	ldrb	r3, [r4, #1]
 8006090:	2b2a      	cmp	r3, #42	; 0x2a
 8006092:	d134      	bne.n	80060fe <_svfiprintf_r+0x186>
 8006094:	9b03      	ldr	r3, [sp, #12]
 8006096:	1d1a      	adds	r2, r3, #4
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	9203      	str	r2, [sp, #12]
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfb8      	it	lt
 80060a0:	f04f 33ff 	movlt.w	r3, #4294967295
 80060a4:	3402      	adds	r4, #2
 80060a6:	9305      	str	r3, [sp, #20]
 80060a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006170 <_svfiprintf_r+0x1f8>
 80060ac:	7821      	ldrb	r1, [r4, #0]
 80060ae:	2203      	movs	r2, #3
 80060b0:	4650      	mov	r0, sl
 80060b2:	f7fa f895 	bl	80001e0 <memchr>
 80060b6:	b138      	cbz	r0, 80060c8 <_svfiprintf_r+0x150>
 80060b8:	9b04      	ldr	r3, [sp, #16]
 80060ba:	eba0 000a 	sub.w	r0, r0, sl
 80060be:	2240      	movs	r2, #64	; 0x40
 80060c0:	4082      	lsls	r2, r0
 80060c2:	4313      	orrs	r3, r2
 80060c4:	3401      	adds	r4, #1
 80060c6:	9304      	str	r3, [sp, #16]
 80060c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80060cc:	4825      	ldr	r0, [pc, #148]	; (8006164 <_svfiprintf_r+0x1ec>)
 80060ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80060d2:	2206      	movs	r2, #6
 80060d4:	f7fa f884 	bl	80001e0 <memchr>
 80060d8:	2800      	cmp	r0, #0
 80060da:	d038      	beq.n	800614e <_svfiprintf_r+0x1d6>
 80060dc:	4b22      	ldr	r3, [pc, #136]	; (8006168 <_svfiprintf_r+0x1f0>)
 80060de:	bb1b      	cbnz	r3, 8006128 <_svfiprintf_r+0x1b0>
 80060e0:	9b03      	ldr	r3, [sp, #12]
 80060e2:	3307      	adds	r3, #7
 80060e4:	f023 0307 	bic.w	r3, r3, #7
 80060e8:	3308      	adds	r3, #8
 80060ea:	9303      	str	r3, [sp, #12]
 80060ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80060ee:	4433      	add	r3, r6
 80060f0:	9309      	str	r3, [sp, #36]	; 0x24
 80060f2:	e768      	b.n	8005fc6 <_svfiprintf_r+0x4e>
 80060f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80060f8:	460c      	mov	r4, r1
 80060fa:	2001      	movs	r0, #1
 80060fc:	e7a6      	b.n	800604c <_svfiprintf_r+0xd4>
 80060fe:	2300      	movs	r3, #0
 8006100:	3401      	adds	r4, #1
 8006102:	9305      	str	r3, [sp, #20]
 8006104:	4619      	mov	r1, r3
 8006106:	f04f 0c0a 	mov.w	ip, #10
 800610a:	4620      	mov	r0, r4
 800610c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006110:	3a30      	subs	r2, #48	; 0x30
 8006112:	2a09      	cmp	r2, #9
 8006114:	d903      	bls.n	800611e <_svfiprintf_r+0x1a6>
 8006116:	2b00      	cmp	r3, #0
 8006118:	d0c6      	beq.n	80060a8 <_svfiprintf_r+0x130>
 800611a:	9105      	str	r1, [sp, #20]
 800611c:	e7c4      	b.n	80060a8 <_svfiprintf_r+0x130>
 800611e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006122:	4604      	mov	r4, r0
 8006124:	2301      	movs	r3, #1
 8006126:	e7f0      	b.n	800610a <_svfiprintf_r+0x192>
 8006128:	ab03      	add	r3, sp, #12
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	462a      	mov	r2, r5
 800612e:	4b0f      	ldr	r3, [pc, #60]	; (800616c <_svfiprintf_r+0x1f4>)
 8006130:	a904      	add	r1, sp, #16
 8006132:	4638      	mov	r0, r7
 8006134:	f3af 8000 	nop.w
 8006138:	1c42      	adds	r2, r0, #1
 800613a:	4606      	mov	r6, r0
 800613c:	d1d6      	bne.n	80060ec <_svfiprintf_r+0x174>
 800613e:	89ab      	ldrh	r3, [r5, #12]
 8006140:	065b      	lsls	r3, r3, #25
 8006142:	f53f af2d 	bmi.w	8005fa0 <_svfiprintf_r+0x28>
 8006146:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006148:	b01d      	add	sp, #116	; 0x74
 800614a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800614e:	ab03      	add	r3, sp, #12
 8006150:	9300      	str	r3, [sp, #0]
 8006152:	462a      	mov	r2, r5
 8006154:	4b05      	ldr	r3, [pc, #20]	; (800616c <_svfiprintf_r+0x1f4>)
 8006156:	a904      	add	r1, sp, #16
 8006158:	4638      	mov	r0, r7
 800615a:	f000 f879 	bl	8006250 <_printf_i>
 800615e:	e7eb      	b.n	8006138 <_svfiprintf_r+0x1c0>
 8006160:	08006630 	.word	0x08006630
 8006164:	0800663a 	.word	0x0800663a
 8006168:	00000000 	.word	0x00000000
 800616c:	08005ec5 	.word	0x08005ec5
 8006170:	08006636 	.word	0x08006636

08006174 <_printf_common>:
 8006174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006178:	4616      	mov	r6, r2
 800617a:	4699      	mov	r9, r3
 800617c:	688a      	ldr	r2, [r1, #8]
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006184:	4293      	cmp	r3, r2
 8006186:	bfb8      	it	lt
 8006188:	4613      	movlt	r3, r2
 800618a:	6033      	str	r3, [r6, #0]
 800618c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006190:	4607      	mov	r7, r0
 8006192:	460c      	mov	r4, r1
 8006194:	b10a      	cbz	r2, 800619a <_printf_common+0x26>
 8006196:	3301      	adds	r3, #1
 8006198:	6033      	str	r3, [r6, #0]
 800619a:	6823      	ldr	r3, [r4, #0]
 800619c:	0699      	lsls	r1, r3, #26
 800619e:	bf42      	ittt	mi
 80061a0:	6833      	ldrmi	r3, [r6, #0]
 80061a2:	3302      	addmi	r3, #2
 80061a4:	6033      	strmi	r3, [r6, #0]
 80061a6:	6825      	ldr	r5, [r4, #0]
 80061a8:	f015 0506 	ands.w	r5, r5, #6
 80061ac:	d106      	bne.n	80061bc <_printf_common+0x48>
 80061ae:	f104 0a19 	add.w	sl, r4, #25
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	6832      	ldr	r2, [r6, #0]
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	dc26      	bgt.n	800620a <_printf_common+0x96>
 80061bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80061c0:	1e13      	subs	r3, r2, #0
 80061c2:	6822      	ldr	r2, [r4, #0]
 80061c4:	bf18      	it	ne
 80061c6:	2301      	movne	r3, #1
 80061c8:	0692      	lsls	r2, r2, #26
 80061ca:	d42b      	bmi.n	8006224 <_printf_common+0xb0>
 80061cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061d0:	4649      	mov	r1, r9
 80061d2:	4638      	mov	r0, r7
 80061d4:	47c0      	blx	r8
 80061d6:	3001      	adds	r0, #1
 80061d8:	d01e      	beq.n	8006218 <_printf_common+0xa4>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	6922      	ldr	r2, [r4, #16]
 80061de:	f003 0306 	and.w	r3, r3, #6
 80061e2:	2b04      	cmp	r3, #4
 80061e4:	bf02      	ittt	eq
 80061e6:	68e5      	ldreq	r5, [r4, #12]
 80061e8:	6833      	ldreq	r3, [r6, #0]
 80061ea:	1aed      	subeq	r5, r5, r3
 80061ec:	68a3      	ldr	r3, [r4, #8]
 80061ee:	bf0c      	ite	eq
 80061f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061f4:	2500      	movne	r5, #0
 80061f6:	4293      	cmp	r3, r2
 80061f8:	bfc4      	itt	gt
 80061fa:	1a9b      	subgt	r3, r3, r2
 80061fc:	18ed      	addgt	r5, r5, r3
 80061fe:	2600      	movs	r6, #0
 8006200:	341a      	adds	r4, #26
 8006202:	42b5      	cmp	r5, r6
 8006204:	d11a      	bne.n	800623c <_printf_common+0xc8>
 8006206:	2000      	movs	r0, #0
 8006208:	e008      	b.n	800621c <_printf_common+0xa8>
 800620a:	2301      	movs	r3, #1
 800620c:	4652      	mov	r2, sl
 800620e:	4649      	mov	r1, r9
 8006210:	4638      	mov	r0, r7
 8006212:	47c0      	blx	r8
 8006214:	3001      	adds	r0, #1
 8006216:	d103      	bne.n	8006220 <_printf_common+0xac>
 8006218:	f04f 30ff 	mov.w	r0, #4294967295
 800621c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006220:	3501      	adds	r5, #1
 8006222:	e7c6      	b.n	80061b2 <_printf_common+0x3e>
 8006224:	18e1      	adds	r1, r4, r3
 8006226:	1c5a      	adds	r2, r3, #1
 8006228:	2030      	movs	r0, #48	; 0x30
 800622a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800622e:	4422      	add	r2, r4
 8006230:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006234:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006238:	3302      	adds	r3, #2
 800623a:	e7c7      	b.n	80061cc <_printf_common+0x58>
 800623c:	2301      	movs	r3, #1
 800623e:	4622      	mov	r2, r4
 8006240:	4649      	mov	r1, r9
 8006242:	4638      	mov	r0, r7
 8006244:	47c0      	blx	r8
 8006246:	3001      	adds	r0, #1
 8006248:	d0e6      	beq.n	8006218 <_printf_common+0xa4>
 800624a:	3601      	adds	r6, #1
 800624c:	e7d9      	b.n	8006202 <_printf_common+0x8e>
	...

08006250 <_printf_i>:
 8006250:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006254:	7e0f      	ldrb	r7, [r1, #24]
 8006256:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006258:	2f78      	cmp	r7, #120	; 0x78
 800625a:	4691      	mov	r9, r2
 800625c:	4680      	mov	r8, r0
 800625e:	460c      	mov	r4, r1
 8006260:	469a      	mov	sl, r3
 8006262:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006266:	d807      	bhi.n	8006278 <_printf_i+0x28>
 8006268:	2f62      	cmp	r7, #98	; 0x62
 800626a:	d80a      	bhi.n	8006282 <_printf_i+0x32>
 800626c:	2f00      	cmp	r7, #0
 800626e:	f000 80d4 	beq.w	800641a <_printf_i+0x1ca>
 8006272:	2f58      	cmp	r7, #88	; 0x58
 8006274:	f000 80c0 	beq.w	80063f8 <_printf_i+0x1a8>
 8006278:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800627c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006280:	e03a      	b.n	80062f8 <_printf_i+0xa8>
 8006282:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006286:	2b15      	cmp	r3, #21
 8006288:	d8f6      	bhi.n	8006278 <_printf_i+0x28>
 800628a:	a101      	add	r1, pc, #4	; (adr r1, 8006290 <_printf_i+0x40>)
 800628c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006290:	080062e9 	.word	0x080062e9
 8006294:	080062fd 	.word	0x080062fd
 8006298:	08006279 	.word	0x08006279
 800629c:	08006279 	.word	0x08006279
 80062a0:	08006279 	.word	0x08006279
 80062a4:	08006279 	.word	0x08006279
 80062a8:	080062fd 	.word	0x080062fd
 80062ac:	08006279 	.word	0x08006279
 80062b0:	08006279 	.word	0x08006279
 80062b4:	08006279 	.word	0x08006279
 80062b8:	08006279 	.word	0x08006279
 80062bc:	08006401 	.word	0x08006401
 80062c0:	08006329 	.word	0x08006329
 80062c4:	080063bb 	.word	0x080063bb
 80062c8:	08006279 	.word	0x08006279
 80062cc:	08006279 	.word	0x08006279
 80062d0:	08006423 	.word	0x08006423
 80062d4:	08006279 	.word	0x08006279
 80062d8:	08006329 	.word	0x08006329
 80062dc:	08006279 	.word	0x08006279
 80062e0:	08006279 	.word	0x08006279
 80062e4:	080063c3 	.word	0x080063c3
 80062e8:	682b      	ldr	r3, [r5, #0]
 80062ea:	1d1a      	adds	r2, r3, #4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	602a      	str	r2, [r5, #0]
 80062f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80062f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80062f8:	2301      	movs	r3, #1
 80062fa:	e09f      	b.n	800643c <_printf_i+0x1ec>
 80062fc:	6820      	ldr	r0, [r4, #0]
 80062fe:	682b      	ldr	r3, [r5, #0]
 8006300:	0607      	lsls	r7, r0, #24
 8006302:	f103 0104 	add.w	r1, r3, #4
 8006306:	6029      	str	r1, [r5, #0]
 8006308:	d501      	bpl.n	800630e <_printf_i+0xbe>
 800630a:	681e      	ldr	r6, [r3, #0]
 800630c:	e003      	b.n	8006316 <_printf_i+0xc6>
 800630e:	0646      	lsls	r6, r0, #25
 8006310:	d5fb      	bpl.n	800630a <_printf_i+0xba>
 8006312:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006316:	2e00      	cmp	r6, #0
 8006318:	da03      	bge.n	8006322 <_printf_i+0xd2>
 800631a:	232d      	movs	r3, #45	; 0x2d
 800631c:	4276      	negs	r6, r6
 800631e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006322:	485a      	ldr	r0, [pc, #360]	; (800648c <_printf_i+0x23c>)
 8006324:	230a      	movs	r3, #10
 8006326:	e012      	b.n	800634e <_printf_i+0xfe>
 8006328:	682b      	ldr	r3, [r5, #0]
 800632a:	6820      	ldr	r0, [r4, #0]
 800632c:	1d19      	adds	r1, r3, #4
 800632e:	6029      	str	r1, [r5, #0]
 8006330:	0605      	lsls	r5, r0, #24
 8006332:	d501      	bpl.n	8006338 <_printf_i+0xe8>
 8006334:	681e      	ldr	r6, [r3, #0]
 8006336:	e002      	b.n	800633e <_printf_i+0xee>
 8006338:	0641      	lsls	r1, r0, #25
 800633a:	d5fb      	bpl.n	8006334 <_printf_i+0xe4>
 800633c:	881e      	ldrh	r6, [r3, #0]
 800633e:	4853      	ldr	r0, [pc, #332]	; (800648c <_printf_i+0x23c>)
 8006340:	2f6f      	cmp	r7, #111	; 0x6f
 8006342:	bf0c      	ite	eq
 8006344:	2308      	moveq	r3, #8
 8006346:	230a      	movne	r3, #10
 8006348:	2100      	movs	r1, #0
 800634a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800634e:	6865      	ldr	r5, [r4, #4]
 8006350:	60a5      	str	r5, [r4, #8]
 8006352:	2d00      	cmp	r5, #0
 8006354:	bfa2      	ittt	ge
 8006356:	6821      	ldrge	r1, [r4, #0]
 8006358:	f021 0104 	bicge.w	r1, r1, #4
 800635c:	6021      	strge	r1, [r4, #0]
 800635e:	b90e      	cbnz	r6, 8006364 <_printf_i+0x114>
 8006360:	2d00      	cmp	r5, #0
 8006362:	d04b      	beq.n	80063fc <_printf_i+0x1ac>
 8006364:	4615      	mov	r5, r2
 8006366:	fbb6 f1f3 	udiv	r1, r6, r3
 800636a:	fb03 6711 	mls	r7, r3, r1, r6
 800636e:	5dc7      	ldrb	r7, [r0, r7]
 8006370:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006374:	4637      	mov	r7, r6
 8006376:	42bb      	cmp	r3, r7
 8006378:	460e      	mov	r6, r1
 800637a:	d9f4      	bls.n	8006366 <_printf_i+0x116>
 800637c:	2b08      	cmp	r3, #8
 800637e:	d10b      	bne.n	8006398 <_printf_i+0x148>
 8006380:	6823      	ldr	r3, [r4, #0]
 8006382:	07de      	lsls	r6, r3, #31
 8006384:	d508      	bpl.n	8006398 <_printf_i+0x148>
 8006386:	6923      	ldr	r3, [r4, #16]
 8006388:	6861      	ldr	r1, [r4, #4]
 800638a:	4299      	cmp	r1, r3
 800638c:	bfde      	ittt	le
 800638e:	2330      	movle	r3, #48	; 0x30
 8006390:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006394:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006398:	1b52      	subs	r2, r2, r5
 800639a:	6122      	str	r2, [r4, #16]
 800639c:	f8cd a000 	str.w	sl, [sp]
 80063a0:	464b      	mov	r3, r9
 80063a2:	aa03      	add	r2, sp, #12
 80063a4:	4621      	mov	r1, r4
 80063a6:	4640      	mov	r0, r8
 80063a8:	f7ff fee4 	bl	8006174 <_printf_common>
 80063ac:	3001      	adds	r0, #1
 80063ae:	d14a      	bne.n	8006446 <_printf_i+0x1f6>
 80063b0:	f04f 30ff 	mov.w	r0, #4294967295
 80063b4:	b004      	add	sp, #16
 80063b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	f043 0320 	orr.w	r3, r3, #32
 80063c0:	6023      	str	r3, [r4, #0]
 80063c2:	4833      	ldr	r0, [pc, #204]	; (8006490 <_printf_i+0x240>)
 80063c4:	2778      	movs	r7, #120	; 0x78
 80063c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80063ca:	6823      	ldr	r3, [r4, #0]
 80063cc:	6829      	ldr	r1, [r5, #0]
 80063ce:	061f      	lsls	r7, r3, #24
 80063d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80063d4:	d402      	bmi.n	80063dc <_printf_i+0x18c>
 80063d6:	065f      	lsls	r7, r3, #25
 80063d8:	bf48      	it	mi
 80063da:	b2b6      	uxthmi	r6, r6
 80063dc:	07df      	lsls	r7, r3, #31
 80063de:	bf48      	it	mi
 80063e0:	f043 0320 	orrmi.w	r3, r3, #32
 80063e4:	6029      	str	r1, [r5, #0]
 80063e6:	bf48      	it	mi
 80063e8:	6023      	strmi	r3, [r4, #0]
 80063ea:	b91e      	cbnz	r6, 80063f4 <_printf_i+0x1a4>
 80063ec:	6823      	ldr	r3, [r4, #0]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	2310      	movs	r3, #16
 80063f6:	e7a7      	b.n	8006348 <_printf_i+0xf8>
 80063f8:	4824      	ldr	r0, [pc, #144]	; (800648c <_printf_i+0x23c>)
 80063fa:	e7e4      	b.n	80063c6 <_printf_i+0x176>
 80063fc:	4615      	mov	r5, r2
 80063fe:	e7bd      	b.n	800637c <_printf_i+0x12c>
 8006400:	682b      	ldr	r3, [r5, #0]
 8006402:	6826      	ldr	r6, [r4, #0]
 8006404:	6961      	ldr	r1, [r4, #20]
 8006406:	1d18      	adds	r0, r3, #4
 8006408:	6028      	str	r0, [r5, #0]
 800640a:	0635      	lsls	r5, r6, #24
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	d501      	bpl.n	8006414 <_printf_i+0x1c4>
 8006410:	6019      	str	r1, [r3, #0]
 8006412:	e002      	b.n	800641a <_printf_i+0x1ca>
 8006414:	0670      	lsls	r0, r6, #25
 8006416:	d5fb      	bpl.n	8006410 <_printf_i+0x1c0>
 8006418:	8019      	strh	r1, [r3, #0]
 800641a:	2300      	movs	r3, #0
 800641c:	6123      	str	r3, [r4, #16]
 800641e:	4615      	mov	r5, r2
 8006420:	e7bc      	b.n	800639c <_printf_i+0x14c>
 8006422:	682b      	ldr	r3, [r5, #0]
 8006424:	1d1a      	adds	r2, r3, #4
 8006426:	602a      	str	r2, [r5, #0]
 8006428:	681d      	ldr	r5, [r3, #0]
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	2100      	movs	r1, #0
 800642e:	4628      	mov	r0, r5
 8006430:	f7f9 fed6 	bl	80001e0 <memchr>
 8006434:	b108      	cbz	r0, 800643a <_printf_i+0x1ea>
 8006436:	1b40      	subs	r0, r0, r5
 8006438:	6060      	str	r0, [r4, #4]
 800643a:	6863      	ldr	r3, [r4, #4]
 800643c:	6123      	str	r3, [r4, #16]
 800643e:	2300      	movs	r3, #0
 8006440:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006444:	e7aa      	b.n	800639c <_printf_i+0x14c>
 8006446:	6923      	ldr	r3, [r4, #16]
 8006448:	462a      	mov	r2, r5
 800644a:	4649      	mov	r1, r9
 800644c:	4640      	mov	r0, r8
 800644e:	47d0      	blx	sl
 8006450:	3001      	adds	r0, #1
 8006452:	d0ad      	beq.n	80063b0 <_printf_i+0x160>
 8006454:	6823      	ldr	r3, [r4, #0]
 8006456:	079b      	lsls	r3, r3, #30
 8006458:	d413      	bmi.n	8006482 <_printf_i+0x232>
 800645a:	68e0      	ldr	r0, [r4, #12]
 800645c:	9b03      	ldr	r3, [sp, #12]
 800645e:	4298      	cmp	r0, r3
 8006460:	bfb8      	it	lt
 8006462:	4618      	movlt	r0, r3
 8006464:	e7a6      	b.n	80063b4 <_printf_i+0x164>
 8006466:	2301      	movs	r3, #1
 8006468:	4632      	mov	r2, r6
 800646a:	4649      	mov	r1, r9
 800646c:	4640      	mov	r0, r8
 800646e:	47d0      	blx	sl
 8006470:	3001      	adds	r0, #1
 8006472:	d09d      	beq.n	80063b0 <_printf_i+0x160>
 8006474:	3501      	adds	r5, #1
 8006476:	68e3      	ldr	r3, [r4, #12]
 8006478:	9903      	ldr	r1, [sp, #12]
 800647a:	1a5b      	subs	r3, r3, r1
 800647c:	42ab      	cmp	r3, r5
 800647e:	dcf2      	bgt.n	8006466 <_printf_i+0x216>
 8006480:	e7eb      	b.n	800645a <_printf_i+0x20a>
 8006482:	2500      	movs	r5, #0
 8006484:	f104 0619 	add.w	r6, r4, #25
 8006488:	e7f5      	b.n	8006476 <_printf_i+0x226>
 800648a:	bf00      	nop
 800648c:	08006641 	.word	0x08006641
 8006490:	08006652 	.word	0x08006652

08006494 <memmove>:
 8006494:	4288      	cmp	r0, r1
 8006496:	b510      	push	{r4, lr}
 8006498:	eb01 0402 	add.w	r4, r1, r2
 800649c:	d902      	bls.n	80064a4 <memmove+0x10>
 800649e:	4284      	cmp	r4, r0
 80064a0:	4623      	mov	r3, r4
 80064a2:	d807      	bhi.n	80064b4 <memmove+0x20>
 80064a4:	1e43      	subs	r3, r0, #1
 80064a6:	42a1      	cmp	r1, r4
 80064a8:	d008      	beq.n	80064bc <memmove+0x28>
 80064aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 80064b2:	e7f8      	b.n	80064a6 <memmove+0x12>
 80064b4:	4402      	add	r2, r0
 80064b6:	4601      	mov	r1, r0
 80064b8:	428a      	cmp	r2, r1
 80064ba:	d100      	bne.n	80064be <memmove+0x2a>
 80064bc:	bd10      	pop	{r4, pc}
 80064be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80064c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80064c6:	e7f7      	b.n	80064b8 <memmove+0x24>

080064c8 <_sbrk_r>:
 80064c8:	b538      	push	{r3, r4, r5, lr}
 80064ca:	4d06      	ldr	r5, [pc, #24]	; (80064e4 <_sbrk_r+0x1c>)
 80064cc:	2300      	movs	r3, #0
 80064ce:	4604      	mov	r4, r0
 80064d0:	4608      	mov	r0, r1
 80064d2:	602b      	str	r3, [r5, #0]
 80064d4:	f7fa fd8c 	bl	8000ff0 <_sbrk>
 80064d8:	1c43      	adds	r3, r0, #1
 80064da:	d102      	bne.n	80064e2 <_sbrk_r+0x1a>
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	b103      	cbz	r3, 80064e2 <_sbrk_r+0x1a>
 80064e0:	6023      	str	r3, [r4, #0]
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
 80064e4:	200003f8 	.word	0x200003f8

080064e8 <memcpy>:
 80064e8:	440a      	add	r2, r1
 80064ea:	4291      	cmp	r1, r2
 80064ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80064f0:	d100      	bne.n	80064f4 <memcpy+0xc>
 80064f2:	4770      	bx	lr
 80064f4:	b510      	push	{r4, lr}
 80064f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064fe:	4291      	cmp	r1, r2
 8006500:	d1f9      	bne.n	80064f6 <memcpy+0xe>
 8006502:	bd10      	pop	{r4, pc}

08006504 <_realloc_r>:
 8006504:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006508:	4680      	mov	r8, r0
 800650a:	4614      	mov	r4, r2
 800650c:	460e      	mov	r6, r1
 800650e:	b921      	cbnz	r1, 800651a <_realloc_r+0x16>
 8006510:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006514:	4611      	mov	r1, r2
 8006516:	f7ff bc49 	b.w	8005dac <_malloc_r>
 800651a:	b92a      	cbnz	r2, 8006528 <_realloc_r+0x24>
 800651c:	f7ff fbda 	bl	8005cd4 <_free_r>
 8006520:	4625      	mov	r5, r4
 8006522:	4628      	mov	r0, r5
 8006524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006528:	f000 f81b 	bl	8006562 <_malloc_usable_size_r>
 800652c:	4284      	cmp	r4, r0
 800652e:	4607      	mov	r7, r0
 8006530:	d802      	bhi.n	8006538 <_realloc_r+0x34>
 8006532:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006536:	d812      	bhi.n	800655e <_realloc_r+0x5a>
 8006538:	4621      	mov	r1, r4
 800653a:	4640      	mov	r0, r8
 800653c:	f7ff fc36 	bl	8005dac <_malloc_r>
 8006540:	4605      	mov	r5, r0
 8006542:	2800      	cmp	r0, #0
 8006544:	d0ed      	beq.n	8006522 <_realloc_r+0x1e>
 8006546:	42bc      	cmp	r4, r7
 8006548:	4622      	mov	r2, r4
 800654a:	4631      	mov	r1, r6
 800654c:	bf28      	it	cs
 800654e:	463a      	movcs	r2, r7
 8006550:	f7ff ffca 	bl	80064e8 <memcpy>
 8006554:	4631      	mov	r1, r6
 8006556:	4640      	mov	r0, r8
 8006558:	f7ff fbbc 	bl	8005cd4 <_free_r>
 800655c:	e7e1      	b.n	8006522 <_realloc_r+0x1e>
 800655e:	4635      	mov	r5, r6
 8006560:	e7df      	b.n	8006522 <_realloc_r+0x1e>

08006562 <_malloc_usable_size_r>:
 8006562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006566:	1f18      	subs	r0, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	bfbc      	itt	lt
 800656c:	580b      	ldrlt	r3, [r1, r0]
 800656e:	18c0      	addlt	r0, r0, r3
 8006570:	4770      	bx	lr
	...

08006574 <_init>:
 8006574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006576:	bf00      	nop
 8006578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800657a:	bc08      	pop	{r3}
 800657c:	469e      	mov	lr, r3
 800657e:	4770      	bx	lr

08006580 <_fini>:
 8006580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006582:	bf00      	nop
 8006584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006586:	bc08      	pop	{r3}
 8006588:	469e      	mov	lr, r3
 800658a:	4770      	bx	lr
