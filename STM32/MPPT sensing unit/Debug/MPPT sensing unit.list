
MPPT sensing unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b00  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cd4  08006cd4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006cd4  08006cd4  00016cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006cdc  08006cdc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006cdc  08006cdc  00016cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ce0  08006ce0  00016ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  20000010  08006cf4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002cc  08006cf4  000202cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bb71  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003de6  00000000  00000000  0003bbf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003f9e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012d1  00000000  00000000  00041230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002508b  00000000  00000000  00042501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fc87  00000000  00000000  0006758c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd45  00000000  00000000  00087213  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000065f0  00000000  00000000  00166f58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  0016d548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000010 	.word	0x20000010
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08006c74 	.word	0x08006c74

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000014 	.word	0x20000014
 80001c8:	08006c74 	.word	0x08006c74

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b970 	b.w	80004c4 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	9e08      	ldr	r6, [sp, #32]
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	460f      	mov	r7, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14a      	bne.n	80002a2 <__udivmoddi4+0xa6>
 800020c:	428a      	cmp	r2, r1
 800020e:	4694      	mov	ip, r2
 8000210:	d965      	bls.n	80002de <__udivmoddi4+0xe2>
 8000212:	fab2 f382 	clz	r3, r2
 8000216:	b143      	cbz	r3, 800022a <__udivmoddi4+0x2e>
 8000218:	fa02 fc03 	lsl.w	ip, r2, r3
 800021c:	f1c3 0220 	rsb	r2, r3, #32
 8000220:	409f      	lsls	r7, r3
 8000222:	fa20 f202 	lsr.w	r2, r0, r2
 8000226:	4317      	orrs	r7, r2
 8000228:	409c      	lsls	r4, r3
 800022a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022e:	fa1f f58c 	uxth.w	r5, ip
 8000232:	fbb7 f1fe 	udiv	r1, r7, lr
 8000236:	0c22      	lsrs	r2, r4, #16
 8000238:	fb0e 7711 	mls	r7, lr, r1, r7
 800023c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000240:	fb01 f005 	mul.w	r0, r1, r5
 8000244:	4290      	cmp	r0, r2
 8000246:	d90a      	bls.n	800025e <__udivmoddi4+0x62>
 8000248:	eb1c 0202 	adds.w	r2, ip, r2
 800024c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000250:	f080 811c 	bcs.w	800048c <__udivmoddi4+0x290>
 8000254:	4290      	cmp	r0, r2
 8000256:	f240 8119 	bls.w	800048c <__udivmoddi4+0x290>
 800025a:	3902      	subs	r1, #2
 800025c:	4462      	add	r2, ip
 800025e:	1a12      	subs	r2, r2, r0
 8000260:	b2a4      	uxth	r4, r4
 8000262:	fbb2 f0fe 	udiv	r0, r2, lr
 8000266:	fb0e 2210 	mls	r2, lr, r0, r2
 800026a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026e:	fb00 f505 	mul.w	r5, r0, r5
 8000272:	42a5      	cmp	r5, r4
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x90>
 8000276:	eb1c 0404 	adds.w	r4, ip, r4
 800027a:	f100 32ff 	add.w	r2, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x294>
 8000282:	42a5      	cmp	r5, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x294>
 8000288:	4464      	add	r4, ip
 800028a:	3802      	subs	r0, #2
 800028c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	2100      	movs	r1, #0
 8000294:	b11e      	cbz	r6, 800029e <__udivmoddi4+0xa2>
 8000296:	40dc      	lsrs	r4, r3
 8000298:	2300      	movs	r3, #0
 800029a:	e9c6 4300 	strd	r4, r3, [r6]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d908      	bls.n	80002b8 <__udivmoddi4+0xbc>
 80002a6:	2e00      	cmp	r6, #0
 80002a8:	f000 80ed 	beq.w	8000486 <__udivmoddi4+0x28a>
 80002ac:	2100      	movs	r1, #0
 80002ae:	e9c6 0500 	strd	r0, r5, [r6]
 80002b2:	4608      	mov	r0, r1
 80002b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b8:	fab3 f183 	clz	r1, r3
 80002bc:	2900      	cmp	r1, #0
 80002be:	d149      	bne.n	8000354 <__udivmoddi4+0x158>
 80002c0:	42ab      	cmp	r3, r5
 80002c2:	d302      	bcc.n	80002ca <__udivmoddi4+0xce>
 80002c4:	4282      	cmp	r2, r0
 80002c6:	f200 80f8 	bhi.w	80004ba <__udivmoddi4+0x2be>
 80002ca:	1a84      	subs	r4, r0, r2
 80002cc:	eb65 0203 	sbc.w	r2, r5, r3
 80002d0:	2001      	movs	r0, #1
 80002d2:	4617      	mov	r7, r2
 80002d4:	2e00      	cmp	r6, #0
 80002d6:	d0e2      	beq.n	800029e <__udivmoddi4+0xa2>
 80002d8:	e9c6 4700 	strd	r4, r7, [r6]
 80002dc:	e7df      	b.n	800029e <__udivmoddi4+0xa2>
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xe6>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f382 	clz	r3, r2
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x210>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f fe8c 	uxth.w	lr, ip
 80002f6:	2101      	movs	r1, #1
 80002f8:	fbb2 f5f7 	udiv	r5, r2, r7
 80002fc:	fb07 2015 	mls	r0, r7, r5, r2
 8000300:	0c22      	lsrs	r2, r4, #16
 8000302:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000306:	fb0e f005 	mul.w	r0, lr, r5
 800030a:	4290      	cmp	r0, r2
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x124>
 800030e:	eb1c 0202 	adds.w	r2, ip, r2
 8000312:	f105 38ff 	add.w	r8, r5, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x122>
 8000318:	4290      	cmp	r0, r2
 800031a:	f200 80cb 	bhi.w	80004b4 <__udivmoddi4+0x2b8>
 800031e:	4645      	mov	r5, r8
 8000320:	1a12      	subs	r2, r2, r0
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb2 f0f7 	udiv	r0, r2, r7
 8000328:	fb07 2210 	mls	r2, r7, r0, r2
 800032c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000330:	fb0e fe00 	mul.w	lr, lr, r0
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x14e>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x14c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80bb 	bhi.w	80004be <__udivmoddi4+0x2c2>
 8000348:	4610      	mov	r0, r2
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000352:	e79f      	b.n	8000294 <__udivmoddi4+0x98>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa05 f401 	lsl.w	r4, r5, r1
 8000366:	fa20 f307 	lsr.w	r3, r0, r7
 800036a:	40fd      	lsrs	r5, r7
 800036c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fbb5 f8f9 	udiv	r8, r5, r9
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	fb09 5518 	mls	r5, r9, r8, r5
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000384:	fb08 f50e 	mul.w	r5, r8, lr
 8000388:	42a5      	cmp	r5, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	fa00 f001 	lsl.w	r0, r0, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b0>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2b4>
 80003a0:	42a5      	cmp	r5, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2b4>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1b64      	subs	r4, r4, r5
 80003ae:	b29d      	uxth	r5, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003bc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1da>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f103 35ff 	add.w	r5, r3, #4294967295
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2ac>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2ac>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003da:	fba3 9502 	umull	r9, r5, r3, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x29c>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x298>
 80003ec:	b156      	cbz	r6, 8000404 <__udivmoddi4+0x208>
 80003ee:	ebb0 0208 	subs.w	r2, r0, r8
 80003f2:	eb64 040e 	sbc.w	r4, r4, lr
 80003f6:	fa04 f707 	lsl.w	r7, r4, r7
 80003fa:	40ca      	lsrs	r2, r1
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	4317      	orrs	r7, r2
 8000400:	e9c6 7400 	strd	r7, r4, [r6]
 8000404:	4618      	mov	r0, r3
 8000406:	2100      	movs	r1, #0
 8000408:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040c:	f1c3 0120 	rsb	r1, r3, #32
 8000410:	fa02 fc03 	lsl.w	ip, r2, r3
 8000414:	fa20 f201 	lsr.w	r2, r0, r1
 8000418:	fa25 f101 	lsr.w	r1, r5, r1
 800041c:	409d      	lsls	r5, r3
 800041e:	432a      	orrs	r2, r5
 8000420:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000424:	fa1f fe8c 	uxth.w	lr, ip
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1510 	mls	r5, r7, r0, r1
 8000430:	0c11      	lsrs	r1, r2, #16
 8000432:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000436:	fb00 f50e 	mul.w	r5, r0, lr
 800043a:	428d      	cmp	r5, r1
 800043c:	fa04 f403 	lsl.w	r4, r4, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x258>
 8000442:	eb1c 0101 	adds.w	r1, ip, r1
 8000446:	f100 38ff 	add.w	r8, r0, #4294967295
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b0>
 800044c:	428d      	cmp	r5, r1
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b0>
 8000450:	3802      	subs	r0, #2
 8000452:	4461      	add	r1, ip
 8000454:	1b49      	subs	r1, r1, r5
 8000456:	b292      	uxth	r2, r2
 8000458:	fbb1 f5f7 	udiv	r5, r1, r7
 800045c:	fb07 1115 	mls	r1, r7, r5, r1
 8000460:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000464:	fb05 f10e 	mul.w	r1, r5, lr
 8000468:	4291      	cmp	r1, r2
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x282>
 800046c:	eb1c 0202 	adds.w	r2, ip, r2
 8000470:	f105 38ff 	add.w	r8, r5, #4294967295
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2a8>
 8000476:	4291      	cmp	r1, r2
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2a8>
 800047a:	3d02      	subs	r5, #2
 800047c:	4462      	add	r2, ip
 800047e:	1a52      	subs	r2, r2, r1
 8000480:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0xfc>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e708      	b.n	800029e <__udivmoddi4+0xa2>
 800048c:	4639      	mov	r1, r7
 800048e:	e6e6      	b.n	800025e <__udivmoddi4+0x62>
 8000490:	4610      	mov	r0, r2
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x90>
 8000494:	4548      	cmp	r0, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f0>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3b01      	subs	r3, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f0>
 80004a4:	4645      	mov	r5, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x282>
 80004a8:	462b      	mov	r3, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1da>
 80004ac:	4640      	mov	r0, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x258>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b0>
 80004b4:	3d02      	subs	r5, #2
 80004b6:	4462      	add	r2, ip
 80004b8:	e732      	b.n	8000320 <__udivmoddi4+0x124>
 80004ba:	4608      	mov	r0, r1
 80004bc:	e70a      	b.n	80002d4 <__udivmoddi4+0xd8>
 80004be:	4464      	add	r4, ip
 80004c0:	3802      	subs	r0, #2
 80004c2:	e742      	b.n	800034a <__udivmoddi4+0x14e>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_ADC_ConvCpltCallback>:
const float unitValue = Vref / twelfBitADC * 1000;
const float sensitivity = 1000.0 / 264.0;// 1000mA per 265 mV
uint8_t convCompleted = 0;

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	convCompleted = 1;
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <HAL_ADC_ConvCpltCallback+0x1c>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
}
 80004d6:	bf00      	nop
 80004d8:	370c      	adds	r7, #12
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	20000038 	.word	0x20000038

080004e8 <HSB_ReadCurrentModule>:

uint16_t HSB_ReadCurrentModule(int channel){
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b082      	sub	sp, #8
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	6078      	str	r0, [r7, #4]
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *) rawValues, 2);
 80004f0:	2202      	movs	r2, #2
 80004f2:	491d      	ldr	r1, [pc, #116]	; (8000568 <HSB_ReadCurrentModule+0x80>)
 80004f4:	481d      	ldr	r0, [pc, #116]	; (800056c <HSB_ReadCurrentModule+0x84>)
 80004f6:	f001 f9f7 	bl	80018e8 <HAL_ADC_Start_DMA>
	while(!convCompleted);
 80004fa:	bf00      	nop
 80004fc:	4b1c      	ldr	r3, [pc, #112]	; (8000570 <HSB_ReadCurrentModule+0x88>)
 80004fe:	781b      	ldrb	r3, [r3, #0]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d0fb      	beq.n	80004fc <HSB_ReadCurrentModule+0x14>
	raw = (uint16_t) rawValues[channel];
 8000504:	4a18      	ldr	r2, [pc, #96]	; (8000568 <HSB_ReadCurrentModule+0x80>)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <HSB_ReadCurrentModule+0x8c>)
 800050e:	801a      	strh	r2, [r3, #0]
	voltage = unitValue * raw;
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <HSB_ReadCurrentModule+0x8c>)
 8000512:	881b      	ldrh	r3, [r3, #0]
 8000514:	ee07 3a90 	vmov	s15, r3
 8000518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800051c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000578 <HSB_ReadCurrentModule+0x90>
 8000520:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000528:	ee17 3a90 	vmov	r3, s15
 800052c:	b29a      	uxth	r2, r3
 800052e:	4b13      	ldr	r3, [pc, #76]	; (800057c <HSB_ReadCurrentModule+0x94>)
 8000530:	801a      	strh	r2, [r3, #0]
	current = (voltage - offset) * sensitivity;
 8000532:	4b12      	ldr	r3, [pc, #72]	; (800057c <HSB_ReadCurrentModule+0x94>)
 8000534:	881b      	ldrh	r3, [r3, #0]
 8000536:	ee07 3a90 	vmov	s15, r3
 800053a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800053e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8000580 <HSB_ReadCurrentModule+0x98>
 8000542:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000546:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000584 <HSB_ReadCurrentModule+0x9c>
 800054a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800054e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000552:	ee17 3a90 	vmov	r3, s15
 8000556:	b29a      	uxth	r2, r3
 8000558:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HSB_ReadCurrentModule+0xa0>)
 800055a:	801a      	strh	r2, [r3, #0]
	return current;
 800055c:	4b0a      	ldr	r3, [pc, #40]	; (8000588 <HSB_ReadCurrentModule+0xa0>)
 800055e:	881b      	ldrh	r3, [r3, #0]
}
 8000560:	4618      	mov	r0, r3
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000030 	.word	0x20000030
 800056c:	2000003c 	.word	0x2000003c
 8000570:	20000038 	.word	0x20000038
 8000574:	20000034 	.word	0x20000034
 8000578:	3f4e4000 	.word	0x3f4e4000
 800057c:	20000036 	.word	0x20000036
 8000580:	43a10000 	.word	0x43a10000
 8000584:	40726c9b 	.word	0x40726c9b
 8000588:	2000002c 	.word	0x2000002c

0800058c <HSB_DebugPrint_Init>:

//Boolean for turn off debug print
//Make false to turn off
bool HSB_DebugPrintOn = true;

void HSB_DebugPrint_Init(bool input){
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	71fb      	strb	r3, [r7, #7]
	HSB_DebugPrintOn = input;
 8000596:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <HSB_DebugPrint_Init+0x1c>)
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	7013      	strb	r3, [r2, #0]
	}
 800059c:	bf00      	nop
 800059e:	370c      	adds	r7, #12
 80005a0:	46bd      	mov	sp, r7
 80005a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a6:	4770      	bx	lr
 80005a8:	20000000 	.word	0x20000000

080005ac <HSB_VoltageModule_Init>:
//I2C variables
uint8_t i2cAddress = (0x68 << 1) | 0b0; //0xD0
uint8_t readCH1 = 0x88; // write to acd to start reading channel 1
uint8_t readCH2 = 0xA8; // write to acd to start reading channel 2

void HSB_VoltageModule_Init(uint8_t adress){
 80005ac:	b480      	push	{r7}
 80005ae:	b083      	sub	sp, #12
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	71fb      	strb	r3, [r7, #7]
	i2cAddress = (adress << 1) | 0b0;
 80005b6:	79fb      	ldrb	r3, [r7, #7]
 80005b8:	005b      	lsls	r3, r3, #1
 80005ba:	b2da      	uxtb	r2, r3
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HSB_VoltageModule_Init+0x20>)
 80005be:	701a      	strb	r2, [r3, #0]
}
 80005c0:	bf00      	nop
 80005c2:	370c      	adds	r7, #12
 80005c4:	46bd      	mov	sp, r7
 80005c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ca:	4770      	bx	lr
 80005cc:	20000001 	.word	0x20000001

080005d0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005d6:	463b      	mov	r3, r7
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]
 80005e4:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80005e6:	4b30      	ldr	r3, [pc, #192]	; (80006a8 <MX_ADC1_Init+0xd8>)
 80005e8:	4a30      	ldr	r2, [pc, #192]	; (80006ac <MX_ADC1_Init+0xdc>)
 80005ea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80005ec:	4b2e      	ldr	r3, [pc, #184]	; (80006a8 <MX_ADC1_Init+0xd8>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005f2:	4b2d      	ldr	r3, [pc, #180]	; (80006a8 <MX_ADC1_Init+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f8:	4b2b      	ldr	r3, [pc, #172]	; (80006a8 <MX_ADC1_Init+0xd8>)
 80005fa:	2200      	movs	r2, #0
 80005fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80005fe:	4b2a      	ldr	r3, [pc, #168]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000600:	2201      	movs	r2, #1
 8000602:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000604:	4b28      	ldr	r3, [pc, #160]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000606:	2204      	movs	r2, #4
 8000608:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800060a:	4b27      	ldr	r3, [pc, #156]	; (80006a8 <MX_ADC1_Init+0xd8>)
 800060c:	2200      	movs	r2, #0
 800060e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b25      	ldr	r3, [pc, #148]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000612:	2200      	movs	r2, #0
 8000614:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8000616:	4b24      	ldr	r3, [pc, #144]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000618:	2202      	movs	r2, #2
 800061a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b22      	ldr	r3, [pc, #136]	; (80006a8 <MX_ADC1_Init+0xd8>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b20      	ldr	r3, [pc, #128]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000626:	2200      	movs	r2, #0
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062a:	4b1f      	ldr	r3, [pc, #124]	; (80006a8 <MX_ADC1_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000630:	4b1d      	ldr	r3, [pc, #116]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000638:	4b1b      	ldr	r3, [pc, #108]	; (80006a8 <MX_ADC1_Init+0xd8>)
 800063a:	2200      	movs	r2, #0
 800063c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800063e:	4b1a      	ldr	r3, [pc, #104]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000646:	4818      	ldr	r0, [pc, #96]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000648:	f001 f80c 	bl	8001664 <HAL_ADC_Init>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d001      	beq.n	8000656 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8000652:	f000 fb57 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000656:	4b16      	ldr	r3, [pc, #88]	; (80006b0 <MX_ADC1_Init+0xe0>)
 8000658:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065a:	2306      	movs	r3, #6
 800065c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800065e:	2307      	movs	r3, #7
 8000660:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000662:	237f      	movs	r3, #127	; 0x7f
 8000664:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000666:	2304      	movs	r3, #4
 8000668:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	480d      	ldr	r0, [pc, #52]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000674:	f001 fb8e 	bl	8001d94 <HAL_ADC_ConfigChannel>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800067e:	f000 fb41 	bl	8000d04 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000682:	4b0c      	ldr	r3, [pc, #48]	; (80006b4 <MX_ADC1_Init+0xe4>)
 8000684:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000686:	230c      	movs	r3, #12
 8000688:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800068a:	463b      	mov	r3, r7
 800068c:	4619      	mov	r1, r3
 800068e:	4806      	ldr	r0, [pc, #24]	; (80006a8 <MX_ADC1_Init+0xd8>)
 8000690:	f001 fb80 	bl	8001d94 <HAL_ADC_ConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800069a:	f000 fb33 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800069e:	bf00      	nop
 80006a0:	3718      	adds	r7, #24
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	2000003c 	.word	0x2000003c
 80006ac:	50040000 	.word	0x50040000
 80006b0:	14f00020 	.word	0x14f00020
 80006b4:	19200040 	.word	0x19200040

080006b8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b09e      	sub	sp, #120	; 0x78
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80006c4:	2200      	movs	r2, #0
 80006c6:	601a      	str	r2, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
 80006ca:	609a      	str	r2, [r3, #8]
 80006cc:	60da      	str	r2, [r3, #12]
 80006ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006d0:	f107 0310 	add.w	r3, r7, #16
 80006d4:	2254      	movs	r2, #84	; 0x54
 80006d6:	2100      	movs	r1, #0
 80006d8:	4618      	mov	r0, r3
 80006da:	f006 fa9e 	bl	8006c1a <memset>
  if(adcHandle->Instance==ADC1)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	4a3f      	ldr	r2, [pc, #252]	; (80007e0 <HAL_ADC_MspInit+0x128>)
 80006e4:	4293      	cmp	r3, r2
 80006e6:	d176      	bne.n	80007d6 <HAL_ADC_MspInit+0x11e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80006e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80006ec:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80006ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80006f2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006f4:	2301      	movs	r3, #1
 80006f6:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006f8:	2301      	movs	r3, #1
 80006fa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 80006fc:	2310      	movs	r3, #16
 80006fe:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8000700:	2307      	movs	r3, #7
 8000702:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000704:	2302      	movs	r3, #2
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000708:	2302      	movs	r3, #2
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 800070c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000710:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000712:	f107 0310 	add.w	r3, r7, #16
 8000716:	4618      	mov	r0, r3
 8000718:	f004 fbc8 	bl	8004eac <HAL_RCCEx_PeriphCLKConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8000722:	f000 faef 	bl	8000d04 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000726:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 8000728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072a:	4a2e      	ldr	r2, [pc, #184]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 800072c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000730:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000732:	4b2c      	ldr	r3, [pc, #176]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 8000734:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800073a:	60fb      	str	r3, [r7, #12]
 800073c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a28      	ldr	r2, [pc, #160]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 8000744:	f043 0301 	orr.w	r3, r3, #1
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b26      	ldr	r3, [pc, #152]	; (80007e4 <HAL_ADC_MspInit+0x12c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0301 	and.w	r3, r3, #1
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Current_E_Pin|Current_F_Pin;
 8000756:	2303      	movs	r3, #3
 8000758:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800075a:	230b      	movs	r3, #11
 800075c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f002 fc94 	bl	8003098 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000770:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 8000772:	4a1e      	ldr	r2, [pc, #120]	; (80007ec <HAL_ADC_MspInit+0x134>)
 8000774:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_0;
 8000776:	4b1c      	ldr	r3, [pc, #112]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 8000778:	2200      	movs	r2, #0
 800077a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800077c:	4b1a      	ldr	r3, [pc, #104]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 800077e:	2200      	movs	r2, #0
 8000780:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 8000784:	2200      	movs	r2, #0
 8000786:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000788:	4b17      	ldr	r3, [pc, #92]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 800078a:	2280      	movs	r2, #128	; 0x80
 800078c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 8000790:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000794:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000796:	4b14      	ldr	r3, [pc, #80]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 8000798:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800079c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 80007a0:	2220      	movs	r2, #32
 80007a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80007a4:	4b10      	ldr	r3, [pc, #64]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80007aa:	480f      	ldr	r0, [pc, #60]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 80007ac:	f002 fa2e 	bl	8002c0c <HAL_DMA_Init>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <HAL_ADC_MspInit+0x102>
    {
      Error_Handler();
 80007b6:	f000 faa5 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 80007be:	64da      	str	r2, [r3, #76]	; 0x4c
 80007c0:	4a09      	ldr	r2, [pc, #36]	; (80007e8 <HAL_ADC_MspInit+0x130>)
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2101      	movs	r1, #1
 80007ca:	2012      	movs	r0, #18
 80007cc:	f002 f9e7 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 80007d0:	2012      	movs	r0, #18
 80007d2:	f002 fa00 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80007d6:	bf00      	nop
 80007d8:	3778      	adds	r7, #120	; 0x78
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	50040000 	.word	0x50040000
 80007e4:	40021000 	.word	0x40021000
 80007e8:	200000a0 	.word	0x200000a0
 80007ec:	40020008 	.word	0x40020008

080007f0 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007f4:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_CAN1_Init+0x64>)
 80007f6:	4a18      	ldr	r2, [pc, #96]	; (8000858 <MX_CAN1_Init+0x68>)
 80007f8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 8;
 80007fa:	4b16      	ldr	r3, [pc, #88]	; (8000854 <MX_CAN1_Init+0x64>)
 80007fc:	2208      	movs	r2, #8
 80007fe:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000800:	4b14      	ldr	r3, [pc, #80]	; (8000854 <MX_CAN1_Init+0x64>)
 8000802:	2200      	movs	r2, #0
 8000804:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000806:	4b13      	ldr	r3, [pc, #76]	; (8000854 <MX_CAN1_Init+0x64>)
 8000808:	2200      	movs	r2, #0
 800080a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_7TQ;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_CAN1_Init+0x64>)
 800080e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8000812:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_8TQ;
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <MX_CAN1_Init+0x64>)
 8000816:	f44f 02e0 	mov.w	r2, #7340032	; 0x700000
 800081a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800081c:	4b0d      	ldr	r3, [pc, #52]	; (8000854 <MX_CAN1_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000822:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_CAN1_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000828:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <MX_CAN1_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800082e:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_CAN1_Init+0x64>)
 8000830:	2200      	movs	r2, #0
 8000832:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000834:	4b07      	ldr	r3, [pc, #28]	; (8000854 <MX_CAN1_Init+0x64>)
 8000836:	2200      	movs	r2, #0
 8000838:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800083a:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_CAN1_Init+0x64>)
 800083c:	2200      	movs	r2, #0
 800083e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000840:	4804      	ldr	r0, [pc, #16]	; (8000854 <MX_CAN1_Init+0x64>)
 8000842:	f001 ffd5 	bl	80027f0 <HAL_CAN_Init>
 8000846:	4603      	mov	r3, r0
 8000848:	2b00      	cmp	r3, #0
 800084a:	d001      	beq.n	8000850 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800084c:	f000 fa5a 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000850:	bf00      	nop
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000e8 	.word	0x200000e8
 8000858:	40006400 	.word	0x40006400

0800085c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a18      	ldr	r2, [pc, #96]	; (80008dc <HAL_CAN_MspInit+0x80>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d129      	bne.n	80008d2 <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800087e:	4b18      	ldr	r3, [pc, #96]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 8000880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000882:	4a17      	ldr	r2, [pc, #92]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 8000884:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000888:	6593      	str	r3, [r2, #88]	; 0x58
 800088a:	4b15      	ldr	r3, [pc, #84]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 800088c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000892:	613b      	str	r3, [r7, #16]
 8000894:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 8000898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800089a:	4a11      	ldr	r2, [pc, #68]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 800089c:	f043 0301 	orr.w	r3, r3, #1
 80008a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008a2:	4b0f      	ldr	r3, [pc, #60]	; (80008e0 <HAL_CAN_MspInit+0x84>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	f003 0301 	and.w	r3, r3, #1
 80008aa:	60fb      	str	r3, [r7, #12]
 80008ac:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 80008ae:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80008b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008bc:	2303      	movs	r3, #3
 80008be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008c0:	2309      	movs	r3, #9
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c4:	f107 0314 	add.w	r3, r7, #20
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f002 fbe3 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 80008d2:	bf00      	nop
 80008d4:	3728      	adds	r7, #40	; 0x28
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40006400 	.word	0x40006400
 80008e0:	40021000 	.word	0x40021000

080008e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b082      	sub	sp, #8
 80008e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80008ea:	4b14      	ldr	r3, [pc, #80]	; (800093c <MX_DMA_Init+0x58>)
 80008ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008ee:	4a13      	ldr	r2, [pc, #76]	; (800093c <MX_DMA_Init+0x58>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6493      	str	r3, [r2, #72]	; 0x48
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_DMA_Init+0x58>)
 80008f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000902:	2200      	movs	r2, #0
 8000904:	2100      	movs	r1, #0
 8000906:	200b      	movs	r0, #11
 8000908:	f002 f949 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800090c:	200b      	movs	r0, #11
 800090e:	f002 f962 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000912:	2200      	movs	r2, #0
 8000914:	2100      	movs	r1, #0
 8000916:	2010      	movs	r0, #16
 8000918:	f002 f941 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 800091c:	2010      	movs	r0, #16
 800091e:	f002 f95a 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000922:	2200      	movs	r2, #0
 8000924:	2100      	movs	r1, #0
 8000926:	2011      	movs	r0, #17
 8000928:	f002 f939 	bl	8002b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 800092c:	2011      	movs	r0, #17
 800092e:	f002 f952 	bl	8002bd6 <HAL_NVIC_EnableIRQ>

}
 8000932:	bf00      	nop
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000

08000940 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	4b24      	ldr	r3, [pc, #144]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095a:	4a23      	ldr	r2, [pc, #140]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000962:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800096e:	4b1e      	ldr	r3, [pc, #120]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000972:	4a1d      	ldr	r2, [pc, #116]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000974:	f043 0301 	orr.w	r3, r3, #1
 8000978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800097c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097e:	f003 0301 	and.w	r3, r3, #1
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000986:	4b18      	ldr	r3, [pc, #96]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800098a:	4a17      	ldr	r2, [pc, #92]	; (80009e8 <MX_GPIO_Init+0xa8>)
 800098c:	f043 0302 	orr.w	r3, r3, #2
 8000990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000992:	4b15      	ldr	r3, [pc, #84]	; (80009e8 <MX_GPIO_Init+0xa8>)
 8000994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000996:	f003 0302 	and.w	r3, r3, #2
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2108      	movs	r1, #8
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <MX_GPIO_Init+0xac>)
 80009a4:	f002 fce2 	bl	800336c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN1_Pin|BTN2_Pin;
 80009a8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 030c 	add.w	r3, r7, #12
 80009ba:	4619      	mov	r1, r3
 80009bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009c0:	f002 fb6a 	bl	8003098 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80009c4:	2308      	movs	r3, #8
 80009c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c8:	2301      	movs	r3, #1
 80009ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80009d4:	f107 030c 	add.w	r3, r7, #12
 80009d8:	4619      	mov	r1, r3
 80009da:	4804      	ldr	r0, [pc, #16]	; (80009ec <MX_GPIO_Init+0xac>)
 80009dc:	f002 fb5c 	bl	8003098 <HAL_GPIO_Init>

}
 80009e0:	bf00      	nop
 80009e2:	3720      	adds	r7, #32
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	40021000 	.word	0x40021000
 80009ec:	48000400 	.word	0x48000400

080009f0 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009f4:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009f6:	4a1c      	ldr	r2, [pc, #112]	; (8000a68 <MX_I2C1_Init+0x78>)
 80009f8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 80009fa:	4b1a      	ldr	r3, [pc, #104]	; (8000a64 <MX_I2C1_Init+0x74>)
 80009fc:	4a1b      	ldr	r2, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x7c>)
 80009fe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a08:	2201      	movs	r2, #1
 8000a0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a0c:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a2a:	480e      	ldr	r0, [pc, #56]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a2c:	f002 fcb6 	bl	800339c <HAL_I2C_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a36:	f000 f965 	bl	8000d04 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4809      	ldr	r0, [pc, #36]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a3e:	f003 faf2 	bl	8004026 <HAL_I2CEx_ConfigAnalogFilter>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a48:	f000 f95c 	bl	8000d04 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_I2C1_Init+0x74>)
 8000a50:	f003 fb34 	bl	80040bc <HAL_I2CEx_ConfigDigitalFilter>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a5a:	f000 f953 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	20000110 	.word	0x20000110
 8000a68:	40005400 	.word	0x40005400
 8000a6c:	00707cbb 	.word	0x00707cbb

08000a70 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b09e      	sub	sp, #120	; 0x78
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a88:	f107 0310 	add.w	r3, r7, #16
 8000a8c:	2254      	movs	r2, #84	; 0x54
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f006 f8c2 	bl	8006c1a <memset>
  if(i2cHandle->Instance==I2C1)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a50      	ldr	r2, [pc, #320]	; (8000bdc <HAL_I2C_MspInit+0x16c>)
 8000a9c:	4293      	cmp	r3, r2
 8000a9e:	f040 8098 	bne.w	8000bd2 <HAL_I2C_MspInit+0x162>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000aa2:	2340      	movs	r3, #64	; 0x40
 8000aa4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000aaa:	f107 0310 	add.w	r3, r7, #16
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f004 f9fc 	bl	8004eac <HAL_RCCEx_PeriphCLKConfig>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d001      	beq.n	8000abe <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000aba:	f000 f923 	bl	8000d04 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b48      	ldr	r3, [pc, #288]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a47      	ldr	r2, [pc, #284]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b45      	ldr	r3, [pc, #276]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C_SCL_Pin|I2C_SDA_Pin;
 8000ad6:	23c0      	movs	r3, #192	; 0xc0
 8000ad8:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ada:	2312      	movs	r3, #18
 8000adc:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae2:	2303      	movs	r3, #3
 8000ae4:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aea:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000aee:	4619      	mov	r1, r3
 8000af0:	483c      	ldr	r0, [pc, #240]	; (8000be4 <HAL_I2C_MspInit+0x174>)
 8000af2:	f002 fad1 	bl	8003098 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000af6:	4b3a      	ldr	r3, [pc, #232]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a39      	ldr	r2, [pc, #228]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <HAL_I2C_MspInit+0x170>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000b0e:	4b36      	ldr	r3, [pc, #216]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b10:	4a36      	ldr	r2, [pc, #216]	; (8000bec <HAL_I2C_MspInit+0x17c>)
 8000b12:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_3;
 8000b14:	4b34      	ldr	r3, [pc, #208]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b16:	2203      	movs	r2, #3
 8000b18:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b1a:	4b33      	ldr	r3, [pc, #204]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b20:	4b31      	ldr	r3, [pc, #196]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b28:	2280      	movs	r2, #128	; 0x80
 8000b2a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b2c:	4b2e      	ldr	r3, [pc, #184]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b32:	4b2d      	ldr	r3, [pc, #180]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000b3e:	4b2a      	ldr	r3, [pc, #168]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000b44:	4828      	ldr	r0, [pc, #160]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b46:	f002 f861 	bl	8002c0c <HAL_DMA_Init>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_I2C_MspInit+0xe4>
    {
      Error_Handler();
 8000b50:	f000 f8d8 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	4a24      	ldr	r2, [pc, #144]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b58:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b5a:	4a23      	ldr	r2, [pc, #140]	; (8000be8 <HAL_I2C_MspInit+0x178>)
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 8000b60:	4b23      	ldr	r3, [pc, #140]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b62:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <HAL_I2C_MspInit+0x184>)
 8000b64:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_3;
 8000b66:	4b22      	ldr	r3, [pc, #136]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b68:	2203      	movs	r2, #3
 8000b6a:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000b6c:	4b20      	ldr	r3, [pc, #128]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b6e:	2210      	movs	r2, #16
 8000b70:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b72:	4b1f      	ldr	r3, [pc, #124]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b7a:	2280      	movs	r2, #128	; 0x80
 8000b7c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000b7e:	4b1c      	ldr	r3, [pc, #112]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8000b8a:	4b19      	ldr	r3, [pc, #100]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000b90:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8000b96:	4816      	ldr	r0, [pc, #88]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000b98:	f002 f838 	bl	8002c0c <HAL_DMA_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <HAL_I2C_MspInit+0x136>
    {
      Error_Handler();
 8000ba2:	f000 f8af 	bl	8000d04 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	4a11      	ldr	r2, [pc, #68]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_I2C_MspInit+0x180>)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6293      	str	r3, [r2, #40]	; 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	201f      	movs	r0, #31
 8000bb8:	f001 fff1 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000bbc:	201f      	movs	r0, #31
 8000bbe:	f002 f80a 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	2020      	movs	r0, #32
 8000bc8:	f001 ffe9 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000bcc:	2020      	movs	r0, #32
 8000bce:	f002 f802 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3778      	adds	r7, #120	; 0x78
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40005400 	.word	0x40005400
 8000be0:	40021000 	.word	0x40021000
 8000be4:	48000400 	.word	0x48000400
 8000be8:	20000164 	.word	0x20000164
 8000bec:	40020080 	.word	0x40020080
 8000bf0:	200001ac 	.word	0x200001ac
 8000bf4:	4002006c 	.word	0x4002006c

08000bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bfe:	f000 fabe 	bl	800117e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c02:	f000 f81d 	bl	8000c40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c06:	f7ff fe9b 	bl	8000940 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c0a:	f7ff fe6b 	bl	80008e4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000c0e:	f000 f9f3 	bl	8000ff8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000c12:	f7ff fcdd 	bl	80005d0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000c16:	f7ff feeb 	bl	80009f0 <MX_I2C1_Init>
  MX_CAN1_Init();
 8000c1a:	f7ff fde9 	bl	80007f0 <MX_CAN1_Init>
  MX_TIM2_Init();
 8000c1e:	f000 f91d 	bl	8000e5c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HSB_DebugPrint_Init(true);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f7ff fcb2 	bl	800058c <HSB_DebugPrint_Init>
  HSB_VoltageModule_Init(0x68);
 8000c28:	2068      	movs	r0, #104	; 0x68
 8000c2a:	f7ff fcbf 	bl	80005ac <HSB_VoltageModule_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  uint16_t current = HSB_ReadCurrentModule(0);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f7ff fc5a 	bl	80004e8 <HSB_ReadCurrentModule>
 8000c34:	4603      	mov	r3, r0
 8000c36:	80fb      	strh	r3, [r7, #6]
	  HAL_Delay(250);
 8000c38:	20fa      	movs	r0, #250	; 0xfa
 8000c3a:	f000 fb15 	bl	8001268 <HAL_Delay>
  {
 8000c3e:	e7f6      	b.n	8000c2e <main+0x36>

08000c40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b096      	sub	sp, #88	; 0x58
 8000c44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	2244      	movs	r2, #68	; 0x44
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f005 ffe3 	bl	8006c1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c54:	463b      	mov	r3, r7
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
 8000c60:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000c62:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c66:	f003 fa93 	bl	8004190 <HAL_PWREx_ControlVoltageScaling>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000c70:	f000 f848 	bl	8000d04 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c74:	f003 fa6e 	bl	8004154 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000c78:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000c7e:	4a20      	ldr	r2, [pc, #128]	; (8000d00 <SystemClock_Config+0xc0>)
 8000c80:	f023 0318 	bic.w	r3, r3, #24
 8000c84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000c88:	2314      	movs	r3, #20
 8000c8a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000c8c:	2301      	movs	r3, #1
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000c90:	2301      	movs	r3, #1
 8000c92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000c98:	2360      	movs	r3, #96	; 0x60
 8000c9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000ca8:	2310      	movs	r3, #16
 8000caa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000cac:	2307      	movs	r3, #7
 8000cae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb8:	f107 0314 	add.w	r3, r7, #20
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	f003 fabd 	bl	800423c <HAL_RCC_OscConfig>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000cc8:	f000 f81c 	bl	8000d04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd0:	2303      	movs	r3, #3
 8000cd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 febd 	bl	8004a64 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000cf0:	f000 f808 	bl	8000d04 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000cf4:	f004 fad0 	bl	8005298 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000cf8:	bf00      	nop
 8000cfa:	3758      	adds	r7, #88	; 0x58
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40021000 	.word	0x40021000

08000d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d08:	b672      	cpsid	i
}
 8000d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d0c:	e7fe      	b.n	8000d0c <Error_Handler+0x8>
	...

08000d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x44>)
 8000d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d1a:	4a0e      	ldr	r2, [pc, #56]	; (8000d54 <HAL_MspInit+0x44>)
 8000d1c:	f043 0301 	orr.w	r3, r3, #1
 8000d20:	6613      	str	r3, [r2, #96]	; 0x60
 8000d22:	4b0c      	ldr	r3, [pc, #48]	; (8000d54 <HAL_MspInit+0x44>)
 8000d24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <HAL_MspInit+0x44>)
 8000d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d32:	4a08      	ldr	r2, [pc, #32]	; (8000d54 <HAL_MspInit+0x44>)
 8000d34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d38:	6593      	str	r3, [r2, #88]	; 0x58
 8000d3a:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_MspInit+0x44>)
 8000d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	40021000 	.word	0x40021000

08000d58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <NMI_Handler+0x4>

08000d5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <HardFault_Handler+0x4>

08000d64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <MemManage_Handler+0x4>

08000d6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <BusFault_Handler+0x4>

08000d70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d74:	e7fe      	b.n	8000d74 <UsageFault_Handler+0x4>

08000d76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d76:	b480      	push	{r7}
 8000d78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000da4:	f000 fa40 	bl	8001228 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	bd80      	pop	{r7, pc}

08000dac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000db0:	4802      	ldr	r0, [pc, #8]	; (8000dbc <DMA1_Channel1_IRQHandler+0x10>)
 8000db2:	f002 f884 	bl	8002ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200000a0 	.word	0x200000a0

08000dc0 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <DMA1_Channel6_IRQHandler+0x10>)
 8000dc6:	f002 f87a 	bl	8002ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200001ac 	.word	0x200001ac

08000dd4 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000dd8:	4802      	ldr	r0, [pc, #8]	; (8000de4 <DMA1_Channel7_IRQHandler+0x10>)
 8000dda:	f002 f870 	bl	8002ebe <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	20000164 	.word	0x20000164

08000de8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000dec:	4802      	ldr	r0, [pc, #8]	; (8000df8 <ADC1_IRQHandler+0x10>)
 8000dee:	f000 fdff 	bl	80019f0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	2000003c 	.word	0x2000003c

08000dfc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e00:	4802      	ldr	r0, [pc, #8]	; (8000e0c <TIM2_IRQHandler+0x10>)
 8000e02:	f004 fc03 	bl	800560c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e06:	bf00      	nop
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	200001f4 	.word	0x200001f4

08000e10 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000e14:	4802      	ldr	r0, [pc, #8]	; (8000e20 <I2C1_EV_IRQHandler+0x10>)
 8000e16:	f002 fb5c 	bl	80034d2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	20000110 	.word	0x20000110

08000e24 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <I2C1_ER_IRQHandler+0x10>)
 8000e2a:	f002 fb6c 	bl	8003506 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	20000110 	.word	0x20000110

08000e38 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <SystemInit+0x20>)
 8000e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e42:	4a05      	ldr	r2, [pc, #20]	; (8000e58 <SystemInit+0x20>)
 8000e44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000e4c:	bf00      	nop
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b08e      	sub	sp, #56	; 0x38
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e66:	2200      	movs	r2, #0
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	605a      	str	r2, [r3, #4]
 8000e6c:	609a      	str	r2, [r3, #8]
 8000e6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
 8000e88:	611a      	str	r2, [r3, #16]
 8000e8a:	615a      	str	r2, [r3, #20]
 8000e8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000e90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 32000 - 1;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000e98:	f647 42ff 	movw	r2, #31999	; 0x7cff
 8000e9c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b29      	ldr	r3, [pc, #164]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10;
 8000ea4:	4b27      	ldr	r3, [pc, #156]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000ea6:	220a      	movs	r2, #10
 8000ea8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb0:	4b24      	ldr	r3, [pc, #144]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb6:	4823      	ldr	r0, [pc, #140]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000eb8:	f004 faf0 	bl	800549c <HAL_TIM_Base_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ec2:	f7ff ff1f 	bl	8000d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ecc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	481c      	ldr	r0, [pc, #112]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000ed4:	f004 fd16 	bl	8005904 <HAL_TIM_ConfigClockSource>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000ede:	f7ff ff11 	bl	8000d04 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 8000ee2:	4818      	ldr	r0, [pc, #96]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000ee4:	f004 fb31 	bl	800554a <HAL_TIM_OC_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000eee:	f7ff ff09 	bl	8000d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efa:	f107 031c 	add.w	r3, r7, #28
 8000efe:	4619      	mov	r1, r3
 8000f00:	4810      	ldr	r0, [pc, #64]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000f02:	f005 f977 	bl	80061f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000f0c:	f7ff fefa 	bl	8000d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_FORCED_ACTIVE;
 8000f10:	2350      	movs	r3, #80	; 0x50
 8000f12:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f20:	463b      	mov	r3, r7
 8000f22:	2200      	movs	r2, #0
 8000f24:	4619      	mov	r1, r3
 8000f26:	4807      	ldr	r0, [pc, #28]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000f28:	f004 fc72 	bl	8005810 <HAL_TIM_OC_ConfigChannel>
 8000f2c:	4603      	mov	r3, r0
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d001      	beq.n	8000f36 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000f32:	f7ff fee7 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f36:	4803      	ldr	r0, [pc, #12]	; (8000f44 <MX_TIM2_Init+0xe8>)
 8000f38:	f000 f82a 	bl	8000f90 <HAL_TIM_MspPostInit>

}
 8000f3c:	bf00      	nop
 8000f3e:	3738      	adds	r7, #56	; 0x38
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}
 8000f44:	200001f4 	.word	0x200001f4

08000f48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f58:	d113      	bne.n	8000f82 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	; (8000f8c <HAL_TIM_Base_MspInit+0x44>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <HAL_TIM_Base_MspInit+0x44>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b09      	ldr	r3, [pc, #36]	; (8000f8c <HAL_TIM_Base_MspInit+0x44>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	201c      	movs	r0, #28
 8000f78:	f001 fe11 	bl	8002b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f7c:	201c      	movs	r0, #28
 8000f7e:	f001 fe2a 	bl	8002bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000f82:	bf00      	nop
 8000f84:	3710      	adds	r7, #16
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 030c 	add.w	r3, r7, #12
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fb0:	d11c      	bne.n	8000fec <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	4b10      	ldr	r3, [pc, #64]	; (8000ff4 <HAL_TIM_MspPostInit+0x64>)
 8000fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fb6:	4a0f      	ldr	r2, [pc, #60]	; (8000ff4 <HAL_TIM_MspPostInit+0x64>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fbe:	4b0d      	ldr	r3, [pc, #52]	; (8000ff4 <HAL_TIM_MspPostInit+0x64>)
 8000fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = TIMER2_Pin;
 8000fca:	2320      	movs	r3, #32
 8000fcc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TIMER2_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fe8:	f002 f856 	bl	8003098 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000fec:	bf00      	nop
 8000fee:	3720      	adds	r7, #32
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40021000 	.word	0x40021000

08000ff8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ffc:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <MX_USART2_UART_Init+0x5c>)
 8001000:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001002:	4b13      	ldr	r3, [pc, #76]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001004:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001008:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001010:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001016:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800101c:	4b0c      	ldr	r3, [pc, #48]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800101e:	220c      	movs	r2, #12
 8001020:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001022:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001024:	2200      	movs	r2, #0
 8001026:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001028:	4b09      	ldr	r3, [pc, #36]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800102a:	2200      	movs	r2, #0
 800102c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800102e:	4b08      	ldr	r3, [pc, #32]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001030:	2200      	movs	r2, #0
 8001032:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001034:	4b06      	ldr	r3, [pc, #24]	; (8001050 <MX_USART2_UART_Init+0x58>)
 8001036:	2200      	movs	r2, #0
 8001038:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800103a:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_USART2_UART_Init+0x58>)
 800103c:	f005 f95e 	bl	80062fc <HAL_UART_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001046:	f7ff fe5d 	bl	8000d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800104a:	bf00      	nop
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000240 	.word	0x20000240
 8001054:	40004400 	.word	0x40004400

08001058 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b09e      	sub	sp, #120	; 0x78
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001060:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001070:	f107 0310 	add.w	r3, r7, #16
 8001074:	2254      	movs	r2, #84	; 0x54
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f005 fdce 	bl	8006c1a <memset>
  if(uartHandle->Instance==USART2)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a28      	ldr	r2, [pc, #160]	; (8001124 <HAL_UART_MspInit+0xcc>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d148      	bne.n	800111a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001088:	2302      	movs	r3, #2
 800108a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800108c:	2300      	movs	r3, #0
 800108e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001090:	f107 0310 	add.w	r3, r7, #16
 8001094:	4618      	mov	r0, r3
 8001096:	f003 ff09 	bl	8004eac <HAL_RCCEx_PeriphCLKConfig>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010a0:	f7ff fe30 	bl	8000d04 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010a4:	4b20      	ldr	r3, [pc, #128]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010a8:	4a1f      	ldr	r2, [pc, #124]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010ae:	6593      	str	r3, [r2, #88]	; 0x58
 80010b0:	4b1d      	ldr	r3, [pc, #116]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010bc:	4b1a      	ldr	r3, [pc, #104]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c0:	4a19      	ldr	r2, [pc, #100]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c8:	4b17      	ldr	r3, [pc, #92]	; (8001128 <HAL_UART_MspInit+0xd0>)
 80010ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80010d4:	2304      	movs	r3, #4
 80010d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010e0:	2303      	movs	r3, #3
 80010e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010e4:	2307      	movs	r3, #7
 80010e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80010e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010ec:	4619      	mov	r1, r3
 80010ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010f2:	f001 ffd1 	bl	8003098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80010f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80010fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fc:	2302      	movs	r3, #2
 80010fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001100:	2300      	movs	r3, #0
 8001102:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001104:	2303      	movs	r3, #3
 8001106:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001108:	2303      	movs	r3, #3
 800110a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001116:	f001 ffbf 	bl	8003098 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800111a:	bf00      	nop
 800111c:	3778      	adds	r7, #120	; 0x78
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40004400 	.word	0x40004400
 8001128:	40021000 	.word	0x40021000

0800112c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800112c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001164 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001130:	f7ff fe82 	bl	8000e38 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <LoopForever+0x6>)
  ldr r1, =_edata
 8001136:	490d      	ldr	r1, [pc, #52]	; (800116c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <LoopForever+0xe>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800114c:	4c0a      	ldr	r4, [pc, #40]	; (8001178 <LoopForever+0x16>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800115a:	f005 fd67 	bl	8006c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800115e:	f7ff fd4b 	bl	8000bf8 <main>

08001162 <LoopForever>:

LoopForever:
    b LoopForever
 8001162:	e7fe      	b.n	8001162 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001164:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800116c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001170:	08006ce4 	.word	0x08006ce4
  ldr r2, =_sbss
 8001174:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001178:	200002cc 	.word	0x200002cc

0800117c <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800117c:	e7fe      	b.n	800117c <CAN1_RX0_IRQHandler>

0800117e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	b082      	sub	sp, #8
 8001182:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001184:	2300      	movs	r3, #0
 8001186:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f001 fcfd 	bl	8002b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f80e 	bl	80011b0 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d002      	beq.n	80011a0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	71fb      	strb	r3, [r7, #7]
 800119e:	e001      	b.n	80011a4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011a0:	f7ff fdb6 	bl	8000d10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011a4:	79fb      	ldrb	r3, [r7, #7]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3708      	adds	r7, #8
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
	...

080011b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80011bc:	4b17      	ldr	r3, [pc, #92]	; (800121c <HAL_InitTick+0x6c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d023      	beq.n	800120c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80011c4:	4b16      	ldr	r3, [pc, #88]	; (8001220 <HAL_InitTick+0x70>)
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	4b14      	ldr	r3, [pc, #80]	; (800121c <HAL_InitTick+0x6c>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	4619      	mov	r1, r3
 80011ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011da:	4618      	mov	r0, r3
 80011dc:	f001 fd09 	bl	8002bf2 <HAL_SYSTICK_Config>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10f      	bne.n	8001206 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2b0f      	cmp	r3, #15
 80011ea:	d809      	bhi.n	8001200 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011ec:	2200      	movs	r2, #0
 80011ee:	6879      	ldr	r1, [r7, #4]
 80011f0:	f04f 30ff 	mov.w	r0, #4294967295
 80011f4:	f001 fcd3 	bl	8002b9e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011f8:	4a0a      	ldr	r2, [pc, #40]	; (8001224 <HAL_InitTick+0x74>)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e007      	b.n	8001210 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001200:	2301      	movs	r3, #1
 8001202:	73fb      	strb	r3, [r7, #15]
 8001204:	e004      	b.n	8001210 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001206:	2301      	movs	r3, #1
 8001208:	73fb      	strb	r3, [r7, #15]
 800120a:	e001      	b.n	8001210 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001210:	7bfb      	ldrb	r3, [r7, #15]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	2000000c 	.word	0x2000000c
 8001220:	20000004 	.word	0x20000004
 8001224:	20000008 	.word	0x20000008

08001228 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <HAL_IncTick+0x20>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	461a      	mov	r2, r3
 8001232:	4b06      	ldr	r3, [pc, #24]	; (800124c <HAL_IncTick+0x24>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4413      	add	r3, r2
 8001238:	4a04      	ldr	r2, [pc, #16]	; (800124c <HAL_IncTick+0x24>)
 800123a:	6013      	str	r3, [r2, #0]
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	2000000c 	.word	0x2000000c
 800124c:	200002c8 	.word	0x200002c8

08001250 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001250:	b480      	push	{r7}
 8001252:	af00      	add	r7, sp, #0
  return uwTick;
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <HAL_GetTick+0x14>)
 8001256:	681b      	ldr	r3, [r3, #0]
}
 8001258:	4618      	mov	r0, r3
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	200002c8 	.word	0x200002c8

08001268 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b084      	sub	sp, #16
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001270:	f7ff ffee 	bl	8001250 <HAL_GetTick>
 8001274:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001280:	d005      	beq.n	800128e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001282:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <HAL_Delay+0x44>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	4413      	add	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128e:	bf00      	nop
 8001290:	f7ff ffde 	bl	8001250 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	68fa      	ldr	r2, [r7, #12]
 800129c:	429a      	cmp	r2, r3
 800129e:	d8f7      	bhi.n	8001290 <HAL_Delay+0x28>
  {
  }
}
 80012a0:	bf00      	nop
 80012a2:	bf00      	nop
 80012a4:	3710      	adds	r7, #16
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	2000000c 	.word	0x2000000c

080012b0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	431a      	orrs	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	609a      	str	r2, [r3, #8]
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	431a      	orrs	r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	609a      	str	r2, [r3, #8]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
 8001324:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3360      	adds	r3, #96	; 0x60
 800132a:	461a      	mov	r2, r3
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	009b      	lsls	r3, r3, #2
 8001330:	4413      	add	r3, r2
 8001332:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001334:	697b      	ldr	r3, [r7, #20]
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <LL_ADC_SetOffset+0x44>)
 800133a:	4013      	ands	r3, r2
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	430a      	orrs	r2, r1
 8001346:	4313      	orrs	r3, r2
 8001348:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001350:	bf00      	nop
 8001352:	371c      	adds	r7, #28
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	03fff000 	.word	0x03fff000

08001360 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	3360      	adds	r3, #96	; 0x60
 800136e:	461a      	mov	r2, r3
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	4413      	add	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001380:	4618      	mov	r0, r3
 8001382:	3714      	adds	r7, #20
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800138c:	b480      	push	{r7}
 800138e:	b087      	sub	sp, #28
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3360      	adds	r3, #96	; 0x60
 800139c:	461a      	mov	r2, r3
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	4413      	add	r3, r2
 80013a4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	431a      	orrs	r2, r3
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80013b6:	bf00      	nop
 80013b8:	371c      	adds	r7, #28
 80013ba:	46bd      	mov	sp, r7
 80013bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c0:	4770      	bx	lr

080013c2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013c2:	b480      	push	{r7}
 80013c4:	b083      	sub	sp, #12
 80013c6:	af00      	add	r7, sp, #0
 80013c8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3330      	adds	r3, #48	; 0x30
 80013f8:	461a      	mov	r2, r3
 80013fa:	68bb      	ldr	r3, [r7, #8]
 80013fc:	0a1b      	lsrs	r3, r3, #8
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	f003 030c 	and.w	r3, r3, #12
 8001404:	4413      	add	r3, r2
 8001406:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	681a      	ldr	r2, [r3, #0]
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	f003 031f 	and.w	r3, r3, #31
 8001412:	211f      	movs	r1, #31
 8001414:	fa01 f303 	lsl.w	r3, r1, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	401a      	ands	r2, r3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	0e9b      	lsrs	r3, r3, #26
 8001420:	f003 011f 	and.w	r1, r3, #31
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 031f 	and.w	r3, r3, #31
 800142a:	fa01 f303 	lsl.w	r3, r1, r3
 800142e:	431a      	orrs	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001434:	bf00      	nop
 8001436:	371c      	adds	r7, #28
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr

08001440 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d101      	bne.n	8001458 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001454:	2301      	movs	r3, #1
 8001456:	e000      	b.n	800145a <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	370c      	adds	r7, #12
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001466:	b480      	push	{r7}
 8001468:	b087      	sub	sp, #28
 800146a:	af00      	add	r7, sp, #0
 800146c:	60f8      	str	r0, [r7, #12]
 800146e:	60b9      	str	r1, [r7, #8]
 8001470:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	3314      	adds	r3, #20
 8001476:	461a      	mov	r2, r3
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	0e5b      	lsrs	r3, r3, #25
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	f003 0304 	and.w	r3, r3, #4
 8001482:	4413      	add	r3, r2
 8001484:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	0d1b      	lsrs	r3, r3, #20
 800148e:	f003 031f 	and.w	r3, r3, #31
 8001492:	2107      	movs	r1, #7
 8001494:	fa01 f303 	lsl.w	r3, r1, r3
 8001498:	43db      	mvns	r3, r3
 800149a:	401a      	ands	r2, r3
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	0d1b      	lsrs	r3, r3, #20
 80014a0:	f003 031f 	and.w	r3, r3, #31
 80014a4:	6879      	ldr	r1, [r7, #4]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	431a      	orrs	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014b0:	bf00      	nop
 80014b2:	371c      	adds	r7, #28
 80014b4:	46bd      	mov	sp, r7
 80014b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ba:	4770      	bx	lr

080014bc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014bc:	b480      	push	{r7}
 80014be:	b085      	sub	sp, #20
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014d4:	43db      	mvns	r3, r3
 80014d6:	401a      	ands	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0318 	and.w	r3, r3, #24
 80014de:	4908      	ldr	r1, [pc, #32]	; (8001500 <LL_ADC_SetChannelSingleDiff+0x44>)
 80014e0:	40d9      	lsrs	r1, r3
 80014e2:	68bb      	ldr	r3, [r7, #8]
 80014e4:	400b      	ands	r3, r1
 80014e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80014ea:	431a      	orrs	r2, r3
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80014f2:	bf00      	nop
 80014f4:	3714      	adds	r7, #20
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	0007ffff 	.word	0x0007ffff

08001504 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	689b      	ldr	r3, [r3, #8]
 8001510:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001514:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	6093      	str	r3, [r2, #8]
}
 800151c:	bf00      	nop
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800153c:	d101      	bne.n	8001542 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800153e:	2301      	movs	r3, #1
 8001540:	e000      	b.n	8001544 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001542:	2300      	movs	r3, #0
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154e:	4770      	bx	lr

08001550 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001560:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001564:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800158c:	d101      	bne.n	8001592 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015b4:	f043 0201 	orr.w	r2, r3, #1
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80015bc:	bf00      	nop
 80015be:	370c      	adds	r7, #12
 80015c0:	46bd      	mov	sp, r7
 80015c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c6:	4770      	bx	lr

080015c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689b      	ldr	r3, [r3, #8]
 80015d4:	f003 0301 	and.w	r3, r3, #1
 80015d8:	2b01      	cmp	r3, #1
 80015da:	d101      	bne.n	80015e0 <LL_ADC_IsEnabled+0x18>
 80015dc:	2301      	movs	r3, #1
 80015de:	e000      	b.n	80015e2 <LL_ADC_IsEnabled+0x1a>
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	370c      	adds	r7, #12
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr

080015ee <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80015ee:	b480      	push	{r7}
 80015f0:	b083      	sub	sp, #12
 80015f2:	af00      	add	r7, sp, #0
 80015f4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80015fe:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001602:	f043 0204 	orr.w	r2, r3, #4
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	f003 0304 	and.w	r3, r3, #4
 8001626:	2b04      	cmp	r3, #4
 8001628:	d101      	bne.n	800162e <LL_ADC_REG_IsConversionOngoing+0x18>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d101      	bne.n	8001654 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b088      	sub	sp, #32
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800166c:	2300      	movs	r3, #0
 800166e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e126      	b.n	80018cc <HAL_ADC_Init+0x268>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001688:	2b00      	cmp	r3, #0
 800168a:	d109      	bne.n	80016a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff f813 	bl	80006b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2200      	movs	r2, #0
 800169c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff3f 	bl	8001528 <LL_ADC_IsDeepPowerDownEnabled>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d004      	beq.n	80016ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff ff25 	bl	8001504 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4618      	mov	r0, r3
 80016c0:	f7ff ff5a 	bl	8001578 <LL_ADC_IsInternalRegulatorEnabled>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d115      	bne.n	80016f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4618      	mov	r0, r3
 80016d0:	f7ff ff3e 	bl	8001550 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d4:	4b7f      	ldr	r3, [pc, #508]	; (80018d4 <HAL_ADC_Init+0x270>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	099b      	lsrs	r3, r3, #6
 80016da:	4a7f      	ldr	r2, [pc, #508]	; (80018d8 <HAL_ADC_Init+0x274>)
 80016dc:	fba2 2303 	umull	r2, r3, r2, r3
 80016e0:	099b      	lsrs	r3, r3, #6
 80016e2:	3301      	adds	r3, #1
 80016e4:	005b      	lsls	r3, r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016e8:	e002      	b.n	80016f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f9      	bne.n	80016ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7ff ff3c 	bl	8001578 <LL_ADC_IsInternalRegulatorEnabled>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170a:	f043 0210 	orr.w	r2, r3, #16
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001716:	f043 0201 	orr.w	r2, r3, #1
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff ff75 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 800172c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001732:	f003 0310 	and.w	r3, r3, #16
 8001736:	2b00      	cmp	r3, #0
 8001738:	f040 80bf 	bne.w	80018ba <HAL_ADC_Init+0x256>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	2b00      	cmp	r3, #0
 8001740:	f040 80bb 	bne.w	80018ba <HAL_ADC_Init+0x256>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001748:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800174c:	f043 0202 	orr.w	r2, r3, #2
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff35 	bl	80015c8 <LL_ADC_IsEnabled>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d10b      	bne.n	800177c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001764:	485d      	ldr	r0, [pc, #372]	; (80018dc <HAL_ADC_Init+0x278>)
 8001766:	f7ff ff2f 	bl	80015c8 <LL_ADC_IsEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d105      	bne.n	800177c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	4619      	mov	r1, r3
 8001776:	485a      	ldr	r0, [pc, #360]	; (80018e0 <HAL_ADC_Init+0x27c>)
 8001778:	f7ff fd9a 	bl	80012b0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7e5b      	ldrb	r3, [r3, #25]
 8001780:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001786:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 800178c:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001792:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800179a:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	3b01      	subs	r3, #1
 80017b0:	045b      	lsls	r3, r3, #17
 80017b2:	69ba      	ldr	r2, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d009      	beq.n	80017d4 <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80017ce:	69ba      	ldr	r2, [r7, #24]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	68da      	ldr	r2, [r3, #12]
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <HAL_ADC_Init+0x280>)
 80017dc:	4013      	ands	r3, r2
 80017de:	687a      	ldr	r2, [r7, #4]
 80017e0:	6812      	ldr	r2, [r2, #0]
 80017e2:	69b9      	ldr	r1, [r7, #24]
 80017e4:	430b      	orrs	r3, r1
 80017e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff ff25 	bl	800163c <LL_ADC_INJ_IsConversionOngoing>
 80017f2:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d13d      	bne.n	8001876 <HAL_ADC_Init+0x212>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d13a      	bne.n	8001876 <HAL_ADC_Init+0x212>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	7e1b      	ldrb	r3, [r3, #24]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001804:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800180c:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800181c:	f023 0302 	bic.w	r3, r3, #2
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	6812      	ldr	r2, [r2, #0]
 8001824:	69b9      	ldr	r1, [r7, #24]
 8001826:	430b      	orrs	r3, r1
 8001828:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001830:	2b01      	cmp	r3, #1
 8001832:	d118      	bne.n	8001866 <HAL_ADC_Init+0x202>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800183e:	f023 0304 	bic.w	r3, r3, #4
 8001842:	687a      	ldr	r2, [r7, #4]
 8001844:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800184a:	4311      	orrs	r1, r2
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001856:	430a      	orrs	r2, r1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f042 0201 	orr.w	r2, r2, #1
 8001862:	611a      	str	r2, [r3, #16]
 8001864:	e007      	b.n	8001876 <HAL_ADC_Init+0x212>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	691a      	ldr	r2, [r3, #16]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 0201 	bic.w	r2, r2, #1
 8001874:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	691b      	ldr	r3, [r3, #16]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d10c      	bne.n	8001898 <HAL_ADC_Init+0x234>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f023 010f 	bic.w	r1, r3, #15
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	1e5a      	subs	r2, r3, #1
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	430a      	orrs	r2, r1
 8001894:	631a      	str	r2, [r3, #48]	; 0x30
 8001896:	e007      	b.n	80018a8 <HAL_ADC_Init+0x244>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 020f 	bic.w	r2, r2, #15
 80018a6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f023 0303 	bic.w	r3, r3, #3
 80018b0:	f043 0201 	orr.w	r2, r3, #1
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	655a      	str	r2, [r3, #84]	; 0x54
 80018b8:	e007      	b.n	80018ca <HAL_ADC_Init+0x266>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	f043 0210 	orr.w	r2, r3, #16
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80018ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80018cc:	4618      	mov	r0, r3
 80018ce:	3720      	adds	r7, #32
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	20000004 	.word	0x20000004
 80018d8:	053e2d63 	.word	0x053e2d63
 80018dc:	50040000 	.word	0x50040000
 80018e0:	50040300 	.word	0x50040300
 80018e4:	fff0c007 	.word	0xfff0c007

080018e8 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fe8c 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d167      	bne.n	80019d4 <HAL_ADC_Start_DMA+0xec>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800190a:	2b01      	cmp	r3, #1
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Start_DMA+0x2a>
 800190e:	2302      	movs	r3, #2
 8001910:	e063      	b.n	80019da <HAL_ADC_Start_DMA+0xf2>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	2201      	movs	r2, #1
 8001916:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800191a:	68f8      	ldr	r0, [r7, #12]
 800191c:	f000 fe1c 	bl	8002558 <ADC_Enable>
 8001920:	4603      	mov	r3, r0
 8001922:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001924:	7dfb      	ldrb	r3, [r7, #23]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d14f      	bne.n	80019ca <HAL_ADC_Start_DMA+0xe2>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800192e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001932:	f023 0301 	bic.w	r3, r3, #1
 8001936:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	655a      	str	r2, [r3, #84]	; 0x54
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001942:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d006      	beq.n	8001958 <HAL_ADC_Start_DMA+0x70>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194e:	f023 0206 	bic.w	r2, r3, #6
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	659a      	str	r2, [r3, #88]	; 0x58
 8001956:	e002      	b.n	800195e <HAL_ADC_Start_DMA+0x76>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	659a      	str	r2, [r3, #88]	; 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	4a20      	ldr	r2, [pc, #128]	; (80019e4 <HAL_ADC_Start_DMA+0xfc>)
 8001964:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_ADC_Start_DMA+0x100>)
 800196c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001972:	4a1e      	ldr	r2, [pc, #120]	; (80019ec <HAL_ADC_Start_DMA+0x104>)
 8001974:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	221c      	movs	r2, #28
 800197c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	685a      	ldr	r2, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f042 0210 	orr.w	r2, r2, #16
 8001994:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f042 0201 	orr.w	r2, r2, #1
 80019a4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	3340      	adds	r3, #64	; 0x40
 80019b0:	4619      	mov	r1, r3
 80019b2:	68ba      	ldr	r2, [r7, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	f001 f9e1 	bl	8002d7c <HAL_DMA_Start_IT>
 80019ba:	4603      	mov	r3, r0
 80019bc:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fe13 	bl	80015ee <LL_ADC_REG_StartConversion>
 80019c8:	e006      	b.n	80019d8 <HAL_ADC_Start_DMA+0xf0>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	2200      	movs	r2, #0
 80019ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019d2:	e001      	b.n	80019d8 <HAL_ADC_Start_DMA+0xf0>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80019d4:	2302      	movs	r3, #2
 80019d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80019d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3718      	adds	r7, #24
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	08002665 	.word	0x08002665
 80019e8:	0800273d 	.word	0x0800273d
 80019ec:	08002759 	.word	0x08002759

080019f0 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b088      	sub	sp, #32
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80019f8:	2300      	movs	r3, #0
 80019fa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d017      	beq.n	8001a46 <HAL_ADC_IRQHandler+0x56>
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d012      	beq.n	8001a46 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a24:	f003 0310 	and.w	r3, r3, #16
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d105      	bne.n	8001a38 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a30:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 fecf 	bl	80027dc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2202      	movs	r2, #2
 8001a44:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a46:	69bb      	ldr	r3, [r7, #24]
 8001a48:	f003 0304 	and.w	r3, r3, #4
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d004      	beq.n	8001a5a <HAL_ADC_IRQHandler+0x6a>
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d05e      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0308 	and.w	r3, r3, #8
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d059      	beq.n	8001b22 <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a72:	f003 0310 	and.w	r3, r3, #16
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d105      	bne.n	8001a86 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a7e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	f7ff fc99 	bl	80013c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03e      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d135      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 0308 	and.w	r3, r3, #8
 8001ab2:	2b08      	cmp	r3, #8
 8001ab4:	d12e      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fdab 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d11a      	bne.n	8001afc <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	685a      	ldr	r2, [r3, #4]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f022 020c 	bic.w	r2, r2, #12
 8001ad4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ada:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d112      	bne.n	8001b14 <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
 8001afa:	e00b      	b.n	8001b14 <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b00:	f043 0210 	orr.w	r2, r3, #16
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b0c:	f043 0201 	orr.w	r2, r3, #1
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f7fe fcd7 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	220c      	movs	r2, #12
 8001b20:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	f003 0320 	and.w	r3, r3, #32
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_ADC_IRQHandler+0x146>
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d109      	bne.n	8001b4a <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d072      	beq.n	8001c26 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d06d      	beq.n	8001c26 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d105      	bne.n	8001b62 <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fc6a 	bl	8001440 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001b6c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f7ff fc25 	bl	80013c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001b78:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d047      	beq.n	8001c18 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d007      	beq.n	8001ba2 <HAL_ADC_IRQHandler+0x1b2>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03f      	beq.n	8001c18 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d13a      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bac:	2b40      	cmp	r3, #64	; 0x40
 8001bae:	d133      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001bb0:	693b      	ldr	r3, [r7, #16]
 8001bb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d12e      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff fd3c 	bl	800163c <LL_ADC_INJ_IsConversionOngoing>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d11a      	bne.n	8001c00 <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001bd8:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bde:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d112      	bne.n	8001c18 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf6:	f043 0201 	orr.w	r2, r3, #1
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	655a      	str	r2, [r3, #84]	; 0x54
 8001bfe:	e00b      	b.n	8001c18 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	f000 fdb7 	bl	800278c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2260      	movs	r2, #96	; 0x60
 8001c24:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001c26:	69bb      	ldr	r3, [r7, #24]
 8001c28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d011      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x264>
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d00c      	beq.n	8001c54 <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f890 	bl	8001d6c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2280      	movs	r2, #128	; 0x80
 8001c52:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001c54:	69bb      	ldr	r3, [r7, #24]
 8001c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d012      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x294>
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d00d      	beq.n	8001c84 <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c6c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001c74:	6878      	ldr	r0, [r7, #4]
 8001c76:	f000 fd9d 	bl	80027b4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001c82:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d012      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x2c4>
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00d      	beq.n	8001cb4 <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c9c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f000 fd8f 	bl	80027c8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cb2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001cb4:	69bb      	ldr	r3, [r7, #24]
 8001cb6:	f003 0310 	and.w	r3, r3, #16
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d02a      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x324>
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 0310 	and.w	r3, r3, #16
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d025      	beq.n	8001d14 <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d102      	bne.n	8001cd6 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	e008      	b.n	8001ce8 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 0301 	and.w	r3, r3, #1
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cfe:	f043 0202 	orr.w	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f000 f83a 	bl	8001d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2210      	movs	r2, #16
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d018      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x360>
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f043 0208 	orr.w	r2, r3, #8
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d48:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f000 fd28 	bl	80027a0 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001d50:	bf00      	nop
 8001d52:	3720      	adds	r7, #32
 8001d54:	46bd      	mov	sp, r7
 8001d56:	bd80      	pop	{r7, pc}

08001d58 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001d74:	bf00      	nop
 8001d76:	370c      	adds	r7, #12
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0b6      	sub	sp, #216	; 0xd8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001da4:	2300      	movs	r3, #0
 8001da6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d101      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x22>
 8001db2:	2302      	movs	r3, #2
 8001db4:	e3bb      	b.n	800252e <HAL_ADC_ConfigChannel+0x79a>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fc27 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f040 83a0 	bne.w	8002510 <HAL_ADC_ConfigChannel+0x77c>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	2b05      	cmp	r3, #5
 8001dde:	d824      	bhi.n	8001e2a <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	3b02      	subs	r3, #2
 8001de6:	2b03      	cmp	r3, #3
 8001de8:	d81b      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0x8e>
 8001dea:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <HAL_ADC_ConfigChannel+0x5c>)
 8001dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001df0:	08001e01 	.word	0x08001e01
 8001df4:	08001e09 	.word	0x08001e09
 8001df8:	08001e11 	.word	0x08001e11
 8001dfc:	08001e19 	.word	0x08001e19
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8001e00:	230c      	movs	r3, #12
 8001e02:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e06:	e010      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8001e08:	2312      	movs	r3, #18
 8001e0a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e0e:	e00c      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8001e10:	2318      	movs	r3, #24
 8001e12:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e16:	e008      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8001e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e20:	e003      	b.n	8001e2a <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8001e22:	2306      	movs	r3, #6
 8001e24:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
          break;
 8001e28:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6818      	ldr	r0, [r3, #0]
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	461a      	mov	r2, r3
 8001e34:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8001e38:	f7ff fad6 	bl	80013e8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff fbe8 	bl	8001616 <LL_ADC_REG_IsConversionOngoing>
 8001e46:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7ff fbf4 	bl	800163c <LL_ADC_INJ_IsConversionOngoing>
 8001e54:	f8c7 00c8 	str.w	r0, [r7, #200]	; 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e58:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f040 81a4 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x416>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e62:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	f040 819f 	bne.w	80021aa <HAL_ADC_ConfigChannel+0x416>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	6819      	ldr	r1, [r3, #0]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	461a      	mov	r2, r3
 8001e7a:	f7ff faf4 	bl	8001466 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	695a      	ldr	r2, [r3, #20]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	08db      	lsrs	r3, r3, #3
 8001e8a:	f003 0303 	and.w	r3, r3, #3
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d00a      	beq.n	8001eb6 <HAL_ADC_ConfigChannel+0x122>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6818      	ldr	r0, [r3, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	6919      	ldr	r1, [r3, #16]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8001eb0:	f7ff fa32 	bl	8001318 <LL_ADC_SetOffset>
 8001eb4:	e179      	b.n	80021aa <HAL_ADC_ConfigChannel+0x416>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff fa4f 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10a      	bne.n	8001ee2 <HAL_ADC_ConfigChannel+0x14e>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fa44 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	0e9b      	lsrs	r3, r3, #26
 8001edc:	f003 021f 	and.w	r2, r3, #31
 8001ee0:	e01e      	b.n	8001f20 <HAL_ADC_ConfigChannel+0x18c>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fa39 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f00:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001f04:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f08:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d101      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x180>
  {
    return 32U;
 8001f10:	2320      	movs	r3, #32
 8001f12:	e004      	b.n	8001f1e <HAL_ADC_ConfigChannel+0x18a>
  }
  return __builtin_clz(value);
 8001f14:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001f18:	fab3 f383 	clz	r3, r3
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d105      	bne.n	8001f38 <HAL_ADC_ConfigChannel+0x1a4>
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	0e9b      	lsrs	r3, r3, #26
 8001f32:	f003 031f 	and.w	r3, r3, #31
 8001f36:	e018      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1d6>
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f44:	fa93 f3a3 	rbit	r3, r3
 8001f48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  return result;
 8001f4c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  if (value == 0U)
 8001f54:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d101      	bne.n	8001f60 <HAL_ADC_ConfigChannel+0x1cc>
    return 32U;
 8001f5c:	2320      	movs	r3, #32
 8001f5e:	e004      	b.n	8001f6a <HAL_ADC_ConfigChannel+0x1d6>
  return __builtin_clz(value);
 8001f60:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001f64:	fab3 f383 	clz	r3, r3
 8001f68:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001f6a:	429a      	cmp	r2, r3
 8001f6c:	d106      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x1e8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2200      	movs	r2, #0
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f7ff fa08 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	2101      	movs	r1, #1
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff f9ec 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10a      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x214>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2101      	movs	r1, #1
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff f9e1 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	f003 021f 	and.w	r2, r3, #31
 8001fa6:	e01e      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x252>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff f9d6 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001fbe:	fa93 f3a3 	rbit	r3, r3
 8001fc2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  return result;
 8001fc6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001fca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  if (value == 0U)
 8001fce:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_ConfigChannel+0x246>
    return 32U;
 8001fd6:	2320      	movs	r3, #32
 8001fd8:	e004      	b.n	8001fe4 <HAL_ADC_ConfigChannel+0x250>
  return __builtin_clz(value);
 8001fda:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001fde:	fab3 f383 	clz	r3, r3
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d105      	bne.n	8001ffe <HAL_ADC_ConfigChannel+0x26a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	0e9b      	lsrs	r3, r3, #26
 8001ff8:	f003 031f 	and.w	r3, r3, #31
 8001ffc:	e018      	b.n	8002030 <HAL_ADC_ConfigChannel+0x29c>
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800200a:	fa93 f3a3 	rbit	r3, r3
 800200e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  return result;
 8002012:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002016:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  if (value == 0U)
 800201a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x292>
    return 32U;
 8002022:	2320      	movs	r3, #32
 8002024:	e004      	b.n	8002030 <HAL_ADC_ConfigChannel+0x29c>
  return __builtin_clz(value);
 8002026:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800202a:	fab3 f383 	clz	r3, r3
 800202e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002030:	429a      	cmp	r2, r3
 8002032:	d106      	bne.n	8002042 <HAL_ADC_ConfigChannel+0x2ae>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2200      	movs	r2, #0
 800203a:	2101      	movs	r1, #1
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff f9a5 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2102      	movs	r1, #2
 8002048:	4618      	mov	r0, r3
 800204a:	f7ff f989 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800204e:	4603      	mov	r3, r0
 8002050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10a      	bne.n	800206e <HAL_ADC_ConfigChannel+0x2da>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2102      	movs	r1, #2
 800205e:	4618      	mov	r0, r3
 8002060:	f7ff f97e 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002064:	4603      	mov	r3, r0
 8002066:	0e9b      	lsrs	r3, r3, #26
 8002068:	f003 021f 	and.w	r2, r3, #31
 800206c:	e01e      	b.n	80020ac <HAL_ADC_ConfigChannel+0x318>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2102      	movs	r1, #2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff f973 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800207a:	4603      	mov	r3, r0
 800207c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002084:	fa93 f3a3 	rbit	r3, r3
 8002088:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  return result;
 800208c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002090:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (value == 0U)
 8002094:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_ADC_ConfigChannel+0x30c>
    return 32U;
 800209c:	2320      	movs	r3, #32
 800209e:	e004      	b.n	80020aa <HAL_ADC_ConfigChannel+0x316>
  return __builtin_clz(value);
 80020a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020a4:	fab3 f383 	clz	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d105      	bne.n	80020c4 <HAL_ADC_ConfigChannel+0x330>
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	0e9b      	lsrs	r3, r3, #26
 80020be:	f003 031f 	and.w	r3, r3, #31
 80020c2:	e014      	b.n	80020ee <HAL_ADC_ConfigChannel+0x35a>
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80020cc:	fa93 f3a3 	rbit	r3, r3
 80020d0:	67bb      	str	r3, [r7, #120]	; 0x78
  return result;
 80020d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80020d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  if (value == 0U)
 80020d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d101      	bne.n	80020e4 <HAL_ADC_ConfigChannel+0x350>
    return 32U;
 80020e0:	2320      	movs	r3, #32
 80020e2:	e004      	b.n	80020ee <HAL_ADC_ConfigChannel+0x35a>
  return __builtin_clz(value);
 80020e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80020e8:	fab3 f383 	clz	r3, r3
 80020ec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d106      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x36c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	2200      	movs	r2, #0
 80020f8:	2102      	movs	r1, #2
 80020fa:	4618      	mov	r0, r3
 80020fc:	f7ff f946 	bl	800138c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2103      	movs	r1, #3
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f92a 	bl	8001360 <LL_ADC_GetOffsetChannel>
 800210c:	4603      	mov	r3, r0
 800210e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10a      	bne.n	800212c <HAL_ADC_ConfigChannel+0x398>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2103      	movs	r1, #3
 800211c:	4618      	mov	r0, r3
 800211e:	f7ff f91f 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002122:	4603      	mov	r3, r0
 8002124:	0e9b      	lsrs	r3, r3, #26
 8002126:	f003 021f 	and.w	r2, r3, #31
 800212a:	e017      	b.n	800215c <HAL_ADC_ConfigChannel+0x3c8>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2103      	movs	r1, #3
 8002132:	4618      	mov	r0, r3
 8002134:	f7ff f914 	bl	8001360 <LL_ADC_GetOffsetChannel>
 8002138:	4603      	mov	r3, r0
 800213a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800213c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800213e:	fa93 f3a3 	rbit	r3, r3
 8002142:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002144:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002146:	677b      	str	r3, [r7, #116]	; 0x74
  if (value == 0U)
 8002148:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_ADC_ConfigChannel+0x3be>
    return 32U;
 800214e:	2320      	movs	r3, #32
 8002150:	e003      	b.n	800215a <HAL_ADC_ConfigChannel+0x3c6>
  return __builtin_clz(value);
 8002152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002154:	fab3 f383 	clz	r3, r3
 8002158:	b2db      	uxtb	r3, r3
 800215a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002164:	2b00      	cmp	r3, #0
 8002166:	d105      	bne.n	8002174 <HAL_ADC_ConfigChannel+0x3e0>
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	0e9b      	lsrs	r3, r3, #26
 800216e:	f003 031f 	and.w	r3, r3, #31
 8002172:	e011      	b.n	8002198 <HAL_ADC_ConfigChannel+0x404>
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800217c:	fa93 f3a3 	rbit	r3, r3
 8002180:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8002182:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002184:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 8002186:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002188:	2b00      	cmp	r3, #0
 800218a:	d101      	bne.n	8002190 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800218c:	2320      	movs	r3, #32
 800218e:	e003      	b.n	8002198 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8002190:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002198:	429a      	cmp	r2, r3
 800219a:	d106      	bne.n	80021aa <HAL_ADC_ConfigChannel+0x416>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	2200      	movs	r2, #0
 80021a2:	2103      	movs	r1, #3
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff f8f1 	bl	800138c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7ff fa0a 	bl	80015c8 <LL_ADC_IsEnabled>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 8140 	bne.w	800243c <HAL_ADC_ConfigChannel+0x6a8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6818      	ldr	r0, [r3, #0]
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	6819      	ldr	r1, [r3, #0]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	461a      	mov	r2, r3
 80021ca:	f7ff f977 	bl	80014bc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	4a8f      	ldr	r2, [pc, #572]	; (8002410 <HAL_ADC_ConfigChannel+0x67c>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	f040 8131 	bne.w	800243c <HAL_ADC_ConfigChannel+0x6a8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10b      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x46e>
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	0e9b      	lsrs	r3, r3, #26
 80021f0:	3301      	adds	r3, #1
 80021f2:	f003 031f 	and.w	r3, r3, #31
 80021f6:	2b09      	cmp	r3, #9
 80021f8:	bf94      	ite	ls
 80021fa:	2301      	movls	r3, #1
 80021fc:	2300      	movhi	r3, #0
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	e019      	b.n	8002236 <HAL_ADC_ConfigChannel+0x4a2>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002210:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002212:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002214:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x48a>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x492>
  return __builtin_clz(value);
 800221e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2b09      	cmp	r3, #9
 800222e:	bf94      	ite	ls
 8002230:	2301      	movls	r3, #1
 8002232:	2300      	movhi	r3, #0
 8002234:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002236:	2b00      	cmp	r3, #0
 8002238:	d079      	beq.n	800232e <HAL_ADC_ConfigChannel+0x59a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002242:	2b00      	cmp	r3, #0
 8002244:	d107      	bne.n	8002256 <HAL_ADC_ConfigChannel+0x4c2>
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0e9b      	lsrs	r3, r3, #26
 800224c:	3301      	adds	r3, #1
 800224e:	069b      	lsls	r3, r3, #26
 8002250:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002254:	e015      	b.n	8002282 <HAL_ADC_ConfigChannel+0x4ee>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800225e:	fa93 f3a3 	rbit	r3, r3
 8002262:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8002264:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002266:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x4de>
    return 32U;
 800226e:	2320      	movs	r3, #32
 8002270:	e003      	b.n	800227a <HAL_ADC_ConfigChannel+0x4e6>
  return __builtin_clz(value);
 8002272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002274:	fab3 f383 	clz	r3, r3
 8002278:	b2db      	uxtb	r3, r3
 800227a:	3301      	adds	r3, #1
 800227c:	069b      	lsls	r3, r3, #26
 800227e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800228a:	2b00      	cmp	r3, #0
 800228c:	d109      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x50e>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	0e9b      	lsrs	r3, r3, #26
 8002294:	3301      	adds	r3, #1
 8002296:	f003 031f 	and.w	r3, r3, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f303 	lsl.w	r3, r1, r3
 80022a0:	e017      	b.n	80022d2 <HAL_ADC_ConfigChannel+0x53e>
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022aa:	fa93 f3a3 	rbit	r3, r3
 80022ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022b2:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_ADC_ConfigChannel+0x52a>
    return 32U;
 80022ba:	2320      	movs	r3, #32
 80022bc:	e003      	b.n	80022c6 <HAL_ADC_ConfigChannel+0x532>
  return __builtin_clz(value);
 80022be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022c0:	fab3 f383 	clz	r3, r3
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	3301      	adds	r3, #1
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2101      	movs	r1, #1
 80022ce:	fa01 f303 	lsl.w	r3, r1, r3
 80022d2:	ea42 0103 	orr.w	r1, r2, r3
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10a      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x564>
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	0e9b      	lsrs	r3, r3, #26
 80022e8:	3301      	adds	r3, #1
 80022ea:	f003 021f 	and.w	r2, r3, #31
 80022ee:	4613      	mov	r3, r2
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	4413      	add	r3, r2
 80022f4:	051b      	lsls	r3, r3, #20
 80022f6:	e018      	b.n	800232a <HAL_ADC_ConfigChannel+0x596>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002308:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800230a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x580>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x588>
  return __builtin_clz(value);
 8002314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 021f 	and.w	r2, r3, #31
 8002322:	4613      	mov	r3, r2
 8002324:	005b      	lsls	r3, r3, #1
 8002326:	4413      	add	r3, r2
 8002328:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800232a:	430b      	orrs	r3, r1
 800232c:	e081      	b.n	8002432 <HAL_ADC_ConfigChannel+0x69e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002336:	2b00      	cmp	r3, #0
 8002338:	d107      	bne.n	800234a <HAL_ADC_ConfigChannel+0x5b6>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	0e9b      	lsrs	r3, r3, #26
 8002340:	3301      	adds	r3, #1
 8002342:	069b      	lsls	r3, r3, #26
 8002344:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002348:	e015      	b.n	8002376 <HAL_ADC_ConfigChannel+0x5e2>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800235c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800235e:	2b00      	cmp	r3, #0
 8002360:	d101      	bne.n	8002366 <HAL_ADC_ConfigChannel+0x5d2>
    return 32U;
 8002362:	2320      	movs	r3, #32
 8002364:	e003      	b.n	800236e <HAL_ADC_ConfigChannel+0x5da>
  return __builtin_clz(value);
 8002366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002368:	fab3 f383 	clz	r3, r3
 800236c:	b2db      	uxtb	r3, r3
 800236e:	3301      	adds	r3, #1
 8002370:	069b      	lsls	r3, r3, #26
 8002372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800237e:	2b00      	cmp	r3, #0
 8002380:	d109      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x602>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	0e9b      	lsrs	r3, r3, #26
 8002388:	3301      	adds	r3, #1
 800238a:	f003 031f 	and.w	r3, r3, #31
 800238e:	2101      	movs	r1, #1
 8002390:	fa01 f303 	lsl.w	r3, r1, r3
 8002394:	e017      	b.n	80023c6 <HAL_ADC_ConfigChannel+0x632>
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	fa93 f3a3 	rbit	r3, r3
 80023a2:	61bb      	str	r3, [r7, #24]
  return result;
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_ConfigChannel+0x61e>
    return 32U;
 80023ae:	2320      	movs	r3, #32
 80023b0:	e003      	b.n	80023ba <HAL_ADC_ConfigChannel+0x626>
  return __builtin_clz(value);
 80023b2:	6a3b      	ldr	r3, [r7, #32]
 80023b4:	fab3 f383 	clz	r3, r3
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	f003 031f 	and.w	r3, r3, #31
 80023c0:	2101      	movs	r1, #1
 80023c2:	fa01 f303 	lsl.w	r3, r1, r3
 80023c6:	ea42 0103 	orr.w	r1, r2, r3
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d10d      	bne.n	80023f2 <HAL_ADC_ConfigChannel+0x65e>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	0e9b      	lsrs	r3, r3, #26
 80023dc:	3301      	adds	r3, #1
 80023de:	f003 021f 	and.w	r2, r3, #31
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3b1e      	subs	r3, #30
 80023ea:	051b      	lsls	r3, r3, #20
 80023ec:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023f0:	e01e      	b.n	8002430 <HAL_ADC_ConfigChannel+0x69c>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	fa93 f3a3 	rbit	r3, r3
 80023fe:	60fb      	str	r3, [r7, #12]
  return result;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d104      	bne.n	8002414 <HAL_ADC_ConfigChannel+0x680>
    return 32U;
 800240a:	2320      	movs	r3, #32
 800240c:	e006      	b.n	800241c <HAL_ADC_ConfigChannel+0x688>
 800240e:	bf00      	nop
 8002410:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	fab3 f383 	clz	r3, r3
 800241a:	b2db      	uxtb	r3, r3
 800241c:	3301      	adds	r3, #1
 800241e:	f003 021f 	and.w	r2, r3, #31
 8002422:	4613      	mov	r3, r2
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	4413      	add	r3, r2
 8002428:	3b1e      	subs	r3, #30
 800242a:	051b      	lsls	r3, r3, #20
 800242c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002430:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002436:	4619      	mov	r1, r3
 8002438:	f7ff f815 	bl	8001466 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_ADC_ConfigChannel+0x7a4>)
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d06c      	beq.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002448:	483c      	ldr	r0, [pc, #240]	; (800253c <HAL_ADC_ConfigChannel+0x7a8>)
 800244a:	f7fe ff57 	bl	80012fc <LL_ADC_GetCommonPathInternalCh>
 800244e:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a3a      	ldr	r2, [pc, #232]	; (8002540 <HAL_ADC_ConfigChannel+0x7ac>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d127      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x718>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800245c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002460:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d121      	bne.n	80024ac <HAL_ADC_ConfigChannel+0x718>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_ADC_ConfigChannel+0x7b0>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d157      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002472:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800247a:	4619      	mov	r1, r3
 800247c:	482f      	ldr	r0, [pc, #188]	; (800253c <HAL_ADC_ConfigChannel+0x7a8>)
 800247e:	f7fe ff2a 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002482:	4b31      	ldr	r3, [pc, #196]	; (8002548 <HAL_ADC_ConfigChannel+0x7b4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	4a30      	ldr	r2, [pc, #192]	; (800254c <HAL_ADC_ConfigChannel+0x7b8>)
 800248a:	fba2 2303 	umull	r2, r3, r2, r3
 800248e:	099b      	lsrs	r3, r3, #6
 8002490:	1c5a      	adds	r2, r3, #1
 8002492:	4613      	mov	r3, r2
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800249c:	e002      	b.n	80024a4 <HAL_ADC_ConfigChannel+0x710>
          {
            wait_loop_index--;
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	3b01      	subs	r3, #1
 80024a2:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80024a4:	68bb      	ldr	r3, [r7, #8]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f9      	bne.n	800249e <HAL_ADC_ConfigChannel+0x70a>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024aa:	e03a      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a27      	ldr	r2, [pc, #156]	; (8002550 <HAL_ADC_ConfigChannel+0x7bc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d113      	bne.n	80024de <HAL_ADC_ConfigChannel+0x74a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80024b6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10d      	bne.n	80024de <HAL_ADC_ConfigChannel+0x74a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a1f      	ldr	r2, [pc, #124]	; (8002544 <HAL_ADC_ConfigChannel+0x7b0>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d12a      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024cc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d4:	4619      	mov	r1, r3
 80024d6:	4819      	ldr	r0, [pc, #100]	; (800253c <HAL_ADC_ConfigChannel+0x7a8>)
 80024d8:	f7fe fefd 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024dc:	e021      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a1c      	ldr	r2, [pc, #112]	; (8002554 <HAL_ADC_ConfigChannel+0x7c0>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d11c      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024e8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80024ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d116      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a12      	ldr	r2, [pc, #72]	; (8002544 <HAL_ADC_ConfigChannel+0x7b0>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d111      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80024fe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002502:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002506:	4619      	mov	r1, r3
 8002508:	480c      	ldr	r0, [pc, #48]	; (800253c <HAL_ADC_ConfigChannel+0x7a8>)
 800250a:	f7fe fee4 	bl	80012d6 <LL_ADC_SetCommonPathInternalCh>
 800250e:	e008      	b.n	8002522 <HAL_ADC_ConfigChannel+0x78e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002514:	f043 0220 	orr.w	r2, r3, #32
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800252a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800252e:	4618      	mov	r0, r3
 8002530:	37d8      	adds	r7, #216	; 0xd8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	80080000 	.word	0x80080000
 800253c:	50040300 	.word	0x50040300
 8002540:	c7520000 	.word	0xc7520000
 8002544:	50040000 	.word	0x50040000
 8002548:	20000004 	.word	0x20000004
 800254c:	053e2d63 	.word	0x053e2d63
 8002550:	cb840000 	.word	0xcb840000
 8002554:	80000001 	.word	0x80000001

08002558 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002560:	2300      	movs	r3, #0
 8002562:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff f82d 	bl	80015c8 <LL_ADC_IsEnabled>
 800256e:	4603      	mov	r3, r0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d169      	bne.n	8002648 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	689a      	ldr	r2, [r3, #8]
 800257a:	4b36      	ldr	r3, [pc, #216]	; (8002654 <ADC_Enable+0xfc>)
 800257c:	4013      	ands	r3, r2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d00d      	beq.n	800259e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	f043 0210 	orr.w	r2, r3, #16
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002592:	f043 0201 	orr.w	r2, r3, #1
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e055      	b.n	800264a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f7fe fffc 	bl	80015a0 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025a8:	482b      	ldr	r0, [pc, #172]	; (8002658 <ADC_Enable+0x100>)
 80025aa:	f7fe fea7 	bl	80012fc <LL_ADC_GetCommonPathInternalCh>
 80025ae:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80025b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80025b8:	4b28      	ldr	r3, [pc, #160]	; (800265c <ADC_Enable+0x104>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	099b      	lsrs	r3, r3, #6
 80025be:	4a28      	ldr	r2, [pc, #160]	; (8002660 <ADC_Enable+0x108>)
 80025c0:	fba2 2303 	umull	r2, r3, r2, r3
 80025c4:	099b      	lsrs	r3, r3, #6
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	4613      	mov	r3, r2
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025d2:	e002      	b.n	80025da <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	3b01      	subs	r3, #1
 80025d8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f9      	bne.n	80025d4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025e0:	f7fe fe36 	bl	8001250 <HAL_GetTick>
 80025e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80025e6:	e028      	b.n	800263a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4618      	mov	r0, r3
 80025ee:	f7fe ffeb 	bl	80015c8 <LL_ADC_IsEnabled>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d104      	bne.n	8002602 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe ffcf 	bl	80015a0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002602:	f7fe fe25 	bl	8001250 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d914      	bls.n	800263a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	2b01      	cmp	r3, #1
 800261c:	d00d      	beq.n	800263a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002622:	f043 0210 	orr.w	r2, r3, #16
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e007      	b.n	800264a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d1cf      	bne.n	80025e8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002648:	2300      	movs	r3, #0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3710      	adds	r7, #16
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	8000003f 	.word	0x8000003f
 8002658:	50040300 	.word	0x50040300
 800265c:	20000004 	.word	0x20000004
 8002660:	053e2d63 	.word	0x053e2d63

08002664 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800267a:	2b00      	cmp	r3, #0
 800267c:	d14b      	bne.n	8002716 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002682:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	655a      	str	r2, [r3, #84]	; 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0308 	and.w	r3, r3, #8
 8002694:	2b00      	cmp	r3, #0
 8002696:	d021      	beq.n	80026dc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fe90 	bl	80013c2 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d032      	beq.n	800270e <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12b      	bne.n	800270e <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d11f      	bne.n	800270e <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d2:	f043 0201 	orr.w	r2, r3, #1
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	655a      	str	r2, [r3, #84]	; 0x54
 80026da:	e018      	b.n	800270e <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	f003 0302 	and.w	r3, r3, #2
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d111      	bne.n	800270e <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d105      	bne.n	800270e <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002706:	f043 0201 	orr.w	r2, r3, #1
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7fd feda 	bl	80004c8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002714:	e00e      	b.n	8002734 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800271a:	f003 0310 	and.w	r3, r3, #16
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002722:	68f8      	ldr	r0, [r7, #12]
 8002724:	f7ff fb2c 	bl	8001d80 <HAL_ADC_ErrorCallback>
}
 8002728:	e004      	b.n	8002734 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800272e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	4798      	blx	r3
}
 8002734:	bf00      	nop
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002748:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f7ff fb04 	bl	8001d58 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002750:	bf00      	nop
 8002752:	3710      	adds	r7, #16
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002764:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800276a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	f043 0204 	orr.w	r2, r3, #4
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800277e:	68f8      	ldr	r0, [r7, #12]
 8002780:	f7ff fafe 	bl	8001d80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002784:	bf00      	nop
 8002786:	3710      	adds	r7, #16
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}

0800278c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b084      	sub	sp, #16
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e0ed      	b.n	80029de <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d102      	bne.n	8002814 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f7fe f824 	bl	800085c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002824:	f7fe fd14 	bl	8001250 <HAL_GetTick>
 8002828:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800282a:	e012      	b.n	8002852 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800282c:	f7fe fd10 	bl	8001250 <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b0a      	cmp	r3, #10
 8002838:	d90b      	bls.n	8002852 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2205      	movs	r2, #5
 800284a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e0c5      	b.n	80029de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0e5      	beq.n	800282c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	681a      	ldr	r2, [r3, #0]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0202 	bic.w	r2, r2, #2
 800286e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002870:	f7fe fcee 	bl	8001250 <HAL_GetTick>
 8002874:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002876:	e012      	b.n	800289e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002878:	f7fe fcea 	bl	8001250 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b0a      	cmp	r3, #10
 8002884:	d90b      	bls.n	800289e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2205      	movs	r2, #5
 8002896:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e09f      	b.n	80029de <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1e5      	bne.n	8002878 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d108      	bne.n	80028c6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681a      	ldr	r2, [r3, #0]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80028c2:	601a      	str	r2, [r3, #0]
 80028c4:	e007      	b.n	80028d6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681a      	ldr	r2, [r3, #0]
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	7e5b      	ldrb	r3, [r3, #25]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d108      	bne.n	80028f0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	e007      	b.n	8002900 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	681a      	ldr	r2, [r3, #0]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80028fe:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	7e9b      	ldrb	r3, [r3, #26]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d108      	bne.n	800291a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f042 0220 	orr.w	r2, r2, #32
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	e007      	b.n	800292a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0220 	bic.w	r2, r2, #32
 8002928:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	7edb      	ldrb	r3, [r3, #27]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d108      	bne.n	8002944 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0210 	bic.w	r2, r2, #16
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	e007      	b.n	8002954 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f042 0210 	orr.w	r2, r2, #16
 8002952:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7f1b      	ldrb	r3, [r3, #28]
 8002958:	2b01      	cmp	r3, #1
 800295a:	d108      	bne.n	800296e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f042 0208 	orr.w	r2, r2, #8
 800296a:	601a      	str	r2, [r3, #0]
 800296c:	e007      	b.n	800297e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f022 0208 	bic.w	r2, r2, #8
 800297c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	7f5b      	ldrb	r3, [r3, #29]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d108      	bne.n	8002998 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681a      	ldr	r2, [r3, #0]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f042 0204 	orr.w	r2, r2, #4
 8002994:	601a      	str	r2, [r3, #0]
 8002996:	e007      	b.n	80029a8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f022 0204 	bic.w	r2, r2, #4
 80029a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689a      	ldr	r2, [r3, #8]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	431a      	orrs	r2, r3
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	431a      	orrs	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	ea42 0103 	orr.w	r1, r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	1e5a      	subs	r2, r3, #1
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	430a      	orrs	r2, r1
 80029cc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80029dc:	2300      	movs	r3, #0
}
 80029de:	4618      	mov	r0, r3
 80029e0:	3710      	adds	r7, #16
 80029e2:	46bd      	mov	sp, r7
 80029e4:	bd80      	pop	{r7, pc}
	...

080029e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f003 0307 	and.w	r3, r3, #7
 80029f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029f8:	4b0c      	ldr	r3, [pc, #48]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029fe:	68ba      	ldr	r2, [r7, #8]
 8002a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a04:	4013      	ands	r3, r2
 8002a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a1a:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <__NVIC_SetPriorityGrouping+0x44>)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	60d3      	str	r3, [r2, #12]
}
 8002a20:	bf00      	nop
 8002a22:	3714      	adds	r7, #20
 8002a24:	46bd      	mov	sp, r7
 8002a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2a:	4770      	bx	lr
 8002a2c:	e000ed00 	.word	0xe000ed00

08002a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a34:	4b04      	ldr	r3, [pc, #16]	; (8002a48 <__NVIC_GetPriorityGrouping+0x18>)
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	0a1b      	lsrs	r3, r3, #8
 8002a3a:	f003 0307 	and.w	r3, r3, #7
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	db0b      	blt.n	8002a76 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	f003 021f 	and.w	r2, r3, #31
 8002a64:	4907      	ldr	r1, [pc, #28]	; (8002a84 <__NVIC_EnableIRQ+0x38>)
 8002a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a6a:	095b      	lsrs	r3, r3, #5
 8002a6c:	2001      	movs	r0, #1
 8002a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	e000e100 	.word	0xe000e100

08002a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	4603      	mov	r3, r0
 8002a90:	6039      	str	r1, [r7, #0]
 8002a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	db0a      	blt.n	8002ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	b2da      	uxtb	r2, r3
 8002aa0:	490c      	ldr	r1, [pc, #48]	; (8002ad4 <__NVIC_SetPriority+0x4c>)
 8002aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aa6:	0112      	lsls	r2, r2, #4
 8002aa8:	b2d2      	uxtb	r2, r2
 8002aaa:	440b      	add	r3, r1
 8002aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ab0:	e00a      	b.n	8002ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	b2da      	uxtb	r2, r3
 8002ab6:	4908      	ldr	r1, [pc, #32]	; (8002ad8 <__NVIC_SetPriority+0x50>)
 8002ab8:	79fb      	ldrb	r3, [r7, #7]
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3b04      	subs	r3, #4
 8002ac0:	0112      	lsls	r2, r2, #4
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	440b      	add	r3, r1
 8002ac6:	761a      	strb	r2, [r3, #24]
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr
 8002ad4:	e000e100 	.word	0xe000e100
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b089      	sub	sp, #36	; 0x24
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f1c3 0307 	rsb	r3, r3, #7
 8002af6:	2b04      	cmp	r3, #4
 8002af8:	bf28      	it	cs
 8002afa:	2304      	movcs	r3, #4
 8002afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	3304      	adds	r3, #4
 8002b02:	2b06      	cmp	r3, #6
 8002b04:	d902      	bls.n	8002b0c <NVIC_EncodePriority+0x30>
 8002b06:	69fb      	ldr	r3, [r7, #28]
 8002b08:	3b03      	subs	r3, #3
 8002b0a:	e000      	b.n	8002b0e <NVIC_EncodePriority+0x32>
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b10:	f04f 32ff 	mov.w	r2, #4294967295
 8002b14:	69bb      	ldr	r3, [r7, #24]
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43da      	mvns	r2, r3
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	401a      	ands	r2, r3
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b24:	f04f 31ff 	mov.w	r1, #4294967295
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b2e:	43d9      	mvns	r1, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b34:	4313      	orrs	r3, r2
         );
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3724      	adds	r7, #36	; 0x24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
	...

08002b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b54:	d301      	bcc.n	8002b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b56:	2301      	movs	r3, #1
 8002b58:	e00f      	b.n	8002b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b5a:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <SysTick_Config+0x40>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	3b01      	subs	r3, #1
 8002b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b62:	210f      	movs	r1, #15
 8002b64:	f04f 30ff 	mov.w	r0, #4294967295
 8002b68:	f7ff ff8e 	bl	8002a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <SysTick_Config+0x40>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b72:	4b04      	ldr	r3, [pc, #16]	; (8002b84 <SysTick_Config+0x40>)
 8002b74:	2207      	movs	r2, #7
 8002b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	e000e010 	.word	0xe000e010

08002b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f7ff ff29 	bl	80029e8 <__NVIC_SetPriorityGrouping>
}
 8002b96:	bf00      	nop
 8002b98:	3708      	adds	r7, #8
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd80      	pop	{r7, pc}

08002b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b086      	sub	sp, #24
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	60b9      	str	r1, [r7, #8]
 8002ba8:	607a      	str	r2, [r7, #4]
 8002baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002bb0:	f7ff ff3e 	bl	8002a30 <__NVIC_GetPriorityGrouping>
 8002bb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	68b9      	ldr	r1, [r7, #8]
 8002bba:	6978      	ldr	r0, [r7, #20]
 8002bbc:	f7ff ff8e 	bl	8002adc <NVIC_EncodePriority>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff ff5d 	bl	8002a88 <__NVIC_SetPriority>
}
 8002bce:	bf00      	nop
 8002bd0:	3718      	adds	r7, #24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}

08002bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bd6:	b580      	push	{r7, lr}
 8002bd8:	b082      	sub	sp, #8
 8002bda:	af00      	add	r7, sp, #0
 8002bdc:	4603      	mov	r3, r0
 8002bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff ff31 	bl	8002a4c <__NVIC_EnableIRQ>
}
 8002bea:	bf00      	nop
 8002bec:	3708      	adds	r7, #8
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}

08002bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002bf2:	b580      	push	{r7, lr}
 8002bf4:	b082      	sub	sp, #8
 8002bf6:	af00      	add	r7, sp, #0
 8002bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f7ff ffa2 	bl	8002b44 <SysTick_Config>
 8002c00:	4603      	mov	r3, r0
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
	...

08002c0c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d101      	bne.n	8002c1e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e098      	b.n	8002d50 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	461a      	mov	r2, r3
 8002c24:	4b4d      	ldr	r3, [pc, #308]	; (8002d5c <HAL_DMA_Init+0x150>)
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d80f      	bhi.n	8002c4a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	461a      	mov	r2, r3
 8002c30:	4b4b      	ldr	r3, [pc, #300]	; (8002d60 <HAL_DMA_Init+0x154>)
 8002c32:	4413      	add	r3, r2
 8002c34:	4a4b      	ldr	r2, [pc, #300]	; (8002d64 <HAL_DMA_Init+0x158>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	009a      	lsls	r2, r3, #2
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a48      	ldr	r2, [pc, #288]	; (8002d68 <HAL_DMA_Init+0x15c>)
 8002c46:	641a      	str	r2, [r3, #64]	; 0x40
 8002c48:	e00e      	b.n	8002c68 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	461a      	mov	r2, r3
 8002c50:	4b46      	ldr	r3, [pc, #280]	; (8002d6c <HAL_DMA_Init+0x160>)
 8002c52:	4413      	add	r3, r2
 8002c54:	4a43      	ldr	r2, [pc, #268]	; (8002d64 <HAL_DMA_Init+0x158>)
 8002c56:	fba2 2303 	umull	r2, r3, r2, r3
 8002c5a:	091b      	lsrs	r3, r3, #4
 8002c5c:	009a      	lsls	r2, r3, #2
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a42      	ldr	r2, [pc, #264]	; (8002d70 <HAL_DMA_Init+0x164>)
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8002c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c82:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002c8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	699b      	ldr	r3, [r3, #24]
 8002c9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002ca4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002cc2:	d039      	beq.n	8002d38 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc8:	4a27      	ldr	r2, [pc, #156]	; (8002d68 <HAL_DMA_Init+0x15c>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d11a      	bne.n	8002d04 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002cce:	4b29      	ldr	r3, [pc, #164]	; (8002d74 <HAL_DMA_Init+0x168>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cd6:	f003 031c 	and.w	r3, r3, #28
 8002cda:	210f      	movs	r1, #15
 8002cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	4924      	ldr	r1, [pc, #144]	; (8002d74 <HAL_DMA_Init+0x168>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_DMA_Init+0x168>)
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6859      	ldr	r1, [r3, #4]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf4:	f003 031c 	and.w	r3, r3, #28
 8002cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002cfc:	491d      	ldr	r1, [pc, #116]	; (8002d74 <HAL_DMA_Init+0x168>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	600b      	str	r3, [r1, #0]
 8002d02:	e019      	b.n	8002d38 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8002d04:	4b1c      	ldr	r3, [pc, #112]	; (8002d78 <HAL_DMA_Init+0x16c>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0c:	f003 031c 	and.w	r3, r3, #28
 8002d10:	210f      	movs	r1, #15
 8002d12:	fa01 f303 	lsl.w	r3, r1, r3
 8002d16:	43db      	mvns	r3, r3
 8002d18:	4917      	ldr	r1, [pc, #92]	; (8002d78 <HAL_DMA_Init+0x16c>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8002d1e:	4b16      	ldr	r3, [pc, #88]	; (8002d78 <HAL_DMA_Init+0x16c>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6859      	ldr	r1, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	f003 031c 	and.w	r3, r3, #28
 8002d2e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d32:	4911      	ldr	r1, [pc, #68]	; (8002d78 <HAL_DMA_Init+0x16c>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3714      	adds	r7, #20
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	40020407 	.word	0x40020407
 8002d60:	bffdfff8 	.word	0xbffdfff8
 8002d64:	cccccccd 	.word	0xcccccccd
 8002d68:	40020000 	.word	0x40020000
 8002d6c:	bffdfbf8 	.word	0xbffdfbf8
 8002d70:	40020400 	.word	0x40020400
 8002d74:	400200a8 	.word	0x400200a8
 8002d78:	400204a8 	.word	0x400204a8

08002d7c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b086      	sub	sp, #24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	607a      	str	r2, [r7, #4]
 8002d88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d101      	bne.n	8002d9c <HAL_DMA_Start_IT+0x20>
 8002d98:	2302      	movs	r3, #2
 8002d9a:	e04b      	b.n	8002e34 <HAL_DMA_Start_IT+0xb8>
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d13a      	bne.n	8002e26 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	2202      	movs	r2, #2
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0201 	bic.w	r2, r2, #1
 8002dcc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	68b9      	ldr	r1, [r7, #8]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f92f 	bl	8003038 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d008      	beq.n	8002df4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 020e 	orr.w	r2, r2, #14
 8002df0:	601a      	str	r2, [r3, #0]
 8002df2:	e00f      	b.n	8002e14 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f022 0204 	bic.w	r2, r2, #4
 8002e02:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f042 020a 	orr.w	r2, r2, #10
 8002e12:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f042 0201 	orr.w	r2, r2, #1
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	e005      	b.n	8002e32 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002e2e:	2302      	movs	r3, #2
 8002e30:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	2b02      	cmp	r3, #2
 8002e52:	d005      	beq.n	8002e60 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2204      	movs	r2, #4
 8002e58:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	73fb      	strb	r3, [r7, #15]
 8002e5e:	e029      	b.n	8002eb4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f022 020e 	bic.w	r2, r2, #14
 8002e6e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f022 0201 	bic.w	r2, r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e84:	f003 021c 	and.w	r2, r3, #28
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e92:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
    }
  }
  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eda:	f003 031c 	and.w	r3, r3, #28
 8002ede:	2204      	movs	r2, #4
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	4013      	ands	r3, r2
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d026      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x7a>
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	f003 0304 	and.w	r3, r3, #4
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d021      	beq.n	8002f38 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d107      	bne.n	8002f12 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0204 	bic.w	r2, r2, #4
 8002f10:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f16:	f003 021c 	and.w	r2, r3, #28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	2104      	movs	r1, #4
 8002f20:	fa01 f202 	lsl.w	r2, r1, r2
 8002f24:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d071      	beq.n	8003012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f36:	e06c      	b.n	8003012 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3c:	f003 031c 	and.w	r3, r3, #28
 8002f40:	2202      	movs	r2, #2
 8002f42:	409a      	lsls	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	4013      	ands	r3, r2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d02e      	beq.n	8002faa <HAL_DMA_IRQHandler+0xec>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 0302 	and.w	r3, r3, #2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d029      	beq.n	8002faa <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 0320 	and.w	r3, r3, #32
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d10b      	bne.n	8002f7c <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f022 020a 	bic.w	r2, r2, #10
 8002f72:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f80:	f003 021c 	and.w	r2, r3, #28
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2102      	movs	r1, #2
 8002f8a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f8e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d038      	beq.n	8003012 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002fa8:	e033      	b.n	8003012 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fae:	f003 031c 	and.w	r3, r3, #28
 8002fb2:	2208      	movs	r2, #8
 8002fb4:	409a      	lsls	r2, r3
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4013      	ands	r3, r2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d02a      	beq.n	8003014 <HAL_DMA_IRQHandler+0x156>
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	f003 0308 	and.w	r3, r3, #8
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d025      	beq.n	8003014 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 020e 	bic.w	r2, r2, #14
 8002fd6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fdc:	f003 021c 	and.w	r2, r3, #28
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe4:	2101      	movs	r1, #1
 8002fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8002fea:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	2b00      	cmp	r3, #0
 8003008:	d004      	beq.n	8003014 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800300e:	6878      	ldr	r0, [r7, #4]
 8003010:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003012:	bf00      	nop
 8003014:	bf00      	nop
}
 8003016:	3710      	adds	r7, #16
 8003018:	46bd      	mov	sp, r7
 800301a:	bd80      	pop	{r7, pc}

0800301c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800302a:	b2db      	uxtb	r3, r3
}
 800302c:	4618      	mov	r0, r3
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	60b9      	str	r1, [r7, #8]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f003 021c 	and.w	r2, r3, #28
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	2101      	movs	r1, #1
 8003054:	fa01 f202 	lsl.w	r2, r1, r2
 8003058:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b10      	cmp	r3, #16
 8003068:	d108      	bne.n	800307c <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	687a      	ldr	r2, [r7, #4]
 8003070:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	68ba      	ldr	r2, [r7, #8]
 8003078:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800307a:	e007      	b.n	800308c <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	68ba      	ldr	r2, [r7, #8]
 8003082:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	687a      	ldr	r2, [r7, #4]
 800308a:	60da      	str	r2, [r3, #12]
}
 800308c:	bf00      	nop
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003098:	b480      	push	{r7}
 800309a:	b087      	sub	sp, #28
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80030a2:	2300      	movs	r3, #0
 80030a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80030a6:	e148      	b.n	800333a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	2101      	movs	r1, #1
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	fa01 f303 	lsl.w	r3, r1, r3
 80030b4:	4013      	ands	r3, r2
 80030b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 813a 	beq.w	8003334 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	685b      	ldr	r3, [r3, #4]
 80030c4:	f003 0303 	and.w	r3, r3, #3
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d005      	beq.n	80030d8 <HAL_GPIO_Init+0x40>
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d130      	bne.n	800313a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	2203      	movs	r2, #3
 80030e4:	fa02 f303 	lsl.w	r3, r2, r3
 80030e8:	43db      	mvns	r3, r3
 80030ea:	693a      	ldr	r2, [r7, #16]
 80030ec:	4013      	ands	r3, r2
 80030ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	693a      	ldr	r2, [r7, #16]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800310e:	2201      	movs	r2, #1
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43db      	mvns	r3, r3
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	091b      	lsrs	r3, r3, #4
 8003124:	f003 0201 	and.w	r2, r3, #1
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	fa02 f303 	lsl.w	r3, r2, r3
 800312e:	693a      	ldr	r2, [r7, #16]
 8003130:	4313      	orrs	r3, r2
 8003132:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	2b03      	cmp	r3, #3
 8003144:	d017      	beq.n	8003176 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	68db      	ldr	r3, [r3, #12]
 800314a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	005b      	lsls	r3, r3, #1
 8003150:	2203      	movs	r2, #3
 8003152:	fa02 f303 	lsl.w	r3, r2, r3
 8003156:	43db      	mvns	r3, r3
 8003158:	693a      	ldr	r2, [r7, #16]
 800315a:	4013      	ands	r3, r2
 800315c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	689a      	ldr	r2, [r3, #8]
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	005b      	lsls	r3, r3, #1
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	693a      	ldr	r2, [r7, #16]
 800316c:	4313      	orrs	r3, r2
 800316e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	693a      	ldr	r2, [r7, #16]
 8003174:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	2b02      	cmp	r3, #2
 8003180:	d123      	bne.n	80031ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003182:	697b      	ldr	r3, [r7, #20]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800318e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	4013      	ands	r3, r2
 80031a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	691a      	ldr	r2, [r3, #16]
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	f003 0307 	and.w	r3, r3, #7
 80031b0:	009b      	lsls	r3, r3, #2
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	08da      	lsrs	r2, r3, #3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	3208      	adds	r2, #8
 80031c4:	6939      	ldr	r1, [r7, #16]
 80031c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	005b      	lsls	r3, r3, #1
 80031d4:	2203      	movs	r2, #3
 80031d6:	fa02 f303 	lsl.w	r3, r2, r3
 80031da:	43db      	mvns	r3, r3
 80031dc:	693a      	ldr	r2, [r7, #16]
 80031de:	4013      	ands	r3, r2
 80031e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f003 0203 	and.w	r2, r3, #3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	fa02 f303 	lsl.w	r3, r2, r3
 80031f2:	693a      	ldr	r2, [r7, #16]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	693a      	ldr	r2, [r7, #16]
 80031fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003206:	2b00      	cmp	r3, #0
 8003208:	f000 8094 	beq.w	8003334 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320c:	4b52      	ldr	r3, [pc, #328]	; (8003358 <HAL_GPIO_Init+0x2c0>)
 800320e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003210:	4a51      	ldr	r2, [pc, #324]	; (8003358 <HAL_GPIO_Init+0x2c0>)
 8003212:	f043 0301 	orr.w	r3, r3, #1
 8003216:	6613      	str	r3, [r2, #96]	; 0x60
 8003218:	4b4f      	ldr	r3, [pc, #316]	; (8003358 <HAL_GPIO_Init+0x2c0>)
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	60bb      	str	r3, [r7, #8]
 8003222:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003224:	4a4d      	ldr	r2, [pc, #308]	; (800335c <HAL_GPIO_Init+0x2c4>)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	089b      	lsrs	r3, r3, #2
 800322a:	3302      	adds	r3, #2
 800322c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	f003 0303 	and.w	r3, r3, #3
 8003238:	009b      	lsls	r3, r3, #2
 800323a:	220f      	movs	r2, #15
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	43db      	mvns	r3, r3
 8003242:	693a      	ldr	r2, [r7, #16]
 8003244:	4013      	ands	r3, r2
 8003246:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800324e:	d00d      	beq.n	800326c <HAL_GPIO_Init+0x1d4>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a43      	ldr	r2, [pc, #268]	; (8003360 <HAL_GPIO_Init+0x2c8>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d007      	beq.n	8003268 <HAL_GPIO_Init+0x1d0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a42      	ldr	r2, [pc, #264]	; (8003364 <HAL_GPIO_Init+0x2cc>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d101      	bne.n	8003264 <HAL_GPIO_Init+0x1cc>
 8003260:	2302      	movs	r3, #2
 8003262:	e004      	b.n	800326e <HAL_GPIO_Init+0x1d6>
 8003264:	2307      	movs	r3, #7
 8003266:	e002      	b.n	800326e <HAL_GPIO_Init+0x1d6>
 8003268:	2301      	movs	r3, #1
 800326a:	e000      	b.n	800326e <HAL_GPIO_Init+0x1d6>
 800326c:	2300      	movs	r3, #0
 800326e:	697a      	ldr	r2, [r7, #20]
 8003270:	f002 0203 	and.w	r2, r2, #3
 8003274:	0092      	lsls	r2, r2, #2
 8003276:	4093      	lsls	r3, r2
 8003278:	693a      	ldr	r2, [r7, #16]
 800327a:	4313      	orrs	r3, r2
 800327c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800327e:	4937      	ldr	r1, [pc, #220]	; (800335c <HAL_GPIO_Init+0x2c4>)
 8003280:	697b      	ldr	r3, [r7, #20]
 8003282:	089b      	lsrs	r3, r3, #2
 8003284:	3302      	adds	r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800328c:	4b36      	ldr	r3, [pc, #216]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	43db      	mvns	r3, r3
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4013      	ands	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d003      	beq.n	80032b0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4313      	orrs	r3, r2
 80032ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80032b0:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80032b6:	4b2c      	ldr	r3, [pc, #176]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	43db      	mvns	r3, r3
 80032c0:	693a      	ldr	r2, [r7, #16]
 80032c2:	4013      	ands	r3, r2
 80032c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80032d2:	693a      	ldr	r2, [r7, #16]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80032da:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80032e0:	4b21      	ldr	r3, [pc, #132]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	43db      	mvns	r3, r3
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4013      	ands	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003304:	4a18      	ldr	r2, [pc, #96]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800330a:	4b17      	ldr	r3, [pc, #92]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	43db      	mvns	r3, r3
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4013      	ands	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003326:	693a      	ldr	r2, [r7, #16]
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	4313      	orrs	r3, r2
 800332c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800332e:	4a0e      	ldr	r2, [pc, #56]	; (8003368 <HAL_GPIO_Init+0x2d0>)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3301      	adds	r3, #1
 8003338:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	fa22 f303 	lsr.w	r3, r2, r3
 8003344:	2b00      	cmp	r3, #0
 8003346:	f47f aeaf 	bne.w	80030a8 <HAL_GPIO_Init+0x10>
  }
}
 800334a:	bf00      	nop
 800334c:	bf00      	nop
 800334e:	371c      	adds	r7, #28
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	40021000 	.word	0x40021000
 800335c:	40010000 	.word	0x40010000
 8003360:	48000400 	.word	0x48000400
 8003364:	48000800 	.word	0x48000800
 8003368:	40010400 	.word	0x40010400

0800336c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	460b      	mov	r3, r1
 8003376:	807b      	strh	r3, [r7, #2]
 8003378:	4613      	mov	r3, r2
 800337a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800337c:	787b      	ldrb	r3, [r7, #1]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003382:	887a      	ldrh	r2, [r7, #2]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003388:	e002      	b.n	8003390 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800338a:	887a      	ldrh	r2, [r7, #2]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003390:	bf00      	nop
 8003392:	370c      	adds	r7, #12
 8003394:	46bd      	mov	sp, r7
 8003396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339a:	4770      	bx	lr

0800339c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b082      	sub	sp, #8
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e08d      	b.n	80034ca <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d106      	bne.n	80033c8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7fd fb54 	bl	8000a70 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2224      	movs	r2, #36	; 0x24
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f022 0201 	bic.w	r2, r2, #1
 80033de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033ec:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033fc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d107      	bne.n	8003416 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003412:	609a      	str	r2, [r3, #8]
 8003414:	e006      	b.n	8003424 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	689a      	ldr	r2, [r3, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003422:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d108      	bne.n	800343e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	685a      	ldr	r2, [r3, #4]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800343a:	605a      	str	r2, [r3, #4]
 800343c:	e007      	b.n	800344e <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685a      	ldr	r2, [r3, #4]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800344c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6812      	ldr	r2, [r2, #0]
 8003458:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800345c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003460:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68da      	ldr	r2, [r3, #12]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003470:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	691a      	ldr	r2, [r3, #16]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
 800347a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	699b      	ldr	r3, [r3, #24]
 8003482:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	430a      	orrs	r2, r1
 800348a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69d9      	ldr	r1, [r3, #28]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1a      	ldr	r2, [r3, #32]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f042 0201 	orr.w	r2, r2, #1
 80034aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2220      	movs	r2, #32
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}

080034d2 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80034d2:	b580      	push	{r7, lr}
 80034d4:	b084      	sub	sp, #16
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f6:	68ba      	ldr	r2, [r7, #8]
 80034f8:	68f9      	ldr	r1, [r7, #12]
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	4798      	blx	r3
  }
}
 80034fe:	bf00      	nop
 8003500:	3710      	adds	r7, #16
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}

08003506 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003506:	b580      	push	{r7, lr}
 8003508:	b086      	sub	sp, #24
 800350a:	af00      	add	r7, sp, #0
 800350c:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003524:	2b00      	cmp	r3, #0
 8003526:	d00f      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800352e:	2b00      	cmp	r3, #0
 8003530:	d00a      	beq.n	8003548 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003546:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00f      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003552:	693b      	ldr	r3, [r7, #16]
 8003554:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00a      	beq.n	8003572 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003560:	f043 0208 	orr.w	r2, r3, #8
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003570:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00f      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00a      	beq.n	800359c <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358a:	f043 0202 	orr.w	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f44f 7200 	mov.w	r2, #512	; 0x200
 800359a:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f003 030b 	and.w	r3, r3, #11
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d003      	beq.n	80035b4 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80035ac:	68f9      	ldr	r1, [r7, #12]
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 fb82 	bl	8003cb8 <I2C_ITError>
  }
}
 80035b4:	bf00      	nop
 80035b6:	3718      	adds	r7, #24
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}

080035bc <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035bc:	b480      	push	{r7}
 80035be:	b083      	sub	sp, #12
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035c4:	bf00      	nop
 80035c6:	370c      	adds	r7, #12
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr

080035d0 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035d0:	b480      	push	{r7}
 80035d2:	b083      	sub	sp, #12
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr

080035e4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b083      	sub	sp, #12
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	460b      	mov	r3, r1
 80035ee:	70fb      	strb	r3, [r7, #3]
 80035f0:	4613      	mov	r3, r2
 80035f2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003628:	b480      	push	{r7}
 800362a:	b083      	sub	sp, #12
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003658:	2b01      	cmp	r3, #1
 800365a:	d101      	bne.n	8003660 <I2C_Slave_ISR_IT+0x24>
 800365c:	2302      	movs	r3, #2
 800365e:	e0e1      	b.n	8003824 <I2C_Slave_ISR_IT+0x1e8>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b00      	cmp	r3, #0
 8003670:	d008      	beq.n	8003684 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003678:	2b00      	cmp	r3, #0
 800367a:	d003      	beq.n	8003684 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800367c:	6939      	ldr	r1, [r7, #16]
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f9b4 	bl	80039ec <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	f003 0310 	and.w	r3, r3, #16
 800368a:	2b00      	cmp	r3, #0
 800368c:	d04b      	beq.n	8003726 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003694:	2b00      	cmp	r3, #0
 8003696:	d046      	beq.n	8003726 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800369c:	b29b      	uxth	r3, r3
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d128      	bne.n	80036f4 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b28      	cmp	r3, #40	; 0x28
 80036ac:	d108      	bne.n	80036c0 <I2C_Slave_ISR_IT+0x84>
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036b4:	d104      	bne.n	80036c0 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036b6:	6939      	ldr	r1, [r7, #16]
 80036b8:	68f8      	ldr	r0, [r7, #12]
 80036ba:	f000 faa9 	bl	8003c10 <I2C_ITListenCplt>
 80036be:	e031      	b.n	8003724 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b29      	cmp	r3, #41	; 0x29
 80036ca:	d10e      	bne.n	80036ea <I2C_Slave_ISR_IT+0xae>
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036d2:	d00a      	beq.n	80036ea <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036dc:	68f8      	ldr	r0, [r7, #12]
 80036de:	f000 fc02 	bl	8003ee6 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 f926 	bl	8003934 <I2C_ITSlaveSeqCplt>
 80036e8:	e01c      	b.n	8003724 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2210      	movs	r2, #16
 80036f0:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80036f2:	e08f      	b.n	8003814 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2210      	movs	r2, #16
 80036fa:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003700:	f043 0204 	orr.w	r2, r3, #4
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <I2C_Slave_ISR_IT+0xda>
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003714:	d17e      	bne.n	8003814 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371a:	4619      	mov	r1, r3
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 facb 	bl	8003cb8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003722:	e077      	b.n	8003814 <I2C_Slave_ISR_IT+0x1d8>
 8003724:	e076      	b.n	8003814 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f003 0304 	and.w	r3, r3, #4
 800372c:	2b00      	cmp	r3, #0
 800372e:	d02f      	beq.n	8003790 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003736:	2b00      	cmp	r3, #0
 8003738:	d02a      	beq.n	8003790 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373e:	b29b      	uxth	r3, r3
 8003740:	2b00      	cmp	r3, #0
 8003742:	d018      	beq.n	8003776 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	b2d2      	uxtb	r2, r2
 8003750:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003756:	1c5a      	adds	r2, r3, #1
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	3b01      	subs	r3, #1
 8003770:	b29a      	uxth	r2, r3
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377a:	b29b      	uxth	r3, r3
 800377c:	2b00      	cmp	r3, #0
 800377e:	d14b      	bne.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003786:	d047      	beq.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003788:	68f8      	ldr	r0, [r7, #12]
 800378a:	f000 f8d3 	bl	8003934 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800378e:	e043      	b.n	8003818 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003790:	693b      	ldr	r3, [r7, #16]
 8003792:	f003 0308 	and.w	r3, r3, #8
 8003796:	2b00      	cmp	r3, #0
 8003798:	d009      	beq.n	80037ae <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d004      	beq.n	80037ae <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037a4:	6939      	ldr	r1, [r7, #16]
 80037a6:	68f8      	ldr	r0, [r7, #12]
 80037a8:	f000 f840 	bl	800382c <I2C_ITAddrCplt>
 80037ac:	e035      	b.n	800381a <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d030      	beq.n	800381a <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d02b      	beq.n	800381a <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d018      	beq.n	80037fe <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d0:	781a      	ldrb	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037dc:	1c5a      	adds	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	851a      	strh	r2, [r3, #40]	; 0x28
 80037fc:	e00d      	b.n	800381a <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003804:	d002      	beq.n	800380c <I2C_Slave_ISR_IT+0x1d0>
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d106      	bne.n	800381a <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800380c:	68f8      	ldr	r0, [r7, #12]
 800380e:	f000 f891 	bl	8003934 <I2C_ITSlaveSeqCplt>
 8003812:	e002      	b.n	800381a <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003814:	bf00      	nop
 8003816:	e000      	b.n	800381a <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003818:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003822:	2300      	movs	r3, #0
}
 8003824:	4618      	mov	r0, r3
 8003826:	3718      	adds	r7, #24
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800383c:	b2db      	uxtb	r3, r3
 800383e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003842:	2b28      	cmp	r3, #40	; 0x28
 8003844:	d16a      	bne.n	800391c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	0c1b      	lsrs	r3, r3, #16
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	0c1b      	lsrs	r3, r3, #16
 800385e:	b29b      	uxth	r3, r3
 8003860:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003864:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003872:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	b29b      	uxth	r3, r3
 800387c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003880:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	2b02      	cmp	r3, #2
 8003888:	d138      	bne.n	80038fc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800388a:	897b      	ldrh	r3, [r7, #10]
 800388c:	09db      	lsrs	r3, r3, #7
 800388e:	b29a      	uxth	r2, r3
 8003890:	89bb      	ldrh	r3, [r7, #12]
 8003892:	4053      	eors	r3, r2
 8003894:	b29b      	uxth	r3, r3
 8003896:	f003 0306 	and.w	r3, r3, #6
 800389a:	2b00      	cmp	r3, #0
 800389c:	d11c      	bne.n	80038d8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800389e:	897b      	ldrh	r3, [r7, #10]
 80038a0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b0:	2b02      	cmp	r3, #2
 80038b2:	d13b      	bne.n	800392c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2208      	movs	r2, #8
 80038c0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038ca:	89ba      	ldrh	r2, [r7, #12]
 80038cc:	7bfb      	ldrb	r3, [r7, #15]
 80038ce:	4619      	mov	r1, r3
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fe87 	bl	80035e4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80038d6:	e029      	b.n	800392c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80038d8:	893b      	ldrh	r3, [r7, #8]
 80038da:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f000 fb42 	bl	8003f6a <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80038ee:	89ba      	ldrh	r2, [r7, #12]
 80038f0:	7bfb      	ldrb	r3, [r7, #15]
 80038f2:	4619      	mov	r1, r3
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff fe75 	bl	80035e4 <HAL_I2C_AddrCallback>
}
 80038fa:	e017      	b.n	800392c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80038fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003900:	6878      	ldr	r0, [r7, #4]
 8003902:	f000 fb32 	bl	8003f6a <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800390e:	89ba      	ldrh	r2, [r7, #12]
 8003910:	7bfb      	ldrb	r3, [r7, #15]
 8003912:	4619      	mov	r1, r3
 8003914:	6878      	ldr	r0, [r7, #4]
 8003916:	f7ff fe65 	bl	80035e4 <HAL_I2C_AddrCallback>
}
 800391a:	e007      	b.n	800392c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	2208      	movs	r2, #8
 8003922:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800392c:	bf00      	nop
 800392e:	3710      	adds	r7, #16
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	e00c      	b.n	8003982 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003980:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003988:	b2db      	uxtb	r3, r3
 800398a:	2b29      	cmp	r3, #41	; 0x29
 800398c:	d112      	bne.n	80039b4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2228      	movs	r2, #40	; 0x28
 8003992:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2221      	movs	r2, #33	; 0x21
 800399a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800399c:	2101      	movs	r1, #1
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 fae3 	bl	8003f6a <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7ff fe05 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80039b2:	e017      	b.n	80039e4 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b2a      	cmp	r3, #42	; 0x2a
 80039be:	d111      	bne.n	80039e4 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2228      	movs	r2, #40	; 0x28
 80039c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2222      	movs	r2, #34	; 0x22
 80039cc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80039ce:	2102      	movs	r1, #2
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f000 faca 	bl	8003f6a <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f7ff fdf6 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
}
 80039e4:	bf00      	nop
 80039e6:	3710      	adds	r7, #16
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b086      	sub	sp, #24
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a08:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2220      	movs	r2, #32
 8003a10:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003a12:	7bfb      	ldrb	r3, [r7, #15]
 8003a14:	2b21      	cmp	r3, #33	; 0x21
 8003a16:	d002      	beq.n	8003a1e <I2C_ITSlaveCplt+0x32>
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	2b29      	cmp	r3, #41	; 0x29
 8003a1c:	d108      	bne.n	8003a30 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003a1e:	f248 0101 	movw	r1, #32769	; 0x8001
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f000 faa1 	bl	8003f6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2221      	movs	r2, #33	; 0x21
 8003a2c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a2e:	e019      	b.n	8003a64 <I2C_ITSlaveCplt+0x78>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003a30:	7bfb      	ldrb	r3, [r7, #15]
 8003a32:	2b22      	cmp	r3, #34	; 0x22
 8003a34:	d002      	beq.n	8003a3c <I2C_ITSlaveCplt+0x50>
 8003a36:	7bfb      	ldrb	r3, [r7, #15]
 8003a38:	2b2a      	cmp	r3, #42	; 0x2a
 8003a3a:	d108      	bne.n	8003a4e <I2C_ITSlaveCplt+0x62>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003a3c:	f248 0102 	movw	r1, #32770	; 0x8002
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f000 fa92 	bl	8003f6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2222      	movs	r2, #34	; 0x22
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003a4c:	e00a      	b.n	8003a64 <I2C_ITSlaveCplt+0x78>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8003a4e:	7bfb      	ldrb	r3, [r7, #15]
 8003a50:	2b28      	cmp	r3, #40	; 0x28
 8003a52:	d107      	bne.n	8003a64 <I2C_ITSlaveCplt+0x78>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8003a54:	f248 0103 	movw	r1, #32771	; 0x8003
 8003a58:	6878      	ldr	r0, [r7, #4]
 8003a5a:	f000 fa86 	bl	8003f6a <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a72:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	4b62      	ldr	r3, [pc, #392]	; (8003c08 <I2C_ITSlaveCplt+0x21c>)
 8003a80:	400b      	ands	r3, r1
 8003a82:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa2e 	bl	8003ee6 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d013      	beq.n	8003abc <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003aa2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d01f      	beq.n	8003aec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003aba:	e017      	b.n	8003aec <I2C_ITSlaveCplt+0x100>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d012      	beq.n	8003aec <I2C_ITSlaveCplt+0x100>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ad4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d006      	beq.n	8003aec <I2C_ITSlaveCplt+0x100>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d020      	beq.n	8003b38 <I2C_ITSlaveCplt+0x14c>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	f023 0304 	bic.w	r3, r3, #4
 8003afc:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b08:	b2d2      	uxtb	r2, r2
 8003b0a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b10:	1c5a      	adds	r2, r3, #1
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00c      	beq.n	8003b38 <I2C_ITSlaveCplt+0x14c>
    {
      hi2c->XferSize--;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b29a      	uxth	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	3b01      	subs	r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d005      	beq.n	8003b4e <I2C_ITSlaveCplt+0x162>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b46:	f043 0204 	orr.w	r2, r3, #4
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d010      	beq.n	8003b86 <I2C_ITSlaveCplt+0x19a>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b68:	4619      	mov	r1, r3
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 f8a4 	bl	8003cb8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	2b28      	cmp	r3, #40	; 0x28
 8003b7a:	d141      	bne.n	8003c00 <I2C_ITSlaveCplt+0x214>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003b7c:	6979      	ldr	r1, [r7, #20]
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 f846 	bl	8003c10 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b84:	e03c      	b.n	8003c00 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b8e:	d014      	beq.n	8003bba <I2C_ITSlaveCplt+0x1ce>
    I2C_ITSlaveSeqCplt(hi2c);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f7ff fecf 	bl	8003934 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a1c      	ldr	r2, [pc, #112]	; (8003c0c <I2C_ITSlaveCplt+0x220>)
 8003b9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2220      	movs	r2, #32
 8003ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bb2:	6878      	ldr	r0, [r7, #4]
 8003bb4:	f7ff fd24 	bl	8003600 <HAL_I2C_ListenCpltCallback>
}
 8003bb8:	e022      	b.n	8003c00 <I2C_ITSlaveCplt+0x214>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	2b22      	cmp	r3, #34	; 0x22
 8003bc4:	d10e      	bne.n	8003be4 <I2C_ITSlaveCplt+0x1f8>
    hi2c->State = HAL_I2C_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2220      	movs	r2, #32
 8003bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7ff fcf7 	bl	80035d0 <HAL_I2C_SlaveRxCpltCallback>
}
 8003be2:	e00d      	b.n	8003c00 <I2C_ITSlaveCplt+0x214>
    hi2c->State = HAL_I2C_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2220      	movs	r2, #32
 8003be8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7ff fcde 	bl	80035bc <HAL_I2C_SlaveTxCpltCallback>
}
 8003c00:	bf00      	nop
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	fe00e800 	.word	0xfe00e800
 8003c0c:	ffff0000 	.word	0xffff0000

08003c10 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b082      	sub	sp, #8
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a25      	ldr	r2, [pc, #148]	; (8003cb4 <I2C_ITListenCplt+0xa4>)
 8003c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	f003 0304 	and.w	r3, r3, #4
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d022      	beq.n	8003c8c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c50:	b2d2      	uxtb	r2, r2
 8003c52:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c58:	1c5a      	adds	r2, r3, #1
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d012      	beq.n	8003c8c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c76:	b29b      	uxth	r3, r3
 8003c78:	3b01      	subs	r3, #1
 8003c7a:	b29a      	uxth	r2, r3
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c84:	f043 0204 	orr.w	r2, r3, #4
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003c8c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f96a 	bl	8003f6a <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff fcaa 	bl	8003600 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	ffff0000 	.word	0xffff0000

08003cb8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc8:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2200      	movs	r2, #0
 8003cce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a6d      	ldr	r2, [pc, #436]	; (8003e8c <I2C_ITError+0x1d4>)
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	431a      	orrs	r2, r3
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003cea:	7bfb      	ldrb	r3, [r7, #15]
 8003cec:	2b28      	cmp	r3, #40	; 0x28
 8003cee:	d005      	beq.n	8003cfc <I2C_ITError+0x44>
 8003cf0:	7bfb      	ldrb	r3, [r7, #15]
 8003cf2:	2b29      	cmp	r3, #41	; 0x29
 8003cf4:	d002      	beq.n	8003cfc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003cf6:	7bfb      	ldrb	r3, [r7, #15]
 8003cf8:	2b2a      	cmp	r3, #42	; 0x2a
 8003cfa:	d10b      	bne.n	8003d14 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003cfc:	2103      	movs	r1, #3
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f933 	bl	8003f6a <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2228      	movs	r2, #40	; 0x28
 8003d08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	4a60      	ldr	r2, [pc, #384]	; (8003e90 <I2C_ITError+0x1d8>)
 8003d10:	635a      	str	r2, [r3, #52]	; 0x34
 8003d12:	e030      	b.n	8003d76 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d14:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d18:	6878      	ldr	r0, [r7, #4]
 8003d1a:	f000 f926 	bl	8003f6a <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f8e1 	bl	8003ee6 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d2a:	b2db      	uxtb	r3, r3
 8003d2c:	2b60      	cmp	r3, #96	; 0x60
 8003d2e:	d01f      	beq.n	8003d70 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2220      	movs	r2, #32
 8003d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0320 	and.w	r3, r3, #32
 8003d42:	2b20      	cmp	r3, #32
 8003d44:	d114      	bne.n	8003d70 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b10      	cmp	r3, #16
 8003d52:	d109      	bne.n	8003d68 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f043 0204 	orr.w	r2, r3, #4
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2220      	movs	r2, #32
 8003d6e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d039      	beq.n	8003df8 <I2C_ITError+0x140>
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	2b11      	cmp	r3, #17
 8003d88:	d002      	beq.n	8003d90 <I2C_ITError+0xd8>
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2b21      	cmp	r3, #33	; 0x21
 8003d8e:	d133      	bne.n	8003df8 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d9e:	d107      	bne.n	8003db0 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003dae:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db4:	4618      	mov	r0, r3
 8003db6:	f7ff f931 	bl	800301c <HAL_DMA_GetState>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b01      	cmp	r3, #1
 8003dbe:	d017      	beq.n	8003df0 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dc4:	4a33      	ldr	r2, [pc, #204]	; (8003e94 <I2C_ITError+0x1dc>)
 8003dc6:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7ff f831 	bl	8002e3c <HAL_DMA_Abort_IT>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d04d      	beq.n	8003e7c <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dea:	4610      	mov	r0, r2
 8003dec:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003dee:	e045      	b.n	8003e7c <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f851 	bl	8003e98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003df6:	e041      	b.n	8003e7c <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d039      	beq.n	8003e74 <I2C_ITError+0x1bc>
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	2b12      	cmp	r3, #18
 8003e04:	d002      	beq.n	8003e0c <I2C_ITError+0x154>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b22      	cmp	r3, #34	; 0x22
 8003e0a:	d133      	bne.n	8003e74 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e1a:	d107      	bne.n	8003e2c <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e2a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff f8f3 	bl	800301c <HAL_DMA_GetState>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d017      	beq.n	8003e6c <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e40:	4a14      	ldr	r2, [pc, #80]	; (8003e94 <I2C_ITError+0x1dc>)
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e50:	4618      	mov	r0, r3
 8003e52:	f7fe fff3 	bl	8002e3c <HAL_DMA_Abort_IT>
 8003e56:	4603      	mov	r3, r0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d011      	beq.n	8003e80 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e66:	4610      	mov	r0, r2
 8003e68:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e6a:	e009      	b.n	8003e80 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f813 	bl	8003e98 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e72:	e005      	b.n	8003e80 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f80f 	bl	8003e98 <I2C_TreatErrorCallback>
  }
}
 8003e7a:	e002      	b.n	8003e82 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e7c:	bf00      	nop
 8003e7e:	e000      	b.n	8003e82 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003e80:	bf00      	nop
}
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	ffff0000 	.word	0xffff0000
 8003e90:	0800363d 	.word	0x0800363d
 8003e94:	08003f2f 	.word	0x08003f2f

08003e98 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	2b60      	cmp	r3, #96	; 0x60
 8003eaa:	d10e      	bne.n	8003eca <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff fbb0 	bl	8003628 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003ec8:	e009      	b.n	8003ede <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f7ff fb9b 	bl	8003614 <HAL_I2C_ErrorCallback>
}
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}

08003ee6 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003ee6:	b480      	push	{r7}
 8003ee8:	b083      	sub	sp, #12
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	699b      	ldr	r3, [r3, #24]
 8003ef4:	f003 0302 	and.w	r3, r3, #2
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d103      	bne.n	8003f04 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2200      	movs	r2, #0
 8003f02:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	699b      	ldr	r3, [r3, #24]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d007      	beq.n	8003f22 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	699a      	ldr	r2, [r3, #24]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	619a      	str	r2, [r3, #24]
  }
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d003      	beq.n	8003f4c <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f48:	2200      	movs	r2, #0
 8003f4a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f58:	2200      	movs	r2, #0
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f7ff ff9b 	bl	8003e98 <I2C_TreatErrorCallback>
}
 8003f62:	bf00      	nop
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003f6a:	b480      	push	{r7}
 8003f6c:	b085      	sub	sp, #20
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	6078      	str	r0, [r7, #4]
 8003f72:	460b      	mov	r3, r1
 8003f74:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003f7a:	887b      	ldrh	r3, [r7, #2]
 8003f7c:	f003 0301 	and.w	r3, r3, #1
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d00f      	beq.n	8003fa4 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003f8a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f92:	b2db      	uxtb	r3, r3
 8003f94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003f98:	2b28      	cmp	r3, #40	; 0x28
 8003f9a:	d003      	beq.n	8003fa4 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fa2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003fa4:	887b      	ldrh	r3, [r7, #2]
 8003fa6:	f003 0302 	and.w	r3, r3, #2
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d00f      	beq.n	8003fce <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003fb4:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003fc2:	2b28      	cmp	r3, #40	; 0x28
 8003fc4:	d003      	beq.n	8003fce <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003fcc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003fce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	da03      	bge.n	8003fde <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003fdc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003fde:	887b      	ldrh	r3, [r7, #2]
 8003fe0:	2b10      	cmp	r3, #16
 8003fe2:	d103      	bne.n	8003fec <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003fea:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003fec:	887b      	ldrh	r3, [r7, #2]
 8003fee:	2b20      	cmp	r3, #32
 8003ff0:	d103      	bne.n	8003ffa <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f043 0320 	orr.w	r3, r3, #32
 8003ff8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d103      	bne.n	8004008 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004006:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6819      	ldr	r1, [r3, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	43da      	mvns	r2, r3
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
}
 800401a:	bf00      	nop
 800401c:	3714      	adds	r7, #20
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr

08004026 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004026:	b480      	push	{r7}
 8004028:	b083      	sub	sp, #12
 800402a:	af00      	add	r7, sp, #0
 800402c:	6078      	str	r0, [r7, #4]
 800402e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004036:	b2db      	uxtb	r3, r3
 8004038:	2b20      	cmp	r3, #32
 800403a:	d138      	bne.n	80040ae <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004046:	2302      	movs	r3, #2
 8004048:	e032      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2201      	movs	r2, #1
 800404e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2224      	movs	r2, #36	; 0x24
 8004056:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f022 0201 	bic.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004078:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f042 0201 	orr.w	r2, r2, #1
 8004098:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2220      	movs	r2, #32
 800409e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e000      	b.n	80040b0 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80040ae:	2302      	movs	r3, #2
  }
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b20      	cmp	r3, #32
 80040d0:	d139      	bne.n	8004146 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d101      	bne.n	80040e0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80040dc:	2302      	movs	r3, #2
 80040de:	e033      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2224      	movs	r2, #36	; 0x24
 80040ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f022 0201 	bic.w	r2, r2, #1
 80040fe:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800410e:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	021b      	lsls	r3, r3, #8
 8004114:	68fa      	ldr	r2, [r7, #12]
 8004116:	4313      	orrs	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f042 0201 	orr.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2220      	movs	r2, #32
 8004136:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004142:	2300      	movs	r3, #0
 8004144:	e000      	b.n	8004148 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004146:	2302      	movs	r3, #2
  }
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004154:	b480      	push	{r7}
 8004156:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800415e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004162:	6013      	str	r3, [r2, #0]
}
 8004164:	bf00      	nop
 8004166:	46bd      	mov	sp, r7
 8004168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40007000 	.word	0x40007000

08004174 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004174:	b480      	push	{r7}
 8004176:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004178:	4b04      	ldr	r3, [pc, #16]	; (800418c <HAL_PWREx_GetVoltageRange+0x18>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004180:	4618      	mov	r0, r3
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
 800418a:	bf00      	nop
 800418c:	40007000 	.word	0x40007000

08004190 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800419e:	d130      	bne.n	8004202 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041a0:	4b23      	ldr	r3, [pc, #140]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041ac:	d038      	beq.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041ae:	4b20      	ldr	r3, [pc, #128]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041b6:	4a1e      	ldr	r2, [pc, #120]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041be:	4b1d      	ldr	r3, [pc, #116]	; (8004234 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2232      	movs	r2, #50	; 0x32
 80041c4:	fb02 f303 	mul.w	r3, r2, r3
 80041c8:	4a1b      	ldr	r2, [pc, #108]	; (8004238 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	0c9b      	lsrs	r3, r3, #18
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041d4:	e002      	b.n	80041dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	3b01      	subs	r3, #1
 80041da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80041dc:	4b14      	ldr	r3, [pc, #80]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041e8:	d102      	bne.n	80041f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1f2      	bne.n	80041d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80041f0:	4b0f      	ldr	r3, [pc, #60]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f2:	695b      	ldr	r3, [r3, #20]
 80041f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041fc:	d110      	bne.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80041fe:	2303      	movs	r3, #3
 8004200:	e00f      	b.n	8004222 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004202:	4b0b      	ldr	r3, [pc, #44]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800420a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800420e:	d007      	beq.n	8004220 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004210:	4b07      	ldr	r3, [pc, #28]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004218:	4a05      	ldr	r2, [pc, #20]	; (8004230 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800421a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800421e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3714      	adds	r7, #20
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40007000 	.word	0x40007000
 8004234:	20000004 	.word	0x20000004
 8004238:	431bde83 	.word	0x431bde83

0800423c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b088      	sub	sp, #32
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d102      	bne.n	8004250 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f000 bc02 	b.w	8004a54 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004250:	4b96      	ldr	r3, [pc, #600]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f003 030c 	and.w	r3, r3, #12
 8004258:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800425a:	4b94      	ldr	r3, [pc, #592]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0303 	and.w	r3, r3, #3
 8004262:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	f000 80e4 	beq.w	800443a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d007      	beq.n	8004288 <HAL_RCC_OscConfig+0x4c>
 8004278:	69bb      	ldr	r3, [r7, #24]
 800427a:	2b0c      	cmp	r3, #12
 800427c:	f040 808b 	bne.w	8004396 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	f040 8087 	bne.w	8004396 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004288:	4b88      	ldr	r3, [pc, #544]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d005      	beq.n	80042a0 <HAL_RCC_OscConfig+0x64>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	699b      	ldr	r3, [r3, #24]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e3d9      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6a1a      	ldr	r2, [r3, #32]
 80042a4:	4b81      	ldr	r3, [pc, #516]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d004      	beq.n	80042ba <HAL_RCC_OscConfig+0x7e>
 80042b0:	4b7e      	ldr	r3, [pc, #504]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042b8:	e005      	b.n	80042c6 <HAL_RCC_OscConfig+0x8a>
 80042ba:	4b7c      	ldr	r3, [pc, #496]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042c0:	091b      	lsrs	r3, r3, #4
 80042c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d223      	bcs.n	8004312 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a1b      	ldr	r3, [r3, #32]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 fd8c 	bl	8004dec <RCC_SetFlashLatencyFromMSIRange>
 80042d4:	4603      	mov	r3, r0
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e3ba      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042de:	4b73      	ldr	r3, [pc, #460]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a72      	ldr	r2, [pc, #456]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b70      	ldr	r3, [pc, #448]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	496d      	ldr	r1, [pc, #436]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fc:	4b6b      	ldr	r3, [pc, #428]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	4968      	ldr	r1, [pc, #416]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]
 8004310:	e025      	b.n	800435e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004312:	4b66      	ldr	r3, [pc, #408]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a65      	ldr	r2, [pc, #404]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004318:	f043 0308 	orr.w	r3, r3, #8
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	4b63      	ldr	r3, [pc, #396]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	4960      	ldr	r1, [pc, #384]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800432c:	4313      	orrs	r3, r2
 800432e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004330:	4b5e      	ldr	r3, [pc, #376]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	495b      	ldr	r1, [pc, #364]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004340:	4313      	orrs	r3, r2
 8004342:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004344:	69bb      	ldr	r3, [r7, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d109      	bne.n	800435e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6a1b      	ldr	r3, [r3, #32]
 800434e:	4618      	mov	r0, r3
 8004350:	f000 fd4c 	bl	8004dec <RCC_SetFlashLatencyFromMSIRange>
 8004354:	4603      	mov	r3, r0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d001      	beq.n	800435e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e37a      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800435e:	f000 fc81 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004362:	4602      	mov	r2, r0
 8004364:	4b51      	ldr	r3, [pc, #324]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	091b      	lsrs	r3, r3, #4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	4950      	ldr	r1, [pc, #320]	; (80044b0 <HAL_RCC_OscConfig+0x274>)
 8004370:	5ccb      	ldrb	r3, [r1, r3]
 8004372:	f003 031f 	and.w	r3, r3, #31
 8004376:	fa22 f303 	lsr.w	r3, r2, r3
 800437a:	4a4e      	ldr	r2, [pc, #312]	; (80044b4 <HAL_RCC_OscConfig+0x278>)
 800437c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800437e:	4b4e      	ldr	r3, [pc, #312]	; (80044b8 <HAL_RCC_OscConfig+0x27c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4618      	mov	r0, r3
 8004384:	f7fc ff14 	bl	80011b0 <HAL_InitTick>
 8004388:	4603      	mov	r3, r0
 800438a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d052      	beq.n	8004438 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004392:	7bfb      	ldrb	r3, [r7, #15]
 8004394:	e35e      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d032      	beq.n	8004404 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800439e:	4b43      	ldr	r3, [pc, #268]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4a42      	ldr	r2, [pc, #264]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043aa:	f7fc ff51 	bl	8001250 <HAL_GetTick>
 80043ae:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043b0:	e008      	b.n	80043c4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043b2:	f7fc ff4d 	bl	8001250 <HAL_GetTick>
 80043b6:	4602      	mov	r2, r0
 80043b8:	693b      	ldr	r3, [r7, #16]
 80043ba:	1ad3      	subs	r3, r2, r3
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d901      	bls.n	80043c4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80043c0:	2303      	movs	r3, #3
 80043c2:	e347      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043c4:	4b39      	ldr	r3, [pc, #228]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0302 	and.w	r3, r3, #2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d0f0      	beq.n	80043b2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043d0:	4b36      	ldr	r3, [pc, #216]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a35      	ldr	r2, [pc, #212]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043d6:	f043 0308 	orr.w	r3, r3, #8
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	4b33      	ldr	r3, [pc, #204]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	4930      	ldr	r1, [pc, #192]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ee:	4b2f      	ldr	r3, [pc, #188]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	69db      	ldr	r3, [r3, #28]
 80043fa:	021b      	lsls	r3, r3, #8
 80043fc:	492b      	ldr	r1, [pc, #172]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	604b      	str	r3, [r1, #4]
 8004402:	e01a      	b.n	800443a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004404:	4b29      	ldr	r3, [pc, #164]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a28      	ldr	r2, [pc, #160]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800440a:	f023 0301 	bic.w	r3, r3, #1
 800440e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004410:	f7fc ff1e 	bl	8001250 <HAL_GetTick>
 8004414:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004416:	e008      	b.n	800442a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004418:	f7fc ff1a 	bl	8001250 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	2b02      	cmp	r3, #2
 8004424:	d901      	bls.n	800442a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004426:	2303      	movs	r3, #3
 8004428:	e314      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800442a:	4b20      	ldr	r3, [pc, #128]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	2b00      	cmp	r3, #0
 8004434:	d1f0      	bne.n	8004418 <HAL_RCC_OscConfig+0x1dc>
 8004436:	e000      	b.n	800443a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004438:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d073      	beq.n	800452e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004446:	69bb      	ldr	r3, [r7, #24]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d005      	beq.n	8004458 <HAL_RCC_OscConfig+0x21c>
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	2b0c      	cmp	r3, #12
 8004450:	d10e      	bne.n	8004470 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	2b03      	cmp	r3, #3
 8004456:	d10b      	bne.n	8004470 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004458:	4b14      	ldr	r3, [pc, #80]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004460:	2b00      	cmp	r3, #0
 8004462:	d063      	beq.n	800452c <HAL_RCC_OscConfig+0x2f0>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d15f      	bne.n	800452c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e2f1      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004478:	d106      	bne.n	8004488 <HAL_RCC_OscConfig+0x24c>
 800447a:	4b0c      	ldr	r3, [pc, #48]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a0b      	ldr	r2, [pc, #44]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004484:	6013      	str	r3, [r2, #0]
 8004486:	e025      	b.n	80044d4 <HAL_RCC_OscConfig+0x298>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004490:	d114      	bne.n	80044bc <HAL_RCC_OscConfig+0x280>
 8004492:	4b06      	ldr	r3, [pc, #24]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a05      	ldr	r2, [pc, #20]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 8004498:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b03      	ldr	r3, [pc, #12]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a02      	ldr	r2, [pc, #8]	; (80044ac <HAL_RCC_OscConfig+0x270>)
 80044a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a8:	6013      	str	r3, [r2, #0]
 80044aa:	e013      	b.n	80044d4 <HAL_RCC_OscConfig+0x298>
 80044ac:	40021000 	.word	0x40021000
 80044b0:	08006c8c 	.word	0x08006c8c
 80044b4:	20000004 	.word	0x20000004
 80044b8:	20000008 	.word	0x20000008
 80044bc:	4ba0      	ldr	r3, [pc, #640]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a9f      	ldr	r2, [pc, #636]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044c6:	6013      	str	r3, [r2, #0]
 80044c8:	4b9d      	ldr	r3, [pc, #628]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a9c      	ldr	r2, [pc, #624]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d013      	beq.n	8004504 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fc feb8 	bl	8001250 <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044e4:	f7fc feb4 	bl	8001250 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b64      	cmp	r3, #100	; 0x64
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e2ae      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f6:	4b92      	ldr	r3, [pc, #584]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d0f0      	beq.n	80044e4 <HAL_RCC_OscConfig+0x2a8>
 8004502:	e014      	b.n	800452e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fc fea4 	bl	8001250 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800450c:	f7fc fea0 	bl	8001250 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e29a      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800451e:	4b88      	ldr	r3, [pc, #544]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x2d0>
 800452a:	e000      	b.n	800452e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800452c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0302 	and.w	r3, r3, #2
 8004536:	2b00      	cmp	r3, #0
 8004538:	d060      	beq.n	80045fc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800453a:	69bb      	ldr	r3, [r7, #24]
 800453c:	2b04      	cmp	r3, #4
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x310>
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	2b0c      	cmp	r3, #12
 8004544:	d119      	bne.n	800457a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b02      	cmp	r3, #2
 800454a:	d116      	bne.n	800457a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800454c:	4b7c      	ldr	r3, [pc, #496]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_OscConfig+0x328>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e277      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004564:	4b76      	ldr	r3, [pc, #472]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	061b      	lsls	r3, r3, #24
 8004572:	4973      	ldr	r1, [pc, #460]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004574:	4313      	orrs	r3, r2
 8004576:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004578:	e040      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d023      	beq.n	80045ca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004582:	4b6f      	ldr	r3, [pc, #444]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a6e      	ldr	r2, [pc, #440]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458e:	f7fc fe5f 	bl	8001250 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004594:	e008      	b.n	80045a8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004596:	f7fc fe5b 	bl	8001250 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	2b02      	cmp	r3, #2
 80045a2:	d901      	bls.n	80045a8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	e255      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045a8:	4b65      	ldr	r3, [pc, #404]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d0f0      	beq.n	8004596 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045b4:	4b62      	ldr	r3, [pc, #392]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	061b      	lsls	r3, r3, #24
 80045c2:	495f      	ldr	r1, [pc, #380]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	604b      	str	r3, [r1, #4]
 80045c8:	e018      	b.n	80045fc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045ca:	4b5d      	ldr	r3, [pc, #372]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a5c      	ldr	r2, [pc, #368]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7fc fe3b 	bl	8001250 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7fc fe37 	bl	8001250 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e231      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045f0:	4b53      	ldr	r3, [pc, #332]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d1f0      	bne.n	80045de <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d03c      	beq.n	8004682 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d01c      	beq.n	800464a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004610:	4b4b      	ldr	r3, [pc, #300]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004616:	4a4a      	ldr	r2, [pc, #296]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004620:	f7fc fe16 	bl	8001250 <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004626:	e008      	b.n	800463a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004628:	f7fc fe12 	bl	8001250 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d901      	bls.n	800463a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004636:	2303      	movs	r3, #3
 8004638:	e20c      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800463a:	4b41      	ldr	r3, [pc, #260]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800463c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d0ef      	beq.n	8004628 <HAL_RCC_OscConfig+0x3ec>
 8004648:	e01b      	b.n	8004682 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800464a:	4b3d      	ldr	r3, [pc, #244]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800464c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004650:	4a3b      	ldr	r2, [pc, #236]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004652:	f023 0301 	bic.w	r3, r3, #1
 8004656:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800465a:	f7fc fdf9 	bl	8001250 <HAL_GetTick>
 800465e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004660:	e008      	b.n	8004674 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004662:	f7fc fdf5 	bl	8001250 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b02      	cmp	r3, #2
 800466e:	d901      	bls.n	8004674 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004670:	2303      	movs	r3, #3
 8004672:	e1ef      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004674:	4b32      	ldr	r3, [pc, #200]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004676:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800467a:	f003 0302 	and.w	r3, r3, #2
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1ef      	bne.n	8004662 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0304 	and.w	r3, r3, #4
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 80a6 	beq.w	80047dc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004690:	2300      	movs	r3, #0
 8004692:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004694:	4b2a      	ldr	r3, [pc, #168]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10d      	bne.n	80046bc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046a0:	4b27      	ldr	r3, [pc, #156]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a4:	4a26      	ldr	r2, [pc, #152]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046aa:	6593      	str	r3, [r2, #88]	; 0x58
 80046ac:	4b24      	ldr	r3, [pc, #144]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 80046ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046b8:	2301      	movs	r3, #1
 80046ba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046bc:	4b21      	ldr	r3, [pc, #132]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d118      	bne.n	80046fa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046c8:	4b1e      	ldr	r3, [pc, #120]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a1d      	ldr	r2, [pc, #116]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046d4:	f7fc fdbc 	bl	8001250 <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046da:	e008      	b.n	80046ee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046dc:	f7fc fdb8 	bl	8001250 <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d901      	bls.n	80046ee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e1b2      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ee:	4b15      	ldr	r3, [pc, #84]	; (8004744 <HAL_RCC_OscConfig+0x508>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d0f0      	beq.n	80046dc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d108      	bne.n	8004714 <HAL_RCC_OscConfig+0x4d8>
 8004702:	4b0f      	ldr	r3, [pc, #60]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004708:	4a0d      	ldr	r2, [pc, #52]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800470a:	f043 0301 	orr.w	r3, r3, #1
 800470e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004712:	e029      	b.n	8004768 <HAL_RCC_OscConfig+0x52c>
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	2b05      	cmp	r3, #5
 800471a:	d115      	bne.n	8004748 <HAL_RCC_OscConfig+0x50c>
 800471c:	4b08      	ldr	r3, [pc, #32]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800471e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004722:	4a07      	ldr	r2, [pc, #28]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004724:	f043 0304 	orr.w	r3, r3, #4
 8004728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800472c:	4b04      	ldr	r3, [pc, #16]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 800472e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004732:	4a03      	ldr	r2, [pc, #12]	; (8004740 <HAL_RCC_OscConfig+0x504>)
 8004734:	f043 0301 	orr.w	r3, r3, #1
 8004738:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800473c:	e014      	b.n	8004768 <HAL_RCC_OscConfig+0x52c>
 800473e:	bf00      	nop
 8004740:	40021000 	.word	0x40021000
 8004744:	40007000 	.word	0x40007000
 8004748:	4b9a      	ldr	r3, [pc, #616]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800474a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800474e:	4a99      	ldr	r2, [pc, #612]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004758:	4b96      	ldr	r3, [pc, #600]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	4a95      	ldr	r2, [pc, #596]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004760:	f023 0304 	bic.w	r3, r3, #4
 8004764:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d016      	beq.n	800479e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004770:	f7fc fd6e 	bl	8001250 <HAL_GetTick>
 8004774:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004776:	e00a      	b.n	800478e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004778:	f7fc fd6a 	bl	8001250 <HAL_GetTick>
 800477c:	4602      	mov	r2, r0
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad3      	subs	r3, r2, r3
 8004782:	f241 3288 	movw	r2, #5000	; 0x1388
 8004786:	4293      	cmp	r3, r2
 8004788:	d901      	bls.n	800478e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	e162      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800478e:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ed      	beq.n	8004778 <HAL_RCC_OscConfig+0x53c>
 800479c:	e015      	b.n	80047ca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479e:	f7fc fd57 	bl	8001250 <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a4:	e00a      	b.n	80047bc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047a6:	f7fc fd53 	bl	8001250 <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d901      	bls.n	80047bc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80047b8:	2303      	movs	r3, #3
 80047ba:	e14b      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047bc:	4b7d      	ldr	r3, [pc, #500]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80047be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c2:	f003 0302 	and.w	r3, r3, #2
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ed      	bne.n	80047a6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ca:	7ffb      	ldrb	r3, [r7, #31]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d105      	bne.n	80047dc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d0:	4b78      	ldr	r3, [pc, #480]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	4a77      	ldr	r2, [pc, #476]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80047d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047da:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0320 	and.w	r3, r3, #32
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d03c      	beq.n	8004862 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01c      	beq.n	800482a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047f0:	4b70      	ldr	r3, [pc, #448]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80047f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047f6:	4a6f      	ldr	r2, [pc, #444]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80047f8:	f043 0301 	orr.w	r3, r3, #1
 80047fc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004800:	f7fc fd26 	bl	8001250 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004806:	e008      	b.n	800481a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004808:	f7fc fd22 	bl	8001250 <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b02      	cmp	r3, #2
 8004814:	d901      	bls.n	800481a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e11c      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800481a:	4b66      	ldr	r3, [pc, #408]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800481c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ef      	beq.n	8004808 <HAL_RCC_OscConfig+0x5cc>
 8004828:	e01b      	b.n	8004862 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800482a:	4b62      	ldr	r3, [pc, #392]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800482c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004830:	4a60      	ldr	r2, [pc, #384]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004832:	f023 0301 	bic.w	r3, r3, #1
 8004836:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800483a:	f7fc fd09 	bl	8001250 <HAL_GetTick>
 800483e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004840:	e008      	b.n	8004854 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004842:	f7fc fd05 	bl	8001250 <HAL_GetTick>
 8004846:	4602      	mov	r2, r0
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	1ad3      	subs	r3, r2, r3
 800484c:	2b02      	cmp	r3, #2
 800484e:	d901      	bls.n	8004854 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004850:	2303      	movs	r3, #3
 8004852:	e0ff      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004854:	4b57      	ldr	r3, [pc, #348]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004856:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800485a:	f003 0302 	and.w	r3, r3, #2
 800485e:	2b00      	cmp	r3, #0
 8004860:	d1ef      	bne.n	8004842 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004866:	2b00      	cmp	r3, #0
 8004868:	f000 80f3 	beq.w	8004a52 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	2b02      	cmp	r3, #2
 8004872:	f040 80c9 	bne.w	8004a08 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004876:	4b4f      	ldr	r3, [pc, #316]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f003 0203 	and.w	r2, r3, #3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d12c      	bne.n	80048e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004894:	3b01      	subs	r3, #1
 8004896:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d123      	bne.n	80048e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d11b      	bne.n	80048e4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d113      	bne.n	80048e4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048c6:	085b      	lsrs	r3, r3, #1
 80048c8:	3b01      	subs	r3, #1
 80048ca:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d109      	bne.n	80048e4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	085b      	lsrs	r3, r3, #1
 80048dc:	3b01      	subs	r3, #1
 80048de:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d06b      	beq.n	80049bc <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	2b0c      	cmp	r3, #12
 80048e8:	d062      	beq.n	80049b0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048ea:	4b32      	ldr	r3, [pc, #200]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d001      	beq.n	80048fa <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e0ac      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048fa:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a2d      	ldr	r2, [pc, #180]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004904:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004906:	f7fc fca3 	bl	8001250 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490e:	f7fc fc9f 	bl	8001250 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e099      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004920:	4b24      	ldr	r3, [pc, #144]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f0      	bne.n	800490e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800492c:	4b21      	ldr	r3, [pc, #132]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800492e:	68da      	ldr	r2, [r3, #12]
 8004930:	4b21      	ldr	r3, [pc, #132]	; (80049b8 <HAL_RCC_OscConfig+0x77c>)
 8004932:	4013      	ands	r3, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800493c:	3a01      	subs	r2, #1
 800493e:	0112      	lsls	r2, r2, #4
 8004940:	4311      	orrs	r1, r2
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004946:	0212      	lsls	r2, r2, #8
 8004948:	4311      	orrs	r1, r2
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800494e:	0852      	lsrs	r2, r2, #1
 8004950:	3a01      	subs	r2, #1
 8004952:	0552      	lsls	r2, r2, #21
 8004954:	4311      	orrs	r1, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800495a:	0852      	lsrs	r2, r2, #1
 800495c:	3a01      	subs	r2, #1
 800495e:	0652      	lsls	r2, r2, #25
 8004960:	4311      	orrs	r1, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004966:	06d2      	lsls	r2, r2, #27
 8004968:	430a      	orrs	r2, r1
 800496a:	4912      	ldr	r1, [pc, #72]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800496c:	4313      	orrs	r3, r2
 800496e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004970:	4b10      	ldr	r3, [pc, #64]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a0f      	ldr	r2, [pc, #60]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800497a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800497c:	4b0d      	ldr	r3, [pc, #52]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	4a0c      	ldr	r2, [pc, #48]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 8004982:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004986:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004988:	f7fc fc62 	bl	8001250 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fc fc5e 	bl	8001250 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e058      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049a2:	4b04      	ldr	r3, [pc, #16]	; (80049b4 <HAL_RCC_OscConfig+0x778>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049ae:	e050      	b.n	8004a52 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80049b0:	2301      	movs	r3, #1
 80049b2:	e04f      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
 80049b4:	40021000 	.word	0x40021000
 80049b8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049bc:	4b27      	ldr	r3, [pc, #156]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d144      	bne.n	8004a52 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049c8:	4b24      	ldr	r3, [pc, #144]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a23      	ldr	r2, [pc, #140]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049d2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049d4:	4b21      	ldr	r3, [pc, #132]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049de:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049e0:	f7fc fc36 	bl	8001250 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fc32 	bl	8001250 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e02c      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049fa:	4b18      	ldr	r3, [pc, #96]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0f0      	beq.n	80049e8 <HAL_RCC_OscConfig+0x7ac>
 8004a06:	e024      	b.n	8004a52 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2b0c      	cmp	r3, #12
 8004a0c:	d01f      	beq.n	8004a4e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a0e:	4b13      	ldr	r3, [pc, #76]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a12      	ldr	r2, [pc, #72]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 8004a14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1a:	f7fc fc19 	bl	8001250 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a22:	f7fc fc15 	bl	8001250 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e00f      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a34:	4b09      	ldr	r3, [pc, #36]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004a40:	4b06      	ldr	r3, [pc, #24]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	4905      	ldr	r1, [pc, #20]	; (8004a5c <HAL_RCC_OscConfig+0x820>)
 8004a46:	4b06      	ldr	r3, [pc, #24]	; (8004a60 <HAL_RCC_OscConfig+0x824>)
 8004a48:	4013      	ands	r3, r2
 8004a4a:	60cb      	str	r3, [r1, #12]
 8004a4c:	e001      	b.n	8004a52 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004a52:	2300      	movs	r3, #0
}
 8004a54:	4618      	mov	r0, r3
 8004a56:	3720      	adds	r7, #32
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	feeefffc 	.word	0xfeeefffc

08004a64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0e7      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a78:	4b75      	ldr	r3, [pc, #468]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d910      	bls.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a86:	4b72      	ldr	r3, [pc, #456]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f023 0207 	bic.w	r2, r3, #7
 8004a8e:	4970      	ldr	r1, [pc, #448]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a96:	4b6e      	ldr	r3, [pc, #440]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0307 	and.w	r3, r3, #7
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d001      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e0cf      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d010      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689a      	ldr	r2, [r3, #8]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d908      	bls.n	8004ad6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ac4:	4b63      	ldr	r3, [pc, #396]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	4960      	ldr	r1, [pc, #384]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d04c      	beq.n	8004b7c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	685b      	ldr	r3, [r3, #4]
 8004ae6:	2b03      	cmp	r3, #3
 8004ae8:	d107      	bne.n	8004afa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004aea:	4b5a      	ldr	r3, [pc, #360]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d121      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e0a6      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d107      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b02:	4b54      	ldr	r3, [pc, #336]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d115      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e09a      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d107      	bne.n	8004b2a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b1a:	4b4e      	ldr	r3, [pc, #312]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0302 	and.w	r3, r3, #2
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d109      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e08e      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d101      	bne.n	8004b3a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e086      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b3a:	4b46      	ldr	r3, [pc, #280]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f023 0203 	bic.w	r2, r3, #3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	4943      	ldr	r1, [pc, #268]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b4c:	f7fc fb80 	bl	8001250 <HAL_GetTick>
 8004b50:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b52:	e00a      	b.n	8004b6a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b54:	f7fc fb7c 	bl	8001250 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d901      	bls.n	8004b6a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b66:	2303      	movs	r3, #3
 8004b68:	e06e      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b6a:	4b3a      	ldr	r3, [pc, #232]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b6c:	689b      	ldr	r3, [r3, #8]
 8004b6e:	f003 020c 	and.w	r2, r3, #12
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	685b      	ldr	r3, [r3, #4]
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d1eb      	bne.n	8004b54 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d010      	beq.n	8004baa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	689a      	ldr	r2, [r3, #8]
 8004b8c:	4b31      	ldr	r3, [pc, #196]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d208      	bcs.n	8004baa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b98:	4b2e      	ldr	r3, [pc, #184]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	492b      	ldr	r1, [pc, #172]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004baa:	4b29      	ldr	r3, [pc, #164]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	683a      	ldr	r2, [r7, #0]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d210      	bcs.n	8004bda <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb8:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f023 0207 	bic.w	r2, r3, #7
 8004bc0:	4923      	ldr	r1, [pc, #140]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bc8:	4b21      	ldr	r3, [pc, #132]	; (8004c50 <HAL_RCC_ClockConfig+0x1ec>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0307 	and.w	r3, r3, #7
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d001      	beq.n	8004bda <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e036      	b.n	8004c48 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 0304 	and.w	r3, r3, #4
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d008      	beq.n	8004bf8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	4918      	ldr	r1, [pc, #96]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0308 	and.w	r3, r3, #8
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d009      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c04:	4b13      	ldr	r3, [pc, #76]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	00db      	lsls	r3, r3, #3
 8004c12:	4910      	ldr	r1, [pc, #64]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c14:	4313      	orrs	r3, r2
 8004c16:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c18:	f000 f824 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 8004c1c:	4602      	mov	r2, r0
 8004c1e:	4b0d      	ldr	r3, [pc, #52]	; (8004c54 <HAL_RCC_ClockConfig+0x1f0>)
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	091b      	lsrs	r3, r3, #4
 8004c24:	f003 030f 	and.w	r3, r3, #15
 8004c28:	490b      	ldr	r1, [pc, #44]	; (8004c58 <HAL_RCC_ClockConfig+0x1f4>)
 8004c2a:	5ccb      	ldrb	r3, [r1, r3]
 8004c2c:	f003 031f 	and.w	r3, r3, #31
 8004c30:	fa22 f303 	lsr.w	r3, r2, r3
 8004c34:	4a09      	ldr	r2, [pc, #36]	; (8004c5c <HAL_RCC_ClockConfig+0x1f8>)
 8004c36:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c38:	4b09      	ldr	r3, [pc, #36]	; (8004c60 <HAL_RCC_ClockConfig+0x1fc>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fc fab7 	bl	80011b0 <HAL_InitTick>
 8004c42:	4603      	mov	r3, r0
 8004c44:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c46:	7afb      	ldrb	r3, [r7, #11]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}
 8004c50:	40022000 	.word	0x40022000
 8004c54:	40021000 	.word	0x40021000
 8004c58:	08006c8c 	.word	0x08006c8c
 8004c5c:	20000004 	.word	0x20000004
 8004c60:	20000008 	.word	0x20000008

08004c64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b089      	sub	sp, #36	; 0x24
 8004c68:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	61fb      	str	r3, [r7, #28]
 8004c6e:	2300      	movs	r3, #0
 8004c70:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c72:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
 8004c7a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c7c:	4b3b      	ldr	r3, [pc, #236]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0303 	and.w	r3, r3, #3
 8004c84:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d005      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x34>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	2b0c      	cmp	r3, #12
 8004c90:	d121      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d11e      	bne.n	8004cd6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c98:	4b34      	ldr	r3, [pc, #208]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f003 0308 	and.w	r3, r3, #8
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d107      	bne.n	8004cb4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ca6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004caa:	0a1b      	lsrs	r3, r3, #8
 8004cac:	f003 030f 	and.w	r3, r3, #15
 8004cb0:	61fb      	str	r3, [r7, #28]
 8004cb2:	e005      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004cb4:	4b2d      	ldr	r3, [pc, #180]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	091b      	lsrs	r3, r3, #4
 8004cba:	f003 030f 	and.w	r3, r3, #15
 8004cbe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004cc0:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cc8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10d      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cd4:	e00a      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d102      	bne.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cdc:	4b25      	ldr	r3, [pc, #148]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004cde:	61bb      	str	r3, [r7, #24]
 8004ce0:	e004      	b.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b08      	cmp	r3, #8
 8004ce6:	d101      	bne.n	8004cec <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004ce8:	4b23      	ldr	r3, [pc, #140]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cea:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cec:	693b      	ldr	r3, [r7, #16]
 8004cee:	2b0c      	cmp	r3, #12
 8004cf0:	d134      	bne.n	8004d5c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cf2:	4b1e      	ldr	r3, [pc, #120]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf4:	68db      	ldr	r3, [r3, #12]
 8004cf6:	f003 0303 	and.w	r3, r3, #3
 8004cfa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d003      	beq.n	8004d0a <HAL_RCC_GetSysClockFreq+0xa6>
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	2b03      	cmp	r3, #3
 8004d06:	d003      	beq.n	8004d10 <HAL_RCC_GetSysClockFreq+0xac>
 8004d08:	e005      	b.n	8004d16 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d0a:	4b1a      	ldr	r3, [pc, #104]	; (8004d74 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d0c:	617b      	str	r3, [r7, #20]
      break;
 8004d0e:	e005      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d10:	4b19      	ldr	r3, [pc, #100]	; (8004d78 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d12:	617b      	str	r3, [r7, #20]
      break;
 8004d14:	e002      	b.n	8004d1c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d16:	69fb      	ldr	r3, [r7, #28]
 8004d18:	617b      	str	r3, [r7, #20]
      break;
 8004d1a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d1c:	4b13      	ldr	r3, [pc, #76]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	091b      	lsrs	r3, r3, #4
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	3301      	adds	r3, #1
 8004d28:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d2a:	4b10      	ldr	r3, [pc, #64]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d34:	697a      	ldr	r2, [r7, #20]
 8004d36:	fb03 f202 	mul.w	r2, r3, r2
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d40:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d42:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x108>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	0e5b      	lsrs	r3, r3, #25
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	005b      	lsls	r3, r3, #1
 8004d50:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d52:	697a      	ldr	r2, [r7, #20]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d5a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d5c:	69bb      	ldr	r3, [r7, #24]
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3724      	adds	r7, #36	; 0x24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	40021000 	.word	0x40021000
 8004d70:	08006ca4 	.word	0x08006ca4
 8004d74:	00f42400 	.word	0x00f42400
 8004d78:	007a1200 	.word	0x007a1200

08004d7c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d80:	4b03      	ldr	r3, [pc, #12]	; (8004d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d82:	681b      	ldr	r3, [r3, #0]
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr
 8004d8e:	bf00      	nop
 8004d90:	20000004 	.word	0x20000004

08004d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d98:	f7ff fff0 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	4b06      	ldr	r3, [pc, #24]	; (8004db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004da0:	689b      	ldr	r3, [r3, #8]
 8004da2:	0a1b      	lsrs	r3, r3, #8
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	4904      	ldr	r1, [pc, #16]	; (8004dbc <HAL_RCC_GetPCLK1Freq+0x28>)
 8004daa:	5ccb      	ldrb	r3, [r1, r3]
 8004dac:	f003 031f 	and.w	r3, r3, #31
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	08006c9c 	.word	0x08006c9c

08004dc0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004dc4:	f7ff ffda 	bl	8004d7c <HAL_RCC_GetHCLKFreq>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	4b06      	ldr	r3, [pc, #24]	; (8004de4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	0adb      	lsrs	r3, r3, #11
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	4904      	ldr	r1, [pc, #16]	; (8004de8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dd6:	5ccb      	ldrb	r3, [r1, r3]
 8004dd8:	f003 031f 	and.w	r3, r3, #31
 8004ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	40021000 	.word	0x40021000
 8004de8:	08006c9c 	.word	0x08006c9c

08004dec <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004df4:	2300      	movs	r3, #0
 8004df6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004df8:	4b2a      	ldr	r3, [pc, #168]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d003      	beq.n	8004e0c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e04:	f7ff f9b6 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004e08:	6178      	str	r0, [r7, #20]
 8004e0a:	e014      	b.n	8004e36 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e0c:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e10:	4a24      	ldr	r2, [pc, #144]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e16:	6593      	str	r3, [r2, #88]	; 0x58
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e20:	60fb      	str	r3, [r7, #12]
 8004e22:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e24:	f7ff f9a6 	bl	8004174 <HAL_PWREx_GetVoltageRange>
 8004e28:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e2e:	4a1d      	ldr	r2, [pc, #116]	; (8004ea4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e34:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e3c:	d10b      	bne.n	8004e56 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2b80      	cmp	r3, #128	; 0x80
 8004e42:	d919      	bls.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2ba0      	cmp	r3, #160	; 0xa0
 8004e48:	d902      	bls.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	613b      	str	r3, [r7, #16]
 8004e4e:	e013      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e50:	2301      	movs	r3, #1
 8004e52:	613b      	str	r3, [r7, #16]
 8004e54:	e010      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b80      	cmp	r3, #128	; 0x80
 8004e5a:	d902      	bls.n	8004e62 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	613b      	str	r3, [r7, #16]
 8004e60:	e00a      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2b80      	cmp	r3, #128	; 0x80
 8004e66:	d102      	bne.n	8004e6e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e68:	2302      	movs	r3, #2
 8004e6a:	613b      	str	r3, [r7, #16]
 8004e6c:	e004      	b.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2b70      	cmp	r3, #112	; 0x70
 8004e72:	d101      	bne.n	8004e78 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e74:	2301      	movs	r3, #1
 8004e76:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f023 0207 	bic.w	r2, r3, #7
 8004e80:	4909      	ldr	r1, [pc, #36]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e88:	4b07      	ldr	r3, [pc, #28]	; (8004ea8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f003 0307 	and.w	r3, r3, #7
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d001      	beq.n	8004e9a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e000      	b.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3718      	adds	r7, #24
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	40021000 	.word	0x40021000
 8004ea8:	40022000 	.word	0x40022000

08004eac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b086      	sub	sp, #24
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004eb8:	2300      	movs	r3, #0
 8004eba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d031      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed0:	d01a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8004ed2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ed6:	d814      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d009      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004edc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ee0:	d10f      	bne.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8004ee2:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ee4:	68db      	ldr	r3, [r3, #12]
 8004ee6:	4a5c      	ldr	r2, [pc, #368]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ee8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eec:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3304      	adds	r3, #4
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 f9de 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	74fb      	strb	r3, [r7, #19]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8004f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f10:	4b51      	ldr	r3, [pc, #324]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	494e      	ldr	r1, [pc, #312]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 809e 	beq.w	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f3e:	4b46      	ldr	r3, [pc, #280]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f54:	4b40      	ldr	r3, [pc, #256]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	4a3f      	ldr	r2, [pc, #252]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f60:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f70:	4b3a      	ldr	r3, [pc, #232]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a39      	ldr	r2, [pc, #228]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f7c:	f7fc f968 	bl	8001250 <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f82:	e009      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f84:	f7fc f964 	bl	8001250 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d902      	bls.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	74fb      	strb	r3, [r7, #19]
        break;
 8004f96:	e005      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f98:	4b30      	ldr	r3, [pc, #192]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d15a      	bne.n	8005060 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004faa:	4b2b      	ldr	r3, [pc, #172]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01e      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d019      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fc6:	4b24      	ldr	r3, [pc, #144]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd2:	4b21      	ldr	r3, [pc, #132]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe2:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe8:	4a1b      	ldr	r2, [pc, #108]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004fea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ff2:	4a19      	ldr	r2, [pc, #100]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	f003 0301 	and.w	r3, r3, #1
 8005000:	2b00      	cmp	r3, #0
 8005002:	d016      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005004:	f7fc f924 	bl	8001250 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500a:	e00b      	b.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500c:	f7fc f920 	bl	8001250 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	; 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d902      	bls.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	74fb      	strb	r3, [r7, #19]
            break;
 8005022:	e006      	b.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b00      	cmp	r3, #0
 8005030:	d0ec      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005032:	7cfb      	ldrb	r3, [r7, #19]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d10b      	bne.n	8005050 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800503a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005046:	4904      	ldr	r1, [pc, #16]	; (8005058 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8005048:	4313      	orrs	r3, r2
 800504a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800504e:	e009      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005050:	7cfb      	ldrb	r3, [r7, #19]
 8005052:	74bb      	strb	r3, [r7, #18]
 8005054:	e006      	b.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8005056:	bf00      	nop
 8005058:	40021000 	.word	0x40021000
 800505c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005060:	7cfb      	ldrb	r3, [r7, #19]
 8005062:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005064:	7c7b      	ldrb	r3, [r7, #17]
 8005066:	2b01      	cmp	r3, #1
 8005068:	d105      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506a:	4b8a      	ldr	r3, [pc, #552]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800506c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800506e:	4a89      	ldr	r2, [pc, #548]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005070:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005074:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005082:	4b84      	ldr	r3, [pc, #528]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005088:	f023 0203 	bic.w	r2, r3, #3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6a1b      	ldr	r3, [r3, #32]
 8005090:	4980      	ldr	r1, [pc, #512]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005092:	4313      	orrs	r3, r2
 8005094:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0302 	and.w	r3, r3, #2
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a4:	4b7b      	ldr	r3, [pc, #492]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050aa:	f023 020c 	bic.w	r2, r3, #12
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b2:	4978      	ldr	r1, [pc, #480]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050b4:	4313      	orrs	r3, r2
 80050b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80050c6:	4b73      	ldr	r3, [pc, #460]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050cc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d4:	496f      	ldr	r1, [pc, #444]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00a      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050e8:	4b6a      	ldr	r3, [pc, #424]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ee:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050f6:	4967      	ldr	r1, [pc, #412]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800510a:	4b62      	ldr	r3, [pc, #392]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800510c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005110:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005118:	495e      	ldr	r1, [pc, #376]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800511a:	4313      	orrs	r3, r2
 800511c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	2b00      	cmp	r3, #0
 800512a:	d00a      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800512c:	4b59      	ldr	r3, [pc, #356]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800512e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005132:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513a:	4956      	ldr	r1, [pc, #344]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800513c:	4313      	orrs	r3, r2
 800513e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00a      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800514e:	4b51      	ldr	r3, [pc, #324]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800515c:	494d      	ldr	r1, [pc, #308]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d028      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005170:	4b48      	ldr	r3, [pc, #288]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005176:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	4945      	ldr	r1, [pc, #276]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005180:	4313      	orrs	r3, r2
 8005182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800518a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800518e:	d106      	bne.n	800519e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005190:	4b40      	ldr	r3, [pc, #256]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	4a3f      	ldr	r2, [pc, #252]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005196:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800519a:	60d3      	str	r3, [r2, #12]
 800519c:	e011      	b.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80051a6:	d10c      	bne.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	3304      	adds	r3, #4
 80051ac:	2101      	movs	r1, #1
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f882 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 80051b4:	4603      	mov	r3, r0
 80051b6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80051b8:	7cfb      	ldrb	r3, [r7, #19]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d001      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80051be:	7cfb      	ldrb	r3, [r7, #19]
 80051c0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d028      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80051ce:	4b31      	ldr	r3, [pc, #196]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051d4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051dc:	492d      	ldr	r1, [pc, #180]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80051ec:	d106      	bne.n	80051fc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051ee:	4b29      	ldr	r3, [pc, #164]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051f0:	68db      	ldr	r3, [r3, #12]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80051f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f8:	60d3      	str	r3, [r2, #12]
 80051fa:	e011      	b.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005204:	d10c      	bne.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	3304      	adds	r3, #4
 800520a:	2101      	movs	r1, #1
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f853 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8005212:	4603      	mov	r3, r0
 8005214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005216:	7cfb      	ldrb	r3, [r7, #19]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d001      	beq.n	8005220 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800521c:	7cfb      	ldrb	r3, [r7, #19]
 800521e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d01c      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800522c:	4b19      	ldr	r3, [pc, #100]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800523a:	4916      	ldr	r1, [pc, #88]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800523c:	4313      	orrs	r3, r2
 800523e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800524a:	d10c      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	3304      	adds	r3, #4
 8005250:	2102      	movs	r1, #2
 8005252:	4618      	mov	r0, r3
 8005254:	f000 f830 	bl	80052b8 <RCCEx_PLLSAI1_Config>
 8005258:	4603      	mov	r3, r0
 800525a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800525c:	7cfb      	ldrb	r3, [r7, #19]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8005262:	7cfb      	ldrb	r3, [r7, #19]
 8005264:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005272:	4b08      	ldr	r3, [pc, #32]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005278:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005280:	4904      	ldr	r1, [pc, #16]	; (8005294 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8005282:	4313      	orrs	r3, r2
 8005284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005288:	7cbb      	ldrb	r3, [r7, #18]
}
 800528a:	4618      	mov	r0, r3
 800528c:	3718      	adds	r7, #24
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	40021000 	.word	0x40021000

08005298 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005298:	b480      	push	{r7}
 800529a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800529c:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a04      	ldr	r2, [pc, #16]	; (80052b4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80052a2:	f043 0304 	orr.w	r3, r3, #4
 80052a6:	6013      	str	r3, [r2, #0]
}
 80052a8:	bf00      	nop
 80052aa:	46bd      	mov	sp, r7
 80052ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b0:	4770      	bx	lr
 80052b2:	bf00      	nop
 80052b4:	40021000 	.word	0x40021000

080052b8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b084      	sub	sp, #16
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052c2:	2300      	movs	r3, #0
 80052c4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80052c6:	4b74      	ldr	r3, [pc, #464]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052c8:	68db      	ldr	r3, [r3, #12]
 80052ca:	f003 0303 	and.w	r3, r3, #3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d018      	beq.n	8005304 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80052d2:	4b71      	ldr	r3, [pc, #452]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0203 	and.w	r2, r3, #3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d10d      	bne.n	80052fe <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
       ||
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80052ea:	4b6b      	ldr	r3, [pc, #428]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80052ec:	68db      	ldr	r3, [r3, #12]
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	f003 0307 	and.w	r3, r3, #7
 80052f4:	1c5a      	adds	r2, r3, #1
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
       ||
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d047      	beq.n	800538e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80052fe:	2301      	movs	r3, #1
 8005300:	73fb      	strb	r3, [r7, #15]
 8005302:	e044      	b.n	800538e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2b03      	cmp	r3, #3
 800530a:	d018      	beq.n	800533e <RCCEx_PLLSAI1_Config+0x86>
 800530c:	2b03      	cmp	r3, #3
 800530e:	d825      	bhi.n	800535c <RCCEx_PLLSAI1_Config+0xa4>
 8005310:	2b01      	cmp	r3, #1
 8005312:	d002      	beq.n	800531a <RCCEx_PLLSAI1_Config+0x62>
 8005314:	2b02      	cmp	r3, #2
 8005316:	d009      	beq.n	800532c <RCCEx_PLLSAI1_Config+0x74>
 8005318:	e020      	b.n	800535c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800531a:	4b5f      	ldr	r3, [pc, #380]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d11d      	bne.n	8005362 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005326:	2301      	movs	r3, #1
 8005328:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532a:	e01a      	b.n	8005362 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800532c:	4b5a      	ldr	r3, [pc, #360]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d116      	bne.n	8005366 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800533c:	e013      	b.n	8005366 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800533e:	4b56      	ldr	r3, [pc, #344]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005346:	2b00      	cmp	r3, #0
 8005348:	d10f      	bne.n	800536a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800534a:	4b53      	ldr	r3, [pc, #332]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005356:	2301      	movs	r3, #1
 8005358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800535a:	e006      	b.n	800536a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	73fb      	strb	r3, [r7, #15]
      break;
 8005360:	e004      	b.n	800536c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005362:	bf00      	nop
 8005364:	e002      	b.n	800536c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005366:	bf00      	nop
 8005368:	e000      	b.n	800536c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800536a:	bf00      	nop
    }

    if(status == HAL_OK)
 800536c:	7bfb      	ldrb	r3, [r7, #15]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d10d      	bne.n	800538e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005372:	4b49      	ldr	r3, [pc, #292]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6819      	ldr	r1, [r3, #0]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	3b01      	subs	r3, #1
 8005384:	011b      	lsls	r3, r3, #4
 8005386:	430b      	orrs	r3, r1
 8005388:	4943      	ldr	r1, [pc, #268]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800538a:	4313      	orrs	r3, r2
 800538c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d17c      	bne.n	800548e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005394:	4b40      	ldr	r3, [pc, #256]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a3f      	ldr	r2, [pc, #252]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800539a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800539e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fb ff56 	bl	8001250 <HAL_GetTick>
 80053a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053a6:	e009      	b.n	80053bc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80053a8:	f7fb ff52 	bl	8001250 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d902      	bls.n	80053bc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	73fb      	strb	r3, [r7, #15]
        break;
 80053ba:	e005      	b.n	80053c8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80053bc:	4b36      	ldr	r3, [pc, #216]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1ef      	bne.n	80053a8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80053c8:	7bfb      	ldrb	r3, [r7, #15]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d15f      	bne.n	800548e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d110      	bne.n	80053f6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053d4:	4b30      	ldr	r3, [pc, #192]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053d6:	691b      	ldr	r3, [r3, #16]
 80053d8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80053dc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
 80053e4:	0211      	lsls	r1, r2, #8
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	68d2      	ldr	r2, [r2, #12]
 80053ea:	06d2      	lsls	r2, r2, #27
 80053ec:	430a      	orrs	r2, r1
 80053ee:	492a      	ldr	r1, [pc, #168]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053f0:	4313      	orrs	r3, r2
 80053f2:	610b      	str	r3, [r1, #16]
 80053f4:	e027      	b.n	8005446 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	d112      	bne.n	8005422 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80053fc:	4b26      	ldr	r3, [pc, #152]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005404:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	6892      	ldr	r2, [r2, #8]
 800540c:	0211      	lsls	r1, r2, #8
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	6912      	ldr	r2, [r2, #16]
 8005412:	0852      	lsrs	r2, r2, #1
 8005414:	3a01      	subs	r2, #1
 8005416:	0552      	lsls	r2, r2, #21
 8005418:	430a      	orrs	r2, r1
 800541a:	491f      	ldr	r1, [pc, #124]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800541c:	4313      	orrs	r3, r2
 800541e:	610b      	str	r3, [r1, #16]
 8005420:	e011      	b.n	8005446 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800542a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800542e:	687a      	ldr	r2, [r7, #4]
 8005430:	6892      	ldr	r2, [r2, #8]
 8005432:	0211      	lsls	r1, r2, #8
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6952      	ldr	r2, [r2, #20]
 8005438:	0852      	lsrs	r2, r2, #1
 800543a:	3a01      	subs	r2, #1
 800543c:	0652      	lsls	r2, r2, #25
 800543e:	430a      	orrs	r2, r1
 8005440:	4915      	ldr	r1, [pc, #84]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005442:	4313      	orrs	r3, r2
 8005444:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005446:	4b14      	ldr	r3, [pc, #80]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4a13      	ldr	r2, [pc, #76]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800544c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005450:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005452:	f7fb fefd 	bl	8001250 <HAL_GetTick>
 8005456:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005458:	e009      	b.n	800546e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800545a:	f7fb fef9 	bl	8001250 <HAL_GetTick>
 800545e:	4602      	mov	r2, r0
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	1ad3      	subs	r3, r2, r3
 8005464:	2b02      	cmp	r3, #2
 8005466:	d902      	bls.n	800546e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8005468:	2303      	movs	r3, #3
 800546a:	73fb      	strb	r3, [r7, #15]
          break;
 800546c:	e005      	b.n	800547a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800546e:	4b0a      	ldr	r3, [pc, #40]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0ef      	beq.n	800545a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800547a:	7bfb      	ldrb	r3, [r7, #15]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d106      	bne.n	800548e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005480:	4b05      	ldr	r3, [pc, #20]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 8005482:	691a      	ldr	r2, [r3, #16]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	4903      	ldr	r1, [pc, #12]	; (8005498 <RCCEx_PLLSAI1_Config+0x1e0>)
 800548a:	4313      	orrs	r3, r2
 800548c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800548e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3710      	adds	r7, #16
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	40021000 	.word	0x40021000

0800549c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b082      	sub	sp, #8
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d101      	bne.n	80054ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	e049      	b.n	8005542 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fb fd40 	bl	8000f48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681a      	ldr	r2, [r3, #0]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	3304      	adds	r3, #4
 80054d8:	4619      	mov	r1, r3
 80054da:	4610      	mov	r0, r2
 80054dc:	f000 fb0e 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2201      	movs	r2, #1
 80054e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2201      	movs	r2, #1
 80054ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2201      	movs	r2, #1
 800550c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2201      	movs	r2, #1
 8005514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b082      	sub	sp, #8
 800554e:	af00      	add	r7, sp, #0
 8005550:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d101      	bne.n	800555c <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e049      	b.n	80055f0 <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005562:	b2db      	uxtb	r3, r3
 8005564:	2b00      	cmp	r3, #0
 8005566:	d106      	bne.n	8005576 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 f841 	bl	80055f8 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2202      	movs	r2, #2
 800557a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	3304      	adds	r3, #4
 8005586:	4619      	mov	r1, r3
 8005588:	4610      	mov	r0, r2
 800558a:	f000 fab7 	bl	8005afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2201      	movs	r2, #1
 800559a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2201      	movs	r2, #1
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2201      	movs	r2, #1
 80055c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2201      	movs	r2, #1
 80055ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2201      	movs	r2, #1
 80055e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2201      	movs	r2, #1
 80055ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80055ee:	2300      	movs	r3, #0
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d020      	beq.n	8005670 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	f003 0302 	and.w	r3, r3, #2
 8005634:	2b00      	cmp	r3, #0
 8005636:	d01b      	beq.n	8005670 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0202 	mvn.w	r2, #2
 8005640:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f003 0303 	and.w	r3, r3, #3
 8005652:	2b00      	cmp	r3, #0
 8005654:	d003      	beq.n	800565e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f000 fa31 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 800565c:	e005      	b.n	800566a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f000 fa23 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005664:	6878      	ldr	r0, [r7, #4]
 8005666:	f000 fa34 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	f003 0304 	and.w	r3, r3, #4
 8005676:	2b00      	cmp	r3, #0
 8005678:	d020      	beq.n	80056bc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d01b      	beq.n	80056bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f06f 0204 	mvn.w	r2, #4
 800568c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2202      	movs	r2, #2
 8005692:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	699b      	ldr	r3, [r3, #24]
 800569a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056a2:	6878      	ldr	r0, [r7, #4]
 80056a4:	f000 fa0b 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80056a8:	e005      	b.n	80056b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f000 f9fd 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fa0e 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	f003 0308 	and.w	r3, r3, #8
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d020      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	f003 0308 	and.w	r3, r3, #8
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d01b      	beq.n	8005708 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f06f 0208 	mvn.w	r2, #8
 80056d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2204      	movs	r2, #4
 80056de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	69db      	ldr	r3, [r3, #28]
 80056e6:	f003 0303 	and.w	r3, r3, #3
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 f9e5 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 80056f4:	e005      	b.n	8005702 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 f9d7 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056fc:	6878      	ldr	r0, [r7, #4]
 80056fe:	f000 f9e8 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	f003 0310 	and.w	r3, r3, #16
 800570e:	2b00      	cmp	r3, #0
 8005710:	d020      	beq.n	8005754 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d01b      	beq.n	8005754 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f06f 0210 	mvn.w	r2, #16
 8005724:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2208      	movs	r2, #8
 800572a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	f000 f9bf 	bl	8005abe <HAL_TIM_IC_CaptureCallback>
 8005740:	e005      	b.n	800574e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 f9b1 	bl	8005aaa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f9c2 	bl	8005ad2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00c      	beq.n	8005778 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	d007      	beq.n	8005778 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f06f 0201 	mvn.w	r2, #1
 8005770:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f98f 	bl	8005a96 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00c      	beq.n	800579c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005788:	2b00      	cmp	r3, #0
 800578a:	d007      	beq.n	800579c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f000 fd9c 	bl	80062d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00c      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d007      	beq.n	80057c0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80057b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	f000 fd94 	bl	80062e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d00c      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d007      	beq.n	80057e4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80057dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f981 	bl	8005ae6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f003 0320 	and.w	r3, r3, #32
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00c      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f003 0320 	and.w	r3, r3, #32
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	f06f 0220 	mvn.w	r2, #32
 8005800:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fd5c 	bl	80062c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005808:	bf00      	nop
 800580a:	3710      	adds	r7, #16
 800580c:	46bd      	mov	sp, r7
 800580e:	bd80      	pop	{r7, pc}

08005810 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b086      	sub	sp, #24
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800581c:	2300      	movs	r3, #0
 800581e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005826:	2b01      	cmp	r3, #1
 8005828:	d101      	bne.n	800582e <HAL_TIM_OC_ConfigChannel+0x1e>
 800582a:	2302      	movs	r3, #2
 800582c:	e066      	b.n	80058fc <HAL_TIM_OC_ConfigChannel+0xec>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2201      	movs	r2, #1
 8005832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b14      	cmp	r3, #20
 800583a:	d857      	bhi.n	80058ec <HAL_TIM_OC_ConfigChannel+0xdc>
 800583c:	a201      	add	r2, pc, #4	; (adr r2, 8005844 <HAL_TIM_OC_ConfigChannel+0x34>)
 800583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005842:	bf00      	nop
 8005844:	08005899 	.word	0x08005899
 8005848:	080058ed 	.word	0x080058ed
 800584c:	080058ed 	.word	0x080058ed
 8005850:	080058ed 	.word	0x080058ed
 8005854:	080058a7 	.word	0x080058a7
 8005858:	080058ed 	.word	0x080058ed
 800585c:	080058ed 	.word	0x080058ed
 8005860:	080058ed 	.word	0x080058ed
 8005864:	080058b5 	.word	0x080058b5
 8005868:	080058ed 	.word	0x080058ed
 800586c:	080058ed 	.word	0x080058ed
 8005870:	080058ed 	.word	0x080058ed
 8005874:	080058c3 	.word	0x080058c3
 8005878:	080058ed 	.word	0x080058ed
 800587c:	080058ed 	.word	0x080058ed
 8005880:	080058ed 	.word	0x080058ed
 8005884:	080058d1 	.word	0x080058d1
 8005888:	080058ed 	.word	0x080058ed
 800588c:	080058ed 	.word	0x080058ed
 8005890:	080058ed 	.word	0x080058ed
 8005894:	080058df 	.word	0x080058df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68b9      	ldr	r1, [r7, #8]
 800589e:	4618      	mov	r0, r3
 80058a0:	f000 f990 	bl	8005bc4 <TIM_OC1_SetConfig>
      break;
 80058a4:	e025      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	68b9      	ldr	r1, [r7, #8]
 80058ac:	4618      	mov	r0, r3
 80058ae:	f000 fa05 	bl	8005cbc <TIM_OC2_SetConfig>
      break;
 80058b2:	e01e      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68b9      	ldr	r1, [r7, #8]
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fa78 	bl	8005db0 <TIM_OC3_SetConfig>
      break;
 80058c0:	e017      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	68b9      	ldr	r1, [r7, #8]
 80058c8:	4618      	mov	r0, r3
 80058ca:	f000 fae9 	bl	8005ea0 <TIM_OC4_SetConfig>
      break;
 80058ce:	e010      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68b9      	ldr	r1, [r7, #8]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f000 fb40 	bl	8005f5c <TIM_OC5_SetConfig>
      break;
 80058dc:	e009      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68b9      	ldr	r1, [r7, #8]
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 fb91 	bl	800600c <TIM_OC6_SetConfig>
      break;
 80058ea:	e002      	b.n	80058f2 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	75fb      	strb	r3, [r7, #23]
      break;
 80058f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
 800590c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800590e:	2300      	movs	r3, #0
 8005910:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_TIM_ConfigClockSource+0x1c>
 800591c:	2302      	movs	r3, #2
 800591e:	e0b6      	b.n	8005a8e <HAL_TIM_ConfigClockSource+0x18a>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2202      	movs	r2, #2
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005942:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800594a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	68ba      	ldr	r2, [r7, #8]
 8005952:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800595c:	d03e      	beq.n	80059dc <HAL_TIM_ConfigClockSource+0xd8>
 800595e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005962:	f200 8087 	bhi.w	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 8005966:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800596a:	f000 8086 	beq.w	8005a7a <HAL_TIM_ConfigClockSource+0x176>
 800596e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005972:	d87f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 8005974:	2b70      	cmp	r3, #112	; 0x70
 8005976:	d01a      	beq.n	80059ae <HAL_TIM_ConfigClockSource+0xaa>
 8005978:	2b70      	cmp	r3, #112	; 0x70
 800597a:	d87b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 800597c:	2b60      	cmp	r3, #96	; 0x60
 800597e:	d050      	beq.n	8005a22 <HAL_TIM_ConfigClockSource+0x11e>
 8005980:	2b60      	cmp	r3, #96	; 0x60
 8005982:	d877      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 8005984:	2b50      	cmp	r3, #80	; 0x50
 8005986:	d03c      	beq.n	8005a02 <HAL_TIM_ConfigClockSource+0xfe>
 8005988:	2b50      	cmp	r3, #80	; 0x50
 800598a:	d873      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 800598c:	2b40      	cmp	r3, #64	; 0x40
 800598e:	d058      	beq.n	8005a42 <HAL_TIM_ConfigClockSource+0x13e>
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d86f      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 8005994:	2b30      	cmp	r3, #48	; 0x30
 8005996:	d064      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15e>
 8005998:	2b30      	cmp	r3, #48	; 0x30
 800599a:	d86b      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 800599c:	2b20      	cmp	r3, #32
 800599e:	d060      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15e>
 80059a0:	2b20      	cmp	r3, #32
 80059a2:	d867      	bhi.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d05c      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15e>
 80059a8:	2b10      	cmp	r3, #16
 80059aa:	d05a      	beq.n	8005a62 <HAL_TIM_ConfigClockSource+0x15e>
 80059ac:	e062      	b.n	8005a74 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059be:	f000 fbf9 	bl	80061b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68ba      	ldr	r2, [r7, #8]
 80059d8:	609a      	str	r2, [r3, #8]
      break;
 80059da:	e04f      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80059ec:	f000 fbe2 	bl	80061b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80059fe:	609a      	str	r2, [r3, #8]
      break;
 8005a00:	e03c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a0e:	461a      	mov	r2, r3
 8005a10:	f000 fb56 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2150      	movs	r1, #80	; 0x50
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f000 fbaf 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005a20:	e02c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a2e:	461a      	mov	r2, r3
 8005a30:	f000 fb75 	bl	800611e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2160      	movs	r1, #96	; 0x60
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f000 fb9f 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005a40:	e01c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005a46:	683b      	ldr	r3, [r7, #0]
 8005a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a4e:	461a      	mov	r2, r3
 8005a50:	f000 fb36 	bl	80060c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2140      	movs	r1, #64	; 0x40
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f000 fb8f 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005a60:	e00c      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	4610      	mov	r0, r2
 8005a6e:	f000 fb86 	bl	800617e <TIM_ITRx_SetConfig>
      break;
 8005a72:	e003      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	73fb      	strb	r3, [r7, #15]
      break;
 8005a78:	e000      	b.n	8005a7c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005a7a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}

08005a96 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a96:	b480      	push	{r7}
 8005a98:	b083      	sub	sp, #12
 8005a9a:	af00      	add	r7, sp, #0
 8005a9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a9e:	bf00      	nop
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa8:	4770      	bx	lr

08005aaa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005aaa:	b480      	push	{r7}
 8005aac:	b083      	sub	sp, #12
 8005aae:	af00      	add	r7, sp, #0
 8005ab0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ab2:	bf00      	nop
 8005ab4:	370c      	adds	r7, #12
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abc:	4770      	bx	lr

08005abe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005abe:	b480      	push	{r7}
 8005ac0:	b083      	sub	sp, #12
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ac6:	bf00      	nop
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b083      	sub	sp, #12
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ada:	bf00      	nop
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr

08005ae6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005ae6:	b480      	push	{r7}
 8005ae8:	b083      	sub	sp, #12
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005aee:	bf00      	nop
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr
	...

08005afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b085      	sub	sp, #20
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a2a      	ldr	r2, [pc, #168]	; (8005bb8 <TIM_Base_SetConfig+0xbc>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d003      	beq.n	8005b1c <TIM_Base_SetConfig+0x20>
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b1a:	d108      	bne.n	8005b2e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	4313      	orrs	r3, r2
 8005b2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a21      	ldr	r2, [pc, #132]	; (8005bb8 <TIM_Base_SetConfig+0xbc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00b      	beq.n	8005b4e <TIM_Base_SetConfig+0x52>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b3c:	d007      	beq.n	8005b4e <TIM_Base_SetConfig+0x52>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1e      	ldr	r2, [pc, #120]	; (8005bbc <TIM_Base_SetConfig+0xc0>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d003      	beq.n	8005b4e <TIM_Base_SetConfig+0x52>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a1d      	ldr	r2, [pc, #116]	; (8005bc0 <TIM_Base_SetConfig+0xc4>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d108      	bne.n	8005b60 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	68db      	ldr	r3, [r3, #12]
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	695b      	ldr	r3, [r3, #20]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	68fa      	ldr	r2, [r7, #12]
 8005b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	689a      	ldr	r2, [r3, #8]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	4a0c      	ldr	r2, [pc, #48]	; (8005bb8 <TIM_Base_SetConfig+0xbc>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d007      	beq.n	8005b9c <TIM_Base_SetConfig+0xa0>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	4a0b      	ldr	r2, [pc, #44]	; (8005bbc <TIM_Base_SetConfig+0xc0>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d003      	beq.n	8005b9c <TIM_Base_SetConfig+0xa0>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a0a      	ldr	r2, [pc, #40]	; (8005bc0 <TIM_Base_SetConfig+0xc4>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d103      	bne.n	8005ba4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	691a      	ldr	r2, [r3, #16]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	615a      	str	r2, [r3, #20]
}
 8005baa:	bf00      	nop
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop
 8005bb8:	40012c00 	.word	0x40012c00
 8005bbc:	40014000 	.word	0x40014000
 8005bc0:	40014400 	.word	0x40014400

08005bc4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b087      	sub	sp, #28
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6a1b      	ldr	r3, [r3, #32]
 8005bd8:	f023 0201 	bic.w	r2, r3, #1
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	699b      	ldr	r3, [r3, #24]
 8005bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bf6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0303 	bic.w	r3, r3, #3
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	f023 0302 	bic.w	r3, r3, #2
 8005c10:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	697a      	ldr	r2, [r7, #20]
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a24      	ldr	r2, [pc, #144]	; (8005cb0 <TIM_OC1_SetConfig+0xec>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC1_SetConfig+0x70>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a23      	ldr	r2, [pc, #140]	; (8005cb4 <TIM_OC1_SetConfig+0xf0>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC1_SetConfig+0x70>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a22      	ldr	r2, [pc, #136]	; (8005cb8 <TIM_OC1_SetConfig+0xf4>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d10c      	bne.n	8005c4e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	f023 0308 	bic.w	r3, r3, #8
 8005c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	697a      	ldr	r2, [r7, #20]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f023 0304 	bic.w	r3, r3, #4
 8005c4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <TIM_OC1_SetConfig+0xec>)
 8005c52:	4293      	cmp	r3, r2
 8005c54:	d007      	beq.n	8005c66 <TIM_OC1_SetConfig+0xa2>
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	4a16      	ldr	r2, [pc, #88]	; (8005cb4 <TIM_OC1_SetConfig+0xf0>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d003      	beq.n	8005c66 <TIM_OC1_SetConfig+0xa2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	4a15      	ldr	r2, [pc, #84]	; (8005cb8 <TIM_OC1_SetConfig+0xf4>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d111      	bne.n	8005c8a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	695b      	ldr	r3, [r3, #20]
 8005c7a:	693a      	ldr	r2, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	699b      	ldr	r3, [r3, #24]
 8005c84:	693a      	ldr	r2, [r7, #16]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	693a      	ldr	r2, [r7, #16]
 8005c8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	685a      	ldr	r2, [r3, #4]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	697a      	ldr	r2, [r7, #20]
 8005ca2:	621a      	str	r2, [r3, #32]
}
 8005ca4:	bf00      	nop
 8005ca6:	371c      	adds	r7, #28
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cae:	4770      	bx	lr
 8005cb0:	40012c00 	.word	0x40012c00
 8005cb4:	40014000 	.word	0x40014000
 8005cb8:	40014400 	.word	0x40014400

08005cbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	b087      	sub	sp, #28
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
 8005cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a1b      	ldr	r3, [r3, #32]
 8005cca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a1b      	ldr	r3, [r3, #32]
 8005cd0:	f023 0210 	bic.w	r2, r3, #16
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	685b      	ldr	r3, [r3, #4]
 8005cdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	699b      	ldr	r3, [r3, #24]
 8005ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	021b      	lsls	r3, r3, #8
 8005cfe:	68fa      	ldr	r2, [r7, #12]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0320 	bic.w	r3, r3, #32
 8005d0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	011b      	lsls	r3, r3, #4
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	4313      	orrs	r3, r2
 8005d16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4a22      	ldr	r2, [pc, #136]	; (8005da4 <TIM_OC2_SetConfig+0xe8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d10d      	bne.n	8005d3c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	011b      	lsls	r3, r3, #4
 8005d2e:	697a      	ldr	r2, [r7, #20]
 8005d30:	4313      	orrs	r3, r2
 8005d32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	4a19      	ldr	r2, [pc, #100]	; (8005da4 <TIM_OC2_SetConfig+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d007      	beq.n	8005d54 <TIM_OC2_SetConfig+0x98>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <TIM_OC2_SetConfig+0xec>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC2_SetConfig+0x98>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a17      	ldr	r2, [pc, #92]	; (8005dac <TIM_OC2_SetConfig+0xf0>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d113      	bne.n	8005d7c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	695b      	ldr	r3, [r3, #20]
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	693a      	ldr	r2, [r7, #16]
 8005d6c:	4313      	orrs	r3, r2
 8005d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	699b      	ldr	r3, [r3, #24]
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	4313      	orrs	r3, r2
 8005d7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	685a      	ldr	r2, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	621a      	str	r2, [r3, #32]
}
 8005d96:	bf00      	nop
 8005d98:	371c      	adds	r7, #28
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40014400 	.word	0x40014400

08005db0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b087      	sub	sp, #28
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6a1b      	ldr	r3, [r3, #32]
 8005dbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	69db      	ldr	r3, [r3, #28]
 8005dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68fa      	ldr	r2, [r7, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005df6:	697b      	ldr	r3, [r7, #20]
 8005df8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	4a21      	ldr	r2, [pc, #132]	; (8005e94 <TIM_OC3_SetConfig+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d10d      	bne.n	8005e2e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68db      	ldr	r3, [r3, #12]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	4313      	orrs	r3, r2
 8005e24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005e2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	4a18      	ldr	r2, [pc, #96]	; (8005e94 <TIM_OC3_SetConfig+0xe4>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d007      	beq.n	8005e46 <TIM_OC3_SetConfig+0x96>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	4a17      	ldr	r2, [pc, #92]	; (8005e98 <TIM_OC3_SetConfig+0xe8>)
 8005e3a:	4293      	cmp	r3, r2
 8005e3c:	d003      	beq.n	8005e46 <TIM_OC3_SetConfig+0x96>
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	4a16      	ldr	r2, [pc, #88]	; (8005e9c <TIM_OC3_SetConfig+0xec>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d113      	bne.n	8005e6e <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005e4e:	693b      	ldr	r3, [r7, #16]
 8005e50:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	695b      	ldr	r3, [r3, #20]
 8005e5a:	011b      	lsls	r3, r3, #4
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	011b      	lsls	r3, r3, #4
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	693a      	ldr	r2, [r7, #16]
 8005e72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	68fa      	ldr	r2, [r7, #12]
 8005e78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	685a      	ldr	r2, [r3, #4]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	697a      	ldr	r2, [r7, #20]
 8005e86:	621a      	str	r2, [r3, #32]
}
 8005e88:	bf00      	nop
 8005e8a:	371c      	adds	r7, #28
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e92:	4770      	bx	lr
 8005e94:	40012c00 	.word	0x40012c00
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40014400 	.word	0x40014400

08005ea0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b087      	sub	sp, #28
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a1b      	ldr	r3, [r3, #32]
 8005eb4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	685b      	ldr	r3, [r3, #4]
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	69db      	ldr	r3, [r3, #28]
 8005ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ece:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ed2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	021b      	lsls	r3, r3, #8
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	031b      	lsls	r3, r3, #12
 8005ef6:	693a      	ldr	r2, [r7, #16]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	4a14      	ldr	r2, [pc, #80]	; (8005f50 <TIM_OC4_SetConfig+0xb0>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d007      	beq.n	8005f14 <TIM_OC4_SetConfig+0x74>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <TIM_OC4_SetConfig+0xb4>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d003      	beq.n	8005f14 <TIM_OC4_SetConfig+0x74>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	4a12      	ldr	r2, [pc, #72]	; (8005f58 <TIM_OC4_SetConfig+0xb8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d109      	bne.n	8005f28 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	695b      	ldr	r3, [r3, #20]
 8005f20:	019b      	lsls	r3, r3, #6
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	697a      	ldr	r2, [r7, #20]
 8005f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68fa      	ldr	r2, [r7, #12]
 8005f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	621a      	str	r2, [r3, #32]
}
 8005f42:	bf00      	nop
 8005f44:	371c      	adds	r7, #28
 8005f46:	46bd      	mov	sp, r7
 8005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4c:	4770      	bx	lr
 8005f4e:	bf00      	nop
 8005f50:	40012c00 	.word	0x40012c00
 8005f54:	40014000 	.word	0x40014000
 8005f58:	40014400 	.word	0x40014400

08005f5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b087      	sub	sp, #28
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6a1b      	ldr	r3, [r3, #32]
 8005f6a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6a1b      	ldr	r3, [r3, #32]
 8005f70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68fa      	ldr	r2, [r7, #12]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005fa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	041b      	lsls	r3, r3, #16
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	4313      	orrs	r3, r2
 8005fac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	; (8006000 <TIM_OC5_SetConfig+0xa4>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d007      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x6a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a12      	ldr	r2, [pc, #72]	; (8006004 <TIM_OC5_SetConfig+0xa8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d003      	beq.n	8005fc6 <TIM_OC5_SetConfig+0x6a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a11      	ldr	r2, [pc, #68]	; (8006008 <TIM_OC5_SetConfig+0xac>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d109      	bne.n	8005fda <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fcc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	021b      	lsls	r3, r3, #8
 8005fd4:	697a      	ldr	r2, [r7, #20]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	697a      	ldr	r2, [r7, #20]
 8005fde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	685a      	ldr	r2, [r3, #4]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	693a      	ldr	r2, [r7, #16]
 8005ff2:	621a      	str	r2, [r3, #32]
}
 8005ff4:	bf00      	nop
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40012c00 	.word	0x40012c00
 8006004:	40014000 	.word	0x40014000
 8006008:	40014400 	.word	0x40014400

0800600c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800600c:	b480      	push	{r7}
 800600e:	b087      	sub	sp, #28
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
 8006014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6a1b      	ldr	r3, [r3, #32]
 8006020:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800603a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800603e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	021b      	lsls	r3, r3, #8
 8006046:	68fa      	ldr	r2, [r7, #12]
 8006048:	4313      	orrs	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	051b      	lsls	r3, r3, #20
 800605a:	693a      	ldr	r2, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <TIM_OC6_SetConfig+0xa8>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d007      	beq.n	8006078 <TIM_OC6_SetConfig+0x6c>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	4a13      	ldr	r2, [pc, #76]	; (80060b8 <TIM_OC6_SetConfig+0xac>)
 800606c:	4293      	cmp	r3, r2
 800606e:	d003      	beq.n	8006078 <TIM_OC6_SetConfig+0x6c>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	4a12      	ldr	r2, [pc, #72]	; (80060bc <TIM_OC6_SetConfig+0xb0>)
 8006074:	4293      	cmp	r3, r2
 8006076:	d109      	bne.n	800608c <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800607e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	695b      	ldr	r3, [r3, #20]
 8006084:	029b      	lsls	r3, r3, #10
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	697a      	ldr	r2, [r7, #20]
 8006090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40014000 	.word	0x40014000
 80060bc:	40014400 	.word	0x40014400

080060c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b087      	sub	sp, #28
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6a1b      	ldr	r3, [r3, #32]
 80060d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1b      	ldr	r3, [r3, #32]
 80060d6:	f023 0201 	bic.w	r2, r3, #1
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	f023 030a 	bic.w	r3, r3, #10
 80060fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80060fe:	697a      	ldr	r2, [r7, #20]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	693a      	ldr	r2, [r7, #16]
 800610a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	621a      	str	r2, [r3, #32]
}
 8006112:	bf00      	nop
 8006114:	371c      	adds	r7, #28
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr

0800611e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800611e:	b480      	push	{r7}
 8006120:	b087      	sub	sp, #28
 8006122:	af00      	add	r7, sp, #0
 8006124:	60f8      	str	r0, [r7, #12]
 8006126:	60b9      	str	r1, [r7, #8]
 8006128:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6a1b      	ldr	r3, [r3, #32]
 8006134:	f023 0210 	bic.w	r2, r3, #16
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	699b      	ldr	r3, [r3, #24]
 8006140:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006148:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	031b      	lsls	r3, r3, #12
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	697a      	ldr	r2, [r7, #20]
 8006162:	4313      	orrs	r3, r2
 8006164:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	621a      	str	r2, [r3, #32]
}
 8006172:	bf00      	nop
 8006174:	371c      	adds	r7, #28
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr

0800617e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800617e:	b480      	push	{r7}
 8006180:	b085      	sub	sp, #20
 8006182:	af00      	add	r7, sp, #0
 8006184:	6078      	str	r0, [r7, #4]
 8006186:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006194:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006196:	683a      	ldr	r2, [r7, #0]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4313      	orrs	r3, r2
 800619c:	f043 0307 	orr.w	r3, r3, #7
 80061a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	68fa      	ldr	r2, [r7, #12]
 80061a6:	609a      	str	r2, [r3, #8]
}
 80061a8:	bf00      	nop
 80061aa:	3714      	adds	r7, #20
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b087      	sub	sp, #28
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	60b9      	str	r1, [r7, #8]
 80061be:	607a      	str	r2, [r7, #4]
 80061c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061d0:	683b      	ldr	r3, [r7, #0]
 80061d2:	021a      	lsls	r2, r3, #8
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	431a      	orrs	r2, r3
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	4313      	orrs	r3, r2
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	697a      	ldr	r2, [r7, #20]
 80061e6:	609a      	str	r2, [r3, #8]
}
 80061e8:	bf00      	nop
 80061ea:	371c      	adds	r7, #28
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b085      	sub	sp, #20
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
 80061fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006204:	2b01      	cmp	r3, #1
 8006206:	d101      	bne.n	800620c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006208:	2302      	movs	r3, #2
 800620a:	e04f      	b.n	80062ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2201      	movs	r2, #1
 8006210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	689b      	ldr	r3, [r3, #8]
 800622a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a21      	ldr	r2, [pc, #132]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d108      	bne.n	8006248 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800623c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	68fa      	ldr	r2, [r7, #12]
 8006244:	4313      	orrs	r3, r2
 8006246:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	4313      	orrs	r3, r2
 8006258:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68fa      	ldr	r2, [r7, #12]
 8006260:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a14      	ldr	r2, [pc, #80]	; (80062b8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006274:	d004      	beq.n	8006280 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a10      	ldr	r2, [pc, #64]	; (80062bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d10c      	bne.n	800629a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006286:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	68ba      	ldr	r2, [r7, #8]
 800628e:	4313      	orrs	r3, r2
 8006290:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2201      	movs	r2, #1
 800629e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062aa:	2300      	movs	r3, #0
}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	40012c00 	.word	0x40012c00
 80062bc:	40014000 	.word	0x40014000

080062c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062c8:	bf00      	nop
 80062ca:	370c      	adds	r7, #12
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b083      	sub	sp, #12
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b083      	sub	sp, #12
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e040      	b.n	8006390 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d106      	bne.n	8006324 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fa fe9a 	bl	8001058 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2224      	movs	r2, #36	; 0x24
 8006328:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f022 0201 	bic.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f000 fa54 	bl	80067f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f000 f825 	bl	8006398 <UART_SetConfig>
 800634e:	4603      	mov	r3, r0
 8006350:	2b01      	cmp	r3, #1
 8006352:	d101      	bne.n	8006358 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e01b      	b.n	8006390 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	685a      	ldr	r2, [r3, #4]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006366:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	689a      	ldr	r2, [r3, #8]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006376:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0201 	orr.w	r2, r2, #1
 8006386:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fad3 	bl	8006934 <UART_CheckIdleState>
 800638e:	4603      	mov	r3, r0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3708      	adds	r7, #8
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006398:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800639c:	b08a      	sub	sp, #40	; 0x28
 800639e:	af00      	add	r7, sp, #0
 80063a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	691b      	ldr	r3, [r3, #16]
 80063b0:	431a      	orrs	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	695b      	ldr	r3, [r3, #20]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	69db      	ldr	r3, [r3, #28]
 80063bc:	4313      	orrs	r3, r2
 80063be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	4bb4      	ldr	r3, [pc, #720]	; (8006698 <UART_SetConfig+0x300>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	68fa      	ldr	r2, [r7, #12]
 80063cc:	6812      	ldr	r2, [r2, #0]
 80063ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80063d0:	430b      	orrs	r3, r1
 80063d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	68da      	ldr	r2, [r3, #12]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4aa9      	ldr	r2, [pc, #676]	; (800669c <UART_SetConfig+0x304>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d004      	beq.n	8006404 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6a1b      	ldr	r3, [r3, #32]
 80063fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006400:	4313      	orrs	r3, r2
 8006402:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006414:	430a      	orrs	r2, r1
 8006416:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	4aa0      	ldr	r2, [pc, #640]	; (80066a0 <UART_SetConfig+0x308>)
 800641e:	4293      	cmp	r3, r2
 8006420:	d126      	bne.n	8006470 <UART_SetConfig+0xd8>
 8006422:	4ba0      	ldr	r3, [pc, #640]	; (80066a4 <UART_SetConfig+0x30c>)
 8006424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006428:	f003 0303 	and.w	r3, r3, #3
 800642c:	2b03      	cmp	r3, #3
 800642e:	d81b      	bhi.n	8006468 <UART_SetConfig+0xd0>
 8006430:	a201      	add	r2, pc, #4	; (adr r2, 8006438 <UART_SetConfig+0xa0>)
 8006432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006436:	bf00      	nop
 8006438:	08006449 	.word	0x08006449
 800643c:	08006459 	.word	0x08006459
 8006440:	08006451 	.word	0x08006451
 8006444:	08006461 	.word	0x08006461
 8006448:	2301      	movs	r3, #1
 800644a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800644e:	e080      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006450:	2302      	movs	r3, #2
 8006452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006456:	e07c      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006458:	2304      	movs	r3, #4
 800645a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800645e:	e078      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006460:	2308      	movs	r3, #8
 8006462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006466:	e074      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006468:	2310      	movs	r3, #16
 800646a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800646e:	e070      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a8c      	ldr	r2, [pc, #560]	; (80066a8 <UART_SetConfig+0x310>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d138      	bne.n	80064ec <UART_SetConfig+0x154>
 800647a:	4b8a      	ldr	r3, [pc, #552]	; (80066a4 <UART_SetConfig+0x30c>)
 800647c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006480:	f003 030c 	and.w	r3, r3, #12
 8006484:	2b0c      	cmp	r3, #12
 8006486:	d82d      	bhi.n	80064e4 <UART_SetConfig+0x14c>
 8006488:	a201      	add	r2, pc, #4	; (adr r2, 8006490 <UART_SetConfig+0xf8>)
 800648a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800648e:	bf00      	nop
 8006490:	080064c5 	.word	0x080064c5
 8006494:	080064e5 	.word	0x080064e5
 8006498:	080064e5 	.word	0x080064e5
 800649c:	080064e5 	.word	0x080064e5
 80064a0:	080064d5 	.word	0x080064d5
 80064a4:	080064e5 	.word	0x080064e5
 80064a8:	080064e5 	.word	0x080064e5
 80064ac:	080064e5 	.word	0x080064e5
 80064b0:	080064cd 	.word	0x080064cd
 80064b4:	080064e5 	.word	0x080064e5
 80064b8:	080064e5 	.word	0x080064e5
 80064bc:	080064e5 	.word	0x080064e5
 80064c0:	080064dd 	.word	0x080064dd
 80064c4:	2300      	movs	r3, #0
 80064c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ca:	e042      	b.n	8006552 <UART_SetConfig+0x1ba>
 80064cc:	2302      	movs	r3, #2
 80064ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064d2:	e03e      	b.n	8006552 <UART_SetConfig+0x1ba>
 80064d4:	2304      	movs	r3, #4
 80064d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064da:	e03a      	b.n	8006552 <UART_SetConfig+0x1ba>
 80064dc:	2308      	movs	r3, #8
 80064de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064e2:	e036      	b.n	8006552 <UART_SetConfig+0x1ba>
 80064e4:	2310      	movs	r3, #16
 80064e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80064ea:	e032      	b.n	8006552 <UART_SetConfig+0x1ba>
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a6a      	ldr	r2, [pc, #424]	; (800669c <UART_SetConfig+0x304>)
 80064f2:	4293      	cmp	r3, r2
 80064f4:	d12a      	bne.n	800654c <UART_SetConfig+0x1b4>
 80064f6:	4b6b      	ldr	r3, [pc, #428]	; (80066a4 <UART_SetConfig+0x30c>)
 80064f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064fc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006500:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006504:	d01a      	beq.n	800653c <UART_SetConfig+0x1a4>
 8006506:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800650a:	d81b      	bhi.n	8006544 <UART_SetConfig+0x1ac>
 800650c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006510:	d00c      	beq.n	800652c <UART_SetConfig+0x194>
 8006512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006516:	d815      	bhi.n	8006544 <UART_SetConfig+0x1ac>
 8006518:	2b00      	cmp	r3, #0
 800651a:	d003      	beq.n	8006524 <UART_SetConfig+0x18c>
 800651c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006520:	d008      	beq.n	8006534 <UART_SetConfig+0x19c>
 8006522:	e00f      	b.n	8006544 <UART_SetConfig+0x1ac>
 8006524:	2300      	movs	r3, #0
 8006526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800652a:	e012      	b.n	8006552 <UART_SetConfig+0x1ba>
 800652c:	2302      	movs	r3, #2
 800652e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006532:	e00e      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006534:	2304      	movs	r3, #4
 8006536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800653a:	e00a      	b.n	8006552 <UART_SetConfig+0x1ba>
 800653c:	2308      	movs	r3, #8
 800653e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006542:	e006      	b.n	8006552 <UART_SetConfig+0x1ba>
 8006544:	2310      	movs	r3, #16
 8006546:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800654a:	e002      	b.n	8006552 <UART_SetConfig+0x1ba>
 800654c:	2310      	movs	r3, #16
 800654e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a51      	ldr	r2, [pc, #324]	; (800669c <UART_SetConfig+0x304>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d17a      	bne.n	8006652 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800655c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006560:	2b08      	cmp	r3, #8
 8006562:	d824      	bhi.n	80065ae <UART_SetConfig+0x216>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x1d4>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006591 	.word	0x08006591
 8006570:	080065af 	.word	0x080065af
 8006574:	08006599 	.word	0x08006599
 8006578:	080065af 	.word	0x080065af
 800657c:	0800659f 	.word	0x0800659f
 8006580:	080065af 	.word	0x080065af
 8006584:	080065af 	.word	0x080065af
 8006588:	080065af 	.word	0x080065af
 800658c:	080065a7 	.word	0x080065a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fe fc00 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8006594:	61f8      	str	r0, [r7, #28]
        break;
 8006596:	e010      	b.n	80065ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006598:	4b44      	ldr	r3, [pc, #272]	; (80066ac <UART_SetConfig+0x314>)
 800659a:	61fb      	str	r3, [r7, #28]
        break;
 800659c:	e00d      	b.n	80065ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800659e:	f7fe fb61 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 80065a2:	61f8      	str	r0, [r7, #28]
        break;
 80065a4:	e009      	b.n	80065ba <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065aa:	61fb      	str	r3, [r7, #28]
        break;
 80065ac:	e005      	b.n	80065ba <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80065ae:	2300      	movs	r3, #0
 80065b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80065b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80065ba:	69fb      	ldr	r3, [r7, #28]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	f000 8107 	beq.w	80067d0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	4613      	mov	r3, r2
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	4413      	add	r3, r2
 80065cc:	69fa      	ldr	r2, [r7, #28]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	d305      	bcc.n	80065de <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80065d8:	69fa      	ldr	r2, [r7, #28]
 80065da:	429a      	cmp	r2, r3
 80065dc:	d903      	bls.n	80065e6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80065e4:	e0f4      	b.n	80067d0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	2200      	movs	r2, #0
 80065ea:	461c      	mov	r4, r3
 80065ec:	4615      	mov	r5, r2
 80065ee:	f04f 0200 	mov.w	r2, #0
 80065f2:	f04f 0300 	mov.w	r3, #0
 80065f6:	022b      	lsls	r3, r5, #8
 80065f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80065fc:	0222      	lsls	r2, r4, #8
 80065fe:	68f9      	ldr	r1, [r7, #12]
 8006600:	6849      	ldr	r1, [r1, #4]
 8006602:	0849      	lsrs	r1, r1, #1
 8006604:	2000      	movs	r0, #0
 8006606:	4688      	mov	r8, r1
 8006608:	4681      	mov	r9, r0
 800660a:	eb12 0a08 	adds.w	sl, r2, r8
 800660e:	eb43 0b09 	adc.w	fp, r3, r9
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	607a      	str	r2, [r7, #4]
 800661c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006620:	4650      	mov	r0, sl
 8006622:	4659      	mov	r1, fp
 8006624:	f7f9 fdd2 	bl	80001cc <__aeabi_uldivmod>
 8006628:	4602      	mov	r2, r0
 800662a:	460b      	mov	r3, r1
 800662c:	4613      	mov	r3, r2
 800662e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006630:	69bb      	ldr	r3, [r7, #24]
 8006632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006636:	d308      	bcc.n	800664a <UART_SetConfig+0x2b2>
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800663e:	d204      	bcs.n	800664a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	69ba      	ldr	r2, [r7, #24]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	e0c2      	b.n	80067d0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006650:	e0be      	b.n	80067d0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800665a:	d16a      	bne.n	8006732 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800665c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006660:	2b08      	cmp	r3, #8
 8006662:	d834      	bhi.n	80066ce <UART_SetConfig+0x336>
 8006664:	a201      	add	r2, pc, #4	; (adr r2, 800666c <UART_SetConfig+0x2d4>)
 8006666:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800666a:	bf00      	nop
 800666c:	08006691 	.word	0x08006691
 8006670:	080066b1 	.word	0x080066b1
 8006674:	080066b9 	.word	0x080066b9
 8006678:	080066cf 	.word	0x080066cf
 800667c:	080066bf 	.word	0x080066bf
 8006680:	080066cf 	.word	0x080066cf
 8006684:	080066cf 	.word	0x080066cf
 8006688:	080066cf 	.word	0x080066cf
 800668c:	080066c7 	.word	0x080066c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006690:	f7fe fb80 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8006694:	61f8      	str	r0, [r7, #28]
        break;
 8006696:	e020      	b.n	80066da <UART_SetConfig+0x342>
 8006698:	efff69f3 	.word	0xefff69f3
 800669c:	40008000 	.word	0x40008000
 80066a0:	40013800 	.word	0x40013800
 80066a4:	40021000 	.word	0x40021000
 80066a8:	40004400 	.word	0x40004400
 80066ac:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066b0:	f7fe fb86 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 80066b4:	61f8      	str	r0, [r7, #28]
        break;
 80066b6:	e010      	b.n	80066da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b8:	4b4c      	ldr	r3, [pc, #304]	; (80067ec <UART_SetConfig+0x454>)
 80066ba:	61fb      	str	r3, [r7, #28]
        break;
 80066bc:	e00d      	b.n	80066da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066be:	f7fe fad1 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 80066c2:	61f8      	str	r0, [r7, #28]
        break;
 80066c4:	e009      	b.n	80066da <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066ca:	61fb      	str	r3, [r7, #28]
        break;
 80066cc:	e005      	b.n	80066da <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80066d2:	2301      	movs	r3, #1
 80066d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80066d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80066da:	69fb      	ldr	r3, [r7, #28]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d077      	beq.n	80067d0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	005a      	lsls	r2, r3, #1
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	085b      	lsrs	r3, r3, #1
 80066ea:	441a      	add	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80066f4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	2b0f      	cmp	r3, #15
 80066fa:	d916      	bls.n	800672a <UART_SetConfig+0x392>
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006702:	d212      	bcs.n	800672a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006704:	69bb      	ldr	r3, [r7, #24]
 8006706:	b29b      	uxth	r3, r3
 8006708:	f023 030f 	bic.w	r3, r3, #15
 800670c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800670e:	69bb      	ldr	r3, [r7, #24]
 8006710:	085b      	lsrs	r3, r3, #1
 8006712:	b29b      	uxth	r3, r3
 8006714:	f003 0307 	and.w	r3, r3, #7
 8006718:	b29a      	uxth	r2, r3
 800671a:	8afb      	ldrh	r3, [r7, #22]
 800671c:	4313      	orrs	r3, r2
 800671e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	8afa      	ldrh	r2, [r7, #22]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	e052      	b.n	80067d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006730:	e04e      	b.n	80067d0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006732:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006736:	2b08      	cmp	r3, #8
 8006738:	d827      	bhi.n	800678a <UART_SetConfig+0x3f2>
 800673a:	a201      	add	r2, pc, #4	; (adr r2, 8006740 <UART_SetConfig+0x3a8>)
 800673c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006740:	08006765 	.word	0x08006765
 8006744:	0800676d 	.word	0x0800676d
 8006748:	08006775 	.word	0x08006775
 800674c:	0800678b 	.word	0x0800678b
 8006750:	0800677b 	.word	0x0800677b
 8006754:	0800678b 	.word	0x0800678b
 8006758:	0800678b 	.word	0x0800678b
 800675c:	0800678b 	.word	0x0800678b
 8006760:	08006783 	.word	0x08006783
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fb16 	bl	8004d94 <HAL_RCC_GetPCLK1Freq>
 8006768:	61f8      	str	r0, [r7, #28]
        break;
 800676a:	e014      	b.n	8006796 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800676c:	f7fe fb28 	bl	8004dc0 <HAL_RCC_GetPCLK2Freq>
 8006770:	61f8      	str	r0, [r7, #28]
        break;
 8006772:	e010      	b.n	8006796 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006774:	4b1d      	ldr	r3, [pc, #116]	; (80067ec <UART_SetConfig+0x454>)
 8006776:	61fb      	str	r3, [r7, #28]
        break;
 8006778:	e00d      	b.n	8006796 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800677a:	f7fe fa73 	bl	8004c64 <HAL_RCC_GetSysClockFreq>
 800677e:	61f8      	str	r0, [r7, #28]
        break;
 8006780:	e009      	b.n	8006796 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006782:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006786:	61fb      	str	r3, [r7, #28]
        break;
 8006788:	e005      	b.n	8006796 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800678a:	2300      	movs	r3, #0
 800678c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006794:	bf00      	nop
    }

    if (pclk != 0U)
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d019      	beq.n	80067d0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	085a      	lsrs	r2, r3, #1
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80067ae:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067b0:	69bb      	ldr	r3, [r7, #24]
 80067b2:	2b0f      	cmp	r3, #15
 80067b4:	d909      	bls.n	80067ca <UART_SetConfig+0x432>
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067bc:	d205      	bcs.n	80067ca <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80067be:	69bb      	ldr	r3, [r7, #24]
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	60da      	str	r2, [r3, #12]
 80067c8:	e002      	b.n	80067d0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2200      	movs	r2, #0
 80067d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2200      	movs	r2, #0
 80067da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80067dc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3728      	adds	r7, #40	; 0x28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067ea:	bf00      	nop
 80067ec:	00f42400 	.word	0x00f42400

080067f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	f003 0308 	and.w	r3, r3, #8
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	430a      	orrs	r2, r1
 8006818:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	430a      	orrs	r2, r1
 800683a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f003 0302 	and.w	r3, r3, #2
 8006844:	2b00      	cmp	r3, #0
 8006846:	d00a      	beq.n	800685e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	430a      	orrs	r2, r1
 800685c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	f003 0304 	and.w	r3, r3, #4
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00a      	beq.n	8006880 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	430a      	orrs	r2, r1
 800687e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006884:	f003 0310 	and.w	r3, r3, #16
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00a      	beq.n	80068a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	430a      	orrs	r2, r1
 80068a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a6:	f003 0320 	and.w	r3, r3, #32
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00a      	beq.n	80068c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	430a      	orrs	r2, r1
 80068c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d01a      	beq.n	8006906 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	430a      	orrs	r2, r1
 80068e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80068ee:	d10a      	bne.n	8006906 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	430a      	orrs	r2, r1
 8006904:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00a      	beq.n	8006928 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	430a      	orrs	r2, r1
 8006926:	605a      	str	r2, [r3, #4]
  }
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b098      	sub	sp, #96	; 0x60
 8006938:	af02      	add	r7, sp, #8
 800693a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006944:	f7fa fc84 	bl	8001250 <HAL_GetTick>
 8006948:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f003 0308 	and.w	r3, r3, #8
 8006954:	2b08      	cmp	r3, #8
 8006956:	d12e      	bne.n	80069b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800695c:	9300      	str	r3, [sp, #0]
 800695e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006960:	2200      	movs	r2, #0
 8006962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006966:	6878      	ldr	r0, [r7, #4]
 8006968:	f000 f88c 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 800696c:	4603      	mov	r3, r0
 800696e:	2b00      	cmp	r3, #0
 8006970:	d021      	beq.n	80069b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800697a:	e853 3f00 	ldrex	r3, [r3]
 800697e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006986:	653b      	str	r3, [r7, #80]	; 0x50
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	461a      	mov	r2, r3
 800698e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006990:	647b      	str	r3, [r7, #68]	; 0x44
 8006992:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006994:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006996:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006998:	e841 2300 	strex	r3, r2, [r1]
 800699c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800699e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d1e6      	bne.n	8006972 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2220      	movs	r2, #32
 80069a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e062      	b.n	8006a7c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
 80069c0:	2b04      	cmp	r3, #4
 80069c2:	d149      	bne.n	8006a58 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f856 	bl	8006a84 <UART_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03c      	beq.n	8006a58 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e6:	e853 3f00 	ldrex	r3, [r3]
 80069ea:	623b      	str	r3, [r7, #32]
   return(result);
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	461a      	mov	r2, r3
 80069fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069fc:	633b      	str	r3, [r7, #48]	; 0x30
 80069fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a00:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a04:	e841 2300 	strex	r3, r2, [r1]
 8006a08:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d1e6      	bne.n	80069de <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	3308      	adds	r3, #8
 8006a16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	e853 3f00 	ldrex	r3, [r3]
 8006a1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f023 0301 	bic.w	r3, r3, #1
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a30:	61fa      	str	r2, [r7, #28]
 8006a32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	69b9      	ldr	r1, [r7, #24]
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e5      	bne.n	8006a10 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2220      	movs	r2, #32
 8006a48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2200      	movs	r2, #0
 8006a50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e011      	b.n	8006a7c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2220      	movs	r2, #32
 8006a5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006a7a:	2300      	movs	r3, #0
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3758      	adds	r7, #88	; 0x58
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	603b      	str	r3, [r7, #0]
 8006a90:	4613      	mov	r3, r2
 8006a92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a94:	e049      	b.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a96:	69bb      	ldr	r3, [r7, #24]
 8006a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9c:	d045      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a9e:	f7fa fbd7 	bl	8001250 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d302      	bcc.n	8006ab4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d101      	bne.n	8006ab8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006ab4:	2303      	movs	r3, #3
 8006ab6:	e048      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d031      	beq.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	69db      	ldr	r3, [r3, #28]
 8006acc:	f003 0308 	and.w	r3, r3, #8
 8006ad0:	2b08      	cmp	r3, #8
 8006ad2:	d110      	bne.n	8006af6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	2208      	movs	r2, #8
 8006ada:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006adc:	68f8      	ldr	r0, [r7, #12]
 8006ade:	f000 f838 	bl	8006b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	2208      	movs	r2, #8
 8006ae6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2200      	movs	r2, #0
 8006aee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e029      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	69db      	ldr	r3, [r3, #28]
 8006afc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006b04:	d111      	bne.n	8006b2a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006b0e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006b10:	68f8      	ldr	r0, [r7, #12]
 8006b12:	f000 f81e 	bl	8006b52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2220      	movs	r2, #32
 8006b1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006b26:	2303      	movs	r3, #3
 8006b28:	e00f      	b.n	8006b4a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	69da      	ldr	r2, [r3, #28]
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	4013      	ands	r3, r2
 8006b34:	68ba      	ldr	r2, [r7, #8]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	bf0c      	ite	eq
 8006b3a:	2301      	moveq	r3, #1
 8006b3c:	2300      	movne	r3, #0
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	461a      	mov	r2, r3
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d0a6      	beq.n	8006a96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006b52:	b480      	push	{r7}
 8006b54:	b095      	sub	sp, #84	; 0x54
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	461a      	mov	r2, r3
 8006b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b78:	643b      	str	r3, [r7, #64]	; 0x40
 8006b7a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006b7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006b80:	e841 2300 	strex	r3, r2, [r1]
 8006b84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1e6      	bne.n	8006b5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	3308      	adds	r3, #8
 8006b92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	e853 3f00 	ldrex	r3, [r3]
 8006b9a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	f023 0301 	bic.w	r3, r3, #1
 8006ba2:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3308      	adds	r3, #8
 8006baa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bac:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bb4:	e841 2300 	strex	r3, r2, [r1]
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1e5      	bne.n	8006b8c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d118      	bne.n	8006bfa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	e853 3f00 	ldrex	r3, [r3]
 8006bd4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	f023 0310 	bic.w	r3, r3, #16
 8006bdc:	647b      	str	r3, [r7, #68]	; 0x44
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	461a      	mov	r2, r3
 8006be4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006be6:	61bb      	str	r3, [r7, #24]
 8006be8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bea:	6979      	ldr	r1, [r7, #20]
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	e841 2300 	strex	r3, r2, [r1]
 8006bf2:	613b      	str	r3, [r7, #16]
   return(result);
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d1e6      	bne.n	8006bc8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2200      	movs	r2, #0
 8006c06:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006c0e:	bf00      	nop
 8006c10:	3754      	adds	r7, #84	; 0x54
 8006c12:	46bd      	mov	sp, r7
 8006c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c18:	4770      	bx	lr

08006c1a <memset>:
 8006c1a:	4402      	add	r2, r0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d100      	bne.n	8006c24 <memset+0xa>
 8006c22:	4770      	bx	lr
 8006c24:	f803 1b01 	strb.w	r1, [r3], #1
 8006c28:	e7f9      	b.n	8006c1e <memset+0x4>
	...

08006c2c <__libc_init_array>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	4d0d      	ldr	r5, [pc, #52]	; (8006c64 <__libc_init_array+0x38>)
 8006c30:	4c0d      	ldr	r4, [pc, #52]	; (8006c68 <__libc_init_array+0x3c>)
 8006c32:	1b64      	subs	r4, r4, r5
 8006c34:	10a4      	asrs	r4, r4, #2
 8006c36:	2600      	movs	r6, #0
 8006c38:	42a6      	cmp	r6, r4
 8006c3a:	d109      	bne.n	8006c50 <__libc_init_array+0x24>
 8006c3c:	4d0b      	ldr	r5, [pc, #44]	; (8006c6c <__libc_init_array+0x40>)
 8006c3e:	4c0c      	ldr	r4, [pc, #48]	; (8006c70 <__libc_init_array+0x44>)
 8006c40:	f000 f818 	bl	8006c74 <_init>
 8006c44:	1b64      	subs	r4, r4, r5
 8006c46:	10a4      	asrs	r4, r4, #2
 8006c48:	2600      	movs	r6, #0
 8006c4a:	42a6      	cmp	r6, r4
 8006c4c:	d105      	bne.n	8006c5a <__libc_init_array+0x2e>
 8006c4e:	bd70      	pop	{r4, r5, r6, pc}
 8006c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c54:	4798      	blx	r3
 8006c56:	3601      	adds	r6, #1
 8006c58:	e7ee      	b.n	8006c38 <__libc_init_array+0xc>
 8006c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006c5e:	4798      	blx	r3
 8006c60:	3601      	adds	r6, #1
 8006c62:	e7f2      	b.n	8006c4a <__libc_init_array+0x1e>
 8006c64:	08006cdc 	.word	0x08006cdc
 8006c68:	08006cdc 	.word	0x08006cdc
 8006c6c:	08006cdc 	.word	0x08006cdc
 8006c70:	08006ce0 	.word	0x08006ce0

08006c74 <_init>:
 8006c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c76:	bf00      	nop
 8006c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c7a:	bc08      	pop	{r3}
 8006c7c:	469e      	mov	lr, r3
 8006c7e:	4770      	bx	lr

08006c80 <_fini>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr
